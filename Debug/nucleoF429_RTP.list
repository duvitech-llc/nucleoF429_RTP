
nucleoF429_RTP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000181cc  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003658  0801837c  0801837c  0001937c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b9d4  0801b9d4  0001d094  2**0
                  CONTENTS
  4 .ARM          00000008  0801b9d4  0801b9d4  0001c9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b9dc  0801b9dc  0001d094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b9dc  0801b9dc  0001c9dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b9e0  0801b9e0  0001c9e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  0801b9e4  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001d094  2**0
                  CONTENTS
 10 .bss          0000cd2c  20000094  20000094  0001d094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000cdc0  2000cdc0  0001d094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001d094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00034717  00000000  00000000  0001d0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008864  00000000  00000000  000517db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002638  00000000  00000000  0005a040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001e2c  00000000  00000000  0005c678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00036847  00000000  00000000  0005e4a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003d251  00000000  00000000  00094ceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00108332  00000000  00000000  000d1f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001da26e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a758  00000000  00000000  001da2b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  001e4a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08018364 	.word	0x08018364

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	08018364 	.word	0x08018364

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	4a07      	ldr	r2, [pc, #28]	@ (80005bc <vApplicationGetIdleTaskMemory+0x2c>)
 80005a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	4a06      	ldr	r2, [pc, #24]	@ (80005c0 <vApplicationGetIdleTaskMemory+0x30>)
 80005a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2280      	movs	r2, #128	@ 0x80
 80005ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	200000b0 	.word	0x200000b0
 80005c0:	20000150 	.word	0x20000150

080005c4 <_write>:
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


#ifdef __GNUC__
int _write(int fd, const void *buf, size_t count){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
	UNUSED(fd);
	uint8_t * src = (uint8_t *)buf;
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	617b      	str	r3, [r7, #20]
	if(bInit_dma)
 80005d4:	4b12      	ldr	r3, [pc, #72]	@ (8000620 <_write+0x5c>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d00e      	beq.n	80005fa <_write+0x36>
	{
	    if (lwrb_get_free(&usart_tx_buff) >= count) {
 80005dc:	4811      	ldr	r0, [pc, #68]	@ (8000624 <_write+0x60>)
 80005de:	f000 f945 	bl	800086c <lwrb_get_free>
 80005e2:	4602      	mov	r2, r0
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d815      	bhi.n	8000616 <_write+0x52>
	        lwrb_write(&usart_tx_buff, buf, count);
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	68b9      	ldr	r1, [r7, #8]
 80005ee:	480d      	ldr	r0, [pc, #52]	@ (8000624 <_write+0x60>)
 80005f0:	f000 f8ba 	bl	8000768 <lwrb_write>
	        usart_start_tx_dma_transfer();
 80005f4:	f000 f832 	bl	800065c <usart_start_tx_dma_transfer>
 80005f8:	e00d      	b.n	8000616 <_write+0x52>
	    }
	}
	else
	{
		HAL_StatusTypeDef com_tx_status = HAL_UART_Transmit(&huart3, src, count, 10);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	230a      	movs	r3, #10
 8000600:	6979      	ldr	r1, [r7, #20]
 8000602:	4809      	ldr	r0, [pc, #36]	@ (8000628 <_write+0x64>)
 8000604:	f004 fd7a 	bl	80050fc <HAL_UART_Transmit>
 8000608:	4603      	mov	r3, r0
 800060a:	74fb      	strb	r3, [r7, #19]
		if(com_tx_status != HAL_OK)
 800060c:	7cfb      	ldrb	r3, [r7, #19]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <_write+0x52>
		{
			Error_Handler();
 8000612:	f000 fc9d 	bl	8000f50 <Error_Handler>
		}
	}

	return count;
 8000616:	687b      	ldr	r3, [r7, #4]
}
 8000618:	4618      	mov	r0, r3
 800061a:	3718      	adds	r7, #24
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000350 	.word	0x20000350
 8000624:	20000354 	.word	0x20000354
 8000628:	2000079c 	.word	0x2000079c

0800062c <init_dma_logging>:
  return ch;
}
#endif

void init_dma_logging()
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
    /* Initialize ringbuff */
    lwrb_init(&usart_tx_buff, usart_tx_buff_data, sizeof(usart_tx_buff_data));
 8000630:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000634:	4905      	ldr	r1, [pc, #20]	@ (800064c <init_dma_logging+0x20>)
 8000636:	4806      	ldr	r0, [pc, #24]	@ (8000650 <init_dma_logging+0x24>)
 8000638:	f000 f86a 	bl	8000710 <lwrb_init>

    bInit_dma = true;
 800063c:	4b05      	ldr	r3, [pc, #20]	@ (8000654 <init_dma_logging+0x28>)
 800063e:	2201      	movs	r2, #1
 8000640:	701a      	strb	r2, [r3, #0]
	bPrintfTransferComplete = true;
 8000642:	4b05      	ldr	r3, [pc, #20]	@ (8000658 <init_dma_logging+0x2c>)
 8000644:	2201      	movs	r2, #1
 8000646:	701a      	strb	r2, [r3, #0]
}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000370 	.word	0x20000370
 8000650:	20000354 	.word	0x20000354
 8000654:	20000350 	.word	0x20000350
 8000658:	20000351 	.word	0x20000351

0800065c <usart_start_tx_dma_transfer>:

bool is_using_dma(){
	return bInit_dma;
}

static uint8_t usart_start_tx_dma_transfer(void) {
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
    if (usart_tx_dma_current_len == 0 && (usart_tx_dma_current_len = lwrb_get_linear_block_read_length(&usart_tx_buff)) > 0) {
 8000660:	4b14      	ldr	r3, [pc, #80]	@ (80006b4 <usart_start_tx_dma_transfer+0x58>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d121      	bne.n	80006ac <usart_start_tx_dma_transfer+0x50>
 8000668:	4813      	ldr	r0, [pc, #76]	@ (80006b8 <usart_start_tx_dma_transfer+0x5c>)
 800066a:	f000 f9b3 	bl	80009d4 <lwrb_get_linear_block_read_length>
 800066e:	4603      	mov	r3, r0
 8000670:	4a10      	ldr	r2, [pc, #64]	@ (80006b4 <usart_start_tx_dma_transfer+0x58>)
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d019      	beq.n	80006ac <usart_start_tx_dma_transfer+0x50>

        /* Limit maximal size to transmit at a time */
        if (usart_tx_dma_current_len > 32) {
 8000678:	4b0e      	ldr	r3, [pc, #56]	@ (80006b4 <usart_start_tx_dma_transfer+0x58>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2b20      	cmp	r3, #32
 800067e:	d902      	bls.n	8000686 <usart_start_tx_dma_transfer+0x2a>
            usart_tx_dma_current_len = 32;
 8000680:	4b0c      	ldr	r3, [pc, #48]	@ (80006b4 <usart_start_tx_dma_transfer+0x58>)
 8000682:	2220      	movs	r2, #32
 8000684:	601a      	str	r2, [r3, #0]
        }
    	bPrintfTransferComplete = false;
 8000686:	4b0d      	ldr	r3, [pc, #52]	@ (80006bc <usart_start_tx_dma_transfer+0x60>)
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
		if(HAL_UART_Transmit_DMA(&huart3, (uint8_t*)lwrb_get_linear_block_read_address(&usart_tx_buff), usart_tx_dma_current_len)!= HAL_OK)
 800068c:	480a      	ldr	r0, [pc, #40]	@ (80006b8 <usart_start_tx_dma_transfer+0x5c>)
 800068e:	f000 f977 	bl	8000980 <lwrb_get_linear_block_read_address>
 8000692:	4601      	mov	r1, r0
 8000694:	4b07      	ldr	r3, [pc, #28]	@ (80006b4 <usart_start_tx_dma_transfer+0x58>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	b29b      	uxth	r3, r3
 800069a:	461a      	mov	r2, r3
 800069c:	4808      	ldr	r0, [pc, #32]	@ (80006c0 <usart_start_tx_dma_transfer+0x64>)
 800069e:	f004 fdb9 	bl	8005214 <HAL_UART_Transmit_DMA>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <usart_start_tx_dma_transfer+0x50>
		{
			Error_Handler();
 80006a8:	f000 fc52 	bl	8000f50 <Error_Handler>
		}
    }
    return 1;
 80006ac:	2301      	movs	r3, #1
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000770 	.word	0x20000770
 80006b8:	20000354 	.word	0x20000354
 80006bc:	20000351 	.word	0x20000351
 80006c0:	2000079c 	.word	0x2000079c

080006c4 <HAL_UART_TxHalfCpltCallback>:

void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]

}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	bPrintfTransferComplete = true;
 80006e0:	4b08      	ldr	r3, [pc, #32]	@ (8000704 <HAL_UART_TxCpltCallback+0x2c>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	701a      	strb	r2, [r3, #0]
    lwrb_skip(&usart_tx_buff, usart_tx_dma_current_len);/* Data sent, ignore these */
 80006e6:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <HAL_UART_TxCpltCallback+0x30>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4619      	mov	r1, r3
 80006ec:	4807      	ldr	r0, [pc, #28]	@ (800070c <HAL_UART_TxCpltCallback+0x34>)
 80006ee:	f000 f9b3 	bl	8000a58 <lwrb_skip>
    usart_tx_dma_current_len = 0;
 80006f2:	4b05      	ldr	r3, [pc, #20]	@ (8000708 <HAL_UART_TxCpltCallback+0x30>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
    usart_start_tx_dma_transfer();          /* Try to send more data */
 80006f8:	f7ff ffb0 	bl	800065c <usart_start_tx_dma_transfer>
}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000351 	.word	0x20000351
 8000708:	20000770 	.word	0x20000770
 800070c:	20000354 	.word	0x20000354

08000710 <lwrb_init>:
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwrb_init(LWRB_VOLATILE lwrb_t* buff, void* buffdata, size_t size) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d005      	beq.n	800072e <lwrb_init+0x1e>
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d002      	beq.n	800072e <lwrb_init+0x1e>
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d101      	bne.n	8000732 <lwrb_init+0x22>
        return 0;
 800072e:	2300      	movs	r3, #0
 8000730:	e011      	b.n	8000756 <lwrb_init+0x46>
    }

    BUF_MEMSET((void*)buff, 0x00, sizeof(*buff));
 8000732:	221c      	movs	r2, #28
 8000734:	2100      	movs	r1, #0
 8000736:	68f8      	ldr	r0, [r7, #12]
 8000738:	f016 fe20 	bl	801737c <memset>

    buff->size = size;
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	609a      	str	r2, [r3, #8]
    buff->buff = buffdata;
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	68ba      	ldr	r2, [r7, #8]
 8000746:	605a      	str	r2, [r3, #4]

#if LWRB_USE_MAGIC
    buff->magic1 = 0xDEADBEEF;
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	4a05      	ldr	r2, [pc, #20]	@ (8000760 <lwrb_init+0x50>)
 800074c:	601a      	str	r2, [r3, #0]
    buff->magic2 = ~0xDEADBEEF;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	4a04      	ldr	r2, [pc, #16]	@ (8000764 <lwrb_init+0x54>)
 8000752:	619a      	str	r2, [r3, #24]
#endif /* LWRB_USE_MAGIC */

    return 1;
 8000754:	2301      	movs	r3, #1
}
 8000756:	4618      	mov	r0, r3
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	deadbeef 	.word	0xdeadbeef
 8000764:	21524110 	.word	0x21524110

08000768 <lwrb_write>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
lwrb_write(LWRB_VOLATILE lwrb_t* buff, const void* data, size_t btw) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d017      	beq.n	80007ae <lwrb_write+0x46>
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a38      	ldr	r2, [pc, #224]	@ (8000864 <lwrb_write+0xfc>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d112      	bne.n	80007ae <lwrb_write+0x46>
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	4a36      	ldr	r2, [pc, #216]	@ (8000868 <lwrb_write+0x100>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d10d      	bne.n	80007ae <lwrb_write+0x46>
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d009      	beq.n	80007ae <lwrb_write+0x46>
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	689b      	ldr	r3, [r3, #8]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d005      	beq.n	80007ae <lwrb_write+0x46>
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d002      	beq.n	80007ae <lwrb_write+0x46>
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d101      	bne.n	80007b2 <lwrb_write+0x4a>
        return 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	e053      	b.n	800085a <lwrb_write+0xf2>
    }

    /* Calculate maximum number of bytes available to write */
    free = lwrb_get_free(buff);
 80007b2:	68f8      	ldr	r0, [r7, #12]
 80007b4:	f000 f85a 	bl	800086c <lwrb_get_free>
 80007b8:	61b8      	str	r0, [r7, #24]
    btw = BUF_MIN(free, btw);
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	69bb      	ldr	r3, [r7, #24]
 80007be:	4293      	cmp	r3, r2
 80007c0:	bf28      	it	cs
 80007c2:	4613      	movcs	r3, r2
 80007c4:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d101      	bne.n	80007d0 <lwrb_write+0x68>
        return 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	e044      	b.n	800085a <lwrb_write+0xf2>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	689a      	ldr	r2, [r3, #8]
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	691b      	ldr	r3, [r3, #16]
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	4293      	cmp	r3, r2
 80007de:	bf28      	it	cs
 80007e0:	4613      	movcs	r3, r2
 80007e2:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	685a      	ldr	r2, [r3, #4]
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	691b      	ldr	r3, [r3, #16]
 80007ec:	4413      	add	r3, r2
 80007ee:	697a      	ldr	r2, [r7, #20]
 80007f0:	69f9      	ldr	r1, [r7, #28]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f016 fe8d 	bl	8017512 <memcpy>
    buff->w += tocopy;
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	691a      	ldr	r2, [r3, #16]
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	441a      	add	r2, r3
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	611a      	str	r2, [r3, #16]
    btw -= tocopy;
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	1ad3      	subs	r3, r2, r3
 800080a:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d00b      	beq.n	800082a <lwrb_write+0xc2>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	6858      	ldr	r0, [r3, #4]
 8000816:	69fa      	ldr	r2, [r7, #28]
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	4413      	add	r3, r2
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	4619      	mov	r1, r3
 8000820:	f016 fe77 	bl	8017512 <memcpy>
        buff->w = btw;
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	611a      	str	r2, [r3, #16]
    }

    /* Step 3: Check end of buffer */
    if (buff->w >= buff->size) {
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	691a      	ldr	r2, [r3, #16]
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	429a      	cmp	r2, r3
 8000834:	d302      	bcc.n	800083c <lwrb_write+0xd4>
        buff->w = 0;
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
    }
    BUF_SEND_EVT(buff, LWRB_EVT_WRITE, tocopy + btw);
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	695b      	ldr	r3, [r3, #20]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d007      	beq.n	8000854 <lwrb_write+0xec>
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	695b      	ldr	r3, [r3, #20]
 8000848:	6979      	ldr	r1, [r7, #20]
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	440a      	add	r2, r1
 800084e:	2101      	movs	r1, #1
 8000850:	68f8      	ldr	r0, [r7, #12]
 8000852:	4798      	blx	r3
    return tocopy + btw;
 8000854:	697a      	ldr	r2, [r7, #20]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4413      	add	r3, r2
}
 800085a:	4618      	mov	r0, r3
 800085c:	3720      	adds	r7, #32
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	deadbeef 	.word	0xdeadbeef
 8000868:	21524110 	.word	0x21524110

0800086c <lwrb_get_free>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
lwrb_get_free(LWRB_VOLATILE lwrb_t* buff) {
 800086c:	b480      	push	{r7}
 800086e:	b087      	sub	sp, #28
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d011      	beq.n	800089e <lwrb_get_free+0x32>
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a1c      	ldr	r2, [pc, #112]	@ (80008f0 <lwrb_get_free+0x84>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d10c      	bne.n	800089e <lwrb_get_free+0x32>
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a1a      	ldr	r2, [pc, #104]	@ (80008f4 <lwrb_get_free+0x88>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d107      	bne.n	800089e <lwrb_get_free+0x32>
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d003      	beq.n	800089e <lwrb_get_free+0x32>
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	689b      	ldr	r3, [r3, #8]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d101      	bne.n	80008a2 <lwrb_get_free+0x36>
        return 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	e01f      	b.n	80008e2 <lwrb_get_free+0x76>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	691b      	ldr	r3, [r3, #16]
 80008a6:	613b      	str	r3, [r7, #16]
    r = buff->r;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d103      	bne.n	80008be <lwrb_get_free+0x52>
        size = buff->size;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	e00f      	b.n	80008de <lwrb_get_free+0x72>
    } else if (r > w) {
 80008be:	68fa      	ldr	r2, [r7, #12]
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d904      	bls.n	80008d0 <lwrb_get_free+0x64>
        size = r - w;
 80008c6:	68fa      	ldr	r2, [r7, #12]
 80008c8:	693b      	ldr	r3, [r7, #16]
 80008ca:	1ad3      	subs	r3, r2, r3
 80008cc:	617b      	str	r3, [r7, #20]
 80008ce:	e006      	b.n	80008de <lwrb_get_free+0x72>
    } else {
        size = buff->size - (w - r);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	689a      	ldr	r2, [r3, #8]
 80008d4:	68f9      	ldr	r1, [r7, #12]
 80008d6:	693b      	ldr	r3, [r7, #16]
 80008d8:	1acb      	subs	r3, r1, r3
 80008da:	4413      	add	r3, r2
 80008dc:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	3b01      	subs	r3, #1
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	371c      	adds	r7, #28
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	deadbeef 	.word	0xdeadbeef
 80008f4:	21524110 	.word	0x21524110

080008f8 <lwrb_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
lwrb_get_full(LWRB_VOLATILE lwrb_t* buff) {
 80008f8:	b480      	push	{r7}
 80008fa:	b087      	sub	sp, #28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d011      	beq.n	800092a <lwrb_get_full+0x32>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a1b      	ldr	r2, [pc, #108]	@ (8000978 <lwrb_get_full+0x80>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d10c      	bne.n	800092a <lwrb_get_full+0x32>
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	4a19      	ldr	r2, [pc, #100]	@ (800097c <lwrb_get_full+0x84>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d107      	bne.n	800092a <lwrb_get_full+0x32>
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d003      	beq.n	800092a <lwrb_get_full+0x32>
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d101      	bne.n	800092e <lwrb_get_full+0x36>
        return 0;
 800092a:	2300      	movs	r3, #0
 800092c:	e01d      	b.n	800096a <lwrb_get_full+0x72>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	691b      	ldr	r3, [r3, #16]
 8000932:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	429a      	cmp	r2, r3
 8000940:	d102      	bne.n	8000948 <lwrb_get_full+0x50>
        size = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
 8000946:	e00f      	b.n	8000968 <lwrb_get_full+0x70>
    } else if (w > r) {
 8000948:	693a      	ldr	r2, [r7, #16]
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	429a      	cmp	r2, r3
 800094e:	d904      	bls.n	800095a <lwrb_get_full+0x62>
        size = w - r;
 8000950:	693a      	ldr	r2, [r7, #16]
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	e006      	b.n	8000968 <lwrb_get_full+0x70>
    } else {
        size = buff->size - (r - w);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	689a      	ldr	r2, [r3, #8]
 800095e:	6939      	ldr	r1, [r7, #16]
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	1acb      	subs	r3, r1, r3
 8000964:	4413      	add	r3, r2
 8000966:	617b      	str	r3, [r7, #20]
    }
    return size;
 8000968:	697b      	ldr	r3, [r7, #20]
}
 800096a:	4618      	mov	r0, r3
 800096c:	371c      	adds	r7, #28
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	deadbeef 	.word	0xdeadbeef
 800097c:	21524110 	.word	0x21524110

08000980 <lwrb_get_linear_block_read_address>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void*
lwrb_get_linear_block_read_address(LWRB_VOLATILE lwrb_t* buff) {
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d011      	beq.n	80009b2 <lwrb_get_linear_block_read_address+0x32>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a0e      	ldr	r2, [pc, #56]	@ (80009cc <lwrb_get_linear_block_read_address+0x4c>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d10c      	bne.n	80009b2 <lwrb_get_linear_block_read_address+0x32>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	4a0c      	ldr	r2, [pc, #48]	@ (80009d0 <lwrb_get_linear_block_read_address+0x50>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d107      	bne.n	80009b2 <lwrb_get_linear_block_read_address+0x32>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d003      	beq.n	80009b2 <lwrb_get_linear_block_read_address+0x32>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d101      	bne.n	80009b6 <lwrb_get_linear_block_read_address+0x36>
        return NULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	e004      	b.n	80009c0 <lwrb_get_linear_block_read_address+0x40>
    }
    return &buff->buff[buff->r];
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	685a      	ldr	r2, [r3, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	68db      	ldr	r3, [r3, #12]
 80009be:	4413      	add	r3, r2
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	deadbeef 	.word	0xdeadbeef
 80009d0:	21524110 	.word	0x21524110

080009d4 <lwrb_get_linear_block_read_length>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
lwrb_get_linear_block_read_length(LWRB_VOLATILE lwrb_t* buff) {
 80009d4:	b480      	push	{r7}
 80009d6:	b087      	sub	sp, #28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d011      	beq.n	8000a06 <lwrb_get_linear_block_read_length+0x32>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a1a      	ldr	r2, [pc, #104]	@ (8000a50 <lwrb_get_linear_block_read_length+0x7c>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d10c      	bne.n	8000a06 <lwrb_get_linear_block_read_length+0x32>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	4a18      	ldr	r2, [pc, #96]	@ (8000a54 <lwrb_get_linear_block_read_length+0x80>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d107      	bne.n	8000a06 <lwrb_get_linear_block_read_length+0x32>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d003      	beq.n	8000a06 <lwrb_get_linear_block_read_length+0x32>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	689b      	ldr	r3, [r3, #8]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d101      	bne.n	8000a0a <lwrb_get_linear_block_read_length+0x36>
        return 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	e01b      	b.n	8000a42 <lwrb_get_linear_block_read_length+0x6e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	691b      	ldr	r3, [r3, #16]
 8000a0e:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d904      	bls.n	8000a28 <lwrb_get_linear_block_read_length+0x54>
        len = w - r;
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	e00b      	b.n	8000a40 <lwrb_get_linear_block_read_length+0x6c>
    } else if (r > w) {
 8000a28:	68fa      	ldr	r2, [r7, #12]
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d905      	bls.n	8000a3c <lwrb_get_linear_block_read_length+0x68>
        len = buff->size - r;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	689a      	ldr	r2, [r3, #8]
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	617b      	str	r3, [r7, #20]
 8000a3a:	e001      	b.n	8000a40 <lwrb_get_linear_block_read_length+0x6c>
    } else {
        len = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
    }
    return len;
 8000a40:	697b      	ldr	r3, [r7, #20]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	371c      	adds	r7, #28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	deadbeef 	.word	0xdeadbeef
 8000a54:	21524110 	.word	0x21524110

08000a58 <lwrb_skip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
lwrb_skip(LWRB_VOLATILE lwrb_t* buff, size_t len) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d014      	beq.n	8000a92 <lwrb_skip+0x3a>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a20      	ldr	r2, [pc, #128]	@ (8000af0 <lwrb_skip+0x98>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d10f      	bne.n	8000a92 <lwrb_skip+0x3a>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	4a1f      	ldr	r2, [pc, #124]	@ (8000af4 <lwrb_skip+0x9c>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d10a      	bne.n	8000a92 <lwrb_skip+0x3a>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d006      	beq.n	8000a92 <lwrb_skip+0x3a>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d002      	beq.n	8000a92 <lwrb_skip+0x3a>
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d101      	bne.n	8000a96 <lwrb_skip+0x3e>
        return 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	e027      	b.n	8000ae6 <lwrb_skip+0x8e>
    }

    full = lwrb_get_full(buff);
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f7ff ff2e 	bl	80008f8 <lwrb_get_full>
 8000a9c:	60f8      	str	r0, [r7, #12]
    len = BUF_MIN(len, full);
 8000a9e:	683a      	ldr	r2, [r7, #0]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	bf28      	it	cs
 8000aa6:	4613      	movcs	r3, r2
 8000aa8:	603b      	str	r3, [r7, #0]
    buff->r += len;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	68da      	ldr	r2, [r3, #12]
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	441a      	add	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	60da      	str	r2, [r3, #12]
    if (buff->r >= buff->size) {
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	68da      	ldr	r2, [r3, #12]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d306      	bcc.n	8000ad0 <lwrb_skip+0x78>
        buff->r -= buff->size;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	68da      	ldr	r2, [r3, #12]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	1ad2      	subs	r2, r2, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	60da      	str	r2, [r3, #12]
    }
    BUF_SEND_EVT(buff, LWRB_EVT_READ, len);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	695b      	ldr	r3, [r3, #20]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d005      	beq.n	8000ae4 <lwrb_skip+0x8c>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	695b      	ldr	r3, [r3, #20]
 8000adc:	683a      	ldr	r2, [r7, #0]
 8000ade:	2100      	movs	r1, #0
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	4798      	blx	r3
    return len;
 8000ae4:	683b      	ldr	r3, [r7, #0]
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	deadbeef 	.word	0xdeadbeef
 8000af4:	21524110 	.word	0x21524110

08000af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af8:	b5b0      	push	{r4, r5, r7, lr}
 8000afa:	b088      	sub	sp, #32
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000afe:	f000 fed9 	bl	80018b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b02:	f000 f839 	bl	8000b78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b06:	f000 f92f 	bl	8000d68 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b0a:	f000 f905 	bl	8000d18 <MX_DMA_Init>
  MX_RTC_Init();
 8000b0e:	f000 f8b3 	bl	8000c78 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8000b12:	f000 f8d7 	bl	8000cc4 <MX_USART3_UART_Init>
  MX_CRC_Init();
 8000b16:	f000 f89b 	bl	8000c50 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  printf("\033c");
 8000b1a:	4812      	ldr	r0, [pc, #72]	@ (8000b64 <main+0x6c>)
 8000b1c:	f016 fa9c 	bl	8017058 <iprintf>

  init_dma_logging();
 8000b20:	f7ff fd84 	bl	800062c <init_dma_logging>
  printf("Duvitech Ethernet FW v%d.%d.%d\r\n\r\n",FIRMWARE_VERSION_DATA[0], FIRMWARE_VERSION_DATA[1], FIRMWARE_VERSION_DATA[2]);
 8000b24:	4b10      	ldr	r3, [pc, #64]	@ (8000b68 <main+0x70>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b68 <main+0x70>)
 8000b2c:	785b      	ldrb	r3, [r3, #1]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b0d      	ldr	r3, [pc, #52]	@ (8000b68 <main+0x70>)
 8000b32:	789b      	ldrb	r3, [r3, #2]
 8000b34:	480d      	ldr	r0, [pc, #52]	@ (8000b6c <main+0x74>)
 8000b36:	f016 fa8f 	bl	8017058 <iprintf>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b70 <main+0x78>)
 8000b3c:	1d3c      	adds	r4, r7, #4
 8000b3e:	461d      	mov	r5, r3
 8000b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f006 f975 	bl	8006e40 <osThreadCreate>
 8000b56:	4603      	mov	r3, r0
 8000b58:	4a06      	ldr	r2, [pc, #24]	@ (8000b74 <main+0x7c>)
 8000b5a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b5c:	f006 f959 	bl	8006e12 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <main+0x68>
 8000b64:	0801837c 	.word	0x0801837c
 8000b68:	20000000 	.word	0x20000000
 8000b6c:	08018380 	.word	0x08018380
 8000b70:	080183b0 	.word	0x080183b0
 8000b74:	200008a4 	.word	0x200008a4

08000b78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b094      	sub	sp, #80	@ 0x50
 8000b7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7e:	f107 0320 	add.w	r3, r7, #32
 8000b82:	2230      	movs	r2, #48	@ 0x30
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f016 fbf8 	bl	801737c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b8c:	f107 030c 	add.w	r3, r7, #12
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	4b29      	ldr	r3, [pc, #164]	@ (8000c48 <SystemClock_Config+0xd0>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba4:	4a28      	ldr	r2, [pc, #160]	@ (8000c48 <SystemClock_Config+0xd0>)
 8000ba6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000baa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bac:	4b26      	ldr	r3, [pc, #152]	@ (8000c48 <SystemClock_Config+0xd0>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bb8:	2300      	movs	r3, #0
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	4b23      	ldr	r3, [pc, #140]	@ (8000c4c <SystemClock_Config+0xd4>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a22      	ldr	r2, [pc, #136]	@ (8000c4c <SystemClock_Config+0xd4>)
 8000bc2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	4b20      	ldr	r3, [pc, #128]	@ (8000c4c <SystemClock_Config+0xd4>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000bd4:	2309      	movs	r3, #9
 8000bd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bd8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000bde:	2301      	movs	r3, #1
 8000be0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be2:	2302      	movs	r3, #2
 8000be4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000be6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bec:	2304      	movs	r3, #4
 8000bee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000bf0:	23a8      	movs	r3, #168	@ 0xa8
 8000bf2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bf8:	2307      	movs	r3, #7
 8000bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bfc:	f107 0320 	add.w	r3, r7, #32
 8000c00:	4618      	mov	r0, r3
 8000c02:	f002 fff9 	bl	8003bf8 <HAL_RCC_OscConfig>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c0c:	f000 f9a0 	bl	8000f50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c10:	230f      	movs	r3, #15
 8000c12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c14:	2302      	movs	r3, #2
 8000c16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c1c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c28:	f107 030c 	add.w	r3, r7, #12
 8000c2c:	2105      	movs	r1, #5
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f003 fa5a 	bl	80040e8 <HAL_RCC_ClockConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c3a:	f000 f989 	bl	8000f50 <Error_Handler>
  }
}
 8000c3e:	bf00      	nop
 8000c40:	3750      	adds	r7, #80	@ 0x50
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40007000 	.word	0x40007000

08000c50 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c54:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <MX_CRC_Init+0x20>)
 8000c56:	4a07      	ldr	r2, [pc, #28]	@ (8000c74 <MX_CRC_Init+0x24>)
 8000c58:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c5a:	4805      	ldr	r0, [pc, #20]	@ (8000c70 <MX_CRC_Init+0x20>)
 8000c5c:	f000 ff72 	bl	8001b44 <HAL_CRC_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000c66:	f000 f973 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000774 	.word	0x20000774
 8000c74:	40023000 	.word	0x40023000

08000c78 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cbc <MX_RTC_Init+0x44>)
 8000c7e:	4a10      	ldr	r2, [pc, #64]	@ (8000cc0 <MX_RTC_Init+0x48>)
 8000c80:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	@ (8000cbc <MX_RTC_Init+0x44>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c88:	4b0c      	ldr	r3, [pc, #48]	@ (8000cbc <MX_RTC_Init+0x44>)
 8000c8a:	227f      	movs	r2, #127	@ 0x7f
 8000c8c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000cbc <MX_RTC_Init+0x44>)
 8000c90:	22ff      	movs	r2, #255	@ 0xff
 8000c92:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c94:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <MX_RTC_Init+0x44>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c9a:	4b08      	ldr	r3, [pc, #32]	@ (8000cbc <MX_RTC_Init+0x44>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <MX_RTC_Init+0x44>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ca6:	4805      	ldr	r0, [pc, #20]	@ (8000cbc <MX_RTC_Init+0x44>)
 8000ca8:	f003 fe30 	bl	800490c <HAL_RTC_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000cb2:	f000 f94d 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	2000077c 	.word	0x2000077c
 8000cc0:	40002800 	.word	0x40002800

08000cc4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <MX_USART3_UART_Init+0x4c>)
 8000cca:	4a12      	ldr	r2, [pc, #72]	@ (8000d14 <MX_USART3_UART_Init+0x50>)
 8000ccc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cce:	4b10      	ldr	r3, [pc, #64]	@ (8000d10 <MX_USART3_UART_Init+0x4c>)
 8000cd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cd4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <MX_USART3_UART_Init+0x4c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <MX_USART3_UART_Init+0x4c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d10 <MX_USART3_UART_Init+0x4c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ce8:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <MX_USART3_UART_Init+0x4c>)
 8000cea:	220c      	movs	r2, #12
 8000cec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cee:	4b08      	ldr	r3, [pc, #32]	@ (8000d10 <MX_USART3_UART_Init+0x4c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <MX_USART3_UART_Init+0x4c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cfa:	4805      	ldr	r0, [pc, #20]	@ (8000d10 <MX_USART3_UART_Init+0x4c>)
 8000cfc:	f004 f9ae 	bl	800505c <HAL_UART_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d06:	f000 f923 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	2000079c 	.word	0x2000079c
 8000d14:	40004800 	.word	0x40004800

08000d18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	4b10      	ldr	r3, [pc, #64]	@ (8000d64 <MX_DMA_Init+0x4c>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	4a0f      	ldr	r2, [pc, #60]	@ (8000d64 <MX_DMA_Init+0x4c>)
 8000d28:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d64 <MX_DMA_Init+0x4c>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2105      	movs	r1, #5
 8000d3e:	200c      	movs	r0, #12
 8000d40:	f000 fed6 	bl	8001af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d44:	200c      	movs	r0, #12
 8000d46:	f000 feef 	bl	8001b28 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2105      	movs	r1, #5
 8000d4e:	200e      	movs	r0, #14
 8000d50:	f000 fece 	bl	8001af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d54:	200e      	movs	r0, #14
 8000d56:	f000 fee7 	bl	8001b28 <HAL_NVIC_EnableIRQ>

}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40023800 	.word	0x40023800

08000d68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08c      	sub	sp, #48	@ 0x30
 8000d6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
 8000d7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61bb      	str	r3, [r7, #24]
 8000d82:	4b5b      	ldr	r3, [pc, #364]	@ (8000ef0 <MX_GPIO_Init+0x188>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	4a5a      	ldr	r2, [pc, #360]	@ (8000ef0 <MX_GPIO_Init+0x188>)
 8000d88:	f043 0304 	orr.w	r3, r3, #4
 8000d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8e:	4b58      	ldr	r3, [pc, #352]	@ (8000ef0 <MX_GPIO_Init+0x188>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	f003 0304 	and.w	r3, r3, #4
 8000d96:	61bb      	str	r3, [r7, #24]
 8000d98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
 8000d9e:	4b54      	ldr	r3, [pc, #336]	@ (8000ef0 <MX_GPIO_Init+0x188>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	4a53      	ldr	r2, [pc, #332]	@ (8000ef0 <MX_GPIO_Init+0x188>)
 8000da4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000daa:	4b51      	ldr	r3, [pc, #324]	@ (8000ef0 <MX_GPIO_Init+0x188>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	4b4d      	ldr	r3, [pc, #308]	@ (8000ef0 <MX_GPIO_Init+0x188>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	4a4c      	ldr	r2, [pc, #304]	@ (8000ef0 <MX_GPIO_Init+0x188>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc6:	4b4a      	ldr	r3, [pc, #296]	@ (8000ef0 <MX_GPIO_Init+0x188>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	4b46      	ldr	r3, [pc, #280]	@ (8000ef0 <MX_GPIO_Init+0x188>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	4a45      	ldr	r2, [pc, #276]	@ (8000ef0 <MX_GPIO_Init+0x188>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de2:	4b43      	ldr	r3, [pc, #268]	@ (8000ef0 <MX_GPIO_Init+0x188>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ef0 <MX_GPIO_Init+0x188>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	4a3e      	ldr	r2, [pc, #248]	@ (8000ef0 <MX_GPIO_Init+0x188>)
 8000df8:	f043 0308 	orr.w	r3, r3, #8
 8000dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfe:	4b3c      	ldr	r3, [pc, #240]	@ (8000ef0 <MX_GPIO_Init+0x188>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e02:	f003 0308 	and.w	r3, r3, #8
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	4b38      	ldr	r3, [pc, #224]	@ (8000ef0 <MX_GPIO_Init+0x188>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	4a37      	ldr	r2, [pc, #220]	@ (8000ef0 <MX_GPIO_Init+0x188>)
 8000e14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1a:	4b35      	ldr	r3, [pc, #212]	@ (8000ef0 <MX_GPIO_Init+0x188>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000e2c:	4831      	ldr	r0, [pc, #196]	@ (8000ef4 <MX_GPIO_Init+0x18c>)
 8000e2e:	f002 feaf 	bl	8003b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2140      	movs	r1, #64	@ 0x40
 8000e36:	4830      	ldr	r0, [pc, #192]	@ (8000ef8 <MX_GPIO_Init+0x190>)
 8000e38:	f002 feaa 	bl	8003b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e42:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	f107 031c 	add.w	r3, r7, #28
 8000e50:	4619      	mov	r1, r3
 8000e52:	482a      	ldr	r0, [pc, #168]	@ (8000efc <MX_GPIO_Init+0x194>)
 8000e54:	f002 fcf0 	bl	8003838 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000e58:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000e5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4820      	ldr	r0, [pc, #128]	@ (8000ef4 <MX_GPIO_Init+0x18c>)
 8000e72:	f002 fce1 	bl	8003838 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e76:	2340      	movs	r3, #64	@ 0x40
 8000e78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e86:	f107 031c 	add.w	r3, r7, #28
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	481a      	ldr	r0, [pc, #104]	@ (8000ef8 <MX_GPIO_Init+0x190>)
 8000e8e:	f002 fcd3 	bl	8003838 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e92:	2380      	movs	r3, #128	@ 0x80
 8000e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e96:	2300      	movs	r3, #0
 8000e98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4814      	ldr	r0, [pc, #80]	@ (8000ef8 <MX_GPIO_Init+0x190>)
 8000ea6:	f002 fcc7 	bl	8003838 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000eaa:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000eae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ebc:	230a      	movs	r3, #10
 8000ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec0:	f107 031c 	add.w	r3, r7, #28
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	480e      	ldr	r0, [pc, #56]	@ (8000f00 <MX_GPIO_Init+0x198>)
 8000ec8:	f002 fcb6 	bl	8003838 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ecc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ed0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000eda:	f107 031c 	add.w	r3, r7, #28
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4807      	ldr	r0, [pc, #28]	@ (8000f00 <MX_GPIO_Init+0x198>)
 8000ee2:	f002 fca9 	bl	8003838 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ee6:	bf00      	nop
 8000ee8:	3730      	adds	r7, #48	@ 0x30
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020400 	.word	0x40020400
 8000ef8:	40021800 	.word	0x40021800
 8000efc:	40020800 	.word	0x40020800
 8000f00:	40020000 	.word	0x40020000

08000f04 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000f0c:	f005 f9dc 	bl	80062c8 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  udpecho_raw_init();
 8000f10:	f000 fb0c 	bl	800152c <udpecho_raw_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(500);
 8000f14:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f18:	f005 ffde 	bl	8006ed8 <osDelay>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000f1c:	2180      	movs	r1, #128	@ 0x80
 8000f1e:	4802      	ldr	r0, [pc, #8]	@ (8000f28 <StartDefaultTask+0x24>)
 8000f20:	f002 fe4f 	bl	8003bc2 <HAL_GPIO_TogglePin>
    osDelay(500);
 8000f24:	bf00      	nop
 8000f26:	e7f5      	b.n	8000f14 <StartDefaultTask+0x10>
 8000f28:	40020400 	.word	0x40020400

08000f2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a04      	ldr	r2, [pc, #16]	@ (8000f4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d101      	bne.n	8000f42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f3e:	f000 fcdb 	bl	80018f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40010000 	.word	0x40010000

08000f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000f54:	2201      	movs	r2, #1
 8000f56:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f5a:	4803      	ldr	r0, [pc, #12]	@ (8000f68 <Error_Handler+0x18>)
 8000f5c:	f002 fe18 	bl	8003b90 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f60:	b672      	cpsid	i
}
 8000f62:	bf00      	nop
  __disable_irq();
  while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <Error_Handler+0x14>
 8000f68:	40020400 	.word	0x40020400

08000f6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	4b12      	ldr	r3, [pc, #72]	@ (8000fc0 <HAL_MspInit+0x54>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7a:	4a11      	ldr	r2, [pc, #68]	@ (8000fc0 <HAL_MspInit+0x54>)
 8000f7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f82:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc0 <HAL_MspInit+0x54>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	603b      	str	r3, [r7, #0]
 8000f92:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc0 <HAL_MspInit+0x54>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f96:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc0 <HAL_MspInit+0x54>)
 8000f98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f9e:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <HAL_MspInit+0x54>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	210f      	movs	r1, #15
 8000fae:	f06f 0001 	mvn.w	r0, #1
 8000fb2:	f000 fd9d 	bl	8001af0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800

08000fc4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0b      	ldr	r2, [pc, #44]	@ (8001000 <HAL_CRC_MspInit+0x3c>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d10d      	bne.n	8000ff2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	4b0a      	ldr	r3, [pc, #40]	@ (8001004 <HAL_CRC_MspInit+0x40>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	4a09      	ldr	r2, [pc, #36]	@ (8001004 <HAL_CRC_MspInit+0x40>)
 8000fe0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe6:	4b07      	ldr	r3, [pc, #28]	@ (8001004 <HAL_CRC_MspInit+0x40>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000ff2:	bf00      	nop
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	40023000 	.word	0x40023000
 8001004:	40023800 	.word	0x40023800

08001008 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08e      	sub	sp, #56	@ 0x38
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001010:	f107 0308 	add.w	r3, r7, #8
 8001014:	2230      	movs	r2, #48	@ 0x30
 8001016:	2100      	movs	r1, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f016 f9af 	bl	801737c <memset>
  if(hrtc->Instance==RTC)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a0c      	ldr	r2, [pc, #48]	@ (8001054 <HAL_RTC_MspInit+0x4c>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d111      	bne.n	800104c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001028:	2320      	movs	r3, #32
 800102a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800102c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001030:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001032:	f107 0308 	add.w	r3, r7, #8
 8001036:	4618      	mov	r0, r3
 8001038:	f003 faa8 	bl	800458c <HAL_RCCEx_PeriphCLKConfig>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001042:	f7ff ff85 	bl	8000f50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001046:	4b04      	ldr	r3, [pc, #16]	@ (8001058 <HAL_RTC_MspInit+0x50>)
 8001048:	2201      	movs	r2, #1
 800104a:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800104c:	bf00      	nop
 800104e:	3738      	adds	r7, #56	@ 0x38
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40002800 	.word	0x40002800
 8001058:	42470e3c 	.word	0x42470e3c

0800105c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08a      	sub	sp, #40	@ 0x28
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a55      	ldr	r2, [pc, #340]	@ (80011d0 <HAL_UART_MspInit+0x174>)
 800107a:	4293      	cmp	r3, r2
 800107c:	f040 80a3 	bne.w	80011c6 <HAL_UART_MspInit+0x16a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001080:	2300      	movs	r3, #0
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	4b53      	ldr	r3, [pc, #332]	@ (80011d4 <HAL_UART_MspInit+0x178>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001088:	4a52      	ldr	r2, [pc, #328]	@ (80011d4 <HAL_UART_MspInit+0x178>)
 800108a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800108e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001090:	4b50      	ldr	r3, [pc, #320]	@ (80011d4 <HAL_UART_MspInit+0x178>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001094:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800109c:	2300      	movs	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	4b4c      	ldr	r3, [pc, #304]	@ (80011d4 <HAL_UART_MspInit+0x178>)
 80010a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a4:	4a4b      	ldr	r2, [pc, #300]	@ (80011d4 <HAL_UART_MspInit+0x178>)
 80010a6:	f043 0308 	orr.w	r3, r3, #8
 80010aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ac:	4b49      	ldr	r3, [pc, #292]	@ (80011d4 <HAL_UART_MspInit+0x178>)
 80010ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b0:	f003 0308 	and.w	r3, r3, #8
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80010b8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010ca:	2307      	movs	r3, #7
 80010cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	4619      	mov	r1, r3
 80010d4:	4840      	ldr	r0, [pc, #256]	@ (80011d8 <HAL_UART_MspInit+0x17c>)
 80010d6:	f002 fbaf 	bl	8003838 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80010da:	4b40      	ldr	r3, [pc, #256]	@ (80011dc <HAL_UART_MspInit+0x180>)
 80010dc:	4a40      	ldr	r2, [pc, #256]	@ (80011e0 <HAL_UART_MspInit+0x184>)
 80010de:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80010e0:	4b3e      	ldr	r3, [pc, #248]	@ (80011dc <HAL_UART_MspInit+0x180>)
 80010e2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010e6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010e8:	4b3c      	ldr	r3, [pc, #240]	@ (80011dc <HAL_UART_MspInit+0x180>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ee:	4b3b      	ldr	r3, [pc, #236]	@ (80011dc <HAL_UART_MspInit+0x180>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010f4:	4b39      	ldr	r3, [pc, #228]	@ (80011dc <HAL_UART_MspInit+0x180>)
 80010f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010fa:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010fc:	4b37      	ldr	r3, [pc, #220]	@ (80011dc <HAL_UART_MspInit+0x180>)
 80010fe:	2200      	movs	r2, #0
 8001100:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001102:	4b36      	ldr	r3, [pc, #216]	@ (80011dc <HAL_UART_MspInit+0x180>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001108:	4b34      	ldr	r3, [pc, #208]	@ (80011dc <HAL_UART_MspInit+0x180>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800110e:	4b33      	ldr	r3, [pc, #204]	@ (80011dc <HAL_UART_MspInit+0x180>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001114:	4b31      	ldr	r3, [pc, #196]	@ (80011dc <HAL_UART_MspInit+0x180>)
 8001116:	2204      	movs	r2, #4
 8001118:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_usart3_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800111a:	4b30      	ldr	r3, [pc, #192]	@ (80011dc <HAL_UART_MspInit+0x180>)
 800111c:	2201      	movs	r2, #1
 800111e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart3_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001120:	4b2e      	ldr	r3, [pc, #184]	@ (80011dc <HAL_UART_MspInit+0x180>)
 8001122:	2200      	movs	r2, #0
 8001124:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_usart3_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001126:	4b2d      	ldr	r3, [pc, #180]	@ (80011dc <HAL_UART_MspInit+0x180>)
 8001128:	2200      	movs	r2, #0
 800112a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800112c:	482b      	ldr	r0, [pc, #172]	@ (80011dc <HAL_UART_MspInit+0x180>)
 800112e:	f000 fd25 	bl	8001b7c <HAL_DMA_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <HAL_UART_MspInit+0xe0>
    {
      Error_Handler();
 8001138:	f7ff ff0a 	bl	8000f50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a27      	ldr	r2, [pc, #156]	@ (80011dc <HAL_UART_MspInit+0x180>)
 8001140:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001142:	4a26      	ldr	r2, [pc, #152]	@ (80011dc <HAL_UART_MspInit+0x180>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001148:	4b26      	ldr	r3, [pc, #152]	@ (80011e4 <HAL_UART_MspInit+0x188>)
 800114a:	4a27      	ldr	r2, [pc, #156]	@ (80011e8 <HAL_UART_MspInit+0x18c>)
 800114c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800114e:	4b25      	ldr	r3, [pc, #148]	@ (80011e4 <HAL_UART_MspInit+0x188>)
 8001150:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001154:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001156:	4b23      	ldr	r3, [pc, #140]	@ (80011e4 <HAL_UART_MspInit+0x188>)
 8001158:	2240      	movs	r2, #64	@ 0x40
 800115a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800115c:	4b21      	ldr	r3, [pc, #132]	@ (80011e4 <HAL_UART_MspInit+0x188>)
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001162:	4b20      	ldr	r3, [pc, #128]	@ (80011e4 <HAL_UART_MspInit+0x188>)
 8001164:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001168:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800116a:	4b1e      	ldr	r3, [pc, #120]	@ (80011e4 <HAL_UART_MspInit+0x188>)
 800116c:	2200      	movs	r2, #0
 800116e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001170:	4b1c      	ldr	r3, [pc, #112]	@ (80011e4 <HAL_UART_MspInit+0x188>)
 8001172:	2200      	movs	r2, #0
 8001174:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001176:	4b1b      	ldr	r3, [pc, #108]	@ (80011e4 <HAL_UART_MspInit+0x188>)
 8001178:	2200      	movs	r2, #0
 800117a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800117c:	4b19      	ldr	r3, [pc, #100]	@ (80011e4 <HAL_UART_MspInit+0x188>)
 800117e:	2200      	movs	r2, #0
 8001180:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001182:	4b18      	ldr	r3, [pc, #96]	@ (80011e4 <HAL_UART_MspInit+0x188>)
 8001184:	2204      	movs	r2, #4
 8001186:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8001188:	4b16      	ldr	r3, [pc, #88]	@ (80011e4 <HAL_UART_MspInit+0x188>)
 800118a:	2201      	movs	r2, #1
 800118c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800118e:	4b15      	ldr	r3, [pc, #84]	@ (80011e4 <HAL_UART_MspInit+0x188>)
 8001190:	2200      	movs	r2, #0
 8001192:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001194:	4b13      	ldr	r3, [pc, #76]	@ (80011e4 <HAL_UART_MspInit+0x188>)
 8001196:	2200      	movs	r2, #0
 8001198:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800119a:	4812      	ldr	r0, [pc, #72]	@ (80011e4 <HAL_UART_MspInit+0x188>)
 800119c:	f000 fcee 	bl	8001b7c <HAL_DMA_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_UART_MspInit+0x14e>
    {
      Error_Handler();
 80011a6:	f7ff fed3 	bl	8000f50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a0d      	ldr	r2, [pc, #52]	@ (80011e4 <HAL_UART_MspInit+0x188>)
 80011ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80011b0:	4a0c      	ldr	r2, [pc, #48]	@ (80011e4 <HAL_UART_MspInit+0x188>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2105      	movs	r1, #5
 80011ba:	2027      	movs	r0, #39	@ 0x27
 80011bc:	f000 fc98 	bl	8001af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011c0:	2027      	movs	r0, #39	@ 0x27
 80011c2:	f000 fcb1 	bl	8001b28 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80011c6:	bf00      	nop
 80011c8:	3728      	adds	r7, #40	@ 0x28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40004800 	.word	0x40004800
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020c00 	.word	0x40020c00
 80011dc:	200007e4 	.word	0x200007e4
 80011e0:	40026028 	.word	0x40026028
 80011e4:	20000844 	.word	0x20000844
 80011e8:	40026058 	.word	0x40026058

080011ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08c      	sub	sp, #48	@ 0x30
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80011f8:	2300      	movs	r3, #0
 80011fa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	4b2f      	ldr	r3, [pc, #188]	@ (80012c0 <HAL_InitTick+0xd4>)
 8001202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001204:	4a2e      	ldr	r2, [pc, #184]	@ (80012c0 <HAL_InitTick+0xd4>)
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	6453      	str	r3, [r2, #68]	@ 0x44
 800120c:	4b2c      	ldr	r3, [pc, #176]	@ (80012c0 <HAL_InitTick+0xd4>)
 800120e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001218:	f107 020c 	add.w	r2, r7, #12
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	4611      	mov	r1, r2
 8001222:	4618      	mov	r0, r3
 8001224:	f003 f980 	bl	8004528 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001228:	f003 f96a 	bl	8004500 <HAL_RCC_GetPCLK2Freq>
 800122c:	4603      	mov	r3, r0
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001234:	4a23      	ldr	r2, [pc, #140]	@ (80012c4 <HAL_InitTick+0xd8>)
 8001236:	fba2 2303 	umull	r2, r3, r2, r3
 800123a:	0c9b      	lsrs	r3, r3, #18
 800123c:	3b01      	subs	r3, #1
 800123e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001240:	4b21      	ldr	r3, [pc, #132]	@ (80012c8 <HAL_InitTick+0xdc>)
 8001242:	4a22      	ldr	r2, [pc, #136]	@ (80012cc <HAL_InitTick+0xe0>)
 8001244:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001246:	4b20      	ldr	r3, [pc, #128]	@ (80012c8 <HAL_InitTick+0xdc>)
 8001248:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800124c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800124e:	4a1e      	ldr	r2, [pc, #120]	@ (80012c8 <HAL_InitTick+0xdc>)
 8001250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001252:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001254:	4b1c      	ldr	r3, [pc, #112]	@ (80012c8 <HAL_InitTick+0xdc>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125a:	4b1b      	ldr	r3, [pc, #108]	@ (80012c8 <HAL_InitTick+0xdc>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001260:	4b19      	ldr	r3, [pc, #100]	@ (80012c8 <HAL_InitTick+0xdc>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001266:	4818      	ldr	r0, [pc, #96]	@ (80012c8 <HAL_InitTick+0xdc>)
 8001268:	f003 fc56 	bl	8004b18 <HAL_TIM_Base_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001272:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001276:	2b00      	cmp	r3, #0
 8001278:	d11b      	bne.n	80012b2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800127a:	4813      	ldr	r0, [pc, #76]	@ (80012c8 <HAL_InitTick+0xdc>)
 800127c:	f003 fca6 	bl	8004bcc <HAL_TIM_Base_Start_IT>
 8001280:	4603      	mov	r3, r0
 8001282:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001286:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800128a:	2b00      	cmp	r3, #0
 800128c:	d111      	bne.n	80012b2 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800128e:	2019      	movs	r0, #25
 8001290:	f000 fc4a 	bl	8001b28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b0f      	cmp	r3, #15
 8001298:	d808      	bhi.n	80012ac <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800129a:	2200      	movs	r2, #0
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	2019      	movs	r0, #25
 80012a0:	f000 fc26 	bl	8001af0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012a4:	4a0a      	ldr	r2, [pc, #40]	@ (80012d0 <HAL_InitTick+0xe4>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	e002      	b.n	80012b2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80012b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3730      	adds	r7, #48	@ 0x30
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800
 80012c4:	431bde83 	.word	0x431bde83
 80012c8:	200008fc 	.word	0x200008fc
 80012cc:	40010000 	.word	0x40010000
 80012d0:	20000008 	.word	0x20000008

080012d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <NMI_Handler+0x4>

080012dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <HardFault_Handler+0x4>

080012e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <MemManage_Handler+0x4>

080012ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <BusFault_Handler+0x4>

080012f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <UsageFault_Handler+0x4>

080012fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001310:	4802      	ldr	r0, [pc, #8]	@ (800131c <DMA1_Stream1_IRQHandler+0x10>)
 8001312:	f000 fdcb 	bl	8001eac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200007e4 	.word	0x200007e4

08001320 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001324:	4802      	ldr	r0, [pc, #8]	@ (8001330 <DMA1_Stream3_IRQHandler+0x10>)
 8001326:	f000 fdc1 	bl	8001eac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000844 	.word	0x20000844

08001334 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001338:	4802      	ldr	r0, [pc, #8]	@ (8001344 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800133a:	f003 fcb7 	bl	8004cac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200008fc 	.word	0x200008fc

08001348 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800134c:	4802      	ldr	r0, [pc, #8]	@ (8001358 <USART3_IRQHandler+0x10>)
 800134e:	f003 ffd1 	bl	80052f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	2000079c 	.word	0x2000079c

0800135c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001360:	4802      	ldr	r0, [pc, #8]	@ (800136c <ETH_IRQHandler+0x10>)
 8001362:	f001 fb93 	bl	8002a8c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20005424 	.word	0x20005424

08001370 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return 1;
 8001374:	2301      	movs	r3, #1
}
 8001376:	4618      	mov	r0, r3
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <_kill>:

int _kill(int pid, int sig)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800138a:	4b05      	ldr	r3, [pc, #20]	@ (80013a0 <_kill+0x20>)
 800138c:	2216      	movs	r2, #22
 800138e:	601a      	str	r2, [r3, #0]
  return -1;
 8001390:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001394:	4618      	mov	r0, r3
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	2000cdb0 	.word	0x2000cdb0

080013a4 <_exit>:

void _exit (int status)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013ac:	f04f 31ff 	mov.w	r1, #4294967295
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff ffe5 	bl	8001380 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013b6:	bf00      	nop
 80013b8:	e7fd      	b.n	80013b6 <_exit+0x12>

080013ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b086      	sub	sp, #24
 80013be:	af00      	add	r7, sp, #0
 80013c0:	60f8      	str	r0, [r7, #12]
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	e00a      	b.n	80013e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013cc:	f3af 8000 	nop.w
 80013d0:	4601      	mov	r1, r0
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	1c5a      	adds	r2, r3, #1
 80013d6:	60ba      	str	r2, [r7, #8]
 80013d8:	b2ca      	uxtb	r2, r1
 80013da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	3301      	adds	r3, #1
 80013e0:	617b      	str	r3, [r7, #20]
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	dbf0      	blt.n	80013cc <_read+0x12>
  }

  return len;
 80013ea:	687b      	ldr	r3, [r7, #4]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001400:	4618      	mov	r0, r3
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800141c:	605a      	str	r2, [r3, #4]
  return 0;
 800141e:	2300      	movs	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <_isatty>:

int _isatty(int file)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001434:	2301      	movs	r3, #1
}
 8001436:	4618      	mov	r0, r3
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001442:	b480      	push	{r7}
 8001444:	b085      	sub	sp, #20
 8001446:	af00      	add	r7, sp, #0
 8001448:	60f8      	str	r0, [r7, #12]
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800145c:	b480      	push	{r7}
 800145e:	b087      	sub	sp, #28
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001464:	4a14      	ldr	r2, [pc, #80]	@ (80014b8 <_sbrk+0x5c>)
 8001466:	4b15      	ldr	r3, [pc, #84]	@ (80014bc <_sbrk+0x60>)
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001470:	4b13      	ldr	r3, [pc, #76]	@ (80014c0 <_sbrk+0x64>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d102      	bne.n	800147e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001478:	4b11      	ldr	r3, [pc, #68]	@ (80014c0 <_sbrk+0x64>)
 800147a:	4a12      	ldr	r2, [pc, #72]	@ (80014c4 <_sbrk+0x68>)
 800147c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800147e:	4b10      	ldr	r3, [pc, #64]	@ (80014c0 <_sbrk+0x64>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	429a      	cmp	r2, r3
 800148a:	d205      	bcs.n	8001498 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800148c:	4b0e      	ldr	r3, [pc, #56]	@ (80014c8 <_sbrk+0x6c>)
 800148e:	220c      	movs	r2, #12
 8001490:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001492:	f04f 33ff 	mov.w	r3, #4294967295
 8001496:	e009      	b.n	80014ac <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001498:	4b09      	ldr	r3, [pc, #36]	@ (80014c0 <_sbrk+0x64>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800149e:	4b08      	ldr	r3, [pc, #32]	@ (80014c0 <_sbrk+0x64>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	4a06      	ldr	r2, [pc, #24]	@ (80014c0 <_sbrk+0x64>)
 80014a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014aa:	68fb      	ldr	r3, [r7, #12]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	371c      	adds	r7, #28
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	20030000 	.word	0x20030000
 80014bc:	00000400 	.word	0x00000400
 80014c0:	20000944 	.word	0x20000944
 80014c4:	2000cdc0 	.word	0x2000cdc0
 80014c8:	2000cdb0 	.word	0x2000cdb0

080014cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014d0:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <SystemInit+0x20>)
 80014d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014d6:	4a05      	ldr	r2, [pc, #20]	@ (80014ec <SystemInit+0x20>)
 80014d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <udpecho_raw_recv>:
static struct udp_pcb *udpecho_raw_pcb;

static void
udpecho_raw_recv(void *arg, struct udp_pcb *upcb, struct pbuf *p,
                 const ip_addr_t *addr, u16_t port)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
 80014fc:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d00c      	beq.n	800151e <udpecho_raw_recv+0x2e>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001504:	2101      	movs	r1, #1
 8001506:	4808      	ldr	r0, [pc, #32]	@ (8001528 <udpecho_raw_recv+0x38>)
 8001508:	f002 fb5b 	bl	8003bc2 <HAL_GPIO_TogglePin>
    /* send received packet back to sender */
    udp_sendto(upcb, p, addr, port);
 800150c:	8b3b      	ldrh	r3, [r7, #24]
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	68b8      	ldr	r0, [r7, #8]
 8001514:	f010 f9f4 	bl	8011900 <udp_sendto>
    /* free the pbuf */
    pbuf_free(p);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f00a fab3 	bl	800ba84 <pbuf_free>
  }
}
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40020400 	.word	0x40020400

0800152c <udpecho_raw_init>:

void
udpecho_raw_init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
  udpecho_raw_pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 8001532:	202e      	movs	r0, #46	@ 0x2e
 8001534:	f010 fd50 	bl	8011fd8 <udp_new_ip_type>
 8001538:	4603      	mov	r3, r0
 800153a:	4a14      	ldr	r2, [pc, #80]	@ (800158c <udpecho_raw_init+0x60>)
 800153c:	6013      	str	r3, [r2, #0]
  if (udpecho_raw_pcb != NULL) {
 800153e:	4b13      	ldr	r3, [pc, #76]	@ (800158c <udpecho_raw_init+0x60>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d01b      	beq.n	800157e <udpecho_raw_init+0x52>
    err_t err;

    err = udp_bind(udpecho_raw_pcb, IP_ANY_TYPE, 7);
 8001546:	4b11      	ldr	r3, [pc, #68]	@ (800158c <udpecho_raw_init+0x60>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2207      	movs	r2, #7
 800154c:	4910      	ldr	r1, [pc, #64]	@ (8001590 <udpecho_raw_init+0x64>)
 800154e:	4618      	mov	r0, r3
 8001550:	f010 fbd0 	bl	8011cf4 <udp_bind>
 8001554:	4603      	mov	r3, r0
 8001556:	71fb      	strb	r3, [r7, #7]
    if (err == ERR_OK) {
 8001558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d107      	bne.n	8001570 <udpecho_raw_init+0x44>
      udp_recv(udpecho_raw_pcb, udpecho_raw_recv, NULL);
 8001560:	4b0a      	ldr	r3, [pc, #40]	@ (800158c <udpecho_raw_init+0x60>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2200      	movs	r2, #0
 8001566:	490b      	ldr	r1, [pc, #44]	@ (8001594 <udpecho_raw_init+0x68>)
 8001568:	4618      	mov	r0, r3
 800156a:	f010 fcb9 	bl	8011ee0 <udp_recv>
    }
  } else {
    /* abort? output diagnostic? */
  	printf("udpecho_raw_init Failed to get IP Type\r\n");
  }
}
 800156e:	e009      	b.n	8001584 <udpecho_raw_init+0x58>
    	printf("udpecho_raw_init Bind Error Code: 0x%02X\r\n", err);
 8001570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001574:	4619      	mov	r1, r3
 8001576:	4808      	ldr	r0, [pc, #32]	@ (8001598 <udpecho_raw_init+0x6c>)
 8001578:	f015 fd6e 	bl	8017058 <iprintf>
}
 800157c:	e002      	b.n	8001584 <udpecho_raw_init+0x58>
  	printf("udpecho_raw_init Failed to get IP Type\r\n");
 800157e:	4807      	ldr	r0, [pc, #28]	@ (800159c <udpecho_raw_init+0x70>)
 8001580:	f015 fdd2 	bl	8017128 <puts>
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000948 	.word	0x20000948
 8001590:	0801b8d4 	.word	0x0801b8d4
 8001594:	080014f1 	.word	0x080014f1
 8001598:	080183cc 	.word	0x080183cc
 800159c:	080183f8 	.word	0x080183f8

080015a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80015a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015a4:	f7ff ff92 	bl	80014cc <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015a8:	480c      	ldr	r0, [pc, #48]	@ (80015dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015aa:	490d      	ldr	r1, [pc, #52]	@ (80015e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015ac:	4a0d      	ldr	r2, [pc, #52]	@ (80015e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b0:	e002      	b.n	80015b8 <LoopCopyDataInit>

080015b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015b6:	3304      	adds	r3, #4

080015b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015bc:	d3f9      	bcc.n	80015b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015be:	4a0a      	ldr	r2, [pc, #40]	@ (80015e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015c0:	4c0a      	ldr	r4, [pc, #40]	@ (80015ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80015c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c4:	e001      	b.n	80015ca <LoopFillZerobss>

080015c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c8:	3204      	adds	r2, #4

080015ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015cc:	d3fb      	bcc.n	80015c6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80015ce:	f015 ff79 	bl	80174c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015d2:	f7ff fa91 	bl	8000af8 <main>
  bx  lr    
 80015d6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80015d8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80015dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e0:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80015e4:	0801b9e4 	.word	0x0801b9e4
  ldr r2, =_sbss
 80015e8:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80015ec:	2000cdc0 	.word	0x2000cdc0

080015f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015f0:	e7fe      	b.n	80015f0 <ADC_IRQHandler>

080015f2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
 80015fa:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d00b      	beq.n	800161a <LAN8742_RegisterBusIO+0x28>
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d007      	beq.n	800161a <LAN8742_RegisterBusIO+0x28>
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <LAN8742_RegisterBusIO+0x28>
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d102      	bne.n	8001620 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800161a:	f04f 33ff 	mov.w	r3, #4294967295
 800161e:	e014      	b.n	800164a <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	691a      	ldr	r2, [r3, #16]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001656:	b580      	push	{r7, lr}
 8001658:	b086      	sub	sp, #24
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d17c      	bne.n	8001770 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d002      	beq.n	8001684 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2220      	movs	r2, #32
 8001688:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	e01c      	b.n	80016ca <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	695b      	ldr	r3, [r3, #20]
 8001694:	f107 0208 	add.w	r2, r7, #8
 8001698:	2112      	movs	r1, #18
 800169a:	6978      	ldr	r0, [r7, #20]
 800169c:	4798      	blx	r3
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	da03      	bge.n	80016ac <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80016a4:	f06f 0304 	mvn.w	r3, #4
 80016a8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80016aa:	e00b      	b.n	80016c4 <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	f003 031f 	and.w	r3, r3, #31
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d105      	bne.n	80016c4 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
         break;
 80016c2:	e005      	b.n	80016d0 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	3301      	adds	r3, #1
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	2b1f      	cmp	r3, #31
 80016ce:	d9df      	bls.n	8001690 <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b1f      	cmp	r3, #31
 80016d6:	d902      	bls.n	80016de <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80016d8:	f06f 0302 	mvn.w	r3, #2
 80016dc:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d145      	bne.n	8001770 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	6810      	ldr	r0, [r2, #0]
 80016ec:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80016f0:	2100      	movs	r1, #0
 80016f2:	4798      	blx	r3
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	db37      	blt.n	800176a <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6810      	ldr	r0, [r2, #0]
 8001702:	f107 0208 	add.w	r2, r7, #8
 8001706:	2100      	movs	r1, #0
 8001708:	4798      	blx	r3
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	db28      	blt.n	8001762 <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	4798      	blx	r3
 8001716:	4603      	mov	r3, r0
 8001718:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800171a:	e01c      	b.n	8001756 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	4798      	blx	r3
 8001722:	4603      	mov	r3, r0
 8001724:	461a      	mov	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800172e:	d80e      	bhi.n	800174e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	6810      	ldr	r0, [r2, #0]
 8001738:	f107 0208 	add.w	r2, r7, #8
 800173c:	2100      	movs	r1, #0
 800173e:	4798      	blx	r3
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	da07      	bge.n	8001756 <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 8001746:	f06f 0304 	mvn.w	r3, #4
 800174a:	613b      	str	r3, [r7, #16]
                 break;
 800174c:	e010      	b.n	8001770 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800174e:	f06f 0301 	mvn.w	r3, #1
 8001752:	613b      	str	r3, [r7, #16]
               break;
 8001754:	e00c      	b.n	8001770 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1dd      	bne.n	800171c <LAN8742_Init+0xc6>
 8001760:	e006      	b.n	8001770 <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001762:	f06f 0304 	mvn.w	r3, #4
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	e002      	b.n	8001770 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800176a:	f06f 0303 	mvn.w	r3, #3
 800176e:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d112      	bne.n	800179c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	4798      	blx	r3
 800177c:	4603      	mov	r3, r0
 800177e:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001780:	bf00      	nop
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	4798      	blx	r3
 8001788:	4603      	mov	r3, r0
 800178a:	461a      	mov	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001794:	d9f5      	bls.n	8001782 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2201      	movs	r2, #1
 800179a:	605a      	str	r2, [r3, #4]
   }

   return status;
 800179c:	693b      	ldr	r3, [r7, #16]
 }
 800179e:	4618      	mov	r0, r3
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b084      	sub	sp, #16
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6810      	ldr	r0, [r2, #0]
 80017ba:	f107 020c 	add.w	r2, r7, #12
 80017be:	2101      	movs	r1, #1
 80017c0:	4798      	blx	r3
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	da02      	bge.n	80017ce <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80017c8:	f06f 0304 	mvn.w	r3, #4
 80017cc:	e06e      	b.n	80018ac <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	6810      	ldr	r0, [r2, #0]
 80017d6:	f107 020c 	add.w	r2, r7, #12
 80017da:	2101      	movs	r1, #1
 80017dc:	4798      	blx	r3
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	da02      	bge.n	80017ea <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80017e4:	f06f 0304 	mvn.w	r3, #4
 80017e8:	e060      	b.n	80018ac <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d101      	bne.n	80017f8 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e059      	b.n	80018ac <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	695b      	ldr	r3, [r3, #20]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	6810      	ldr	r0, [r2, #0]
 8001800:	f107 020c 	add.w	r2, r7, #12
 8001804:	2100      	movs	r1, #0
 8001806:	4798      	blx	r3
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	da02      	bge.n	8001814 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800180e:	f06f 0304 	mvn.w	r3, #4
 8001812:	e04b      	b.n	80018ac <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d11b      	bne.n	8001856 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d006      	beq.n	8001836 <LAN8742_GetLinkState+0x90>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001832:	2302      	movs	r3, #2
 8001834:	e03a      	b.n	80018ac <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001840:	2303      	movs	r3, #3
 8001842:	e033      	b.n	80018ac <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800184e:	2304      	movs	r3, #4
 8001850:	e02c      	b.n	80018ac <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001852:	2305      	movs	r3, #5
 8001854:	e02a      	b.n	80018ac <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	6810      	ldr	r0, [r2, #0]
 800185e:	f107 020c 	add.w	r2, r7, #12
 8001862:	211f      	movs	r1, #31
 8001864:	4798      	blx	r3
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	da02      	bge.n	8001872 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800186c:	f06f 0304 	mvn.w	r3, #4
 8001870:	e01c      	b.n	80018ac <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800187c:	2306      	movs	r3, #6
 800187e:	e015      	b.n	80018ac <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f003 031c 	and.w	r3, r3, #28
 8001886:	2b18      	cmp	r3, #24
 8001888:	d101      	bne.n	800188e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800188a:	2302      	movs	r3, #2
 800188c:	e00e      	b.n	80018ac <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f003 031c 	and.w	r3, r3, #28
 8001894:	2b08      	cmp	r3, #8
 8001896:	d101      	bne.n	800189c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001898:	2303      	movs	r3, #3
 800189a:	e007      	b.n	80018ac <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f003 031c 	and.w	r3, r3, #28
 80018a2:	2b14      	cmp	r3, #20
 80018a4:	d101      	bne.n	80018aa <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80018a6:	2304      	movs	r3, #4
 80018a8:	e000      	b.n	80018ac <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80018aa:	2305      	movs	r3, #5
    }
  }
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018b8:	4b0e      	ldr	r3, [pc, #56]	@ (80018f4 <HAL_Init+0x40>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a0d      	ldr	r2, [pc, #52]	@ (80018f4 <HAL_Init+0x40>)
 80018be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018c4:	4b0b      	ldr	r3, [pc, #44]	@ (80018f4 <HAL_Init+0x40>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a0a      	ldr	r2, [pc, #40]	@ (80018f4 <HAL_Init+0x40>)
 80018ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018d0:	4b08      	ldr	r3, [pc, #32]	@ (80018f4 <HAL_Init+0x40>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a07      	ldr	r2, [pc, #28]	@ (80018f4 <HAL_Init+0x40>)
 80018d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018dc:	2003      	movs	r0, #3
 80018de:	f000 f8fc 	bl	8001ada <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018e2:	200f      	movs	r0, #15
 80018e4:	f7ff fc82 	bl	80011ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018e8:	f7ff fb40 	bl	8000f6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40023c00 	.word	0x40023c00

080018f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018fc:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <HAL_IncTick+0x20>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	461a      	mov	r2, r3
 8001902:	4b06      	ldr	r3, [pc, #24]	@ (800191c <HAL_IncTick+0x24>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4413      	add	r3, r2
 8001908:	4a04      	ldr	r2, [pc, #16]	@ (800191c <HAL_IncTick+0x24>)
 800190a:	6013      	str	r3, [r2, #0]
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	2000000c 	.word	0x2000000c
 800191c:	2000094c 	.word	0x2000094c

08001920 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return uwTick;
 8001924:	4b03      	ldr	r3, [pc, #12]	@ (8001934 <HAL_GetTick+0x14>)
 8001926:	681b      	ldr	r3, [r3, #0]
}
 8001928:	4618      	mov	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	2000094c 	.word	0x2000094c

08001938 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001940:	f7ff ffee 	bl	8001920 <HAL_GetTick>
 8001944:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001950:	d005      	beq.n	800195e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001952:	4b0a      	ldr	r3, [pc, #40]	@ (800197c <HAL_Delay+0x44>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	461a      	mov	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4413      	add	r3, r2
 800195c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800195e:	bf00      	nop
 8001960:	f7ff ffde 	bl	8001920 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	429a      	cmp	r2, r3
 800196e:	d8f7      	bhi.n	8001960 <HAL_Delay+0x28>
  {
  }
}
 8001970:	bf00      	nop
 8001972:	bf00      	nop
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	2000000c 	.word	0x2000000c

08001980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001990:	4b0c      	ldr	r3, [pc, #48]	@ (80019c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800199c:	4013      	ands	r3, r2
 800199e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019b2:	4a04      	ldr	r2, [pc, #16]	@ (80019c4 <__NVIC_SetPriorityGrouping+0x44>)
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	60d3      	str	r3, [r2, #12]
}
 80019b8:	bf00      	nop
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019cc:	4b04      	ldr	r3, [pc, #16]	@ (80019e0 <__NVIC_GetPriorityGrouping+0x18>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	0a1b      	lsrs	r3, r3, #8
 80019d2:	f003 0307 	and.w	r3, r3, #7
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	db0b      	blt.n	8001a0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	f003 021f 	and.w	r2, r3, #31
 80019fc:	4907      	ldr	r1, [pc, #28]	@ (8001a1c <__NVIC_EnableIRQ+0x38>)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	095b      	lsrs	r3, r3, #5
 8001a04:	2001      	movs	r0, #1
 8001a06:	fa00 f202 	lsl.w	r2, r0, r2
 8001a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	e000e100 	.word	0xe000e100

08001a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	6039      	str	r1, [r7, #0]
 8001a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	db0a      	blt.n	8001a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	490c      	ldr	r1, [pc, #48]	@ (8001a6c <__NVIC_SetPriority+0x4c>)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	0112      	lsls	r2, r2, #4
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	440b      	add	r3, r1
 8001a44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a48:	e00a      	b.n	8001a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4908      	ldr	r1, [pc, #32]	@ (8001a70 <__NVIC_SetPriority+0x50>)
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	3b04      	subs	r3, #4
 8001a58:	0112      	lsls	r2, r2, #4
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	761a      	strb	r2, [r3, #24]
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000e100 	.word	0xe000e100
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b089      	sub	sp, #36	@ 0x24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f1c3 0307 	rsb	r3, r3, #7
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	bf28      	it	cs
 8001a92:	2304      	movcs	r3, #4
 8001a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	2b06      	cmp	r3, #6
 8001a9c:	d902      	bls.n	8001aa4 <NVIC_EncodePriority+0x30>
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3b03      	subs	r3, #3
 8001aa2:	e000      	b.n	8001aa6 <NVIC_EncodePriority+0x32>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43da      	mvns	r2, r3
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001abc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac6:	43d9      	mvns	r1, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001acc:	4313      	orrs	r3, r2
         );
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3724      	adds	r7, #36	@ 0x24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff ff4c 	bl	8001980 <__NVIC_SetPriorityGrouping>
}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
 8001afc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b02:	f7ff ff61 	bl	80019c8 <__NVIC_GetPriorityGrouping>
 8001b06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	68b9      	ldr	r1, [r7, #8]
 8001b0c:	6978      	ldr	r0, [r7, #20]
 8001b0e:	f7ff ffb1 	bl	8001a74 <NVIC_EncodePriority>
 8001b12:	4602      	mov	r2, r0
 8001b14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b18:	4611      	mov	r1, r2
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff ff80 	bl	8001a20 <__NVIC_SetPriority>
}
 8001b20:	bf00      	nop
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff ff54 	bl	80019e4 <__NVIC_EnableIRQ>
}
 8001b3c:	bf00      	nop
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e00e      	b.n	8001b74 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	795b      	ldrb	r3, [r3, #5]
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d105      	bne.n	8001b6c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff fa2c 	bl	8000fc4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b88:	f7ff feca 	bl	8001920 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e099      	b.n	8001ccc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 0201 	bic.w	r2, r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bb8:	e00f      	b.n	8001bda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bba:	f7ff feb1 	bl	8001920 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b05      	cmp	r3, #5
 8001bc6:	d908      	bls.n	8001bda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2220      	movs	r2, #32
 8001bcc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2203      	movs	r2, #3
 8001bd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e078      	b.n	8001ccc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1e8      	bne.n	8001bba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	4b38      	ldr	r3, [pc, #224]	@ (8001cd4 <HAL_DMA_Init+0x158>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d107      	bne.n	8001c44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f023 0307 	bic.w	r3, r3, #7
 8001c5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d117      	bne.n	8001c9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00e      	beq.n	8001c9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 fb01 	bl	8002288 <DMA_CheckFifoParam>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d008      	beq.n	8001c9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2240      	movs	r2, #64	@ 0x40
 8001c90:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e016      	b.n	8001ccc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 fab8 	bl	800221c <DMA_CalcBaseAndBitshift>
 8001cac:	4603      	mov	r3, r0
 8001cae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cb4:	223f      	movs	r2, #63	@ 0x3f
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	f010803f 	.word	0xf010803f

08001cd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
 8001ce4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d101      	bne.n	8001cfe <HAL_DMA_Start_IT+0x26>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e040      	b.n	8001d80 <HAL_DMA_Start_IT+0xa8>
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d12f      	bne.n	8001d72 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2202      	movs	r2, #2
 8001d16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	68b9      	ldr	r1, [r7, #8]
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 fa4a 	bl	80021c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d30:	223f      	movs	r2, #63	@ 0x3f
 8001d32:	409a      	lsls	r2, r3
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0216 	orr.w	r2, r2, #22
 8001d46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d007      	beq.n	8001d60 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0208 	orr.w	r2, r2, #8
 8001d5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0201 	orr.w	r2, r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	e005      	b.n	8001d7e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d94:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d96:	f7ff fdc3 	bl	8001920 <HAL_GetTick>
 8001d9a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d008      	beq.n	8001dba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2280      	movs	r2, #128	@ 0x80
 8001dac:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e052      	b.n	8001e60 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 0216 	bic.w	r2, r2, #22
 8001dc8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	695a      	ldr	r2, [r3, #20]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001dd8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d103      	bne.n	8001dea <HAL_DMA_Abort+0x62>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d007      	beq.n	8001dfa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 0208 	bic.w	r2, r2, #8
 8001df8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 0201 	bic.w	r2, r2, #1
 8001e08:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e0a:	e013      	b.n	8001e34 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e0c:	f7ff fd88 	bl	8001920 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b05      	cmp	r3, #5
 8001e18:	d90c      	bls.n	8001e34 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2203      	movs	r2, #3
 8001e24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e015      	b.n	8001e60 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1e4      	bne.n	8001e0c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e46:	223f      	movs	r2, #63	@ 0x3f
 8001e48:	409a      	lsls	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d004      	beq.n	8001e86 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2280      	movs	r2, #128	@ 0x80
 8001e80:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e00c      	b.n	8001ea0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2205      	movs	r2, #5
 8001e8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0201 	bic.w	r2, r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001eb8:	4b8e      	ldr	r3, [pc, #568]	@ (80020f4 <HAL_DMA_IRQHandler+0x248>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a8e      	ldr	r2, [pc, #568]	@ (80020f8 <HAL_DMA_IRQHandler+0x24c>)
 8001ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec2:	0a9b      	lsrs	r3, r3, #10
 8001ec4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ed6:	2208      	movs	r2, #8
 8001ed8:	409a      	lsls	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4013      	ands	r3, r2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d01a      	beq.n	8001f18 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d013      	beq.n	8001f18 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 0204 	bic.w	r2, r2, #4
 8001efe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f04:	2208      	movs	r2, #8
 8001f06:	409a      	lsls	r2, r3
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f10:	f043 0201 	orr.w	r2, r3, #1
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	409a      	lsls	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4013      	ands	r3, r2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d012      	beq.n	8001f4e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00b      	beq.n	8001f4e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	409a      	lsls	r2, r3
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f46:	f043 0202 	orr.w	r2, r3, #2
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f52:	2204      	movs	r2, #4
 8001f54:	409a      	lsls	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d012      	beq.n	8001f84 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00b      	beq.n	8001f84 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f70:	2204      	movs	r2, #4
 8001f72:	409a      	lsls	r2, r3
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f7c:	f043 0204 	orr.w	r2, r3, #4
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f88:	2210      	movs	r2, #16
 8001f8a:	409a      	lsls	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d043      	beq.n	800201c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d03c      	beq.n	800201c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa6:	2210      	movs	r2, #16
 8001fa8:	409a      	lsls	r2, r3
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d018      	beq.n	8001fee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d108      	bne.n	8001fdc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d024      	beq.n	800201c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	4798      	blx	r3
 8001fda:	e01f      	b.n	800201c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d01b      	beq.n	800201c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	4798      	blx	r3
 8001fec:	e016      	b.n	800201c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d107      	bne.n	800200c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0208 	bic.w	r2, r2, #8
 800200a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002020:	2220      	movs	r2, #32
 8002022:	409a      	lsls	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4013      	ands	r3, r2
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 808f 	beq.w	800214c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0310 	and.w	r3, r3, #16
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 8087 	beq.w	800214c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002042:	2220      	movs	r2, #32
 8002044:	409a      	lsls	r2, r3
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b05      	cmp	r3, #5
 8002054:	d136      	bne.n	80020c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 0216 	bic.w	r2, r2, #22
 8002064:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	695a      	ldr	r2, [r3, #20]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002074:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207a:	2b00      	cmp	r3, #0
 800207c:	d103      	bne.n	8002086 <HAL_DMA_IRQHandler+0x1da>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002082:	2b00      	cmp	r3, #0
 8002084:	d007      	beq.n	8002096 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0208 	bic.w	r2, r2, #8
 8002094:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800209a:	223f      	movs	r2, #63	@ 0x3f
 800209c:	409a      	lsls	r2, r3
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d07e      	beq.n	80021b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	4798      	blx	r3
        }
        return;
 80020c2:	e079      	b.n	80021b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d01d      	beq.n	800210e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d10d      	bne.n	80020fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d031      	beq.n	800214c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	4798      	blx	r3
 80020f0:	e02c      	b.n	800214c <HAL_DMA_IRQHandler+0x2a0>
 80020f2:	bf00      	nop
 80020f4:	20000004 	.word	0x20000004
 80020f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002100:	2b00      	cmp	r3, #0
 8002102:	d023      	beq.n	800214c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	4798      	blx	r3
 800210c:	e01e      	b.n	800214c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10f      	bne.n	800213c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f022 0210 	bic.w	r2, r2, #16
 800212a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002150:	2b00      	cmp	r3, #0
 8002152:	d032      	beq.n	80021ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b00      	cmp	r3, #0
 800215e:	d022      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2205      	movs	r2, #5
 8002164:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0201 	bic.w	r2, r2, #1
 8002176:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	3301      	adds	r3, #1
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	429a      	cmp	r2, r3
 8002182:	d307      	bcc.n	8002194 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f2      	bne.n	8002178 <HAL_DMA_IRQHandler+0x2cc>
 8002192:	e000      	b.n	8002196 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002194:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d005      	beq.n	80021ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	4798      	blx	r3
 80021b6:	e000      	b.n	80021ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80021b8:	bf00      	nop
    }
  }
}
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
 80021cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80021dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2b40      	cmp	r3, #64	@ 0x40
 80021ec:	d108      	bne.n	8002200 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80021fe:	e007      	b.n	8002210 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68ba      	ldr	r2, [r7, #8]
 8002206:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	60da      	str	r2, [r3, #12]
}
 8002210:	bf00      	nop
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	3b10      	subs	r3, #16
 800222c:	4a14      	ldr	r2, [pc, #80]	@ (8002280 <DMA_CalcBaseAndBitshift+0x64>)
 800222e:	fba2 2303 	umull	r2, r3, r2, r3
 8002232:	091b      	lsrs	r3, r3, #4
 8002234:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002236:	4a13      	ldr	r2, [pc, #76]	@ (8002284 <DMA_CalcBaseAndBitshift+0x68>)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4413      	add	r3, r2
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2b03      	cmp	r3, #3
 8002248:	d909      	bls.n	800225e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002252:	f023 0303 	bic.w	r3, r3, #3
 8002256:	1d1a      	adds	r2, r3, #4
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	659a      	str	r2, [r3, #88]	@ 0x58
 800225c:	e007      	b.n	800226e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002266:	f023 0303 	bic.w	r3, r3, #3
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002272:	4618      	mov	r0, r3
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	aaaaaaab 	.word	0xaaaaaaab
 8002284:	0801b788 	.word	0x0801b788

08002288 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002298:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d11f      	bne.n	80022e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	d856      	bhi.n	8002356 <DMA_CheckFifoParam+0xce>
 80022a8:	a201      	add	r2, pc, #4	@ (adr r2, 80022b0 <DMA_CheckFifoParam+0x28>)
 80022aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ae:	bf00      	nop
 80022b0:	080022c1 	.word	0x080022c1
 80022b4:	080022d3 	.word	0x080022d3
 80022b8:	080022c1 	.word	0x080022c1
 80022bc:	08002357 	.word	0x08002357
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d046      	beq.n	800235a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022d0:	e043      	b.n	800235a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80022da:	d140      	bne.n	800235e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022e0:	e03d      	b.n	800235e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022ea:	d121      	bne.n	8002330 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	d837      	bhi.n	8002362 <DMA_CheckFifoParam+0xda>
 80022f2:	a201      	add	r2, pc, #4	@ (adr r2, 80022f8 <DMA_CheckFifoParam+0x70>)
 80022f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f8:	08002309 	.word	0x08002309
 80022fc:	0800230f 	.word	0x0800230f
 8002300:	08002309 	.word	0x08002309
 8002304:	08002321 	.word	0x08002321
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	73fb      	strb	r3, [r7, #15]
      break;
 800230c:	e030      	b.n	8002370 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002312:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d025      	beq.n	8002366 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800231e:	e022      	b.n	8002366 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002324:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002328:	d11f      	bne.n	800236a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800232e:	e01c      	b.n	800236a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	2b02      	cmp	r3, #2
 8002334:	d903      	bls.n	800233e <DMA_CheckFifoParam+0xb6>
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	2b03      	cmp	r3, #3
 800233a:	d003      	beq.n	8002344 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800233c:	e018      	b.n	8002370 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	73fb      	strb	r3, [r7, #15]
      break;
 8002342:	e015      	b.n	8002370 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002348:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00e      	beq.n	800236e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	73fb      	strb	r3, [r7, #15]
      break;
 8002354:	e00b      	b.n	800236e <DMA_CheckFifoParam+0xe6>
      break;
 8002356:	bf00      	nop
 8002358:	e00a      	b.n	8002370 <DMA_CheckFifoParam+0xe8>
      break;
 800235a:	bf00      	nop
 800235c:	e008      	b.n	8002370 <DMA_CheckFifoParam+0xe8>
      break;
 800235e:	bf00      	nop
 8002360:	e006      	b.n	8002370 <DMA_CheckFifoParam+0xe8>
      break;
 8002362:	bf00      	nop
 8002364:	e004      	b.n	8002370 <DMA_CheckFifoParam+0xe8>
      break;
 8002366:	bf00      	nop
 8002368:	e002      	b.n	8002370 <DMA_CheckFifoParam+0xe8>
      break;   
 800236a:	bf00      	nop
 800236c:	e000      	b.n	8002370 <DMA_CheckFifoParam+0xe8>
      break;
 800236e:	bf00      	nop
    }
  } 
  
  return status; 
 8002370:	7bfb      	ldrb	r3, [r7, #15]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop

08002380 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e06c      	b.n	800246c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002398:	2b00      	cmp	r3, #0
 800239a:	d106      	bne.n	80023aa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2223      	movs	r2, #35	@ 0x23
 80023a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f004 fae5 	bl	8006974 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	4b31      	ldr	r3, [pc, #196]	@ (8002474 <HAL_ETH_Init+0xf4>)
 80023b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b2:	4a30      	ldr	r2, [pc, #192]	@ (8002474 <HAL_ETH_Init+0xf4>)
 80023b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ba:	4b2e      	ldr	r3, [pc, #184]	@ (8002474 <HAL_ETH_Init+0xf4>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80023c6:	4b2c      	ldr	r3, [pc, #176]	@ (8002478 <HAL_ETH_Init+0xf8>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	4a2b      	ldr	r2, [pc, #172]	@ (8002478 <HAL_ETH_Init+0xf8>)
 80023cc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80023d0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80023d2:	4b29      	ldr	r3, [pc, #164]	@ (8002478 <HAL_ETH_Init+0xf8>)
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	4927      	ldr	r1, [pc, #156]	@ (8002478 <HAL_ETH_Init+0xf8>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80023e0:	4b25      	ldr	r3, [pc, #148]	@ (8002478 <HAL_ETH_Init+0xf8>)
 80023e2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6812      	ldr	r2, [r2, #0]
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023fa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023fc:	f7ff fa90 	bl	8001920 <HAL_GetTick>
 8002400:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002402:	e011      	b.n	8002428 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002404:	f7ff fa8c 	bl	8001920 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002412:	d909      	bls.n	8002428 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2204      	movs	r2, #4
 8002418:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	22e0      	movs	r2, #224	@ 0xe0
 8002420:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e021      	b.n	800246c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1e4      	bne.n	8002404 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 ff56 	bl	80032ec <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 fffd 	bl	8003440 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f001 f853 	bl	80034f2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	461a      	mov	r2, r3
 8002452:	2100      	movs	r1, #0
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 ffbb 	bl	80033d0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2210      	movs	r2, #16
 8002466:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40023800 	.word	0x40023800
 8002478:	40013800 	.word	0x40013800

0800247c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800248a:	2b10      	cmp	r3, #16
 800248c:	d17f      	bne.n	800258e <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2223      	movs	r2, #35	@ 0x23
 8002492:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80024aa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024bc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80024c0:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80024d4:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2204      	movs	r2, #4
 80024dc:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f9f8 	bl	80028d4 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0208 	orr.w	r2, r2, #8
 80024f2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80024fc:	2001      	movs	r0, #1
 80024fe:	f7ff fa1b 	bl	8001938 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f042 0204 	orr.w	r2, r2, #4
 8002518:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002522:	2001      	movs	r0, #1
 8002524:	f7ff fa08 	bl	8001938 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 fd7c 	bl	800302e <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002548:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800254c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	f043 0302 	orr.w	r3, r3, #2
 8002560:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002564:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 8002578:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 800257c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002580:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2223      	movs	r2, #35	@ 0x23
 8002586:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	e000      	b.n	8002590 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
  }
}
 8002590:	4618      	mov	r0, r3
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025a6:	2b23      	cmp	r3, #35	@ 0x23
 80025a8:	d170      	bne.n	800268c <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2223      	movs	r2, #35	@ 0x23
 80025ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6812      	ldr	r2, [r2, #0]
 80025c0:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 80025c4:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 80025c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025cc:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80025e0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025e4:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6812      	ldr	r2, [r2, #0]
 80025f4:	f023 0302 	bic.w	r3, r3, #2
 80025f8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025fc:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0204 	bic.w	r2, r2, #4
 800260c:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002616:	2001      	movs	r0, #1
 8002618:	f7ff f98e 	bl	8001938 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 fd02 	bl	800302e <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0208 	bic.w	r2, r2, #8
 8002638:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002642:	2001      	movs	r0, #1
 8002644:	f7ff f978 	bl	8001938 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	e00e      	b.n	8002674 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	3212      	adds	r2, #18
 800265c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002660:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	3301      	adds	r3, #1
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	2b03      	cmp	r3, #3
 8002678:	d9ed      	bls.n	8002656 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2210      	movs	r2, #16
 8002684:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8002688:	2300      	movs	r3, #0
 800268a:	e000      	b.n	800268e <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
  }
}
 800268e:	4618      	mov	r0, r3
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
 800269e:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d109      	bne.n	80026ba <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ac:	f043 0201 	orr.w	r2, r3, #1
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e045      	b.n	8002746 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026c0:	2b23      	cmp	r3, #35	@ 0x23
 80026c2:	d13f      	bne.n	8002744 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80026cc:	2201      	movs	r2, #1
 80026ce:	6839      	ldr	r1, [r7, #0]
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 ff7b 	bl	80035cc <ETH_Prepare_Tx_Descriptors>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d009      	beq.n	80026f0 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026e2:	f043 0202 	orr.w	r2, r3, #2
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e02a      	b.n	8002746 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 80026f0:	f3bf 8f4f 	dsb	sy
}
 80026f4:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002704:	2b03      	cmp	r3, #3
 8002706:	d904      	bls.n	8002712 <HAL_ETH_Transmit_IT+0x7c>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800270c:	1f1a      	subs	r2, r3, #4
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00d      	beq.n	8002740 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800272c:	461a      	mov	r2, r3
 800272e:	2304      	movs	r3, #4
 8002730:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800273a:	461a      	mov	r2, r3
 800273c:	2300      	movs	r3, #0
 800273e:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	e000      	b.n	8002746 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
  }
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b088      	sub	sp, #32
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
 8002756:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002758:	2300      	movs	r3, #0
 800275a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d109      	bne.n	800277a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276c:	f043 0201 	orr.w	r2, r3, #1
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e0a8      	b.n	80028cc <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002780:	2b23      	cmp	r3, #35	@ 0x23
 8002782:	d001      	beq.n	8002788 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e0a1      	b.n	80028cc <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800278c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69fa      	ldr	r2, [r7, #28]
 8002792:	3212      	adds	r2, #18
 8002794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002798:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800279e:	f1c3 0304 	rsb	r3, r3, #4
 80027a2:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80027a4:	e06a      	b.n	800287c <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d007      	beq.n	80027c2 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	69da      	ldr	r2, [r3, #28]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	699a      	ldr	r2, [r3, #24]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d103      	bne.n	80027d6 <HAL_ETH_ReadData+0x88>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d040      	beq.n	8002858 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d005      	beq.n	80027ee <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00c      	beq.n	800281a <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	0c1b      	lsrs	r3, r3, #16
 8002806:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800280a:	3b04      	subs	r3, #4
 800280c:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8002816:	2301      	movs	r3, #1
 8002818:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	689a      	ldr	r2, [r3, #8]
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002832:	461a      	mov	r2, r3
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	b29b      	uxth	r3, r3
 8002838:	f004 fa76 	bl	8006d28 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	441a      	add	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	2200      	movs	r2, #0
 8002856:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	3301      	adds	r3, #1
 800285c:	61fb      	str	r3, [r7, #28]
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	2b03      	cmp	r3, #3
 8002862:	d902      	bls.n	800286a <HAL_ETH_ReadData+0x11c>
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	3b04      	subs	r3, #4
 8002868:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69fa      	ldr	r2, [r7, #28]
 800286e:	3212      	adds	r2, #18
 8002870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002874:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	3301      	adds	r3, #1
 800287a:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8002880:	2b00      	cmp	r3, #0
 8002882:	db06      	blt.n	8002892 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	429a      	cmp	r2, r3
 800288a:	d202      	bcs.n	8002892 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800288c:	7bfb      	ldrb	r3, [r7, #15]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d089      	beq.n	80027a6 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	441a      	add	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f814 	bl	80028d4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69fa      	ldr	r2, [r7, #28]
 80028b0:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d108      	bne.n	80028ca <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	e000      	b.n	80028cc <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3720      	adds	r7, #32
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80028e0:	2301      	movs	r3, #1
 80028e2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028e8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69fa      	ldr	r2, [r7, #28]
 80028ee:	3212      	adds	r2, #18
 80028f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028f4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028fa:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80028fc:	e03d      	b.n	800297a <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d112      	bne.n	800292c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002906:	f107 0308 	add.w	r3, r7, #8
 800290a:	4618      	mov	r0, r3
 800290c:	f004 f9dc 	bl	8006cc8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d102      	bne.n	800291c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002916:	2300      	movs	r3, #0
 8002918:	74fb      	strb	r3, [r7, #19]
 800291a:	e007      	b.n	800292c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	461a      	mov	r2, r3
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	461a      	mov	r2, r3
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800292c:	7cfb      	ldrb	r3, [r7, #19]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d023      	beq.n	800297a <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002936:	2b00      	cmp	r3, #0
 8002938:	d103      	bne.n	8002942 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	4a24      	ldr	r2, [pc, #144]	@ (80029d0 <ETH_UpdateDescriptor+0xfc>)
 800293e:	605a      	str	r2, [r3, #4]
 8002940:	e003      	b.n	800294a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8002948:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	3301      	adds	r3, #1
 800295a:	61fb      	str	r3, [r7, #28]
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	2b03      	cmp	r3, #3
 8002960:	d902      	bls.n	8002968 <ETH_UpdateDescriptor+0x94>
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3b04      	subs	r3, #4
 8002966:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69fa      	ldr	r2, [r7, #28]
 800296c:	3212      	adds	r2, #18
 800296e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002972:	617b      	str	r3, [r7, #20]
      desccount--;
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	3b01      	subs	r3, #1
 8002978:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d002      	beq.n	8002986 <ETH_UpdateDescriptor+0xb2>
 8002980:	7cfb      	ldrb	r3, [r7, #19]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1bb      	bne.n	80028fe <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	429a      	cmp	r2, r3
 800298e:	d01a      	beq.n	80029c6 <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	3301      	adds	r3, #1
 8002994:	f003 0303 	and.w	r3, r3, #3
 8002998:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800299a:	f3bf 8f5f 	dmb	sy
}
 800299e:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6919      	ldr	r1, [r3, #16]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	4613      	mov	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	18ca      	adds	r2, r1, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029b8:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69fa      	ldr	r2, [r7, #28]
 80029be:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80029c6:	bf00      	nop
 80029c8:	3720      	adds	r7, #32
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	80004600 	.word	0x80004600

080029d4 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3318      	adds	r3, #24
 80029e0:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e6:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ec:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80029ee:	2301      	movs	r3, #1
 80029f0:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80029f2:	e03f      	b.n	8002a74 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80029f4:	2301      	movs	r3, #1
 80029f6:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	3304      	adds	r3, #4
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d106      	bne.n	8002a1c <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	3301      	adds	r3, #1
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002a1c:	7bbb      	ldrb	r3, [r7, #14]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d028      	beq.n	8002a74 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68d9      	ldr	r1, [r3, #12]
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	440b      	add	r3, r1
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	db1b      	blt.n	8002a70 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002a38:	68ba      	ldr	r2, [r7, #8]
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f004 f9af 	bl	8006da8 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	3304      	adds	r3, #4
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	2200      	movs	r2, #0
 8002a56:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002a6e:	e001      	b.n	8002a74 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d002      	beq.n	8002a80 <HAL_ETH_ReleaseTxPacket+0xac>
 8002a7a:	7bfb      	ldrb	r3, [r7, #15]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1b9      	bne.n	80029f4 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3718      	adds	r7, #24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
	...

08002a8c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aa2:	2b40      	cmp	r3, #64	@ 0x40
 8002aa4:	d112      	bne.n	8002acc <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ab4:	2b40      	cmp	r3, #64	@ 0x40
 8002ab6:	d109      	bne.n	8002acc <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4b50      	ldr	r3, [pc, #320]	@ (8002c04 <HAL_ETH_IRQHandler+0x178>)
 8002ac4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f003 fc76 	bl	80063b8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d113      	bne.n	8002b06 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d10a      	bne.n	8002b06 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002af8:	461a      	mov	r2, r3
 8002afa:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8002afe:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f003 fc69 	bl	80063d8 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b18:	d14c      	bne.n	8002bb4 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b2c:	d142      	bne.n	8002bb4 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b34:	f043 0208 	orr.w	r2, r3, #8
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b50:	d11a      	bne.n	8002b88 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b5a:	695a      	ldr	r2, [r3, #20]
 8002b5c:	4b2a      	ldr	r3, [pc, #168]	@ (8002c08 <HAL_ETH_IRQHandler+0x17c>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6812      	ldr	r2, [r2, #0]
 8002b74:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8002b78:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002b7c:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	22e0      	movs	r2, #224	@ 0xe0
 8002b82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002b86:	e012      	b.n	8002bae <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b90:	695a      	ldr	r2, [r3, #20]
 8002b92:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002b96:	4013      	ands	r3, r2
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002bac:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f003 fc22 	bl	80063f8 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b08      	cmp	r3, #8
 8002bc0:	d10e      	bne.n	8002be0 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc8:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f81c 	bl	8002c10 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002be0:	4b0a      	ldr	r3, [pc, #40]	@ (8002c0c <HAL_ETH_IRQHandler+0x180>)
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d006      	beq.n	8002bfa <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002bec:	4b07      	ldr	r3, [pc, #28]	@ (8002c0c <HAL_ETH_IRQHandler+0x180>)
 8002bee:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002bf2:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f815 	bl	8002c24 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	00010040 	.word	0x00010040
 8002c08:	007e2000 	.word	0x007e2000
 8002c0c:	40013c00 	.word	0x40013c00

08002c10 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
 8002c44:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f003 031c 	and.w	r3, r3, #28
 8002c54:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	02db      	lsls	r3, r3, #11
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	019b      	lsls	r3, r3, #6
 8002c66:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f023 0302 	bic.w	r3, r3, #2
 8002c76:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	f043 0301 	orr.w	r3, r3, #1
 8002c7e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002c88:	f7fe fe4a 	bl	8001920 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002c8e:	e00d      	b.n	8002cac <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002c90:	f7fe fe46 	bl	8001920 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c9e:	d301      	bcc.n	8002ca4 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e010      	b.n	8002cc6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1ec      	bne.n	8002c90 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3718      	adds	r7, #24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b086      	sub	sp, #24
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	607a      	str	r2, [r7, #4]
 8002cda:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	f003 031c 	and.w	r3, r3, #28
 8002cea:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	02db      	lsls	r3, r3, #11
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	019b      	lsls	r3, r3, #6
 8002cfc:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f043 0302 	orr.w	r3, r3, #2
 8002d0c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d28:	f7fe fdfa 	bl	8001920 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002d2e:	e00d      	b.n	8002d4c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002d30:	f7fe fdf6 	bl	8001920 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d3e:	d301      	bcc.n	8002d44 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e009      	b.n	8002d58 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1ec      	bne.n	8002d30 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e0d9      	b.n	8002f28 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0310 	and.w	r3, r3, #16
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	bf14      	ite	ne
 8002d82:	2301      	movne	r3, #1
 8002d84:	2300      	moveq	r3, #0
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	461a      	mov	r2, r3
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	bf0c      	ite	eq
 8002dac:	2301      	moveq	r3, #1
 8002dae:	2300      	movne	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	461a      	mov	r2, r3
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	bf14      	ite	ne
 8002dc8:	2301      	movne	r3, #1
 8002dca:	2300      	moveq	r3, #0
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	bf0c      	ite	eq
 8002de2:	2301      	moveq	r3, #1
 8002de4:	2300      	movne	r3, #0
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	461a      	mov	r2, r3
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	bf14      	ite	ne
 8002dfc:	2301      	movne	r3, #1
 8002dfe:	2300      	moveq	r3, #0
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	461a      	mov	r2, r3
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	bf0c      	ite	eq
 8002e32:	2301      	moveq	r3, #1
 8002e34:	2300      	movne	r3, #0
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	461a      	mov	r2, r3
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	bf0c      	ite	eq
 8002e4c:	2301      	moveq	r3, #1
 8002e4e:	2300      	movne	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	461a      	mov	r2, r3
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	bf14      	ite	ne
 8002e66:	2301      	movne	r3, #1
 8002e68:	2300      	moveq	r3, #0
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	bf14      	ite	ne
 8002e8e:	2301      	movne	r3, #1
 8002e90:	2300      	moveq	r3, #0
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	461a      	mov	r2, r3
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	bf14      	ite	ne
 8002ea8:	2301      	movne	r3, #1
 8002eaa:	2300      	moveq	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	461a      	mov	r2, r3
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	bf0c      	ite	eq
 8002ec4:	2301      	moveq	r3, #1
 8002ec6:	2300      	movne	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	461a      	mov	r2, r3
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	0c1b      	lsrs	r3, r3, #16
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	bf14      	ite	ne
 8002efc:	2301      	movne	r3, #1
 8002efe:	2300      	moveq	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	461a      	mov	r2, r3
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	bf14      	ite	ne
 8002f18:	2301      	movne	r3, #1
 8002f1a:	2300      	moveq	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e00b      	b.n	8002f60 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f4e:	2b10      	cmp	r3, #16
 8002f50:	d105      	bne.n	8002f5e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002f52:	6839      	ldr	r1, [r7, #0]
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 f88f 	bl	8003078 <ETH_SetMACConfig>

    return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e000      	b.n	8002f60 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
  }
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f023 031c 	bic.w	r3, r3, #28
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002f80:	f001 fa9e 	bl	80044c0 <HAL_RCC_GetHCLKFreq>
 8002f84:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	4a1d      	ldr	r2, [pc, #116]	@ (8003000 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d908      	bls.n	8002fa0 <HAL_ETH_SetMDIOClockRange+0x38>
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	4a1c      	ldr	r2, [pc, #112]	@ (8003004 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d804      	bhi.n	8002fa0 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f043 0308 	orr.w	r3, r3, #8
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	e027      	b.n	8002ff0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	4a18      	ldr	r2, [pc, #96]	@ (8003004 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d908      	bls.n	8002fba <HAL_ETH_SetMDIOClockRange+0x52>
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	4a17      	ldr	r2, [pc, #92]	@ (8003008 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d204      	bcs.n	8002fba <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f043 030c 	orr.w	r3, r3, #12
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	e01a      	b.n	8002ff0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	4a12      	ldr	r2, [pc, #72]	@ (8003008 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d303      	bcc.n	8002fca <HAL_ETH_SetMDIOClockRange+0x62>
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	4a11      	ldr	r2, [pc, #68]	@ (800300c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d911      	bls.n	8002fee <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	4a0f      	ldr	r2, [pc, #60]	@ (800300c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d908      	bls.n	8002fe4 <HAL_ETH_SetMDIOClockRange+0x7c>
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	4a0e      	ldr	r2, [pc, #56]	@ (8003010 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d804      	bhi.n	8002fe4 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f043 0304 	orr.w	r3, r3, #4
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	e005      	b.n	8002ff0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f043 0310 	orr.w	r3, r3, #16
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	e000      	b.n	8002ff0 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002fee:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	611a      	str	r2, [r3, #16]
}
 8002ff8:	bf00      	nop
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	01312cff 	.word	0x01312cff
 8003004:	02160ebf 	.word	0x02160ebf
 8003008:	03938700 	.word	0x03938700
 800300c:	05f5e0ff 	.word	0x05f5e0ff
 8003010:	08f0d17f 	.word	0x08f0d17f

08003014 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8003022:	4618      	mov	r0, r3
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b084      	sub	sp, #16
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003036:	2300      	movs	r3, #0
 8003038:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	6812      	ldr	r2, [r2, #0]
 8003048:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800304c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003050:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800305e:	2001      	movs	r0, #1
 8003060:	f7fe fc6a 	bl	8001938 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800306e:	6193      	str	r3, [r2, #24]
}
 8003070:	bf00      	nop
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	4b51      	ldr	r3, [pc, #324]	@ (80031d4 <ETH_SetMACConfig+0x15c>)
 800308e:	4013      	ands	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	7c1b      	ldrb	r3, [r3, #16]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d102      	bne.n	80030a0 <ETH_SetMACConfig+0x28>
 800309a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800309e:	e000      	b.n	80030a2 <ETH_SetMACConfig+0x2a>
 80030a0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	7c5b      	ldrb	r3, [r3, #17]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d102      	bne.n	80030b0 <ETH_SetMACConfig+0x38>
 80030aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80030ae:	e000      	b.n	80030b2 <ETH_SetMACConfig+0x3a>
 80030b0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80030b2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80030b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	7fdb      	ldrb	r3, [r3, #31]
 80030be:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80030c0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80030c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	7f92      	ldrb	r2, [r2, #30]
 80030cc:	2a00      	cmp	r2, #0
 80030ce:	d102      	bne.n	80030d6 <ETH_SetMACConfig+0x5e>
 80030d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80030d4:	e000      	b.n	80030d8 <ETH_SetMACConfig+0x60>
 80030d6:	2200      	movs	r2, #0
                        macconf->Speed |
 80030d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	7f1b      	ldrb	r3, [r3, #28]
 80030de:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80030e0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80030e6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	791b      	ldrb	r3, [r3, #4]
 80030ec:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80030ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80030f6:	2a00      	cmp	r2, #0
 80030f8:	d102      	bne.n	8003100 <ETH_SetMACConfig+0x88>
 80030fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030fe:	e000      	b.n	8003102 <ETH_SetMACConfig+0x8a>
 8003100:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003102:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	7bdb      	ldrb	r3, [r3, #15]
 8003108:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800310a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003110:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003118:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800311a:	4313      	orrs	r3, r2
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	4313      	orrs	r3, r2
 8003120:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003132:	2001      	movs	r0, #1
 8003134:	f7fe fc00 	bl	8001938 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800314e:	4013      	ands	r3, r2
 8003150:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003156:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800315e:	2a00      	cmp	r2, #0
 8003160:	d101      	bne.n	8003166 <ETH_SetMACConfig+0xee>
 8003162:	2280      	movs	r2, #128	@ 0x80
 8003164:	e000      	b.n	8003168 <ETH_SetMACConfig+0xf0>
 8003166:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003168:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800316e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8003176:	2a01      	cmp	r2, #1
 8003178:	d101      	bne.n	800317e <ETH_SetMACConfig+0x106>
 800317a:	2208      	movs	r2, #8
 800317c:	e000      	b.n	8003180 <ETH_SetMACConfig+0x108>
 800317e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003180:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8003188:	2a01      	cmp	r2, #1
 800318a:	d101      	bne.n	8003190 <ETH_SetMACConfig+0x118>
 800318c:	2204      	movs	r2, #4
 800318e:	e000      	b.n	8003192 <ETH_SetMACConfig+0x11a>
 8003190:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003192:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800319a:	2a01      	cmp	r2, #1
 800319c:	d101      	bne.n	80031a2 <ETH_SetMACConfig+0x12a>
 800319e:	2202      	movs	r2, #2
 80031a0:	e000      	b.n	80031a4 <ETH_SetMACConfig+0x12c>
 80031a2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80031a4:	4313      	orrs	r3, r2
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80031bc:	2001      	movs	r0, #1
 80031be:	f7fe fbbb 	bl	8001938 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	619a      	str	r2, [r3, #24]
}
 80031ca:	bf00      	nop
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	ff20810f 	.word	0xff20810f

080031d8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	4b3d      	ldr	r3, [pc, #244]	@ (80032e8 <ETH_SetDMAConfig+0x110>)
 80031f2:	4013      	ands	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	7b1b      	ldrb	r3, [r3, #12]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d102      	bne.n	8003204 <ETH_SetDMAConfig+0x2c>
 80031fe:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003202:	e000      	b.n	8003206 <ETH_SetDMAConfig+0x2e>
 8003204:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	7b5b      	ldrb	r3, [r3, #13]
 800320a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800320c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	7f52      	ldrb	r2, [r2, #29]
 8003212:	2a00      	cmp	r2, #0
 8003214:	d102      	bne.n	800321c <ETH_SetDMAConfig+0x44>
 8003216:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800321a:	e000      	b.n	800321e <ETH_SetDMAConfig+0x46>
 800321c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800321e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	7b9b      	ldrb	r3, [r3, #14]
 8003224:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003226:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800322c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	7f1b      	ldrb	r3, [r3, #28]
 8003232:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003234:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	7f9b      	ldrb	r3, [r3, #30]
 800323a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800323c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003242:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800324a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800324c:	4313      	orrs	r3, r2
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	4313      	orrs	r3, r2
 8003252:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800325c:	461a      	mov	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800326e:	2001      	movs	r0, #1
 8003270:	f7fe fb62 	bl	8001938 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800327c:	461a      	mov	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	791b      	ldrb	r3, [r3, #4]
 8003286:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800328c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003292:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003298:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80032a0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80032a2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80032aa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80032b0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6812      	ldr	r2, [r2, #0]
 80032b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80032ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80032be:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80032cc:	2001      	movs	r0, #1
 80032ce:	f7fe fb33 	bl	8001938 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032da:	461a      	mov	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6013      	str	r3, [r2, #0]
}
 80032e0:	bf00      	nop
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	f8de3f23 	.word	0xf8de3f23

080032ec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b0a6      	sub	sp, #152	@ 0x98
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80032f4:	2301      	movs	r3, #1
 80032f6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80032fa:	2301      	movs	r3, #1
 80032fc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003300:	2300      	movs	r3, #0
 8003302:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003304:	2300      	movs	r3, #0
 8003306:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800330a:	2301      	movs	r3, #1
 800330c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003310:	2300      	movs	r3, #0
 8003312:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003316:	2301      	movs	r3, #1
 8003318:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800331c:	2300      	movs	r3, #0
 800331e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003322:	2300      	movs	r3, #0
 8003324:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003328:	2300      	movs	r3, #0
 800332a:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800332c:	2300      	movs	r3, #0
 800332e:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003332:	2300      	movs	r3, #0
 8003334:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003336:	2300      	movs	r3, #0
 8003338:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800333c:	2300      	movs	r3, #0
 800333e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003342:	2300      	movs	r3, #0
 8003344:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003348:	2300      	movs	r3, #0
 800334a:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800334e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003352:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003354:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003358:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800335a:	2300      	movs	r3, #0
 800335c:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003360:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003364:	4619      	mov	r1, r3
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7ff fe86 	bl	8003078 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800336c:	2301      	movs	r3, #1
 800336e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003370:	2301      	movs	r3, #1
 8003372:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003374:	2301      	movs	r3, #1
 8003376:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800337a:	2301      	movs	r3, #1
 800337c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800337e:	2300      	movs	r3, #0
 8003380:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003382:	2300      	movs	r3, #0
 8003384:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003388:	2300      	movs	r3, #0
 800338a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800338e:	2300      	movs	r3, #0
 8003390:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003392:	2301      	movs	r3, #1
 8003394:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003398:	2301      	movs	r3, #1
 800339a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800339c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80033a0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80033a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80033a6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80033a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80033ac:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80033ae:	2301      	movs	r3, #1
 80033b0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80033b8:	2300      	movs	r3, #0
 80033ba:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80033bc:	f107 0308 	add.w	r3, r7, #8
 80033c0:	4619      	mov	r1, r3
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff ff08 	bl	80031d8 <ETH_SetDMAConfig>
}
 80033c8:	bf00      	nop
 80033ca:	3798      	adds	r7, #152	@ 0x98
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3305      	adds	r3, #5
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	021b      	lsls	r3, r3, #8
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	3204      	adds	r2, #4
 80033e8:	7812      	ldrb	r2, [r2, #0]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	4b11      	ldr	r3, [pc, #68]	@ (8003438 <ETH_MACAddressConfig+0x68>)
 80033f2:	4413      	add	r3, r2
 80033f4:	461a      	mov	r2, r3
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	3303      	adds	r3, #3
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	061a      	lsls	r2, r3, #24
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3302      	adds	r3, #2
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	041b      	lsls	r3, r3, #16
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3301      	adds	r3, #1
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	021b      	lsls	r3, r3, #8
 8003414:	4313      	orrs	r3, r2
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	7812      	ldrb	r2, [r2, #0]
 800341a:	4313      	orrs	r3, r2
 800341c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	4b06      	ldr	r3, [pc, #24]	@ (800343c <ETH_MACAddressConfig+0x6c>)
 8003422:	4413      	add	r3, r2
 8003424:	461a      	mov	r2, r3
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	6013      	str	r3, [r2, #0]
}
 800342a:	bf00      	nop
 800342c:	371c      	adds	r7, #28
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	40028040 	.word	0x40028040
 800343c:	40028044 	.word	0x40028044

08003440 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003448:	2300      	movs	r3, #0
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	e03e      	b.n	80034cc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68d9      	ldr	r1, [r3, #12]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	4613      	mov	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	440b      	add	r3, r1
 800345e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	2200      	movs	r2, #0
 8003464:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	2200      	movs	r2, #0
 800346a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2200      	movs	r2, #0
 8003470:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2200      	movs	r2, #0
 8003476:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003478:	68b9      	ldr	r1, [r7, #8]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	3206      	adds	r2, #6
 8003480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2b02      	cmp	r3, #2
 8003494:	d80c      	bhi.n	80034b0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68d9      	ldr	r1, [r3, #12]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	1c5a      	adds	r2, r3, #1
 800349e:	4613      	mov	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4413      	add	r3, r2
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	440b      	add	r3, r1
 80034a8:	461a      	mov	r2, r3
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	60da      	str	r2, [r3, #12]
 80034ae:	e004      	b.n	80034ba <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	461a      	mov	r2, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	3301      	adds	r3, #1
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2b03      	cmp	r3, #3
 80034d0:	d9bd      	bls.n	800344e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68da      	ldr	r2, [r3, #12]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034e4:	611a      	str	r2, [r3, #16]
}
 80034e6:	bf00      	nop
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b085      	sub	sp, #20
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80034fa:	2300      	movs	r3, #0
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	e046      	b.n	800358e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6919      	ldr	r1, [r3, #16]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	440b      	add	r3, r1
 8003510:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2200      	movs	r2, #0
 800351c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2200      	movs	r2, #0
 8003522:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	2200      	movs	r2, #0
 8003528:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	2200      	movs	r2, #0
 800352e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2200      	movs	r2, #0
 8003534:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800353c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8003544:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003552:	68b9      	ldr	r1, [r7, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	3212      	adds	r2, #18
 800355a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2b02      	cmp	r3, #2
 8003562:	d80c      	bhi.n	800357e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6919      	ldr	r1, [r3, #16]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	1c5a      	adds	r2, r3, #1
 800356c:	4613      	mov	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	440b      	add	r3, r1
 8003576:	461a      	mov	r2, r3
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	60da      	str	r2, [r3, #12]
 800357c:	e004      	b.n	8003588 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	461a      	mov	r2, r3
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	3301      	adds	r3, #1
 800358c:	60fb      	str	r3, [r7, #12]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2b03      	cmp	r3, #3
 8003592:	d9b5      	bls.n	8003500 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691a      	ldr	r2, [r3, #16]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035be:	60da      	str	r2, [r3, #12]
}
 80035c0:	bf00      	nop
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b08d      	sub	sp, #52	@ 0x34
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	3318      	adds	r3, #24
 80035dc:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80035ea:	2300      	movs	r3, #0
 80035ec:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035f6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80035fe:	2300      	movs	r3, #0
 8003600:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800360a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800360e:	d007      	beq.n	8003620 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003614:	3304      	adds	r3, #4
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003620:	2302      	movs	r3, #2
 8003622:	e103      	b.n	800382c <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8003624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003626:	3301      	adds	r3, #1
 8003628:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	461a      	mov	r2, r3
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 800363c:	f023 031f 	bic.w	r3, r3, #31
 8003640:	69fa      	ldr	r2, [r7, #28]
 8003642:	6852      	ldr	r2, [r2, #4]
 8003644:	431a      	orrs	r2, r3
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d008      	beq.n	8003668 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	431a      	orrs	r2, r3
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0320 	and.w	r3, r3, #32
 8003670:	2b00      	cmp	r3, #0
 8003672:	d008      	beq.n	8003686 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	431a      	orrs	r2, r3
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0304 	and.w	r3, r3, #4
 800368e:	2b00      	cmp	r3, #0
 8003690:	d005      	beq.n	800369e <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80036aa:	f3bf 8f5f 	dmb	sy
}
 80036ae:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80036b0:	6a3b      	ldr	r3, [r7, #32]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80036bc:	e084      	b.n	80037c8 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d006      	beq.n	80036de <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80036d8:	6a3b      	ldr	r3, [r7, #32]
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	e005      	b.n	80036ea <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80036ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ec:	3301      	adds	r3, #1
 80036ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	d902      	bls.n	80036fc <ETH_Prepare_Tx_Descriptors+0x130>
 80036f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036f8:	3b04      	subs	r3, #4
 80036fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003704:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003706:	6a3b      	ldr	r3, [r7, #32]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800371a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800371e:	d007      	beq.n	8003730 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003724:	3304      	adds	r3, #4
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d029      	beq.n	8003784 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800373c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800373e:	2300      	movs	r3, #0
 8003740:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003742:	e019      	b.n	8003778 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8003744:	f3bf 8f5f 	dmb	sy
}
 8003748:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003758:	3301      	adds	r3, #1
 800375a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800375c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800375e:	2b03      	cmp	r3, #3
 8003760:	d902      	bls.n	8003768 <ETH_Prepare_Tx_Descriptors+0x19c>
 8003762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003764:	3b04      	subs	r3, #4
 8003766:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800376c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003770:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8003772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003774:	3301      	adds	r3, #1
 8003776:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003778:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800377a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377c:	429a      	cmp	r2, r3
 800377e:	d3e1      	bcc.n	8003744 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8003780:	2302      	movs	r3, #2
 8003782:	e053      	b.n	800382c <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8003784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003786:	3301      	adds	r3, #1
 8003788:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	461a      	mov	r2, r3
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80037a2:	f023 031f 	bic.w	r3, r3, #31
 80037a6:	69fa      	ldr	r2, [r7, #28]
 80037a8:	6852      	ldr	r2, [r2, #4]
 80037aa:	431a      	orrs	r2, r3
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	3301      	adds	r3, #1
 80037b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80037b6:	f3bf 8f5f 	dmb	sy
}
 80037ba:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f47f af76 	bne.w	80036be <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d006      	beq.n	80037e6 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80037d8:	6a3b      	ldr	r3, [r7, #32]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	e005      	b.n	80037f2 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003802:	6979      	ldr	r1, [r7, #20]
 8003804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003806:	3304      	adds	r3, #4
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	440b      	add	r3, r1
 800380c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003812:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003814:	b672      	cpsid	i
}
 8003816:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	4413      	add	r3, r2
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003826:	b662      	cpsie	i
}
 8003828:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3734      	adds	r7, #52	@ 0x34
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003838:	b480      	push	{r7}
 800383a:	b089      	sub	sp, #36	@ 0x24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003842:	2300      	movs	r3, #0
 8003844:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003846:	2300      	movs	r3, #0
 8003848:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800384a:	2300      	movs	r3, #0
 800384c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800384e:	2300      	movs	r3, #0
 8003850:	61fb      	str	r3, [r7, #28]
 8003852:	e177      	b.n	8003b44 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003854:	2201      	movs	r2, #1
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	4013      	ands	r3, r2
 8003866:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	429a      	cmp	r2, r3
 800386e:	f040 8166 	bne.w	8003b3e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	2b01      	cmp	r3, #1
 800387c:	d005      	beq.n	800388a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003886:	2b02      	cmp	r3, #2
 8003888:	d130      	bne.n	80038ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	2203      	movs	r2, #3
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	43db      	mvns	r3, r3
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	4013      	ands	r3, r2
 80038a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038c0:	2201      	movs	r2, #1
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	43db      	mvns	r3, r3
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	4013      	ands	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	091b      	lsrs	r3, r3, #4
 80038d6:	f003 0201 	and.w	r2, r3, #1
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f003 0303 	and.w	r3, r3, #3
 80038f4:	2b03      	cmp	r3, #3
 80038f6:	d017      	beq.n	8003928 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	2203      	movs	r2, #3
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	43db      	mvns	r3, r3
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	4013      	ands	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	4313      	orrs	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 0303 	and.w	r3, r3, #3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d123      	bne.n	800397c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	08da      	lsrs	r2, r3, #3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3208      	adds	r2, #8
 800393c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003940:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	220f      	movs	r2, #15
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	43db      	mvns	r3, r3
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	4013      	ands	r3, r2
 8003956:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f003 0307 	and.w	r3, r3, #7
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	4313      	orrs	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	08da      	lsrs	r2, r3, #3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3208      	adds	r2, #8
 8003976:	69b9      	ldr	r1, [r7, #24]
 8003978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	2203      	movs	r2, #3
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	43db      	mvns	r3, r3
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	4013      	ands	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f003 0203 	and.w	r2, r3, #3
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 80c0 	beq.w	8003b3e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039be:	2300      	movs	r3, #0
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	4b66      	ldr	r3, [pc, #408]	@ (8003b5c <HAL_GPIO_Init+0x324>)
 80039c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c6:	4a65      	ldr	r2, [pc, #404]	@ (8003b5c <HAL_GPIO_Init+0x324>)
 80039c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80039ce:	4b63      	ldr	r3, [pc, #396]	@ (8003b5c <HAL_GPIO_Init+0x324>)
 80039d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039d6:	60fb      	str	r3, [r7, #12]
 80039d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039da:	4a61      	ldr	r2, [pc, #388]	@ (8003b60 <HAL_GPIO_Init+0x328>)
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	089b      	lsrs	r3, r3, #2
 80039e0:	3302      	adds	r3, #2
 80039e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	220f      	movs	r2, #15
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	43db      	mvns	r3, r3
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	4013      	ands	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a58      	ldr	r2, [pc, #352]	@ (8003b64 <HAL_GPIO_Init+0x32c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d037      	beq.n	8003a76 <HAL_GPIO_Init+0x23e>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a57      	ldr	r2, [pc, #348]	@ (8003b68 <HAL_GPIO_Init+0x330>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d031      	beq.n	8003a72 <HAL_GPIO_Init+0x23a>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a56      	ldr	r2, [pc, #344]	@ (8003b6c <HAL_GPIO_Init+0x334>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d02b      	beq.n	8003a6e <HAL_GPIO_Init+0x236>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a55      	ldr	r2, [pc, #340]	@ (8003b70 <HAL_GPIO_Init+0x338>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d025      	beq.n	8003a6a <HAL_GPIO_Init+0x232>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a54      	ldr	r2, [pc, #336]	@ (8003b74 <HAL_GPIO_Init+0x33c>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d01f      	beq.n	8003a66 <HAL_GPIO_Init+0x22e>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a53      	ldr	r2, [pc, #332]	@ (8003b78 <HAL_GPIO_Init+0x340>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d019      	beq.n	8003a62 <HAL_GPIO_Init+0x22a>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a52      	ldr	r2, [pc, #328]	@ (8003b7c <HAL_GPIO_Init+0x344>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d013      	beq.n	8003a5e <HAL_GPIO_Init+0x226>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a51      	ldr	r2, [pc, #324]	@ (8003b80 <HAL_GPIO_Init+0x348>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d00d      	beq.n	8003a5a <HAL_GPIO_Init+0x222>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a50      	ldr	r2, [pc, #320]	@ (8003b84 <HAL_GPIO_Init+0x34c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d007      	beq.n	8003a56 <HAL_GPIO_Init+0x21e>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a4f      	ldr	r2, [pc, #316]	@ (8003b88 <HAL_GPIO_Init+0x350>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d101      	bne.n	8003a52 <HAL_GPIO_Init+0x21a>
 8003a4e:	2309      	movs	r3, #9
 8003a50:	e012      	b.n	8003a78 <HAL_GPIO_Init+0x240>
 8003a52:	230a      	movs	r3, #10
 8003a54:	e010      	b.n	8003a78 <HAL_GPIO_Init+0x240>
 8003a56:	2308      	movs	r3, #8
 8003a58:	e00e      	b.n	8003a78 <HAL_GPIO_Init+0x240>
 8003a5a:	2307      	movs	r3, #7
 8003a5c:	e00c      	b.n	8003a78 <HAL_GPIO_Init+0x240>
 8003a5e:	2306      	movs	r3, #6
 8003a60:	e00a      	b.n	8003a78 <HAL_GPIO_Init+0x240>
 8003a62:	2305      	movs	r3, #5
 8003a64:	e008      	b.n	8003a78 <HAL_GPIO_Init+0x240>
 8003a66:	2304      	movs	r3, #4
 8003a68:	e006      	b.n	8003a78 <HAL_GPIO_Init+0x240>
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e004      	b.n	8003a78 <HAL_GPIO_Init+0x240>
 8003a6e:	2302      	movs	r3, #2
 8003a70:	e002      	b.n	8003a78 <HAL_GPIO_Init+0x240>
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <HAL_GPIO_Init+0x240>
 8003a76:	2300      	movs	r3, #0
 8003a78:	69fa      	ldr	r2, [r7, #28]
 8003a7a:	f002 0203 	and.w	r2, r2, #3
 8003a7e:	0092      	lsls	r2, r2, #2
 8003a80:	4093      	lsls	r3, r2
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a88:	4935      	ldr	r1, [pc, #212]	@ (8003b60 <HAL_GPIO_Init+0x328>)
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	089b      	lsrs	r3, r3, #2
 8003a8e:	3302      	adds	r3, #2
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a96:	4b3d      	ldr	r3, [pc, #244]	@ (8003b8c <HAL_GPIO_Init+0x354>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003aba:	4a34      	ldr	r2, [pc, #208]	@ (8003b8c <HAL_GPIO_Init+0x354>)
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ac0:	4b32      	ldr	r3, [pc, #200]	@ (8003b8c <HAL_GPIO_Init+0x354>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	4013      	ands	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ae4:	4a29      	ldr	r2, [pc, #164]	@ (8003b8c <HAL_GPIO_Init+0x354>)
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003aea:	4b28      	ldr	r3, [pc, #160]	@ (8003b8c <HAL_GPIO_Init+0x354>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	43db      	mvns	r3, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4013      	ands	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b0e:	4a1f      	ldr	r2, [pc, #124]	@ (8003b8c <HAL_GPIO_Init+0x354>)
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b14:	4b1d      	ldr	r3, [pc, #116]	@ (8003b8c <HAL_GPIO_Init+0x354>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	4013      	ands	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b38:	4a14      	ldr	r2, [pc, #80]	@ (8003b8c <HAL_GPIO_Init+0x354>)
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	3301      	adds	r3, #1
 8003b42:	61fb      	str	r3, [r7, #28]
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	2b0f      	cmp	r3, #15
 8003b48:	f67f ae84 	bls.w	8003854 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b4c:	bf00      	nop
 8003b4e:	bf00      	nop
 8003b50:	3724      	adds	r7, #36	@ 0x24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	40013800 	.word	0x40013800
 8003b64:	40020000 	.word	0x40020000
 8003b68:	40020400 	.word	0x40020400
 8003b6c:	40020800 	.word	0x40020800
 8003b70:	40020c00 	.word	0x40020c00
 8003b74:	40021000 	.word	0x40021000
 8003b78:	40021400 	.word	0x40021400
 8003b7c:	40021800 	.word	0x40021800
 8003b80:	40021c00 	.word	0x40021c00
 8003b84:	40022000 	.word	0x40022000
 8003b88:	40022400 	.word	0x40022400
 8003b8c:	40013c00 	.word	0x40013c00

08003b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	807b      	strh	r3, [r7, #2]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ba0:	787b      	ldrb	r3, [r7, #1]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ba6:	887a      	ldrh	r2, [r7, #2]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bac:	e003      	b.n	8003bb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bae:	887b      	ldrh	r3, [r7, #2]
 8003bb0:	041a      	lsls	r2, r3, #16
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	619a      	str	r2, [r3, #24]
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b085      	sub	sp, #20
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
 8003bca:	460b      	mov	r3, r1
 8003bcc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003bd4:	887a      	ldrh	r2, [r7, #2]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	041a      	lsls	r2, r3, #16
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	43d9      	mvns	r1, r3
 8003be0:	887b      	ldrh	r3, [r7, #2]
 8003be2:	400b      	ands	r3, r1
 8003be4:	431a      	orrs	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	619a      	str	r2, [r3, #24]
}
 8003bea:	bf00      	nop
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
	...

08003bf8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e267      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d075      	beq.n	8003d02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c16:	4b88      	ldr	r3, [pc, #544]	@ (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 030c 	and.w	r3, r3, #12
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d00c      	beq.n	8003c3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c22:	4b85      	ldr	r3, [pc, #532]	@ (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c2a:	2b08      	cmp	r3, #8
 8003c2c:	d112      	bne.n	8003c54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c2e:	4b82      	ldr	r3, [pc, #520]	@ (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c3a:	d10b      	bne.n	8003c54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c3c:	4b7e      	ldr	r3, [pc, #504]	@ (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d05b      	beq.n	8003d00 <HAL_RCC_OscConfig+0x108>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d157      	bne.n	8003d00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e242      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c5c:	d106      	bne.n	8003c6c <HAL_RCC_OscConfig+0x74>
 8003c5e:	4b76      	ldr	r3, [pc, #472]	@ (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a75      	ldr	r2, [pc, #468]	@ (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c68:	6013      	str	r3, [r2, #0]
 8003c6a:	e01d      	b.n	8003ca8 <HAL_RCC_OscConfig+0xb0>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c74:	d10c      	bne.n	8003c90 <HAL_RCC_OscConfig+0x98>
 8003c76:	4b70      	ldr	r3, [pc, #448]	@ (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a6f      	ldr	r2, [pc, #444]	@ (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c80:	6013      	str	r3, [r2, #0]
 8003c82:	4b6d      	ldr	r3, [pc, #436]	@ (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a6c      	ldr	r2, [pc, #432]	@ (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c8c:	6013      	str	r3, [r2, #0]
 8003c8e:	e00b      	b.n	8003ca8 <HAL_RCC_OscConfig+0xb0>
 8003c90:	4b69      	ldr	r3, [pc, #420]	@ (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a68      	ldr	r2, [pc, #416]	@ (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c9a:	6013      	str	r3, [r2, #0]
 8003c9c:	4b66      	ldr	r3, [pc, #408]	@ (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a65      	ldr	r2, [pc, #404]	@ (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003ca2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ca6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d013      	beq.n	8003cd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb0:	f7fd fe36 	bl	8001920 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cb8:	f7fd fe32 	bl	8001920 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b64      	cmp	r3, #100	@ 0x64
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e207      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cca:	4b5b      	ldr	r3, [pc, #364]	@ (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0f0      	beq.n	8003cb8 <HAL_RCC_OscConfig+0xc0>
 8003cd6:	e014      	b.n	8003d02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd8:	f7fd fe22 	bl	8001920 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ce0:	f7fd fe1e 	bl	8001920 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b64      	cmp	r3, #100	@ 0x64
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e1f3      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cf2:	4b51      	ldr	r3, [pc, #324]	@ (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1f0      	bne.n	8003ce0 <HAL_RCC_OscConfig+0xe8>
 8003cfe:	e000      	b.n	8003d02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d063      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d0e:	4b4a      	ldr	r3, [pc, #296]	@ (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 030c 	and.w	r3, r3, #12
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00b      	beq.n	8003d32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d1a:	4b47      	ldr	r3, [pc, #284]	@ (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d22:	2b08      	cmp	r3, #8
 8003d24:	d11c      	bne.n	8003d60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d26:	4b44      	ldr	r3, [pc, #272]	@ (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d116      	bne.n	8003d60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d32:	4b41      	ldr	r3, [pc, #260]	@ (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d005      	beq.n	8003d4a <HAL_RCC_OscConfig+0x152>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d001      	beq.n	8003d4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e1c7      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d4a:	4b3b      	ldr	r3, [pc, #236]	@ (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	4937      	ldr	r1, [pc, #220]	@ (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d5e:	e03a      	b.n	8003dd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d020      	beq.n	8003daa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d68:	4b34      	ldr	r3, [pc, #208]	@ (8003e3c <HAL_RCC_OscConfig+0x244>)
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6e:	f7fd fdd7 	bl	8001920 <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d74:	e008      	b.n	8003d88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d76:	f7fd fdd3 	bl	8001920 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e1a8      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d88:	4b2b      	ldr	r3, [pc, #172]	@ (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0f0      	beq.n	8003d76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d94:	4b28      	ldr	r3, [pc, #160]	@ (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	4925      	ldr	r1, [pc, #148]	@ (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	600b      	str	r3, [r1, #0]
 8003da8:	e015      	b.n	8003dd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003daa:	4b24      	ldr	r3, [pc, #144]	@ (8003e3c <HAL_RCC_OscConfig+0x244>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db0:	f7fd fdb6 	bl	8001920 <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003db8:	f7fd fdb2 	bl	8001920 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e187      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dca:	4b1b      	ldr	r3, [pc, #108]	@ (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1f0      	bne.n	8003db8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0308 	and.w	r3, r3, #8
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d036      	beq.n	8003e50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d016      	beq.n	8003e18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dea:	4b15      	ldr	r3, [pc, #84]	@ (8003e40 <HAL_RCC_OscConfig+0x248>)
 8003dec:	2201      	movs	r2, #1
 8003dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df0:	f7fd fd96 	bl	8001920 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003df8:	f7fd fd92 	bl	8001920 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e167      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003e0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0f0      	beq.n	8003df8 <HAL_RCC_OscConfig+0x200>
 8003e16:	e01b      	b.n	8003e50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e18:	4b09      	ldr	r3, [pc, #36]	@ (8003e40 <HAL_RCC_OscConfig+0x248>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e1e:	f7fd fd7f 	bl	8001920 <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e24:	e00e      	b.n	8003e44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e26:	f7fd fd7b 	bl	8001920 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d907      	bls.n	8003e44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e150      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	42470000 	.word	0x42470000
 8003e40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e44:	4b88      	ldr	r3, [pc, #544]	@ (8004068 <HAL_RCC_OscConfig+0x470>)
 8003e46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1ea      	bne.n	8003e26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 8097 	beq.w	8003f8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e62:	4b81      	ldr	r3, [pc, #516]	@ (8004068 <HAL_RCC_OscConfig+0x470>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10f      	bne.n	8003e8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60bb      	str	r3, [r7, #8]
 8003e72:	4b7d      	ldr	r3, [pc, #500]	@ (8004068 <HAL_RCC_OscConfig+0x470>)
 8003e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e76:	4a7c      	ldr	r2, [pc, #496]	@ (8004068 <HAL_RCC_OscConfig+0x470>)
 8003e78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e7e:	4b7a      	ldr	r3, [pc, #488]	@ (8004068 <HAL_RCC_OscConfig+0x470>)
 8003e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e86:	60bb      	str	r3, [r7, #8]
 8003e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8e:	4b77      	ldr	r3, [pc, #476]	@ (800406c <HAL_RCC_OscConfig+0x474>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d118      	bne.n	8003ecc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e9a:	4b74      	ldr	r3, [pc, #464]	@ (800406c <HAL_RCC_OscConfig+0x474>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a73      	ldr	r2, [pc, #460]	@ (800406c <HAL_RCC_OscConfig+0x474>)
 8003ea0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ea6:	f7fd fd3b 	bl	8001920 <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eae:	f7fd fd37 	bl	8001920 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e10c      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec0:	4b6a      	ldr	r3, [pc, #424]	@ (800406c <HAL_RCC_OscConfig+0x474>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0f0      	beq.n	8003eae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d106      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x2ea>
 8003ed4:	4b64      	ldr	r3, [pc, #400]	@ (8004068 <HAL_RCC_OscConfig+0x470>)
 8003ed6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ed8:	4a63      	ldr	r2, [pc, #396]	@ (8004068 <HAL_RCC_OscConfig+0x470>)
 8003eda:	f043 0301 	orr.w	r3, r3, #1
 8003ede:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ee0:	e01c      	b.n	8003f1c <HAL_RCC_OscConfig+0x324>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	2b05      	cmp	r3, #5
 8003ee8:	d10c      	bne.n	8003f04 <HAL_RCC_OscConfig+0x30c>
 8003eea:	4b5f      	ldr	r3, [pc, #380]	@ (8004068 <HAL_RCC_OscConfig+0x470>)
 8003eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eee:	4a5e      	ldr	r2, [pc, #376]	@ (8004068 <HAL_RCC_OscConfig+0x470>)
 8003ef0:	f043 0304 	orr.w	r3, r3, #4
 8003ef4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ef6:	4b5c      	ldr	r3, [pc, #368]	@ (8004068 <HAL_RCC_OscConfig+0x470>)
 8003ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003efa:	4a5b      	ldr	r2, [pc, #364]	@ (8004068 <HAL_RCC_OscConfig+0x470>)
 8003efc:	f043 0301 	orr.w	r3, r3, #1
 8003f00:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f02:	e00b      	b.n	8003f1c <HAL_RCC_OscConfig+0x324>
 8003f04:	4b58      	ldr	r3, [pc, #352]	@ (8004068 <HAL_RCC_OscConfig+0x470>)
 8003f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f08:	4a57      	ldr	r2, [pc, #348]	@ (8004068 <HAL_RCC_OscConfig+0x470>)
 8003f0a:	f023 0301 	bic.w	r3, r3, #1
 8003f0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f10:	4b55      	ldr	r3, [pc, #340]	@ (8004068 <HAL_RCC_OscConfig+0x470>)
 8003f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f14:	4a54      	ldr	r2, [pc, #336]	@ (8004068 <HAL_RCC_OscConfig+0x470>)
 8003f16:	f023 0304 	bic.w	r3, r3, #4
 8003f1a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d015      	beq.n	8003f50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f24:	f7fd fcfc 	bl	8001920 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f2a:	e00a      	b.n	8003f42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f2c:	f7fd fcf8 	bl	8001920 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e0cb      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f42:	4b49      	ldr	r3, [pc, #292]	@ (8004068 <HAL_RCC_OscConfig+0x470>)
 8003f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0ee      	beq.n	8003f2c <HAL_RCC_OscConfig+0x334>
 8003f4e:	e014      	b.n	8003f7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f50:	f7fd fce6 	bl	8001920 <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f56:	e00a      	b.n	8003f6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f58:	f7fd fce2 	bl	8001920 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e0b5      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f6e:	4b3e      	ldr	r3, [pc, #248]	@ (8004068 <HAL_RCC_OscConfig+0x470>)
 8003f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1ee      	bne.n	8003f58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f7a:	7dfb      	ldrb	r3, [r7, #23]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d105      	bne.n	8003f8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f80:	4b39      	ldr	r3, [pc, #228]	@ (8004068 <HAL_RCC_OscConfig+0x470>)
 8003f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f84:	4a38      	ldr	r2, [pc, #224]	@ (8004068 <HAL_RCC_OscConfig+0x470>)
 8003f86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f8a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 80a1 	beq.w	80040d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f96:	4b34      	ldr	r3, [pc, #208]	@ (8004068 <HAL_RCC_OscConfig+0x470>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 030c 	and.w	r3, r3, #12
 8003f9e:	2b08      	cmp	r3, #8
 8003fa0:	d05c      	beq.n	800405c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d141      	bne.n	800402e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003faa:	4b31      	ldr	r3, [pc, #196]	@ (8004070 <HAL_RCC_OscConfig+0x478>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb0:	f7fd fcb6 	bl	8001920 <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb8:	f7fd fcb2 	bl	8001920 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e087      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fca:	4b27      	ldr	r3, [pc, #156]	@ (8004068 <HAL_RCC_OscConfig+0x470>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1f0      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	69da      	ldr	r2, [r3, #28]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe4:	019b      	lsls	r3, r3, #6
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fec:	085b      	lsrs	r3, r3, #1
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	041b      	lsls	r3, r3, #16
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff8:	061b      	lsls	r3, r3, #24
 8003ffa:	491b      	ldr	r1, [pc, #108]	@ (8004068 <HAL_RCC_OscConfig+0x470>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004000:	4b1b      	ldr	r3, [pc, #108]	@ (8004070 <HAL_RCC_OscConfig+0x478>)
 8004002:	2201      	movs	r2, #1
 8004004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004006:	f7fd fc8b 	bl	8001920 <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800400c:	e008      	b.n	8004020 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800400e:	f7fd fc87 	bl	8001920 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e05c      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004020:	4b11      	ldr	r3, [pc, #68]	@ (8004068 <HAL_RCC_OscConfig+0x470>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0f0      	beq.n	800400e <HAL_RCC_OscConfig+0x416>
 800402c:	e054      	b.n	80040d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800402e:	4b10      	ldr	r3, [pc, #64]	@ (8004070 <HAL_RCC_OscConfig+0x478>)
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004034:	f7fd fc74 	bl	8001920 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800403c:	f7fd fc70 	bl	8001920 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e045      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800404e:	4b06      	ldr	r3, [pc, #24]	@ (8004068 <HAL_RCC_OscConfig+0x470>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f0      	bne.n	800403c <HAL_RCC_OscConfig+0x444>
 800405a:	e03d      	b.n	80040d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d107      	bne.n	8004074 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e038      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
 8004068:	40023800 	.word	0x40023800
 800406c:	40007000 	.word	0x40007000
 8004070:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004074:	4b1b      	ldr	r3, [pc, #108]	@ (80040e4 <HAL_RCC_OscConfig+0x4ec>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d028      	beq.n	80040d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800408c:	429a      	cmp	r2, r3
 800408e:	d121      	bne.n	80040d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800409a:	429a      	cmp	r2, r3
 800409c:	d11a      	bne.n	80040d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80040a4:	4013      	ands	r3, r2
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80040aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d111      	bne.n	80040d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ba:	085b      	lsrs	r3, r3, #1
 80040bc:	3b01      	subs	r3, #1
 80040be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d107      	bne.n	80040d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d001      	beq.n	80040d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e000      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	40023800 	.word	0x40023800

080040e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e0cc      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040fc:	4b68      	ldr	r3, [pc, #416]	@ (80042a0 <HAL_RCC_ClockConfig+0x1b8>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 030f 	and.w	r3, r3, #15
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d90c      	bls.n	8004124 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410a:	4b65      	ldr	r3, [pc, #404]	@ (80042a0 <HAL_RCC_ClockConfig+0x1b8>)
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	b2d2      	uxtb	r2, r2
 8004110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004112:	4b63      	ldr	r3, [pc, #396]	@ (80042a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 030f 	and.w	r3, r3, #15
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	429a      	cmp	r2, r3
 800411e:	d001      	beq.n	8004124 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e0b8      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d020      	beq.n	8004172 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	d005      	beq.n	8004148 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800413c:	4b59      	ldr	r3, [pc, #356]	@ (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	4a58      	ldr	r2, [pc, #352]	@ (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004142:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004146:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0308 	and.w	r3, r3, #8
 8004150:	2b00      	cmp	r3, #0
 8004152:	d005      	beq.n	8004160 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004154:	4b53      	ldr	r3, [pc, #332]	@ (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	4a52      	ldr	r2, [pc, #328]	@ (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800415a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800415e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004160:	4b50      	ldr	r3, [pc, #320]	@ (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	494d      	ldr	r1, [pc, #308]	@ (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800416e:	4313      	orrs	r3, r2
 8004170:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d044      	beq.n	8004208 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d107      	bne.n	8004196 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004186:	4b47      	ldr	r3, [pc, #284]	@ (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d119      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e07f      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2b02      	cmp	r3, #2
 800419c:	d003      	beq.n	80041a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041a2:	2b03      	cmp	r3, #3
 80041a4:	d107      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041a6:	4b3f      	ldr	r3, [pc, #252]	@ (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d109      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e06f      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b6:	4b3b      	ldr	r3, [pc, #236]	@ (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e067      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041c6:	4b37      	ldr	r3, [pc, #220]	@ (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f023 0203 	bic.w	r2, r3, #3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	4934      	ldr	r1, [pc, #208]	@ (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041d8:	f7fd fba2 	bl	8001920 <HAL_GetTick>
 80041dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041de:	e00a      	b.n	80041f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041e0:	f7fd fb9e 	bl	8001920 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e04f      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f6:	4b2b      	ldr	r3, [pc, #172]	@ (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 020c 	and.w	r2, r3, #12
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	429a      	cmp	r2, r3
 8004206:	d1eb      	bne.n	80041e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004208:	4b25      	ldr	r3, [pc, #148]	@ (80042a0 <HAL_RCC_ClockConfig+0x1b8>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 030f 	and.w	r3, r3, #15
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	429a      	cmp	r2, r3
 8004214:	d20c      	bcs.n	8004230 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004216:	4b22      	ldr	r3, [pc, #136]	@ (80042a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	b2d2      	uxtb	r2, r2
 800421c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800421e:	4b20      	ldr	r3, [pc, #128]	@ (80042a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 030f 	and.w	r3, r3, #15
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	429a      	cmp	r2, r3
 800422a:	d001      	beq.n	8004230 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e032      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b00      	cmp	r3, #0
 800423a:	d008      	beq.n	800424e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800423c:	4b19      	ldr	r3, [pc, #100]	@ (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	4916      	ldr	r1, [pc, #88]	@ (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800424a:	4313      	orrs	r3, r2
 800424c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0308 	and.w	r3, r3, #8
 8004256:	2b00      	cmp	r3, #0
 8004258:	d009      	beq.n	800426e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800425a:	4b12      	ldr	r3, [pc, #72]	@ (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	490e      	ldr	r1, [pc, #56]	@ (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800426a:	4313      	orrs	r3, r2
 800426c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800426e:	f000 f821 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 8004272:	4602      	mov	r2, r0
 8004274:	4b0b      	ldr	r3, [pc, #44]	@ (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	091b      	lsrs	r3, r3, #4
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	490a      	ldr	r1, [pc, #40]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004280:	5ccb      	ldrb	r3, [r1, r3]
 8004282:	fa22 f303 	lsr.w	r3, r2, r3
 8004286:	4a09      	ldr	r2, [pc, #36]	@ (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 8004288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800428a:	4b09      	ldr	r3, [pc, #36]	@ (80042b0 <HAL_RCC_ClockConfig+0x1c8>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4618      	mov	r0, r3
 8004290:	f7fc ffac 	bl	80011ec <HAL_InitTick>

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	40023c00 	.word	0x40023c00
 80042a4:	40023800 	.word	0x40023800
 80042a8:	0801b770 	.word	0x0801b770
 80042ac:	20000004 	.word	0x20000004
 80042b0:	20000008 	.word	0x20000008

080042b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042b8:	b094      	sub	sp, #80	@ 0x50
 80042ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	647b      	str	r3, [r7, #68]	@ 0x44
 80042c0:	2300      	movs	r3, #0
 80042c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042c4:	2300      	movs	r3, #0
 80042c6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042cc:	4b79      	ldr	r3, [pc, #484]	@ (80044b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f003 030c 	and.w	r3, r3, #12
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d00d      	beq.n	80042f4 <HAL_RCC_GetSysClockFreq+0x40>
 80042d8:	2b08      	cmp	r3, #8
 80042da:	f200 80e1 	bhi.w	80044a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <HAL_RCC_GetSysClockFreq+0x34>
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	d003      	beq.n	80042ee <HAL_RCC_GetSysClockFreq+0x3a>
 80042e6:	e0db      	b.n	80044a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042e8:	4b73      	ldr	r3, [pc, #460]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80042ea:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80042ec:	e0db      	b.n	80044a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042ee:	4b73      	ldr	r3, [pc, #460]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x208>)
 80042f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042f2:	e0d8      	b.n	80044a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042f4:	4b6f      	ldr	r3, [pc, #444]	@ (80044b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042fc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042fe:	4b6d      	ldr	r3, [pc, #436]	@ (80044b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d063      	beq.n	80043d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800430a:	4b6a      	ldr	r3, [pc, #424]	@ (80044b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	099b      	lsrs	r3, r3, #6
 8004310:	2200      	movs	r2, #0
 8004312:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004314:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800431c:	633b      	str	r3, [r7, #48]	@ 0x30
 800431e:	2300      	movs	r3, #0
 8004320:	637b      	str	r3, [r7, #52]	@ 0x34
 8004322:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004326:	4622      	mov	r2, r4
 8004328:	462b      	mov	r3, r5
 800432a:	f04f 0000 	mov.w	r0, #0
 800432e:	f04f 0100 	mov.w	r1, #0
 8004332:	0159      	lsls	r1, r3, #5
 8004334:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004338:	0150      	lsls	r0, r2, #5
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	4621      	mov	r1, r4
 8004340:	1a51      	subs	r1, r2, r1
 8004342:	6139      	str	r1, [r7, #16]
 8004344:	4629      	mov	r1, r5
 8004346:	eb63 0301 	sbc.w	r3, r3, r1
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	f04f 0300 	mov.w	r3, #0
 8004354:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004358:	4659      	mov	r1, fp
 800435a:	018b      	lsls	r3, r1, #6
 800435c:	4651      	mov	r1, sl
 800435e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004362:	4651      	mov	r1, sl
 8004364:	018a      	lsls	r2, r1, #6
 8004366:	4651      	mov	r1, sl
 8004368:	ebb2 0801 	subs.w	r8, r2, r1
 800436c:	4659      	mov	r1, fp
 800436e:	eb63 0901 	sbc.w	r9, r3, r1
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	f04f 0300 	mov.w	r3, #0
 800437a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800437e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004382:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004386:	4690      	mov	r8, r2
 8004388:	4699      	mov	r9, r3
 800438a:	4623      	mov	r3, r4
 800438c:	eb18 0303 	adds.w	r3, r8, r3
 8004390:	60bb      	str	r3, [r7, #8]
 8004392:	462b      	mov	r3, r5
 8004394:	eb49 0303 	adc.w	r3, r9, r3
 8004398:	60fb      	str	r3, [r7, #12]
 800439a:	f04f 0200 	mov.w	r2, #0
 800439e:	f04f 0300 	mov.w	r3, #0
 80043a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043a6:	4629      	mov	r1, r5
 80043a8:	024b      	lsls	r3, r1, #9
 80043aa:	4621      	mov	r1, r4
 80043ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043b0:	4621      	mov	r1, r4
 80043b2:	024a      	lsls	r2, r1, #9
 80043b4:	4610      	mov	r0, r2
 80043b6:	4619      	mov	r1, r3
 80043b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043ba:	2200      	movs	r2, #0
 80043bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80043c4:	f7fb ff6c 	bl	80002a0 <__aeabi_uldivmod>
 80043c8:	4602      	mov	r2, r0
 80043ca:	460b      	mov	r3, r1
 80043cc:	4613      	mov	r3, r2
 80043ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043d0:	e058      	b.n	8004484 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043d2:	4b38      	ldr	r3, [pc, #224]	@ (80044b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	099b      	lsrs	r3, r3, #6
 80043d8:	2200      	movs	r2, #0
 80043da:	4618      	mov	r0, r3
 80043dc:	4611      	mov	r1, r2
 80043de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043e2:	623b      	str	r3, [r7, #32]
 80043e4:	2300      	movs	r3, #0
 80043e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80043e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043ec:	4642      	mov	r2, r8
 80043ee:	464b      	mov	r3, r9
 80043f0:	f04f 0000 	mov.w	r0, #0
 80043f4:	f04f 0100 	mov.w	r1, #0
 80043f8:	0159      	lsls	r1, r3, #5
 80043fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043fe:	0150      	lsls	r0, r2, #5
 8004400:	4602      	mov	r2, r0
 8004402:	460b      	mov	r3, r1
 8004404:	4641      	mov	r1, r8
 8004406:	ebb2 0a01 	subs.w	sl, r2, r1
 800440a:	4649      	mov	r1, r9
 800440c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	f04f 0300 	mov.w	r3, #0
 8004418:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800441c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004420:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004424:	ebb2 040a 	subs.w	r4, r2, sl
 8004428:	eb63 050b 	sbc.w	r5, r3, fp
 800442c:	f04f 0200 	mov.w	r2, #0
 8004430:	f04f 0300 	mov.w	r3, #0
 8004434:	00eb      	lsls	r3, r5, #3
 8004436:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800443a:	00e2      	lsls	r2, r4, #3
 800443c:	4614      	mov	r4, r2
 800443e:	461d      	mov	r5, r3
 8004440:	4643      	mov	r3, r8
 8004442:	18e3      	adds	r3, r4, r3
 8004444:	603b      	str	r3, [r7, #0]
 8004446:	464b      	mov	r3, r9
 8004448:	eb45 0303 	adc.w	r3, r5, r3
 800444c:	607b      	str	r3, [r7, #4]
 800444e:	f04f 0200 	mov.w	r2, #0
 8004452:	f04f 0300 	mov.w	r3, #0
 8004456:	e9d7 4500 	ldrd	r4, r5, [r7]
 800445a:	4629      	mov	r1, r5
 800445c:	028b      	lsls	r3, r1, #10
 800445e:	4621      	mov	r1, r4
 8004460:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004464:	4621      	mov	r1, r4
 8004466:	028a      	lsls	r2, r1, #10
 8004468:	4610      	mov	r0, r2
 800446a:	4619      	mov	r1, r3
 800446c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800446e:	2200      	movs	r2, #0
 8004470:	61bb      	str	r3, [r7, #24]
 8004472:	61fa      	str	r2, [r7, #28]
 8004474:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004478:	f7fb ff12 	bl	80002a0 <__aeabi_uldivmod>
 800447c:	4602      	mov	r2, r0
 800447e:	460b      	mov	r3, r1
 8004480:	4613      	mov	r3, r2
 8004482:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004484:	4b0b      	ldr	r3, [pc, #44]	@ (80044b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	0c1b      	lsrs	r3, r3, #16
 800448a:	f003 0303 	and.w	r3, r3, #3
 800448e:	3301      	adds	r3, #1
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004494:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004496:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004498:	fbb2 f3f3 	udiv	r3, r2, r3
 800449c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800449e:	e002      	b.n	80044a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044a0:	4b05      	ldr	r3, [pc, #20]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80044a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3750      	adds	r7, #80	@ 0x50
 80044ac:	46bd      	mov	sp, r7
 80044ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044b2:	bf00      	nop
 80044b4:	40023800 	.word	0x40023800
 80044b8:	00f42400 	.word	0x00f42400
 80044bc:	007a1200 	.word	0x007a1200

080044c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044c4:	4b03      	ldr	r3, [pc, #12]	@ (80044d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80044c6:	681b      	ldr	r3, [r3, #0]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	20000004 	.word	0x20000004

080044d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044dc:	f7ff fff0 	bl	80044c0 <HAL_RCC_GetHCLKFreq>
 80044e0:	4602      	mov	r2, r0
 80044e2:	4b05      	ldr	r3, [pc, #20]	@ (80044f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	0a9b      	lsrs	r3, r3, #10
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	4903      	ldr	r1, [pc, #12]	@ (80044fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80044ee:	5ccb      	ldrb	r3, [r1, r3]
 80044f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40023800 	.word	0x40023800
 80044fc:	0801b780 	.word	0x0801b780

08004500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004504:	f7ff ffdc 	bl	80044c0 <HAL_RCC_GetHCLKFreq>
 8004508:	4602      	mov	r2, r0
 800450a:	4b05      	ldr	r3, [pc, #20]	@ (8004520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	0b5b      	lsrs	r3, r3, #13
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	4903      	ldr	r1, [pc, #12]	@ (8004524 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004516:	5ccb      	ldrb	r3, [r1, r3]
 8004518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800451c:	4618      	mov	r0, r3
 800451e:	bd80      	pop	{r7, pc}
 8004520:	40023800 	.word	0x40023800
 8004524:	0801b780 	.word	0x0801b780

08004528 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	220f      	movs	r2, #15
 8004536:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004538:	4b12      	ldr	r3, [pc, #72]	@ (8004584 <HAL_RCC_GetClockConfig+0x5c>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f003 0203 	and.w	r2, r3, #3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004544:	4b0f      	ldr	r3, [pc, #60]	@ (8004584 <HAL_RCC_GetClockConfig+0x5c>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004550:	4b0c      	ldr	r3, [pc, #48]	@ (8004584 <HAL_RCC_GetClockConfig+0x5c>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800455c:	4b09      	ldr	r3, [pc, #36]	@ (8004584 <HAL_RCC_GetClockConfig+0x5c>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	08db      	lsrs	r3, r3, #3
 8004562:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800456a:	4b07      	ldr	r3, [pc, #28]	@ (8004588 <HAL_RCC_GetClockConfig+0x60>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 020f 	and.w	r2, r3, #15
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	601a      	str	r2, [r3, #0]
}
 8004576:	bf00      	nop
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	40023800 	.word	0x40023800
 8004588:	40023c00 	.word	0x40023c00

0800458c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004594:	2300      	movs	r3, #0
 8004596:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10b      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d105      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d075      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045c0:	4b91      	ldr	r3, [pc, #580]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045c6:	f7fd f9ab 	bl	8001920 <HAL_GetTick>
 80045ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045cc:	e008      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045ce:	f7fd f9a7 	bl	8001920 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d901      	bls.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e189      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045e0:	4b8a      	ldr	r3, [pc, #552]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1f0      	bne.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d009      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	019a      	lsls	r2, r3, #6
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	071b      	lsls	r3, r3, #28
 8004604:	4981      	ldr	r1, [pc, #516]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d01f      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004618:	4b7c      	ldr	r3, [pc, #496]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800461a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800461e:	0f1b      	lsrs	r3, r3, #28
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	019a      	lsls	r2, r3, #6
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	061b      	lsls	r3, r3, #24
 8004632:	431a      	orrs	r2, r3
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	071b      	lsls	r3, r3, #28
 8004638:	4974      	ldr	r1, [pc, #464]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800463a:	4313      	orrs	r3, r2
 800463c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004640:	4b72      	ldr	r3, [pc, #456]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004642:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004646:	f023 021f 	bic.w	r2, r3, #31
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	3b01      	subs	r3, #1
 8004650:	496e      	ldr	r1, [pc, #440]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004652:	4313      	orrs	r3, r2
 8004654:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00d      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	019a      	lsls	r2, r3, #6
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	061b      	lsls	r3, r3, #24
 8004670:	431a      	orrs	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	071b      	lsls	r3, r3, #28
 8004678:	4964      	ldr	r1, [pc, #400]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800467a:	4313      	orrs	r3, r2
 800467c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004680:	4b61      	ldr	r3, [pc, #388]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004682:	2201      	movs	r2, #1
 8004684:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004686:	f7fd f94b 	bl	8001920 <HAL_GetTick>
 800468a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800468c:	e008      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800468e:	f7fd f947 	bl	8001920 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d901      	bls.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e129      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046a0:	4b5a      	ldr	r3, [pc, #360]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d0f0      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0304 	and.w	r3, r3, #4
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d105      	bne.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d079      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80046c4:	4b52      	ldr	r3, [pc, #328]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046ca:	f7fd f929 	bl	8001920 <HAL_GetTick>
 80046ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80046d0:	e008      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80046d2:	f7fd f925 	bl	8001920 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e107      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80046e4:	4b49      	ldr	r3, [pc, #292]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046f0:	d0ef      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0304 	and.w	r3, r3, #4
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d020      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80046fe:	4b43      	ldr	r3, [pc, #268]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004704:	0f1b      	lsrs	r3, r3, #28
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	019a      	lsls	r2, r3, #6
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	061b      	lsls	r3, r3, #24
 8004718:	431a      	orrs	r2, r3
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	071b      	lsls	r3, r3, #28
 800471e:	493b      	ldr	r1, [pc, #236]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004720:	4313      	orrs	r3, r2
 8004722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004726:	4b39      	ldr	r3, [pc, #228]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004728:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800472c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	3b01      	subs	r3, #1
 8004736:	021b      	lsls	r3, r3, #8
 8004738:	4934      	ldr	r1, [pc, #208]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0308 	and.w	r3, r3, #8
 8004748:	2b00      	cmp	r3, #0
 800474a:	d01e      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800474c:	4b2f      	ldr	r3, [pc, #188]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800474e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004752:	0e1b      	lsrs	r3, r3, #24
 8004754:	f003 030f 	and.w	r3, r3, #15
 8004758:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	019a      	lsls	r2, r3, #6
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	061b      	lsls	r3, r3, #24
 8004764:	431a      	orrs	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	071b      	lsls	r3, r3, #28
 800476c:	4927      	ldr	r1, [pc, #156]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800476e:	4313      	orrs	r3, r2
 8004770:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004774:	4b25      	ldr	r3, [pc, #148]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004776:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800477a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004782:	4922      	ldr	r1, [pc, #136]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004784:	4313      	orrs	r3, r2
 8004786:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800478a:	4b21      	ldr	r3, [pc, #132]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800478c:	2201      	movs	r2, #1
 800478e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004790:	f7fd f8c6 	bl	8001920 <HAL_GetTick>
 8004794:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004796:	e008      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004798:	f7fd f8c2 	bl	8001920 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d901      	bls.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e0a4      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80047aa:	4b18      	ldr	r3, [pc, #96]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047b6:	d1ef      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0320 	and.w	r3, r3, #32
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 808b 	beq.w	80048dc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80047c6:	2300      	movs	r3, #0
 80047c8:	60fb      	str	r3, [r7, #12]
 80047ca:	4b10      	ldr	r3, [pc, #64]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ce:	4a0f      	ldr	r2, [pc, #60]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80047d6:	4b0d      	ldr	r3, [pc, #52]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80047e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a0b      	ldr	r2, [pc, #44]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80047e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047ec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80047ee:	f7fd f897 	bl	8001920 <HAL_GetTick>
 80047f2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047f4:	e010      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80047f6:	f7fd f893 	bl	8001920 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d909      	bls.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e075      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004808:	42470068 	.word	0x42470068
 800480c:	40023800 	.word	0x40023800
 8004810:	42470070 	.word	0x42470070
 8004814:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004818:	4b38      	ldr	r3, [pc, #224]	@ (80048fc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004820:	2b00      	cmp	r3, #0
 8004822:	d0e8      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004824:	4b36      	ldr	r3, [pc, #216]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004828:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800482c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d02f      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004838:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	429a      	cmp	r2, r3
 8004840:	d028      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004842:	4b2f      	ldr	r3, [pc, #188]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004846:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800484a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800484c:	4b2d      	ldr	r3, [pc, #180]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800484e:	2201      	movs	r2, #1
 8004850:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004852:	4b2c      	ldr	r3, [pc, #176]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004858:	4a29      	ldr	r2, [pc, #164]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800485e:	4b28      	ldr	r3, [pc, #160]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b01      	cmp	r3, #1
 8004868:	d114      	bne.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800486a:	f7fd f859 	bl	8001920 <HAL_GetTick>
 800486e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004870:	e00a      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004872:	f7fd f855 	bl	8001920 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004880:	4293      	cmp	r3, r2
 8004882:	d901      	bls.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e035      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004888:	4b1d      	ldr	r3, [pc, #116]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800488a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0ee      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004898:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800489c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048a0:	d10d      	bne.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x332>
 80048a2:	4b17      	ldr	r3, [pc, #92]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ae:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80048b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048b6:	4912      	ldr	r1, [pc, #72]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	608b      	str	r3, [r1, #8]
 80048bc:	e005      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80048be:	4b10      	ldr	r3, [pc, #64]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	4a0f      	ldr	r2, [pc, #60]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80048c4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80048c8:	6093      	str	r3, [r2, #8]
 80048ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80048cc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048d6:	490a      	ldr	r1, [pc, #40]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0310 	and.w	r3, r3, #16
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d004      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80048ee:	4b06      	ldr	r3, [pc, #24]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80048f0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3718      	adds	r7, #24
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	40007000 	.word	0x40007000
 8004900:	40023800 	.word	0x40023800
 8004904:	42470e40 	.word	0x42470e40
 8004908:	424711e0 	.word	0x424711e0

0800490c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e073      	b.n	8004a0a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	7f5b      	ldrb	r3, [r3, #29]
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b00      	cmp	r3, #0
 800492a:	d105      	bne.n	8004938 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7fc fb68 	bl	8001008 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f003 0310 	and.w	r3, r3, #16
 8004948:	2b10      	cmp	r3, #16
 800494a:	d055      	beq.n	80049f8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	22ca      	movs	r2, #202	@ 0xca
 8004952:	625a      	str	r2, [r3, #36]	@ 0x24
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2253      	movs	r2, #83	@ 0x53
 800495a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f87f 	bl	8004a60 <RTC_EnterInitMode>
 8004962:	4603      	mov	r3, r0
 8004964:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004966:	7bfb      	ldrb	r3, [r7, #15]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d12c      	bne.n	80049c6 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	6812      	ldr	r2, [r2, #0]
 8004976:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800497a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800497e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6899      	ldr	r1, [r3, #8]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	431a      	orrs	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	695b      	ldr	r3, [r3, #20]
 8004994:	431a      	orrs	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	68d2      	ldr	r2, [r2, #12]
 80049a6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6919      	ldr	r1, [r3, #16]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	041a      	lsls	r2, r3, #16
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f886 	bl	8004ace <RTC_ExitInitMode>
 80049c2:	4603      	mov	r3, r0
 80049c4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d110      	bne.n	80049ee <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80049da:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	699a      	ldr	r2, [r3, #24]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	22ff      	movs	r2, #255	@ 0xff
 80049f4:	625a      	str	r2, [r3, #36]	@ 0x24
 80049f6:	e001      	b.n	80049fc <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80049f8:	2300      	movs	r3, #0
 80049fa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80049fc:	7bfb      	ldrb	r3, [r7, #15]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d102      	bne.n	8004a08 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
	...

08004a14 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a0d      	ldr	r2, [pc, #52]	@ (8004a5c <HAL_RTC_WaitForSynchro+0x48>)
 8004a26:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a28:	f7fc ff7a 	bl	8001920 <HAL_GetTick>
 8004a2c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004a2e:	e009      	b.n	8004a44 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a30:	f7fc ff76 	bl	8001920 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a3e:	d901      	bls.n	8004a44 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e007      	b.n	8004a54 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f003 0320 	and.w	r3, r3, #32
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0ee      	beq.n	8004a30 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	00017f5f 	.word	0x00017f5f

08004a60 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d122      	bne.n	8004ac4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68da      	ldr	r2, [r3, #12]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004a8c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a8e:	f7fc ff47 	bl	8001920 <HAL_GetTick>
 8004a92:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004a94:	e00c      	b.n	8004ab0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a96:	f7fc ff43 	bl	8001920 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004aa4:	d904      	bls.n	8004ab0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2204      	movs	r2, #4
 8004aaa:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d102      	bne.n	8004ac4 <RTC_EnterInitMode+0x64>
 8004abe:	7bfb      	ldrb	r3, [r7, #15]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d1e8      	bne.n	8004a96 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b084      	sub	sp, #16
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68da      	ldr	r2, [r3, #12]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ae8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f003 0320 	and.w	r3, r3, #32
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10a      	bne.n	8004b0e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7ff ff8b 	bl	8004a14 <HAL_RTC_WaitForSynchro>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d004      	beq.n	8004b0e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2204      	movs	r2, #4
 8004b08:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e041      	b.n	8004bae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d106      	bne.n	8004b44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f839 	bl	8004bb6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3304      	adds	r3, #4
 8004b54:	4619      	mov	r1, r3
 8004b56:	4610      	mov	r0, r2
 8004b58:	f000 f9c0 	bl	8004edc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004bbe:	bf00      	nop
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
	...

08004bcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d001      	beq.n	8004be4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e04e      	b.n	8004c82 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 0201 	orr.w	r2, r2, #1
 8004bfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a23      	ldr	r2, [pc, #140]	@ (8004c90 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d022      	beq.n	8004c4c <HAL_TIM_Base_Start_IT+0x80>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c0e:	d01d      	beq.n	8004c4c <HAL_TIM_Base_Start_IT+0x80>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a1f      	ldr	r2, [pc, #124]	@ (8004c94 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d018      	beq.n	8004c4c <HAL_TIM_Base_Start_IT+0x80>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a1e      	ldr	r2, [pc, #120]	@ (8004c98 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d013      	beq.n	8004c4c <HAL_TIM_Base_Start_IT+0x80>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a1c      	ldr	r2, [pc, #112]	@ (8004c9c <HAL_TIM_Base_Start_IT+0xd0>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d00e      	beq.n	8004c4c <HAL_TIM_Base_Start_IT+0x80>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a1b      	ldr	r2, [pc, #108]	@ (8004ca0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d009      	beq.n	8004c4c <HAL_TIM_Base_Start_IT+0x80>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a19      	ldr	r2, [pc, #100]	@ (8004ca4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d004      	beq.n	8004c4c <HAL_TIM_Base_Start_IT+0x80>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a18      	ldr	r2, [pc, #96]	@ (8004ca8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d111      	bne.n	8004c70 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f003 0307 	and.w	r3, r3, #7
 8004c56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2b06      	cmp	r3, #6
 8004c5c:	d010      	beq.n	8004c80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f042 0201 	orr.w	r2, r2, #1
 8004c6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c6e:	e007      	b.n	8004c80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0201 	orr.w	r2, r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	40010000 	.word	0x40010000
 8004c94:	40000400 	.word	0x40000400
 8004c98:	40000800 	.word	0x40000800
 8004c9c:	40000c00 	.word	0x40000c00
 8004ca0:	40010400 	.word	0x40010400
 8004ca4:	40014000 	.word	0x40014000
 8004ca8:	40001800 	.word	0x40001800

08004cac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d020      	beq.n	8004d10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d01b      	beq.n	8004d10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f06f 0202 	mvn.w	r2, #2
 8004ce0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	f003 0303 	and.w	r3, r3, #3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f8d2 	bl	8004ea0 <HAL_TIM_IC_CaptureCallback>
 8004cfc:	e005      	b.n	8004d0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f8c4 	bl	8004e8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 f8d5 	bl	8004eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	f003 0304 	and.w	r3, r3, #4
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d020      	beq.n	8004d5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f003 0304 	and.w	r3, r3, #4
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d01b      	beq.n	8004d5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f06f 0204 	mvn.w	r2, #4
 8004d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2202      	movs	r2, #2
 8004d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d003      	beq.n	8004d4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f8ac 	bl	8004ea0 <HAL_TIM_IC_CaptureCallback>
 8004d48:	e005      	b.n	8004d56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f89e 	bl	8004e8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f8af 	bl	8004eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	f003 0308 	and.w	r3, r3, #8
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d020      	beq.n	8004da8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f003 0308 	and.w	r3, r3, #8
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d01b      	beq.n	8004da8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f06f 0208 	mvn.w	r2, #8
 8004d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2204      	movs	r2, #4
 8004d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	f003 0303 	and.w	r3, r3, #3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f886 	bl	8004ea0 <HAL_TIM_IC_CaptureCallback>
 8004d94:	e005      	b.n	8004da2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f878 	bl	8004e8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 f889 	bl	8004eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	f003 0310 	and.w	r3, r3, #16
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d020      	beq.n	8004df4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f003 0310 	and.w	r3, r3, #16
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d01b      	beq.n	8004df4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f06f 0210 	mvn.w	r2, #16
 8004dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2208      	movs	r2, #8
 8004dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f860 	bl	8004ea0 <HAL_TIM_IC_CaptureCallback>
 8004de0:	e005      	b.n	8004dee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f852 	bl	8004e8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f863 	bl	8004eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00c      	beq.n	8004e18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d007      	beq.n	8004e18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f06f 0201 	mvn.w	r2, #1
 8004e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7fc f88a 	bl	8000f2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00c      	beq.n	8004e3c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d007      	beq.n	8004e3c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f906 	bl	8005048 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00c      	beq.n	8004e60 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d007      	beq.n	8004e60 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f834 	bl	8004ec8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f003 0320 	and.w	r3, r3, #32
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00c      	beq.n	8004e84 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f003 0320 	and.w	r3, r3, #32
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d007      	beq.n	8004e84 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f06f 0220 	mvn.w	r2, #32
 8004e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f8d8 	bl	8005034 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e84:	bf00      	nop
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a46      	ldr	r2, [pc, #280]	@ (8005008 <TIM_Base_SetConfig+0x12c>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d013      	beq.n	8004f1c <TIM_Base_SetConfig+0x40>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004efa:	d00f      	beq.n	8004f1c <TIM_Base_SetConfig+0x40>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a43      	ldr	r2, [pc, #268]	@ (800500c <TIM_Base_SetConfig+0x130>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d00b      	beq.n	8004f1c <TIM_Base_SetConfig+0x40>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a42      	ldr	r2, [pc, #264]	@ (8005010 <TIM_Base_SetConfig+0x134>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d007      	beq.n	8004f1c <TIM_Base_SetConfig+0x40>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a41      	ldr	r2, [pc, #260]	@ (8005014 <TIM_Base_SetConfig+0x138>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d003      	beq.n	8004f1c <TIM_Base_SetConfig+0x40>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a40      	ldr	r2, [pc, #256]	@ (8005018 <TIM_Base_SetConfig+0x13c>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d108      	bne.n	8004f2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a35      	ldr	r2, [pc, #212]	@ (8005008 <TIM_Base_SetConfig+0x12c>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d02b      	beq.n	8004f8e <TIM_Base_SetConfig+0xb2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f3c:	d027      	beq.n	8004f8e <TIM_Base_SetConfig+0xb2>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a32      	ldr	r2, [pc, #200]	@ (800500c <TIM_Base_SetConfig+0x130>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d023      	beq.n	8004f8e <TIM_Base_SetConfig+0xb2>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a31      	ldr	r2, [pc, #196]	@ (8005010 <TIM_Base_SetConfig+0x134>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d01f      	beq.n	8004f8e <TIM_Base_SetConfig+0xb2>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a30      	ldr	r2, [pc, #192]	@ (8005014 <TIM_Base_SetConfig+0x138>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d01b      	beq.n	8004f8e <TIM_Base_SetConfig+0xb2>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a2f      	ldr	r2, [pc, #188]	@ (8005018 <TIM_Base_SetConfig+0x13c>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d017      	beq.n	8004f8e <TIM_Base_SetConfig+0xb2>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a2e      	ldr	r2, [pc, #184]	@ (800501c <TIM_Base_SetConfig+0x140>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d013      	beq.n	8004f8e <TIM_Base_SetConfig+0xb2>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a2d      	ldr	r2, [pc, #180]	@ (8005020 <TIM_Base_SetConfig+0x144>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d00f      	beq.n	8004f8e <TIM_Base_SetConfig+0xb2>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a2c      	ldr	r2, [pc, #176]	@ (8005024 <TIM_Base_SetConfig+0x148>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d00b      	beq.n	8004f8e <TIM_Base_SetConfig+0xb2>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a2b      	ldr	r2, [pc, #172]	@ (8005028 <TIM_Base_SetConfig+0x14c>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d007      	beq.n	8004f8e <TIM_Base_SetConfig+0xb2>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a2a      	ldr	r2, [pc, #168]	@ (800502c <TIM_Base_SetConfig+0x150>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d003      	beq.n	8004f8e <TIM_Base_SetConfig+0xb2>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a29      	ldr	r2, [pc, #164]	@ (8005030 <TIM_Base_SetConfig+0x154>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d108      	bne.n	8004fa0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	689a      	ldr	r2, [r3, #8]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a10      	ldr	r2, [pc, #64]	@ (8005008 <TIM_Base_SetConfig+0x12c>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d003      	beq.n	8004fd4 <TIM_Base_SetConfig+0xf8>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a12      	ldr	r2, [pc, #72]	@ (8005018 <TIM_Base_SetConfig+0x13c>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d103      	bne.n	8004fdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	691a      	ldr	r2, [r3, #16]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d105      	bne.n	8004ffa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	f023 0201 	bic.w	r2, r3, #1
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	611a      	str	r2, [r3, #16]
  }
}
 8004ffa:	bf00      	nop
 8004ffc:	3714      	adds	r7, #20
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	40010000 	.word	0x40010000
 800500c:	40000400 	.word	0x40000400
 8005010:	40000800 	.word	0x40000800
 8005014:	40000c00 	.word	0x40000c00
 8005018:	40010400 	.word	0x40010400
 800501c:	40014000 	.word	0x40014000
 8005020:	40014400 	.word	0x40014400
 8005024:	40014800 	.word	0x40014800
 8005028:	40001800 	.word	0x40001800
 800502c:	40001c00 	.word	0x40001c00
 8005030:	40002000 	.word	0x40002000

08005034 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005050:	bf00      	nop
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e042      	b.n	80050f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d106      	bne.n	8005088 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7fb ffea 	bl	800105c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2224      	movs	r2, #36	@ 0x24
 800508c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800509e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 fe9d 	bl	8005de0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	691a      	ldr	r2, [r3, #16]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	695a      	ldr	r2, [r3, #20]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68da      	ldr	r2, [r3, #12]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2220      	movs	r2, #32
 80050e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2220      	movs	r2, #32
 80050e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3708      	adds	r7, #8
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b08a      	sub	sp, #40	@ 0x28
 8005100:	af02      	add	r7, sp, #8
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	603b      	str	r3, [r7, #0]
 8005108:	4613      	mov	r3, r2
 800510a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800510c:	2300      	movs	r3, #0
 800510e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b20      	cmp	r3, #32
 800511a:	d175      	bne.n	8005208 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d002      	beq.n	8005128 <HAL_UART_Transmit+0x2c>
 8005122:	88fb      	ldrh	r3, [r7, #6]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e06e      	b.n	800520a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2221      	movs	r2, #33	@ 0x21
 8005136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800513a:	f7fc fbf1 	bl	8001920 <HAL_GetTick>
 800513e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	88fa      	ldrh	r2, [r7, #6]
 8005144:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	88fa      	ldrh	r2, [r7, #6]
 800514a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005154:	d108      	bne.n	8005168 <HAL_UART_Transmit+0x6c>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d104      	bne.n	8005168 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800515e:	2300      	movs	r3, #0
 8005160:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	61bb      	str	r3, [r7, #24]
 8005166:	e003      	b.n	8005170 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800516c:	2300      	movs	r3, #0
 800516e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005170:	e02e      	b.n	80051d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	2200      	movs	r2, #0
 800517a:	2180      	movs	r1, #128	@ 0x80
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f000 fc10 	bl	80059a2 <UART_WaitOnFlagUntilTimeout>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d005      	beq.n	8005194 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2220      	movs	r2, #32
 800518c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e03a      	b.n	800520a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10b      	bne.n	80051b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	881b      	ldrh	r3, [r3, #0]
 800519e:	461a      	mov	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	3302      	adds	r3, #2
 80051ae:	61bb      	str	r3, [r7, #24]
 80051b0:	e007      	b.n	80051c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	781a      	ldrb	r2, [r3, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	3301      	adds	r3, #1
 80051c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	3b01      	subs	r3, #1
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1cb      	bne.n	8005172 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	2200      	movs	r2, #0
 80051e2:	2140      	movs	r1, #64	@ 0x40
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f000 fbdc 	bl	80059a2 <UART_WaitOnFlagUntilTimeout>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d005      	beq.n	80051fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e006      	b.n	800520a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2220      	movs	r2, #32
 8005200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005204:	2300      	movs	r3, #0
 8005206:	e000      	b.n	800520a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005208:	2302      	movs	r3, #2
  }
}
 800520a:	4618      	mov	r0, r3
 800520c:	3720      	adds	r7, #32
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
	...

08005214 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b08c      	sub	sp, #48	@ 0x30
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	4613      	mov	r3, r2
 8005220:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b20      	cmp	r3, #32
 800522c:	d156      	bne.n	80052dc <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <HAL_UART_Transmit_DMA+0x26>
 8005234:	88fb      	ldrh	r3, [r7, #6]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e04f      	b.n	80052de <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	88fa      	ldrh	r2, [r7, #6]
 8005248:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	88fa      	ldrh	r2, [r7, #6]
 800524e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2221      	movs	r2, #33	@ 0x21
 800525a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005262:	4a21      	ldr	r2, [pc, #132]	@ (80052e8 <HAL_UART_Transmit_DMA+0xd4>)
 8005264:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800526a:	4a20      	ldr	r2, [pc, #128]	@ (80052ec <HAL_UART_Transmit_DMA+0xd8>)
 800526c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005272:	4a1f      	ldr	r2, [pc, #124]	@ (80052f0 <HAL_UART_Transmit_DMA+0xdc>)
 8005274:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800527a:	2200      	movs	r2, #0
 800527c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800527e:	f107 0308 	add.w	r3, r7, #8
 8005282:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800528a:	6819      	ldr	r1, [r3, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3304      	adds	r3, #4
 8005292:	461a      	mov	r2, r3
 8005294:	88fb      	ldrh	r3, [r7, #6]
 8005296:	f7fc fd1f 	bl	8001cd8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80052a2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3314      	adds	r3, #20
 80052aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	e853 3f00 	ldrex	r3, [r3]
 80052b2:	617b      	str	r3, [r7, #20]
   return(result);
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	3314      	adds	r3, #20
 80052c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052c4:	627a      	str	r2, [r7, #36]	@ 0x24
 80052c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c8:	6a39      	ldr	r1, [r7, #32]
 80052ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052cc:	e841 2300 	strex	r3, r2, [r1]
 80052d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1e5      	bne.n	80052a4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80052d8:	2300      	movs	r3, #0
 80052da:	e000      	b.n	80052de <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80052dc:	2302      	movs	r3, #2
  }
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3730      	adds	r7, #48	@ 0x30
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	08005859 	.word	0x08005859
 80052ec:	080058f3 	.word	0x080058f3
 80052f0:	0800590f 	.word	0x0800590f

080052f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b0ba      	sub	sp, #232	@ 0xe8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800531a:	2300      	movs	r3, #0
 800531c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005320:	2300      	movs	r3, #0
 8005322:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800532a:	f003 030f 	and.w	r3, r3, #15
 800532e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005332:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10f      	bne.n	800535a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800533a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800533e:	f003 0320 	and.w	r3, r3, #32
 8005342:	2b00      	cmp	r3, #0
 8005344:	d009      	beq.n	800535a <HAL_UART_IRQHandler+0x66>
 8005346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800534a:	f003 0320 	and.w	r3, r3, #32
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 fc85 	bl	8005c62 <UART_Receive_IT>
      return;
 8005358:	e25b      	b.n	8005812 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800535a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800535e:	2b00      	cmp	r3, #0
 8005360:	f000 80de 	beq.w	8005520 <HAL_UART_IRQHandler+0x22c>
 8005364:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005368:	f003 0301 	and.w	r3, r3, #1
 800536c:	2b00      	cmp	r3, #0
 800536e:	d106      	bne.n	800537e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005374:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005378:	2b00      	cmp	r3, #0
 800537a:	f000 80d1 	beq.w	8005520 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800537e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00b      	beq.n	80053a2 <HAL_UART_IRQHandler+0xae>
 800538a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800538e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005392:	2b00      	cmp	r3, #0
 8005394:	d005      	beq.n	80053a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800539a:	f043 0201 	orr.w	r2, r3, #1
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053a6:	f003 0304 	and.w	r3, r3, #4
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00b      	beq.n	80053c6 <HAL_UART_IRQHandler+0xd2>
 80053ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d005      	beq.n	80053c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053be:	f043 0202 	orr.w	r2, r3, #2
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00b      	beq.n	80053ea <HAL_UART_IRQHandler+0xf6>
 80053d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d005      	beq.n	80053ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053e2:	f043 0204 	orr.w	r2, r3, #4
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80053ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053ee:	f003 0308 	and.w	r3, r3, #8
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d011      	beq.n	800541a <HAL_UART_IRQHandler+0x126>
 80053f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053fa:	f003 0320 	and.w	r3, r3, #32
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d105      	bne.n	800540e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005402:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d005      	beq.n	800541a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005412:	f043 0208 	orr.w	r2, r3, #8
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800541e:	2b00      	cmp	r3, #0
 8005420:	f000 81f2 	beq.w	8005808 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005428:	f003 0320 	and.w	r3, r3, #32
 800542c:	2b00      	cmp	r3, #0
 800542e:	d008      	beq.n	8005442 <HAL_UART_IRQHandler+0x14e>
 8005430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005434:	f003 0320 	and.w	r3, r3, #32
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 fc10 	bl	8005c62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800544c:	2b40      	cmp	r3, #64	@ 0x40
 800544e:	bf0c      	ite	eq
 8005450:	2301      	moveq	r3, #1
 8005452:	2300      	movne	r3, #0
 8005454:	b2db      	uxtb	r3, r3
 8005456:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800545e:	f003 0308 	and.w	r3, r3, #8
 8005462:	2b00      	cmp	r3, #0
 8005464:	d103      	bne.n	800546e <HAL_UART_IRQHandler+0x17a>
 8005466:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800546a:	2b00      	cmp	r3, #0
 800546c:	d04f      	beq.n	800550e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 fb18 	bl	8005aa4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800547e:	2b40      	cmp	r3, #64	@ 0x40
 8005480:	d141      	bne.n	8005506 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	3314      	adds	r3, #20
 8005488:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005490:	e853 3f00 	ldrex	r3, [r3]
 8005494:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005498:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800549c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	3314      	adds	r3, #20
 80054aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80054ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80054b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80054ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80054be:	e841 2300 	strex	r3, r2, [r1]
 80054c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80054c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1d9      	bne.n	8005482 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d013      	beq.n	80054fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054da:	4a7e      	ldr	r2, [pc, #504]	@ (80056d4 <HAL_UART_IRQHandler+0x3e0>)
 80054dc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7fc fcc0 	bl	8001e68 <HAL_DMA_Abort_IT>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d016      	beq.n	800551c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80054f8:	4610      	mov	r0, r2
 80054fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054fc:	e00e      	b.n	800551c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f994 	bl	800582c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005504:	e00a      	b.n	800551c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f990 	bl	800582c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800550c:	e006      	b.n	800551c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f98c 	bl	800582c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800551a:	e175      	b.n	8005808 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800551c:	bf00      	nop
    return;
 800551e:	e173      	b.n	8005808 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005524:	2b01      	cmp	r3, #1
 8005526:	f040 814f 	bne.w	80057c8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800552a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800552e:	f003 0310 	and.w	r3, r3, #16
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 8148 	beq.w	80057c8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800553c:	f003 0310 	and.w	r3, r3, #16
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 8141 	beq.w	80057c8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005546:	2300      	movs	r3, #0
 8005548:	60bb      	str	r3, [r7, #8]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	60bb      	str	r3, [r7, #8]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	60bb      	str	r3, [r7, #8]
 800555a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005566:	2b40      	cmp	r3, #64	@ 0x40
 8005568:	f040 80b6 	bne.w	80056d8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005578:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800557c:	2b00      	cmp	r3, #0
 800557e:	f000 8145 	beq.w	800580c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005586:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800558a:	429a      	cmp	r2, r3
 800558c:	f080 813e 	bcs.w	800580c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005596:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055a2:	f000 8088 	beq.w	80056b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	330c      	adds	r3, #12
 80055ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80055b4:	e853 3f00 	ldrex	r3, [r3]
 80055b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80055bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	330c      	adds	r3, #12
 80055ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80055d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80055d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80055de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80055e2:	e841 2300 	strex	r3, r2, [r1]
 80055e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80055ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1d9      	bne.n	80055a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	3314      	adds	r3, #20
 80055f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055fc:	e853 3f00 	ldrex	r3, [r3]
 8005600:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005602:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005604:	f023 0301 	bic.w	r3, r3, #1
 8005608:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	3314      	adds	r3, #20
 8005612:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005616:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800561a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800561e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005622:	e841 2300 	strex	r3, r2, [r1]
 8005626:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005628:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1e1      	bne.n	80055f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	3314      	adds	r3, #20
 8005634:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005636:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005638:	e853 3f00 	ldrex	r3, [r3]
 800563c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800563e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005640:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005644:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	3314      	adds	r3, #20
 800564e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005652:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005654:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005656:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005658:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800565a:	e841 2300 	strex	r3, r2, [r1]
 800565e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005660:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1e3      	bne.n	800562e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2220      	movs	r2, #32
 800566a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	330c      	adds	r3, #12
 800567a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800567e:	e853 3f00 	ldrex	r3, [r3]
 8005682:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005684:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005686:	f023 0310 	bic.w	r3, r3, #16
 800568a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	330c      	adds	r3, #12
 8005694:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005698:	65ba      	str	r2, [r7, #88]	@ 0x58
 800569a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800569e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80056a0:	e841 2300 	strex	r3, r2, [r1]
 80056a4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80056a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1e3      	bne.n	8005674 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7fc fb69 	bl	8001d88 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2202      	movs	r2, #2
 80056ba:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	4619      	mov	r1, r3
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f8b7 	bl	8005840 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056d2:	e09b      	b.n	800580c <HAL_UART_IRQHandler+0x518>
 80056d4:	08005b6b 	.word	0x08005b6b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f000 808e 	beq.w	8005810 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80056f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 8089 	beq.w	8005810 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	330c      	adds	r3, #12
 8005704:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005708:	e853 3f00 	ldrex	r3, [r3]
 800570c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800570e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005710:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005714:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	330c      	adds	r3, #12
 800571e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005722:	647a      	str	r2, [r7, #68]	@ 0x44
 8005724:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005726:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005728:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800572a:	e841 2300 	strex	r3, r2, [r1]
 800572e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005730:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1e3      	bne.n	80056fe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	3314      	adds	r3, #20
 800573c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005740:	e853 3f00 	ldrex	r3, [r3]
 8005744:	623b      	str	r3, [r7, #32]
   return(result);
 8005746:	6a3b      	ldr	r3, [r7, #32]
 8005748:	f023 0301 	bic.w	r3, r3, #1
 800574c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3314      	adds	r3, #20
 8005756:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800575a:	633a      	str	r2, [r7, #48]	@ 0x30
 800575c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005760:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005762:	e841 2300 	strex	r3, r2, [r1]
 8005766:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1e3      	bne.n	8005736 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2220      	movs	r2, #32
 8005772:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	330c      	adds	r3, #12
 8005782:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	e853 3f00 	ldrex	r3, [r3]
 800578a:	60fb      	str	r3, [r7, #12]
   return(result);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f023 0310 	bic.w	r3, r3, #16
 8005792:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	330c      	adds	r3, #12
 800579c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80057a0:	61fa      	str	r2, [r7, #28]
 80057a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a4:	69b9      	ldr	r1, [r7, #24]
 80057a6:	69fa      	ldr	r2, [r7, #28]
 80057a8:	e841 2300 	strex	r3, r2, [r1]
 80057ac:	617b      	str	r3, [r7, #20]
   return(result);
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1e3      	bne.n	800577c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2202      	movs	r2, #2
 80057b8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057be:	4619      	mov	r1, r3
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 f83d 	bl	8005840 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057c6:	e023      	b.n	8005810 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80057c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d009      	beq.n	80057e8 <HAL_UART_IRQHandler+0x4f4>
 80057d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d003      	beq.n	80057e8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 f9d6 	bl	8005b92 <UART_Transmit_IT>
    return;
 80057e6:	e014      	b.n	8005812 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80057e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00e      	beq.n	8005812 <HAL_UART_IRQHandler+0x51e>
 80057f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d008      	beq.n	8005812 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 fa16 	bl	8005c32 <UART_EndTransmit_IT>
    return;
 8005806:	e004      	b.n	8005812 <HAL_UART_IRQHandler+0x51e>
    return;
 8005808:	bf00      	nop
 800580a:	e002      	b.n	8005812 <HAL_UART_IRQHandler+0x51e>
      return;
 800580c:	bf00      	nop
 800580e:	e000      	b.n	8005812 <HAL_UART_IRQHandler+0x51e>
      return;
 8005810:	bf00      	nop
  }
}
 8005812:	37e8      	adds	r7, #232	@ 0xe8
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	460b      	mov	r3, r1
 800584a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b090      	sub	sp, #64	@ 0x40
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005864:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005870:	2b00      	cmp	r3, #0
 8005872:	d137      	bne.n	80058e4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005876:	2200      	movs	r2, #0
 8005878:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800587a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3314      	adds	r3, #20
 8005880:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005884:	e853 3f00 	ldrex	r3, [r3]
 8005888:	623b      	str	r3, [r7, #32]
   return(result);
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005890:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	3314      	adds	r3, #20
 8005898:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800589a:	633a      	str	r2, [r7, #48]	@ 0x30
 800589c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058a2:	e841 2300 	strex	r3, r2, [r1]
 80058a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80058a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1e5      	bne.n	800587a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	330c      	adds	r3, #12
 80058b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	e853 3f00 	ldrex	r3, [r3]
 80058bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80058c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	330c      	adds	r3, #12
 80058cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80058ce:	61fa      	str	r2, [r7, #28]
 80058d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d2:	69b9      	ldr	r1, [r7, #24]
 80058d4:	69fa      	ldr	r2, [r7, #28]
 80058d6:	e841 2300 	strex	r3, r2, [r1]
 80058da:	617b      	str	r3, [r7, #20]
   return(result);
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1e5      	bne.n	80058ae <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80058e2:	e002      	b.n	80058ea <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80058e4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80058e6:	f7fa fef7 	bl	80006d8 <HAL_UART_TxCpltCallback>
}
 80058ea:	bf00      	nop
 80058ec:	3740      	adds	r7, #64	@ 0x40
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b084      	sub	sp, #16
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058fe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f7fa fedf 	bl	80006c4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005906:	bf00      	nop
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b084      	sub	sp, #16
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005916:	2300      	movs	r3, #0
 8005918:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800591e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800592a:	2b80      	cmp	r3, #128	@ 0x80
 800592c:	bf0c      	ite	eq
 800592e:	2301      	moveq	r3, #1
 8005930:	2300      	movne	r3, #0
 8005932:	b2db      	uxtb	r3, r3
 8005934:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b21      	cmp	r3, #33	@ 0x21
 8005940:	d108      	bne.n	8005954 <UART_DMAError+0x46>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d005      	beq.n	8005954 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2200      	movs	r2, #0
 800594c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800594e:	68b8      	ldr	r0, [r7, #8]
 8005950:	f000 f880 	bl	8005a54 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800595e:	2b40      	cmp	r3, #64	@ 0x40
 8005960:	bf0c      	ite	eq
 8005962:	2301      	moveq	r3, #1
 8005964:	2300      	movne	r3, #0
 8005966:	b2db      	uxtb	r3, r3
 8005968:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b22      	cmp	r3, #34	@ 0x22
 8005974:	d108      	bne.n	8005988 <UART_DMAError+0x7a>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d005      	beq.n	8005988 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	2200      	movs	r2, #0
 8005980:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005982:	68b8      	ldr	r0, [r7, #8]
 8005984:	f000 f88e 	bl	8005aa4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800598c:	f043 0210 	orr.w	r2, r3, #16
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005994:	68b8      	ldr	r0, [r7, #8]
 8005996:	f7ff ff49 	bl	800582c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800599a:	bf00      	nop
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b086      	sub	sp, #24
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	60f8      	str	r0, [r7, #12]
 80059aa:	60b9      	str	r1, [r7, #8]
 80059ac:	603b      	str	r3, [r7, #0]
 80059ae:	4613      	mov	r3, r2
 80059b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059b2:	e03b      	b.n	8005a2c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ba:	d037      	beq.n	8005a2c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059bc:	f7fb ffb0 	bl	8001920 <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	6a3a      	ldr	r2, [r7, #32]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d302      	bcc.n	80059d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80059cc:	6a3b      	ldr	r3, [r7, #32]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d101      	bne.n	80059d6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e03a      	b.n	8005a4c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	f003 0304 	and.w	r3, r3, #4
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d023      	beq.n	8005a2c <UART_WaitOnFlagUntilTimeout+0x8a>
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2b80      	cmp	r3, #128	@ 0x80
 80059e8:	d020      	beq.n	8005a2c <UART_WaitOnFlagUntilTimeout+0x8a>
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	2b40      	cmp	r3, #64	@ 0x40
 80059ee:	d01d      	beq.n	8005a2c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0308 	and.w	r3, r3, #8
 80059fa:	2b08      	cmp	r3, #8
 80059fc:	d116      	bne.n	8005a2c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80059fe:	2300      	movs	r3, #0
 8005a00:	617b      	str	r3, [r7, #20]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	617b      	str	r3, [r7, #20]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	617b      	str	r3, [r7, #20]
 8005a12:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f000 f845 	bl	8005aa4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2208      	movs	r2, #8
 8005a1e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e00f      	b.n	8005a4c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	4013      	ands	r3, r2
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	bf0c      	ite	eq
 8005a3c:	2301      	moveq	r3, #1
 8005a3e:	2300      	movne	r3, #0
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	461a      	mov	r2, r3
 8005a44:	79fb      	ldrb	r3, [r7, #7]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d0b4      	beq.n	80059b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3718      	adds	r7, #24
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b089      	sub	sp, #36	@ 0x24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	330c      	adds	r3, #12
 8005a62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	e853 3f00 	ldrex	r3, [r3]
 8005a6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005a72:	61fb      	str	r3, [r7, #28]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	330c      	adds	r3, #12
 8005a7a:	69fa      	ldr	r2, [r7, #28]
 8005a7c:	61ba      	str	r2, [r7, #24]
 8005a7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a80:	6979      	ldr	r1, [r7, #20]
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	e841 2300 	strex	r3, r2, [r1]
 8005a88:	613b      	str	r3, [r7, #16]
   return(result);
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1e5      	bne.n	8005a5c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2220      	movs	r2, #32
 8005a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005a98:	bf00      	nop
 8005a9a:	3724      	adds	r7, #36	@ 0x24
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b095      	sub	sp, #84	@ 0x54
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	330c      	adds	r3, #12
 8005ab2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ab6:	e853 3f00 	ldrex	r3, [r3]
 8005aba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005abe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	330c      	adds	r3, #12
 8005aca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005acc:	643a      	str	r2, [r7, #64]	@ 0x40
 8005ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ad2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ad4:	e841 2300 	strex	r3, r2, [r1]
 8005ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1e5      	bne.n	8005aac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	3314      	adds	r3, #20
 8005ae6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae8:	6a3b      	ldr	r3, [r7, #32]
 8005aea:	e853 3f00 	ldrex	r3, [r3]
 8005aee:	61fb      	str	r3, [r7, #28]
   return(result);
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	f023 0301 	bic.w	r3, r3, #1
 8005af6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3314      	adds	r3, #20
 8005afe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b00:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b08:	e841 2300 	strex	r3, r2, [r1]
 8005b0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1e5      	bne.n	8005ae0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d119      	bne.n	8005b50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	330c      	adds	r3, #12
 8005b22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	e853 3f00 	ldrex	r3, [r3]
 8005b2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f023 0310 	bic.w	r3, r3, #16
 8005b32:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	330c      	adds	r3, #12
 8005b3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b3c:	61ba      	str	r2, [r7, #24]
 8005b3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b40:	6979      	ldr	r1, [r7, #20]
 8005b42:	69ba      	ldr	r2, [r7, #24]
 8005b44:	e841 2300 	strex	r3, r2, [r1]
 8005b48:	613b      	str	r3, [r7, #16]
   return(result);
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1e5      	bne.n	8005b1c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2220      	movs	r2, #32
 8005b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005b5e:	bf00      	nop
 8005b60:	3754      	adds	r7, #84	@ 0x54
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b084      	sub	sp, #16
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f7ff fe51 	bl	800582c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b8a:	bf00      	nop
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b085      	sub	sp, #20
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b21      	cmp	r3, #33	@ 0x21
 8005ba4:	d13e      	bne.n	8005c24 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bae:	d114      	bne.n	8005bda <UART_Transmit_IT+0x48>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d110      	bne.n	8005bda <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a1b      	ldr	r3, [r3, #32]
 8005bbc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bcc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	1c9a      	adds	r2, r3, #2
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	621a      	str	r2, [r3, #32]
 8005bd8:	e008      	b.n	8005bec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	1c59      	adds	r1, r3, #1
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	6211      	str	r1, [r2, #32]
 8005be4:	781a      	ldrb	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d10f      	bne.n	8005c20 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68da      	ldr	r2, [r3, #12]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c0e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68da      	ldr	r2, [r3, #12]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c1e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c20:	2300      	movs	r3, #0
 8005c22:	e000      	b.n	8005c26 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c24:	2302      	movs	r3, #2
  }
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3714      	adds	r7, #20
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b082      	sub	sp, #8
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68da      	ldr	r2, [r3, #12]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f7fa fd40 	bl	80006d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3708      	adds	r7, #8
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b08c      	sub	sp, #48	@ 0x30
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b22      	cmp	r3, #34	@ 0x22
 8005c74:	f040 80ae 	bne.w	8005dd4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c80:	d117      	bne.n	8005cb2 <UART_Receive_IT+0x50>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d113      	bne.n	8005cb2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c92:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005caa:	1c9a      	adds	r2, r3, #2
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	629a      	str	r2, [r3, #40]	@ 0x28
 8005cb0:	e026      	b.n	8005d00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cc4:	d007      	beq.n	8005cd6 <UART_Receive_IT+0x74>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10a      	bne.n	8005ce4 <UART_Receive_IT+0x82>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d106      	bne.n	8005ce4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ce0:	701a      	strb	r2, [r3, #0]
 8005ce2:	e008      	b.n	8005cf6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cf0:	b2da      	uxtb	r2, r3
 8005cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cf4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cfa:	1c5a      	adds	r2, r3, #1
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	3b01      	subs	r3, #1
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d15d      	bne.n	8005dd0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 0220 	bic.w	r2, r2, #32
 8005d22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68da      	ldr	r2, [r3, #12]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	695a      	ldr	r2, [r3, #20]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f022 0201 	bic.w	r2, r2, #1
 8005d42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2220      	movs	r2, #32
 8005d48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d135      	bne.n	8005dc6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	330c      	adds	r3, #12
 8005d66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	e853 3f00 	ldrex	r3, [r3]
 8005d6e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	f023 0310 	bic.w	r3, r3, #16
 8005d76:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	330c      	adds	r3, #12
 8005d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d80:	623a      	str	r2, [r7, #32]
 8005d82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d84:	69f9      	ldr	r1, [r7, #28]
 8005d86:	6a3a      	ldr	r2, [r7, #32]
 8005d88:	e841 2300 	strex	r3, r2, [r1]
 8005d8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1e5      	bne.n	8005d60 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0310 	and.w	r3, r3, #16
 8005d9e:	2b10      	cmp	r3, #16
 8005da0:	d10a      	bne.n	8005db8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005da2:	2300      	movs	r3, #0
 8005da4:	60fb      	str	r3, [r7, #12]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	60fb      	str	r3, [r7, #12]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	60fb      	str	r3, [r7, #12]
 8005db6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f7ff fd3e 	bl	8005840 <HAL_UARTEx_RxEventCallback>
 8005dc4:	e002      	b.n	8005dcc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7ff fd26 	bl	8005818 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	e002      	b.n	8005dd6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	e000      	b.n	8005dd6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005dd4:	2302      	movs	r3, #2
  }
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3730      	adds	r7, #48	@ 0x30
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
	...

08005de0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005de4:	b0c0      	sub	sp, #256	@ 0x100
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dfc:	68d9      	ldr	r1, [r3, #12]
 8005dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	ea40 0301 	orr.w	r3, r0, r1
 8005e08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e0e:	689a      	ldr	r2, [r3, #8]
 8005e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	431a      	orrs	r2, r3
 8005e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e24:	69db      	ldr	r3, [r3, #28]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005e38:	f021 010c 	bic.w	r1, r1, #12
 8005e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005e46:	430b      	orrs	r3, r1
 8005e48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e5a:	6999      	ldr	r1, [r3, #24]
 8005e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	ea40 0301 	orr.w	r3, r0, r1
 8005e66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	4b8f      	ldr	r3, [pc, #572]	@ (80060ac <UART_SetConfig+0x2cc>)
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d005      	beq.n	8005e80 <UART_SetConfig+0xa0>
 8005e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	4b8d      	ldr	r3, [pc, #564]	@ (80060b0 <UART_SetConfig+0x2d0>)
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d104      	bne.n	8005e8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e80:	f7fe fb3e 	bl	8004500 <HAL_RCC_GetPCLK2Freq>
 8005e84:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005e88:	e003      	b.n	8005e92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e8a:	f7fe fb25 	bl	80044d8 <HAL_RCC_GetPCLK1Freq>
 8005e8e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e96:	69db      	ldr	r3, [r3, #28]
 8005e98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e9c:	f040 810c 	bne.w	80060b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ea0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005eaa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005eae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005eb2:	4622      	mov	r2, r4
 8005eb4:	462b      	mov	r3, r5
 8005eb6:	1891      	adds	r1, r2, r2
 8005eb8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005eba:	415b      	adcs	r3, r3
 8005ebc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ebe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005ec2:	4621      	mov	r1, r4
 8005ec4:	eb12 0801 	adds.w	r8, r2, r1
 8005ec8:	4629      	mov	r1, r5
 8005eca:	eb43 0901 	adc.w	r9, r3, r1
 8005ece:	f04f 0200 	mov.w	r2, #0
 8005ed2:	f04f 0300 	mov.w	r3, #0
 8005ed6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005eda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ede:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ee2:	4690      	mov	r8, r2
 8005ee4:	4699      	mov	r9, r3
 8005ee6:	4623      	mov	r3, r4
 8005ee8:	eb18 0303 	adds.w	r3, r8, r3
 8005eec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ef0:	462b      	mov	r3, r5
 8005ef2:	eb49 0303 	adc.w	r3, r9, r3
 8005ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f06:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005f0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005f0e:	460b      	mov	r3, r1
 8005f10:	18db      	adds	r3, r3, r3
 8005f12:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f14:	4613      	mov	r3, r2
 8005f16:	eb42 0303 	adc.w	r3, r2, r3
 8005f1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005f20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005f24:	f7fa f9bc 	bl	80002a0 <__aeabi_uldivmod>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	4b61      	ldr	r3, [pc, #388]	@ (80060b4 <UART_SetConfig+0x2d4>)
 8005f2e:	fba3 2302 	umull	r2, r3, r3, r2
 8005f32:	095b      	lsrs	r3, r3, #5
 8005f34:	011c      	lsls	r4, r3, #4
 8005f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f40:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005f44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005f48:	4642      	mov	r2, r8
 8005f4a:	464b      	mov	r3, r9
 8005f4c:	1891      	adds	r1, r2, r2
 8005f4e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005f50:	415b      	adcs	r3, r3
 8005f52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005f58:	4641      	mov	r1, r8
 8005f5a:	eb12 0a01 	adds.w	sl, r2, r1
 8005f5e:	4649      	mov	r1, r9
 8005f60:	eb43 0b01 	adc.w	fp, r3, r1
 8005f64:	f04f 0200 	mov.w	r2, #0
 8005f68:	f04f 0300 	mov.w	r3, #0
 8005f6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f78:	4692      	mov	sl, r2
 8005f7a:	469b      	mov	fp, r3
 8005f7c:	4643      	mov	r3, r8
 8005f7e:	eb1a 0303 	adds.w	r3, sl, r3
 8005f82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f86:	464b      	mov	r3, r9
 8005f88:	eb4b 0303 	adc.w	r3, fp, r3
 8005f8c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f9c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005fa0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	18db      	adds	r3, r3, r3
 8005fa8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005faa:	4613      	mov	r3, r2
 8005fac:	eb42 0303 	adc.w	r3, r2, r3
 8005fb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005fb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005fba:	f7fa f971 	bl	80002a0 <__aeabi_uldivmod>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	4611      	mov	r1, r2
 8005fc4:	4b3b      	ldr	r3, [pc, #236]	@ (80060b4 <UART_SetConfig+0x2d4>)
 8005fc6:	fba3 2301 	umull	r2, r3, r3, r1
 8005fca:	095b      	lsrs	r3, r3, #5
 8005fcc:	2264      	movs	r2, #100	@ 0x64
 8005fce:	fb02 f303 	mul.w	r3, r2, r3
 8005fd2:	1acb      	subs	r3, r1, r3
 8005fd4:	00db      	lsls	r3, r3, #3
 8005fd6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005fda:	4b36      	ldr	r3, [pc, #216]	@ (80060b4 <UART_SetConfig+0x2d4>)
 8005fdc:	fba3 2302 	umull	r2, r3, r3, r2
 8005fe0:	095b      	lsrs	r3, r3, #5
 8005fe2:	005b      	lsls	r3, r3, #1
 8005fe4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005fe8:	441c      	add	r4, r3
 8005fea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ff4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005ff8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005ffc:	4642      	mov	r2, r8
 8005ffe:	464b      	mov	r3, r9
 8006000:	1891      	adds	r1, r2, r2
 8006002:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006004:	415b      	adcs	r3, r3
 8006006:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006008:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800600c:	4641      	mov	r1, r8
 800600e:	1851      	adds	r1, r2, r1
 8006010:	6339      	str	r1, [r7, #48]	@ 0x30
 8006012:	4649      	mov	r1, r9
 8006014:	414b      	adcs	r3, r1
 8006016:	637b      	str	r3, [r7, #52]	@ 0x34
 8006018:	f04f 0200 	mov.w	r2, #0
 800601c:	f04f 0300 	mov.w	r3, #0
 8006020:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006024:	4659      	mov	r1, fp
 8006026:	00cb      	lsls	r3, r1, #3
 8006028:	4651      	mov	r1, sl
 800602a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800602e:	4651      	mov	r1, sl
 8006030:	00ca      	lsls	r2, r1, #3
 8006032:	4610      	mov	r0, r2
 8006034:	4619      	mov	r1, r3
 8006036:	4603      	mov	r3, r0
 8006038:	4642      	mov	r2, r8
 800603a:	189b      	adds	r3, r3, r2
 800603c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006040:	464b      	mov	r3, r9
 8006042:	460a      	mov	r2, r1
 8006044:	eb42 0303 	adc.w	r3, r2, r3
 8006048:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800604c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006058:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800605c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006060:	460b      	mov	r3, r1
 8006062:	18db      	adds	r3, r3, r3
 8006064:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006066:	4613      	mov	r3, r2
 8006068:	eb42 0303 	adc.w	r3, r2, r3
 800606c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800606e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006072:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006076:	f7fa f913 	bl	80002a0 <__aeabi_uldivmod>
 800607a:	4602      	mov	r2, r0
 800607c:	460b      	mov	r3, r1
 800607e:	4b0d      	ldr	r3, [pc, #52]	@ (80060b4 <UART_SetConfig+0x2d4>)
 8006080:	fba3 1302 	umull	r1, r3, r3, r2
 8006084:	095b      	lsrs	r3, r3, #5
 8006086:	2164      	movs	r1, #100	@ 0x64
 8006088:	fb01 f303 	mul.w	r3, r1, r3
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	00db      	lsls	r3, r3, #3
 8006090:	3332      	adds	r3, #50	@ 0x32
 8006092:	4a08      	ldr	r2, [pc, #32]	@ (80060b4 <UART_SetConfig+0x2d4>)
 8006094:	fba2 2303 	umull	r2, r3, r2, r3
 8006098:	095b      	lsrs	r3, r3, #5
 800609a:	f003 0207 	and.w	r2, r3, #7
 800609e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4422      	add	r2, r4
 80060a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80060a8:	e106      	b.n	80062b8 <UART_SetConfig+0x4d8>
 80060aa:	bf00      	nop
 80060ac:	40011000 	.word	0x40011000
 80060b0:	40011400 	.word	0x40011400
 80060b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060bc:	2200      	movs	r2, #0
 80060be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80060c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80060c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80060ca:	4642      	mov	r2, r8
 80060cc:	464b      	mov	r3, r9
 80060ce:	1891      	adds	r1, r2, r2
 80060d0:	6239      	str	r1, [r7, #32]
 80060d2:	415b      	adcs	r3, r3
 80060d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80060d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060da:	4641      	mov	r1, r8
 80060dc:	1854      	adds	r4, r2, r1
 80060de:	4649      	mov	r1, r9
 80060e0:	eb43 0501 	adc.w	r5, r3, r1
 80060e4:	f04f 0200 	mov.w	r2, #0
 80060e8:	f04f 0300 	mov.w	r3, #0
 80060ec:	00eb      	lsls	r3, r5, #3
 80060ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060f2:	00e2      	lsls	r2, r4, #3
 80060f4:	4614      	mov	r4, r2
 80060f6:	461d      	mov	r5, r3
 80060f8:	4643      	mov	r3, r8
 80060fa:	18e3      	adds	r3, r4, r3
 80060fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006100:	464b      	mov	r3, r9
 8006102:	eb45 0303 	adc.w	r3, r5, r3
 8006106:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800610a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006116:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800611a:	f04f 0200 	mov.w	r2, #0
 800611e:	f04f 0300 	mov.w	r3, #0
 8006122:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006126:	4629      	mov	r1, r5
 8006128:	008b      	lsls	r3, r1, #2
 800612a:	4621      	mov	r1, r4
 800612c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006130:	4621      	mov	r1, r4
 8006132:	008a      	lsls	r2, r1, #2
 8006134:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006138:	f7fa f8b2 	bl	80002a0 <__aeabi_uldivmod>
 800613c:	4602      	mov	r2, r0
 800613e:	460b      	mov	r3, r1
 8006140:	4b60      	ldr	r3, [pc, #384]	@ (80062c4 <UART_SetConfig+0x4e4>)
 8006142:	fba3 2302 	umull	r2, r3, r3, r2
 8006146:	095b      	lsrs	r3, r3, #5
 8006148:	011c      	lsls	r4, r3, #4
 800614a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800614e:	2200      	movs	r2, #0
 8006150:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006154:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006158:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800615c:	4642      	mov	r2, r8
 800615e:	464b      	mov	r3, r9
 8006160:	1891      	adds	r1, r2, r2
 8006162:	61b9      	str	r1, [r7, #24]
 8006164:	415b      	adcs	r3, r3
 8006166:	61fb      	str	r3, [r7, #28]
 8006168:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800616c:	4641      	mov	r1, r8
 800616e:	1851      	adds	r1, r2, r1
 8006170:	6139      	str	r1, [r7, #16]
 8006172:	4649      	mov	r1, r9
 8006174:	414b      	adcs	r3, r1
 8006176:	617b      	str	r3, [r7, #20]
 8006178:	f04f 0200 	mov.w	r2, #0
 800617c:	f04f 0300 	mov.w	r3, #0
 8006180:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006184:	4659      	mov	r1, fp
 8006186:	00cb      	lsls	r3, r1, #3
 8006188:	4651      	mov	r1, sl
 800618a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800618e:	4651      	mov	r1, sl
 8006190:	00ca      	lsls	r2, r1, #3
 8006192:	4610      	mov	r0, r2
 8006194:	4619      	mov	r1, r3
 8006196:	4603      	mov	r3, r0
 8006198:	4642      	mov	r2, r8
 800619a:	189b      	adds	r3, r3, r2
 800619c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80061a0:	464b      	mov	r3, r9
 80061a2:	460a      	mov	r2, r1
 80061a4:	eb42 0303 	adc.w	r3, r2, r3
 80061a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80061ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80061b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80061b8:	f04f 0200 	mov.w	r2, #0
 80061bc:	f04f 0300 	mov.w	r3, #0
 80061c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80061c4:	4649      	mov	r1, r9
 80061c6:	008b      	lsls	r3, r1, #2
 80061c8:	4641      	mov	r1, r8
 80061ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061ce:	4641      	mov	r1, r8
 80061d0:	008a      	lsls	r2, r1, #2
 80061d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80061d6:	f7fa f863 	bl	80002a0 <__aeabi_uldivmod>
 80061da:	4602      	mov	r2, r0
 80061dc:	460b      	mov	r3, r1
 80061de:	4611      	mov	r1, r2
 80061e0:	4b38      	ldr	r3, [pc, #224]	@ (80062c4 <UART_SetConfig+0x4e4>)
 80061e2:	fba3 2301 	umull	r2, r3, r3, r1
 80061e6:	095b      	lsrs	r3, r3, #5
 80061e8:	2264      	movs	r2, #100	@ 0x64
 80061ea:	fb02 f303 	mul.w	r3, r2, r3
 80061ee:	1acb      	subs	r3, r1, r3
 80061f0:	011b      	lsls	r3, r3, #4
 80061f2:	3332      	adds	r3, #50	@ 0x32
 80061f4:	4a33      	ldr	r2, [pc, #204]	@ (80062c4 <UART_SetConfig+0x4e4>)
 80061f6:	fba2 2303 	umull	r2, r3, r2, r3
 80061fa:	095b      	lsrs	r3, r3, #5
 80061fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006200:	441c      	add	r4, r3
 8006202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006206:	2200      	movs	r2, #0
 8006208:	673b      	str	r3, [r7, #112]	@ 0x70
 800620a:	677a      	str	r2, [r7, #116]	@ 0x74
 800620c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006210:	4642      	mov	r2, r8
 8006212:	464b      	mov	r3, r9
 8006214:	1891      	adds	r1, r2, r2
 8006216:	60b9      	str	r1, [r7, #8]
 8006218:	415b      	adcs	r3, r3
 800621a:	60fb      	str	r3, [r7, #12]
 800621c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006220:	4641      	mov	r1, r8
 8006222:	1851      	adds	r1, r2, r1
 8006224:	6039      	str	r1, [r7, #0]
 8006226:	4649      	mov	r1, r9
 8006228:	414b      	adcs	r3, r1
 800622a:	607b      	str	r3, [r7, #4]
 800622c:	f04f 0200 	mov.w	r2, #0
 8006230:	f04f 0300 	mov.w	r3, #0
 8006234:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006238:	4659      	mov	r1, fp
 800623a:	00cb      	lsls	r3, r1, #3
 800623c:	4651      	mov	r1, sl
 800623e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006242:	4651      	mov	r1, sl
 8006244:	00ca      	lsls	r2, r1, #3
 8006246:	4610      	mov	r0, r2
 8006248:	4619      	mov	r1, r3
 800624a:	4603      	mov	r3, r0
 800624c:	4642      	mov	r2, r8
 800624e:	189b      	adds	r3, r3, r2
 8006250:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006252:	464b      	mov	r3, r9
 8006254:	460a      	mov	r2, r1
 8006256:	eb42 0303 	adc.w	r3, r2, r3
 800625a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800625c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	663b      	str	r3, [r7, #96]	@ 0x60
 8006266:	667a      	str	r2, [r7, #100]	@ 0x64
 8006268:	f04f 0200 	mov.w	r2, #0
 800626c:	f04f 0300 	mov.w	r3, #0
 8006270:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006274:	4649      	mov	r1, r9
 8006276:	008b      	lsls	r3, r1, #2
 8006278:	4641      	mov	r1, r8
 800627a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800627e:	4641      	mov	r1, r8
 8006280:	008a      	lsls	r2, r1, #2
 8006282:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006286:	f7fa f80b 	bl	80002a0 <__aeabi_uldivmod>
 800628a:	4602      	mov	r2, r0
 800628c:	460b      	mov	r3, r1
 800628e:	4b0d      	ldr	r3, [pc, #52]	@ (80062c4 <UART_SetConfig+0x4e4>)
 8006290:	fba3 1302 	umull	r1, r3, r3, r2
 8006294:	095b      	lsrs	r3, r3, #5
 8006296:	2164      	movs	r1, #100	@ 0x64
 8006298:	fb01 f303 	mul.w	r3, r1, r3
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	011b      	lsls	r3, r3, #4
 80062a0:	3332      	adds	r3, #50	@ 0x32
 80062a2:	4a08      	ldr	r2, [pc, #32]	@ (80062c4 <UART_SetConfig+0x4e4>)
 80062a4:	fba2 2303 	umull	r2, r3, r2, r3
 80062a8:	095b      	lsrs	r3, r3, #5
 80062aa:	f003 020f 	and.w	r2, r3, #15
 80062ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4422      	add	r2, r4
 80062b6:	609a      	str	r2, [r3, #8]
}
 80062b8:	bf00      	nop
 80062ba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80062be:	46bd      	mov	sp, r7
 80062c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062c4:	51eb851f 	.word	0x51eb851f

080062c8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80062c8:	b5b0      	push	{r4, r5, r7, lr}
 80062ca:	b08c      	sub	sp, #48	@ 0x30
 80062cc:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80062ce:	2100      	movs	r1, #0
 80062d0:	2000      	movs	r0, #0
 80062d2:	f003 fe39 	bl	8009f48 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80062d6:	4b1a      	ldr	r3, [pc, #104]	@ (8006340 <MX_LWIP_Init+0x78>)
 80062d8:	2200      	movs	r2, #0
 80062da:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80062dc:	4b19      	ldr	r3, [pc, #100]	@ (8006344 <MX_LWIP_Init+0x7c>)
 80062de:	2200      	movs	r2, #0
 80062e0:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80062e2:	4b19      	ldr	r3, [pc, #100]	@ (8006348 <MX_LWIP_Init+0x80>)
 80062e4:	2200      	movs	r2, #0
 80062e6:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80062e8:	4b18      	ldr	r3, [pc, #96]	@ (800634c <MX_LWIP_Init+0x84>)
 80062ea:	9302      	str	r3, [sp, #8]
 80062ec:	4b18      	ldr	r3, [pc, #96]	@ (8006350 <MX_LWIP_Init+0x88>)
 80062ee:	9301      	str	r3, [sp, #4]
 80062f0:	2300      	movs	r3, #0
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	4b14      	ldr	r3, [pc, #80]	@ (8006348 <MX_LWIP_Init+0x80>)
 80062f6:	4a13      	ldr	r2, [pc, #76]	@ (8006344 <MX_LWIP_Init+0x7c>)
 80062f8:	4911      	ldr	r1, [pc, #68]	@ (8006340 <MX_LWIP_Init+0x78>)
 80062fa:	4816      	ldr	r0, [pc, #88]	@ (8006354 <MX_LWIP_Init+0x8c>)
 80062fc:	f004 fc5e 	bl	800abbc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006300:	4814      	ldr	r0, [pc, #80]	@ (8006354 <MX_LWIP_Init+0x8c>)
 8006302:	f004 fe8d 	bl	800b020 <netif_set_default>

  /* Set the link callback function, this function is called on change of link status*/
  // netif_set_link_callback(&gnetif, ---);
  netif_set_status_callback(&gnetif, ethernet_link_status_updated);
 8006306:	4914      	ldr	r1, [pc, #80]	@ (8006358 <MX_LWIP_Init+0x90>)
 8006308:	4812      	ldr	r0, [pc, #72]	@ (8006354 <MX_LWIP_Init+0x8c>)
 800630a:	f004 ff65 	bl	800b1d8 <netif_set_status_callback>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800630e:	4811      	ldr	r0, [pc, #68]	@ (8006354 <MX_LWIP_Init+0x8c>)
 8006310:	f004 fe96 	bl	800b040 <netif_set_up>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8006314:	4b11      	ldr	r3, [pc, #68]	@ (800635c <MX_LWIP_Init+0x94>)
 8006316:	1d3c      	adds	r4, r7, #4
 8006318:	461d      	mov	r5, r3
 800631a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800631c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800631e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006322:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8006326:	1d3b      	adds	r3, r7, #4
 8006328:	490a      	ldr	r1, [pc, #40]	@ (8006354 <MX_LWIP_Init+0x8c>)
 800632a:	4618      	mov	r0, r3
 800632c:	f000 fd88 	bl	8006e40 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8006330:	4808      	ldr	r0, [pc, #32]	@ (8006354 <MX_LWIP_Init+0x8c>)
 8006332:	f00c fa13 	bl	801275c <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006336:	bf00      	nop
 8006338:	3720      	adds	r7, #32
 800633a:	46bd      	mov	sp, r7
 800633c:	bdb0      	pop	{r4, r5, r7, pc}
 800633e:	bf00      	nop
 8006340:	200008f0 	.word	0x200008f0
 8006344:	200008f4 	.word	0x200008f4
 8006348:	200008f8 	.word	0x200008f8
 800634c:	08009e85 	.word	0x08009e85
 8006350:	080068bd 	.word	0x080068bd
 8006354:	200008a8 	.word	0x200008a8
 8006358:	08006361 	.word	0x08006361
 800635c:	08018428 	.word	0x08018428

08006360 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b088      	sub	sp, #32
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b00      	cmp	r3, #0
 8006376:	d012      	beq.n	800639e <ethernet_link_status_updated+0x3e>
  {
/* USER CODE BEGIN 5 */
    uint8_t iptxt[20];
    sprintf((char *)iptxt, "%s", ip4addr_ntoa(netif_ip4_addr(netif)));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	3304      	adds	r3, #4
 800637c:	4618      	mov	r0, r3
 800637e:	f00f fcb1 	bl	8015ce4 <ip4addr_ntoa>
 8006382:	4602      	mov	r2, r0
 8006384:	f107 030c 	add.w	r3, r7, #12
 8006388:	4908      	ldr	r1, [pc, #32]	@ (80063ac <ethernet_link_status_updated+0x4c>)
 800638a:	4618      	mov	r0, r3
 800638c:	f010 fed4 	bl	8017138 <siprintf>
    printf("IP address: %s\r\n", iptxt);
 8006390:	f107 030c 	add.w	r3, r7, #12
 8006394:	4619      	mov	r1, r3
 8006396:	4806      	ldr	r0, [pc, #24]	@ (80063b0 <ethernet_link_status_updated+0x50>)
 8006398:	f010 fe5e 	bl	8017058 <iprintf>
  {
/* USER CODE BEGIN 6 */
    printf("The network cable is not connected \r\n");
/* USER CODE END 6 */
  }
}
 800639c:	e002      	b.n	80063a4 <ethernet_link_status_updated+0x44>
    printf("The network cable is not connected \r\n");
 800639e:	4805      	ldr	r0, [pc, #20]	@ (80063b4 <ethernet_link_status_updated+0x54>)
 80063a0:	f010 fec2 	bl	8017128 <puts>
}
 80063a4:	bf00      	nop
 80063a6:	3720      	adds	r7, #32
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	08018444 	.word	0x08018444
 80063b0:	08018448 	.word	0x08018448
 80063b4:	0801845c 	.word	0x0801845c

080063b8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80063c0:	4b04      	ldr	r3, [pc, #16]	@ (80063d4 <HAL_ETH_RxCpltCallback+0x1c>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4618      	mov	r0, r3
 80063c6:	f000 feb7 	bl	8007138 <osSemaphoreRelease>
}
 80063ca:	bf00      	nop
 80063cc:	3708      	adds	r7, #8
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	2000541c 	.word	0x2000541c

080063d8 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80063e0:	4b04      	ldr	r3, [pc, #16]	@ (80063f4 <HAL_ETH_TxCpltCallback+0x1c>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4618      	mov	r0, r3
 80063e6:	f000 fea7 	bl	8007138 <osSemaphoreRelease>
}
 80063ea:	bf00      	nop
 80063ec:	3708      	adds	r7, #8
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	20005420 	.word	0x20005420

080063f8 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f7fc fe07 	bl	8003014 <HAL_ETH_GetDMAError>
 8006406:	4603      	mov	r3, r0
 8006408:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800640c:	2b80      	cmp	r3, #128	@ 0x80
 800640e:	d104      	bne.n	800641a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8006410:	4b04      	ldr	r3, [pc, #16]	@ (8006424 <HAL_ETH_ErrorCallback+0x2c>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4618      	mov	r0, r3
 8006416:	f000 fe8f 	bl	8007138 <osSemaphoreRelease>
  }
}
 800641a:	bf00      	nop
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	2000541c 	.word	0x2000541c

08006428 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006428:	b5b0      	push	{r4, r5, r7, lr}
 800642a:	b0ac      	sub	sp, #176	@ 0xb0
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8006430:	2300      	movs	r3, #0
 8006432:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
  uint32_t duplex, speed = 0;
 8006436:	2300      	movs	r3, #0
 8006438:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  int32_t PHYLinkState = 0;
 800643c:	2300      	movs	r3, #0
 800643e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  ETH_MACConfigTypeDef MACConf = {0};
 8006442:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006446:	2264      	movs	r2, #100	@ 0x64
 8006448:	2100      	movs	r1, #0
 800644a:	4618      	mov	r0, r3
 800644c:	f010 ff96 	bl	801737c <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006450:	4b9c      	ldr	r3, [pc, #624]	@ (80066c4 <low_level_init+0x29c>)
 8006452:	4a9d      	ldr	r2, [pc, #628]	@ (80066c8 <low_level_init+0x2a0>)
 8006454:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8006456:	2300      	movs	r3, #0
 8006458:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  MACAddr[1] = 0x80;
 800645c:	2380      	movs	r3, #128	@ 0x80
 800645e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  MACAddr[2] = 0xE1;
 8006462:	23e1      	movs	r3, #225	@ 0xe1
 8006464:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  MACAddr[3] = 0x00;
 8006468:	2300      	movs	r3, #0
 800646a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  MACAddr[4] = 0x00;
 800646e:	2300      	movs	r3, #0
 8006470:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  MACAddr[5] = 0x00;
 8006474:	2300      	movs	r3, #0
 8006476:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  heth.Init.MACAddr = &MACAddr[0];
 800647a:	4a92      	ldr	r2, [pc, #584]	@ (80066c4 <low_level_init+0x29c>)
 800647c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006480:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8006482:	4b90      	ldr	r3, [pc, #576]	@ (80066c4 <low_level_init+0x29c>)
 8006484:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006488:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800648a:	4b8e      	ldr	r3, [pc, #568]	@ (80066c4 <low_level_init+0x29c>)
 800648c:	4a8f      	ldr	r2, [pc, #572]	@ (80066cc <low_level_init+0x2a4>)
 800648e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006490:	4b8c      	ldr	r3, [pc, #560]	@ (80066c4 <low_level_init+0x29c>)
 8006492:	4a8f      	ldr	r2, [pc, #572]	@ (80066d0 <low_level_init+0x2a8>)
 8006494:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8006496:	4b8b      	ldr	r3, [pc, #556]	@ (80066c4 <low_level_init+0x29c>)
 8006498:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800649c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800649e:	4889      	ldr	r0, [pc, #548]	@ (80066c4 <low_level_init+0x29c>)
 80064a0:	f7fb ff6e 	bl	8002380 <HAL_ETH_Init>
 80064a4:	4603      	mov	r3, r0
 80064a6:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80064aa:	2238      	movs	r2, #56	@ 0x38
 80064ac:	2100      	movs	r1, #0
 80064ae:	4889      	ldr	r0, [pc, #548]	@ (80066d4 <low_level_init+0x2ac>)
 80064b0:	f010 ff64 	bl	801737c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80064b4:	4b87      	ldr	r3, [pc, #540]	@ (80066d4 <low_level_init+0x2ac>)
 80064b6:	2221      	movs	r2, #33	@ 0x21
 80064b8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80064ba:	4b86      	ldr	r3, [pc, #536]	@ (80066d4 <low_level_init+0x2ac>)
 80064bc:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80064c0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80064c2:	4b84      	ldr	r3, [pc, #528]	@ (80066d4 <low_level_init+0x2ac>)
 80064c4:	2200      	movs	r2, #0
 80064c6:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80064c8:	4883      	ldr	r0, [pc, #524]	@ (80066d8 <low_level_init+0x2b0>)
 80064ca:	f004 fa31 	bl	800a930 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2206      	movs	r2, #6
 80064d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80064d6:	4b7b      	ldr	r3, [pc, #492]	@ (80066c4 <low_level_init+0x29c>)
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	781a      	ldrb	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80064e2:	4b78      	ldr	r3, [pc, #480]	@ (80066c4 <low_level_init+0x29c>)
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	785a      	ldrb	r2, [r3, #1]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80064ee:	4b75      	ldr	r3, [pc, #468]	@ (80066c4 <low_level_init+0x29c>)
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	789a      	ldrb	r2, [r3, #2]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80064fa:	4b72      	ldr	r3, [pc, #456]	@ (80066c4 <low_level_init+0x29c>)
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	78da      	ldrb	r2, [r3, #3]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006506:	4b6f      	ldr	r3, [pc, #444]	@ (80066c4 <low_level_init+0x29c>)
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	791a      	ldrb	r2, [r3, #4]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006512:	4b6c      	ldr	r3, [pc, #432]	@ (80066c4 <low_level_init+0x29c>)
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	795a      	ldrb	r2, [r3, #5]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8006524:	869a      	strh	r2, [r3, #52]	@ 0x34

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800652c:	f043 030a 	orr.w	r3, r3, #10
 8006530:	b2da      	uxtb	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 8006538:	2300      	movs	r3, #0
 800653a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800653c:	2300      	movs	r3, #0
 800653e:	633b      	str	r3, [r7, #48]	@ 0x30
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8006540:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006544:	2101      	movs	r1, #1
 8006546:	4618      	mov	r0, r3
 8006548:	f000 fd76 	bl	8007038 <osSemaphoreCreate>
 800654c:	4603      	mov	r3, r0
 800654e:	4a63      	ldr	r2, [pc, #396]	@ (80066dc <low_level_init+0x2b4>)
 8006550:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 8006552:	2300      	movs	r3, #0
 8006554:	627b      	str	r3, [r7, #36]	@ 0x24
 8006556:	2300      	movs	r3, #0
 8006558:	62bb      	str	r3, [r7, #40]	@ 0x28
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 800655a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800655e:	2101      	movs	r1, #1
 8006560:	4618      	mov	r0, r3
 8006562:	f000 fd69 	bl	8007038 <osSemaphoreCreate>
 8006566:	4603      	mov	r3, r0
 8006568:	4a5d      	ldr	r2, [pc, #372]	@ (80066e0 <low_level_init+0x2b8>)
 800656a:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 800656c:	4b5b      	ldr	r3, [pc, #364]	@ (80066dc <low_level_init+0x2b4>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2100      	movs	r1, #0
 8006572:	4618      	mov	r0, r3
 8006574:	f000 fd92 	bl	800709c <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 8006578:	4b59      	ldr	r3, [pc, #356]	@ (80066e0 <low_level_init+0x2b8>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2100      	movs	r1, #0
 800657e:	4618      	mov	r0, r3
 8006580:	f000 fd8c 	bl	800709c <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8006584:	4b57      	ldr	r3, [pc, #348]	@ (80066e4 <low_level_init+0x2bc>)
 8006586:	f107 0408 	add.w	r4, r7, #8
 800658a:	461d      	mov	r5, r3
 800658c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800658e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006590:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006594:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8006598:	f107 0308 	add.w	r3, r7, #8
 800659c:	6879      	ldr	r1, [r7, #4]
 800659e:	4618      	mov	r0, r3
 80065a0:	f000 fc4e 	bl	8006e40 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80065a4:	4950      	ldr	r1, [pc, #320]	@ (80066e8 <low_level_init+0x2c0>)
 80065a6:	4851      	ldr	r0, [pc, #324]	@ (80066ec <low_level_init+0x2c4>)
 80065a8:	f7fb f823 	bl	80015f2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 80065ac:	484f      	ldr	r0, [pc, #316]	@ (80066ec <low_level_init+0x2c4>)
 80065ae:	f7fb f852 	bl	8001656 <LAN8742_Init>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d006      	beq.n	80065c6 <low_level_init+0x19e>
  {
    netif_set_link_down(netif);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f004 fe5f 	bl	800b27c <netif_set_link_down>
    netif_set_down(netif);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f004 fdc6 	bl	800b150 <netif_set_down>
 80065c4:	e07a      	b.n	80066bc <low_level_init+0x294>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 80065c6:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d174      	bne.n	80066b8 <low_level_init+0x290>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80065ce:	4847      	ldr	r0, [pc, #284]	@ (80066ec <low_level_init+0x2c4>)
 80065d0:	f7fb f8e9 	bl	80017a6 <LAN8742_GetLinkState>
 80065d4:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80065d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80065dc:	2b01      	cmp	r3, #1
 80065de:	dc06      	bgt.n	80065ee <low_level_init+0x1c6>
    {
      netif_set_link_down(netif);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f004 fe4b 	bl	800b27c <netif_set_link_down>
      netif_set_down(netif);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f004 fdb2 	bl	800b150 <netif_set_down>
 80065ec:	e066      	b.n	80066bc <low_level_init+0x294>
    }
    else
    {
      switch (PHYLinkState)
 80065ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80065f2:	3b02      	subs	r3, #2
 80065f4:	2b03      	cmp	r3, #3
 80065f6:	d837      	bhi.n	8006668 <low_level_init+0x240>
 80065f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006600 <low_level_init+0x1d8>)
 80065fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fe:	bf00      	nop
 8006600:	08006611 	.word	0x08006611
 8006604:	08006629 	.word	0x08006629
 8006608:	0800663f 	.word	0x0800663f
 800660c:	08006655 	.word	0x08006655
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8006610:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006614:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 8006618:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800661c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        printf("ETH 100 MBITS FULL DUPLEX\r\n");
 8006620:	4833      	ldr	r0, [pc, #204]	@ (80066f0 <low_level_init+0x2c8>)
 8006622:	f010 fd81 	bl	8017128 <puts>
        break;
 8006626:	e02b      	b.n	8006680 <low_level_init+0x258>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8006628:	2300      	movs	r3, #0
 800662a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 800662e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006632:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        printf("ETH 100 MBITS HALF DUPLEX\r\n");
 8006636:	482f      	ldr	r0, [pc, #188]	@ (80066f4 <low_level_init+0x2cc>)
 8006638:	f010 fd76 	bl	8017128 <puts>
        break;
 800663c:	e020      	b.n	8006680 <low_level_init+0x258>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800663e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006642:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_10M;
 8006646:	2300      	movs	r3, #0
 8006648:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        printf("ETH 10 MBITS FULL DUPLEX\r\n");
 800664c:	482a      	ldr	r0, [pc, #168]	@ (80066f8 <low_level_init+0x2d0>)
 800664e:	f010 fd6b 	bl	8017128 <puts>
        break;
 8006652:	e015      	b.n	8006680 <low_level_init+0x258>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8006654:	2300      	movs	r3, #0
 8006656:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_10M;
 800665a:	2300      	movs	r3, #0
 800665c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        printf("ETH 10 MBITS HALF DUPLEX\r\n");
 8006660:	4826      	ldr	r0, [pc, #152]	@ (80066fc <low_level_init+0x2d4>)
 8006662:	f010 fd61 	bl	8017128 <puts>
        break;
 8006666:	e00b      	b.n	8006680 <low_level_init+0x258>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8006668:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800666c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 8006670:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006674:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        printf("ETH 100 MBITS FULL DUPLEX\r\n");
 8006678:	481d      	ldr	r0, [pc, #116]	@ (80066f0 <low_level_init+0x2c8>)
 800667a:	f010 fd55 	bl	8017128 <puts>
        break;
 800667e:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006680:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006684:	4619      	mov	r1, r3
 8006686:	480f      	ldr	r0, [pc, #60]	@ (80066c4 <low_level_init+0x29c>)
 8006688:	f7fc fb6a 	bl	8002d60 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800668c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006690:	657b      	str	r3, [r7, #84]	@ 0x54
    MACConf.Speed = speed;
 8006692:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006696:	653b      	str	r3, [r7, #80]	@ 0x50
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006698:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800669c:	4619      	mov	r1, r3
 800669e:	4809      	ldr	r0, [pc, #36]	@ (80066c4 <low_level_init+0x29c>)
 80066a0:	f7fc fc48 	bl	8002f34 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 80066a4:	4807      	ldr	r0, [pc, #28]	@ (80066c4 <low_level_init+0x29c>)
 80066a6:	f7fb fee9 	bl	800247c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f004 fcc8 	bl	800b040 <netif_set_up>
    netif_set_link_up(netif);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f004 fda3 	bl	800b1fc <netif_set_link_up>
 80066b6:	e001      	b.n	80066bc <low_level_init+0x294>
    }

  }
  else
  {
    Error_Handler();
 80066b8:	f7fa fc4a 	bl	8000f50 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80066bc:	37b0      	adds	r7, #176	@ 0xb0
 80066be:	46bd      	mov	sp, r7
 80066c0:	bdb0      	pop	{r4, r5, r7, pc}
 80066c2:	bf00      	nop
 80066c4:	20005424 	.word	0x20005424
 80066c8:	40028000 	.word	0x40028000
 80066cc:	2000537c 	.word	0x2000537c
 80066d0:	200052dc 	.word	0x200052dc
 80066d4:	200054d4 	.word	0x200054d4
 80066d8:	0801b790 	.word	0x0801b790
 80066dc:	2000541c 	.word	0x2000541c
 80066e0:	20005420 	.word	0x20005420
 80066e4:	080184fc 	.word	0x080184fc
 80066e8:	20000010 	.word	0x20000010
 80066ec:	2000550c 	.word	0x2000550c
 80066f0:	08018484 	.word	0x08018484
 80066f4:	080184a0 	.word	0x080184a0
 80066f8:	080184bc 	.word	0x080184bc
 80066fc:	080184d8 	.word	0x080184d8

08006700 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b092      	sub	sp, #72	@ 0x48
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800670a:	2300      	movs	r3, #0
 800670c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800670e:	2300      	movs	r3, #0
 8006710:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8006712:	2300      	movs	r3, #0
 8006714:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8006718:	f107 030c 	add.w	r3, r7, #12
 800671c:	2230      	movs	r2, #48	@ 0x30
 800671e:	2100      	movs	r1, #0
 8006720:	4618      	mov	r0, r3
 8006722:	f010 fe2b 	bl	801737c <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8006726:	f107 030c 	add.w	r3, r7, #12
 800672a:	2230      	movs	r2, #48	@ 0x30
 800672c:	2100      	movs	r1, #0
 800672e:	4618      	mov	r0, r3
 8006730:	f010 fe24 	bl	801737c <memset>

  for(q = p; q != NULL; q = q->next)
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	643b      	str	r3, [r7, #64]	@ 0x40
 8006738:	e045      	b.n	80067c6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800673a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800673c:	2b03      	cmp	r3, #3
 800673e:	d902      	bls.n	8006746 <low_level_output+0x46>
      return ERR_IF;
 8006740:	f06f 030b 	mvn.w	r3, #11
 8006744:	e06c      	b.n	8006820 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 8006746:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006748:	6859      	ldr	r1, [r3, #4]
 800674a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800674c:	4613      	mov	r3, r2
 800674e:	005b      	lsls	r3, r3, #1
 8006750:	4413      	add	r3, r2
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	3348      	adds	r3, #72	@ 0x48
 8006756:	443b      	add	r3, r7
 8006758:	3b3c      	subs	r3, #60	@ 0x3c
 800675a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800675c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800675e:	895b      	ldrh	r3, [r3, #10]
 8006760:	4619      	mov	r1, r3
 8006762:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006764:	4613      	mov	r3, r2
 8006766:	005b      	lsls	r3, r3, #1
 8006768:	4413      	add	r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	3348      	adds	r3, #72	@ 0x48
 800676e:	443b      	add	r3, r7
 8006770:	3b38      	subs	r3, #56	@ 0x38
 8006772:	6019      	str	r1, [r3, #0]

    if(i>0)
 8006774:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006776:	2b00      	cmp	r3, #0
 8006778:	d011      	beq.n	800679e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800677a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800677c:	1e5a      	subs	r2, r3, #1
 800677e:	f107 000c 	add.w	r0, r7, #12
 8006782:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006784:	460b      	mov	r3, r1
 8006786:	005b      	lsls	r3, r3, #1
 8006788:	440b      	add	r3, r1
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	18c1      	adds	r1, r0, r3
 800678e:	4613      	mov	r3, r2
 8006790:	005b      	lsls	r3, r3, #1
 8006792:	4413      	add	r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	3348      	adds	r3, #72	@ 0x48
 8006798:	443b      	add	r3, r7
 800679a:	3b34      	subs	r3, #52	@ 0x34
 800679c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800679e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d109      	bne.n	80067ba <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80067a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067a8:	4613      	mov	r3, r2
 80067aa:	005b      	lsls	r3, r3, #1
 80067ac:	4413      	add	r3, r2
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	3348      	adds	r3, #72	@ 0x48
 80067b2:	443b      	add	r3, r7
 80067b4:	3b34      	subs	r3, #52	@ 0x34
 80067b6:	2200      	movs	r2, #0
 80067b8:	601a      	str	r2, [r3, #0]
    }

    i++;
 80067ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067bc:	3301      	adds	r3, #1
 80067be:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 80067c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80067c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1b6      	bne.n	800673a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	891b      	ldrh	r3, [r3, #8]
 80067d0:	461a      	mov	r2, r3
 80067d2:	4b15      	ldr	r3, [pc, #84]	@ (8006828 <low_level_output+0x128>)
 80067d4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80067d6:	4a14      	ldr	r2, [pc, #80]	@ (8006828 <low_level_output+0x128>)
 80067d8:	f107 030c 	add.w	r3, r7, #12
 80067dc:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80067de:	4a12      	ldr	r2, [pc, #72]	@ (8006828 <low_level_output+0x128>)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 80067e4:	6838      	ldr	r0, [r7, #0]
 80067e6:	f005 f9f3 	bl	800bbd0 <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 80067ea:	490f      	ldr	r1, [pc, #60]	@ (8006828 <low_level_output+0x128>)
 80067ec:	480f      	ldr	r0, [pc, #60]	@ (800682c <low_level_output+0x12c>)
 80067ee:	f7fb ff52 	bl	8002696 <HAL_ETH_Transmit_IT>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10e      	bne.n	8006816 <low_level_output+0x116>
    while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 80067f8:	bf00      	nop
 80067fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006830 <low_level_output+0x130>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f04f 31ff 	mov.w	r1, #4294967295
 8006802:	4618      	mov	r0, r3
 8006804:	f000 fc4a 	bl	800709c <osSemaphoreWait>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1f5      	bne.n	80067fa <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 800680e:	4807      	ldr	r0, [pc, #28]	@ (800682c <low_level_output+0x12c>)
 8006810:	f7fc f8e0 	bl	80029d4 <HAL_ETH_ReleaseTxPacket>
 8006814:	e002      	b.n	800681c <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 8006816:	6838      	ldr	r0, [r7, #0]
 8006818:	f005 f934 	bl	800ba84 <pbuf_free>
  }

  return errval;
 800681c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8006820:	4618      	mov	r0, r3
 8006822:	3748      	adds	r7, #72	@ 0x48
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	200054d4 	.word	0x200054d4
 800682c:	20005424 	.word	0x20005424
 8006830:	20005420 	.word	0x20005420

08006834 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800683c:	2300      	movs	r3, #0
 800683e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8006840:	4b07      	ldr	r3, [pc, #28]	@ (8006860 <low_level_input+0x2c>)
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d105      	bne.n	8006854 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8006848:	f107 030c 	add.w	r3, r7, #12
 800684c:	4619      	mov	r1, r3
 800684e:	4805      	ldr	r0, [pc, #20]	@ (8006864 <low_level_input+0x30>)
 8006850:	f7fb ff7d 	bl	800274e <HAL_ETH_ReadData>
  }

  return p;
 8006854:	68fb      	ldr	r3, [r7, #12]
}
 8006856:	4618      	mov	r0, r3
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	200052d8 	.word	0x200052d8
 8006864:	20005424 	.word	0x20005424

08006868 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006870:	2300      	movs	r3, #0
 8006872:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006878:	4b0f      	ldr	r3, [pc, #60]	@ (80068b8 <ethernetif_input+0x50>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f04f 31ff 	mov.w	r1, #4294967295
 8006880:	4618      	mov	r0, r3
 8006882:	f000 fc0b 	bl	800709c <osSemaphoreWait>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d1f5      	bne.n	8006878 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800688c:	68b8      	ldr	r0, [r7, #8]
 800688e:	f7ff ffd1 	bl	8006834 <low_level_input>
 8006892:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00a      	beq.n	80068b0 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	68b9      	ldr	r1, [r7, #8]
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	4798      	blx	r3
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d002      	beq.n	80068b0 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f005 f8ea 	bl	800ba84 <pbuf_free>
          }
        }
      } while(p!=NULL);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1ea      	bne.n	800688c <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80068b6:	e7df      	b.n	8006878 <ethernetif_input+0x10>
 80068b8:	2000541c 	.word	0x2000541c

080068bc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d106      	bne.n	80068d8 <ethernetif_init+0x1c>
 80068ca:	4b10      	ldr	r3, [pc, #64]	@ (800690c <ethernetif_init+0x50>)
 80068cc:	f44f 72f9 	mov.w	r2, #498	@ 0x1f2
 80068d0:	490f      	ldr	r1, [pc, #60]	@ (8006910 <ethernetif_init+0x54>)
 80068d2:	4810      	ldr	r0, [pc, #64]	@ (8006914 <ethernetif_init+0x58>)
 80068d4:	f010 fbc0 	bl	8017058 <iprintf>

#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a0f      	ldr	r2, [pc, #60]	@ (8006918 <ethernetif_init+0x5c>)
 80068dc:	631a      	str	r2, [r3, #48]	@ 0x30
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2273      	movs	r2, #115	@ 0x73
 80068e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  netif->name[1] = IFNAME1;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2274      	movs	r2, #116	@ 0x74
 80068ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a0a      	ldr	r2, [pc, #40]	@ (800691c <ethernetif_init+0x60>)
 80068f2:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a0a      	ldr	r2, [pc, #40]	@ (8006920 <ethernetif_init+0x64>)
 80068f8:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7ff fd94 	bl	8006428 <low_level_init>

  return ERR_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3708      	adds	r7, #8
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	08018518 	.word	0x08018518
 8006910:	08018534 	.word	0x08018534
 8006914:	08018544 	.word	0x08018544
 8006918:	0801856c 	.word	0x0801856c
 800691c:	08014711 	.word	0x08014711
 8006920:	08006701 	.word	0x08006701

08006924 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8006930:	68f9      	ldr	r1, [r7, #12]
 8006932:	4809      	ldr	r0, [pc, #36]	@ (8006958 <pbuf_free_custom+0x34>)
 8006934:	f004 f8ec 	bl	800ab10 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8006938:	4b08      	ldr	r3, [pc, #32]	@ (800695c <pbuf_free_custom+0x38>)
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d107      	bne.n	8006950 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8006940:	4b06      	ldr	r3, [pc, #24]	@ (800695c <pbuf_free_custom+0x38>)
 8006942:	2200      	movs	r2, #0
 8006944:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8006946:	4b06      	ldr	r3, [pc, #24]	@ (8006960 <pbuf_free_custom+0x3c>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4618      	mov	r0, r3
 800694c:	f000 fbf4 	bl	8007138 <osSemaphoreRelease>
  }
}
 8006950:	bf00      	nop
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	0801b790 	.word	0x0801b790
 800695c:	200052d8 	.word	0x200052d8
 8006960:	2000541c 	.word	0x2000541c

08006964 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006968:	f7fa ffda 	bl	8001920 <HAL_GetTick>
 800696c:	4603      	mov	r3, r0
}
 800696e:	4618      	mov	r0, r3
 8006970:	bd80      	pop	{r7, pc}
	...

08006974 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b08e      	sub	sp, #56	@ 0x38
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800697c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006980:	2200      	movs	r2, #0
 8006982:	601a      	str	r2, [r3, #0]
 8006984:	605a      	str	r2, [r3, #4]
 8006986:	609a      	str	r2, [r3, #8]
 8006988:	60da      	str	r2, [r3, #12]
 800698a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a59      	ldr	r2, [pc, #356]	@ (8006af8 <HAL_ETH_MspInit+0x184>)
 8006992:	4293      	cmp	r3, r2
 8006994:	f040 80ac 	bne.w	8006af0 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006998:	2300      	movs	r3, #0
 800699a:	623b      	str	r3, [r7, #32]
 800699c:	4b57      	ldr	r3, [pc, #348]	@ (8006afc <HAL_ETH_MspInit+0x188>)
 800699e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069a0:	4a56      	ldr	r2, [pc, #344]	@ (8006afc <HAL_ETH_MspInit+0x188>)
 80069a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80069a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80069a8:	4b54      	ldr	r3, [pc, #336]	@ (8006afc <HAL_ETH_MspInit+0x188>)
 80069aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069b0:	623b      	str	r3, [r7, #32]
 80069b2:	6a3b      	ldr	r3, [r7, #32]
 80069b4:	2300      	movs	r3, #0
 80069b6:	61fb      	str	r3, [r7, #28]
 80069b8:	4b50      	ldr	r3, [pc, #320]	@ (8006afc <HAL_ETH_MspInit+0x188>)
 80069ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069bc:	4a4f      	ldr	r2, [pc, #316]	@ (8006afc <HAL_ETH_MspInit+0x188>)
 80069be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80069c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80069c4:	4b4d      	ldr	r3, [pc, #308]	@ (8006afc <HAL_ETH_MspInit+0x188>)
 80069c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80069cc:	61fb      	str	r3, [r7, #28]
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	2300      	movs	r3, #0
 80069d2:	61bb      	str	r3, [r7, #24]
 80069d4:	4b49      	ldr	r3, [pc, #292]	@ (8006afc <HAL_ETH_MspInit+0x188>)
 80069d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069d8:	4a48      	ldr	r2, [pc, #288]	@ (8006afc <HAL_ETH_MspInit+0x188>)
 80069da:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80069de:	6313      	str	r3, [r2, #48]	@ 0x30
 80069e0:	4b46      	ldr	r3, [pc, #280]	@ (8006afc <HAL_ETH_MspInit+0x188>)
 80069e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069e8:	61bb      	str	r3, [r7, #24]
 80069ea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80069ec:	2300      	movs	r3, #0
 80069ee:	617b      	str	r3, [r7, #20]
 80069f0:	4b42      	ldr	r3, [pc, #264]	@ (8006afc <HAL_ETH_MspInit+0x188>)
 80069f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069f4:	4a41      	ldr	r2, [pc, #260]	@ (8006afc <HAL_ETH_MspInit+0x188>)
 80069f6:	f043 0304 	orr.w	r3, r3, #4
 80069fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80069fc:	4b3f      	ldr	r3, [pc, #252]	@ (8006afc <HAL_ETH_MspInit+0x188>)
 80069fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a00:	f003 0304 	and.w	r3, r3, #4
 8006a04:	617b      	str	r3, [r7, #20]
 8006a06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a08:	2300      	movs	r3, #0
 8006a0a:	613b      	str	r3, [r7, #16]
 8006a0c:	4b3b      	ldr	r3, [pc, #236]	@ (8006afc <HAL_ETH_MspInit+0x188>)
 8006a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a10:	4a3a      	ldr	r2, [pc, #232]	@ (8006afc <HAL_ETH_MspInit+0x188>)
 8006a12:	f043 0301 	orr.w	r3, r3, #1
 8006a16:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a18:	4b38      	ldr	r3, [pc, #224]	@ (8006afc <HAL_ETH_MspInit+0x188>)
 8006a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a1c:	f003 0301 	and.w	r3, r3, #1
 8006a20:	613b      	str	r3, [r7, #16]
 8006a22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a24:	2300      	movs	r3, #0
 8006a26:	60fb      	str	r3, [r7, #12]
 8006a28:	4b34      	ldr	r3, [pc, #208]	@ (8006afc <HAL_ETH_MspInit+0x188>)
 8006a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a2c:	4a33      	ldr	r2, [pc, #204]	@ (8006afc <HAL_ETH_MspInit+0x188>)
 8006a2e:	f043 0302 	orr.w	r3, r3, #2
 8006a32:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a34:	4b31      	ldr	r3, [pc, #196]	@ (8006afc <HAL_ETH_MspInit+0x188>)
 8006a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a38:	f003 0302 	and.w	r3, r3, #2
 8006a3c:	60fb      	str	r3, [r7, #12]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006a40:	2300      	movs	r3, #0
 8006a42:	60bb      	str	r3, [r7, #8]
 8006a44:	4b2d      	ldr	r3, [pc, #180]	@ (8006afc <HAL_ETH_MspInit+0x188>)
 8006a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a48:	4a2c      	ldr	r2, [pc, #176]	@ (8006afc <HAL_ETH_MspInit+0x188>)
 8006a4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a50:	4b2a      	ldr	r3, [pc, #168]	@ (8006afc <HAL_ETH_MspInit+0x188>)
 8006a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a58:	60bb      	str	r3, [r7, #8]
 8006a5a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006a5c:	2332      	movs	r3, #50	@ 0x32
 8006a5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a60:	2302      	movs	r3, #2
 8006a62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a64:	2300      	movs	r3, #0
 8006a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006a6c:	230b      	movs	r3, #11
 8006a6e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a74:	4619      	mov	r1, r3
 8006a76:	4822      	ldr	r0, [pc, #136]	@ (8006b00 <HAL_ETH_MspInit+0x18c>)
 8006a78:	f7fc fede 	bl	8003838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006a7c:	2386      	movs	r3, #134	@ 0x86
 8006a7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a80:	2302      	movs	r3, #2
 8006a82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a84:	2300      	movs	r3, #0
 8006a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006a8c:	230b      	movs	r3, #11
 8006a8e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a94:	4619      	mov	r1, r3
 8006a96:	481b      	ldr	r0, [pc, #108]	@ (8006b04 <HAL_ETH_MspInit+0x190>)
 8006a98:	f7fc fece 	bl	8003838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006a9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006aa0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006aa2:	2302      	movs	r3, #2
 8006aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006aae:	230b      	movs	r3, #11
 8006ab0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006ab2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	4813      	ldr	r0, [pc, #76]	@ (8006b08 <HAL_ETH_MspInit+0x194>)
 8006aba:	f7fc febd 	bl	8003838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006abe:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8006ac2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ac4:	2302      	movs	r3, #2
 8006ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006acc:	2303      	movs	r3, #3
 8006ace:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006ad0:	230b      	movs	r3, #11
 8006ad2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006ad4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ad8:	4619      	mov	r1, r3
 8006ada:	480c      	ldr	r0, [pc, #48]	@ (8006b0c <HAL_ETH_MspInit+0x198>)
 8006adc:	f7fc feac 	bl	8003838 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	2105      	movs	r1, #5
 8006ae4:	203d      	movs	r0, #61	@ 0x3d
 8006ae6:	f7fb f803 	bl	8001af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006aea:	203d      	movs	r0, #61	@ 0x3d
 8006aec:	f7fb f81c 	bl	8001b28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006af0:	bf00      	nop
 8006af2:	3738      	adds	r7, #56	@ 0x38
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	40028000 	.word	0x40028000
 8006afc:	40023800 	.word	0x40023800
 8006b00:	40020800 	.word	0x40020800
 8006b04:	40020000 	.word	0x40020000
 8006b08:	40020400 	.word	0x40020400
 8006b0c:	40021800 	.word	0x40021800

08006b10 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006b14:	4802      	ldr	r0, [pc, #8]	@ (8006b20 <ETH_PHY_IO_Init+0x10>)
 8006b16:	f7fc fa27 	bl	8002f68 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	20005424 	.word	0x20005424

08006b24 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006b24:	b480      	push	{r7}
 8006b26:	af00      	add	r7, sp, #0
  return 0;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	68ba      	ldr	r2, [r7, #8]
 8006b44:	68f9      	ldr	r1, [r7, #12]
 8006b46:	4807      	ldr	r0, [pc, #28]	@ (8006b64 <ETH_PHY_IO_ReadReg+0x30>)
 8006b48:	f7fc f876 	bl	8002c38 <HAL_ETH_ReadPHYRegister>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d002      	beq.n	8006b58 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8006b52:	f04f 33ff 	mov.w	r3, #4294967295
 8006b56:	e000      	b.n	8006b5a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	20005424 	.word	0x20005424

08006b68 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	68ba      	ldr	r2, [r7, #8]
 8006b78:	68f9      	ldr	r1, [r7, #12]
 8006b7a:	4807      	ldr	r0, [pc, #28]	@ (8006b98 <ETH_PHY_IO_WriteReg+0x30>)
 8006b7c:	f7fc f8a7 	bl	8002cce <HAL_ETH_WritePHYRegister>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d002      	beq.n	8006b8c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8006b86:	f04f 33ff 	mov.w	r3, #4294967295
 8006b8a:	e000      	b.n	8006b8e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	20005424 	.word	0x20005424

08006b9c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006ba0:	f7fa febe 	bl	8001920 <HAL_GetTick>
 8006ba4:	4603      	mov	r3, r0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	bd80      	pop	{r7, pc}
	...

08006bac <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b0a0      	sub	sp, #128	@ 0x80
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006bb4:	f107 0308 	add.w	r3, r7, #8
 8006bb8:	2264      	movs	r2, #100	@ 0x64
 8006bba:	2100      	movs	r1, #0
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f010 fbdd 	bl	801737c <memset>
  int32_t PHYLinkState = 0;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006bca:	2300      	movs	r3, #0
 8006bcc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006bce:	2300      	movs	r3, #0
 8006bd0:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006bd6:	483a      	ldr	r0, [pc, #232]	@ (8006cc0 <ethernet_link_thread+0x114>)
 8006bd8:	f7fa fde5 	bl	80017a6 <LAN8742_GetLinkState>
 8006bdc:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8006bde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006be0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006be4:	089b      	lsrs	r3, r3, #2
 8006be6:	f003 0301 	and.w	r3, r3, #1
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00c      	beq.n	8006c0a <ethernet_link_thread+0x5e>
 8006bf0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	dc09      	bgt.n	8006c0a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8006bf6:	4833      	ldr	r0, [pc, #204]	@ (8006cc4 <ethernet_link_thread+0x118>)
 8006bf8:	f7fb fcce 	bl	8002598 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8006bfc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006bfe:	f004 faa7 	bl	800b150 <netif_set_down>
    netif_set_link_down(netif);
 8006c02:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006c04:	f004 fb3a 	bl	800b27c <netif_set_link_down>
 8006c08:	e055      	b.n	8006cb6 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8006c0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c10:	f003 0304 	and.w	r3, r3, #4
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d14e      	bne.n	8006cb6 <ethernet_link_thread+0x10a>
 8006c18:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	dd4b      	ble.n	8006cb6 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8006c1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c20:	3b02      	subs	r3, #2
 8006c22:	2b03      	cmp	r3, #3
 8006c24:	d82a      	bhi.n	8006c7c <ethernet_link_thread+0xd0>
 8006c26:	a201      	add	r2, pc, #4	@ (adr r2, 8006c2c <ethernet_link_thread+0x80>)
 8006c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2c:	08006c3d 	.word	0x08006c3d
 8006c30:	08006c4f 	.word	0x08006c4f
 8006c34:	08006c5f 	.word	0x08006c5f
 8006c38:	08006c6f 	.word	0x08006c6f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8006c3c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006c40:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8006c42:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006c46:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006c4c:	e017      	b.n	8006c7e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8006c52:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006c56:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006c5c:	e00f      	b.n	8006c7e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8006c5e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006c62:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8006c64:	2300      	movs	r3, #0
 8006c66:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006c6c:	e007      	b.n	8006c7e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8006c72:	2300      	movs	r3, #0
 8006c74:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006c76:	2301      	movs	r3, #1
 8006c78:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006c7a:	e000      	b.n	8006c7e <ethernet_link_thread+0xd2>
    default:
      break;
 8006c7c:	bf00      	nop
    }

    if(linkchanged)
 8006c7e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d018      	beq.n	8006cb6 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006c84:	f107 0308 	add.w	r3, r7, #8
 8006c88:	4619      	mov	r1, r3
 8006c8a:	480e      	ldr	r0, [pc, #56]	@ (8006cc4 <ethernet_link_thread+0x118>)
 8006c8c:	f7fc f868 	bl	8002d60 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8006c90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c92:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8006c94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c96:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006c98:	f107 0308 	add.w	r3, r7, #8
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	4809      	ldr	r0, [pc, #36]	@ (8006cc4 <ethernet_link_thread+0x118>)
 8006ca0:	f7fc f948 	bl	8002f34 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8006ca4:	4807      	ldr	r0, [pc, #28]	@ (8006cc4 <ethernet_link_thread+0x118>)
 8006ca6:	f7fb fbe9 	bl	800247c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8006caa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006cac:	f004 f9c8 	bl	800b040 <netif_set_up>
      netif_set_link_up(netif);
 8006cb0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006cb2:	f004 faa3 	bl	800b1fc <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8006cb6:	2064      	movs	r0, #100	@ 0x64
 8006cb8:	f000 f90e 	bl	8006ed8 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006cbc:	e78b      	b.n	8006bd6 <ethernet_link_thread+0x2a>
 8006cbe:	bf00      	nop
 8006cc0:	2000550c 	.word	0x2000550c
 8006cc4:	20005424 	.word	0x20005424

08006cc8 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b086      	sub	sp, #24
 8006ccc:	af02      	add	r7, sp, #8
 8006cce:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006cd0:	4812      	ldr	r0, [pc, #72]	@ (8006d1c <HAL_ETH_RxAllocateCallback+0x54>)
 8006cd2:	f003 fea9 	bl	800aa28 <memp_malloc_pool>
 8006cd6:	60f8      	str	r0, [r7, #12]
  if (p)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d014      	beq.n	8006d08 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f103 0220 	add.w	r2, r3, #32
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	4a0d      	ldr	r2, [pc, #52]	@ (8006d20 <HAL_ETH_RxAllocateCallback+0x58>)
 8006cec:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8006cf6:	9201      	str	r2, [sp, #4]
 8006cf8:	9300      	str	r3, [sp, #0]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2241      	movs	r2, #65	@ 0x41
 8006cfe:	2100      	movs	r1, #0
 8006d00:	2000      	movs	r0, #0
 8006d02:	f004 fd05 	bl	800b710 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8006d06:	e005      	b.n	8006d14 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8006d08:	4b06      	ldr	r3, [pc, #24]	@ (8006d24 <HAL_ETH_RxAllocateCallback+0x5c>)
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	601a      	str	r2, [r3, #0]
}
 8006d14:	bf00      	nop
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	0801b790 	.word	0x0801b790
 8006d20:	08006925 	.word	0x08006925
 8006d24:	200052d8 	.word	0x200052d8

08006d28 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b089      	sub	sp, #36	@ 0x24
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
 8006d34:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	3b20      	subs	r3, #32
 8006d46:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	2200      	movs	r2, #0
 8006d52:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	887a      	ldrh	r2, [r7, #2]
 8006d58:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d103      	bne.n	8006d6a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	69fa      	ldr	r2, [r7, #28]
 8006d66:	601a      	str	r2, [r3, #0]
 8006d68:	e003      	b.n	8006d72 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	69fa      	ldr	r2, [r7, #28]
 8006d70:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	69fa      	ldr	r2, [r7, #28]
 8006d76:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	61fb      	str	r3, [r7, #28]
 8006d7e:	e009      	b.n	8006d94 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	891a      	ldrh	r2, [r3, #8]
 8006d84:	887b      	ldrh	r3, [r7, #2]
 8006d86:	4413      	add	r3, r2
 8006d88:	b29a      	uxth	r2, r3
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	61fb      	str	r3, [r7, #28]
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1f2      	bne.n	8006d80 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006d9a:	bf00      	nop
 8006d9c:	bf00      	nop
 8006d9e:	3724      	adds	r7, #36	@ 0x24
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f004 fe67 	bl	800ba84 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8006db6:	bf00      	nop
 8006db8:	3708      	adds	r7, #8
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b085      	sub	sp, #20
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006dcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006dd0:	2b84      	cmp	r3, #132	@ 0x84
 8006dd2:	d005      	beq.n	8006de0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006dd4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	4413      	add	r3, r2
 8006ddc:	3303      	adds	r3, #3
 8006dde:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006de0:	68fb      	ldr	r3, [r7, #12]
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3714      	adds	r7, #20
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr

08006dee <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006dee:	b480      	push	{r7}
 8006df0:	b083      	sub	sp, #12
 8006df2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006df4:	f3ef 8305 	mrs	r3, IPSR
 8006df8:	607b      	str	r3, [r7, #4]
  return(result);
 8006dfa:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	bf14      	ite	ne
 8006e00:	2301      	movne	r3, #1
 8006e02:	2300      	moveq	r3, #0
 8006e04:	b2db      	uxtb	r3, r3
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	370c      	adds	r7, #12
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr

08006e12 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006e16:	f001 fc95 	bl	8008744 <vTaskStartScheduler>
  
  return osOK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8006e24:	f7ff ffe3 	bl	8006dee <inHandlerMode>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d003      	beq.n	8006e36 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8006e2e:	f001 fdaf 	bl	8008990 <xTaskGetTickCountFromISR>
 8006e32:	4603      	mov	r3, r0
 8006e34:	e002      	b.n	8006e3c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8006e36:	f001 fd9b 	bl	8008970 <xTaskGetTickCount>
 8006e3a:	4603      	mov	r3, r0
  }
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e42:	b089      	sub	sp, #36	@ 0x24
 8006e44:	af04      	add	r7, sp, #16
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d020      	beq.n	8006e94 <osThreadCreate+0x54>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d01c      	beq.n	8006e94 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685c      	ldr	r4, [r3, #4]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	691e      	ldr	r6, [r3, #16]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7ff ffa6 	bl	8006dbe <makeFreeRtosPriority>
 8006e72:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	695b      	ldr	r3, [r3, #20]
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e7c:	9202      	str	r2, [sp, #8]
 8006e7e:	9301      	str	r3, [sp, #4]
 8006e80:	9100      	str	r1, [sp, #0]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	4632      	mov	r2, r6
 8006e86:	4629      	mov	r1, r5
 8006e88:	4620      	mov	r0, r4
 8006e8a:	f001 fa75 	bl	8008378 <xTaskCreateStatic>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	60fb      	str	r3, [r7, #12]
 8006e92:	e01c      	b.n	8006ece <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	685c      	ldr	r4, [r3, #4]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ea0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7ff ff88 	bl	8006dbe <makeFreeRtosPriority>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	f107 030c 	add.w	r3, r7, #12
 8006eb4:	9301      	str	r3, [sp, #4]
 8006eb6:	9200      	str	r2, [sp, #0]
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	4632      	mov	r2, r6
 8006ebc:	4629      	mov	r1, r5
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	f001 faba 	bl	8008438 <xTaskCreate>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d001      	beq.n	8006ece <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	e000      	b.n	8006ed0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006ece:	68fb      	ldr	r3, [r7, #12]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006ed8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d001      	beq.n	8006eee <osDelay+0x16>
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	e000      	b.n	8006ef0 <osDelay+0x18>
 8006eee:	2301      	movs	r3, #1
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f001 fbf1 	bl	80086d8 <vTaskDelay>
  
  return osOK;
 8006ef6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d007      	beq.n	8006f20 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	4619      	mov	r1, r3
 8006f16:	2001      	movs	r0, #1
 8006f18:	f000 fc47 	bl	80077aa <xQueueCreateMutexStatic>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	e003      	b.n	8006f28 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006f20:	2001      	movs	r0, #1
 8006f22:	f000 fc2a 	bl	800777a <xQueueCreateMutex>
 8006f26:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3708      	adds	r7, #8
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d101      	bne.n	8006f48 <osMutexWait+0x18>
    return osErrorParameter;
 8006f44:	2380      	movs	r3, #128	@ 0x80
 8006f46:	e03a      	b.n	8006fbe <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f52:	d103      	bne.n	8006f5c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8006f54:	f04f 33ff 	mov.w	r3, #4294967295
 8006f58:	60fb      	str	r3, [r7, #12]
 8006f5a:	e009      	b.n	8006f70 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d006      	beq.n	8006f70 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d101      	bne.n	8006f70 <osMutexWait+0x40>
      ticks = 1;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006f70:	f7ff ff3d 	bl	8006dee <inHandlerMode>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d017      	beq.n	8006faa <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006f7a:	f107 0308 	add.w	r3, r7, #8
 8006f7e:	461a      	mov	r2, r3
 8006f80:	2100      	movs	r1, #0
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f001 f84e 	bl	8008024 <xQueueReceiveFromISR>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d001      	beq.n	8006f92 <osMutexWait+0x62>
      return osErrorOS;
 8006f8e:	23ff      	movs	r3, #255	@ 0xff
 8006f90:	e015      	b.n	8006fbe <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d011      	beq.n	8006fbc <osMutexWait+0x8c>
 8006f98:	4b0b      	ldr	r3, [pc, #44]	@ (8006fc8 <osMutexWait+0x98>)
 8006f9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f9e:	601a      	str	r2, [r3, #0]
 8006fa0:	f3bf 8f4f 	dsb	sy
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	e008      	b.n	8006fbc <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8006faa:	68f9      	ldr	r1, [r7, #12]
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 ff29 	bl	8007e04 <xQueueSemaphoreTake>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d001      	beq.n	8006fbc <osMutexWait+0x8c>
    return osErrorOS;
 8006fb8:	23ff      	movs	r3, #255	@ 0xff
 8006fba:	e000      	b.n	8006fbe <osMutexWait+0x8e>
  }
  
  return osOK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	e000ed04 	.word	0xe000ed04

08006fcc <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006fdc:	f7ff ff07 	bl	8006dee <inHandlerMode>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d016      	beq.n	8007014 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006fe6:	f107 0308 	add.w	r3, r7, #8
 8006fea:	4619      	mov	r1, r3
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fd97 	bl	8007b20 <xQueueGiveFromISR>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d001      	beq.n	8006ffc <osMutexRelease+0x30>
      return osErrorOS;
 8006ff8:	23ff      	movs	r3, #255	@ 0xff
 8006ffa:	e017      	b.n	800702c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d013      	beq.n	800702a <osMutexRelease+0x5e>
 8007002:	4b0c      	ldr	r3, [pc, #48]	@ (8007034 <osMutexRelease+0x68>)
 8007004:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007008:	601a      	str	r2, [r3, #0]
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	f3bf 8f6f 	isb	sy
 8007012:	e00a      	b.n	800702a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8007014:	2300      	movs	r3, #0
 8007016:	2200      	movs	r2, #0
 8007018:	2100      	movs	r1, #0
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fbe0 	bl	80077e0 <xQueueGenericSend>
 8007020:	4603      	mov	r3, r0
 8007022:	2b01      	cmp	r3, #1
 8007024:	d001      	beq.n	800702a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8007026:	23ff      	movs	r3, #255	@ 0xff
 8007028:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800702a:	68fb      	ldr	r3, [r7, #12]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	e000ed04 	.word	0xe000ed04

08007038 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007038:	b580      	push	{r7, lr}
 800703a:	b086      	sub	sp, #24
 800703c:	af02      	add	r7, sp, #8
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00f      	beq.n	800706a <osSemaphoreCreate+0x32>
    if (count == 1) {
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d10a      	bne.n	8007066 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	2203      	movs	r2, #3
 8007056:	9200      	str	r2, [sp, #0]
 8007058:	2200      	movs	r2, #0
 800705a:	2100      	movs	r1, #0
 800705c:	2001      	movs	r0, #1
 800705e:	f000 fa9b 	bl	8007598 <xQueueGenericCreateStatic>
 8007062:	4603      	mov	r3, r0
 8007064:	e016      	b.n	8007094 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8007066:	2300      	movs	r3, #0
 8007068:	e014      	b.n	8007094 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d110      	bne.n	8007092 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8007070:	2203      	movs	r2, #3
 8007072:	2100      	movs	r1, #0
 8007074:	2001      	movs	r0, #1
 8007076:	f000 fb0c 	bl	8007692 <xQueueGenericCreate>
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d005      	beq.n	800708e <osSemaphoreCreate+0x56>
 8007082:	2300      	movs	r3, #0
 8007084:	2200      	movs	r2, #0
 8007086:	2100      	movs	r1, #0
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f000 fba9 	bl	80077e0 <xQueueGenericSend>
      return sema;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	e000      	b.n	8007094 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8007092:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8007094:	4618      	mov	r0, r3
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80070a6:	2300      	movs	r3, #0
 80070a8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d101      	bne.n	80070b4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80070b0:	2380      	movs	r3, #128	@ 0x80
 80070b2:	e03a      	b.n	800712a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80070b4:	2300      	movs	r3, #0
 80070b6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070be:	d103      	bne.n	80070c8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80070c0:	f04f 33ff 	mov.w	r3, #4294967295
 80070c4:	60fb      	str	r3, [r7, #12]
 80070c6:	e009      	b.n	80070dc <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d006      	beq.n	80070dc <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d101      	bne.n	80070dc <osSemaphoreWait+0x40>
      ticks = 1;
 80070d8:	2301      	movs	r3, #1
 80070da:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80070dc:	f7ff fe87 	bl	8006dee <inHandlerMode>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d017      	beq.n	8007116 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80070e6:	f107 0308 	add.w	r3, r7, #8
 80070ea:	461a      	mov	r2, r3
 80070ec:	2100      	movs	r1, #0
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 ff98 	bl	8008024 <xQueueReceiveFromISR>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d001      	beq.n	80070fe <osSemaphoreWait+0x62>
      return osErrorOS;
 80070fa:	23ff      	movs	r3, #255	@ 0xff
 80070fc:	e015      	b.n	800712a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d011      	beq.n	8007128 <osSemaphoreWait+0x8c>
 8007104:	4b0b      	ldr	r3, [pc, #44]	@ (8007134 <osSemaphoreWait+0x98>)
 8007106:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800710a:	601a      	str	r2, [r3, #0]
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	f3bf 8f6f 	isb	sy
 8007114:	e008      	b.n	8007128 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8007116:	68f9      	ldr	r1, [r7, #12]
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 fe73 	bl	8007e04 <xQueueSemaphoreTake>
 800711e:	4603      	mov	r3, r0
 8007120:	2b01      	cmp	r3, #1
 8007122:	d001      	beq.n	8007128 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007124:	23ff      	movs	r3, #255	@ 0xff
 8007126:	e000      	b.n	800712a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	e000ed04 	.word	0xe000ed04

08007138 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007140:	2300      	movs	r3, #0
 8007142:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007144:	2300      	movs	r3, #0
 8007146:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007148:	f7ff fe51 	bl	8006dee <inHandlerMode>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d016      	beq.n	8007180 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007152:	f107 0308 	add.w	r3, r7, #8
 8007156:	4619      	mov	r1, r3
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 fce1 	bl	8007b20 <xQueueGiveFromISR>
 800715e:	4603      	mov	r3, r0
 8007160:	2b01      	cmp	r3, #1
 8007162:	d001      	beq.n	8007168 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8007164:	23ff      	movs	r3, #255	@ 0xff
 8007166:	e017      	b.n	8007198 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d013      	beq.n	8007196 <osSemaphoreRelease+0x5e>
 800716e:	4b0c      	ldr	r3, [pc, #48]	@ (80071a0 <osSemaphoreRelease+0x68>)
 8007170:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007174:	601a      	str	r2, [r3, #0]
 8007176:	f3bf 8f4f 	dsb	sy
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	e00a      	b.n	8007196 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007180:	2300      	movs	r3, #0
 8007182:	2200      	movs	r2, #0
 8007184:	2100      	movs	r1, #0
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 fb2a 	bl	80077e0 <xQueueGenericSend>
 800718c:	4603      	mov	r3, r0
 800718e:	2b01      	cmp	r3, #1
 8007190:	d001      	beq.n	8007196 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8007192:	23ff      	movs	r3, #255	@ 0xff
 8007194:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8007196:	68fb      	ldr	r3, [r7, #12]
}
 8007198:	4618      	mov	r0, r3
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	e000ed04 	.word	0xe000ed04

080071a4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80071a4:	b590      	push	{r4, r7, lr}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af02      	add	r7, sp, #8
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d011      	beq.n	80071da <osMessageCreate+0x36>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00d      	beq.n	80071da <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6818      	ldr	r0, [r3, #0]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6859      	ldr	r1, [r3, #4]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	689a      	ldr	r2, [r3, #8]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	2400      	movs	r4, #0
 80071d0:	9400      	str	r4, [sp, #0]
 80071d2:	f000 f9e1 	bl	8007598 <xQueueGenericCreateStatic>
 80071d6:	4603      	mov	r3, r0
 80071d8:	e008      	b.n	80071ec <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6818      	ldr	r0, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	4619      	mov	r1, r3
 80071e6:	f000 fa54 	bl	8007692 <xQueueGenericCreate>
 80071ea:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd90      	pop	{r4, r7, pc}

080071f4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b086      	sub	sp, #24
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007200:	2300      	movs	r3, #0
 8007202:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d101      	bne.n	8007212 <osMessagePut+0x1e>
    ticks = 1;
 800720e:	2301      	movs	r3, #1
 8007210:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007212:	f7ff fdec 	bl	8006dee <inHandlerMode>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d018      	beq.n	800724e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800721c:	f107 0210 	add.w	r2, r7, #16
 8007220:	f107 0108 	add.w	r1, r7, #8
 8007224:	2300      	movs	r3, #0
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f000 fbdc 	bl	80079e4 <xQueueGenericSendFromISR>
 800722c:	4603      	mov	r3, r0
 800722e:	2b01      	cmp	r3, #1
 8007230:	d001      	beq.n	8007236 <osMessagePut+0x42>
      return osErrorOS;
 8007232:	23ff      	movs	r3, #255	@ 0xff
 8007234:	e018      	b.n	8007268 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d014      	beq.n	8007266 <osMessagePut+0x72>
 800723c:	4b0c      	ldr	r3, [pc, #48]	@ (8007270 <osMessagePut+0x7c>)
 800723e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007242:	601a      	str	r2, [r3, #0]
 8007244:	f3bf 8f4f 	dsb	sy
 8007248:	f3bf 8f6f 	isb	sy
 800724c:	e00b      	b.n	8007266 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800724e:	f107 0108 	add.w	r1, r7, #8
 8007252:	2300      	movs	r3, #0
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f000 fac2 	bl	80077e0 <xQueueGenericSend>
 800725c:	4603      	mov	r3, r0
 800725e:	2b01      	cmp	r3, #1
 8007260:	d001      	beq.n	8007266 <osMessagePut+0x72>
      return osErrorOS;
 8007262:	23ff      	movs	r3, #255	@ 0xff
 8007264:	e000      	b.n	8007268 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3718      	adds	r7, #24
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	e000ed04 	.word	0xe000ed04

08007274 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007274:	b590      	push	{r4, r7, lr}
 8007276:	b08b      	sub	sp, #44	@ 0x2c
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007284:	2300      	movs	r3, #0
 8007286:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10a      	bne.n	80072a4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800728e:	2380      	movs	r3, #128	@ 0x80
 8007290:	617b      	str	r3, [r7, #20]
    return event;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	461c      	mov	r4, r3
 8007296:	f107 0314 	add.w	r3, r7, #20
 800729a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800729e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80072a2:	e054      	b.n	800734e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80072a4:	2300      	movs	r3, #0
 80072a6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80072a8:	2300      	movs	r3, #0
 80072aa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b2:	d103      	bne.n	80072bc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80072b4:	f04f 33ff 	mov.w	r3, #4294967295
 80072b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80072ba:	e009      	b.n	80072d0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d006      	beq.n	80072d0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 80072c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <osMessageGet+0x5c>
      ticks = 1;
 80072cc:	2301      	movs	r3, #1
 80072ce:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 80072d0:	f7ff fd8d 	bl	8006dee <inHandlerMode>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d01c      	beq.n	8007314 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80072da:	f107 0220 	add.w	r2, r7, #32
 80072de:	f107 0314 	add.w	r3, r7, #20
 80072e2:	3304      	adds	r3, #4
 80072e4:	4619      	mov	r1, r3
 80072e6:	68b8      	ldr	r0, [r7, #8]
 80072e8:	f000 fe9c 	bl	8008024 <xQueueReceiveFromISR>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d102      	bne.n	80072f8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80072f2:	2310      	movs	r3, #16
 80072f4:	617b      	str	r3, [r7, #20]
 80072f6:	e001      	b.n	80072fc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80072f8:	2300      	movs	r3, #0
 80072fa:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80072fc:	6a3b      	ldr	r3, [r7, #32]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d01d      	beq.n	800733e <osMessageGet+0xca>
 8007302:	4b15      	ldr	r3, [pc, #84]	@ (8007358 <osMessageGet+0xe4>)
 8007304:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007308:	601a      	str	r2, [r3, #0]
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	f3bf 8f6f 	isb	sy
 8007312:	e014      	b.n	800733e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007314:	f107 0314 	add.w	r3, r7, #20
 8007318:	3304      	adds	r3, #4
 800731a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800731c:	4619      	mov	r1, r3
 800731e:	68b8      	ldr	r0, [r7, #8]
 8007320:	f000 fc8e 	bl	8007c40 <xQueueReceive>
 8007324:	4603      	mov	r3, r0
 8007326:	2b01      	cmp	r3, #1
 8007328:	d102      	bne.n	8007330 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800732a:	2310      	movs	r3, #16
 800732c:	617b      	str	r3, [r7, #20]
 800732e:	e006      	b.n	800733e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007332:	2b00      	cmp	r3, #0
 8007334:	d101      	bne.n	800733a <osMessageGet+0xc6>
 8007336:	2300      	movs	r3, #0
 8007338:	e000      	b.n	800733c <osMessageGet+0xc8>
 800733a:	2340      	movs	r3, #64	@ 0x40
 800733c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	461c      	mov	r4, r3
 8007342:	f107 0314 	add.w	r3, r7, #20
 8007346:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800734a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	372c      	adds	r7, #44	@ 0x2c
 8007352:	46bd      	mov	sp, r7
 8007354:	bd90      	pop	{r4, r7, pc}
 8007356:	bf00      	nop
 8007358:	e000ed04 	.word	0xe000ed04

0800735c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f103 0208 	add.w	r2, r3, #8
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f04f 32ff 	mov.w	r2, #4294967295
 8007374:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f103 0208 	add.w	r2, r3, #8
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f103 0208 	add.w	r2, r3, #8
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80073aa:	bf00      	nop
 80073ac:	370c      	adds	r7, #12
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr

080073b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80073b6:	b480      	push	{r7}
 80073b8:	b085      	sub	sp, #20
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
 80073be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	689a      	ldr	r2, [r3, #8]
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	683a      	ldr	r2, [r7, #0]
 80073da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	683a      	ldr	r2, [r7, #0]
 80073e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	1c5a      	adds	r2, r3, #1
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	601a      	str	r2, [r3, #0]
}
 80073f2:	bf00      	nop
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80073fe:	b480      	push	{r7}
 8007400:	b085      	sub	sp, #20
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
 8007406:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007414:	d103      	bne.n	800741e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	60fb      	str	r3, [r7, #12]
 800741c:	e00c      	b.n	8007438 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	3308      	adds	r3, #8
 8007422:	60fb      	str	r3, [r7, #12]
 8007424:	e002      	b.n	800742c <vListInsert+0x2e>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	60fb      	str	r3, [r7, #12]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68ba      	ldr	r2, [r7, #8]
 8007434:	429a      	cmp	r2, r3
 8007436:	d2f6      	bcs.n	8007426 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	685a      	ldr	r2, [r3, #4]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	683a      	ldr	r2, [r7, #0]
 8007446:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	683a      	ldr	r2, [r7, #0]
 8007452:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	1c5a      	adds	r2, r3, #1
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	601a      	str	r2, [r3, #0]
}
 8007464:	bf00      	nop
 8007466:	3714      	adds	r7, #20
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	6892      	ldr	r2, [r2, #8]
 8007486:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	6852      	ldr	r2, [r2, #4]
 8007490:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	429a      	cmp	r2, r3
 800749a:	d103      	bne.n	80074a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	689a      	ldr	r2, [r3, #8]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	1e5a      	subs	r2, r3, #1
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d10b      	bne.n	80074f0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80074d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074dc:	f383 8811 	msr	BASEPRI, r3
 80074e0:	f3bf 8f6f 	isb	sy
 80074e4:	f3bf 8f4f 	dsb	sy
 80074e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80074ea:	bf00      	nop
 80074ec:	bf00      	nop
 80074ee:	e7fd      	b.n	80074ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80074f0:	f002 f8c2 	bl	8009678 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074fc:	68f9      	ldr	r1, [r7, #12]
 80074fe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007500:	fb01 f303 	mul.w	r3, r1, r3
 8007504:	441a      	add	r2, r3
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007520:	3b01      	subs	r3, #1
 8007522:	68f9      	ldr	r1, [r7, #12]
 8007524:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007526:	fb01 f303 	mul.w	r3, r1, r3
 800752a:	441a      	add	r2, r3
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	22ff      	movs	r2, #255	@ 0xff
 8007534:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	22ff      	movs	r2, #255	@ 0xff
 800753c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d114      	bne.n	8007570 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d01a      	beq.n	8007584 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	3310      	adds	r3, #16
 8007552:	4618      	mov	r0, r3
 8007554:	f001 fb72 	bl	8008c3c <xTaskRemoveFromEventList>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d012      	beq.n	8007584 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800755e:	4b0d      	ldr	r3, [pc, #52]	@ (8007594 <xQueueGenericReset+0xd0>)
 8007560:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007564:	601a      	str	r2, [r3, #0]
 8007566:	f3bf 8f4f 	dsb	sy
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	e009      	b.n	8007584 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	3310      	adds	r3, #16
 8007574:	4618      	mov	r0, r3
 8007576:	f7ff fef1 	bl	800735c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	3324      	adds	r3, #36	@ 0x24
 800757e:	4618      	mov	r0, r3
 8007580:	f7ff feec 	bl	800735c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007584:	f002 f8aa 	bl	80096dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007588:	2301      	movs	r3, #1
}
 800758a:	4618      	mov	r0, r3
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	e000ed04 	.word	0xe000ed04

08007598 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007598:	b580      	push	{r7, lr}
 800759a:	b08e      	sub	sp, #56	@ 0x38
 800759c:	af02      	add	r7, sp, #8
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
 80075a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d10b      	bne.n	80075c4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80075ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b0:	f383 8811 	msr	BASEPRI, r3
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	f3bf 8f4f 	dsb	sy
 80075bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80075be:	bf00      	nop
 80075c0:	bf00      	nop
 80075c2:	e7fd      	b.n	80075c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d10b      	bne.n	80075e2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80075ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80075dc:	bf00      	nop
 80075de:	bf00      	nop
 80075e0:	e7fd      	b.n	80075de <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d002      	beq.n	80075ee <xQueueGenericCreateStatic+0x56>
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d001      	beq.n	80075f2 <xQueueGenericCreateStatic+0x5a>
 80075ee:	2301      	movs	r3, #1
 80075f0:	e000      	b.n	80075f4 <xQueueGenericCreateStatic+0x5c>
 80075f2:	2300      	movs	r3, #0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10b      	bne.n	8007610 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80075f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075fc:	f383 8811 	msr	BASEPRI, r3
 8007600:	f3bf 8f6f 	isb	sy
 8007604:	f3bf 8f4f 	dsb	sy
 8007608:	623b      	str	r3, [r7, #32]
}
 800760a:	bf00      	nop
 800760c:	bf00      	nop
 800760e:	e7fd      	b.n	800760c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d102      	bne.n	800761c <xQueueGenericCreateStatic+0x84>
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d101      	bne.n	8007620 <xQueueGenericCreateStatic+0x88>
 800761c:	2301      	movs	r3, #1
 800761e:	e000      	b.n	8007622 <xQueueGenericCreateStatic+0x8a>
 8007620:	2300      	movs	r3, #0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d10b      	bne.n	800763e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800762a:	f383 8811 	msr	BASEPRI, r3
 800762e:	f3bf 8f6f 	isb	sy
 8007632:	f3bf 8f4f 	dsb	sy
 8007636:	61fb      	str	r3, [r7, #28]
}
 8007638:	bf00      	nop
 800763a:	bf00      	nop
 800763c:	e7fd      	b.n	800763a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800763e:	2348      	movs	r3, #72	@ 0x48
 8007640:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	2b48      	cmp	r3, #72	@ 0x48
 8007646:	d00b      	beq.n	8007660 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800764c:	f383 8811 	msr	BASEPRI, r3
 8007650:	f3bf 8f6f 	isb	sy
 8007654:	f3bf 8f4f 	dsb	sy
 8007658:	61bb      	str	r3, [r7, #24]
}
 800765a:	bf00      	nop
 800765c:	bf00      	nop
 800765e:	e7fd      	b.n	800765c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007660:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00d      	beq.n	8007688 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800766c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800766e:	2201      	movs	r2, #1
 8007670:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007674:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800767a:	9300      	str	r3, [sp, #0]
 800767c:	4613      	mov	r3, r2
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	68b9      	ldr	r1, [r7, #8]
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f000 f840 	bl	8007708 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800768a:	4618      	mov	r0, r3
 800768c:	3730      	adds	r7, #48	@ 0x30
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007692:	b580      	push	{r7, lr}
 8007694:	b08a      	sub	sp, #40	@ 0x28
 8007696:	af02      	add	r7, sp, #8
 8007698:	60f8      	str	r0, [r7, #12]
 800769a:	60b9      	str	r1, [r7, #8]
 800769c:	4613      	mov	r3, r2
 800769e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d10b      	bne.n	80076be <xQueueGenericCreate+0x2c>
	__asm volatile
 80076a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076aa:	f383 8811 	msr	BASEPRI, r3
 80076ae:	f3bf 8f6f 	isb	sy
 80076b2:	f3bf 8f4f 	dsb	sy
 80076b6:	613b      	str	r3, [r7, #16]
}
 80076b8:	bf00      	nop
 80076ba:	bf00      	nop
 80076bc:	e7fd      	b.n	80076ba <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	fb02 f303 	mul.w	r3, r2, r3
 80076c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	3348      	adds	r3, #72	@ 0x48
 80076cc:	4618      	mov	r0, r3
 80076ce:	f002 f8f5 	bl	80098bc <pvPortMalloc>
 80076d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d011      	beq.n	80076fe <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	3348      	adds	r3, #72	@ 0x48
 80076e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80076ec:	79fa      	ldrb	r2, [r7, #7]
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	4613      	mov	r3, r2
 80076f4:	697a      	ldr	r2, [r7, #20]
 80076f6:	68b9      	ldr	r1, [r7, #8]
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f000 f805 	bl	8007708 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80076fe:	69bb      	ldr	r3, [r7, #24]
	}
 8007700:	4618      	mov	r0, r3
 8007702:	3720      	adds	r7, #32
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
 8007714:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d103      	bne.n	8007724 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	69ba      	ldr	r2, [r7, #24]
 8007720:	601a      	str	r2, [r3, #0]
 8007722:	e002      	b.n	800772a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007736:	2101      	movs	r1, #1
 8007738:	69b8      	ldr	r0, [r7, #24]
 800773a:	f7ff fec3 	bl	80074c4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800773e:	bf00      	nop
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007746:	b580      	push	{r7, lr}
 8007748:	b082      	sub	sp, #8
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00e      	beq.n	8007772 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007766:	2300      	movs	r3, #0
 8007768:	2200      	movs	r2, #0
 800776a:	2100      	movs	r1, #0
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 f837 	bl	80077e0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007772:	bf00      	nop
 8007774:	3708      	adds	r7, #8
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800777a:	b580      	push	{r7, lr}
 800777c:	b086      	sub	sp, #24
 800777e:	af00      	add	r7, sp, #0
 8007780:	4603      	mov	r3, r0
 8007782:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007784:	2301      	movs	r3, #1
 8007786:	617b      	str	r3, [r7, #20]
 8007788:	2300      	movs	r3, #0
 800778a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800778c:	79fb      	ldrb	r3, [r7, #7]
 800778e:	461a      	mov	r2, r3
 8007790:	6939      	ldr	r1, [r7, #16]
 8007792:	6978      	ldr	r0, [r7, #20]
 8007794:	f7ff ff7d 	bl	8007692 <xQueueGenericCreate>
 8007798:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f7ff ffd3 	bl	8007746 <prvInitialiseMutex>

		return xNewQueue;
 80077a0:	68fb      	ldr	r3, [r7, #12]
	}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3718      	adds	r7, #24
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b088      	sub	sp, #32
 80077ae:	af02      	add	r7, sp, #8
 80077b0:	4603      	mov	r3, r0
 80077b2:	6039      	str	r1, [r7, #0]
 80077b4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80077b6:	2301      	movs	r3, #1
 80077b8:	617b      	str	r3, [r7, #20]
 80077ba:	2300      	movs	r3, #0
 80077bc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80077be:	79fb      	ldrb	r3, [r7, #7]
 80077c0:	9300      	str	r3, [sp, #0]
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	2200      	movs	r2, #0
 80077c6:	6939      	ldr	r1, [r7, #16]
 80077c8:	6978      	ldr	r0, [r7, #20]
 80077ca:	f7ff fee5 	bl	8007598 <xQueueGenericCreateStatic>
 80077ce:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f7ff ffb8 	bl	8007746 <prvInitialiseMutex>

		return xNewQueue;
 80077d6:	68fb      	ldr	r3, [r7, #12]
	}
 80077d8:	4618      	mov	r0, r3
 80077da:	3718      	adds	r7, #24
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b08e      	sub	sp, #56	@ 0x38
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	607a      	str	r2, [r7, #4]
 80077ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80077ee:	2300      	movs	r3, #0
 80077f0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80077f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d10b      	bne.n	8007814 <xQueueGenericSend+0x34>
	__asm volatile
 80077fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007800:	f383 8811 	msr	BASEPRI, r3
 8007804:	f3bf 8f6f 	isb	sy
 8007808:	f3bf 8f4f 	dsb	sy
 800780c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800780e:	bf00      	nop
 8007810:	bf00      	nop
 8007812:	e7fd      	b.n	8007810 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d103      	bne.n	8007822 <xQueueGenericSend+0x42>
 800781a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800781e:	2b00      	cmp	r3, #0
 8007820:	d101      	bne.n	8007826 <xQueueGenericSend+0x46>
 8007822:	2301      	movs	r3, #1
 8007824:	e000      	b.n	8007828 <xQueueGenericSend+0x48>
 8007826:	2300      	movs	r3, #0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d10b      	bne.n	8007844 <xQueueGenericSend+0x64>
	__asm volatile
 800782c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007830:	f383 8811 	msr	BASEPRI, r3
 8007834:	f3bf 8f6f 	isb	sy
 8007838:	f3bf 8f4f 	dsb	sy
 800783c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800783e:	bf00      	nop
 8007840:	bf00      	nop
 8007842:	e7fd      	b.n	8007840 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	2b02      	cmp	r3, #2
 8007848:	d103      	bne.n	8007852 <xQueueGenericSend+0x72>
 800784a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800784e:	2b01      	cmp	r3, #1
 8007850:	d101      	bne.n	8007856 <xQueueGenericSend+0x76>
 8007852:	2301      	movs	r3, #1
 8007854:	e000      	b.n	8007858 <xQueueGenericSend+0x78>
 8007856:	2300      	movs	r3, #0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d10b      	bne.n	8007874 <xQueueGenericSend+0x94>
	__asm volatile
 800785c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007860:	f383 8811 	msr	BASEPRI, r3
 8007864:	f3bf 8f6f 	isb	sy
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	623b      	str	r3, [r7, #32]
}
 800786e:	bf00      	nop
 8007870:	bf00      	nop
 8007872:	e7fd      	b.n	8007870 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007874:	f001 fba8 	bl	8008fc8 <xTaskGetSchedulerState>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d102      	bne.n	8007884 <xQueueGenericSend+0xa4>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d101      	bne.n	8007888 <xQueueGenericSend+0xa8>
 8007884:	2301      	movs	r3, #1
 8007886:	e000      	b.n	800788a <xQueueGenericSend+0xaa>
 8007888:	2300      	movs	r3, #0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10b      	bne.n	80078a6 <xQueueGenericSend+0xc6>
	__asm volatile
 800788e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	61fb      	str	r3, [r7, #28]
}
 80078a0:	bf00      	nop
 80078a2:	bf00      	nop
 80078a4:	e7fd      	b.n	80078a2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078a6:	f001 fee7 	bl	8009678 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d302      	bcc.n	80078bc <xQueueGenericSend+0xdc>
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d129      	bne.n	8007910 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078bc:	683a      	ldr	r2, [r7, #0]
 80078be:	68b9      	ldr	r1, [r7, #8]
 80078c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078c2:	f000 fc49 	bl	8008158 <prvCopyDataToQueue>
 80078c6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d010      	beq.n	80078f2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d2:	3324      	adds	r3, #36	@ 0x24
 80078d4:	4618      	mov	r0, r3
 80078d6:	f001 f9b1 	bl	8008c3c <xTaskRemoveFromEventList>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d013      	beq.n	8007908 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80078e0:	4b3f      	ldr	r3, [pc, #252]	@ (80079e0 <xQueueGenericSend+0x200>)
 80078e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078e6:	601a      	str	r2, [r3, #0]
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	f3bf 8f6f 	isb	sy
 80078f0:	e00a      	b.n	8007908 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80078f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d007      	beq.n	8007908 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80078f8:	4b39      	ldr	r3, [pc, #228]	@ (80079e0 <xQueueGenericSend+0x200>)
 80078fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078fe:	601a      	str	r2, [r3, #0]
 8007900:	f3bf 8f4f 	dsb	sy
 8007904:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007908:	f001 fee8 	bl	80096dc <vPortExitCritical>
				return pdPASS;
 800790c:	2301      	movs	r3, #1
 800790e:	e063      	b.n	80079d8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d103      	bne.n	800791e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007916:	f001 fee1 	bl	80096dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800791a:	2300      	movs	r3, #0
 800791c:	e05c      	b.n	80079d8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800791e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007920:	2b00      	cmp	r3, #0
 8007922:	d106      	bne.n	8007932 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007924:	f107 0314 	add.w	r3, r7, #20
 8007928:	4618      	mov	r0, r3
 800792a:	f001 f9eb 	bl	8008d04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800792e:	2301      	movs	r3, #1
 8007930:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007932:	f001 fed3 	bl	80096dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007936:	f000 ff6f 	bl	8008818 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800793a:	f001 fe9d 	bl	8009678 <vPortEnterCritical>
 800793e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007940:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007944:	b25b      	sxtb	r3, r3
 8007946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800794a:	d103      	bne.n	8007954 <xQueueGenericSend+0x174>
 800794c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800794e:	2200      	movs	r2, #0
 8007950:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007956:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800795a:	b25b      	sxtb	r3, r3
 800795c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007960:	d103      	bne.n	800796a <xQueueGenericSend+0x18a>
 8007962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007964:	2200      	movs	r2, #0
 8007966:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800796a:	f001 feb7 	bl	80096dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800796e:	1d3a      	adds	r2, r7, #4
 8007970:	f107 0314 	add.w	r3, r7, #20
 8007974:	4611      	mov	r1, r2
 8007976:	4618      	mov	r0, r3
 8007978:	f001 f9da 	bl	8008d30 <xTaskCheckForTimeOut>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d124      	bne.n	80079cc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007982:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007984:	f000 fce0 	bl	8008348 <prvIsQueueFull>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d018      	beq.n	80079c0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800798e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007990:	3310      	adds	r3, #16
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	4611      	mov	r1, r2
 8007996:	4618      	mov	r0, r3
 8007998:	f001 f92a 	bl	8008bf0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800799c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800799e:	f000 fc6b 	bl	8008278 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80079a2:	f000 ff47 	bl	8008834 <xTaskResumeAll>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f47f af7c 	bne.w	80078a6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80079ae:	4b0c      	ldr	r3, [pc, #48]	@ (80079e0 <xQueueGenericSend+0x200>)
 80079b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079b4:	601a      	str	r2, [r3, #0]
 80079b6:	f3bf 8f4f 	dsb	sy
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	e772      	b.n	80078a6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80079c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80079c2:	f000 fc59 	bl	8008278 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079c6:	f000 ff35 	bl	8008834 <xTaskResumeAll>
 80079ca:	e76c      	b.n	80078a6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80079cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80079ce:	f000 fc53 	bl	8008278 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079d2:	f000 ff2f 	bl	8008834 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80079d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3738      	adds	r7, #56	@ 0x38
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	e000ed04 	.word	0xe000ed04

080079e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b090      	sub	sp, #64	@ 0x40
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	607a      	str	r2, [r7, #4]
 80079f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80079f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d10b      	bne.n	8007a14 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80079fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a00:	f383 8811 	msr	BASEPRI, r3
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007a0e:	bf00      	nop
 8007a10:	bf00      	nop
 8007a12:	e7fd      	b.n	8007a10 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d103      	bne.n	8007a22 <xQueueGenericSendFromISR+0x3e>
 8007a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d101      	bne.n	8007a26 <xQueueGenericSendFromISR+0x42>
 8007a22:	2301      	movs	r3, #1
 8007a24:	e000      	b.n	8007a28 <xQueueGenericSendFromISR+0x44>
 8007a26:	2300      	movs	r3, #0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d10b      	bne.n	8007a44 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a30:	f383 8811 	msr	BASEPRI, r3
 8007a34:	f3bf 8f6f 	isb	sy
 8007a38:	f3bf 8f4f 	dsb	sy
 8007a3c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007a3e:	bf00      	nop
 8007a40:	bf00      	nop
 8007a42:	e7fd      	b.n	8007a40 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d103      	bne.n	8007a52 <xQueueGenericSendFromISR+0x6e>
 8007a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d101      	bne.n	8007a56 <xQueueGenericSendFromISR+0x72>
 8007a52:	2301      	movs	r3, #1
 8007a54:	e000      	b.n	8007a58 <xQueueGenericSendFromISR+0x74>
 8007a56:	2300      	movs	r3, #0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d10b      	bne.n	8007a74 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a60:	f383 8811 	msr	BASEPRI, r3
 8007a64:	f3bf 8f6f 	isb	sy
 8007a68:	f3bf 8f4f 	dsb	sy
 8007a6c:	623b      	str	r3, [r7, #32]
}
 8007a6e:	bf00      	nop
 8007a70:	bf00      	nop
 8007a72:	e7fd      	b.n	8007a70 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a74:	f001 fee0 	bl	8009838 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007a78:	f3ef 8211 	mrs	r2, BASEPRI
 8007a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a80:	f383 8811 	msr	BASEPRI, r3
 8007a84:	f3bf 8f6f 	isb	sy
 8007a88:	f3bf 8f4f 	dsb	sy
 8007a8c:	61fa      	str	r2, [r7, #28]
 8007a8e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007a90:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a92:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d302      	bcc.n	8007aa6 <xQueueGenericSendFromISR+0xc2>
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	2b02      	cmp	r3, #2
 8007aa4:	d12f      	bne.n	8007b06 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aa8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007aac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ab6:	683a      	ldr	r2, [r7, #0]
 8007ab8:	68b9      	ldr	r1, [r7, #8]
 8007aba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007abc:	f000 fb4c 	bl	8008158 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ac0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac8:	d112      	bne.n	8007af0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d016      	beq.n	8007b00 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad4:	3324      	adds	r3, #36	@ 0x24
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f001 f8b0 	bl	8008c3c <xTaskRemoveFromEventList>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00e      	beq.n	8007b00 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00b      	beq.n	8007b00 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	601a      	str	r2, [r3, #0]
 8007aee:	e007      	b.n	8007b00 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007af0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007af4:	3301      	adds	r3, #1
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	b25a      	sxtb	r2, r3
 8007afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007afc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007b00:	2301      	movs	r3, #1
 8007b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007b04:	e001      	b.n	8007b0a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b06:	2300      	movs	r3, #0
 8007b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b0c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007b14:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3740      	adds	r7, #64	@ 0x40
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b08e      	sub	sp, #56	@ 0x38
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d10b      	bne.n	8007b4c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8007b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b38:	f383 8811 	msr	BASEPRI, r3
 8007b3c:	f3bf 8f6f 	isb	sy
 8007b40:	f3bf 8f4f 	dsb	sy
 8007b44:	623b      	str	r3, [r7, #32]
}
 8007b46:	bf00      	nop
 8007b48:	bf00      	nop
 8007b4a:	e7fd      	b.n	8007b48 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00b      	beq.n	8007b6c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8007b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b58:	f383 8811 	msr	BASEPRI, r3
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	61fb      	str	r3, [r7, #28]
}
 8007b66:	bf00      	nop
 8007b68:	bf00      	nop
 8007b6a:	e7fd      	b.n	8007b68 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d103      	bne.n	8007b7c <xQueueGiveFromISR+0x5c>
 8007b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d101      	bne.n	8007b80 <xQueueGiveFromISR+0x60>
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e000      	b.n	8007b82 <xQueueGiveFromISR+0x62>
 8007b80:	2300      	movs	r3, #0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d10b      	bne.n	8007b9e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8007b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b8a:	f383 8811 	msr	BASEPRI, r3
 8007b8e:	f3bf 8f6f 	isb	sy
 8007b92:	f3bf 8f4f 	dsb	sy
 8007b96:	61bb      	str	r3, [r7, #24]
}
 8007b98:	bf00      	nop
 8007b9a:	bf00      	nop
 8007b9c:	e7fd      	b.n	8007b9a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b9e:	f001 fe4b 	bl	8009838 <vPortValidateInterruptPriority>
	__asm volatile
 8007ba2:	f3ef 8211 	mrs	r2, BASEPRI
 8007ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007baa:	f383 8811 	msr	BASEPRI, r3
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	617a      	str	r2, [r7, #20]
 8007bb8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007bba:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bc2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d22b      	bcs.n	8007c26 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007bd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bda:	1c5a      	adds	r2, r3, #1
 8007bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bde:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007be0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007be8:	d112      	bne.n	8007c10 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d016      	beq.n	8007c20 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf4:	3324      	adds	r3, #36	@ 0x24
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f001 f820 	bl	8008c3c <xTaskRemoveFromEventList>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d00e      	beq.n	8007c20 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00b      	beq.n	8007c20 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	601a      	str	r2, [r3, #0]
 8007c0e:	e007      	b.n	8007c20 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007c10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c14:	3301      	adds	r3, #1
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	b25a      	sxtb	r2, r3
 8007c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007c20:	2301      	movs	r3, #1
 8007c22:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c24:	e001      	b.n	8007c2a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007c26:	2300      	movs	r3, #0
 8007c28:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c2c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f383 8811 	msr	BASEPRI, r3
}
 8007c34:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3738      	adds	r7, #56	@ 0x38
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b08c      	sub	sp, #48	@ 0x30
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10b      	bne.n	8007c72 <xQueueReceive+0x32>
	__asm volatile
 8007c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c5e:	f383 8811 	msr	BASEPRI, r3
 8007c62:	f3bf 8f6f 	isb	sy
 8007c66:	f3bf 8f4f 	dsb	sy
 8007c6a:	623b      	str	r3, [r7, #32]
}
 8007c6c:	bf00      	nop
 8007c6e:	bf00      	nop
 8007c70:	e7fd      	b.n	8007c6e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d103      	bne.n	8007c80 <xQueueReceive+0x40>
 8007c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d101      	bne.n	8007c84 <xQueueReceive+0x44>
 8007c80:	2301      	movs	r3, #1
 8007c82:	e000      	b.n	8007c86 <xQueueReceive+0x46>
 8007c84:	2300      	movs	r3, #0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10b      	bne.n	8007ca2 <xQueueReceive+0x62>
	__asm volatile
 8007c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c8e:	f383 8811 	msr	BASEPRI, r3
 8007c92:	f3bf 8f6f 	isb	sy
 8007c96:	f3bf 8f4f 	dsb	sy
 8007c9a:	61fb      	str	r3, [r7, #28]
}
 8007c9c:	bf00      	nop
 8007c9e:	bf00      	nop
 8007ca0:	e7fd      	b.n	8007c9e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ca2:	f001 f991 	bl	8008fc8 <xTaskGetSchedulerState>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d102      	bne.n	8007cb2 <xQueueReceive+0x72>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d101      	bne.n	8007cb6 <xQueueReceive+0x76>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e000      	b.n	8007cb8 <xQueueReceive+0x78>
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d10b      	bne.n	8007cd4 <xQueueReceive+0x94>
	__asm volatile
 8007cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cc0:	f383 8811 	msr	BASEPRI, r3
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	61bb      	str	r3, [r7, #24]
}
 8007cce:	bf00      	nop
 8007cd0:	bf00      	nop
 8007cd2:	e7fd      	b.n	8007cd0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007cd4:	f001 fcd0 	bl	8009678 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cdc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d01f      	beq.n	8007d24 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007ce4:	68b9      	ldr	r1, [r7, #8]
 8007ce6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ce8:	f000 faa0 	bl	800822c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cee:	1e5a      	subs	r2, r3, #1
 8007cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf6:	691b      	ldr	r3, [r3, #16]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00f      	beq.n	8007d1c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cfe:	3310      	adds	r3, #16
 8007d00:	4618      	mov	r0, r3
 8007d02:	f000 ff9b 	bl	8008c3c <xTaskRemoveFromEventList>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d007      	beq.n	8007d1c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007d0c:	4b3c      	ldr	r3, [pc, #240]	@ (8007e00 <xQueueReceive+0x1c0>)
 8007d0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d12:	601a      	str	r2, [r3, #0]
 8007d14:	f3bf 8f4f 	dsb	sy
 8007d18:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007d1c:	f001 fcde 	bl	80096dc <vPortExitCritical>
				return pdPASS;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e069      	b.n	8007df8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d103      	bne.n	8007d32 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d2a:	f001 fcd7 	bl	80096dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	e062      	b.n	8007df8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d106      	bne.n	8007d46 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d38:	f107 0310 	add.w	r3, r7, #16
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f000 ffe1 	bl	8008d04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d42:	2301      	movs	r3, #1
 8007d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d46:	f001 fcc9 	bl	80096dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d4a:	f000 fd65 	bl	8008818 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d4e:	f001 fc93 	bl	8009678 <vPortEnterCritical>
 8007d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d58:	b25b      	sxtb	r3, r3
 8007d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d5e:	d103      	bne.n	8007d68 <xQueueReceive+0x128>
 8007d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d6e:	b25b      	sxtb	r3, r3
 8007d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d74:	d103      	bne.n	8007d7e <xQueueReceive+0x13e>
 8007d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d7e:	f001 fcad 	bl	80096dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d82:	1d3a      	adds	r2, r7, #4
 8007d84:	f107 0310 	add.w	r3, r7, #16
 8007d88:	4611      	mov	r1, r2
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f000 ffd0 	bl	8008d30 <xTaskCheckForTimeOut>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d123      	bne.n	8007dde <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d98:	f000 fac0 	bl	800831c <prvIsQueueEmpty>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d017      	beq.n	8007dd2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007da4:	3324      	adds	r3, #36	@ 0x24
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	4611      	mov	r1, r2
 8007daa:	4618      	mov	r0, r3
 8007dac:	f000 ff20 	bl	8008bf0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007db0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007db2:	f000 fa61 	bl	8008278 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007db6:	f000 fd3d 	bl	8008834 <xTaskResumeAll>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d189      	bne.n	8007cd4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8007e00 <xQueueReceive+0x1c0>)
 8007dc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dc6:	601a      	str	r2, [r3, #0]
 8007dc8:	f3bf 8f4f 	dsb	sy
 8007dcc:	f3bf 8f6f 	isb	sy
 8007dd0:	e780      	b.n	8007cd4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007dd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007dd4:	f000 fa50 	bl	8008278 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007dd8:	f000 fd2c 	bl	8008834 <xTaskResumeAll>
 8007ddc:	e77a      	b.n	8007cd4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007dde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007de0:	f000 fa4a 	bl	8008278 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007de4:	f000 fd26 	bl	8008834 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007de8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007dea:	f000 fa97 	bl	800831c <prvIsQueueEmpty>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f43f af6f 	beq.w	8007cd4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007df6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3730      	adds	r7, #48	@ 0x30
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	e000ed04 	.word	0xe000ed04

08007e04 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b08e      	sub	sp, #56	@ 0x38
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007e16:	2300      	movs	r3, #0
 8007e18:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d10b      	bne.n	8007e38 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e24:	f383 8811 	msr	BASEPRI, r3
 8007e28:	f3bf 8f6f 	isb	sy
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	623b      	str	r3, [r7, #32]
}
 8007e32:	bf00      	nop
 8007e34:	bf00      	nop
 8007e36:	e7fd      	b.n	8007e34 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00b      	beq.n	8007e58 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	61fb      	str	r3, [r7, #28]
}
 8007e52:	bf00      	nop
 8007e54:	bf00      	nop
 8007e56:	e7fd      	b.n	8007e54 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e58:	f001 f8b6 	bl	8008fc8 <xTaskGetSchedulerState>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d102      	bne.n	8007e68 <xQueueSemaphoreTake+0x64>
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d101      	bne.n	8007e6c <xQueueSemaphoreTake+0x68>
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e000      	b.n	8007e6e <xQueueSemaphoreTake+0x6a>
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d10b      	bne.n	8007e8a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e76:	f383 8811 	msr	BASEPRI, r3
 8007e7a:	f3bf 8f6f 	isb	sy
 8007e7e:	f3bf 8f4f 	dsb	sy
 8007e82:	61bb      	str	r3, [r7, #24]
}
 8007e84:	bf00      	nop
 8007e86:	bf00      	nop
 8007e88:	e7fd      	b.n	8007e86 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e8a:	f001 fbf5 	bl	8009678 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e92:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d024      	beq.n	8007ee4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e9c:	1e5a      	subs	r2, r3, #1
 8007e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ea0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d104      	bne.n	8007eb4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007eaa:	f001 fa39 	bl	8009320 <pvTaskIncrementMutexHeldCount>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eb2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00f      	beq.n	8007edc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ebe:	3310      	adds	r3, #16
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f000 febb 	bl	8008c3c <xTaskRemoveFromEventList>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d007      	beq.n	8007edc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007ecc:	4b54      	ldr	r3, [pc, #336]	@ (8008020 <xQueueSemaphoreTake+0x21c>)
 8007ece:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ed2:	601a      	str	r2, [r3, #0]
 8007ed4:	f3bf 8f4f 	dsb	sy
 8007ed8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007edc:	f001 fbfe 	bl	80096dc <vPortExitCritical>
				return pdPASS;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e098      	b.n	8008016 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d112      	bne.n	8007f10 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d00b      	beq.n	8007f08 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef4:	f383 8811 	msr	BASEPRI, r3
 8007ef8:	f3bf 8f6f 	isb	sy
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	617b      	str	r3, [r7, #20]
}
 8007f02:	bf00      	nop
 8007f04:	bf00      	nop
 8007f06:	e7fd      	b.n	8007f04 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007f08:	f001 fbe8 	bl	80096dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	e082      	b.n	8008016 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d106      	bne.n	8007f24 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f16:	f107 030c 	add.w	r3, r7, #12
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f000 fef2 	bl	8008d04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f20:	2301      	movs	r3, #1
 8007f22:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f24:	f001 fbda 	bl	80096dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f28:	f000 fc76 	bl	8008818 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f2c:	f001 fba4 	bl	8009678 <vPortEnterCritical>
 8007f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f32:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f36:	b25b      	sxtb	r3, r3
 8007f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f3c:	d103      	bne.n	8007f46 <xQueueSemaphoreTake+0x142>
 8007f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f4c:	b25b      	sxtb	r3, r3
 8007f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f52:	d103      	bne.n	8007f5c <xQueueSemaphoreTake+0x158>
 8007f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f56:	2200      	movs	r2, #0
 8007f58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f5c:	f001 fbbe 	bl	80096dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f60:	463a      	mov	r2, r7
 8007f62:	f107 030c 	add.w	r3, r7, #12
 8007f66:	4611      	mov	r1, r2
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f000 fee1 	bl	8008d30 <xTaskCheckForTimeOut>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d132      	bne.n	8007fda <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007f76:	f000 f9d1 	bl	800831c <prvIsQueueEmpty>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d026      	beq.n	8007fce <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d109      	bne.n	8007f9c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007f88:	f001 fb76 	bl	8009678 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	4618      	mov	r0, r3
 8007f92:	f001 f837 	bl	8009004 <xTaskPriorityInherit>
 8007f96:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007f98:	f001 fba0 	bl	80096dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f9e:	3324      	adds	r3, #36	@ 0x24
 8007fa0:	683a      	ldr	r2, [r7, #0]
 8007fa2:	4611      	mov	r1, r2
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f000 fe23 	bl	8008bf0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007faa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007fac:	f000 f964 	bl	8008278 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007fb0:	f000 fc40 	bl	8008834 <xTaskResumeAll>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f47f af67 	bne.w	8007e8a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007fbc:	4b18      	ldr	r3, [pc, #96]	@ (8008020 <xQueueSemaphoreTake+0x21c>)
 8007fbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fc2:	601a      	str	r2, [r3, #0]
 8007fc4:	f3bf 8f4f 	dsb	sy
 8007fc8:	f3bf 8f6f 	isb	sy
 8007fcc:	e75d      	b.n	8007e8a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007fce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007fd0:	f000 f952 	bl	8008278 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007fd4:	f000 fc2e 	bl	8008834 <xTaskResumeAll>
 8007fd8:	e757      	b.n	8007e8a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007fda:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007fdc:	f000 f94c 	bl	8008278 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007fe0:	f000 fc28 	bl	8008834 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fe4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007fe6:	f000 f999 	bl	800831c <prvIsQueueEmpty>
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f43f af4c 	beq.w	8007e8a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d00d      	beq.n	8008014 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007ff8:	f001 fb3e 	bl	8009678 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007ffc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007ffe:	f000 f893 	bl	8008128 <prvGetDisinheritPriorityAfterTimeout>
 8008002:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800800a:	4618      	mov	r0, r3
 800800c:	f001 f8f8 	bl	8009200 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008010:	f001 fb64 	bl	80096dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008014:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008016:	4618      	mov	r0, r3
 8008018:	3738      	adds	r7, #56	@ 0x38
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	e000ed04 	.word	0xe000ed04

08008024 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b08e      	sub	sp, #56	@ 0x38
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008036:	2b00      	cmp	r3, #0
 8008038:	d10b      	bne.n	8008052 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800803a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800803e:	f383 8811 	msr	BASEPRI, r3
 8008042:	f3bf 8f6f 	isb	sy
 8008046:	f3bf 8f4f 	dsb	sy
 800804a:	623b      	str	r3, [r7, #32]
}
 800804c:	bf00      	nop
 800804e:	bf00      	nop
 8008050:	e7fd      	b.n	800804e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d103      	bne.n	8008060 <xQueueReceiveFromISR+0x3c>
 8008058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800805c:	2b00      	cmp	r3, #0
 800805e:	d101      	bne.n	8008064 <xQueueReceiveFromISR+0x40>
 8008060:	2301      	movs	r3, #1
 8008062:	e000      	b.n	8008066 <xQueueReceiveFromISR+0x42>
 8008064:	2300      	movs	r3, #0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d10b      	bne.n	8008082 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800806a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800806e:	f383 8811 	msr	BASEPRI, r3
 8008072:	f3bf 8f6f 	isb	sy
 8008076:	f3bf 8f4f 	dsb	sy
 800807a:	61fb      	str	r3, [r7, #28]
}
 800807c:	bf00      	nop
 800807e:	bf00      	nop
 8008080:	e7fd      	b.n	800807e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008082:	f001 fbd9 	bl	8009838 <vPortValidateInterruptPriority>
	__asm volatile
 8008086:	f3ef 8211 	mrs	r2, BASEPRI
 800808a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800808e:	f383 8811 	msr	BASEPRI, r3
 8008092:	f3bf 8f6f 	isb	sy
 8008096:	f3bf 8f4f 	dsb	sy
 800809a:	61ba      	str	r2, [r7, #24]
 800809c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800809e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80080a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080a6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d02f      	beq.n	800810e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80080ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80080b8:	68b9      	ldr	r1, [r7, #8]
 80080ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80080bc:	f000 f8b6 	bl	800822c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80080c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c2:	1e5a      	subs	r2, r3, #1
 80080c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80080c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80080cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080d0:	d112      	bne.n	80080f8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d016      	beq.n	8008108 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080dc:	3310      	adds	r3, #16
 80080de:	4618      	mov	r0, r3
 80080e0:	f000 fdac 	bl	8008c3c <xTaskRemoveFromEventList>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00e      	beq.n	8008108 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00b      	beq.n	8008108 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	601a      	str	r2, [r3, #0]
 80080f6:	e007      	b.n	8008108 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80080f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080fc:	3301      	adds	r3, #1
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	b25a      	sxtb	r2, r3
 8008102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008104:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8008108:	2301      	movs	r3, #1
 800810a:	637b      	str	r3, [r7, #52]	@ 0x34
 800810c:	e001      	b.n	8008112 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800810e:	2300      	movs	r3, #0
 8008110:	637b      	str	r3, [r7, #52]	@ 0x34
 8008112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008114:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	f383 8811 	msr	BASEPRI, r3
}
 800811c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800811e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008120:	4618      	mov	r0, r3
 8008122:	3738      	adds	r7, #56	@ 0x38
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008134:	2b00      	cmp	r3, #0
 8008136:	d006      	beq.n	8008146 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f1c3 0307 	rsb	r3, r3, #7
 8008142:	60fb      	str	r3, [r7, #12]
 8008144:	e001      	b.n	800814a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008146:	2300      	movs	r3, #0
 8008148:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800814a:	68fb      	ldr	r3, [r7, #12]
	}
 800814c:	4618      	mov	r0, r3
 800814e:	3714      	adds	r7, #20
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b086      	sub	sp, #24
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008164:	2300      	movs	r3, #0
 8008166:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800816c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008172:	2b00      	cmp	r3, #0
 8008174:	d10d      	bne.n	8008192 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d14d      	bne.n	800821a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	4618      	mov	r0, r3
 8008184:	f000 ffb4 	bl	80090f0 <xTaskPriorityDisinherit>
 8008188:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2200      	movs	r2, #0
 800818e:	609a      	str	r2, [r3, #8]
 8008190:	e043      	b.n	800821a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d119      	bne.n	80081cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6858      	ldr	r0, [r3, #4]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081a0:	461a      	mov	r2, r3
 80081a2:	68b9      	ldr	r1, [r7, #8]
 80081a4:	f00f f9b5 	bl	8017512 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	685a      	ldr	r2, [r3, #4]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081b0:	441a      	add	r2, r3
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	685a      	ldr	r2, [r3, #4]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d32b      	bcc.n	800821a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	605a      	str	r2, [r3, #4]
 80081ca:	e026      	b.n	800821a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	68d8      	ldr	r0, [r3, #12]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081d4:	461a      	mov	r2, r3
 80081d6:	68b9      	ldr	r1, [r7, #8]
 80081d8:	f00f f99b 	bl	8017512 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	68da      	ldr	r2, [r3, #12]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081e4:	425b      	negs	r3, r3
 80081e6:	441a      	add	r2, r3
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	68da      	ldr	r2, [r3, #12]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d207      	bcs.n	8008208 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	689a      	ldr	r2, [r3, #8]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008200:	425b      	negs	r3, r3
 8008202:	441a      	add	r2, r3
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2b02      	cmp	r3, #2
 800820c:	d105      	bne.n	800821a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d002      	beq.n	800821a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	3b01      	subs	r3, #1
 8008218:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	1c5a      	adds	r2, r3, #1
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008222:	697b      	ldr	r3, [r7, #20]
}
 8008224:	4618      	mov	r0, r3
 8008226:	3718      	adds	r7, #24
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800823a:	2b00      	cmp	r3, #0
 800823c:	d018      	beq.n	8008270 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	68da      	ldr	r2, [r3, #12]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008246:	441a      	add	r2, r3
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	68da      	ldr	r2, [r3, #12]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	429a      	cmp	r2, r3
 8008256:	d303      	bcc.n	8008260 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	68d9      	ldr	r1, [r3, #12]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008268:	461a      	mov	r2, r3
 800826a:	6838      	ldr	r0, [r7, #0]
 800826c:	f00f f951 	bl	8017512 <memcpy>
	}
}
 8008270:	bf00      	nop
 8008272:	3708      	adds	r7, #8
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008280:	f001 f9fa 	bl	8009678 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800828a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800828c:	e011      	b.n	80082b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008292:	2b00      	cmp	r3, #0
 8008294:	d012      	beq.n	80082bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	3324      	adds	r3, #36	@ 0x24
 800829a:	4618      	mov	r0, r3
 800829c:	f000 fcce 	bl	8008c3c <xTaskRemoveFromEventList>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d001      	beq.n	80082aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80082a6:	f000 fda7 	bl	8008df8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80082aa:	7bfb      	ldrb	r3, [r7, #15]
 80082ac:	3b01      	subs	r3, #1
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	dce9      	bgt.n	800828e <prvUnlockQueue+0x16>
 80082ba:	e000      	b.n	80082be <prvUnlockQueue+0x46>
					break;
 80082bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	22ff      	movs	r2, #255	@ 0xff
 80082c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80082c6:	f001 fa09 	bl	80096dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80082ca:	f001 f9d5 	bl	8009678 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80082d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082d6:	e011      	b.n	80082fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	691b      	ldr	r3, [r3, #16]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d012      	beq.n	8008306 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	3310      	adds	r3, #16
 80082e4:	4618      	mov	r0, r3
 80082e6:	f000 fca9 	bl	8008c3c <xTaskRemoveFromEventList>
 80082ea:	4603      	mov	r3, r0
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d001      	beq.n	80082f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80082f0:	f000 fd82 	bl	8008df8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80082f4:	7bbb      	ldrb	r3, [r7, #14]
 80082f6:	3b01      	subs	r3, #1
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008300:	2b00      	cmp	r3, #0
 8008302:	dce9      	bgt.n	80082d8 <prvUnlockQueue+0x60>
 8008304:	e000      	b.n	8008308 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008306:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	22ff      	movs	r2, #255	@ 0xff
 800830c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008310:	f001 f9e4 	bl	80096dc <vPortExitCritical>
}
 8008314:	bf00      	nop
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008324:	f001 f9a8 	bl	8009678 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800832c:	2b00      	cmp	r3, #0
 800832e:	d102      	bne.n	8008336 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008330:	2301      	movs	r3, #1
 8008332:	60fb      	str	r3, [r7, #12]
 8008334:	e001      	b.n	800833a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008336:	2300      	movs	r3, #0
 8008338:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800833a:	f001 f9cf 	bl	80096dc <vPortExitCritical>

	return xReturn;
 800833e:	68fb      	ldr	r3, [r7, #12]
}
 8008340:	4618      	mov	r0, r3
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008350:	f001 f992 	bl	8009678 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800835c:	429a      	cmp	r2, r3
 800835e:	d102      	bne.n	8008366 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008360:	2301      	movs	r3, #1
 8008362:	60fb      	str	r3, [r7, #12]
 8008364:	e001      	b.n	800836a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008366:	2300      	movs	r3, #0
 8008368:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800836a:	f001 f9b7 	bl	80096dc <vPortExitCritical>

	return xReturn;
 800836e:	68fb      	ldr	r3, [r7, #12]
}
 8008370:	4618      	mov	r0, r3
 8008372:	3710      	adds	r7, #16
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008378:	b580      	push	{r7, lr}
 800837a:	b08e      	sub	sp, #56	@ 0x38
 800837c:	af04      	add	r7, sp, #16
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
 8008384:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008388:	2b00      	cmp	r3, #0
 800838a:	d10b      	bne.n	80083a4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800838c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008390:	f383 8811 	msr	BASEPRI, r3
 8008394:	f3bf 8f6f 	isb	sy
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	623b      	str	r3, [r7, #32]
}
 800839e:	bf00      	nop
 80083a0:	bf00      	nop
 80083a2:	e7fd      	b.n	80083a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80083a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d10b      	bne.n	80083c2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80083aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ae:	f383 8811 	msr	BASEPRI, r3
 80083b2:	f3bf 8f6f 	isb	sy
 80083b6:	f3bf 8f4f 	dsb	sy
 80083ba:	61fb      	str	r3, [r7, #28]
}
 80083bc:	bf00      	nop
 80083be:	bf00      	nop
 80083c0:	e7fd      	b.n	80083be <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80083c2:	23a0      	movs	r3, #160	@ 0xa0
 80083c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	2ba0      	cmp	r3, #160	@ 0xa0
 80083ca:	d00b      	beq.n	80083e4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80083cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083d0:	f383 8811 	msr	BASEPRI, r3
 80083d4:	f3bf 8f6f 	isb	sy
 80083d8:	f3bf 8f4f 	dsb	sy
 80083dc:	61bb      	str	r3, [r7, #24]
}
 80083de:	bf00      	nop
 80083e0:	bf00      	nop
 80083e2:	e7fd      	b.n	80083e0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80083e4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80083e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d01e      	beq.n	800842a <xTaskCreateStatic+0xb2>
 80083ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d01b      	beq.n	800842a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80083f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083f4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80083f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083fa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80083fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083fe:	2202      	movs	r2, #2
 8008400:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008404:	2300      	movs	r3, #0
 8008406:	9303      	str	r3, [sp, #12]
 8008408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800840a:	9302      	str	r3, [sp, #8]
 800840c:	f107 0314 	add.w	r3, r7, #20
 8008410:	9301      	str	r3, [sp, #4]
 8008412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008414:	9300      	str	r3, [sp, #0]
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	68b9      	ldr	r1, [r7, #8]
 800841c:	68f8      	ldr	r0, [r7, #12]
 800841e:	f000 f851 	bl	80084c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008422:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008424:	f000 f8ee 	bl	8008604 <prvAddNewTaskToReadyList>
 8008428:	e001      	b.n	800842e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800842a:	2300      	movs	r3, #0
 800842c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800842e:	697b      	ldr	r3, [r7, #20]
	}
 8008430:	4618      	mov	r0, r3
 8008432:	3728      	adds	r7, #40	@ 0x28
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008438:	b580      	push	{r7, lr}
 800843a:	b08c      	sub	sp, #48	@ 0x30
 800843c:	af04      	add	r7, sp, #16
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	60b9      	str	r1, [r7, #8]
 8008442:	603b      	str	r3, [r7, #0]
 8008444:	4613      	mov	r3, r2
 8008446:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008448:	88fb      	ldrh	r3, [r7, #6]
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	4618      	mov	r0, r3
 800844e:	f001 fa35 	bl	80098bc <pvPortMalloc>
 8008452:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d00e      	beq.n	8008478 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800845a:	20a0      	movs	r0, #160	@ 0xa0
 800845c:	f001 fa2e 	bl	80098bc <pvPortMalloc>
 8008460:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008462:	69fb      	ldr	r3, [r7, #28]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d003      	beq.n	8008470 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	697a      	ldr	r2, [r7, #20]
 800846c:	631a      	str	r2, [r3, #48]	@ 0x30
 800846e:	e005      	b.n	800847c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008470:	6978      	ldr	r0, [r7, #20]
 8008472:	f001 faf1 	bl	8009a58 <vPortFree>
 8008476:	e001      	b.n	800847c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008478:	2300      	movs	r3, #0
 800847a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d017      	beq.n	80084b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008482:	69fb      	ldr	r3, [r7, #28]
 8008484:	2200      	movs	r2, #0
 8008486:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800848a:	88fa      	ldrh	r2, [r7, #6]
 800848c:	2300      	movs	r3, #0
 800848e:	9303      	str	r3, [sp, #12]
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	9302      	str	r3, [sp, #8]
 8008494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008496:	9301      	str	r3, [sp, #4]
 8008498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	68b9      	ldr	r1, [r7, #8]
 80084a0:	68f8      	ldr	r0, [r7, #12]
 80084a2:	f000 f80f 	bl	80084c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084a6:	69f8      	ldr	r0, [r7, #28]
 80084a8:	f000 f8ac 	bl	8008604 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80084ac:	2301      	movs	r3, #1
 80084ae:	61bb      	str	r3, [r7, #24]
 80084b0:	e002      	b.n	80084b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80084b2:	f04f 33ff 	mov.w	r3, #4294967295
 80084b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80084b8:	69bb      	ldr	r3, [r7, #24]
	}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3720      	adds	r7, #32
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
	...

080084c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b088      	sub	sp, #32
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	607a      	str	r2, [r7, #4]
 80084d0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80084d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80084dc:	3b01      	subs	r3, #1
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	4413      	add	r3, r2
 80084e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	f023 0307 	bic.w	r3, r3, #7
 80084ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	f003 0307 	and.w	r3, r3, #7
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d00b      	beq.n	800850e <prvInitialiseNewTask+0x4a>
	__asm volatile
 80084f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084fa:	f383 8811 	msr	BASEPRI, r3
 80084fe:	f3bf 8f6f 	isb	sy
 8008502:	f3bf 8f4f 	dsb	sy
 8008506:	617b      	str	r3, [r7, #20]
}
 8008508:	bf00      	nop
 800850a:	bf00      	nop
 800850c:	e7fd      	b.n	800850a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d01f      	beq.n	8008554 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008514:	2300      	movs	r3, #0
 8008516:	61fb      	str	r3, [r7, #28]
 8008518:	e012      	b.n	8008540 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800851a:	68ba      	ldr	r2, [r7, #8]
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	4413      	add	r3, r2
 8008520:	7819      	ldrb	r1, [r3, #0]
 8008522:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	4413      	add	r3, r2
 8008528:	3334      	adds	r3, #52	@ 0x34
 800852a:	460a      	mov	r2, r1
 800852c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800852e:	68ba      	ldr	r2, [r7, #8]
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	4413      	add	r3, r2
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d006      	beq.n	8008548 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	3301      	adds	r3, #1
 800853e:	61fb      	str	r3, [r7, #28]
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	2b0f      	cmp	r3, #15
 8008544:	d9e9      	bls.n	800851a <prvInitialiseNewTask+0x56>
 8008546:	e000      	b.n	800854a <prvInitialiseNewTask+0x86>
			{
				break;
 8008548:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800854a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800854c:	2200      	movs	r2, #0
 800854e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008552:	e003      	b.n	800855c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008556:	2200      	movs	r2, #0
 8008558:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800855c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800855e:	2b06      	cmp	r3, #6
 8008560:	d901      	bls.n	8008566 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008562:	2306      	movs	r3, #6
 8008564:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008568:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800856a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800856c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800856e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008570:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008574:	2200      	movs	r2, #0
 8008576:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857a:	3304      	adds	r3, #4
 800857c:	4618      	mov	r0, r3
 800857e:	f7fe ff0d 	bl	800739c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008584:	3318      	adds	r3, #24
 8008586:	4618      	mov	r0, r3
 8008588:	f7fe ff08 	bl	800739c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800858c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800858e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008590:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008594:	f1c3 0207 	rsb	r2, r3, #7
 8008598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800859a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800859c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800859e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085a0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80085a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a4:	2200      	movs	r2, #0
 80085a6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80085aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80085b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b4:	334c      	adds	r3, #76	@ 0x4c
 80085b6:	224c      	movs	r2, #76	@ 0x4c
 80085b8:	2100      	movs	r1, #0
 80085ba:	4618      	mov	r0, r3
 80085bc:	f00e fede 	bl	801737c <memset>
 80085c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c2:	4a0d      	ldr	r2, [pc, #52]	@ (80085f8 <prvInitialiseNewTask+0x134>)
 80085c4:	651a      	str	r2, [r3, #80]	@ 0x50
 80085c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c8:	4a0c      	ldr	r2, [pc, #48]	@ (80085fc <prvInitialiseNewTask+0x138>)
 80085ca:	655a      	str	r2, [r3, #84]	@ 0x54
 80085cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ce:	4a0c      	ldr	r2, [pc, #48]	@ (8008600 <prvInitialiseNewTask+0x13c>)
 80085d0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80085d2:	683a      	ldr	r2, [r7, #0]
 80085d4:	68f9      	ldr	r1, [r7, #12]
 80085d6:	69b8      	ldr	r0, [r7, #24]
 80085d8:	f000 ff1c 	bl	8009414 <pxPortInitialiseStack>
 80085dc:	4602      	mov	r2, r0
 80085de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80085e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d002      	beq.n	80085ee <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80085e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085ee:	bf00      	nop
 80085f0:	3720      	adds	r7, #32
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	2000cc74 	.word	0x2000cc74
 80085fc:	2000ccdc 	.word	0x2000ccdc
 8008600:	2000cd44 	.word	0x2000cd44

08008604 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800860c:	f001 f834 	bl	8009678 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008610:	4b2a      	ldr	r3, [pc, #168]	@ (80086bc <prvAddNewTaskToReadyList+0xb8>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	3301      	adds	r3, #1
 8008616:	4a29      	ldr	r2, [pc, #164]	@ (80086bc <prvAddNewTaskToReadyList+0xb8>)
 8008618:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800861a:	4b29      	ldr	r3, [pc, #164]	@ (80086c0 <prvAddNewTaskToReadyList+0xbc>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d109      	bne.n	8008636 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008622:	4a27      	ldr	r2, [pc, #156]	@ (80086c0 <prvAddNewTaskToReadyList+0xbc>)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008628:	4b24      	ldr	r3, [pc, #144]	@ (80086bc <prvAddNewTaskToReadyList+0xb8>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2b01      	cmp	r3, #1
 800862e:	d110      	bne.n	8008652 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008630:	f000 fc06 	bl	8008e40 <prvInitialiseTaskLists>
 8008634:	e00d      	b.n	8008652 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008636:	4b23      	ldr	r3, [pc, #140]	@ (80086c4 <prvAddNewTaskToReadyList+0xc0>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d109      	bne.n	8008652 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800863e:	4b20      	ldr	r3, [pc, #128]	@ (80086c0 <prvAddNewTaskToReadyList+0xbc>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008648:	429a      	cmp	r2, r3
 800864a:	d802      	bhi.n	8008652 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800864c:	4a1c      	ldr	r2, [pc, #112]	@ (80086c0 <prvAddNewTaskToReadyList+0xbc>)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008652:	4b1d      	ldr	r3, [pc, #116]	@ (80086c8 <prvAddNewTaskToReadyList+0xc4>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	3301      	adds	r3, #1
 8008658:	4a1b      	ldr	r2, [pc, #108]	@ (80086c8 <prvAddNewTaskToReadyList+0xc4>)
 800865a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008660:	2201      	movs	r2, #1
 8008662:	409a      	lsls	r2, r3
 8008664:	4b19      	ldr	r3, [pc, #100]	@ (80086cc <prvAddNewTaskToReadyList+0xc8>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4313      	orrs	r3, r2
 800866a:	4a18      	ldr	r2, [pc, #96]	@ (80086cc <prvAddNewTaskToReadyList+0xc8>)
 800866c:	6013      	str	r3, [r2, #0]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008672:	4613      	mov	r3, r2
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	4413      	add	r3, r2
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	4a15      	ldr	r2, [pc, #84]	@ (80086d0 <prvAddNewTaskToReadyList+0xcc>)
 800867c:	441a      	add	r2, r3
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	3304      	adds	r3, #4
 8008682:	4619      	mov	r1, r3
 8008684:	4610      	mov	r0, r2
 8008686:	f7fe fe96 	bl	80073b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800868a:	f001 f827 	bl	80096dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800868e:	4b0d      	ldr	r3, [pc, #52]	@ (80086c4 <prvAddNewTaskToReadyList+0xc0>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00e      	beq.n	80086b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008696:	4b0a      	ldr	r3, [pc, #40]	@ (80086c0 <prvAddNewTaskToReadyList+0xbc>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d207      	bcs.n	80086b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80086a4:	4b0b      	ldr	r3, [pc, #44]	@ (80086d4 <prvAddNewTaskToReadyList+0xd0>)
 80086a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086aa:	601a      	str	r2, [r3, #0]
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086b4:	bf00      	nop
 80086b6:	3708      	adds	r7, #8
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	2000562c 	.word	0x2000562c
 80086c0:	2000552c 	.word	0x2000552c
 80086c4:	20005638 	.word	0x20005638
 80086c8:	20005648 	.word	0x20005648
 80086cc:	20005634 	.word	0x20005634
 80086d0:	20005530 	.word	0x20005530
 80086d4:	e000ed04 	.word	0xe000ed04

080086d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80086e0:	2300      	movs	r3, #0
 80086e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d018      	beq.n	800871c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80086ea:	4b14      	ldr	r3, [pc, #80]	@ (800873c <vTaskDelay+0x64>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d00b      	beq.n	800870a <vTaskDelay+0x32>
	__asm volatile
 80086f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f6:	f383 8811 	msr	BASEPRI, r3
 80086fa:	f3bf 8f6f 	isb	sy
 80086fe:	f3bf 8f4f 	dsb	sy
 8008702:	60bb      	str	r3, [r7, #8]
}
 8008704:	bf00      	nop
 8008706:	bf00      	nop
 8008708:	e7fd      	b.n	8008706 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800870a:	f000 f885 	bl	8008818 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800870e:	2100      	movs	r1, #0
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 fe19 	bl	8009348 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008716:	f000 f88d 	bl	8008834 <xTaskResumeAll>
 800871a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d107      	bne.n	8008732 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008722:	4b07      	ldr	r3, [pc, #28]	@ (8008740 <vTaskDelay+0x68>)
 8008724:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008728:	601a      	str	r2, [r3, #0]
 800872a:	f3bf 8f4f 	dsb	sy
 800872e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008732:	bf00      	nop
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	20005654 	.word	0x20005654
 8008740:	e000ed04 	.word	0xe000ed04

08008744 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b08a      	sub	sp, #40	@ 0x28
 8008748:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800874a:	2300      	movs	r3, #0
 800874c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800874e:	2300      	movs	r3, #0
 8008750:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008752:	463a      	mov	r2, r7
 8008754:	1d39      	adds	r1, r7, #4
 8008756:	f107 0308 	add.w	r3, r7, #8
 800875a:	4618      	mov	r0, r3
 800875c:	f7f7 ff18 	bl	8000590 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	68ba      	ldr	r2, [r7, #8]
 8008766:	9202      	str	r2, [sp, #8]
 8008768:	9301      	str	r3, [sp, #4]
 800876a:	2300      	movs	r3, #0
 800876c:	9300      	str	r3, [sp, #0]
 800876e:	2300      	movs	r3, #0
 8008770:	460a      	mov	r2, r1
 8008772:	4921      	ldr	r1, [pc, #132]	@ (80087f8 <vTaskStartScheduler+0xb4>)
 8008774:	4821      	ldr	r0, [pc, #132]	@ (80087fc <vTaskStartScheduler+0xb8>)
 8008776:	f7ff fdff 	bl	8008378 <xTaskCreateStatic>
 800877a:	4603      	mov	r3, r0
 800877c:	4a20      	ldr	r2, [pc, #128]	@ (8008800 <vTaskStartScheduler+0xbc>)
 800877e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008780:	4b1f      	ldr	r3, [pc, #124]	@ (8008800 <vTaskStartScheduler+0xbc>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d002      	beq.n	800878e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008788:	2301      	movs	r3, #1
 800878a:	617b      	str	r3, [r7, #20]
 800878c:	e001      	b.n	8008792 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800878e:	2300      	movs	r3, #0
 8008790:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	2b01      	cmp	r3, #1
 8008796:	d11b      	bne.n	80087d0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8008798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800879c:	f383 8811 	msr	BASEPRI, r3
 80087a0:	f3bf 8f6f 	isb	sy
 80087a4:	f3bf 8f4f 	dsb	sy
 80087a8:	613b      	str	r3, [r7, #16]
}
 80087aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80087ac:	4b15      	ldr	r3, [pc, #84]	@ (8008804 <vTaskStartScheduler+0xc0>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	334c      	adds	r3, #76	@ 0x4c
 80087b2:	4a15      	ldr	r2, [pc, #84]	@ (8008808 <vTaskStartScheduler+0xc4>)
 80087b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80087b6:	4b15      	ldr	r3, [pc, #84]	@ (800880c <vTaskStartScheduler+0xc8>)
 80087b8:	f04f 32ff 	mov.w	r2, #4294967295
 80087bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80087be:	4b14      	ldr	r3, [pc, #80]	@ (8008810 <vTaskStartScheduler+0xcc>)
 80087c0:	2201      	movs	r2, #1
 80087c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80087c4:	4b13      	ldr	r3, [pc, #76]	@ (8008814 <vTaskStartScheduler+0xd0>)
 80087c6:	2200      	movs	r2, #0
 80087c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80087ca:	f000 feb1 	bl	8009530 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80087ce:	e00f      	b.n	80087f0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087d6:	d10b      	bne.n	80087f0 <vTaskStartScheduler+0xac>
	__asm volatile
 80087d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087dc:	f383 8811 	msr	BASEPRI, r3
 80087e0:	f3bf 8f6f 	isb	sy
 80087e4:	f3bf 8f4f 	dsb	sy
 80087e8:	60fb      	str	r3, [r7, #12]
}
 80087ea:	bf00      	nop
 80087ec:	bf00      	nop
 80087ee:	e7fd      	b.n	80087ec <vTaskStartScheduler+0xa8>
}
 80087f0:	bf00      	nop
 80087f2:	3718      	adds	r7, #24
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	08018574 	.word	0x08018574
 80087fc:	08008e11 	.word	0x08008e11
 8008800:	20005650 	.word	0x20005650
 8008804:	2000552c 	.word	0x2000552c
 8008808:	20000044 	.word	0x20000044
 800880c:	2000564c 	.word	0x2000564c
 8008810:	20005638 	.word	0x20005638
 8008814:	20005630 	.word	0x20005630

08008818 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008818:	b480      	push	{r7}
 800881a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800881c:	4b04      	ldr	r3, [pc, #16]	@ (8008830 <vTaskSuspendAll+0x18>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	3301      	adds	r3, #1
 8008822:	4a03      	ldr	r2, [pc, #12]	@ (8008830 <vTaskSuspendAll+0x18>)
 8008824:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008826:	bf00      	nop
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr
 8008830:	20005654 	.word	0x20005654

08008834 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800883a:	2300      	movs	r3, #0
 800883c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800883e:	2300      	movs	r3, #0
 8008840:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008842:	4b42      	ldr	r3, [pc, #264]	@ (800894c <xTaskResumeAll+0x118>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d10b      	bne.n	8008862 <xTaskResumeAll+0x2e>
	__asm volatile
 800884a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800884e:	f383 8811 	msr	BASEPRI, r3
 8008852:	f3bf 8f6f 	isb	sy
 8008856:	f3bf 8f4f 	dsb	sy
 800885a:	603b      	str	r3, [r7, #0]
}
 800885c:	bf00      	nop
 800885e:	bf00      	nop
 8008860:	e7fd      	b.n	800885e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008862:	f000 ff09 	bl	8009678 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008866:	4b39      	ldr	r3, [pc, #228]	@ (800894c <xTaskResumeAll+0x118>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	3b01      	subs	r3, #1
 800886c:	4a37      	ldr	r2, [pc, #220]	@ (800894c <xTaskResumeAll+0x118>)
 800886e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008870:	4b36      	ldr	r3, [pc, #216]	@ (800894c <xTaskResumeAll+0x118>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d161      	bne.n	800893c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008878:	4b35      	ldr	r3, [pc, #212]	@ (8008950 <xTaskResumeAll+0x11c>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d05d      	beq.n	800893c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008880:	e02e      	b.n	80088e0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008882:	4b34      	ldr	r3, [pc, #208]	@ (8008954 <xTaskResumeAll+0x120>)
 8008884:	68db      	ldr	r3, [r3, #12]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	3318      	adds	r3, #24
 800888e:	4618      	mov	r0, r3
 8008890:	f7fe fdee 	bl	8007470 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	3304      	adds	r3, #4
 8008898:	4618      	mov	r0, r3
 800889a:	f7fe fde9 	bl	8007470 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a2:	2201      	movs	r2, #1
 80088a4:	409a      	lsls	r2, r3
 80088a6:	4b2c      	ldr	r3, [pc, #176]	@ (8008958 <xTaskResumeAll+0x124>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	4a2a      	ldr	r2, [pc, #168]	@ (8008958 <xTaskResumeAll+0x124>)
 80088ae:	6013      	str	r3, [r2, #0]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088b4:	4613      	mov	r3, r2
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	4413      	add	r3, r2
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	4a27      	ldr	r2, [pc, #156]	@ (800895c <xTaskResumeAll+0x128>)
 80088be:	441a      	add	r2, r3
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	3304      	adds	r3, #4
 80088c4:	4619      	mov	r1, r3
 80088c6:	4610      	mov	r0, r2
 80088c8:	f7fe fd75 	bl	80073b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088d0:	4b23      	ldr	r3, [pc, #140]	@ (8008960 <xTaskResumeAll+0x12c>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d302      	bcc.n	80088e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80088da:	4b22      	ldr	r3, [pc, #136]	@ (8008964 <xTaskResumeAll+0x130>)
 80088dc:	2201      	movs	r2, #1
 80088de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088e0:	4b1c      	ldr	r3, [pc, #112]	@ (8008954 <xTaskResumeAll+0x120>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1cc      	bne.n	8008882 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d001      	beq.n	80088f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80088ee:	f000 fb4b 	bl	8008f88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80088f2:	4b1d      	ldr	r3, [pc, #116]	@ (8008968 <xTaskResumeAll+0x134>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d010      	beq.n	8008920 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80088fe:	f000 f859 	bl	80089b4 <xTaskIncrementTick>
 8008902:	4603      	mov	r3, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d002      	beq.n	800890e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008908:	4b16      	ldr	r3, [pc, #88]	@ (8008964 <xTaskResumeAll+0x130>)
 800890a:	2201      	movs	r2, #1
 800890c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	3b01      	subs	r3, #1
 8008912:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d1f1      	bne.n	80088fe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800891a:	4b13      	ldr	r3, [pc, #76]	@ (8008968 <xTaskResumeAll+0x134>)
 800891c:	2200      	movs	r2, #0
 800891e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008920:	4b10      	ldr	r3, [pc, #64]	@ (8008964 <xTaskResumeAll+0x130>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d009      	beq.n	800893c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008928:	2301      	movs	r3, #1
 800892a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800892c:	4b0f      	ldr	r3, [pc, #60]	@ (800896c <xTaskResumeAll+0x138>)
 800892e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008932:	601a      	str	r2, [r3, #0]
 8008934:	f3bf 8f4f 	dsb	sy
 8008938:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800893c:	f000 fece 	bl	80096dc <vPortExitCritical>

	return xAlreadyYielded;
 8008940:	68bb      	ldr	r3, [r7, #8]
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	20005654 	.word	0x20005654
 8008950:	2000562c 	.word	0x2000562c
 8008954:	200055ec 	.word	0x200055ec
 8008958:	20005634 	.word	0x20005634
 800895c:	20005530 	.word	0x20005530
 8008960:	2000552c 	.word	0x2000552c
 8008964:	20005640 	.word	0x20005640
 8008968:	2000563c 	.word	0x2000563c
 800896c:	e000ed04 	.word	0xe000ed04

08008970 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008976:	4b05      	ldr	r3, [pc, #20]	@ (800898c <xTaskGetTickCount+0x1c>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800897c:	687b      	ldr	r3, [r7, #4]
}
 800897e:	4618      	mov	r0, r3
 8008980:	370c      	adds	r7, #12
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	20005630 	.word	0x20005630

08008990 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008996:	f000 ff4f 	bl	8009838 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800899a:	2300      	movs	r3, #0
 800899c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800899e:	4b04      	ldr	r3, [pc, #16]	@ (80089b0 <xTaskGetTickCountFromISR+0x20>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80089a4:	683b      	ldr	r3, [r7, #0]
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3708      	adds	r7, #8
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	20005630 	.word	0x20005630

080089b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b086      	sub	sp, #24
 80089b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80089ba:	2300      	movs	r3, #0
 80089bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089be:	4b4f      	ldr	r3, [pc, #316]	@ (8008afc <xTaskIncrementTick+0x148>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	f040 808f 	bne.w	8008ae6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80089c8:	4b4d      	ldr	r3, [pc, #308]	@ (8008b00 <xTaskIncrementTick+0x14c>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	3301      	adds	r3, #1
 80089ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80089d0:	4a4b      	ldr	r2, [pc, #300]	@ (8008b00 <xTaskIncrementTick+0x14c>)
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d121      	bne.n	8008a20 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80089dc:	4b49      	ldr	r3, [pc, #292]	@ (8008b04 <xTaskIncrementTick+0x150>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00b      	beq.n	80089fe <xTaskIncrementTick+0x4a>
	__asm volatile
 80089e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ea:	f383 8811 	msr	BASEPRI, r3
 80089ee:	f3bf 8f6f 	isb	sy
 80089f2:	f3bf 8f4f 	dsb	sy
 80089f6:	603b      	str	r3, [r7, #0]
}
 80089f8:	bf00      	nop
 80089fa:	bf00      	nop
 80089fc:	e7fd      	b.n	80089fa <xTaskIncrementTick+0x46>
 80089fe:	4b41      	ldr	r3, [pc, #260]	@ (8008b04 <xTaskIncrementTick+0x150>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	60fb      	str	r3, [r7, #12]
 8008a04:	4b40      	ldr	r3, [pc, #256]	@ (8008b08 <xTaskIncrementTick+0x154>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a3e      	ldr	r2, [pc, #248]	@ (8008b04 <xTaskIncrementTick+0x150>)
 8008a0a:	6013      	str	r3, [r2, #0]
 8008a0c:	4a3e      	ldr	r2, [pc, #248]	@ (8008b08 <xTaskIncrementTick+0x154>)
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6013      	str	r3, [r2, #0]
 8008a12:	4b3e      	ldr	r3, [pc, #248]	@ (8008b0c <xTaskIncrementTick+0x158>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	3301      	adds	r3, #1
 8008a18:	4a3c      	ldr	r2, [pc, #240]	@ (8008b0c <xTaskIncrementTick+0x158>)
 8008a1a:	6013      	str	r3, [r2, #0]
 8008a1c:	f000 fab4 	bl	8008f88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008a20:	4b3b      	ldr	r3, [pc, #236]	@ (8008b10 <xTaskIncrementTick+0x15c>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	693a      	ldr	r2, [r7, #16]
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d348      	bcc.n	8008abc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a2a:	4b36      	ldr	r3, [pc, #216]	@ (8008b04 <xTaskIncrementTick+0x150>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d104      	bne.n	8008a3e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a34:	4b36      	ldr	r3, [pc, #216]	@ (8008b10 <xTaskIncrementTick+0x15c>)
 8008a36:	f04f 32ff 	mov.w	r2, #4294967295
 8008a3a:	601a      	str	r2, [r3, #0]
					break;
 8008a3c:	e03e      	b.n	8008abc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a3e:	4b31      	ldr	r3, [pc, #196]	@ (8008b04 <xTaskIncrementTick+0x150>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008a4e:	693a      	ldr	r2, [r7, #16]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d203      	bcs.n	8008a5e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008a56:	4a2e      	ldr	r2, [pc, #184]	@ (8008b10 <xTaskIncrementTick+0x15c>)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008a5c:	e02e      	b.n	8008abc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	3304      	adds	r3, #4
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7fe fd04 	bl	8007470 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d004      	beq.n	8008a7a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	3318      	adds	r3, #24
 8008a74:	4618      	mov	r0, r3
 8008a76:	f7fe fcfb 	bl	8007470 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a7e:	2201      	movs	r2, #1
 8008a80:	409a      	lsls	r2, r3
 8008a82:	4b24      	ldr	r3, [pc, #144]	@ (8008b14 <xTaskIncrementTick+0x160>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	4a22      	ldr	r2, [pc, #136]	@ (8008b14 <xTaskIncrementTick+0x160>)
 8008a8a:	6013      	str	r3, [r2, #0]
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a90:	4613      	mov	r3, r2
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	4413      	add	r3, r2
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	4a1f      	ldr	r2, [pc, #124]	@ (8008b18 <xTaskIncrementTick+0x164>)
 8008a9a:	441a      	add	r2, r3
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	3304      	adds	r3, #4
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	4610      	mov	r0, r2
 8008aa4:	f7fe fc87 	bl	80073b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008aac:	4b1b      	ldr	r3, [pc, #108]	@ (8008b1c <xTaskIncrementTick+0x168>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d3b9      	bcc.n	8008a2a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008aba:	e7b6      	b.n	8008a2a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008abc:	4b17      	ldr	r3, [pc, #92]	@ (8008b1c <xTaskIncrementTick+0x168>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ac2:	4915      	ldr	r1, [pc, #84]	@ (8008b18 <xTaskIncrementTick+0x164>)
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	4413      	add	r3, r2
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	440b      	add	r3, r1
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d901      	bls.n	8008ad8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008ad8:	4b11      	ldr	r3, [pc, #68]	@ (8008b20 <xTaskIncrementTick+0x16c>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d007      	beq.n	8008af0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	617b      	str	r3, [r7, #20]
 8008ae4:	e004      	b.n	8008af0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8008b24 <xTaskIncrementTick+0x170>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	3301      	adds	r3, #1
 8008aec:	4a0d      	ldr	r2, [pc, #52]	@ (8008b24 <xTaskIncrementTick+0x170>)
 8008aee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008af0:	697b      	ldr	r3, [r7, #20]
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3718      	adds	r7, #24
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	20005654 	.word	0x20005654
 8008b00:	20005630 	.word	0x20005630
 8008b04:	200055e4 	.word	0x200055e4
 8008b08:	200055e8 	.word	0x200055e8
 8008b0c:	20005644 	.word	0x20005644
 8008b10:	2000564c 	.word	0x2000564c
 8008b14:	20005634 	.word	0x20005634
 8008b18:	20005530 	.word	0x20005530
 8008b1c:	2000552c 	.word	0x2000552c
 8008b20:	20005640 	.word	0x20005640
 8008b24:	2000563c 	.word	0x2000563c

08008b28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b087      	sub	sp, #28
 8008b2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8008bd8 <vTaskSwitchContext+0xb0>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d003      	beq.n	8008b3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008b36:	4b29      	ldr	r3, [pc, #164]	@ (8008bdc <vTaskSwitchContext+0xb4>)
 8008b38:	2201      	movs	r2, #1
 8008b3a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008b3c:	e045      	b.n	8008bca <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8008b3e:	4b27      	ldr	r3, [pc, #156]	@ (8008bdc <vTaskSwitchContext+0xb4>)
 8008b40:	2200      	movs	r2, #0
 8008b42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b44:	4b26      	ldr	r3, [pc, #152]	@ (8008be0 <vTaskSwitchContext+0xb8>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	fab3 f383 	clz	r3, r3
 8008b50:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008b52:	7afb      	ldrb	r3, [r7, #11]
 8008b54:	f1c3 031f 	rsb	r3, r3, #31
 8008b58:	617b      	str	r3, [r7, #20]
 8008b5a:	4922      	ldr	r1, [pc, #136]	@ (8008be4 <vTaskSwitchContext+0xbc>)
 8008b5c:	697a      	ldr	r2, [r7, #20]
 8008b5e:	4613      	mov	r3, r2
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	4413      	add	r3, r2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	440b      	add	r3, r1
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d10b      	bne.n	8008b86 <vTaskSwitchContext+0x5e>
	__asm volatile
 8008b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b72:	f383 8811 	msr	BASEPRI, r3
 8008b76:	f3bf 8f6f 	isb	sy
 8008b7a:	f3bf 8f4f 	dsb	sy
 8008b7e:	607b      	str	r3, [r7, #4]
}
 8008b80:	bf00      	nop
 8008b82:	bf00      	nop
 8008b84:	e7fd      	b.n	8008b82 <vTaskSwitchContext+0x5a>
 8008b86:	697a      	ldr	r2, [r7, #20]
 8008b88:	4613      	mov	r3, r2
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	4413      	add	r3, r2
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	4a14      	ldr	r2, [pc, #80]	@ (8008be4 <vTaskSwitchContext+0xbc>)
 8008b92:	4413      	add	r3, r2
 8008b94:	613b      	str	r3, [r7, #16]
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	685a      	ldr	r2, [r3, #4]
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	605a      	str	r2, [r3, #4]
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	685a      	ldr	r2, [r3, #4]
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	3308      	adds	r3, #8
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d104      	bne.n	8008bb6 <vTaskSwitchContext+0x8e>
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	685a      	ldr	r2, [r3, #4]
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	605a      	str	r2, [r3, #4]
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8008be8 <vTaskSwitchContext+0xc0>)
 8008bbe:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008bc0:	4b09      	ldr	r3, [pc, #36]	@ (8008be8 <vTaskSwitchContext+0xc0>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	334c      	adds	r3, #76	@ 0x4c
 8008bc6:	4a09      	ldr	r2, [pc, #36]	@ (8008bec <vTaskSwitchContext+0xc4>)
 8008bc8:	6013      	str	r3, [r2, #0]
}
 8008bca:	bf00      	nop
 8008bcc:	371c      	adds	r7, #28
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr
 8008bd6:	bf00      	nop
 8008bd8:	20005654 	.word	0x20005654
 8008bdc:	20005640 	.word	0x20005640
 8008be0:	20005634 	.word	0x20005634
 8008be4:	20005530 	.word	0x20005530
 8008be8:	2000552c 	.word	0x2000552c
 8008bec:	20000044 	.word	0x20000044

08008bf0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d10b      	bne.n	8008c18 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c04:	f383 8811 	msr	BASEPRI, r3
 8008c08:	f3bf 8f6f 	isb	sy
 8008c0c:	f3bf 8f4f 	dsb	sy
 8008c10:	60fb      	str	r3, [r7, #12]
}
 8008c12:	bf00      	nop
 8008c14:	bf00      	nop
 8008c16:	e7fd      	b.n	8008c14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c18:	4b07      	ldr	r3, [pc, #28]	@ (8008c38 <vTaskPlaceOnEventList+0x48>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	3318      	adds	r3, #24
 8008c1e:	4619      	mov	r1, r3
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f7fe fbec 	bl	80073fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c26:	2101      	movs	r1, #1
 8008c28:	6838      	ldr	r0, [r7, #0]
 8008c2a:	f000 fb8d 	bl	8009348 <prvAddCurrentTaskToDelayedList>
}
 8008c2e:	bf00      	nop
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	2000552c 	.word	0x2000552c

08008c3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b086      	sub	sp, #24
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d10b      	bne.n	8008c6a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c56:	f383 8811 	msr	BASEPRI, r3
 8008c5a:	f3bf 8f6f 	isb	sy
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	60fb      	str	r3, [r7, #12]
}
 8008c64:	bf00      	nop
 8008c66:	bf00      	nop
 8008c68:	e7fd      	b.n	8008c66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	3318      	adds	r3, #24
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7fe fbfe 	bl	8007470 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c74:	4b1d      	ldr	r3, [pc, #116]	@ (8008cec <xTaskRemoveFromEventList+0xb0>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d11c      	bne.n	8008cb6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	3304      	adds	r3, #4
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7fe fbf5 	bl	8007470 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	409a      	lsls	r2, r3
 8008c8e:	4b18      	ldr	r3, [pc, #96]	@ (8008cf0 <xTaskRemoveFromEventList+0xb4>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	4a16      	ldr	r2, [pc, #88]	@ (8008cf0 <xTaskRemoveFromEventList+0xb4>)
 8008c96:	6013      	str	r3, [r2, #0]
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	4413      	add	r3, r2
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	4a13      	ldr	r2, [pc, #76]	@ (8008cf4 <xTaskRemoveFromEventList+0xb8>)
 8008ca6:	441a      	add	r2, r3
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	3304      	adds	r3, #4
 8008cac:	4619      	mov	r1, r3
 8008cae:	4610      	mov	r0, r2
 8008cb0:	f7fe fb81 	bl	80073b6 <vListInsertEnd>
 8008cb4:	e005      	b.n	8008cc2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	3318      	adds	r3, #24
 8008cba:	4619      	mov	r1, r3
 8008cbc:	480e      	ldr	r0, [pc, #56]	@ (8008cf8 <xTaskRemoveFromEventList+0xbc>)
 8008cbe:	f7fe fb7a 	bl	80073b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8008cfc <xTaskRemoveFromEventList+0xc0>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d905      	bls.n	8008cdc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8008d00 <xTaskRemoveFromEventList+0xc4>)
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	601a      	str	r2, [r3, #0]
 8008cda:	e001      	b.n	8008ce0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008ce0:	697b      	ldr	r3, [r7, #20]
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3718      	adds	r7, #24
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	20005654 	.word	0x20005654
 8008cf0:	20005634 	.word	0x20005634
 8008cf4:	20005530 	.word	0x20005530
 8008cf8:	200055ec 	.word	0x200055ec
 8008cfc:	2000552c 	.word	0x2000552c
 8008d00:	20005640 	.word	0x20005640

08008d04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d0c:	4b06      	ldr	r3, [pc, #24]	@ (8008d28 <vTaskInternalSetTimeOutState+0x24>)
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008d14:	4b05      	ldr	r3, [pc, #20]	@ (8008d2c <vTaskInternalSetTimeOutState+0x28>)
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	605a      	str	r2, [r3, #4]
}
 8008d1c:	bf00      	nop
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	20005644 	.word	0x20005644
 8008d2c:	20005630 	.word	0x20005630

08008d30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b088      	sub	sp, #32
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d10b      	bne.n	8008d58 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	613b      	str	r3, [r7, #16]
}
 8008d52:	bf00      	nop
 8008d54:	bf00      	nop
 8008d56:	e7fd      	b.n	8008d54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d10b      	bne.n	8008d76 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d62:	f383 8811 	msr	BASEPRI, r3
 8008d66:	f3bf 8f6f 	isb	sy
 8008d6a:	f3bf 8f4f 	dsb	sy
 8008d6e:	60fb      	str	r3, [r7, #12]
}
 8008d70:	bf00      	nop
 8008d72:	bf00      	nop
 8008d74:	e7fd      	b.n	8008d72 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008d76:	f000 fc7f 	bl	8009678 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8008df0 <xTaskCheckForTimeOut+0xc0>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	69ba      	ldr	r2, [r7, #24]
 8008d86:	1ad3      	subs	r3, r2, r3
 8008d88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d92:	d102      	bne.n	8008d9a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008d94:	2300      	movs	r3, #0
 8008d96:	61fb      	str	r3, [r7, #28]
 8008d98:	e023      	b.n	8008de2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	4b15      	ldr	r3, [pc, #84]	@ (8008df4 <xTaskCheckForTimeOut+0xc4>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d007      	beq.n	8008db6 <xTaskCheckForTimeOut+0x86>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	69ba      	ldr	r2, [r7, #24]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d302      	bcc.n	8008db6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008db0:	2301      	movs	r3, #1
 8008db2:	61fb      	str	r3, [r7, #28]
 8008db4:	e015      	b.n	8008de2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	697a      	ldr	r2, [r7, #20]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d20b      	bcs.n	8008dd8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	1ad2      	subs	r2, r2, r3
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f7ff ff99 	bl	8008d04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	61fb      	str	r3, [r7, #28]
 8008dd6:	e004      	b.n	8008de2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008dde:	2301      	movs	r3, #1
 8008de0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008de2:	f000 fc7b 	bl	80096dc <vPortExitCritical>

	return xReturn;
 8008de6:	69fb      	ldr	r3, [r7, #28]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3720      	adds	r7, #32
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	20005630 	.word	0x20005630
 8008df4:	20005644 	.word	0x20005644

08008df8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008df8:	b480      	push	{r7}
 8008dfa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008dfc:	4b03      	ldr	r3, [pc, #12]	@ (8008e0c <vTaskMissedYield+0x14>)
 8008dfe:	2201      	movs	r2, #1
 8008e00:	601a      	str	r2, [r3, #0]
}
 8008e02:	bf00      	nop
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr
 8008e0c:	20005640 	.word	0x20005640

08008e10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008e18:	f000 f852 	bl	8008ec0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e1c:	4b06      	ldr	r3, [pc, #24]	@ (8008e38 <prvIdleTask+0x28>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d9f9      	bls.n	8008e18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008e24:	4b05      	ldr	r3, [pc, #20]	@ (8008e3c <prvIdleTask+0x2c>)
 8008e26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e2a:	601a      	str	r2, [r3, #0]
 8008e2c:	f3bf 8f4f 	dsb	sy
 8008e30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008e34:	e7f0      	b.n	8008e18 <prvIdleTask+0x8>
 8008e36:	bf00      	nop
 8008e38:	20005530 	.word	0x20005530
 8008e3c:	e000ed04 	.word	0xe000ed04

08008e40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e46:	2300      	movs	r3, #0
 8008e48:	607b      	str	r3, [r7, #4]
 8008e4a:	e00c      	b.n	8008e66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	4613      	mov	r3, r2
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	4413      	add	r3, r2
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	4a12      	ldr	r2, [pc, #72]	@ (8008ea0 <prvInitialiseTaskLists+0x60>)
 8008e58:	4413      	add	r3, r2
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7fe fa7e 	bl	800735c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	3301      	adds	r3, #1
 8008e64:	607b      	str	r3, [r7, #4]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2b06      	cmp	r3, #6
 8008e6a:	d9ef      	bls.n	8008e4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008e6c:	480d      	ldr	r0, [pc, #52]	@ (8008ea4 <prvInitialiseTaskLists+0x64>)
 8008e6e:	f7fe fa75 	bl	800735c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008e72:	480d      	ldr	r0, [pc, #52]	@ (8008ea8 <prvInitialiseTaskLists+0x68>)
 8008e74:	f7fe fa72 	bl	800735c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008e78:	480c      	ldr	r0, [pc, #48]	@ (8008eac <prvInitialiseTaskLists+0x6c>)
 8008e7a:	f7fe fa6f 	bl	800735c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008e7e:	480c      	ldr	r0, [pc, #48]	@ (8008eb0 <prvInitialiseTaskLists+0x70>)
 8008e80:	f7fe fa6c 	bl	800735c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008e84:	480b      	ldr	r0, [pc, #44]	@ (8008eb4 <prvInitialiseTaskLists+0x74>)
 8008e86:	f7fe fa69 	bl	800735c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8008eb8 <prvInitialiseTaskLists+0x78>)
 8008e8c:	4a05      	ldr	r2, [pc, #20]	@ (8008ea4 <prvInitialiseTaskLists+0x64>)
 8008e8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008e90:	4b0a      	ldr	r3, [pc, #40]	@ (8008ebc <prvInitialiseTaskLists+0x7c>)
 8008e92:	4a05      	ldr	r2, [pc, #20]	@ (8008ea8 <prvInitialiseTaskLists+0x68>)
 8008e94:	601a      	str	r2, [r3, #0]
}
 8008e96:	bf00      	nop
 8008e98:	3708      	adds	r7, #8
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	20005530 	.word	0x20005530
 8008ea4:	200055bc 	.word	0x200055bc
 8008ea8:	200055d0 	.word	0x200055d0
 8008eac:	200055ec 	.word	0x200055ec
 8008eb0:	20005600 	.word	0x20005600
 8008eb4:	20005618 	.word	0x20005618
 8008eb8:	200055e4 	.word	0x200055e4
 8008ebc:	200055e8 	.word	0x200055e8

08008ec0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ec6:	e019      	b.n	8008efc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ec8:	f000 fbd6 	bl	8009678 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ecc:	4b10      	ldr	r3, [pc, #64]	@ (8008f10 <prvCheckTasksWaitingTermination+0x50>)
 8008ece:	68db      	ldr	r3, [r3, #12]
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	3304      	adds	r3, #4
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7fe fac9 	bl	8007470 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008ede:	4b0d      	ldr	r3, [pc, #52]	@ (8008f14 <prvCheckTasksWaitingTermination+0x54>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	3b01      	subs	r3, #1
 8008ee4:	4a0b      	ldr	r2, [pc, #44]	@ (8008f14 <prvCheckTasksWaitingTermination+0x54>)
 8008ee6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8008f18 <prvCheckTasksWaitingTermination+0x58>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	3b01      	subs	r3, #1
 8008eee:	4a0a      	ldr	r2, [pc, #40]	@ (8008f18 <prvCheckTasksWaitingTermination+0x58>)
 8008ef0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008ef2:	f000 fbf3 	bl	80096dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 f810 	bl	8008f1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008efc:	4b06      	ldr	r3, [pc, #24]	@ (8008f18 <prvCheckTasksWaitingTermination+0x58>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d1e1      	bne.n	8008ec8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f04:	bf00      	nop
 8008f06:	bf00      	nop
 8008f08:	3708      	adds	r7, #8
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	20005600 	.word	0x20005600
 8008f14:	2000562c 	.word	0x2000562c
 8008f18:	20005614 	.word	0x20005614

08008f1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	334c      	adds	r3, #76	@ 0x4c
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f00e fa3f 	bl	80173ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d108      	bne.n	8008f4a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f000 fd8b 	bl	8009a58 <vPortFree>
				vPortFree( pxTCB );
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 fd88 	bl	8009a58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008f48:	e019      	b.n	8008f7e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d103      	bne.n	8008f5c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 fd7f 	bl	8009a58 <vPortFree>
	}
 8008f5a:	e010      	b.n	8008f7e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008f62:	2b02      	cmp	r3, #2
 8008f64:	d00b      	beq.n	8008f7e <prvDeleteTCB+0x62>
	__asm volatile
 8008f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f6a:	f383 8811 	msr	BASEPRI, r3
 8008f6e:	f3bf 8f6f 	isb	sy
 8008f72:	f3bf 8f4f 	dsb	sy
 8008f76:	60fb      	str	r3, [r7, #12]
}
 8008f78:	bf00      	nop
 8008f7a:	bf00      	nop
 8008f7c:	e7fd      	b.n	8008f7a <prvDeleteTCB+0x5e>
	}
 8008f7e:	bf00      	nop
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
	...

08008f88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8008fc0 <prvResetNextTaskUnblockTime+0x38>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d104      	bne.n	8008fa2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008f98:	4b0a      	ldr	r3, [pc, #40]	@ (8008fc4 <prvResetNextTaskUnblockTime+0x3c>)
 8008f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008fa0:	e008      	b.n	8008fb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fa2:	4b07      	ldr	r3, [pc, #28]	@ (8008fc0 <prvResetNextTaskUnblockTime+0x38>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	4a04      	ldr	r2, [pc, #16]	@ (8008fc4 <prvResetNextTaskUnblockTime+0x3c>)
 8008fb2:	6013      	str	r3, [r2, #0]
}
 8008fb4:	bf00      	nop
 8008fb6:	370c      	adds	r7, #12
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr
 8008fc0:	200055e4 	.word	0x200055e4
 8008fc4:	2000564c 	.word	0x2000564c

08008fc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008fce:	4b0b      	ldr	r3, [pc, #44]	@ (8008ffc <xTaskGetSchedulerState+0x34>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d102      	bne.n	8008fdc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	607b      	str	r3, [r7, #4]
 8008fda:	e008      	b.n	8008fee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fdc:	4b08      	ldr	r3, [pc, #32]	@ (8009000 <xTaskGetSchedulerState+0x38>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d102      	bne.n	8008fea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008fe4:	2302      	movs	r3, #2
 8008fe6:	607b      	str	r3, [r7, #4]
 8008fe8:	e001      	b.n	8008fee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008fea:	2300      	movs	r3, #0
 8008fec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008fee:	687b      	ldr	r3, [r7, #4]
	}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	370c      	adds	r7, #12
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr
 8008ffc:	20005638 	.word	0x20005638
 8009000:	20005654 	.word	0x20005654

08009004 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009010:	2300      	movs	r3, #0
 8009012:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d05e      	beq.n	80090d8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800901e:	4b31      	ldr	r3, [pc, #196]	@ (80090e4 <xTaskPriorityInherit+0xe0>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009024:	429a      	cmp	r2, r3
 8009026:	d24e      	bcs.n	80090c6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	699b      	ldr	r3, [r3, #24]
 800902c:	2b00      	cmp	r3, #0
 800902e:	db06      	blt.n	800903e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009030:	4b2c      	ldr	r3, [pc, #176]	@ (80090e4 <xTaskPriorityInherit+0xe0>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009036:	f1c3 0207 	rsb	r2, r3, #7
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	6959      	ldr	r1, [r3, #20]
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009046:	4613      	mov	r3, r2
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	4413      	add	r3, r2
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	4a26      	ldr	r2, [pc, #152]	@ (80090e8 <xTaskPriorityInherit+0xe4>)
 8009050:	4413      	add	r3, r2
 8009052:	4299      	cmp	r1, r3
 8009054:	d12f      	bne.n	80090b6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	3304      	adds	r3, #4
 800905a:	4618      	mov	r0, r3
 800905c:	f7fe fa08 	bl	8007470 <uxListRemove>
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	d10a      	bne.n	800907c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800906a:	2201      	movs	r2, #1
 800906c:	fa02 f303 	lsl.w	r3, r2, r3
 8009070:	43da      	mvns	r2, r3
 8009072:	4b1e      	ldr	r3, [pc, #120]	@ (80090ec <xTaskPriorityInherit+0xe8>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4013      	ands	r3, r2
 8009078:	4a1c      	ldr	r2, [pc, #112]	@ (80090ec <xTaskPriorityInherit+0xe8>)
 800907a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800907c:	4b19      	ldr	r3, [pc, #100]	@ (80090e4 <xTaskPriorityInherit+0xe0>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800908a:	2201      	movs	r2, #1
 800908c:	409a      	lsls	r2, r3
 800908e:	4b17      	ldr	r3, [pc, #92]	@ (80090ec <xTaskPriorityInherit+0xe8>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4313      	orrs	r3, r2
 8009094:	4a15      	ldr	r2, [pc, #84]	@ (80090ec <xTaskPriorityInherit+0xe8>)
 8009096:	6013      	str	r3, [r2, #0]
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800909c:	4613      	mov	r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	4413      	add	r3, r2
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	4a10      	ldr	r2, [pc, #64]	@ (80090e8 <xTaskPriorityInherit+0xe4>)
 80090a6:	441a      	add	r2, r3
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	3304      	adds	r3, #4
 80090ac:	4619      	mov	r1, r3
 80090ae:	4610      	mov	r0, r2
 80090b0:	f7fe f981 	bl	80073b6 <vListInsertEnd>
 80090b4:	e004      	b.n	80090c0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80090b6:	4b0b      	ldr	r3, [pc, #44]	@ (80090e4 <xTaskPriorityInherit+0xe0>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80090c0:	2301      	movs	r3, #1
 80090c2:	60fb      	str	r3, [r7, #12]
 80090c4:	e008      	b.n	80090d8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090ca:	4b06      	ldr	r3, [pc, #24]	@ (80090e4 <xTaskPriorityInherit+0xe0>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d201      	bcs.n	80090d8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80090d4:	2301      	movs	r3, #1
 80090d6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80090d8:	68fb      	ldr	r3, [r7, #12]
	}
 80090da:	4618      	mov	r0, r3
 80090dc:	3710      	adds	r7, #16
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	2000552c 	.word	0x2000552c
 80090e8:	20005530 	.word	0x20005530
 80090ec:	20005634 	.word	0x20005634

080090f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b086      	sub	sp, #24
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80090fc:	2300      	movs	r3, #0
 80090fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d070      	beq.n	80091e8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009106:	4b3b      	ldr	r3, [pc, #236]	@ (80091f4 <xTaskPriorityDisinherit+0x104>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	693a      	ldr	r2, [r7, #16]
 800910c:	429a      	cmp	r2, r3
 800910e:	d00b      	beq.n	8009128 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009114:	f383 8811 	msr	BASEPRI, r3
 8009118:	f3bf 8f6f 	isb	sy
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	60fb      	str	r3, [r7, #12]
}
 8009122:	bf00      	nop
 8009124:	bf00      	nop
 8009126:	e7fd      	b.n	8009124 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800912c:	2b00      	cmp	r3, #0
 800912e:	d10b      	bne.n	8009148 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009134:	f383 8811 	msr	BASEPRI, r3
 8009138:	f3bf 8f6f 	isb	sy
 800913c:	f3bf 8f4f 	dsb	sy
 8009140:	60bb      	str	r3, [r7, #8]
}
 8009142:	bf00      	nop
 8009144:	bf00      	nop
 8009146:	e7fd      	b.n	8009144 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800914c:	1e5a      	subs	r2, r3, #1
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800915a:	429a      	cmp	r2, r3
 800915c:	d044      	beq.n	80091e8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009162:	2b00      	cmp	r3, #0
 8009164:	d140      	bne.n	80091e8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	3304      	adds	r3, #4
 800916a:	4618      	mov	r0, r3
 800916c:	f7fe f980 	bl	8007470 <uxListRemove>
 8009170:	4603      	mov	r3, r0
 8009172:	2b00      	cmp	r3, #0
 8009174:	d115      	bne.n	80091a2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800917a:	491f      	ldr	r1, [pc, #124]	@ (80091f8 <xTaskPriorityDisinherit+0x108>)
 800917c:	4613      	mov	r3, r2
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	4413      	add	r3, r2
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	440b      	add	r3, r1
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d10a      	bne.n	80091a2 <xTaskPriorityDisinherit+0xb2>
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009190:	2201      	movs	r2, #1
 8009192:	fa02 f303 	lsl.w	r3, r2, r3
 8009196:	43da      	mvns	r2, r3
 8009198:	4b18      	ldr	r3, [pc, #96]	@ (80091fc <xTaskPriorityDisinherit+0x10c>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4013      	ands	r3, r2
 800919e:	4a17      	ldr	r2, [pc, #92]	@ (80091fc <xTaskPriorityDisinherit+0x10c>)
 80091a0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ae:	f1c3 0207 	rsb	r2, r3, #7
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ba:	2201      	movs	r2, #1
 80091bc:	409a      	lsls	r2, r3
 80091be:	4b0f      	ldr	r3, [pc, #60]	@ (80091fc <xTaskPriorityDisinherit+0x10c>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4313      	orrs	r3, r2
 80091c4:	4a0d      	ldr	r2, [pc, #52]	@ (80091fc <xTaskPriorityDisinherit+0x10c>)
 80091c6:	6013      	str	r3, [r2, #0]
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091cc:	4613      	mov	r3, r2
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	4413      	add	r3, r2
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	4a08      	ldr	r2, [pc, #32]	@ (80091f8 <xTaskPriorityDisinherit+0x108>)
 80091d6:	441a      	add	r2, r3
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	3304      	adds	r3, #4
 80091dc:	4619      	mov	r1, r3
 80091de:	4610      	mov	r0, r2
 80091e0:	f7fe f8e9 	bl	80073b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80091e4:	2301      	movs	r3, #1
 80091e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80091e8:	697b      	ldr	r3, [r7, #20]
	}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3718      	adds	r7, #24
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	2000552c 	.word	0x2000552c
 80091f8:	20005530 	.word	0x20005530
 80091fc:	20005634 	.word	0x20005634

08009200 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009200:	b580      	push	{r7, lr}
 8009202:	b088      	sub	sp, #32
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800920e:	2301      	movs	r3, #1
 8009210:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d079      	beq.n	800930c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800921c:	2b00      	cmp	r3, #0
 800921e:	d10b      	bne.n	8009238 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009224:	f383 8811 	msr	BASEPRI, r3
 8009228:	f3bf 8f6f 	isb	sy
 800922c:	f3bf 8f4f 	dsb	sy
 8009230:	60fb      	str	r3, [r7, #12]
}
 8009232:	bf00      	nop
 8009234:	bf00      	nop
 8009236:	e7fd      	b.n	8009234 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800923c:	683a      	ldr	r2, [r7, #0]
 800923e:	429a      	cmp	r2, r3
 8009240:	d902      	bls.n	8009248 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	61fb      	str	r3, [r7, #28]
 8009246:	e002      	b.n	800924e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009248:	69bb      	ldr	r3, [r7, #24]
 800924a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800924c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009252:	69fa      	ldr	r2, [r7, #28]
 8009254:	429a      	cmp	r2, r3
 8009256:	d059      	beq.n	800930c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009258:	69bb      	ldr	r3, [r7, #24]
 800925a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800925c:	697a      	ldr	r2, [r7, #20]
 800925e:	429a      	cmp	r2, r3
 8009260:	d154      	bne.n	800930c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009262:	4b2c      	ldr	r3, [pc, #176]	@ (8009314 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	69ba      	ldr	r2, [r7, #24]
 8009268:	429a      	cmp	r2, r3
 800926a:	d10b      	bne.n	8009284 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800926c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009270:	f383 8811 	msr	BASEPRI, r3
 8009274:	f3bf 8f6f 	isb	sy
 8009278:	f3bf 8f4f 	dsb	sy
 800927c:	60bb      	str	r3, [r7, #8]
}
 800927e:	bf00      	nop
 8009280:	bf00      	nop
 8009282:	e7fd      	b.n	8009280 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009284:	69bb      	ldr	r3, [r7, #24]
 8009286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009288:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	69fa      	ldr	r2, [r7, #28]
 800928e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	699b      	ldr	r3, [r3, #24]
 8009294:	2b00      	cmp	r3, #0
 8009296:	db04      	blt.n	80092a2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	f1c3 0207 	rsb	r2, r3, #7
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	6959      	ldr	r1, [r3, #20]
 80092a6:	693a      	ldr	r2, [r7, #16]
 80092a8:	4613      	mov	r3, r2
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	4413      	add	r3, r2
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	4a19      	ldr	r2, [pc, #100]	@ (8009318 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80092b2:	4413      	add	r3, r2
 80092b4:	4299      	cmp	r1, r3
 80092b6:	d129      	bne.n	800930c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	3304      	adds	r3, #4
 80092bc:	4618      	mov	r0, r3
 80092be:	f7fe f8d7 	bl	8007470 <uxListRemove>
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d10a      	bne.n	80092de <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80092c8:	69bb      	ldr	r3, [r7, #24]
 80092ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092cc:	2201      	movs	r2, #1
 80092ce:	fa02 f303 	lsl.w	r3, r2, r3
 80092d2:	43da      	mvns	r2, r3
 80092d4:	4b11      	ldr	r3, [pc, #68]	@ (800931c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4013      	ands	r3, r2
 80092da:	4a10      	ldr	r2, [pc, #64]	@ (800931c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80092dc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092e2:	2201      	movs	r2, #1
 80092e4:	409a      	lsls	r2, r3
 80092e6:	4b0d      	ldr	r3, [pc, #52]	@ (800931c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4313      	orrs	r3, r2
 80092ec:	4a0b      	ldr	r2, [pc, #44]	@ (800931c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80092ee:	6013      	str	r3, [r2, #0]
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092f4:	4613      	mov	r3, r2
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	4413      	add	r3, r2
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	4a06      	ldr	r2, [pc, #24]	@ (8009318 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80092fe:	441a      	add	r2, r3
 8009300:	69bb      	ldr	r3, [r7, #24]
 8009302:	3304      	adds	r3, #4
 8009304:	4619      	mov	r1, r3
 8009306:	4610      	mov	r0, r2
 8009308:	f7fe f855 	bl	80073b6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800930c:	bf00      	nop
 800930e:	3720      	adds	r7, #32
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}
 8009314:	2000552c 	.word	0x2000552c
 8009318:	20005530 	.word	0x20005530
 800931c:	20005634 	.word	0x20005634

08009320 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009320:	b480      	push	{r7}
 8009322:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009324:	4b07      	ldr	r3, [pc, #28]	@ (8009344 <pvTaskIncrementMutexHeldCount+0x24>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d004      	beq.n	8009336 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800932c:	4b05      	ldr	r3, [pc, #20]	@ (8009344 <pvTaskIncrementMutexHeldCount+0x24>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009332:	3201      	adds	r2, #1
 8009334:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8009336:	4b03      	ldr	r3, [pc, #12]	@ (8009344 <pvTaskIncrementMutexHeldCount+0x24>)
 8009338:	681b      	ldr	r3, [r3, #0]
	}
 800933a:	4618      	mov	r0, r3
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr
 8009344:	2000552c 	.word	0x2000552c

08009348 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009352:	4b29      	ldr	r3, [pc, #164]	@ (80093f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009358:	4b28      	ldr	r3, [pc, #160]	@ (80093fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	3304      	adds	r3, #4
 800935e:	4618      	mov	r0, r3
 8009360:	f7fe f886 	bl	8007470 <uxListRemove>
 8009364:	4603      	mov	r3, r0
 8009366:	2b00      	cmp	r3, #0
 8009368:	d10b      	bne.n	8009382 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800936a:	4b24      	ldr	r3, [pc, #144]	@ (80093fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009370:	2201      	movs	r2, #1
 8009372:	fa02 f303 	lsl.w	r3, r2, r3
 8009376:	43da      	mvns	r2, r3
 8009378:	4b21      	ldr	r3, [pc, #132]	@ (8009400 <prvAddCurrentTaskToDelayedList+0xb8>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4013      	ands	r3, r2
 800937e:	4a20      	ldr	r2, [pc, #128]	@ (8009400 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009380:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009388:	d10a      	bne.n	80093a0 <prvAddCurrentTaskToDelayedList+0x58>
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d007      	beq.n	80093a0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009390:	4b1a      	ldr	r3, [pc, #104]	@ (80093fc <prvAddCurrentTaskToDelayedList+0xb4>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	3304      	adds	r3, #4
 8009396:	4619      	mov	r1, r3
 8009398:	481a      	ldr	r0, [pc, #104]	@ (8009404 <prvAddCurrentTaskToDelayedList+0xbc>)
 800939a:	f7fe f80c 	bl	80073b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800939e:	e026      	b.n	80093ee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80093a0:	68fa      	ldr	r2, [r7, #12]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4413      	add	r3, r2
 80093a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80093a8:	4b14      	ldr	r3, [pc, #80]	@ (80093fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	68ba      	ldr	r2, [r7, #8]
 80093ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80093b0:	68ba      	ldr	r2, [r7, #8]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d209      	bcs.n	80093cc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093b8:	4b13      	ldr	r3, [pc, #76]	@ (8009408 <prvAddCurrentTaskToDelayedList+0xc0>)
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	4b0f      	ldr	r3, [pc, #60]	@ (80093fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	3304      	adds	r3, #4
 80093c2:	4619      	mov	r1, r3
 80093c4:	4610      	mov	r0, r2
 80093c6:	f7fe f81a 	bl	80073fe <vListInsert>
}
 80093ca:	e010      	b.n	80093ee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093cc:	4b0f      	ldr	r3, [pc, #60]	@ (800940c <prvAddCurrentTaskToDelayedList+0xc4>)
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	4b0a      	ldr	r3, [pc, #40]	@ (80093fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	3304      	adds	r3, #4
 80093d6:	4619      	mov	r1, r3
 80093d8:	4610      	mov	r0, r2
 80093da:	f7fe f810 	bl	80073fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80093de:	4b0c      	ldr	r3, [pc, #48]	@ (8009410 <prvAddCurrentTaskToDelayedList+0xc8>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	68ba      	ldr	r2, [r7, #8]
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d202      	bcs.n	80093ee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80093e8:	4a09      	ldr	r2, [pc, #36]	@ (8009410 <prvAddCurrentTaskToDelayedList+0xc8>)
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	6013      	str	r3, [r2, #0]
}
 80093ee:	bf00      	nop
 80093f0:	3710      	adds	r7, #16
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	bf00      	nop
 80093f8:	20005630 	.word	0x20005630
 80093fc:	2000552c 	.word	0x2000552c
 8009400:	20005634 	.word	0x20005634
 8009404:	20005618 	.word	0x20005618
 8009408:	200055e8 	.word	0x200055e8
 800940c:	200055e4 	.word	0x200055e4
 8009410:	2000564c 	.word	0x2000564c

08009414 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009414:	b480      	push	{r7}
 8009416:	b085      	sub	sp, #20
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	3b04      	subs	r3, #4
 8009424:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800942c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	3b04      	subs	r3, #4
 8009432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	f023 0201 	bic.w	r2, r3, #1
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	3b04      	subs	r3, #4
 8009442:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009444:	4a0c      	ldr	r2, [pc, #48]	@ (8009478 <pxPortInitialiseStack+0x64>)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	3b14      	subs	r3, #20
 800944e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	3b04      	subs	r3, #4
 800945a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f06f 0202 	mvn.w	r2, #2
 8009462:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	3b20      	subs	r3, #32
 8009468:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800946a:	68fb      	ldr	r3, [r7, #12]
}
 800946c:	4618      	mov	r0, r3
 800946e:	3714      	adds	r7, #20
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr
 8009478:	0800947d 	.word	0x0800947d

0800947c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800947c:	b480      	push	{r7}
 800947e:	b085      	sub	sp, #20
 8009480:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009482:	2300      	movs	r3, #0
 8009484:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009486:	4b13      	ldr	r3, [pc, #76]	@ (80094d4 <prvTaskExitError+0x58>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800948e:	d00b      	beq.n	80094a8 <prvTaskExitError+0x2c>
	__asm volatile
 8009490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009494:	f383 8811 	msr	BASEPRI, r3
 8009498:	f3bf 8f6f 	isb	sy
 800949c:	f3bf 8f4f 	dsb	sy
 80094a0:	60fb      	str	r3, [r7, #12]
}
 80094a2:	bf00      	nop
 80094a4:	bf00      	nop
 80094a6:	e7fd      	b.n	80094a4 <prvTaskExitError+0x28>
	__asm volatile
 80094a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ac:	f383 8811 	msr	BASEPRI, r3
 80094b0:	f3bf 8f6f 	isb	sy
 80094b4:	f3bf 8f4f 	dsb	sy
 80094b8:	60bb      	str	r3, [r7, #8]
}
 80094ba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80094bc:	bf00      	nop
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d0fc      	beq.n	80094be <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80094c4:	bf00      	nop
 80094c6:	bf00      	nop
 80094c8:	3714      	adds	r7, #20
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	20000024 	.word	0x20000024
	...

080094e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80094e0:	4b07      	ldr	r3, [pc, #28]	@ (8009500 <pxCurrentTCBConst2>)
 80094e2:	6819      	ldr	r1, [r3, #0]
 80094e4:	6808      	ldr	r0, [r1, #0]
 80094e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ea:	f380 8809 	msr	PSP, r0
 80094ee:	f3bf 8f6f 	isb	sy
 80094f2:	f04f 0000 	mov.w	r0, #0
 80094f6:	f380 8811 	msr	BASEPRI, r0
 80094fa:	4770      	bx	lr
 80094fc:	f3af 8000 	nop.w

08009500 <pxCurrentTCBConst2>:
 8009500:	2000552c 	.word	0x2000552c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009504:	bf00      	nop
 8009506:	bf00      	nop

08009508 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009508:	4808      	ldr	r0, [pc, #32]	@ (800952c <prvPortStartFirstTask+0x24>)
 800950a:	6800      	ldr	r0, [r0, #0]
 800950c:	6800      	ldr	r0, [r0, #0]
 800950e:	f380 8808 	msr	MSP, r0
 8009512:	f04f 0000 	mov.w	r0, #0
 8009516:	f380 8814 	msr	CONTROL, r0
 800951a:	b662      	cpsie	i
 800951c:	b661      	cpsie	f
 800951e:	f3bf 8f4f 	dsb	sy
 8009522:	f3bf 8f6f 	isb	sy
 8009526:	df00      	svc	0
 8009528:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800952a:	bf00      	nop
 800952c:	e000ed08 	.word	0xe000ed08

08009530 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b086      	sub	sp, #24
 8009534:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009536:	4b47      	ldr	r3, [pc, #284]	@ (8009654 <xPortStartScheduler+0x124>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a47      	ldr	r2, [pc, #284]	@ (8009658 <xPortStartScheduler+0x128>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d10b      	bne.n	8009558 <xPortStartScheduler+0x28>
	__asm volatile
 8009540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009544:	f383 8811 	msr	BASEPRI, r3
 8009548:	f3bf 8f6f 	isb	sy
 800954c:	f3bf 8f4f 	dsb	sy
 8009550:	613b      	str	r3, [r7, #16]
}
 8009552:	bf00      	nop
 8009554:	bf00      	nop
 8009556:	e7fd      	b.n	8009554 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009558:	4b3e      	ldr	r3, [pc, #248]	@ (8009654 <xPortStartScheduler+0x124>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a3f      	ldr	r2, [pc, #252]	@ (800965c <xPortStartScheduler+0x12c>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d10b      	bne.n	800957a <xPortStartScheduler+0x4a>
	__asm volatile
 8009562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009566:	f383 8811 	msr	BASEPRI, r3
 800956a:	f3bf 8f6f 	isb	sy
 800956e:	f3bf 8f4f 	dsb	sy
 8009572:	60fb      	str	r3, [r7, #12]
}
 8009574:	bf00      	nop
 8009576:	bf00      	nop
 8009578:	e7fd      	b.n	8009576 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800957a:	4b39      	ldr	r3, [pc, #228]	@ (8009660 <xPortStartScheduler+0x130>)
 800957c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	b2db      	uxtb	r3, r3
 8009584:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	22ff      	movs	r2, #255	@ 0xff
 800958a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	b2db      	uxtb	r3, r3
 8009592:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009594:	78fb      	ldrb	r3, [r7, #3]
 8009596:	b2db      	uxtb	r3, r3
 8009598:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800959c:	b2da      	uxtb	r2, r3
 800959e:	4b31      	ldr	r3, [pc, #196]	@ (8009664 <xPortStartScheduler+0x134>)
 80095a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80095a2:	4b31      	ldr	r3, [pc, #196]	@ (8009668 <xPortStartScheduler+0x138>)
 80095a4:	2207      	movs	r2, #7
 80095a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80095a8:	e009      	b.n	80095be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80095aa:	4b2f      	ldr	r3, [pc, #188]	@ (8009668 <xPortStartScheduler+0x138>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	3b01      	subs	r3, #1
 80095b0:	4a2d      	ldr	r2, [pc, #180]	@ (8009668 <xPortStartScheduler+0x138>)
 80095b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80095b4:	78fb      	ldrb	r3, [r7, #3]
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	005b      	lsls	r3, r3, #1
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80095be:	78fb      	ldrb	r3, [r7, #3]
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095c6:	2b80      	cmp	r3, #128	@ 0x80
 80095c8:	d0ef      	beq.n	80095aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80095ca:	4b27      	ldr	r3, [pc, #156]	@ (8009668 <xPortStartScheduler+0x138>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f1c3 0307 	rsb	r3, r3, #7
 80095d2:	2b04      	cmp	r3, #4
 80095d4:	d00b      	beq.n	80095ee <xPortStartScheduler+0xbe>
	__asm volatile
 80095d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095da:	f383 8811 	msr	BASEPRI, r3
 80095de:	f3bf 8f6f 	isb	sy
 80095e2:	f3bf 8f4f 	dsb	sy
 80095e6:	60bb      	str	r3, [r7, #8]
}
 80095e8:	bf00      	nop
 80095ea:	bf00      	nop
 80095ec:	e7fd      	b.n	80095ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80095ee:	4b1e      	ldr	r3, [pc, #120]	@ (8009668 <xPortStartScheduler+0x138>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	021b      	lsls	r3, r3, #8
 80095f4:	4a1c      	ldr	r2, [pc, #112]	@ (8009668 <xPortStartScheduler+0x138>)
 80095f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80095f8:	4b1b      	ldr	r3, [pc, #108]	@ (8009668 <xPortStartScheduler+0x138>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009600:	4a19      	ldr	r2, [pc, #100]	@ (8009668 <xPortStartScheduler+0x138>)
 8009602:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	b2da      	uxtb	r2, r3
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800960c:	4b17      	ldr	r3, [pc, #92]	@ (800966c <xPortStartScheduler+0x13c>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a16      	ldr	r2, [pc, #88]	@ (800966c <xPortStartScheduler+0x13c>)
 8009612:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009616:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009618:	4b14      	ldr	r3, [pc, #80]	@ (800966c <xPortStartScheduler+0x13c>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a13      	ldr	r2, [pc, #76]	@ (800966c <xPortStartScheduler+0x13c>)
 800961e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009622:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009624:	f000 f8da 	bl	80097dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009628:	4b11      	ldr	r3, [pc, #68]	@ (8009670 <xPortStartScheduler+0x140>)
 800962a:	2200      	movs	r2, #0
 800962c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800962e:	f000 f8f9 	bl	8009824 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009632:	4b10      	ldr	r3, [pc, #64]	@ (8009674 <xPortStartScheduler+0x144>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a0f      	ldr	r2, [pc, #60]	@ (8009674 <xPortStartScheduler+0x144>)
 8009638:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800963c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800963e:	f7ff ff63 	bl	8009508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009642:	f7ff fa71 	bl	8008b28 <vTaskSwitchContext>
	prvTaskExitError();
 8009646:	f7ff ff19 	bl	800947c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800964a:	2300      	movs	r3, #0
}
 800964c:	4618      	mov	r0, r3
 800964e:	3718      	adds	r7, #24
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}
 8009654:	e000ed00 	.word	0xe000ed00
 8009658:	410fc271 	.word	0x410fc271
 800965c:	410fc270 	.word	0x410fc270
 8009660:	e000e400 	.word	0xe000e400
 8009664:	20005658 	.word	0x20005658
 8009668:	2000565c 	.word	0x2000565c
 800966c:	e000ed20 	.word	0xe000ed20
 8009670:	20000024 	.word	0x20000024
 8009674:	e000ef34 	.word	0xe000ef34

08009678 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
	__asm volatile
 800967e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009682:	f383 8811 	msr	BASEPRI, r3
 8009686:	f3bf 8f6f 	isb	sy
 800968a:	f3bf 8f4f 	dsb	sy
 800968e:	607b      	str	r3, [r7, #4]
}
 8009690:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009692:	4b10      	ldr	r3, [pc, #64]	@ (80096d4 <vPortEnterCritical+0x5c>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	3301      	adds	r3, #1
 8009698:	4a0e      	ldr	r2, [pc, #56]	@ (80096d4 <vPortEnterCritical+0x5c>)
 800969a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800969c:	4b0d      	ldr	r3, [pc, #52]	@ (80096d4 <vPortEnterCritical+0x5c>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d110      	bne.n	80096c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80096a4:	4b0c      	ldr	r3, [pc, #48]	@ (80096d8 <vPortEnterCritical+0x60>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00b      	beq.n	80096c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80096ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096b2:	f383 8811 	msr	BASEPRI, r3
 80096b6:	f3bf 8f6f 	isb	sy
 80096ba:	f3bf 8f4f 	dsb	sy
 80096be:	603b      	str	r3, [r7, #0]
}
 80096c0:	bf00      	nop
 80096c2:	bf00      	nop
 80096c4:	e7fd      	b.n	80096c2 <vPortEnterCritical+0x4a>
	}
}
 80096c6:	bf00      	nop
 80096c8:	370c      	adds	r7, #12
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	20000024 	.word	0x20000024
 80096d8:	e000ed04 	.word	0xe000ed04

080096dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80096e2:	4b12      	ldr	r3, [pc, #72]	@ (800972c <vPortExitCritical+0x50>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d10b      	bne.n	8009702 <vPortExitCritical+0x26>
	__asm volatile
 80096ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ee:	f383 8811 	msr	BASEPRI, r3
 80096f2:	f3bf 8f6f 	isb	sy
 80096f6:	f3bf 8f4f 	dsb	sy
 80096fa:	607b      	str	r3, [r7, #4]
}
 80096fc:	bf00      	nop
 80096fe:	bf00      	nop
 8009700:	e7fd      	b.n	80096fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009702:	4b0a      	ldr	r3, [pc, #40]	@ (800972c <vPortExitCritical+0x50>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	3b01      	subs	r3, #1
 8009708:	4a08      	ldr	r2, [pc, #32]	@ (800972c <vPortExitCritical+0x50>)
 800970a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800970c:	4b07      	ldr	r3, [pc, #28]	@ (800972c <vPortExitCritical+0x50>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d105      	bne.n	8009720 <vPortExitCritical+0x44>
 8009714:	2300      	movs	r3, #0
 8009716:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	f383 8811 	msr	BASEPRI, r3
}
 800971e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009720:	bf00      	nop
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr
 800972c:	20000024 	.word	0x20000024

08009730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009730:	f3ef 8009 	mrs	r0, PSP
 8009734:	f3bf 8f6f 	isb	sy
 8009738:	4b15      	ldr	r3, [pc, #84]	@ (8009790 <pxCurrentTCBConst>)
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	f01e 0f10 	tst.w	lr, #16
 8009740:	bf08      	it	eq
 8009742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800974a:	6010      	str	r0, [r2, #0]
 800974c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009750:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009754:	f380 8811 	msr	BASEPRI, r0
 8009758:	f3bf 8f4f 	dsb	sy
 800975c:	f3bf 8f6f 	isb	sy
 8009760:	f7ff f9e2 	bl	8008b28 <vTaskSwitchContext>
 8009764:	f04f 0000 	mov.w	r0, #0
 8009768:	f380 8811 	msr	BASEPRI, r0
 800976c:	bc09      	pop	{r0, r3}
 800976e:	6819      	ldr	r1, [r3, #0]
 8009770:	6808      	ldr	r0, [r1, #0]
 8009772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009776:	f01e 0f10 	tst.w	lr, #16
 800977a:	bf08      	it	eq
 800977c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009780:	f380 8809 	msr	PSP, r0
 8009784:	f3bf 8f6f 	isb	sy
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	f3af 8000 	nop.w

08009790 <pxCurrentTCBConst>:
 8009790:	2000552c 	.word	0x2000552c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009794:	bf00      	nop
 8009796:	bf00      	nop

08009798 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
	__asm volatile
 800979e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097a2:	f383 8811 	msr	BASEPRI, r3
 80097a6:	f3bf 8f6f 	isb	sy
 80097aa:	f3bf 8f4f 	dsb	sy
 80097ae:	607b      	str	r3, [r7, #4]
}
 80097b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80097b2:	f7ff f8ff 	bl	80089b4 <xTaskIncrementTick>
 80097b6:	4603      	mov	r3, r0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d003      	beq.n	80097c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80097bc:	4b06      	ldr	r3, [pc, #24]	@ (80097d8 <SysTick_Handler+0x40>)
 80097be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097c2:	601a      	str	r2, [r3, #0]
 80097c4:	2300      	movs	r3, #0
 80097c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	f383 8811 	msr	BASEPRI, r3
}
 80097ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80097d0:	bf00      	nop
 80097d2:	3708      	adds	r7, #8
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	e000ed04 	.word	0xe000ed04

080097dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80097dc:	b480      	push	{r7}
 80097de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80097e0:	4b0b      	ldr	r3, [pc, #44]	@ (8009810 <vPortSetupTimerInterrupt+0x34>)
 80097e2:	2200      	movs	r2, #0
 80097e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80097e6:	4b0b      	ldr	r3, [pc, #44]	@ (8009814 <vPortSetupTimerInterrupt+0x38>)
 80097e8:	2200      	movs	r2, #0
 80097ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80097ec:	4b0a      	ldr	r3, [pc, #40]	@ (8009818 <vPortSetupTimerInterrupt+0x3c>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a0a      	ldr	r2, [pc, #40]	@ (800981c <vPortSetupTimerInterrupt+0x40>)
 80097f2:	fba2 2303 	umull	r2, r3, r2, r3
 80097f6:	099b      	lsrs	r3, r3, #6
 80097f8:	4a09      	ldr	r2, [pc, #36]	@ (8009820 <vPortSetupTimerInterrupt+0x44>)
 80097fa:	3b01      	subs	r3, #1
 80097fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80097fe:	4b04      	ldr	r3, [pc, #16]	@ (8009810 <vPortSetupTimerInterrupt+0x34>)
 8009800:	2207      	movs	r2, #7
 8009802:	601a      	str	r2, [r3, #0]
}
 8009804:	bf00      	nop
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr
 800980e:	bf00      	nop
 8009810:	e000e010 	.word	0xe000e010
 8009814:	e000e018 	.word	0xe000e018
 8009818:	20000004 	.word	0x20000004
 800981c:	10624dd3 	.word	0x10624dd3
 8009820:	e000e014 	.word	0xe000e014

08009824 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009824:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009834 <vPortEnableVFP+0x10>
 8009828:	6801      	ldr	r1, [r0, #0]
 800982a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800982e:	6001      	str	r1, [r0, #0]
 8009830:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009832:	bf00      	nop
 8009834:	e000ed88 	.word	0xe000ed88

08009838 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009838:	b480      	push	{r7}
 800983a:	b085      	sub	sp, #20
 800983c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800983e:	f3ef 8305 	mrs	r3, IPSR
 8009842:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2b0f      	cmp	r3, #15
 8009848:	d915      	bls.n	8009876 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800984a:	4a18      	ldr	r2, [pc, #96]	@ (80098ac <vPortValidateInterruptPriority+0x74>)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	4413      	add	r3, r2
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009854:	4b16      	ldr	r3, [pc, #88]	@ (80098b0 <vPortValidateInterruptPriority+0x78>)
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	7afa      	ldrb	r2, [r7, #11]
 800985a:	429a      	cmp	r2, r3
 800985c:	d20b      	bcs.n	8009876 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800985e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009862:	f383 8811 	msr	BASEPRI, r3
 8009866:	f3bf 8f6f 	isb	sy
 800986a:	f3bf 8f4f 	dsb	sy
 800986e:	607b      	str	r3, [r7, #4]
}
 8009870:	bf00      	nop
 8009872:	bf00      	nop
 8009874:	e7fd      	b.n	8009872 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009876:	4b0f      	ldr	r3, [pc, #60]	@ (80098b4 <vPortValidateInterruptPriority+0x7c>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800987e:	4b0e      	ldr	r3, [pc, #56]	@ (80098b8 <vPortValidateInterruptPriority+0x80>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	429a      	cmp	r2, r3
 8009884:	d90b      	bls.n	800989e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800988a:	f383 8811 	msr	BASEPRI, r3
 800988e:	f3bf 8f6f 	isb	sy
 8009892:	f3bf 8f4f 	dsb	sy
 8009896:	603b      	str	r3, [r7, #0]
}
 8009898:	bf00      	nop
 800989a:	bf00      	nop
 800989c:	e7fd      	b.n	800989a <vPortValidateInterruptPriority+0x62>
	}
 800989e:	bf00      	nop
 80098a0:	3714      	adds	r7, #20
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr
 80098aa:	bf00      	nop
 80098ac:	e000e3f0 	.word	0xe000e3f0
 80098b0:	20005658 	.word	0x20005658
 80098b4:	e000ed0c 	.word	0xe000ed0c
 80098b8:	2000565c 	.word	0x2000565c

080098bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b08a      	sub	sp, #40	@ 0x28
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80098c4:	2300      	movs	r3, #0
 80098c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80098c8:	f7fe ffa6 	bl	8008818 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80098cc:	4b5c      	ldr	r3, [pc, #368]	@ (8009a40 <pvPortMalloc+0x184>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d101      	bne.n	80098d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80098d4:	f000 f924 	bl	8009b20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80098d8:	4b5a      	ldr	r3, [pc, #360]	@ (8009a44 <pvPortMalloc+0x188>)
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	4013      	ands	r3, r2
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	f040 8095 	bne.w	8009a10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d01e      	beq.n	800992a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80098ec:	2208      	movs	r2, #8
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	4413      	add	r3, r2
 80098f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f003 0307 	and.w	r3, r3, #7
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d015      	beq.n	800992a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f023 0307 	bic.w	r3, r3, #7
 8009904:	3308      	adds	r3, #8
 8009906:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f003 0307 	and.w	r3, r3, #7
 800990e:	2b00      	cmp	r3, #0
 8009910:	d00b      	beq.n	800992a <pvPortMalloc+0x6e>
	__asm volatile
 8009912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009916:	f383 8811 	msr	BASEPRI, r3
 800991a:	f3bf 8f6f 	isb	sy
 800991e:	f3bf 8f4f 	dsb	sy
 8009922:	617b      	str	r3, [r7, #20]
}
 8009924:	bf00      	nop
 8009926:	bf00      	nop
 8009928:	e7fd      	b.n	8009926 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d06f      	beq.n	8009a10 <pvPortMalloc+0x154>
 8009930:	4b45      	ldr	r3, [pc, #276]	@ (8009a48 <pvPortMalloc+0x18c>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	429a      	cmp	r2, r3
 8009938:	d86a      	bhi.n	8009a10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800993a:	4b44      	ldr	r3, [pc, #272]	@ (8009a4c <pvPortMalloc+0x190>)
 800993c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800993e:	4b43      	ldr	r3, [pc, #268]	@ (8009a4c <pvPortMalloc+0x190>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009944:	e004      	b.n	8009950 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009948:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800994a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	429a      	cmp	r2, r3
 8009958:	d903      	bls.n	8009962 <pvPortMalloc+0xa6>
 800995a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d1f1      	bne.n	8009946 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009962:	4b37      	ldr	r3, [pc, #220]	@ (8009a40 <pvPortMalloc+0x184>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009968:	429a      	cmp	r2, r3
 800996a:	d051      	beq.n	8009a10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800996c:	6a3b      	ldr	r3, [r7, #32]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2208      	movs	r2, #8
 8009972:	4413      	add	r3, r2
 8009974:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	6a3b      	ldr	r3, [r7, #32]
 800997c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800997e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009980:	685a      	ldr	r2, [r3, #4]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	1ad2      	subs	r2, r2, r3
 8009986:	2308      	movs	r3, #8
 8009988:	005b      	lsls	r3, r3, #1
 800998a:	429a      	cmp	r2, r3
 800998c:	d920      	bls.n	80099d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800998e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4413      	add	r3, r2
 8009994:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009996:	69bb      	ldr	r3, [r7, #24]
 8009998:	f003 0307 	and.w	r3, r3, #7
 800999c:	2b00      	cmp	r3, #0
 800999e:	d00b      	beq.n	80099b8 <pvPortMalloc+0xfc>
	__asm volatile
 80099a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099a4:	f383 8811 	msr	BASEPRI, r3
 80099a8:	f3bf 8f6f 	isb	sy
 80099ac:	f3bf 8f4f 	dsb	sy
 80099b0:	613b      	str	r3, [r7, #16]
}
 80099b2:	bf00      	nop
 80099b4:	bf00      	nop
 80099b6:	e7fd      	b.n	80099b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80099b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ba:	685a      	ldr	r2, [r3, #4]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	1ad2      	subs	r2, r2, r3
 80099c0:	69bb      	ldr	r3, [r7, #24]
 80099c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80099c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80099ca:	69b8      	ldr	r0, [r7, #24]
 80099cc:	f000 f90a 	bl	8009be4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80099d0:	4b1d      	ldr	r3, [pc, #116]	@ (8009a48 <pvPortMalloc+0x18c>)
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	1ad3      	subs	r3, r2, r3
 80099da:	4a1b      	ldr	r2, [pc, #108]	@ (8009a48 <pvPortMalloc+0x18c>)
 80099dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80099de:	4b1a      	ldr	r3, [pc, #104]	@ (8009a48 <pvPortMalloc+0x18c>)
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	4b1b      	ldr	r3, [pc, #108]	@ (8009a50 <pvPortMalloc+0x194>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d203      	bcs.n	80099f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80099ea:	4b17      	ldr	r3, [pc, #92]	@ (8009a48 <pvPortMalloc+0x18c>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4a18      	ldr	r2, [pc, #96]	@ (8009a50 <pvPortMalloc+0x194>)
 80099f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80099f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f4:	685a      	ldr	r2, [r3, #4]
 80099f6:	4b13      	ldr	r3, [pc, #76]	@ (8009a44 <pvPortMalloc+0x188>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	431a      	orrs	r2, r3
 80099fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a02:	2200      	movs	r2, #0
 8009a04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009a06:	4b13      	ldr	r3, [pc, #76]	@ (8009a54 <pvPortMalloc+0x198>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	4a11      	ldr	r2, [pc, #68]	@ (8009a54 <pvPortMalloc+0x198>)
 8009a0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009a10:	f7fe ff10 	bl	8008834 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a14:	69fb      	ldr	r3, [r7, #28]
 8009a16:	f003 0307 	and.w	r3, r3, #7
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d00b      	beq.n	8009a36 <pvPortMalloc+0x17a>
	__asm volatile
 8009a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a22:	f383 8811 	msr	BASEPRI, r3
 8009a26:	f3bf 8f6f 	isb	sy
 8009a2a:	f3bf 8f4f 	dsb	sy
 8009a2e:	60fb      	str	r3, [r7, #12]
}
 8009a30:	bf00      	nop
 8009a32:	bf00      	nop
 8009a34:	e7fd      	b.n	8009a32 <pvPortMalloc+0x176>
	return pvReturn;
 8009a36:	69fb      	ldr	r3, [r7, #28]
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3728      	adds	r7, #40	@ 0x28
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	20009268 	.word	0x20009268
 8009a44:	2000927c 	.word	0x2000927c
 8009a48:	2000926c 	.word	0x2000926c
 8009a4c:	20009260 	.word	0x20009260
 8009a50:	20009270 	.word	0x20009270
 8009a54:	20009274 	.word	0x20009274

08009a58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b086      	sub	sp, #24
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d04f      	beq.n	8009b0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009a6a:	2308      	movs	r3, #8
 8009a6c:	425b      	negs	r3, r3
 8009a6e:	697a      	ldr	r2, [r7, #20]
 8009a70:	4413      	add	r3, r2
 8009a72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	685a      	ldr	r2, [r3, #4]
 8009a7c:	4b25      	ldr	r3, [pc, #148]	@ (8009b14 <vPortFree+0xbc>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4013      	ands	r3, r2
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d10b      	bne.n	8009a9e <vPortFree+0x46>
	__asm volatile
 8009a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a8a:	f383 8811 	msr	BASEPRI, r3
 8009a8e:	f3bf 8f6f 	isb	sy
 8009a92:	f3bf 8f4f 	dsb	sy
 8009a96:	60fb      	str	r3, [r7, #12]
}
 8009a98:	bf00      	nop
 8009a9a:	bf00      	nop
 8009a9c:	e7fd      	b.n	8009a9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d00b      	beq.n	8009abe <vPortFree+0x66>
	__asm volatile
 8009aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aaa:	f383 8811 	msr	BASEPRI, r3
 8009aae:	f3bf 8f6f 	isb	sy
 8009ab2:	f3bf 8f4f 	dsb	sy
 8009ab6:	60bb      	str	r3, [r7, #8]
}
 8009ab8:	bf00      	nop
 8009aba:	bf00      	nop
 8009abc:	e7fd      	b.n	8009aba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	685a      	ldr	r2, [r3, #4]
 8009ac2:	4b14      	ldr	r3, [pc, #80]	@ (8009b14 <vPortFree+0xbc>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4013      	ands	r3, r2
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d01e      	beq.n	8009b0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d11a      	bne.n	8009b0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	685a      	ldr	r2, [r3, #4]
 8009ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8009b14 <vPortFree+0xbc>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	43db      	mvns	r3, r3
 8009ade:	401a      	ands	r2, r3
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ae4:	f7fe fe98 	bl	8008818 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	685a      	ldr	r2, [r3, #4]
 8009aec:	4b0a      	ldr	r3, [pc, #40]	@ (8009b18 <vPortFree+0xc0>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4413      	add	r3, r2
 8009af2:	4a09      	ldr	r2, [pc, #36]	@ (8009b18 <vPortFree+0xc0>)
 8009af4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009af6:	6938      	ldr	r0, [r7, #16]
 8009af8:	f000 f874 	bl	8009be4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009afc:	4b07      	ldr	r3, [pc, #28]	@ (8009b1c <vPortFree+0xc4>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	3301      	adds	r3, #1
 8009b02:	4a06      	ldr	r2, [pc, #24]	@ (8009b1c <vPortFree+0xc4>)
 8009b04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009b06:	f7fe fe95 	bl	8008834 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009b0a:	bf00      	nop
 8009b0c:	3718      	adds	r7, #24
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	2000927c 	.word	0x2000927c
 8009b18:	2000926c 	.word	0x2000926c
 8009b1c:	20009278 	.word	0x20009278

08009b20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009b20:	b480      	push	{r7}
 8009b22:	b085      	sub	sp, #20
 8009b24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b26:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009b2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009b2c:	4b27      	ldr	r3, [pc, #156]	@ (8009bcc <prvHeapInit+0xac>)
 8009b2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f003 0307 	and.w	r3, r3, #7
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d00c      	beq.n	8009b54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	3307      	adds	r3, #7
 8009b3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f023 0307 	bic.w	r3, r3, #7
 8009b46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b48:	68ba      	ldr	r2, [r7, #8]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	1ad3      	subs	r3, r2, r3
 8009b4e:	4a1f      	ldr	r2, [pc, #124]	@ (8009bcc <prvHeapInit+0xac>)
 8009b50:	4413      	add	r3, r2
 8009b52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009b58:	4a1d      	ldr	r2, [pc, #116]	@ (8009bd0 <prvHeapInit+0xb0>)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8009bd0 <prvHeapInit+0xb0>)
 8009b60:	2200      	movs	r2, #0
 8009b62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	68ba      	ldr	r2, [r7, #8]
 8009b68:	4413      	add	r3, r2
 8009b6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009b6c:	2208      	movs	r2, #8
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	1a9b      	subs	r3, r3, r2
 8009b72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f023 0307 	bic.w	r3, r3, #7
 8009b7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	4a15      	ldr	r2, [pc, #84]	@ (8009bd4 <prvHeapInit+0xb4>)
 8009b80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009b82:	4b14      	ldr	r3, [pc, #80]	@ (8009bd4 <prvHeapInit+0xb4>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	2200      	movs	r2, #0
 8009b88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009b8a:	4b12      	ldr	r3, [pc, #72]	@ (8009bd4 <prvHeapInit+0xb4>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	68fa      	ldr	r2, [r7, #12]
 8009b9a:	1ad2      	subs	r2, r2, r3
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8009bd4 <prvHeapInit+0xb4>)
 8009ba2:	681a      	ldr	r2, [r3, #0]
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	4a0a      	ldr	r2, [pc, #40]	@ (8009bd8 <prvHeapInit+0xb8>)
 8009bae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	4a09      	ldr	r2, [pc, #36]	@ (8009bdc <prvHeapInit+0xbc>)
 8009bb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009bb8:	4b09      	ldr	r3, [pc, #36]	@ (8009be0 <prvHeapInit+0xc0>)
 8009bba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009bbe:	601a      	str	r2, [r3, #0]
}
 8009bc0:	bf00      	nop
 8009bc2:	3714      	adds	r7, #20
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr
 8009bcc:	20005660 	.word	0x20005660
 8009bd0:	20009260 	.word	0x20009260
 8009bd4:	20009268 	.word	0x20009268
 8009bd8:	20009270 	.word	0x20009270
 8009bdc:	2000926c 	.word	0x2000926c
 8009be0:	2000927c 	.word	0x2000927c

08009be4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009be4:	b480      	push	{r7}
 8009be6:	b085      	sub	sp, #20
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009bec:	4b28      	ldr	r3, [pc, #160]	@ (8009c90 <prvInsertBlockIntoFreeList+0xac>)
 8009bee:	60fb      	str	r3, [r7, #12]
 8009bf0:	e002      	b.n	8009bf8 <prvInsertBlockIntoFreeList+0x14>
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	60fb      	str	r3, [r7, #12]
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d8f7      	bhi.n	8009bf2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	68ba      	ldr	r2, [r7, #8]
 8009c0c:	4413      	add	r3, r2
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d108      	bne.n	8009c26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	685a      	ldr	r2, [r3, #4]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	441a      	add	r2, r3
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	68ba      	ldr	r2, [r7, #8]
 8009c30:	441a      	add	r2, r3
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d118      	bne.n	8009c6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	4b15      	ldr	r3, [pc, #84]	@ (8009c94 <prvInsertBlockIntoFreeList+0xb0>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d00d      	beq.n	8009c62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	685a      	ldr	r2, [r3, #4]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	441a      	add	r2, r3
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	601a      	str	r2, [r3, #0]
 8009c60:	e008      	b.n	8009c74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009c62:	4b0c      	ldr	r3, [pc, #48]	@ (8009c94 <prvInsertBlockIntoFreeList+0xb0>)
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	601a      	str	r2, [r3, #0]
 8009c6a:	e003      	b.n	8009c74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681a      	ldr	r2, [r3, #0]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009c74:	68fa      	ldr	r2, [r7, #12]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d002      	beq.n	8009c82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c82:	bf00      	nop
 8009c84:	3714      	adds	r7, #20
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr
 8009c8e:	bf00      	nop
 8009c90:	20009260 	.word	0x20009260
 8009c94:	20009268 	.word	0x20009268

08009c98 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b084      	sub	sp, #16
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009ca2:	f007 fc33 	bl	801150c <sys_timeouts_sleeptime>
 8009ca6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cae:	d10b      	bne.n	8009cc8 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009cb0:	4813      	ldr	r0, [pc, #76]	@ (8009d00 <tcpip_timeouts_mbox_fetch+0x68>)
 8009cb2:	f00d f880 	bl	8016db6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	6839      	ldr	r1, [r7, #0]
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f00c fff2 	bl	8016ca4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009cc0:	480f      	ldr	r0, [pc, #60]	@ (8009d00 <tcpip_timeouts_mbox_fetch+0x68>)
 8009cc2:	f00d f869 	bl	8016d98 <sys_mutex_lock>
    return;
 8009cc6:	e018      	b.n	8009cfa <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d102      	bne.n	8009cd4 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009cce:	f007 fbe3 	bl	8011498 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009cd2:	e7e6      	b.n	8009ca2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009cd4:	480a      	ldr	r0, [pc, #40]	@ (8009d00 <tcpip_timeouts_mbox_fetch+0x68>)
 8009cd6:	f00d f86e 	bl	8016db6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	6839      	ldr	r1, [r7, #0]
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f00c ffe0 	bl	8016ca4 <sys_arch_mbox_fetch>
 8009ce4:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8009ce6:	4806      	ldr	r0, [pc, #24]	@ (8009d00 <tcpip_timeouts_mbox_fetch+0x68>)
 8009ce8:	f00d f856 	bl	8016d98 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cf2:	d102      	bne.n	8009cfa <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009cf4:	f007 fbd0 	bl	8011498 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009cf8:	e7d3      	b.n	8009ca2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8009cfa:	3710      	adds	r7, #16
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}
 8009d00:	2000928c 	.word	0x2000928c

08009d04 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8009d0c:	4810      	ldr	r0, [pc, #64]	@ (8009d50 <tcpip_thread+0x4c>)
 8009d0e:	f00d f843 	bl	8016d98 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8009d12:	4b10      	ldr	r3, [pc, #64]	@ (8009d54 <tcpip_thread+0x50>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d005      	beq.n	8009d26 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8009d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8009d54 <tcpip_thread+0x50>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a0e      	ldr	r2, [pc, #56]	@ (8009d58 <tcpip_thread+0x54>)
 8009d20:	6812      	ldr	r2, [r2, #0]
 8009d22:	4610      	mov	r0, r2
 8009d24:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009d26:	f107 030c 	add.w	r3, r7, #12
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	480b      	ldr	r0, [pc, #44]	@ (8009d5c <tcpip_thread+0x58>)
 8009d2e:	f7ff ffb3 	bl	8009c98 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d106      	bne.n	8009d46 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009d38:	4b09      	ldr	r3, [pc, #36]	@ (8009d60 <tcpip_thread+0x5c>)
 8009d3a:	2291      	movs	r2, #145	@ 0x91
 8009d3c:	4909      	ldr	r1, [pc, #36]	@ (8009d64 <tcpip_thread+0x60>)
 8009d3e:	480a      	ldr	r0, [pc, #40]	@ (8009d68 <tcpip_thread+0x64>)
 8009d40:	f00d f98a 	bl	8017058 <iprintf>
      continue;
 8009d44:	e003      	b.n	8009d4e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f000 f80f 	bl	8009d6c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009d4e:	e7ea      	b.n	8009d26 <tcpip_thread+0x22>
 8009d50:	2000928c 	.word	0x2000928c
 8009d54:	20009280 	.word	0x20009280
 8009d58:	20009284 	.word	0x20009284
 8009d5c:	20009288 	.word	0x20009288
 8009d60:	0801857c 	.word	0x0801857c
 8009d64:	080185ac 	.word	0x080185ac
 8009d68:	080185cc 	.word	0x080185cc

08009d6c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b082      	sub	sp, #8
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	2b02      	cmp	r3, #2
 8009d7a:	d026      	beq.n	8009dca <tcpip_thread_handle_msg+0x5e>
 8009d7c:	2b02      	cmp	r3, #2
 8009d7e:	dc2b      	bgt.n	8009dd8 <tcpip_thread_handle_msg+0x6c>
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d002      	beq.n	8009d8a <tcpip_thread_handle_msg+0x1e>
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d015      	beq.n	8009db4 <tcpip_thread_handle_msg+0x48>
 8009d88:	e026      	b.n	8009dd8 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	68db      	ldr	r3, [r3, #12]
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	6850      	ldr	r0, [r2, #4]
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	6892      	ldr	r2, [r2, #8]
 8009d96:	4611      	mov	r1, r2
 8009d98:	4798      	blx	r3
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d004      	beq.n	8009daa <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	4618      	mov	r0, r3
 8009da6:	f001 fe6d 	bl	800ba84 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009daa:	6879      	ldr	r1, [r7, #4]
 8009dac:	2009      	movs	r0, #9
 8009dae:	f000 fed3 	bl	800ab58 <memp_free>
      break;
 8009db2:	e018      	b.n	8009de6 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	6892      	ldr	r2, [r2, #8]
 8009dbc:	4610      	mov	r0, r2
 8009dbe:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009dc0:	6879      	ldr	r1, [r7, #4]
 8009dc2:	2008      	movs	r0, #8
 8009dc4:	f000 fec8 	bl	800ab58 <memp_free>
      break;
 8009dc8:	e00d      	b.n	8009de6 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	6892      	ldr	r2, [r2, #8]
 8009dd2:	4610      	mov	r0, r2
 8009dd4:	4798      	blx	r3
      break;
 8009dd6:	e006      	b.n	8009de6 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009dd8:	4b05      	ldr	r3, [pc, #20]	@ (8009df0 <tcpip_thread_handle_msg+0x84>)
 8009dda:	22cf      	movs	r2, #207	@ 0xcf
 8009ddc:	4905      	ldr	r1, [pc, #20]	@ (8009df4 <tcpip_thread_handle_msg+0x88>)
 8009dde:	4806      	ldr	r0, [pc, #24]	@ (8009df8 <tcpip_thread_handle_msg+0x8c>)
 8009de0:	f00d f93a 	bl	8017058 <iprintf>
      break;
 8009de4:	bf00      	nop
  }
}
 8009de6:	bf00      	nop
 8009de8:	3708      	adds	r7, #8
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	0801857c 	.word	0x0801857c
 8009df4:	080185ac 	.word	0x080185ac
 8009df8:	080185cc 	.word	0x080185cc

08009dfc <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b086      	sub	sp, #24
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009e08:	481a      	ldr	r0, [pc, #104]	@ (8009e74 <tcpip_inpkt+0x78>)
 8009e0a:	f00c ff8a 	bl	8016d22 <sys_mbox_valid>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d105      	bne.n	8009e20 <tcpip_inpkt+0x24>
 8009e14:	4b18      	ldr	r3, [pc, #96]	@ (8009e78 <tcpip_inpkt+0x7c>)
 8009e16:	22fc      	movs	r2, #252	@ 0xfc
 8009e18:	4918      	ldr	r1, [pc, #96]	@ (8009e7c <tcpip_inpkt+0x80>)
 8009e1a:	4819      	ldr	r0, [pc, #100]	@ (8009e80 <tcpip_inpkt+0x84>)
 8009e1c:	f00d f91c 	bl	8017058 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009e20:	2009      	movs	r0, #9
 8009e22:	f000 fe23 	bl	800aa6c <memp_malloc>
 8009e26:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d102      	bne.n	8009e34 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e32:	e01a      	b.n	8009e6a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	2200      	movs	r2, #0
 8009e38:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	68fa      	ldr	r2, [r7, #12]
 8009e3e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	68ba      	ldr	r2, [r7, #8]
 8009e44:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009e4c:	6979      	ldr	r1, [r7, #20]
 8009e4e:	4809      	ldr	r0, [pc, #36]	@ (8009e74 <tcpip_inpkt+0x78>)
 8009e50:	f00c ff0e 	bl	8016c70 <sys_mbox_trypost>
 8009e54:	4603      	mov	r3, r0
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d006      	beq.n	8009e68 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009e5a:	6979      	ldr	r1, [r7, #20]
 8009e5c:	2009      	movs	r0, #9
 8009e5e:	f000 fe7b 	bl	800ab58 <memp_free>
    return ERR_MEM;
 8009e62:	f04f 33ff 	mov.w	r3, #4294967295
 8009e66:	e000      	b.n	8009e6a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009e68:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3718      	adds	r7, #24
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	20009288 	.word	0x20009288
 8009e78:	0801857c 	.word	0x0801857c
 8009e7c:	080185f4 	.word	0x080185f4
 8009e80:	080185cc 	.word	0x080185cc

08009e84 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e94:	f003 0318 	and.w	r3, r3, #24
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d006      	beq.n	8009eaa <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009e9c:	4a08      	ldr	r2, [pc, #32]	@ (8009ec0 <tcpip_input+0x3c>)
 8009e9e:	6839      	ldr	r1, [r7, #0]
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f7ff ffab 	bl	8009dfc <tcpip_inpkt>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	e005      	b.n	8009eb6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8009eaa:	4a06      	ldr	r2, [pc, #24]	@ (8009ec4 <tcpip_input+0x40>)
 8009eac:	6839      	ldr	r1, [r7, #0]
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f7ff ffa4 	bl	8009dfc <tcpip_inpkt>
 8009eb4:	4603      	mov	r3, r0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3708      	adds	r7, #8
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	08016a81 	.word	0x08016a81
 8009ec4:	080156d1 	.word	0x080156d1

08009ec8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009ed2:	4819      	ldr	r0, [pc, #100]	@ (8009f38 <tcpip_try_callback+0x70>)
 8009ed4:	f00c ff25 	bl	8016d22 <sys_mbox_valid>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d106      	bne.n	8009eec <tcpip_try_callback+0x24>
 8009ede:	4b17      	ldr	r3, [pc, #92]	@ (8009f3c <tcpip_try_callback+0x74>)
 8009ee0:	f240 125d 	movw	r2, #349	@ 0x15d
 8009ee4:	4916      	ldr	r1, [pc, #88]	@ (8009f40 <tcpip_try_callback+0x78>)
 8009ee6:	4817      	ldr	r0, [pc, #92]	@ (8009f44 <tcpip_try_callback+0x7c>)
 8009ee8:	f00d f8b6 	bl	8017058 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009eec:	2008      	movs	r0, #8
 8009eee:	f000 fdbd 	bl	800aa6c <memp_malloc>
 8009ef2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d102      	bne.n	8009f00 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8009efa:	f04f 33ff 	mov.w	r3, #4294967295
 8009efe:	e017      	b.n	8009f30 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2201      	movs	r2, #1
 8009f04:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	683a      	ldr	r2, [r7, #0]
 8009f10:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009f12:	68f9      	ldr	r1, [r7, #12]
 8009f14:	4808      	ldr	r0, [pc, #32]	@ (8009f38 <tcpip_try_callback+0x70>)
 8009f16:	f00c feab 	bl	8016c70 <sys_mbox_trypost>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d006      	beq.n	8009f2e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8009f20:	68f9      	ldr	r1, [r7, #12]
 8009f22:	2008      	movs	r0, #8
 8009f24:	f000 fe18 	bl	800ab58 <memp_free>
    return ERR_MEM;
 8009f28:	f04f 33ff 	mov.w	r3, #4294967295
 8009f2c:	e000      	b.n	8009f30 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8009f2e:	2300      	movs	r3, #0
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3710      	adds	r7, #16
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}
 8009f38:	20009288 	.word	0x20009288
 8009f3c:	0801857c 	.word	0x0801857c
 8009f40:	080185f4 	.word	0x080185f4
 8009f44:	080185cc 	.word	0x080185cc

08009f48 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af02      	add	r7, sp, #8
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009f52:	f000 f8e0 	bl	800a116 <lwip_init>

  tcpip_init_done = initfunc;
 8009f56:	4a17      	ldr	r2, [pc, #92]	@ (8009fb4 <tcpip_init+0x6c>)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009f5c:	4a16      	ldr	r2, [pc, #88]	@ (8009fb8 <tcpip_init+0x70>)
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009f62:	2106      	movs	r1, #6
 8009f64:	4815      	ldr	r0, [pc, #84]	@ (8009fbc <tcpip_init+0x74>)
 8009f66:	f00c fe61 	bl	8016c2c <sys_mbox_new>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d006      	beq.n	8009f7e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009f70:	4b13      	ldr	r3, [pc, #76]	@ (8009fc0 <tcpip_init+0x78>)
 8009f72:	f240 2261 	movw	r2, #609	@ 0x261
 8009f76:	4913      	ldr	r1, [pc, #76]	@ (8009fc4 <tcpip_init+0x7c>)
 8009f78:	4813      	ldr	r0, [pc, #76]	@ (8009fc8 <tcpip_init+0x80>)
 8009f7a:	f00d f86d 	bl	8017058 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009f7e:	4813      	ldr	r0, [pc, #76]	@ (8009fcc <tcpip_init+0x84>)
 8009f80:	f00c feee 	bl	8016d60 <sys_mutex_new>
 8009f84:	4603      	mov	r3, r0
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d006      	beq.n	8009f98 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8009f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8009fc0 <tcpip_init+0x78>)
 8009f8c:	f240 2265 	movw	r2, #613	@ 0x265
 8009f90:	490f      	ldr	r1, [pc, #60]	@ (8009fd0 <tcpip_init+0x88>)
 8009f92:	480d      	ldr	r0, [pc, #52]	@ (8009fc8 <tcpip_init+0x80>)
 8009f94:	f00d f860 	bl	8017058 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8009f98:	2300      	movs	r3, #0
 8009f9a:	9300      	str	r3, [sp, #0]
 8009f9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	490c      	ldr	r1, [pc, #48]	@ (8009fd4 <tcpip_init+0x8c>)
 8009fa4:	480c      	ldr	r0, [pc, #48]	@ (8009fd8 <tcpip_init+0x90>)
 8009fa6:	f00c ff13 	bl	8016dd0 <sys_thread_new>
}
 8009faa:	bf00      	nop
 8009fac:	3708      	adds	r7, #8
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	bf00      	nop
 8009fb4:	20009280 	.word	0x20009280
 8009fb8:	20009284 	.word	0x20009284
 8009fbc:	20009288 	.word	0x20009288
 8009fc0:	0801857c 	.word	0x0801857c
 8009fc4:	08018604 	.word	0x08018604
 8009fc8:	080185cc 	.word	0x080185cc
 8009fcc:	2000928c 	.word	0x2000928c
 8009fd0:	08018628 	.word	0x08018628
 8009fd4:	08009d05 	.word	0x08009d05
 8009fd8:	0801864c 	.word	0x0801864c

08009fdc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b083      	sub	sp, #12
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009fe6:	88fb      	ldrh	r3, [r7, #6]
 8009fe8:	021b      	lsls	r3, r3, #8
 8009fea:	b21a      	sxth	r2, r3
 8009fec:	88fb      	ldrh	r3, [r7, #6]
 8009fee:	0a1b      	lsrs	r3, r3, #8
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	b21b      	sxth	r3, r3
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	b21b      	sxth	r3, r3
 8009ff8:	b29b      	uxth	r3, r3
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	370c      	adds	r7, #12
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr

0800a006 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a006:	b480      	push	{r7}
 800a008:	b083      	sub	sp, #12
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	061a      	lsls	r2, r3, #24
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	021b      	lsls	r3, r3, #8
 800a016:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a01a:	431a      	orrs	r2, r3
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	0a1b      	lsrs	r3, r3, #8
 800a020:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a024:	431a      	orrs	r2, r3
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	0e1b      	lsrs	r3, r3, #24
 800a02a:	4313      	orrs	r3, r2
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	370c      	adds	r7, #12
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr

0800a038 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800a038:	b480      	push	{r7}
 800a03a:	b089      	sub	sp, #36	@ 0x24
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800a046:	2300      	movs	r3, #0
 800a048:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800a04a:	2300      	movs	r3, #0
 800a04c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800a04e:	69fb      	ldr	r3, [r7, #28]
 800a050:	f003 0301 	and.w	r3, r3, #1
 800a054:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d00d      	beq.n	800a078 <lwip_standard_chksum+0x40>
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	dd0a      	ble.n	800a078 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800a062:	69fa      	ldr	r2, [r7, #28]
 800a064:	1c53      	adds	r3, r2, #1
 800a066:	61fb      	str	r3, [r7, #28]
 800a068:	f107 030e 	add.w	r3, r7, #14
 800a06c:	3301      	adds	r3, #1
 800a06e:	7812      	ldrb	r2, [r2, #0]
 800a070:	701a      	strb	r2, [r3, #0]
    len--;
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	3b01      	subs	r3, #1
 800a076:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800a078:	69fb      	ldr	r3, [r7, #28]
 800a07a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800a07c:	e00a      	b.n	800a094 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800a07e:	69bb      	ldr	r3, [r7, #24]
 800a080:	1c9a      	adds	r2, r3, #2
 800a082:	61ba      	str	r2, [r7, #24]
 800a084:	881b      	ldrh	r3, [r3, #0]
 800a086:	461a      	mov	r2, r3
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	4413      	add	r3, r2
 800a08c:	617b      	str	r3, [r7, #20]
    len -= 2;
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	3b02      	subs	r3, #2
 800a092:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	2b01      	cmp	r3, #1
 800a098:	dcf1      	bgt.n	800a07e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	dd04      	ble.n	800a0aa <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800a0a0:	f107 030e 	add.w	r3, r7, #14
 800a0a4:	69ba      	ldr	r2, [r7, #24]
 800a0a6:	7812      	ldrb	r2, [r2, #0]
 800a0a8:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800a0aa:	89fb      	ldrh	r3, [r7, #14]
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	4413      	add	r3, r2
 800a0b2:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	0c1a      	lsrs	r2, r3, #16
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	4413      	add	r3, r2
 800a0be:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	0c1a      	lsrs	r2, r3, #16
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	4413      	add	r3, r2
 800a0ca:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d007      	beq.n	800a0e2 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	021b      	lsls	r3, r3, #8
 800a0d6:	b29a      	uxth	r2, r3
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	0a1b      	lsrs	r3, r3, #8
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	b29b      	uxth	r3, r3
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3724      	adds	r7, #36	@ 0x24
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f0:	4770      	bx	lr

0800a0f2 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800a0f2:	b580      	push	{r7, lr}
 800a0f4:	b082      	sub	sp, #8
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	6078      	str	r0, [r7, #4]
 800a0fa:	460b      	mov	r3, r1
 800a0fc:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800a0fe:	887b      	ldrh	r3, [r7, #2]
 800a100:	4619      	mov	r1, r3
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f7ff ff98 	bl	800a038 <lwip_standard_chksum>
 800a108:	4603      	mov	r3, r0
 800a10a:	43db      	mvns	r3, r3
 800a10c:	b29b      	uxth	r3, r3
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3708      	adds	r7, #8
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}

0800a116 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a116:	b580      	push	{r7, lr}
 800a118:	b082      	sub	sp, #8
 800a11a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a11c:	2300      	movs	r3, #0
 800a11e:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a120:	f00c fe10 	bl	8016d44 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a124:	f000 f8d6 	bl	800a2d4 <mem_init>
  memp_init();
 800a128:	f000 fc32 	bl	800a990 <memp_init>
  pbuf_init();
  netif_init();
 800a12c:	f000 fd3e 	bl	800abac <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a130:	f007 fa24 	bl	801157c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a134:	f001 ff50 	bl	800bfd8 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
 800a138:	f00a ff78 	bl	801502c <igmp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a13c:	f007 f964 	bl	8011408 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a140:	bf00      	nop
 800a142:	3708      	adds	r7, #8
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a148:	b480      	push	{r7}
 800a14a:	b083      	sub	sp, #12
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	4603      	mov	r3, r0
 800a150:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a152:	4b05      	ldr	r3, [pc, #20]	@ (800a168 <ptr_to_mem+0x20>)
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	88fb      	ldrh	r3, [r7, #6]
 800a158:	4413      	add	r3, r2
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	370c      	adds	r7, #12
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr
 800a166:	bf00      	nop
 800a168:	200098fc 	.word	0x200098fc

0800a16c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b083      	sub	sp, #12
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a174:	4b05      	ldr	r3, [pc, #20]	@ (800a18c <mem_to_ptr+0x20>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	1ad3      	subs	r3, r2, r3
 800a17c:	b29b      	uxth	r3, r3
}
 800a17e:	4618      	mov	r0, r3
 800a180:	370c      	adds	r7, #12
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr
 800a18a:	bf00      	nop
 800a18c:	200098fc 	.word	0x200098fc

0800a190 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a190:	b590      	push	{r4, r7, lr}
 800a192:	b085      	sub	sp, #20
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a198:	4b45      	ldr	r3, [pc, #276]	@ (800a2b0 <plug_holes+0x120>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d206      	bcs.n	800a1b0 <plug_holes+0x20>
 800a1a2:	4b44      	ldr	r3, [pc, #272]	@ (800a2b4 <plug_holes+0x124>)
 800a1a4:	f240 12df 	movw	r2, #479	@ 0x1df
 800a1a8:	4943      	ldr	r1, [pc, #268]	@ (800a2b8 <plug_holes+0x128>)
 800a1aa:	4844      	ldr	r0, [pc, #272]	@ (800a2bc <plug_holes+0x12c>)
 800a1ac:	f00c ff54 	bl	8017058 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a1b0:	4b43      	ldr	r3, [pc, #268]	@ (800a2c0 <plug_holes+0x130>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d306      	bcc.n	800a1c8 <plug_holes+0x38>
 800a1ba:	4b3e      	ldr	r3, [pc, #248]	@ (800a2b4 <plug_holes+0x124>)
 800a1bc:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800a1c0:	4940      	ldr	r1, [pc, #256]	@ (800a2c4 <plug_holes+0x134>)
 800a1c2:	483e      	ldr	r0, [pc, #248]	@ (800a2bc <plug_holes+0x12c>)
 800a1c4:	f00c ff48 	bl	8017058 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	791b      	ldrb	r3, [r3, #4]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d006      	beq.n	800a1de <plug_holes+0x4e>
 800a1d0:	4b38      	ldr	r3, [pc, #224]	@ (800a2b4 <plug_holes+0x124>)
 800a1d2:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800a1d6:	493c      	ldr	r1, [pc, #240]	@ (800a2c8 <plug_holes+0x138>)
 800a1d8:	4838      	ldr	r0, [pc, #224]	@ (800a2bc <plug_holes+0x12c>)
 800a1da:	f00c ff3d 	bl	8017058 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	881b      	ldrh	r3, [r3, #0]
 800a1e2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a1e6:	d906      	bls.n	800a1f6 <plug_holes+0x66>
 800a1e8:	4b32      	ldr	r3, [pc, #200]	@ (800a2b4 <plug_holes+0x124>)
 800a1ea:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800a1ee:	4937      	ldr	r1, [pc, #220]	@ (800a2cc <plug_holes+0x13c>)
 800a1f0:	4832      	ldr	r0, [pc, #200]	@ (800a2bc <plug_holes+0x12c>)
 800a1f2:	f00c ff31 	bl	8017058 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	881b      	ldrh	r3, [r3, #0]
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f7ff ffa4 	bl	800a148 <ptr_to_mem>
 800a200:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a202:	687a      	ldr	r2, [r7, #4]
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	429a      	cmp	r2, r3
 800a208:	d024      	beq.n	800a254 <plug_holes+0xc4>
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	791b      	ldrb	r3, [r3, #4]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d120      	bne.n	800a254 <plug_holes+0xc4>
 800a212:	4b2b      	ldr	r3, [pc, #172]	@ (800a2c0 <plug_holes+0x130>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	68fa      	ldr	r2, [r7, #12]
 800a218:	429a      	cmp	r2, r3
 800a21a:	d01b      	beq.n	800a254 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a21c:	4b2c      	ldr	r3, [pc, #176]	@ (800a2d0 <plug_holes+0x140>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	68fa      	ldr	r2, [r7, #12]
 800a222:	429a      	cmp	r2, r3
 800a224:	d102      	bne.n	800a22c <plug_holes+0x9c>
      lfree = mem;
 800a226:	4a2a      	ldr	r2, [pc, #168]	@ (800a2d0 <plug_holes+0x140>)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	881a      	ldrh	r2, [r3, #0]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	881b      	ldrh	r3, [r3, #0]
 800a238:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a23c:	d00a      	beq.n	800a254 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	881b      	ldrh	r3, [r3, #0]
 800a242:	4618      	mov	r0, r3
 800a244:	f7ff ff80 	bl	800a148 <ptr_to_mem>
 800a248:	4604      	mov	r4, r0
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f7ff ff8e 	bl	800a16c <mem_to_ptr>
 800a250:	4603      	mov	r3, r0
 800a252:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	885b      	ldrh	r3, [r3, #2]
 800a258:	4618      	mov	r0, r3
 800a25a:	f7ff ff75 	bl	800a148 <ptr_to_mem>
 800a25e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a260:	68ba      	ldr	r2, [r7, #8]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	429a      	cmp	r2, r3
 800a266:	d01f      	beq.n	800a2a8 <plug_holes+0x118>
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	791b      	ldrb	r3, [r3, #4]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d11b      	bne.n	800a2a8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a270:	4b17      	ldr	r3, [pc, #92]	@ (800a2d0 <plug_holes+0x140>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	429a      	cmp	r2, r3
 800a278:	d102      	bne.n	800a280 <plug_holes+0xf0>
      lfree = pmem;
 800a27a:	4a15      	ldr	r2, [pc, #84]	@ (800a2d0 <plug_holes+0x140>)
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	881a      	ldrh	r2, [r3, #0]
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	881b      	ldrh	r3, [r3, #0]
 800a28c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a290:	d00a      	beq.n	800a2a8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	881b      	ldrh	r3, [r3, #0]
 800a296:	4618      	mov	r0, r3
 800a298:	f7ff ff56 	bl	800a148 <ptr_to_mem>
 800a29c:	4604      	mov	r4, r0
 800a29e:	68b8      	ldr	r0, [r7, #8]
 800a2a0:	f7ff ff64 	bl	800a16c <mem_to_ptr>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a2a8:	bf00      	nop
 800a2aa:	3714      	adds	r7, #20
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd90      	pop	{r4, r7, pc}
 800a2b0:	200098fc 	.word	0x200098fc
 800a2b4:	0801865c 	.word	0x0801865c
 800a2b8:	0801868c 	.word	0x0801868c
 800a2bc:	080186a4 	.word	0x080186a4
 800a2c0:	20009900 	.word	0x20009900
 800a2c4:	080186cc 	.word	0x080186cc
 800a2c8:	080186e8 	.word	0x080186e8
 800a2cc:	08018704 	.word	0x08018704
 800a2d0:	20009908 	.word	0x20009908

0800a2d4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b082      	sub	sp, #8
 800a2d8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a2da:	4b1f      	ldr	r3, [pc, #124]	@ (800a358 <mem_init+0x84>)
 800a2dc:	3303      	adds	r3, #3
 800a2de:	f023 0303 	bic.w	r3, r3, #3
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	4b1d      	ldr	r3, [pc, #116]	@ (800a35c <mem_init+0x88>)
 800a2e6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a2e8:	4b1c      	ldr	r3, [pc, #112]	@ (800a35c <mem_init+0x88>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800a2f4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2200      	movs	r2, #0
 800a300:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a302:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800a306:	f7ff ff1f 	bl	800a148 <ptr_to_mem>
 800a30a:	4603      	mov	r3, r0
 800a30c:	4a14      	ldr	r2, [pc, #80]	@ (800a360 <mem_init+0x8c>)
 800a30e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a310:	4b13      	ldr	r3, [pc, #76]	@ (800a360 <mem_init+0x8c>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2201      	movs	r2, #1
 800a316:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a318:	4b11      	ldr	r3, [pc, #68]	@ (800a360 <mem_init+0x8c>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800a320:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a322:	4b0f      	ldr	r3, [pc, #60]	@ (800a360 <mem_init+0x8c>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800a32a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a32c:	4b0b      	ldr	r3, [pc, #44]	@ (800a35c <mem_init+0x88>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4a0c      	ldr	r2, [pc, #48]	@ (800a364 <mem_init+0x90>)
 800a332:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a334:	480c      	ldr	r0, [pc, #48]	@ (800a368 <mem_init+0x94>)
 800a336:	f00c fd13 	bl	8016d60 <sys_mutex_new>
 800a33a:	4603      	mov	r3, r0
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d006      	beq.n	800a34e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a340:	4b0a      	ldr	r3, [pc, #40]	@ (800a36c <mem_init+0x98>)
 800a342:	f240 221f 	movw	r2, #543	@ 0x21f
 800a346:	490a      	ldr	r1, [pc, #40]	@ (800a370 <mem_init+0x9c>)
 800a348:	480a      	ldr	r0, [pc, #40]	@ (800a374 <mem_init+0xa0>)
 800a34a:	f00c fe85 	bl	8017058 <iprintf>
  }
}
 800a34e:	bf00      	nop
 800a350:	3708      	adds	r7, #8
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	200092a8 	.word	0x200092a8
 800a35c:	200098fc 	.word	0x200098fc
 800a360:	20009900 	.word	0x20009900
 800a364:	20009908 	.word	0x20009908
 800a368:	20009904 	.word	0x20009904
 800a36c:	0801865c 	.word	0x0801865c
 800a370:	08018730 	.word	0x08018730
 800a374:	080186a4 	.word	0x080186a4

0800a378 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b086      	sub	sp, #24
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f7ff fef3 	bl	800a16c <mem_to_ptr>
 800a386:	4603      	mov	r3, r0
 800a388:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	881b      	ldrh	r3, [r3, #0]
 800a38e:	4618      	mov	r0, r3
 800a390:	f7ff feda 	bl	800a148 <ptr_to_mem>
 800a394:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	885b      	ldrh	r3, [r3, #2]
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7ff fed4 	bl	800a148 <ptr_to_mem>
 800a3a0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	881b      	ldrh	r3, [r3, #0]
 800a3a6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a3aa:	d818      	bhi.n	800a3de <mem_link_valid+0x66>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	885b      	ldrh	r3, [r3, #2]
 800a3b0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a3b4:	d813      	bhi.n	800a3de <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a3ba:	8afa      	ldrh	r2, [r7, #22]
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d004      	beq.n	800a3ca <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	881b      	ldrh	r3, [r3, #0]
 800a3c4:	8afa      	ldrh	r2, [r7, #22]
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d109      	bne.n	800a3de <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a3ca:	4b08      	ldr	r3, [pc, #32]	@ (800a3ec <mem_link_valid+0x74>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a3ce:	693a      	ldr	r2, [r7, #16]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d006      	beq.n	800a3e2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	885b      	ldrh	r3, [r3, #2]
 800a3d8:	8afa      	ldrh	r2, [r7, #22]
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d001      	beq.n	800a3e2 <mem_link_valid+0x6a>
    return 0;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	e000      	b.n	800a3e4 <mem_link_valid+0x6c>
  }
  return 1;
 800a3e2:	2301      	movs	r3, #1
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3718      	adds	r7, #24
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}
 800a3ec:	20009900 	.word	0x20009900

0800a3f0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b088      	sub	sp, #32
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d070      	beq.n	800a4e0 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f003 0303 	and.w	r3, r3, #3
 800a404:	2b00      	cmp	r3, #0
 800a406:	d00d      	beq.n	800a424 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a408:	4b37      	ldr	r3, [pc, #220]	@ (800a4e8 <mem_free+0xf8>)
 800a40a:	f240 2273 	movw	r2, #627	@ 0x273
 800a40e:	4937      	ldr	r1, [pc, #220]	@ (800a4ec <mem_free+0xfc>)
 800a410:	4837      	ldr	r0, [pc, #220]	@ (800a4f0 <mem_free+0x100>)
 800a412:	f00c fe21 	bl	8017058 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a416:	f00c fd01 	bl	8016e1c <sys_arch_protect>
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	68f8      	ldr	r0, [r7, #12]
 800a41e:	f00c fd0b 	bl	8016e38 <sys_arch_unprotect>
    return;
 800a422:	e05e      	b.n	800a4e2 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	3b08      	subs	r3, #8
 800a428:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a42a:	4b32      	ldr	r3, [pc, #200]	@ (800a4f4 <mem_free+0x104>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	69fa      	ldr	r2, [r7, #28]
 800a430:	429a      	cmp	r2, r3
 800a432:	d306      	bcc.n	800a442 <mem_free+0x52>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f103 020c 	add.w	r2, r3, #12
 800a43a:	4b2f      	ldr	r3, [pc, #188]	@ (800a4f8 <mem_free+0x108>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d90d      	bls.n	800a45e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a442:	4b29      	ldr	r3, [pc, #164]	@ (800a4e8 <mem_free+0xf8>)
 800a444:	f240 227f 	movw	r2, #639	@ 0x27f
 800a448:	492c      	ldr	r1, [pc, #176]	@ (800a4fc <mem_free+0x10c>)
 800a44a:	4829      	ldr	r0, [pc, #164]	@ (800a4f0 <mem_free+0x100>)
 800a44c:	f00c fe04 	bl	8017058 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a450:	f00c fce4 	bl	8016e1c <sys_arch_protect>
 800a454:	6138      	str	r0, [r7, #16]
 800a456:	6938      	ldr	r0, [r7, #16]
 800a458:	f00c fcee 	bl	8016e38 <sys_arch_unprotect>
    return;
 800a45c:	e041      	b.n	800a4e2 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a45e:	4828      	ldr	r0, [pc, #160]	@ (800a500 <mem_free+0x110>)
 800a460:	f00c fc9a 	bl	8016d98 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a464:	69fb      	ldr	r3, [r7, #28]
 800a466:	791b      	ldrb	r3, [r3, #4]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d110      	bne.n	800a48e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a46c:	4b1e      	ldr	r3, [pc, #120]	@ (800a4e8 <mem_free+0xf8>)
 800a46e:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800a472:	4924      	ldr	r1, [pc, #144]	@ (800a504 <mem_free+0x114>)
 800a474:	481e      	ldr	r0, [pc, #120]	@ (800a4f0 <mem_free+0x100>)
 800a476:	f00c fdef 	bl	8017058 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a47a:	4821      	ldr	r0, [pc, #132]	@ (800a500 <mem_free+0x110>)
 800a47c:	f00c fc9b 	bl	8016db6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a480:	f00c fccc 	bl	8016e1c <sys_arch_protect>
 800a484:	6178      	str	r0, [r7, #20]
 800a486:	6978      	ldr	r0, [r7, #20]
 800a488:	f00c fcd6 	bl	8016e38 <sys_arch_unprotect>
    return;
 800a48c:	e029      	b.n	800a4e2 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a48e:	69f8      	ldr	r0, [r7, #28]
 800a490:	f7ff ff72 	bl	800a378 <mem_link_valid>
 800a494:	4603      	mov	r3, r0
 800a496:	2b00      	cmp	r3, #0
 800a498:	d110      	bne.n	800a4bc <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a49a:	4b13      	ldr	r3, [pc, #76]	@ (800a4e8 <mem_free+0xf8>)
 800a49c:	f240 2295 	movw	r2, #661	@ 0x295
 800a4a0:	4919      	ldr	r1, [pc, #100]	@ (800a508 <mem_free+0x118>)
 800a4a2:	4813      	ldr	r0, [pc, #76]	@ (800a4f0 <mem_free+0x100>)
 800a4a4:	f00c fdd8 	bl	8017058 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a4a8:	4815      	ldr	r0, [pc, #84]	@ (800a500 <mem_free+0x110>)
 800a4aa:	f00c fc84 	bl	8016db6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a4ae:	f00c fcb5 	bl	8016e1c <sys_arch_protect>
 800a4b2:	61b8      	str	r0, [r7, #24]
 800a4b4:	69b8      	ldr	r0, [r7, #24]
 800a4b6:	f00c fcbf 	bl	8016e38 <sys_arch_unprotect>
    return;
 800a4ba:	e012      	b.n	800a4e2 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a4bc:	69fb      	ldr	r3, [r7, #28]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a4c2:	4b12      	ldr	r3, [pc, #72]	@ (800a50c <mem_free+0x11c>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	69fa      	ldr	r2, [r7, #28]
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d202      	bcs.n	800a4d2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a4cc:	4a0f      	ldr	r2, [pc, #60]	@ (800a50c <mem_free+0x11c>)
 800a4ce:	69fb      	ldr	r3, [r7, #28]
 800a4d0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a4d2:	69f8      	ldr	r0, [r7, #28]
 800a4d4:	f7ff fe5c 	bl	800a190 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a4d8:	4809      	ldr	r0, [pc, #36]	@ (800a500 <mem_free+0x110>)
 800a4da:	f00c fc6c 	bl	8016db6 <sys_mutex_unlock>
 800a4de:	e000      	b.n	800a4e2 <mem_free+0xf2>
    return;
 800a4e0:	bf00      	nop
}
 800a4e2:	3720      	adds	r7, #32
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	0801865c 	.word	0x0801865c
 800a4ec:	0801874c 	.word	0x0801874c
 800a4f0:	080186a4 	.word	0x080186a4
 800a4f4:	200098fc 	.word	0x200098fc
 800a4f8:	20009900 	.word	0x20009900
 800a4fc:	08018770 	.word	0x08018770
 800a500:	20009904 	.word	0x20009904
 800a504:	0801878c 	.word	0x0801878c
 800a508:	080187b4 	.word	0x080187b4
 800a50c:	20009908 	.word	0x20009908

0800a510 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b088      	sub	sp, #32
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	460b      	mov	r3, r1
 800a51a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a51c:	887b      	ldrh	r3, [r7, #2]
 800a51e:	3303      	adds	r3, #3
 800a520:	b29b      	uxth	r3, r3
 800a522:	f023 0303 	bic.w	r3, r3, #3
 800a526:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a528:	8bfb      	ldrh	r3, [r7, #30]
 800a52a:	2b0b      	cmp	r3, #11
 800a52c:	d801      	bhi.n	800a532 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a52e:	230c      	movs	r3, #12
 800a530:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a532:	8bfb      	ldrh	r3, [r7, #30]
 800a534:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a538:	d803      	bhi.n	800a542 <mem_trim+0x32>
 800a53a:	8bfa      	ldrh	r2, [r7, #30]
 800a53c:	887b      	ldrh	r3, [r7, #2]
 800a53e:	429a      	cmp	r2, r3
 800a540:	d201      	bcs.n	800a546 <mem_trim+0x36>
    return NULL;
 800a542:	2300      	movs	r3, #0
 800a544:	e0d8      	b.n	800a6f8 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a546:	4b6e      	ldr	r3, [pc, #440]	@ (800a700 <mem_trim+0x1f0>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	687a      	ldr	r2, [r7, #4]
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d304      	bcc.n	800a55a <mem_trim+0x4a>
 800a550:	4b6c      	ldr	r3, [pc, #432]	@ (800a704 <mem_trim+0x1f4>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	687a      	ldr	r2, [r7, #4]
 800a556:	429a      	cmp	r2, r3
 800a558:	d306      	bcc.n	800a568 <mem_trim+0x58>
 800a55a:	4b6b      	ldr	r3, [pc, #428]	@ (800a708 <mem_trim+0x1f8>)
 800a55c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800a560:	496a      	ldr	r1, [pc, #424]	@ (800a70c <mem_trim+0x1fc>)
 800a562:	486b      	ldr	r0, [pc, #428]	@ (800a710 <mem_trim+0x200>)
 800a564:	f00c fd78 	bl	8017058 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a568:	4b65      	ldr	r3, [pc, #404]	@ (800a700 <mem_trim+0x1f0>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	687a      	ldr	r2, [r7, #4]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d304      	bcc.n	800a57c <mem_trim+0x6c>
 800a572:	4b64      	ldr	r3, [pc, #400]	@ (800a704 <mem_trim+0x1f4>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	429a      	cmp	r2, r3
 800a57a:	d307      	bcc.n	800a58c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a57c:	f00c fc4e 	bl	8016e1c <sys_arch_protect>
 800a580:	60b8      	str	r0, [r7, #8]
 800a582:	68b8      	ldr	r0, [r7, #8]
 800a584:	f00c fc58 	bl	8016e38 <sys_arch_unprotect>
    return rmem;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	e0b5      	b.n	800a6f8 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	3b08      	subs	r3, #8
 800a590:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a592:	69b8      	ldr	r0, [r7, #24]
 800a594:	f7ff fdea 	bl	800a16c <mem_to_ptr>
 800a598:	4603      	mov	r3, r0
 800a59a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	881a      	ldrh	r2, [r3, #0]
 800a5a0:	8afb      	ldrh	r3, [r7, #22]
 800a5a2:	1ad3      	subs	r3, r2, r3
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	3b08      	subs	r3, #8
 800a5a8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a5aa:	8bfa      	ldrh	r2, [r7, #30]
 800a5ac:	8abb      	ldrh	r3, [r7, #20]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d906      	bls.n	800a5c0 <mem_trim+0xb0>
 800a5b2:	4b55      	ldr	r3, [pc, #340]	@ (800a708 <mem_trim+0x1f8>)
 800a5b4:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800a5b8:	4956      	ldr	r1, [pc, #344]	@ (800a714 <mem_trim+0x204>)
 800a5ba:	4855      	ldr	r0, [pc, #340]	@ (800a710 <mem_trim+0x200>)
 800a5bc:	f00c fd4c 	bl	8017058 <iprintf>
  if (newsize > size) {
 800a5c0:	8bfa      	ldrh	r2, [r7, #30]
 800a5c2:	8abb      	ldrh	r3, [r7, #20]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d901      	bls.n	800a5cc <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	e095      	b.n	800a6f8 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800a5cc:	8bfa      	ldrh	r2, [r7, #30]
 800a5ce:	8abb      	ldrh	r3, [r7, #20]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d101      	bne.n	800a5d8 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	e08f      	b.n	800a6f8 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a5d8:	484f      	ldr	r0, [pc, #316]	@ (800a718 <mem_trim+0x208>)
 800a5da:	f00c fbdd 	bl	8016d98 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800a5de:	69bb      	ldr	r3, [r7, #24]
 800a5e0:	881b      	ldrh	r3, [r3, #0]
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f7ff fdb0 	bl	800a148 <ptr_to_mem>
 800a5e8:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	791b      	ldrb	r3, [r3, #4]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d13f      	bne.n	800a672 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a5f2:	69bb      	ldr	r3, [r7, #24]
 800a5f4:	881b      	ldrh	r3, [r3, #0]
 800a5f6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a5fa:	d106      	bne.n	800a60a <mem_trim+0xfa>
 800a5fc:	4b42      	ldr	r3, [pc, #264]	@ (800a708 <mem_trim+0x1f8>)
 800a5fe:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800a602:	4946      	ldr	r1, [pc, #280]	@ (800a71c <mem_trim+0x20c>)
 800a604:	4842      	ldr	r0, [pc, #264]	@ (800a710 <mem_trim+0x200>)
 800a606:	f00c fd27 	bl	8017058 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	881b      	ldrh	r3, [r3, #0]
 800a60e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a610:	8afa      	ldrh	r2, [r7, #22]
 800a612:	8bfb      	ldrh	r3, [r7, #30]
 800a614:	4413      	add	r3, r2
 800a616:	b29b      	uxth	r3, r3
 800a618:	3308      	adds	r3, #8
 800a61a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a61c:	4b40      	ldr	r3, [pc, #256]	@ (800a720 <mem_trim+0x210>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	693a      	ldr	r2, [r7, #16]
 800a622:	429a      	cmp	r2, r3
 800a624:	d106      	bne.n	800a634 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800a626:	89fb      	ldrh	r3, [r7, #14]
 800a628:	4618      	mov	r0, r3
 800a62a:	f7ff fd8d 	bl	800a148 <ptr_to_mem>
 800a62e:	4603      	mov	r3, r0
 800a630:	4a3b      	ldr	r2, [pc, #236]	@ (800a720 <mem_trim+0x210>)
 800a632:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a634:	89fb      	ldrh	r3, [r7, #14]
 800a636:	4618      	mov	r0, r3
 800a638:	f7ff fd86 	bl	800a148 <ptr_to_mem>
 800a63c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	2200      	movs	r2, #0
 800a642:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	89ba      	ldrh	r2, [r7, #12]
 800a648:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	8afa      	ldrh	r2, [r7, #22]
 800a64e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a650:	69bb      	ldr	r3, [r7, #24]
 800a652:	89fa      	ldrh	r2, [r7, #14]
 800a654:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	881b      	ldrh	r3, [r3, #0]
 800a65a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a65e:	d047      	beq.n	800a6f0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	881b      	ldrh	r3, [r3, #0]
 800a664:	4618      	mov	r0, r3
 800a666:	f7ff fd6f 	bl	800a148 <ptr_to_mem>
 800a66a:	4602      	mov	r2, r0
 800a66c:	89fb      	ldrh	r3, [r7, #14]
 800a66e:	8053      	strh	r3, [r2, #2]
 800a670:	e03e      	b.n	800a6f0 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a672:	8bfb      	ldrh	r3, [r7, #30]
 800a674:	f103 0214 	add.w	r2, r3, #20
 800a678:	8abb      	ldrh	r3, [r7, #20]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d838      	bhi.n	800a6f0 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a67e:	8afa      	ldrh	r2, [r7, #22]
 800a680:	8bfb      	ldrh	r3, [r7, #30]
 800a682:	4413      	add	r3, r2
 800a684:	b29b      	uxth	r3, r3
 800a686:	3308      	adds	r3, #8
 800a688:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	881b      	ldrh	r3, [r3, #0]
 800a68e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a692:	d106      	bne.n	800a6a2 <mem_trim+0x192>
 800a694:	4b1c      	ldr	r3, [pc, #112]	@ (800a708 <mem_trim+0x1f8>)
 800a696:	f240 3216 	movw	r2, #790	@ 0x316
 800a69a:	4920      	ldr	r1, [pc, #128]	@ (800a71c <mem_trim+0x20c>)
 800a69c:	481c      	ldr	r0, [pc, #112]	@ (800a710 <mem_trim+0x200>)
 800a69e:	f00c fcdb 	bl	8017058 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a6a2:	89fb      	ldrh	r3, [r7, #14]
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f7ff fd4f 	bl	800a148 <ptr_to_mem>
 800a6aa:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a6ac:	4b1c      	ldr	r3, [pc, #112]	@ (800a720 <mem_trim+0x210>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	693a      	ldr	r2, [r7, #16]
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d202      	bcs.n	800a6bc <mem_trim+0x1ac>
      lfree = mem2;
 800a6b6:	4a1a      	ldr	r2, [pc, #104]	@ (800a720 <mem_trim+0x210>)
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a6c2:	69bb      	ldr	r3, [r7, #24]
 800a6c4:	881a      	ldrh	r2, [r3, #0]
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	8afa      	ldrh	r2, [r7, #22]
 800a6ce:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a6d0:	69bb      	ldr	r3, [r7, #24]
 800a6d2:	89fa      	ldrh	r2, [r7, #14]
 800a6d4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	881b      	ldrh	r3, [r3, #0]
 800a6da:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a6de:	d007      	beq.n	800a6f0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	881b      	ldrh	r3, [r3, #0]
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f7ff fd2f 	bl	800a148 <ptr_to_mem>
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	89fb      	ldrh	r3, [r7, #14]
 800a6ee:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a6f0:	4809      	ldr	r0, [pc, #36]	@ (800a718 <mem_trim+0x208>)
 800a6f2:	f00c fb60 	bl	8016db6 <sys_mutex_unlock>
  return rmem;
 800a6f6:	687b      	ldr	r3, [r7, #4]
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3720      	adds	r7, #32
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}
 800a700:	200098fc 	.word	0x200098fc
 800a704:	20009900 	.word	0x20009900
 800a708:	0801865c 	.word	0x0801865c
 800a70c:	080187e8 	.word	0x080187e8
 800a710:	080186a4 	.word	0x080186a4
 800a714:	08018800 	.word	0x08018800
 800a718:	20009904 	.word	0x20009904
 800a71c:	08018820 	.word	0x08018820
 800a720:	20009908 	.word	0x20009908

0800a724 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b088      	sub	sp, #32
 800a728:	af00      	add	r7, sp, #0
 800a72a:	4603      	mov	r3, r0
 800a72c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a72e:	88fb      	ldrh	r3, [r7, #6]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d101      	bne.n	800a738 <mem_malloc+0x14>
    return NULL;
 800a734:	2300      	movs	r3, #0
 800a736:	e0e2      	b.n	800a8fe <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a738:	88fb      	ldrh	r3, [r7, #6]
 800a73a:	3303      	adds	r3, #3
 800a73c:	b29b      	uxth	r3, r3
 800a73e:	f023 0303 	bic.w	r3, r3, #3
 800a742:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a744:	8bbb      	ldrh	r3, [r7, #28]
 800a746:	2b0b      	cmp	r3, #11
 800a748:	d801      	bhi.n	800a74e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a74a:	230c      	movs	r3, #12
 800a74c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a74e:	8bbb      	ldrh	r3, [r7, #28]
 800a750:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a754:	d803      	bhi.n	800a75e <mem_malloc+0x3a>
 800a756:	8bba      	ldrh	r2, [r7, #28]
 800a758:	88fb      	ldrh	r3, [r7, #6]
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d201      	bcs.n	800a762 <mem_malloc+0x3e>
    return NULL;
 800a75e:	2300      	movs	r3, #0
 800a760:	e0cd      	b.n	800a8fe <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800a762:	4869      	ldr	r0, [pc, #420]	@ (800a908 <mem_malloc+0x1e4>)
 800a764:	f00c fb18 	bl	8016d98 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a768:	4b68      	ldr	r3, [pc, #416]	@ (800a90c <mem_malloc+0x1e8>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4618      	mov	r0, r3
 800a76e:	f7ff fcfd 	bl	800a16c <mem_to_ptr>
 800a772:	4603      	mov	r3, r0
 800a774:	83fb      	strh	r3, [r7, #30]
 800a776:	e0b7      	b.n	800a8e8 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a778:	8bfb      	ldrh	r3, [r7, #30]
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7ff fce4 	bl	800a148 <ptr_to_mem>
 800a780:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	791b      	ldrb	r3, [r3, #4]
 800a786:	2b00      	cmp	r3, #0
 800a788:	f040 80a7 	bne.w	800a8da <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	881b      	ldrh	r3, [r3, #0]
 800a790:	461a      	mov	r2, r3
 800a792:	8bfb      	ldrh	r3, [r7, #30]
 800a794:	1ad3      	subs	r3, r2, r3
 800a796:	f1a3 0208 	sub.w	r2, r3, #8
 800a79a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a79c:	429a      	cmp	r2, r3
 800a79e:	f0c0 809c 	bcc.w	800a8da <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	881b      	ldrh	r3, [r3, #0]
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	8bfb      	ldrh	r3, [r7, #30]
 800a7aa:	1ad3      	subs	r3, r2, r3
 800a7ac:	f1a3 0208 	sub.w	r2, r3, #8
 800a7b0:	8bbb      	ldrh	r3, [r7, #28]
 800a7b2:	3314      	adds	r3, #20
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d333      	bcc.n	800a820 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a7b8:	8bfa      	ldrh	r2, [r7, #30]
 800a7ba:	8bbb      	ldrh	r3, [r7, #28]
 800a7bc:	4413      	add	r3, r2
 800a7be:	b29b      	uxth	r3, r3
 800a7c0:	3308      	adds	r3, #8
 800a7c2:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a7c4:	8a7b      	ldrh	r3, [r7, #18]
 800a7c6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a7ca:	d106      	bne.n	800a7da <mem_malloc+0xb6>
 800a7cc:	4b50      	ldr	r3, [pc, #320]	@ (800a910 <mem_malloc+0x1ec>)
 800a7ce:	f240 3287 	movw	r2, #903	@ 0x387
 800a7d2:	4950      	ldr	r1, [pc, #320]	@ (800a914 <mem_malloc+0x1f0>)
 800a7d4:	4850      	ldr	r0, [pc, #320]	@ (800a918 <mem_malloc+0x1f4>)
 800a7d6:	f00c fc3f 	bl	8017058 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a7da:	8a7b      	ldrh	r3, [r7, #18]
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f7ff fcb3 	bl	800a148 <ptr_to_mem>
 800a7e2:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	881a      	ldrh	r2, [r3, #0]
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	8bfa      	ldrh	r2, [r7, #30]
 800a7f6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	8a7a      	ldrh	r2, [r7, #18]
 800a7fc:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	2201      	movs	r2, #1
 800a802:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	881b      	ldrh	r3, [r3, #0]
 800a808:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a80c:	d00b      	beq.n	800a826 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	881b      	ldrh	r3, [r3, #0]
 800a812:	4618      	mov	r0, r3
 800a814:	f7ff fc98 	bl	800a148 <ptr_to_mem>
 800a818:	4602      	mov	r2, r0
 800a81a:	8a7b      	ldrh	r3, [r7, #18]
 800a81c:	8053      	strh	r3, [r2, #2]
 800a81e:	e002      	b.n	800a826 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	2201      	movs	r2, #1
 800a824:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a826:	4b39      	ldr	r3, [pc, #228]	@ (800a90c <mem_malloc+0x1e8>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	697a      	ldr	r2, [r7, #20]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d127      	bne.n	800a880 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800a830:	4b36      	ldr	r3, [pc, #216]	@ (800a90c <mem_malloc+0x1e8>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a836:	e005      	b.n	800a844 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a838:	69bb      	ldr	r3, [r7, #24]
 800a83a:	881b      	ldrh	r3, [r3, #0]
 800a83c:	4618      	mov	r0, r3
 800a83e:	f7ff fc83 	bl	800a148 <ptr_to_mem>
 800a842:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a844:	69bb      	ldr	r3, [r7, #24]
 800a846:	791b      	ldrb	r3, [r3, #4]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d004      	beq.n	800a856 <mem_malloc+0x132>
 800a84c:	4b33      	ldr	r3, [pc, #204]	@ (800a91c <mem_malloc+0x1f8>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	69ba      	ldr	r2, [r7, #24]
 800a852:	429a      	cmp	r2, r3
 800a854:	d1f0      	bne.n	800a838 <mem_malloc+0x114>
          }
          lfree = cur;
 800a856:	4a2d      	ldr	r2, [pc, #180]	@ (800a90c <mem_malloc+0x1e8>)
 800a858:	69bb      	ldr	r3, [r7, #24]
 800a85a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a85c:	4b2b      	ldr	r3, [pc, #172]	@ (800a90c <mem_malloc+0x1e8>)
 800a85e:	681a      	ldr	r2, [r3, #0]
 800a860:	4b2e      	ldr	r3, [pc, #184]	@ (800a91c <mem_malloc+0x1f8>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	429a      	cmp	r2, r3
 800a866:	d00b      	beq.n	800a880 <mem_malloc+0x15c>
 800a868:	4b28      	ldr	r3, [pc, #160]	@ (800a90c <mem_malloc+0x1e8>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	791b      	ldrb	r3, [r3, #4]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d006      	beq.n	800a880 <mem_malloc+0x15c>
 800a872:	4b27      	ldr	r3, [pc, #156]	@ (800a910 <mem_malloc+0x1ec>)
 800a874:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800a878:	4929      	ldr	r1, [pc, #164]	@ (800a920 <mem_malloc+0x1fc>)
 800a87a:	4827      	ldr	r0, [pc, #156]	@ (800a918 <mem_malloc+0x1f4>)
 800a87c:	f00c fbec 	bl	8017058 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800a880:	4821      	ldr	r0, [pc, #132]	@ (800a908 <mem_malloc+0x1e4>)
 800a882:	f00c fa98 	bl	8016db6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a886:	8bba      	ldrh	r2, [r7, #28]
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	4413      	add	r3, r2
 800a88c:	3308      	adds	r3, #8
 800a88e:	4a23      	ldr	r2, [pc, #140]	@ (800a91c <mem_malloc+0x1f8>)
 800a890:	6812      	ldr	r2, [r2, #0]
 800a892:	4293      	cmp	r3, r2
 800a894:	d906      	bls.n	800a8a4 <mem_malloc+0x180>
 800a896:	4b1e      	ldr	r3, [pc, #120]	@ (800a910 <mem_malloc+0x1ec>)
 800a898:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800a89c:	4921      	ldr	r1, [pc, #132]	@ (800a924 <mem_malloc+0x200>)
 800a89e:	481e      	ldr	r0, [pc, #120]	@ (800a918 <mem_malloc+0x1f4>)
 800a8a0:	f00c fbda 	bl	8017058 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	f003 0303 	and.w	r3, r3, #3
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d006      	beq.n	800a8bc <mem_malloc+0x198>
 800a8ae:	4b18      	ldr	r3, [pc, #96]	@ (800a910 <mem_malloc+0x1ec>)
 800a8b0:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800a8b4:	491c      	ldr	r1, [pc, #112]	@ (800a928 <mem_malloc+0x204>)
 800a8b6:	4818      	ldr	r0, [pc, #96]	@ (800a918 <mem_malloc+0x1f4>)
 800a8b8:	f00c fbce 	bl	8017058 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	f003 0303 	and.w	r3, r3, #3
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d006      	beq.n	800a8d4 <mem_malloc+0x1b0>
 800a8c6:	4b12      	ldr	r3, [pc, #72]	@ (800a910 <mem_malloc+0x1ec>)
 800a8c8:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800a8cc:	4917      	ldr	r1, [pc, #92]	@ (800a92c <mem_malloc+0x208>)
 800a8ce:	4812      	ldr	r0, [pc, #72]	@ (800a918 <mem_malloc+0x1f4>)
 800a8d0:	f00c fbc2 	bl	8017058 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	3308      	adds	r3, #8
 800a8d8:	e011      	b.n	800a8fe <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800a8da:	8bfb      	ldrh	r3, [r7, #30]
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f7ff fc33 	bl	800a148 <ptr_to_mem>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	881b      	ldrh	r3, [r3, #0]
 800a8e6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a8e8:	8bfa      	ldrh	r2, [r7, #30]
 800a8ea:	8bbb      	ldrh	r3, [r7, #28]
 800a8ec:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	f4ff af41 	bcc.w	800a778 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800a8f6:	4804      	ldr	r0, [pc, #16]	@ (800a908 <mem_malloc+0x1e4>)
 800a8f8:	f00c fa5d 	bl	8016db6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a8fc:	2300      	movs	r3, #0
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3720      	adds	r7, #32
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
 800a906:	bf00      	nop
 800a908:	20009904 	.word	0x20009904
 800a90c:	20009908 	.word	0x20009908
 800a910:	0801865c 	.word	0x0801865c
 800a914:	08018820 	.word	0x08018820
 800a918:	080186a4 	.word	0x080186a4
 800a91c:	20009900 	.word	0x20009900
 800a920:	08018834 	.word	0x08018834
 800a924:	08018850 	.word	0x08018850
 800a928:	08018880 	.word	0x08018880
 800a92c:	080188b0 	.word	0x080188b0

0800a930 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a930:	b480      	push	{r7}
 800a932:	b085      	sub	sp, #20
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	689b      	ldr	r3, [r3, #8]
 800a93c:	2200      	movs	r2, #0
 800a93e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	3303      	adds	r3, #3
 800a946:	f023 0303 	bic.w	r3, r3, #3
 800a94a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a94c:	2300      	movs	r3, #0
 800a94e:	60fb      	str	r3, [r7, #12]
 800a950:	e011      	b.n	800a976 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	689b      	ldr	r3, [r3, #8]
 800a956:	681a      	ldr	r2, [r3, #0]
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	68ba      	ldr	r2, [r7, #8]
 800a962:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	881b      	ldrh	r3, [r3, #0]
 800a968:	461a      	mov	r2, r3
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	4413      	add	r3, r2
 800a96e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	3301      	adds	r3, #1
 800a974:	60fb      	str	r3, [r7, #12]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	885b      	ldrh	r3, [r3, #2]
 800a97a:	461a      	mov	r2, r3
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	4293      	cmp	r3, r2
 800a980:	dbe7      	blt.n	800a952 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a982:	bf00      	nop
 800a984:	bf00      	nop
 800a986:	3714      	adds	r7, #20
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr

0800a990 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b082      	sub	sp, #8
 800a994:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a996:	2300      	movs	r3, #0
 800a998:	80fb      	strh	r3, [r7, #6]
 800a99a:	e009      	b.n	800a9b0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a99c:	88fb      	ldrh	r3, [r7, #6]
 800a99e:	4a08      	ldr	r2, [pc, #32]	@ (800a9c0 <memp_init+0x30>)
 800a9a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f7ff ffc3 	bl	800a930 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a9aa:	88fb      	ldrh	r3, [r7, #6]
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	80fb      	strh	r3, [r7, #6]
 800a9b0:	88fb      	ldrh	r3, [r7, #6]
 800a9b2:	2b0d      	cmp	r3, #13
 800a9b4:	d9f2      	bls.n	800a99c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a9b6:	bf00      	nop
 800a9b8:	bf00      	nop
 800a9ba:	3708      	adds	r7, #8
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}
 800a9c0:	0801b844 	.word	0x0801b844

0800a9c4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b084      	sub	sp, #16
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800a9cc:	f00c fa26 	bl	8016e1c <sys_arch_protect>
 800a9d0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	689b      	ldr	r3, [r3, #8]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d015      	beq.n	800aa0c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	68ba      	ldr	r2, [r7, #8]
 800a9e6:	6812      	ldr	r2, [r2, #0]
 800a9e8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	f003 0303 	and.w	r3, r3, #3
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d006      	beq.n	800aa02 <do_memp_malloc_pool+0x3e>
 800a9f4:	4b09      	ldr	r3, [pc, #36]	@ (800aa1c <do_memp_malloc_pool+0x58>)
 800a9f6:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800a9fa:	4909      	ldr	r1, [pc, #36]	@ (800aa20 <do_memp_malloc_pool+0x5c>)
 800a9fc:	4809      	ldr	r0, [pc, #36]	@ (800aa24 <do_memp_malloc_pool+0x60>)
 800a9fe:	f00c fb2b 	bl	8017058 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800aa02:	68f8      	ldr	r0, [r7, #12]
 800aa04:	f00c fa18 	bl	8016e38 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	e003      	b.n	800aa14 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800aa0c:	68f8      	ldr	r0, [r7, #12]
 800aa0e:	f00c fa13 	bl	8016e38 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800aa12:	2300      	movs	r3, #0
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3710      	adds	r7, #16
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	080188d4 	.word	0x080188d4
 800aa20:	08018904 	.word	0x08018904
 800aa24:	08018928 	.word	0x08018928

0800aa28 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d106      	bne.n	800aa44 <memp_malloc_pool+0x1c>
 800aa36:	4b0a      	ldr	r3, [pc, #40]	@ (800aa60 <memp_malloc_pool+0x38>)
 800aa38:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800aa3c:	4909      	ldr	r1, [pc, #36]	@ (800aa64 <memp_malloc_pool+0x3c>)
 800aa3e:	480a      	ldr	r0, [pc, #40]	@ (800aa68 <memp_malloc_pool+0x40>)
 800aa40:	f00c fb0a 	bl	8017058 <iprintf>
  if (desc == NULL) {
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d101      	bne.n	800aa4e <memp_malloc_pool+0x26>
    return NULL;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	e003      	b.n	800aa56 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f7ff ffb8 	bl	800a9c4 <do_memp_malloc_pool>
 800aa54:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3708      	adds	r7, #8
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	bf00      	nop
 800aa60:	080188d4 	.word	0x080188d4
 800aa64:	08018950 	.word	0x08018950
 800aa68:	08018928 	.word	0x08018928

0800aa6c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b084      	sub	sp, #16
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	4603      	mov	r3, r0
 800aa74:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800aa76:	79fb      	ldrb	r3, [r7, #7]
 800aa78:	2b0d      	cmp	r3, #13
 800aa7a:	d908      	bls.n	800aa8e <memp_malloc+0x22>
 800aa7c:	4b0a      	ldr	r3, [pc, #40]	@ (800aaa8 <memp_malloc+0x3c>)
 800aa7e:	f240 1257 	movw	r2, #343	@ 0x157
 800aa82:	490a      	ldr	r1, [pc, #40]	@ (800aaac <memp_malloc+0x40>)
 800aa84:	480a      	ldr	r0, [pc, #40]	@ (800aab0 <memp_malloc+0x44>)
 800aa86:	f00c fae7 	bl	8017058 <iprintf>
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	e008      	b.n	800aaa0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800aa8e:	79fb      	ldrb	r3, [r7, #7]
 800aa90:	4a08      	ldr	r2, [pc, #32]	@ (800aab4 <memp_malloc+0x48>)
 800aa92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa96:	4618      	mov	r0, r3
 800aa98:	f7ff ff94 	bl	800a9c4 <do_memp_malloc_pool>
 800aa9c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3710      	adds	r7, #16
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}
 800aaa8:	080188d4 	.word	0x080188d4
 800aaac:	08018964 	.word	0x08018964
 800aab0:	08018928 	.word	0x08018928
 800aab4:	0801b844 	.word	0x0801b844

0800aab8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	f003 0303 	and.w	r3, r3, #3
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d006      	beq.n	800aada <do_memp_free_pool+0x22>
 800aacc:	4b0d      	ldr	r3, [pc, #52]	@ (800ab04 <do_memp_free_pool+0x4c>)
 800aace:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800aad2:	490d      	ldr	r1, [pc, #52]	@ (800ab08 <do_memp_free_pool+0x50>)
 800aad4:	480d      	ldr	r0, [pc, #52]	@ (800ab0c <do_memp_free_pool+0x54>)
 800aad6:	f00c fabf 	bl	8017058 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800aade:	f00c f99d 	bl	8016e1c <sys_arch_protect>
 800aae2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	689b      	ldr	r3, [r3, #8]
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	689b      	ldr	r3, [r3, #8]
 800aaf2:	68fa      	ldr	r2, [r7, #12]
 800aaf4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800aaf6:	68b8      	ldr	r0, [r7, #8]
 800aaf8:	f00c f99e 	bl	8016e38 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800aafc:	bf00      	nop
 800aafe:	3710      	adds	r7, #16
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	080188d4 	.word	0x080188d4
 800ab08:	08018984 	.word	0x08018984
 800ab0c:	08018928 	.word	0x08018928

0800ab10 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d106      	bne.n	800ab2e <memp_free_pool+0x1e>
 800ab20:	4b0a      	ldr	r3, [pc, #40]	@ (800ab4c <memp_free_pool+0x3c>)
 800ab22:	f240 1295 	movw	r2, #405	@ 0x195
 800ab26:	490a      	ldr	r1, [pc, #40]	@ (800ab50 <memp_free_pool+0x40>)
 800ab28:	480a      	ldr	r0, [pc, #40]	@ (800ab54 <memp_free_pool+0x44>)
 800ab2a:	f00c fa95 	bl	8017058 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d007      	beq.n	800ab44 <memp_free_pool+0x34>
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d004      	beq.n	800ab44 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800ab3a:	6839      	ldr	r1, [r7, #0]
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f7ff ffbb 	bl	800aab8 <do_memp_free_pool>
 800ab42:	e000      	b.n	800ab46 <memp_free_pool+0x36>
    return;
 800ab44:	bf00      	nop
}
 800ab46:	3708      	adds	r7, #8
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}
 800ab4c:	080188d4 	.word	0x080188d4
 800ab50:	08018950 	.word	0x08018950
 800ab54:	08018928 	.word	0x08018928

0800ab58 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b082      	sub	sp, #8
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	4603      	mov	r3, r0
 800ab60:	6039      	str	r1, [r7, #0]
 800ab62:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ab64:	79fb      	ldrb	r3, [r7, #7]
 800ab66:	2b0d      	cmp	r3, #13
 800ab68:	d907      	bls.n	800ab7a <memp_free+0x22>
 800ab6a:	4b0c      	ldr	r3, [pc, #48]	@ (800ab9c <memp_free+0x44>)
 800ab6c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800ab70:	490b      	ldr	r1, [pc, #44]	@ (800aba0 <memp_free+0x48>)
 800ab72:	480c      	ldr	r0, [pc, #48]	@ (800aba4 <memp_free+0x4c>)
 800ab74:	f00c fa70 	bl	8017058 <iprintf>
 800ab78:	e00c      	b.n	800ab94 <memp_free+0x3c>

  if (mem == NULL) {
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d008      	beq.n	800ab92 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ab80:	79fb      	ldrb	r3, [r7, #7]
 800ab82:	4a09      	ldr	r2, [pc, #36]	@ (800aba8 <memp_free+0x50>)
 800ab84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab88:	6839      	ldr	r1, [r7, #0]
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7ff ff94 	bl	800aab8 <do_memp_free_pool>
 800ab90:	e000      	b.n	800ab94 <memp_free+0x3c>
    return;
 800ab92:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ab94:	3708      	adds	r7, #8
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	080188d4 	.word	0x080188d4
 800aba0:	080189a4 	.word	0x080189a4
 800aba4:	08018928 	.word	0x08018928
 800aba8:	0801b844 	.word	0x0801b844

0800abac <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800abac:	b480      	push	{r7}
 800abae:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800abb0:	bf00      	nop
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr
	...

0800abbc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b086      	sub	sp, #24
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	60b9      	str	r1, [r7, #8]
 800abc6:	607a      	str	r2, [r7, #4]
 800abc8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d108      	bne.n	800abe2 <netif_add+0x26>
 800abd0:	4b64      	ldr	r3, [pc, #400]	@ (800ad64 <netif_add+0x1a8>)
 800abd2:	f240 1227 	movw	r2, #295	@ 0x127
 800abd6:	4964      	ldr	r1, [pc, #400]	@ (800ad68 <netif_add+0x1ac>)
 800abd8:	4864      	ldr	r0, [pc, #400]	@ (800ad6c <netif_add+0x1b0>)
 800abda:	f00c fa3d 	bl	8017058 <iprintf>
 800abde:	2300      	movs	r3, #0
 800abe0:	e0bb      	b.n	800ad5a <netif_add+0x19e>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800abe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d108      	bne.n	800abfa <netif_add+0x3e>
 800abe8:	4b5e      	ldr	r3, [pc, #376]	@ (800ad64 <netif_add+0x1a8>)
 800abea:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800abee:	4960      	ldr	r1, [pc, #384]	@ (800ad70 <netif_add+0x1b4>)
 800abf0:	485e      	ldr	r0, [pc, #376]	@ (800ad6c <netif_add+0x1b0>)
 800abf2:	f00c fa31 	bl	8017058 <iprintf>
 800abf6:	2300      	movs	r3, #0
 800abf8:	e0af      	b.n	800ad5a <netif_add+0x19e>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d101      	bne.n	800ac04 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ac00:	4b5c      	ldr	r3, [pc, #368]	@ (800ad74 <netif_add+0x1b8>)
 800ac02:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d101      	bne.n	800ac0e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ac0a:	4b5a      	ldr	r3, [pc, #360]	@ (800ad74 <netif_add+0x1b8>)
 800ac0c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d101      	bne.n	800ac18 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ac14:	4b57      	ldr	r3, [pc, #348]	@ (800ad74 <netif_add+0x1b8>)
 800ac16:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2200      	movs	r2, #0
 800ac22:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2200      	movs	r2, #0
 800ac28:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	4a52      	ldr	r2, [pc, #328]	@ (800ad78 <netif_add+0x1bc>)
 800ac2e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2200      	movs	r2, #0
 800ac34:	869a      	strh	r2, [r3, #52]	@ 0x34
  netif->flags = 0;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	3328      	adds	r3, #40	@ 0x28
 800ac42:	2208      	movs	r2, #8
 800ac44:	2100      	movs	r1, #0
 800ac46:	4618      	mov	r0, r3
 800ac48:	f00c fb98 	bl	801737c <memset>
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
  nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  // netif->link_callback = NULL;
#endif /* LWIP_NETIF_LINK_CALLBACK */
#if LWIP_IGMP
  netif->igmp_mac_filter = NULL;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2200      	movs	r2, #0
 800ac56:	645a      	str	r2, [r3, #68]	@ 0x44
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	6a3a      	ldr	r2, [r7, #32]
 800ac5c:	625a      	str	r2, [r3, #36]	@ 0x24
  netif->num = netif_num;
 800ac5e:	4b47      	ldr	r3, [pc, #284]	@ (800ad7c <netif_add+0x1c0>)
 800ac60:	781a      	ldrb	r2, [r3, #0]
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  netif->input = input;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac6c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	68b9      	ldr	r1, [r7, #8]
 800ac74:	68f8      	ldr	r0, [r7, #12]
 800ac76:	f000 f951 	bl	800af1c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ac7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac7c:	68f8      	ldr	r0, [r7, #12]
 800ac7e:	4798      	blx	r3
 800ac80:	4603      	mov	r3, r0
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d001      	beq.n	800ac8a <netif_add+0xce>
    return NULL;
 800ac86:	2300      	movs	r3, #0
 800ac88:	e067      	b.n	800ad5a <netif_add+0x19e>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ac90:	2bff      	cmp	r3, #255	@ 0xff
 800ac92:	d103      	bne.n	800ac9c <netif_add+0xe0>
        netif->num = 0;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2200      	movs	r2, #0
 800ac98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      }
      num_netifs = 0;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800aca0:	4b37      	ldr	r3, [pc, #220]	@ (800ad80 <netif_add+0x1c4>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	617b      	str	r3, [r7, #20]
 800aca6:	e02b      	b.n	800ad00 <netif_add+0x144>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800aca8:	697a      	ldr	r2, [r7, #20]
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	429a      	cmp	r2, r3
 800acae:	d106      	bne.n	800acbe <netif_add+0x102>
 800acb0:	4b2c      	ldr	r3, [pc, #176]	@ (800ad64 <netif_add+0x1a8>)
 800acb2:	f240 128b 	movw	r2, #395	@ 0x18b
 800acb6:	4933      	ldr	r1, [pc, #204]	@ (800ad84 <netif_add+0x1c8>)
 800acb8:	482c      	ldr	r0, [pc, #176]	@ (800ad6c <netif_add+0x1b0>)
 800acba:	f00c f9cd 	bl	8017058 <iprintf>
        num_netifs++;
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	3301      	adds	r3, #1
 800acc2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	2bff      	cmp	r3, #255	@ 0xff
 800acc8:	dd06      	ble.n	800acd8 <netif_add+0x11c>
 800acca:	4b26      	ldr	r3, [pc, #152]	@ (800ad64 <netif_add+0x1a8>)
 800accc:	f240 128d 	movw	r2, #397	@ 0x18d
 800acd0:	492d      	ldr	r1, [pc, #180]	@ (800ad88 <netif_add+0x1cc>)
 800acd2:	4826      	ldr	r0, [pc, #152]	@ (800ad6c <netif_add+0x1b0>)
 800acd4:	f00c f9c0 	bl	8017058 <iprintf>
        if (netif2->num == netif->num) {
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d108      	bne.n	800acfa <netif_add+0x13e>
          netif->num++;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800acee:	3301      	adds	r3, #1
 800acf0:	b2da      	uxtb	r2, r3
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          break;
 800acf8:	e005      	b.n	800ad06 <netif_add+0x14a>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	617b      	str	r3, [r7, #20]
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d1d0      	bne.n	800aca8 <netif_add+0xec>
        }
      }
    } while (netif2 != NULL);
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d1be      	bne.n	800ac8a <netif_add+0xce>
  }
  if (netif->num == 254) {
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ad12:	2bfe      	cmp	r3, #254	@ 0xfe
 800ad14:	d103      	bne.n	800ad1e <netif_add+0x162>
    netif_num = 0;
 800ad16:	4b19      	ldr	r3, [pc, #100]	@ (800ad7c <netif_add+0x1c0>)
 800ad18:	2200      	movs	r2, #0
 800ad1a:	701a      	strb	r2, [r3, #0]
 800ad1c:	e006      	b.n	800ad2c <netif_add+0x170>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ad24:	3301      	adds	r3, #1
 800ad26:	b2da      	uxtb	r2, r3
 800ad28:	4b14      	ldr	r3, [pc, #80]	@ (800ad7c <netif_add+0x1c0>)
 800ad2a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ad2c:	4b14      	ldr	r3, [pc, #80]	@ (800ad80 <netif_add+0x1c4>)
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ad34:	4a12      	ldr	r2, [pc, #72]	@ (800ad80 <netif_add+0x1c4>)
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	6013      	str	r3, [r2, #0]
#endif /* "LWIP_SINGLE_NETIF */
  mib2_netif_added(netif);

#if LWIP_IGMP
  /* start IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad40:	f003 0320 	and.w	r3, r3, #32
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d002      	beq.n	800ad4e <netif_add+0x192>
    igmp_start(netif);
 800ad48:	68f8      	ldr	r0, [r7, #12]
 800ad4a:	f00a f985 	bl	8015058 <igmp_start>
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);
 800ad4e:	2200      	movs	r2, #0
 800ad50:	2101      	movs	r1, #1
 800ad52:	68f8      	ldr	r0, [r7, #12]
 800ad54:	f000 fb00 	bl	800b358 <netif_invoke_ext_callback>

  return netif;
 800ad58:	68fb      	ldr	r3, [r7, #12]
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3718      	adds	r7, #24
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	080189c0 	.word	0x080189c0
 800ad68:	08018a54 	.word	0x08018a54
 800ad6c:	08018a10 	.word	0x08018a10
 800ad70:	08018a70 	.word	0x08018a70
 800ad74:	0801b8d4 	.word	0x0801b8d4
 800ad78:	0800b2f1 	.word	0x0800b2f1
 800ad7c:	2000cabc 	.word	0x2000cabc
 800ad80:	2000cab4 	.word	0x2000cab4
 800ad84:	08018a94 	.word	0x08018a94
 800ad88:	08018aa8 	.word	0x08018aa8

0800ad8c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b082      	sub	sp, #8
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ad96:	6839      	ldr	r1, [r7, #0]
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f002 fc67 	bl	800d66c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ad9e:	6839      	ldr	r1, [r7, #0]
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f007 f927 	bl	8011ff4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800ada6:	bf00      	nop
 800ada8:	3708      	adds	r7, #8
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
	...

0800adb0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b086      	sub	sp, #24
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	60b9      	str	r1, [r7, #8]
 800adba:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d106      	bne.n	800add0 <netif_do_set_ipaddr+0x20>
 800adc2:	4b21      	ldr	r3, [pc, #132]	@ (800ae48 <netif_do_set_ipaddr+0x98>)
 800adc4:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800adc8:	4920      	ldr	r1, [pc, #128]	@ (800ae4c <netif_do_set_ipaddr+0x9c>)
 800adca:	4821      	ldr	r0, [pc, #132]	@ (800ae50 <netif_do_set_ipaddr+0xa0>)
 800adcc:	f00c f944 	bl	8017058 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d106      	bne.n	800ade4 <netif_do_set_ipaddr+0x34>
 800add6:	4b1c      	ldr	r3, [pc, #112]	@ (800ae48 <netif_do_set_ipaddr+0x98>)
 800add8:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800addc:	491b      	ldr	r1, [pc, #108]	@ (800ae4c <netif_do_set_ipaddr+0x9c>)
 800adde:	481c      	ldr	r0, [pc, #112]	@ (800ae50 <netif_do_set_ipaddr+0xa0>)
 800ade0:	f00c f93a 	bl	8017058 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	681a      	ldr	r2, [r3, #0]
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	3304      	adds	r3, #4
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	429a      	cmp	r2, r3
 800adf0:	d024      	beq.n	800ae3c <netif_do_set_ipaddr+0x8c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	3304      	adds	r3, #4
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ae02:	f107 0314 	add.w	r3, r7, #20
 800ae06:	4619      	mov	r1, r3
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f7ff ffbf 	bl	800ad8c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d002      	beq.n	800ae1a <netif_do_set_ipaddr+0x6a>
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	e000      	b.n	800ae1c <netif_do_set_ipaddr+0x6c>
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	68fa      	ldr	r2, [r7, #12]
 800ae1e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ae20:	2101      	movs	r1, #1
 800ae22:	68f8      	ldr	r0, [r7, #12]
 800ae24:	f000 f94a 	bl	800b0bc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	69db      	ldr	r3, [r3, #28]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d003      	beq.n	800ae38 <netif_do_set_ipaddr+0x88>
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	69db      	ldr	r3, [r3, #28]
 800ae34:	68f8      	ldr	r0, [r7, #12]
 800ae36:	4798      	blx	r3
    return 1; /* address changed */
 800ae38:	2301      	movs	r3, #1
 800ae3a:	e000      	b.n	800ae3e <netif_do_set_ipaddr+0x8e>
  }
  return 0; /* address unchanged */
 800ae3c:	2300      	movs	r3, #0
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3718      	adds	r7, #24
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	080189c0 	.word	0x080189c0
 800ae4c:	08018ad8 	.word	0x08018ad8
 800ae50:	08018a10 	.word	0x08018a10

0800ae54 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b084      	sub	sp, #16
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	60f8      	str	r0, [r7, #12]
 800ae5c:	60b9      	str	r1, [r7, #8]
 800ae5e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	681a      	ldr	r2, [r3, #0]
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	3308      	adds	r3, #8
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d019      	beq.n	800aea2 <netif_do_set_netmask+0x4e>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    LWIP_ASSERT("invalid pointer", old_nm != NULL);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d106      	bne.n	800ae82 <netif_do_set_netmask+0x2e>
 800ae74:	4b0d      	ldr	r3, [pc, #52]	@ (800aeac <netif_do_set_netmask+0x58>)
 800ae76:	f44f 7204 	mov.w	r2, #528	@ 0x210
 800ae7a:	490d      	ldr	r1, [pc, #52]	@ (800aeb0 <netif_do_set_netmask+0x5c>)
 800ae7c:	480d      	ldr	r0, [pc, #52]	@ (800aeb4 <netif_do_set_netmask+0x60>)
 800ae7e:	f00c f8eb 	bl	8017058 <iprintf>
    ip_addr_copy(*old_nm, *netif_ip_netmask4(netif));
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	3308      	adds	r3, #8
 800ae86:	681a      	ldr	r2, [r3, #0]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	601a      	str	r2, [r3, #0]
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d002      	beq.n	800ae98 <netif_do_set_netmask+0x44>
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	e000      	b.n	800ae9a <netif_do_set_netmask+0x46>
 800ae98:	2300      	movs	r3, #0
 800ae9a:	68fa      	ldr	r2, [r7, #12]
 800ae9c:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800ae9e:	2301      	movs	r3, #1
 800aea0:	e000      	b.n	800aea4 <netif_do_set_netmask+0x50>
  }
  return 0; /* netmask unchanged */
 800aea2:	2300      	movs	r3, #0
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3710      	adds	r7, #16
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}
 800aeac:	080189c0 	.word	0x080189c0
 800aeb0:	08018ad8 	.word	0x08018ad8
 800aeb4:	08018a10 	.word	0x08018a10

0800aeb8 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b084      	sub	sp, #16
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	60f8      	str	r0, [r7, #12]
 800aec0:	60b9      	str	r1, [r7, #8]
 800aec2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	681a      	ldr	r2, [r3, #0]
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	330c      	adds	r3, #12
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	429a      	cmp	r2, r3
 800aed0:	d019      	beq.n	800af06 <netif_do_set_gw+0x4e>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    LWIP_ASSERT("invalid pointer", old_gw != NULL);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d106      	bne.n	800aee6 <netif_do_set_gw+0x2e>
 800aed8:	4b0d      	ldr	r3, [pc, #52]	@ (800af10 <netif_do_set_gw+0x58>)
 800aeda:	f44f 7214 	mov.w	r2, #592	@ 0x250
 800aede:	490d      	ldr	r1, [pc, #52]	@ (800af14 <netif_do_set_gw+0x5c>)
 800aee0:	480d      	ldr	r0, [pc, #52]	@ (800af18 <netif_do_set_gw+0x60>)
 800aee2:	f00c f8b9 	bl	8017058 <iprintf>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	330c      	adds	r3, #12
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	601a      	str	r2, [r3, #0]
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d002      	beq.n	800aefc <netif_do_set_gw+0x44>
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	e000      	b.n	800aefe <netif_do_set_gw+0x46>
 800aefc:	2300      	movs	r3, #0
 800aefe:	68fa      	ldr	r2, [r7, #12]
 800af00:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800af02:	2301      	movs	r3, #1
 800af04:	e000      	b.n	800af08 <netif_do_set_gw+0x50>
  }
  return 0; /* gateway unchanged */
 800af06:	2300      	movs	r3, #0
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3710      	adds	r7, #16
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}
 800af10:	080189c0 	.word	0x080189c0
 800af14:	08018ad8 	.word	0x08018ad8
 800af18:	08018a10 	.word	0x08018a10

0800af1c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b08e      	sub	sp, #56	@ 0x38
 800af20:	af00      	add	r7, sp, #0
 800af22:	60f8      	str	r0, [r7, #12]
 800af24:	60b9      	str	r1, [r7, #8]
 800af26:	607a      	str	r2, [r7, #4]
 800af28:	603b      	str	r3, [r7, #0]
#if LWIP_NETIF_EXT_STATUS_CALLBACK
  netif_nsc_reason_t change_reason = LWIP_NSC_NONE;
 800af2a:	2300      	movs	r3, #0
 800af2c:	86fb      	strh	r3, [r7, #54]	@ 0x36
  netif_ext_callback_args_t cb_args;
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
 800af2e:	f107 0318 	add.w	r3, r7, #24
 800af32:	633b      	str	r3, [r7, #48]	@ 0x30
  ip_addr_t *old_gw = &old_gw_val;
 800af34:	f107 0314 	add.w	r3, r7, #20
 800af38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d101      	bne.n	800af44 <netif_set_addr+0x28>
    ipaddr = IP4_ADDR_ANY4;
 800af40:	4b36      	ldr	r3, [pc, #216]	@ (800b01c <netif_set_addr+0x100>)
 800af42:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d101      	bne.n	800af4e <netif_set_addr+0x32>
    netmask = IP4_ADDR_ANY4;
 800af4a:	4b34      	ldr	r3, [pc, #208]	@ (800b01c <netif_set_addr+0x100>)
 800af4c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d101      	bne.n	800af58 <netif_set_addr+0x3c>
    gw = IP4_ADDR_ANY4;
 800af54:	4b31      	ldr	r3, [pc, #196]	@ (800b01c <netif_set_addr+0x100>)
 800af56:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d003      	beq.n	800af66 <netif_set_addr+0x4a>
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d101      	bne.n	800af6a <netif_set_addr+0x4e>
 800af66:	2301      	movs	r3, #1
 800af68:	e000      	b.n	800af6c <netif_set_addr+0x50>
 800af6a:	2300      	movs	r3, #0
 800af6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (remove) {
 800af6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af70:	2b00      	cmp	r3, #0
 800af72:	d010      	beq.n	800af96 <netif_set_addr+0x7a>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800af74:	f107 0310 	add.w	r3, r7, #16
 800af78:	461a      	mov	r2, r3
 800af7a:	68b9      	ldr	r1, [r7, #8]
 800af7c:	68f8      	ldr	r0, [r7, #12]
 800af7e:	f7ff ff17 	bl	800adb0 <netif_do_set_ipaddr>
 800af82:	4603      	mov	r3, r0
 800af84:	2b00      	cmp	r3, #0
 800af86:	d006      	beq.n	800af96 <netif_set_addr+0x7a>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
 800af88:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800af8a:	f043 0310 	orr.w	r3, r3, #16
 800af8e:	86fb      	strh	r3, [r7, #54]	@ 0x36
      cb_args.ipv4_changed.old_address = &old_addr;
 800af90:	f107 0310 	add.w	r3, r7, #16
 800af94:	61fb      	str	r3, [r7, #28]
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800af96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af98:	6879      	ldr	r1, [r7, #4]
 800af9a:	68f8      	ldr	r0, [r7, #12]
 800af9c:	f7ff ff5a 	bl	800ae54 <netif_do_set_netmask>
 800afa0:	4603      	mov	r3, r0
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d005      	beq.n	800afb2 <netif_set_addr+0x96>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
 800afa6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800afa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afac:	86fb      	strh	r3, [r7, #54]	@ 0x36
    cb_args.ipv4_changed.old_netmask = old_nm;
 800afae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afb0:	623b      	str	r3, [r7, #32]
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800afb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800afb4:	6839      	ldr	r1, [r7, #0]
 800afb6:	68f8      	ldr	r0, [r7, #12]
 800afb8:	f7ff ff7e 	bl	800aeb8 <netif_do_set_gw>
 800afbc:	4603      	mov	r3, r0
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d005      	beq.n	800afce <netif_set_addr+0xb2>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
 800afc2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800afc4:	f043 0320 	orr.w	r3, r3, #32
 800afc8:	86fb      	strh	r3, [r7, #54]	@ 0x36
    cb_args.ipv4_changed.old_gw = old_gw;
 800afca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afcc:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
  }
  if (!remove) {
 800afce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d110      	bne.n	800aff6 <netif_set_addr+0xda>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800afd4:	f107 0310 	add.w	r3, r7, #16
 800afd8:	461a      	mov	r2, r3
 800afda:	68b9      	ldr	r1, [r7, #8]
 800afdc:	68f8      	ldr	r0, [r7, #12]
 800afde:	f7ff fee7 	bl	800adb0 <netif_do_set_ipaddr>
 800afe2:	4603      	mov	r3, r0
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d006      	beq.n	800aff6 <netif_set_addr+0xda>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
 800afe8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800afea:	f043 0310 	orr.w	r3, r3, #16
 800afee:	86fb      	strh	r3, [r7, #54]	@ 0x36
      cb_args.ipv4_changed.old_address = &old_addr;
 800aff0:	f107 0310 	add.w	r3, r7, #16
 800aff4:	61fb      	str	r3, [r7, #28]
#endif
    }
  }

#if LWIP_NETIF_EXT_STATUS_CALLBACK
  if (change_reason != LWIP_NSC_NONE) {
 800aff6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d00a      	beq.n	800b012 <netif_set_addr+0xf6>
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
 800affc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800affe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b002:	86fb      	strh	r3, [r7, #54]	@ 0x36
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
 800b004:	f107 021c 	add.w	r2, r7, #28
 800b008:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b00a:	4619      	mov	r1, r3
 800b00c:	68f8      	ldr	r0, [r7, #12]
 800b00e:	f000 f9a3 	bl	800b358 <netif_invoke_ext_callback>
  }
#endif
}
 800b012:	bf00      	nop
 800b014:	3738      	adds	r7, #56	@ 0x38
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
 800b01a:	bf00      	nop
 800b01c:	0801b8d4 	.word	0x0801b8d4

0800b020 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b020:	b480      	push	{r7}
 800b022:	b083      	sub	sp, #12
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b028:	4a04      	ldr	r2, [pc, #16]	@ (800b03c <netif_set_default+0x1c>)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b02e:	bf00      	nop
 800b030:	370c      	adds	r7, #12
 800b032:	46bd      	mov	sp, r7
 800b034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b038:	4770      	bx	lr
 800b03a:	bf00      	nop
 800b03c:	2000cab8 	.word	0x2000cab8

0800b040 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b086      	sub	sp, #24
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d107      	bne.n	800b05e <netif_set_up+0x1e>
 800b04e:	4b18      	ldr	r3, [pc, #96]	@ (800b0b0 <netif_set_up+0x70>)
 800b050:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800b054:	4917      	ldr	r1, [pc, #92]	@ (800b0b4 <netif_set_up+0x74>)
 800b056:	4818      	ldr	r0, [pc, #96]	@ (800b0b8 <netif_set_up+0x78>)
 800b058:	f00b fffe 	bl	8017058 <iprintf>
 800b05c:	e024      	b.n	800b0a8 <netif_set_up+0x68>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b064:	f003 0301 	and.w	r3, r3, #1
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d11d      	bne.n	800b0a8 <netif_set_up+0x68>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b072:	f043 0301 	orr.w	r3, r3, #1
 800b076:	b2da      	uxtb	r2, r3
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	69db      	ldr	r3, [r3, #28]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d003      	beq.n	800b08e <netif_set_up+0x4e>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	69db      	ldr	r3, [r3, #28]
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	4798      	blx	r3

#if LWIP_NETIF_EXT_STATUS_CALLBACK
    {
      netif_ext_callback_args_t args;
      args.status_changed.state = 1;
 800b08e:	2301      	movs	r3, #1
 800b090:	733b      	strb	r3, [r7, #12]
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
 800b092:	f107 030c 	add.w	r3, r7, #12
 800b096:	461a      	mov	r2, r3
 800b098:	2108      	movs	r1, #8
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f000 f95c 	bl	800b358 <netif_invoke_ext_callback>
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b0a0:	2103      	movs	r1, #3
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f000 f80a 	bl	800b0bc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b0a8:	3718      	adds	r7, #24
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	bf00      	nop
 800b0b0:	080189c0 	.word	0x080189c0
 800b0b4:	08018b48 	.word	0x08018b48
 800b0b8:	08018a10 	.word	0x08018a10

0800b0bc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b082      	sub	sp, #8
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	460b      	mov	r3, r1
 800b0c6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d106      	bne.n	800b0dc <netif_issue_reports+0x20>
 800b0ce:	4b1d      	ldr	r3, [pc, #116]	@ (800b144 <netif_issue_reports+0x88>)
 800b0d0:	f240 326d 	movw	r2, #877	@ 0x36d
 800b0d4:	491c      	ldr	r1, [pc, #112]	@ (800b148 <netif_issue_reports+0x8c>)
 800b0d6:	481d      	ldr	r0, [pc, #116]	@ (800b14c <netif_issue_reports+0x90>)
 800b0d8:	f00b ffbe 	bl	8017058 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b0e2:	f003 0304 	and.w	r3, r3, #4
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d028      	beq.n	800b13c <netif_issue_reports+0x80>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b0f0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d021      	beq.n	800b13c <netif_issue_reports+0x80>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b0f8:	78fb      	ldrb	r3, [r7, #3]
 800b0fa:	f003 0301 	and.w	r3, r3, #1
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d01d      	beq.n	800b13e <netif_issue_reports+0x82>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	3304      	adds	r3, #4
 800b106:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d018      	beq.n	800b13e <netif_issue_reports+0x82>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b112:	f003 0308 	and.w	r3, r3, #8
 800b116:	2b00      	cmp	r3, #0
 800b118:	d005      	beq.n	800b126 <netif_issue_reports+0x6a>
      etharp_gratuitous(netif);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	3304      	adds	r3, #4
 800b11e:	4619      	mov	r1, r3
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f009 fde3 	bl	8014cec <etharp_request>
    }
#endif /* LWIP_ARP */

#if LWIP_IGMP
    /* resend IGMP memberships */
    if (netif->flags & NETIF_FLAG_IGMP) {
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b12c:	f003 0320 	and.w	r3, r3, #32
 800b130:	2b00      	cmp	r3, #0
 800b132:	d004      	beq.n	800b13e <netif_issue_reports+0x82>
      igmp_report_groups(netif);
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f009 ffb9 	bl	80150ac <igmp_report_groups>
 800b13a:	e000      	b.n	800b13e <netif_issue_reports+0x82>
    return;
 800b13c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b13e:	3708      	adds	r7, #8
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}
 800b144:	080189c0 	.word	0x080189c0
 800b148:	08018b64 	.word	0x08018b64
 800b14c:	08018a10 	.word	0x08018a10

0800b150 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b086      	sub	sp, #24
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d107      	bne.n	800b16e <netif_set_down+0x1e>
 800b15e:	4b1b      	ldr	r3, [pc, #108]	@ (800b1cc <netif_set_down+0x7c>)
 800b160:	f240 329b 	movw	r2, #923	@ 0x39b
 800b164:	491a      	ldr	r1, [pc, #104]	@ (800b1d0 <netif_set_down+0x80>)
 800b166:	481b      	ldr	r0, [pc, #108]	@ (800b1d4 <netif_set_down+0x84>)
 800b168:	f00b ff76 	bl	8017058 <iprintf>
 800b16c:	e02a      	b.n	800b1c4 <netif_set_down+0x74>

  if (netif->flags & NETIF_FLAG_UP) {
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b174:	f003 0301 	and.w	r3, r3, #1
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d023      	beq.n	800b1c4 <netif_set_down+0x74>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    {
      netif_ext_callback_args_t args;
      args.status_changed.state = 0;
 800b17c:	2300      	movs	r3, #0
 800b17e:	733b      	strb	r3, [r7, #12]
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
 800b180:	f107 030c 	add.w	r3, r7, #12
 800b184:	461a      	mov	r2, r3
 800b186:	2108      	movs	r1, #8
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 f8e5 	bl	800b358 <netif_invoke_ext_callback>
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b194:	f023 0301 	bic.w	r3, r3, #1
 800b198:	b2da      	uxtb	r2, r3
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b1a6:	f003 0308 	and.w	r3, r3, #8
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d002      	beq.n	800b1b4 <netif_set_down+0x64>
      etharp_cleanup_netif(netif);
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f009 f956 	bl	8014460 <etharp_cleanup_netif>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	69db      	ldr	r3, [r3, #28]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d003      	beq.n	800b1c4 <netif_set_down+0x74>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	69db      	ldr	r3, [r3, #28]
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	4798      	blx	r3
  }
}
 800b1c4:	3718      	adds	r7, #24
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	080189c0 	.word	0x080189c0
 800b1d0:	08018b88 	.word	0x08018b88
 800b1d4:	08018a10 	.word	0x08018a10

0800b1d8 <netif_set_status_callback>:
 * @ingroup netif
 * Set callback to be called when interface is brought up/down or address is changed while up
 */
void
netif_set_status_callback(struct netif *netif, netif_status_callback_fn status_callback)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b083      	sub	sp, #12
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d002      	beq.n	800b1ee <netif_set_status_callback+0x16>
    netif->status_callback = status_callback;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	683a      	ldr	r2, [r7, #0]
 800b1ec:	61da      	str	r2, [r3, #28]
  }
}
 800b1ee:	bf00      	nop
 800b1f0:	370c      	adds	r7, #12
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr
	...

0800b1fc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b086      	sub	sp, #24
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d107      	bne.n	800b21a <netif_set_link_up+0x1e>
 800b20a:	4b19      	ldr	r3, [pc, #100]	@ (800b270 <netif_set_link_up+0x74>)
 800b20c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800b210:	4918      	ldr	r1, [pc, #96]	@ (800b274 <netif_set_link_up+0x78>)
 800b212:	4819      	ldr	r0, [pc, #100]	@ (800b278 <netif_set_link_up+0x7c>)
 800b214:	f00b ff20 	bl	8017058 <iprintf>
 800b218:	e027      	b.n	800b26a <netif_set_link_up+0x6e>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b220:	f003 0304 	and.w	r3, r3, #4
 800b224:	2b00      	cmp	r3, #0
 800b226:	d120      	bne.n	800b26a <netif_set_link_up+0x6e>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b22e:	f043 0304 	orr.w	r3, r3, #4
 800b232:	b2da      	uxtb	r2, r3
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f007 fb0c 	bl	8012858 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b240:	2103      	movs	r1, #3
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f7ff ff3a 	bl	800b0bc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6a1b      	ldr	r3, [r3, #32]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d003      	beq.n	800b258 <netif_set_link_up+0x5c>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6a1b      	ldr	r3, [r3, #32]
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	4798      	blx	r3
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    {
      netif_ext_callback_args_t args;
      args.link_changed.state = 1;
 800b258:	2301      	movs	r3, #1
 800b25a:	733b      	strb	r3, [r7, #12]
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
 800b25c:	f107 030c 	add.w	r3, r7, #12
 800b260:	461a      	mov	r2, r3
 800b262:	2104      	movs	r1, #4
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f000 f877 	bl	800b358 <netif_invoke_ext_callback>
    }
#endif
  }
}
 800b26a:	3718      	adds	r7, #24
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}
 800b270:	080189c0 	.word	0x080189c0
 800b274:	08018ba8 	.word	0x08018ba8
 800b278:	08018a10 	.word	0x08018a10

0800b27c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b086      	sub	sp, #24
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d107      	bne.n	800b29a <netif_set_link_down+0x1e>
 800b28a:	4b16      	ldr	r3, [pc, #88]	@ (800b2e4 <netif_set_link_down+0x68>)
 800b28c:	f240 4206 	movw	r2, #1030	@ 0x406
 800b290:	4915      	ldr	r1, [pc, #84]	@ (800b2e8 <netif_set_link_down+0x6c>)
 800b292:	4816      	ldr	r0, [pc, #88]	@ (800b2ec <netif_set_link_down+0x70>)
 800b294:	f00b fee0 	bl	8017058 <iprintf>
 800b298:	e020      	b.n	800b2dc <netif_set_link_down+0x60>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b2a0:	f003 0304 	and.w	r3, r3, #4
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d019      	beq.n	800b2dc <netif_set_link_down+0x60>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b2ae:	f023 0304 	bic.w	r3, r3, #4
 800b2b2:	b2da      	uxtb	r2, r3
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    NETIF_LINK_CALLBACK(netif);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6a1b      	ldr	r3, [r3, #32]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d003      	beq.n	800b2ca <netif_set_link_down+0x4e>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6a1b      	ldr	r3, [r3, #32]
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	4798      	blx	r3
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    {
      netif_ext_callback_args_t args;
      args.link_changed.state = 0;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	733b      	strb	r3, [r7, #12]
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
 800b2ce:	f107 030c 	add.w	r3, r7, #12
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	2104      	movs	r1, #4
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 f83e 	bl	800b358 <netif_invoke_ext_callback>
    }
#endif
  }
}
 800b2dc:	3718      	adds	r7, #24
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	080189c0 	.word	0x080189c0
 800b2e8:	08018bcc 	.word	0x08018bcc
 800b2ec:	08018a10 	.word	0x08018a10

0800b2f0 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b085      	sub	sp, #20
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	60b9      	str	r1, [r7, #8]
 800b2fa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b2fc:	f06f 030b 	mvn.w	r3, #11
}
 800b300:	4618      	mov	r0, r3
 800b302:	3714      	adds	r7, #20
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr

0800b30c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b085      	sub	sp, #20
 800b310:	af00      	add	r7, sp, #0
 800b312:	4603      	mov	r3, r0
 800b314:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b316:	79fb      	ldrb	r3, [r7, #7]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d013      	beq.n	800b344 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b31c:	4b0d      	ldr	r3, [pc, #52]	@ (800b354 <netif_get_by_index+0x48>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	60fb      	str	r3, [r7, #12]
 800b322:	e00c      	b.n	800b33e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b32a:	3301      	adds	r3, #1
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	79fa      	ldrb	r2, [r7, #7]
 800b330:	429a      	cmp	r2, r3
 800b332:	d101      	bne.n	800b338 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	e006      	b.n	800b346 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	60fb      	str	r3, [r7, #12]
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d1ef      	bne.n	800b324 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b344:	2300      	movs	r3, #0
}
 800b346:	4618      	mov	r0, r3
 800b348:	3714      	adds	r7, #20
 800b34a:	46bd      	mov	sp, r7
 800b34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b350:	4770      	bx	lr
 800b352:	bf00      	nop
 800b354:	2000cab4 	.word	0x2000cab4

0800b358 <netif_invoke_ext_callback>:
 * @param reason change reason
 * @param args depends on reason, see reason description
 */
void
netif_invoke_ext_callback(struct netif *netif, netif_nsc_reason_t reason, const netif_ext_callback_args_t *args)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b086      	sub	sp, #24
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	60f8      	str	r0, [r7, #12]
 800b360:	460b      	mov	r3, r1
 800b362:	607a      	str	r2, [r7, #4]
 800b364:	817b      	strh	r3, [r7, #10]
  netif_ext_callback_t *callback = ext_callback;
 800b366:	4b0f      	ldr	r3, [pc, #60]	@ (800b3a4 <netif_invoke_ext_callback+0x4c>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT("netif must be != NULL", netif != NULL);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d110      	bne.n	800b394 <netif_invoke_ext_callback+0x3c>
 800b372:	4b0d      	ldr	r3, [pc, #52]	@ (800b3a8 <netif_invoke_ext_callback+0x50>)
 800b374:	f240 62fc 	movw	r2, #1788	@ 0x6fc
 800b378:	490c      	ldr	r1, [pc, #48]	@ (800b3ac <netif_invoke_ext_callback+0x54>)
 800b37a:	480d      	ldr	r0, [pc, #52]	@ (800b3b0 <netif_invoke_ext_callback+0x58>)
 800b37c:	f00b fe6c 	bl	8017058 <iprintf>

  while (callback != NULL) {
 800b380:	e008      	b.n	800b394 <netif_invoke_ext_callback+0x3c>
    callback->callback_fn(netif, reason, args);
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	8979      	ldrh	r1, [r7, #10]
 800b388:	687a      	ldr	r2, [r7, #4]
 800b38a:	68f8      	ldr	r0, [r7, #12]
 800b38c:	4798      	blx	r3
    callback = callback->next;
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	617b      	str	r3, [r7, #20]
  while (callback != NULL) {
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d1f3      	bne.n	800b382 <netif_invoke_ext_callback+0x2a>
  }
}
 800b39a:	bf00      	nop
 800b39c:	bf00      	nop
 800b39e:	3718      	adds	r7, #24
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}
 800b3a4:	2000cab0 	.word	0x2000cab0
 800b3a8:	080189c0 	.word	0x080189c0
 800b3ac:	08018c30 	.word	0x08018c30
 800b3b0:	08018a10 	.word	0x08018a10

0800b3b4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b082      	sub	sp, #8
 800b3b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b3ba:	f00b fd2f 	bl	8016e1c <sys_arch_protect>
 800b3be:	6038      	str	r0, [r7, #0]
 800b3c0:	4b0d      	ldr	r3, [pc, #52]	@ (800b3f8 <pbuf_free_ooseq+0x44>)
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	701a      	strb	r2, [r3, #0]
 800b3c6:	6838      	ldr	r0, [r7, #0]
 800b3c8:	f00b fd36 	bl	8016e38 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b3cc:	4b0b      	ldr	r3, [pc, #44]	@ (800b3fc <pbuf_free_ooseq+0x48>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	607b      	str	r3, [r7, #4]
 800b3d2:	e00a      	b.n	800b3ea <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d003      	beq.n	800b3e4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f002 f983 	bl	800d6e8 <tcp_free_ooseq>
      return;
 800b3e2:	e005      	b.n	800b3f0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	68db      	ldr	r3, [r3, #12]
 800b3e8:	607b      	str	r3, [r7, #4]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d1f1      	bne.n	800b3d4 <pbuf_free_ooseq+0x20>
    }
  }
}
 800b3f0:	3708      	adds	r7, #8
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}
 800b3f6:	bf00      	nop
 800b3f8:	2000cabd 	.word	0x2000cabd
 800b3fc:	2000cacc 	.word	0x2000cacc

0800b400 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b082      	sub	sp, #8
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b408:	f7ff ffd4 	bl	800b3b4 <pbuf_free_ooseq>
}
 800b40c:	bf00      	nop
 800b40e:	3708      	adds	r7, #8
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}

0800b414 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b41a:	f00b fcff 	bl	8016e1c <sys_arch_protect>
 800b41e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b420:	4b0f      	ldr	r3, [pc, #60]	@ (800b460 <pbuf_pool_is_empty+0x4c>)
 800b422:	781b      	ldrb	r3, [r3, #0]
 800b424:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b426:	4b0e      	ldr	r3, [pc, #56]	@ (800b460 <pbuf_pool_is_empty+0x4c>)
 800b428:	2201      	movs	r2, #1
 800b42a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f00b fd03 	bl	8016e38 <sys_arch_unprotect>

  if (!queued) {
 800b432:	78fb      	ldrb	r3, [r7, #3]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d10f      	bne.n	800b458 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b438:	2100      	movs	r1, #0
 800b43a:	480a      	ldr	r0, [pc, #40]	@ (800b464 <pbuf_pool_is_empty+0x50>)
 800b43c:	f7fe fd44 	bl	8009ec8 <tcpip_try_callback>
 800b440:	4603      	mov	r3, r0
 800b442:	2b00      	cmp	r3, #0
 800b444:	d008      	beq.n	800b458 <pbuf_pool_is_empty+0x44>
 800b446:	f00b fce9 	bl	8016e1c <sys_arch_protect>
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	4b04      	ldr	r3, [pc, #16]	@ (800b460 <pbuf_pool_is_empty+0x4c>)
 800b44e:	2200      	movs	r2, #0
 800b450:	701a      	strb	r2, [r3, #0]
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f00b fcf0 	bl	8016e38 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b458:	bf00      	nop
 800b45a:	3708      	adds	r7, #8
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}
 800b460:	2000cabd 	.word	0x2000cabd
 800b464:	0800b401 	.word	0x0800b401

0800b468 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b468:	b480      	push	{r7}
 800b46a:	b085      	sub	sp, #20
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	4611      	mov	r1, r2
 800b474:	461a      	mov	r2, r3
 800b476:	460b      	mov	r3, r1
 800b478:	80fb      	strh	r3, [r7, #6]
 800b47a:	4613      	mov	r3, r2
 800b47c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2200      	movs	r2, #0
 800b482:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	68ba      	ldr	r2, [r7, #8]
 800b488:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	88fa      	ldrh	r2, [r7, #6]
 800b48e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	88ba      	ldrh	r2, [r7, #4]
 800b494:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b496:	8b3b      	ldrh	r3, [r7, #24]
 800b498:	b2da      	uxtb	r2, r3
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	7f3a      	ldrb	r2, [r7, #28]
 800b4a2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	73da      	strb	r2, [r3, #15]
}
 800b4b0:	bf00      	nop
 800b4b2:	3714      	adds	r7, #20
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr

0800b4bc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b08c      	sub	sp, #48	@ 0x30
 800b4c0:	af02      	add	r7, sp, #8
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	71fb      	strb	r3, [r7, #7]
 800b4c6:	460b      	mov	r3, r1
 800b4c8:	80bb      	strh	r3, [r7, #4]
 800b4ca:	4613      	mov	r3, r2
 800b4cc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b4ce:	79fb      	ldrb	r3, [r7, #7]
 800b4d0:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b4d2:	887b      	ldrh	r3, [r7, #2]
 800b4d4:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800b4d8:	d07f      	beq.n	800b5da <pbuf_alloc+0x11e>
 800b4da:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800b4de:	f300 80c8 	bgt.w	800b672 <pbuf_alloc+0x1b6>
 800b4e2:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800b4e6:	d010      	beq.n	800b50a <pbuf_alloc+0x4e>
 800b4e8:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800b4ec:	f300 80c1 	bgt.w	800b672 <pbuf_alloc+0x1b6>
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d002      	beq.n	800b4fa <pbuf_alloc+0x3e>
 800b4f4:	2b41      	cmp	r3, #65	@ 0x41
 800b4f6:	f040 80bc 	bne.w	800b672 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b4fa:	887a      	ldrh	r2, [r7, #2]
 800b4fc:	88bb      	ldrh	r3, [r7, #4]
 800b4fe:	4619      	mov	r1, r3
 800b500:	2000      	movs	r0, #0
 800b502:	f000 f8d1 	bl	800b6a8 <pbuf_alloc_reference>
 800b506:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800b508:	e0bd      	b.n	800b686 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b50a:	2300      	movs	r3, #0
 800b50c:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800b50e:	2300      	movs	r3, #0
 800b510:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b512:	88bb      	ldrh	r3, [r7, #4]
 800b514:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b516:	200d      	movs	r0, #13
 800b518:	f7ff faa8 	bl	800aa6c <memp_malloc>
 800b51c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d109      	bne.n	800b538 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b524:	f7ff ff76 	bl	800b414 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d002      	beq.n	800b534 <pbuf_alloc+0x78>
            pbuf_free(p);
 800b52e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b530:	f000 faa8 	bl	800ba84 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b534:	2300      	movs	r3, #0
 800b536:	e0a7      	b.n	800b688 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b538:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b53a:	3303      	adds	r3, #3
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	f023 0303 	bic.w	r3, r3, #3
 800b542:	b29b      	uxth	r3, r3
 800b544:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800b548:	b29b      	uxth	r3, r3
 800b54a:	8b7a      	ldrh	r2, [r7, #26]
 800b54c:	4293      	cmp	r3, r2
 800b54e:	bf28      	it	cs
 800b550:	4613      	movcs	r3, r2
 800b552:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b554:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b556:	3310      	adds	r3, #16
 800b558:	693a      	ldr	r2, [r7, #16]
 800b55a:	4413      	add	r3, r2
 800b55c:	3303      	adds	r3, #3
 800b55e:	f023 0303 	bic.w	r3, r3, #3
 800b562:	4618      	mov	r0, r3
 800b564:	89f9      	ldrh	r1, [r7, #14]
 800b566:	8b7a      	ldrh	r2, [r7, #26]
 800b568:	2300      	movs	r3, #0
 800b56a:	9301      	str	r3, [sp, #4]
 800b56c:	887b      	ldrh	r3, [r7, #2]
 800b56e:	9300      	str	r3, [sp, #0]
 800b570:	460b      	mov	r3, r1
 800b572:	4601      	mov	r1, r0
 800b574:	6938      	ldr	r0, [r7, #16]
 800b576:	f7ff ff77 	bl	800b468 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	f003 0303 	and.w	r3, r3, #3
 800b582:	2b00      	cmp	r3, #0
 800b584:	d006      	beq.n	800b594 <pbuf_alloc+0xd8>
 800b586:	4b42      	ldr	r3, [pc, #264]	@ (800b690 <pbuf_alloc+0x1d4>)
 800b588:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b58c:	4941      	ldr	r1, [pc, #260]	@ (800b694 <pbuf_alloc+0x1d8>)
 800b58e:	4842      	ldr	r0, [pc, #264]	@ (800b698 <pbuf_alloc+0x1dc>)
 800b590:	f00b fd62 	bl	8017058 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b594:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b596:	3303      	adds	r3, #3
 800b598:	f023 0303 	bic.w	r3, r3, #3
 800b59c:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800b5a0:	d106      	bne.n	800b5b0 <pbuf_alloc+0xf4>
 800b5a2:	4b3b      	ldr	r3, [pc, #236]	@ (800b690 <pbuf_alloc+0x1d4>)
 800b5a4:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800b5a8:	493c      	ldr	r1, [pc, #240]	@ (800b69c <pbuf_alloc+0x1e0>)
 800b5aa:	483b      	ldr	r0, [pc, #236]	@ (800b698 <pbuf_alloc+0x1dc>)
 800b5ac:	f00b fd54 	bl	8017058 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d102      	bne.n	800b5bc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b5ba:	e002      	b.n	800b5c2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b5bc:	69fb      	ldr	r3, [r7, #28]
 800b5be:	693a      	ldr	r2, [r7, #16]
 800b5c0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b5c6:	8b7a      	ldrh	r2, [r7, #26]
 800b5c8:	89fb      	ldrh	r3, [r7, #14]
 800b5ca:	1ad3      	subs	r3, r2, r3
 800b5cc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800b5d2:	8b7b      	ldrh	r3, [r7, #26]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d19e      	bne.n	800b516 <pbuf_alloc+0x5a>
      break;
 800b5d8:	e055      	b.n	800b686 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b5da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b5dc:	3303      	adds	r3, #3
 800b5de:	b29b      	uxth	r3, r3
 800b5e0:	f023 0303 	bic.w	r3, r3, #3
 800b5e4:	b29a      	uxth	r2, r3
 800b5e6:	88bb      	ldrh	r3, [r7, #4]
 800b5e8:	3303      	adds	r3, #3
 800b5ea:	b29b      	uxth	r3, r3
 800b5ec:	f023 0303 	bic.w	r3, r3, #3
 800b5f0:	b29b      	uxth	r3, r3
 800b5f2:	4413      	add	r3, r2
 800b5f4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b5f6:	8b3b      	ldrh	r3, [r7, #24]
 800b5f8:	3310      	adds	r3, #16
 800b5fa:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b5fc:	8b3a      	ldrh	r2, [r7, #24]
 800b5fe:	88bb      	ldrh	r3, [r7, #4]
 800b600:	3303      	adds	r3, #3
 800b602:	f023 0303 	bic.w	r3, r3, #3
 800b606:	429a      	cmp	r2, r3
 800b608:	d306      	bcc.n	800b618 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b60a:	8afa      	ldrh	r2, [r7, #22]
 800b60c:	88bb      	ldrh	r3, [r7, #4]
 800b60e:	3303      	adds	r3, #3
 800b610:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b614:	429a      	cmp	r2, r3
 800b616:	d201      	bcs.n	800b61c <pbuf_alloc+0x160>
        return NULL;
 800b618:	2300      	movs	r3, #0
 800b61a:	e035      	b.n	800b688 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b61c:	8afb      	ldrh	r3, [r7, #22]
 800b61e:	4618      	mov	r0, r3
 800b620:	f7ff f880 	bl	800a724 <mem_malloc>
 800b624:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800b626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d101      	bne.n	800b630 <pbuf_alloc+0x174>
        return NULL;
 800b62c:	2300      	movs	r3, #0
 800b62e:	e02b      	b.n	800b688 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b630:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b632:	3310      	adds	r3, #16
 800b634:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b636:	4413      	add	r3, r2
 800b638:	3303      	adds	r3, #3
 800b63a:	f023 0303 	bic.w	r3, r3, #3
 800b63e:	4618      	mov	r0, r3
 800b640:	88b9      	ldrh	r1, [r7, #4]
 800b642:	88ba      	ldrh	r2, [r7, #4]
 800b644:	2300      	movs	r3, #0
 800b646:	9301      	str	r3, [sp, #4]
 800b648:	887b      	ldrh	r3, [r7, #2]
 800b64a:	9300      	str	r3, [sp, #0]
 800b64c:	460b      	mov	r3, r1
 800b64e:	4601      	mov	r1, r0
 800b650:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b652:	f7ff ff09 	bl	800b468 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	f003 0303 	and.w	r3, r3, #3
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d010      	beq.n	800b684 <pbuf_alloc+0x1c8>
 800b662:	4b0b      	ldr	r3, [pc, #44]	@ (800b690 <pbuf_alloc+0x1d4>)
 800b664:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800b668:	490d      	ldr	r1, [pc, #52]	@ (800b6a0 <pbuf_alloc+0x1e4>)
 800b66a:	480b      	ldr	r0, [pc, #44]	@ (800b698 <pbuf_alloc+0x1dc>)
 800b66c:	f00b fcf4 	bl	8017058 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b670:	e008      	b.n	800b684 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b672:	4b07      	ldr	r3, [pc, #28]	@ (800b690 <pbuf_alloc+0x1d4>)
 800b674:	f240 1227 	movw	r2, #295	@ 0x127
 800b678:	490a      	ldr	r1, [pc, #40]	@ (800b6a4 <pbuf_alloc+0x1e8>)
 800b67a:	4807      	ldr	r0, [pc, #28]	@ (800b698 <pbuf_alloc+0x1dc>)
 800b67c:	f00b fcec 	bl	8017058 <iprintf>
      return NULL;
 800b680:	2300      	movs	r3, #0
 800b682:	e001      	b.n	800b688 <pbuf_alloc+0x1cc>
      break;
 800b684:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3728      	adds	r7, #40	@ 0x28
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}
 800b690:	08018c48 	.word	0x08018c48
 800b694:	08018c78 	.word	0x08018c78
 800b698:	08018ca8 	.word	0x08018ca8
 800b69c:	08018cd0 	.word	0x08018cd0
 800b6a0:	08018d04 	.word	0x08018d04
 800b6a4:	08018d30 	.word	0x08018d30

0800b6a8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b086      	sub	sp, #24
 800b6ac:	af02      	add	r7, sp, #8
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	460b      	mov	r3, r1
 800b6b2:	807b      	strh	r3, [r7, #2]
 800b6b4:	4613      	mov	r3, r2
 800b6b6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b6b8:	883b      	ldrh	r3, [r7, #0]
 800b6ba:	2b41      	cmp	r3, #65	@ 0x41
 800b6bc:	d009      	beq.n	800b6d2 <pbuf_alloc_reference+0x2a>
 800b6be:	883b      	ldrh	r3, [r7, #0]
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d006      	beq.n	800b6d2 <pbuf_alloc_reference+0x2a>
 800b6c4:	4b0f      	ldr	r3, [pc, #60]	@ (800b704 <pbuf_alloc_reference+0x5c>)
 800b6c6:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800b6ca:	490f      	ldr	r1, [pc, #60]	@ (800b708 <pbuf_alloc_reference+0x60>)
 800b6cc:	480f      	ldr	r0, [pc, #60]	@ (800b70c <pbuf_alloc_reference+0x64>)
 800b6ce:	f00b fcc3 	bl	8017058 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b6d2:	200c      	movs	r0, #12
 800b6d4:	f7ff f9ca 	bl	800aa6c <memp_malloc>
 800b6d8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d101      	bne.n	800b6e4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	e00b      	b.n	800b6fc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b6e4:	8879      	ldrh	r1, [r7, #2]
 800b6e6:	887a      	ldrh	r2, [r7, #2]
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	9301      	str	r3, [sp, #4]
 800b6ec:	883b      	ldrh	r3, [r7, #0]
 800b6ee:	9300      	str	r3, [sp, #0]
 800b6f0:	460b      	mov	r3, r1
 800b6f2:	6879      	ldr	r1, [r7, #4]
 800b6f4:	68f8      	ldr	r0, [r7, #12]
 800b6f6:	f7ff feb7 	bl	800b468 <pbuf_init_alloced_pbuf>
  return p;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	3710      	adds	r7, #16
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}
 800b704:	08018c48 	.word	0x08018c48
 800b708:	08018d4c 	.word	0x08018d4c
 800b70c:	08018ca8 	.word	0x08018ca8

0800b710 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b088      	sub	sp, #32
 800b714:	af02      	add	r7, sp, #8
 800b716:	607b      	str	r3, [r7, #4]
 800b718:	4603      	mov	r3, r0
 800b71a:	73fb      	strb	r3, [r7, #15]
 800b71c:	460b      	mov	r3, r1
 800b71e:	81bb      	strh	r3, [r7, #12]
 800b720:	4613      	mov	r3, r2
 800b722:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b724:	7bfb      	ldrb	r3, [r7, #15]
 800b726:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b728:	8a7b      	ldrh	r3, [r7, #18]
 800b72a:	3303      	adds	r3, #3
 800b72c:	f023 0203 	bic.w	r2, r3, #3
 800b730:	89bb      	ldrh	r3, [r7, #12]
 800b732:	441a      	add	r2, r3
 800b734:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b736:	429a      	cmp	r2, r3
 800b738:	d901      	bls.n	800b73e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b73a:	2300      	movs	r3, #0
 800b73c:	e018      	b.n	800b770 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b73e:	6a3b      	ldr	r3, [r7, #32]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d007      	beq.n	800b754 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b744:	8a7b      	ldrh	r3, [r7, #18]
 800b746:	3303      	adds	r3, #3
 800b748:	f023 0303 	bic.w	r3, r3, #3
 800b74c:	6a3a      	ldr	r2, [r7, #32]
 800b74e:	4413      	add	r3, r2
 800b750:	617b      	str	r3, [r7, #20]
 800b752:	e001      	b.n	800b758 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b754:	2300      	movs	r3, #0
 800b756:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	89b9      	ldrh	r1, [r7, #12]
 800b75c:	89ba      	ldrh	r2, [r7, #12]
 800b75e:	2302      	movs	r3, #2
 800b760:	9301      	str	r3, [sp, #4]
 800b762:	897b      	ldrh	r3, [r7, #10]
 800b764:	9300      	str	r3, [sp, #0]
 800b766:	460b      	mov	r3, r1
 800b768:	6979      	ldr	r1, [r7, #20]
 800b76a:	f7ff fe7d 	bl	800b468 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b76e:	687b      	ldr	r3, [r7, #4]
}
 800b770:	4618      	mov	r0, r3
 800b772:	3718      	adds	r7, #24
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}

0800b778 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b084      	sub	sp, #16
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
 800b780:	460b      	mov	r3, r1
 800b782:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d106      	bne.n	800b798 <pbuf_realloc+0x20>
 800b78a:	4b3a      	ldr	r3, [pc, #232]	@ (800b874 <pbuf_realloc+0xfc>)
 800b78c:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800b790:	4939      	ldr	r1, [pc, #228]	@ (800b878 <pbuf_realloc+0x100>)
 800b792:	483a      	ldr	r0, [pc, #232]	@ (800b87c <pbuf_realloc+0x104>)
 800b794:	f00b fc60 	bl	8017058 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	891b      	ldrh	r3, [r3, #8]
 800b79c:	887a      	ldrh	r2, [r7, #2]
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d263      	bcs.n	800b86a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	891a      	ldrh	r2, [r3, #8]
 800b7a6:	887b      	ldrh	r3, [r7, #2]
 800b7a8:	1ad3      	subs	r3, r2, r3
 800b7aa:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b7ac:	887b      	ldrh	r3, [r7, #2]
 800b7ae:	817b      	strh	r3, [r7, #10]
  q = p;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b7b4:	e018      	b.n	800b7e8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	895b      	ldrh	r3, [r3, #10]
 800b7ba:	897a      	ldrh	r2, [r7, #10]
 800b7bc:	1ad3      	subs	r3, r2, r3
 800b7be:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	891a      	ldrh	r2, [r3, #8]
 800b7c4:	893b      	ldrh	r3, [r7, #8]
 800b7c6:	1ad3      	subs	r3, r2, r3
 800b7c8:	b29a      	uxth	r2, r3
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d106      	bne.n	800b7e8 <pbuf_realloc+0x70>
 800b7da:	4b26      	ldr	r3, [pc, #152]	@ (800b874 <pbuf_realloc+0xfc>)
 800b7dc:	f240 12af 	movw	r2, #431	@ 0x1af
 800b7e0:	4927      	ldr	r1, [pc, #156]	@ (800b880 <pbuf_realloc+0x108>)
 800b7e2:	4826      	ldr	r0, [pc, #152]	@ (800b87c <pbuf_realloc+0x104>)
 800b7e4:	f00b fc38 	bl	8017058 <iprintf>
  while (rem_len > q->len) {
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	895b      	ldrh	r3, [r3, #10]
 800b7ec:	897a      	ldrh	r2, [r7, #10]
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d8e1      	bhi.n	800b7b6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	7b1b      	ldrb	r3, [r3, #12]
 800b7f6:	f003 030f 	and.w	r3, r3, #15
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d121      	bne.n	800b842 <pbuf_realloc+0xca>
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	895b      	ldrh	r3, [r3, #10]
 800b802:	897a      	ldrh	r2, [r7, #10]
 800b804:	429a      	cmp	r2, r3
 800b806:	d01c      	beq.n	800b842 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	7b5b      	ldrb	r3, [r3, #13]
 800b80c:	f003 0302 	and.w	r3, r3, #2
 800b810:	2b00      	cmp	r3, #0
 800b812:	d116      	bne.n	800b842 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	685a      	ldr	r2, [r3, #4]
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	1ad3      	subs	r3, r2, r3
 800b81c:	b29a      	uxth	r2, r3
 800b81e:	897b      	ldrh	r3, [r7, #10]
 800b820:	4413      	add	r3, r2
 800b822:	b29b      	uxth	r3, r3
 800b824:	4619      	mov	r1, r3
 800b826:	68f8      	ldr	r0, [r7, #12]
 800b828:	f7fe fe72 	bl	800a510 <mem_trim>
 800b82c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d106      	bne.n	800b842 <pbuf_realloc+0xca>
 800b834:	4b0f      	ldr	r3, [pc, #60]	@ (800b874 <pbuf_realloc+0xfc>)
 800b836:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800b83a:	4912      	ldr	r1, [pc, #72]	@ (800b884 <pbuf_realloc+0x10c>)
 800b83c:	480f      	ldr	r0, [pc, #60]	@ (800b87c <pbuf_realloc+0x104>)
 800b83e:	f00b fc0b 	bl	8017058 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	897a      	ldrh	r2, [r7, #10]
 800b846:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	895a      	ldrh	r2, [r3, #10]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d004      	beq.n	800b862 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4618      	mov	r0, r3
 800b85e:	f000 f911 	bl	800ba84 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	2200      	movs	r2, #0
 800b866:	601a      	str	r2, [r3, #0]
 800b868:	e000      	b.n	800b86c <pbuf_realloc+0xf4>
    return;
 800b86a:	bf00      	nop

}
 800b86c:	3710      	adds	r7, #16
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	08018c48 	.word	0x08018c48
 800b878:	08018d60 	.word	0x08018d60
 800b87c:	08018ca8 	.word	0x08018ca8
 800b880:	08018d78 	.word	0x08018d78
 800b884:	08018d90 	.word	0x08018d90

0800b888 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b086      	sub	sp, #24
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	60f8      	str	r0, [r7, #12]
 800b890:	60b9      	str	r1, [r7, #8]
 800b892:	4613      	mov	r3, r2
 800b894:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d106      	bne.n	800b8aa <pbuf_add_header_impl+0x22>
 800b89c:	4b2b      	ldr	r3, [pc, #172]	@ (800b94c <pbuf_add_header_impl+0xc4>)
 800b89e:	f240 12df 	movw	r2, #479	@ 0x1df
 800b8a2:	492b      	ldr	r1, [pc, #172]	@ (800b950 <pbuf_add_header_impl+0xc8>)
 800b8a4:	482b      	ldr	r0, [pc, #172]	@ (800b954 <pbuf_add_header_impl+0xcc>)
 800b8a6:	f00b fbd7 	bl	8017058 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d003      	beq.n	800b8b8 <pbuf_add_header_impl+0x30>
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8b6:	d301      	bcc.n	800b8bc <pbuf_add_header_impl+0x34>
    return 1;
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	e043      	b.n	800b944 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d101      	bne.n	800b8c6 <pbuf_add_header_impl+0x3e>
    return 0;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	e03e      	b.n	800b944 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	891a      	ldrh	r2, [r3, #8]
 800b8ce:	8a7b      	ldrh	r3, [r7, #18]
 800b8d0:	4413      	add	r3, r2
 800b8d2:	b29b      	uxth	r3, r3
 800b8d4:	8a7a      	ldrh	r2, [r7, #18]
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	d901      	bls.n	800b8de <pbuf_add_header_impl+0x56>
    return 1;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	e032      	b.n	800b944 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	7b1b      	ldrb	r3, [r3, #12]
 800b8e2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b8e4:	8a3b      	ldrh	r3, [r7, #16]
 800b8e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d00c      	beq.n	800b908 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	685a      	ldr	r2, [r3, #4]
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	425b      	negs	r3, r3
 800b8f6:	4413      	add	r3, r2
 800b8f8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	3310      	adds	r3, #16
 800b8fe:	697a      	ldr	r2, [r7, #20]
 800b900:	429a      	cmp	r2, r3
 800b902:	d20d      	bcs.n	800b920 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b904:	2301      	movs	r3, #1
 800b906:	e01d      	b.n	800b944 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b908:	79fb      	ldrb	r3, [r7, #7]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d006      	beq.n	800b91c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	685a      	ldr	r2, [r3, #4]
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	425b      	negs	r3, r3
 800b916:	4413      	add	r3, r2
 800b918:	617b      	str	r3, [r7, #20]
 800b91a:	e001      	b.n	800b920 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b91c:	2301      	movs	r3, #1
 800b91e:	e011      	b.n	800b944 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	697a      	ldr	r2, [r7, #20]
 800b924:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	895a      	ldrh	r2, [r3, #10]
 800b92a:	8a7b      	ldrh	r3, [r7, #18]
 800b92c:	4413      	add	r3, r2
 800b92e:	b29a      	uxth	r2, r3
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	891a      	ldrh	r2, [r3, #8]
 800b938:	8a7b      	ldrh	r3, [r7, #18]
 800b93a:	4413      	add	r3, r2
 800b93c:	b29a      	uxth	r2, r3
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	811a      	strh	r2, [r3, #8]


  return 0;
 800b942:	2300      	movs	r3, #0
}
 800b944:	4618      	mov	r0, r3
 800b946:	3718      	adds	r7, #24
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}
 800b94c:	08018c48 	.word	0x08018c48
 800b950:	08018dac 	.word	0x08018dac
 800b954:	08018ca8 	.word	0x08018ca8

0800b958 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b082      	sub	sp, #8
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b962:	2200      	movs	r2, #0
 800b964:	6839      	ldr	r1, [r7, #0]
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f7ff ff8e 	bl	800b888 <pbuf_add_header_impl>
 800b96c:	4603      	mov	r3, r0
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3708      	adds	r7, #8
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}
	...

0800b978 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b084      	sub	sp, #16
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d106      	bne.n	800b996 <pbuf_remove_header+0x1e>
 800b988:	4b20      	ldr	r3, [pc, #128]	@ (800ba0c <pbuf_remove_header+0x94>)
 800b98a:	f240 224b 	movw	r2, #587	@ 0x24b
 800b98e:	4920      	ldr	r1, [pc, #128]	@ (800ba10 <pbuf_remove_header+0x98>)
 800b990:	4820      	ldr	r0, [pc, #128]	@ (800ba14 <pbuf_remove_header+0x9c>)
 800b992:	f00b fb61 	bl	8017058 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d003      	beq.n	800b9a4 <pbuf_remove_header+0x2c>
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b9a2:	d301      	bcc.n	800b9a8 <pbuf_remove_header+0x30>
    return 1;
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	e02c      	b.n	800ba02 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d101      	bne.n	800b9b2 <pbuf_remove_header+0x3a>
    return 0;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	e027      	b.n	800ba02 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	895b      	ldrh	r3, [r3, #10]
 800b9ba:	89fa      	ldrh	r2, [r7, #14]
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d908      	bls.n	800b9d2 <pbuf_remove_header+0x5a>
 800b9c0:	4b12      	ldr	r3, [pc, #72]	@ (800ba0c <pbuf_remove_header+0x94>)
 800b9c2:	f240 2255 	movw	r2, #597	@ 0x255
 800b9c6:	4914      	ldr	r1, [pc, #80]	@ (800ba18 <pbuf_remove_header+0xa0>)
 800b9c8:	4812      	ldr	r0, [pc, #72]	@ (800ba14 <pbuf_remove_header+0x9c>)
 800b9ca:	f00b fb45 	bl	8017058 <iprintf>
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	e017      	b.n	800ba02 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	685a      	ldr	r2, [r3, #4]
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	441a      	add	r2, r3
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	895a      	ldrh	r2, [r3, #10]
 800b9e8:	89fb      	ldrh	r3, [r7, #14]
 800b9ea:	1ad3      	subs	r3, r2, r3
 800b9ec:	b29a      	uxth	r2, r3
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	891a      	ldrh	r2, [r3, #8]
 800b9f6:	89fb      	ldrh	r3, [r7, #14]
 800b9f8:	1ad3      	subs	r3, r2, r3
 800b9fa:	b29a      	uxth	r2, r3
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800ba00:	2300      	movs	r3, #0
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3710      	adds	r7, #16
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	08018c48 	.word	0x08018c48
 800ba10:	08018dac 	.word	0x08018dac
 800ba14:	08018ca8 	.word	0x08018ca8
 800ba18:	08018db8 	.word	0x08018db8

0800ba1c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b082      	sub	sp, #8
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
 800ba24:	460b      	mov	r3, r1
 800ba26:	807b      	strh	r3, [r7, #2]
 800ba28:	4613      	mov	r3, r2
 800ba2a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800ba2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	da08      	bge.n	800ba46 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ba34:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ba38:	425b      	negs	r3, r3
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f7ff ff9b 	bl	800b978 <pbuf_remove_header>
 800ba42:	4603      	mov	r3, r0
 800ba44:	e007      	b.n	800ba56 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ba46:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ba4a:	787a      	ldrb	r2, [r7, #1]
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f7ff ff1a 	bl	800b888 <pbuf_add_header_impl>
 800ba54:	4603      	mov	r3, r0
  }
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3708      	adds	r7, #8
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}

0800ba5e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ba5e:	b580      	push	{r7, lr}
 800ba60:	b082      	sub	sp, #8
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	6078      	str	r0, [r7, #4]
 800ba66:	460b      	mov	r3, r1
 800ba68:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ba6a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ba6e:	2201      	movs	r2, #1
 800ba70:	4619      	mov	r1, r3
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f7ff ffd2 	bl	800ba1c <pbuf_header_impl>
 800ba78:	4603      	mov	r3, r0
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3708      	adds	r7, #8
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}
	...

0800ba84 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b088      	sub	sp, #32
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d10b      	bne.n	800baaa <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d106      	bne.n	800baa6 <pbuf_free+0x22>
 800ba98:	4b3b      	ldr	r3, [pc, #236]	@ (800bb88 <pbuf_free+0x104>)
 800ba9a:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800ba9e:	493b      	ldr	r1, [pc, #236]	@ (800bb8c <pbuf_free+0x108>)
 800baa0:	483b      	ldr	r0, [pc, #236]	@ (800bb90 <pbuf_free+0x10c>)
 800baa2:	f00b fad9 	bl	8017058 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800baa6:	2300      	movs	r3, #0
 800baa8:	e069      	b.n	800bb7e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800baaa:	2300      	movs	r3, #0
 800baac:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800baae:	e062      	b.n	800bb76 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800bab0:	f00b f9b4 	bl	8016e1c <sys_arch_protect>
 800bab4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	7b9b      	ldrb	r3, [r3, #14]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d106      	bne.n	800bacc <pbuf_free+0x48>
 800babe:	4b32      	ldr	r3, [pc, #200]	@ (800bb88 <pbuf_free+0x104>)
 800bac0:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800bac4:	4933      	ldr	r1, [pc, #204]	@ (800bb94 <pbuf_free+0x110>)
 800bac6:	4832      	ldr	r0, [pc, #200]	@ (800bb90 <pbuf_free+0x10c>)
 800bac8:	f00b fac6 	bl	8017058 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	7b9b      	ldrb	r3, [r3, #14]
 800bad0:	3b01      	subs	r3, #1
 800bad2:	b2da      	uxtb	r2, r3
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	739a      	strb	r2, [r3, #14]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	7b9b      	ldrb	r3, [r3, #14]
 800badc:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800bade:	69b8      	ldr	r0, [r7, #24]
 800bae0:	f00b f9aa 	bl	8016e38 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800bae4:	7dfb      	ldrb	r3, [r7, #23]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d143      	bne.n	800bb72 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	7b1b      	ldrb	r3, [r3, #12]
 800baf4:	f003 030f 	and.w	r3, r3, #15
 800baf8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	7b5b      	ldrb	r3, [r3, #13]
 800bafe:	f003 0302 	and.w	r3, r3, #2
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d011      	beq.n	800bb2a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	691b      	ldr	r3, [r3, #16]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d106      	bne.n	800bb20 <pbuf_free+0x9c>
 800bb12:	4b1d      	ldr	r3, [pc, #116]	@ (800bb88 <pbuf_free+0x104>)
 800bb14:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800bb18:	491f      	ldr	r1, [pc, #124]	@ (800bb98 <pbuf_free+0x114>)
 800bb1a:	481d      	ldr	r0, [pc, #116]	@ (800bb90 <pbuf_free+0x10c>)
 800bb1c:	f00b fa9c 	bl	8017058 <iprintf>
        pc->custom_free_function(p);
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	691b      	ldr	r3, [r3, #16]
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	4798      	blx	r3
 800bb28:	e01d      	b.n	800bb66 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800bb2a:	7bfb      	ldrb	r3, [r7, #15]
 800bb2c:	2b02      	cmp	r3, #2
 800bb2e:	d104      	bne.n	800bb3a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800bb30:	6879      	ldr	r1, [r7, #4]
 800bb32:	200d      	movs	r0, #13
 800bb34:	f7ff f810 	bl	800ab58 <memp_free>
 800bb38:	e015      	b.n	800bb66 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800bb3a:	7bfb      	ldrb	r3, [r7, #15]
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d104      	bne.n	800bb4a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800bb40:	6879      	ldr	r1, [r7, #4]
 800bb42:	200c      	movs	r0, #12
 800bb44:	f7ff f808 	bl	800ab58 <memp_free>
 800bb48:	e00d      	b.n	800bb66 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800bb4a:	7bfb      	ldrb	r3, [r7, #15]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d103      	bne.n	800bb58 <pbuf_free+0xd4>
          mem_free(p);
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f7fe fc4d 	bl	800a3f0 <mem_free>
 800bb56:	e006      	b.n	800bb66 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800bb58:	4b0b      	ldr	r3, [pc, #44]	@ (800bb88 <pbuf_free+0x104>)
 800bb5a:	f240 320f 	movw	r2, #783	@ 0x30f
 800bb5e:	490f      	ldr	r1, [pc, #60]	@ (800bb9c <pbuf_free+0x118>)
 800bb60:	480b      	ldr	r0, [pc, #44]	@ (800bb90 <pbuf_free+0x10c>)
 800bb62:	f00b fa79 	bl	8017058 <iprintf>
        }
      }
      count++;
 800bb66:	7ffb      	ldrb	r3, [r7, #31]
 800bb68:	3301      	adds	r3, #1
 800bb6a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	607b      	str	r3, [r7, #4]
 800bb70:	e001      	b.n	800bb76 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800bb72:	2300      	movs	r3, #0
 800bb74:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d199      	bne.n	800bab0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800bb7c:	7ffb      	ldrb	r3, [r7, #31]
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3720      	adds	r7, #32
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
 800bb86:	bf00      	nop
 800bb88:	08018c48 	.word	0x08018c48
 800bb8c:	08018dac 	.word	0x08018dac
 800bb90:	08018ca8 	.word	0x08018ca8
 800bb94:	08018dd8 	.word	0x08018dd8
 800bb98:	08018df0 	.word	0x08018df0
 800bb9c:	08018e14 	.word	0x08018e14

0800bba0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800bba0:	b480      	push	{r7}
 800bba2:	b085      	sub	sp, #20
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800bbac:	e005      	b.n	800bbba <pbuf_clen+0x1a>
    ++len;
 800bbae:	89fb      	ldrh	r3, [r7, #14]
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d1f6      	bne.n	800bbae <pbuf_clen+0xe>
  }
  return len;
 800bbc0:	89fb      	ldrh	r3, [r7, #14]
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3714      	adds	r7, #20
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbcc:	4770      	bx	lr
	...

0800bbd0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b084      	sub	sp, #16
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d016      	beq.n	800bc0c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800bbde:	f00b f91d 	bl	8016e1c <sys_arch_protect>
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	7b9b      	ldrb	r3, [r3, #14]
 800bbe8:	3301      	adds	r3, #1
 800bbea:	b2da      	uxtb	r2, r3
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	739a      	strb	r2, [r3, #14]
 800bbf0:	68f8      	ldr	r0, [r7, #12]
 800bbf2:	f00b f921 	bl	8016e38 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	7b9b      	ldrb	r3, [r3, #14]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d106      	bne.n	800bc0c <pbuf_ref+0x3c>
 800bbfe:	4b05      	ldr	r3, [pc, #20]	@ (800bc14 <pbuf_ref+0x44>)
 800bc00:	f240 3242 	movw	r2, #834	@ 0x342
 800bc04:	4904      	ldr	r1, [pc, #16]	@ (800bc18 <pbuf_ref+0x48>)
 800bc06:	4805      	ldr	r0, [pc, #20]	@ (800bc1c <pbuf_ref+0x4c>)
 800bc08:	f00b fa26 	bl	8017058 <iprintf>
  }
}
 800bc0c:	bf00      	nop
 800bc0e:	3710      	adds	r7, #16
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}
 800bc14:	08018c48 	.word	0x08018c48
 800bc18:	08018e28 	.word	0x08018e28
 800bc1c:	08018ca8 	.word	0x08018ca8

0800bc20 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b084      	sub	sp, #16
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
 800bc28:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d002      	beq.n	800bc36 <pbuf_cat+0x16>
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d107      	bne.n	800bc46 <pbuf_cat+0x26>
 800bc36:	4b20      	ldr	r3, [pc, #128]	@ (800bcb8 <pbuf_cat+0x98>)
 800bc38:	f240 3259 	movw	r2, #857	@ 0x359
 800bc3c:	491f      	ldr	r1, [pc, #124]	@ (800bcbc <pbuf_cat+0x9c>)
 800bc3e:	4820      	ldr	r0, [pc, #128]	@ (800bcc0 <pbuf_cat+0xa0>)
 800bc40:	f00b fa0a 	bl	8017058 <iprintf>
 800bc44:	e034      	b.n	800bcb0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	60fb      	str	r3, [r7, #12]
 800bc4a:	e00a      	b.n	800bc62 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	891a      	ldrh	r2, [r3, #8]
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	891b      	ldrh	r3, [r3, #8]
 800bc54:	4413      	add	r3, r2
 800bc56:	b29a      	uxth	r2, r3
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	60fb      	str	r3, [r7, #12]
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d1f0      	bne.n	800bc4c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	891a      	ldrh	r2, [r3, #8]
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	895b      	ldrh	r3, [r3, #10]
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d006      	beq.n	800bc84 <pbuf_cat+0x64>
 800bc76:	4b10      	ldr	r3, [pc, #64]	@ (800bcb8 <pbuf_cat+0x98>)
 800bc78:	f240 3262 	movw	r2, #866	@ 0x362
 800bc7c:	4911      	ldr	r1, [pc, #68]	@ (800bcc4 <pbuf_cat+0xa4>)
 800bc7e:	4810      	ldr	r0, [pc, #64]	@ (800bcc0 <pbuf_cat+0xa0>)
 800bc80:	f00b f9ea 	bl	8017058 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d006      	beq.n	800bc9a <pbuf_cat+0x7a>
 800bc8c:	4b0a      	ldr	r3, [pc, #40]	@ (800bcb8 <pbuf_cat+0x98>)
 800bc8e:	f240 3263 	movw	r2, #867	@ 0x363
 800bc92:	490d      	ldr	r1, [pc, #52]	@ (800bcc8 <pbuf_cat+0xa8>)
 800bc94:	480a      	ldr	r0, [pc, #40]	@ (800bcc0 <pbuf_cat+0xa0>)
 800bc96:	f00b f9df 	bl	8017058 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	891a      	ldrh	r2, [r3, #8]
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	891b      	ldrh	r3, [r3, #8]
 800bca2:	4413      	add	r3, r2
 800bca4:	b29a      	uxth	r2, r3
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	683a      	ldr	r2, [r7, #0]
 800bcae:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800bcb0:	3710      	adds	r7, #16
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
 800bcb6:	bf00      	nop
 800bcb8:	08018c48 	.word	0x08018c48
 800bcbc:	08018e3c 	.word	0x08018e3c
 800bcc0:	08018ca8 	.word	0x08018ca8
 800bcc4:	08018e74 	.word	0x08018e74
 800bcc8:	08018ea4 	.word	0x08018ea4

0800bccc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b082      	sub	sp, #8
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800bcd6:	6839      	ldr	r1, [r7, #0]
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f7ff ffa1 	bl	800bc20 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800bcde:	6838      	ldr	r0, [r7, #0]
 800bce0:	f7ff ff76 	bl	800bbd0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800bce4:	bf00      	nop
 800bce6:	3708      	adds	r7, #8
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}

0800bcec <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b086      	sub	sp, #24
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	617b      	str	r3, [r7, #20]
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d008      	beq.n	800bd16 <pbuf_copy+0x2a>
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d005      	beq.n	800bd16 <pbuf_copy+0x2a>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	891a      	ldrh	r2, [r3, #8]
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	891b      	ldrh	r3, [r3, #8]
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d209      	bcs.n	800bd2a <pbuf_copy+0x3e>
 800bd16:	4b57      	ldr	r3, [pc, #348]	@ (800be74 <pbuf_copy+0x188>)
 800bd18:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800bd1c:	4956      	ldr	r1, [pc, #344]	@ (800be78 <pbuf_copy+0x18c>)
 800bd1e:	4857      	ldr	r0, [pc, #348]	@ (800be7c <pbuf_copy+0x190>)
 800bd20:	f00b f99a 	bl	8017058 <iprintf>
 800bd24:	f06f 030f 	mvn.w	r3, #15
 800bd28:	e09f      	b.n	800be6a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	895b      	ldrh	r3, [r3, #10]
 800bd2e:	461a      	mov	r2, r3
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	1ad2      	subs	r2, r2, r3
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	895b      	ldrh	r3, [r3, #10]
 800bd38:	4619      	mov	r1, r3
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	1acb      	subs	r3, r1, r3
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d306      	bcc.n	800bd50 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	895b      	ldrh	r3, [r3, #10]
 800bd46:	461a      	mov	r2, r3
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	1ad3      	subs	r3, r2, r3
 800bd4c:	60fb      	str	r3, [r7, #12]
 800bd4e:	e005      	b.n	800bd5c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	895b      	ldrh	r3, [r3, #10]
 800bd54:	461a      	mov	r2, r3
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	1ad3      	subs	r3, r2, r3
 800bd5a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	685a      	ldr	r2, [r3, #4]
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	18d0      	adds	r0, r2, r3
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	685a      	ldr	r2, [r3, #4]
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	4413      	add	r3, r2
 800bd6c:	68fa      	ldr	r2, [r7, #12]
 800bd6e:	4619      	mov	r1, r3
 800bd70:	f00b fbcf 	bl	8017512 <memcpy>
    offset_to += len;
 800bd74:	697a      	ldr	r2, [r7, #20]
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	4413      	add	r3, r2
 800bd7a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800bd7c:	693a      	ldr	r2, [r7, #16]
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	4413      	add	r3, r2
 800bd82:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	895b      	ldrh	r3, [r3, #10]
 800bd88:	461a      	mov	r2, r3
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d906      	bls.n	800bd9e <pbuf_copy+0xb2>
 800bd90:	4b38      	ldr	r3, [pc, #224]	@ (800be74 <pbuf_copy+0x188>)
 800bd92:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800bd96:	493a      	ldr	r1, [pc, #232]	@ (800be80 <pbuf_copy+0x194>)
 800bd98:	4838      	ldr	r0, [pc, #224]	@ (800be7c <pbuf_copy+0x190>)
 800bd9a:	f00b f95d 	bl	8017058 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	895b      	ldrh	r3, [r3, #10]
 800bda2:	461a      	mov	r2, r3
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	4293      	cmp	r3, r2
 800bda8:	d906      	bls.n	800bdb8 <pbuf_copy+0xcc>
 800bdaa:	4b32      	ldr	r3, [pc, #200]	@ (800be74 <pbuf_copy+0x188>)
 800bdac:	f240 32da 	movw	r2, #986	@ 0x3da
 800bdb0:	4934      	ldr	r1, [pc, #208]	@ (800be84 <pbuf_copy+0x198>)
 800bdb2:	4832      	ldr	r0, [pc, #200]	@ (800be7c <pbuf_copy+0x190>)
 800bdb4:	f00b f950 	bl	8017058 <iprintf>
    if (offset_from >= p_from->len) {
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	895b      	ldrh	r3, [r3, #10]
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d304      	bcc.n	800bdce <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	895b      	ldrh	r3, [r3, #10]
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d114      	bne.n	800be04 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800bdda:	2300      	movs	r3, #0
 800bddc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d10c      	bne.n	800be04 <pbuf_copy+0x118>
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d009      	beq.n	800be04 <pbuf_copy+0x118>
 800bdf0:	4b20      	ldr	r3, [pc, #128]	@ (800be74 <pbuf_copy+0x188>)
 800bdf2:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800bdf6:	4924      	ldr	r1, [pc, #144]	@ (800be88 <pbuf_copy+0x19c>)
 800bdf8:	4820      	ldr	r0, [pc, #128]	@ (800be7c <pbuf_copy+0x190>)
 800bdfa:	f00b f92d 	bl	8017058 <iprintf>
 800bdfe:	f06f 030f 	mvn.w	r3, #15
 800be02:	e032      	b.n	800be6a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d013      	beq.n	800be32 <pbuf_copy+0x146>
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	895a      	ldrh	r2, [r3, #10]
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	891b      	ldrh	r3, [r3, #8]
 800be12:	429a      	cmp	r2, r3
 800be14:	d10d      	bne.n	800be32 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d009      	beq.n	800be32 <pbuf_copy+0x146>
 800be1e:	4b15      	ldr	r3, [pc, #84]	@ (800be74 <pbuf_copy+0x188>)
 800be20:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800be24:	4919      	ldr	r1, [pc, #100]	@ (800be8c <pbuf_copy+0x1a0>)
 800be26:	4815      	ldr	r0, [pc, #84]	@ (800be7c <pbuf_copy+0x190>)
 800be28:	f00b f916 	bl	8017058 <iprintf>
 800be2c:	f06f 0305 	mvn.w	r3, #5
 800be30:	e01b      	b.n	800be6a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d013      	beq.n	800be60 <pbuf_copy+0x174>
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	895a      	ldrh	r2, [r3, #10]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	891b      	ldrh	r3, [r3, #8]
 800be40:	429a      	cmp	r2, r3
 800be42:	d10d      	bne.n	800be60 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d009      	beq.n	800be60 <pbuf_copy+0x174>
 800be4c:	4b09      	ldr	r3, [pc, #36]	@ (800be74 <pbuf_copy+0x188>)
 800be4e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800be52:	490e      	ldr	r1, [pc, #56]	@ (800be8c <pbuf_copy+0x1a0>)
 800be54:	4809      	ldr	r0, [pc, #36]	@ (800be7c <pbuf_copy+0x190>)
 800be56:	f00b f8ff 	bl	8017058 <iprintf>
 800be5a:	f06f 0305 	mvn.w	r3, #5
 800be5e:	e004      	b.n	800be6a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	2b00      	cmp	r3, #0
 800be64:	f47f af61 	bne.w	800bd2a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800be68:	2300      	movs	r3, #0
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3718      	adds	r7, #24
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}
 800be72:	bf00      	nop
 800be74:	08018c48 	.word	0x08018c48
 800be78:	08018ef0 	.word	0x08018ef0
 800be7c:	08018ca8 	.word	0x08018ca8
 800be80:	08018f20 	.word	0x08018f20
 800be84:	08018f38 	.word	0x08018f38
 800be88:	08018f54 	.word	0x08018f54
 800be8c:	08018f64 	.word	0x08018f64

0800be90 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b088      	sub	sp, #32
 800be94:	af00      	add	r7, sp, #0
 800be96:	60f8      	str	r0, [r7, #12]
 800be98:	60b9      	str	r1, [r7, #8]
 800be9a:	4611      	mov	r1, r2
 800be9c:	461a      	mov	r2, r3
 800be9e:	460b      	mov	r3, r1
 800bea0:	80fb      	strh	r3, [r7, #6]
 800bea2:	4613      	mov	r3, r2
 800bea4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800bea6:	2300      	movs	r3, #0
 800bea8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800beaa:	2300      	movs	r3, #0
 800beac:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d108      	bne.n	800bec6 <pbuf_copy_partial+0x36>
 800beb4:	4b2b      	ldr	r3, [pc, #172]	@ (800bf64 <pbuf_copy_partial+0xd4>)
 800beb6:	f240 420a 	movw	r2, #1034	@ 0x40a
 800beba:	492b      	ldr	r1, [pc, #172]	@ (800bf68 <pbuf_copy_partial+0xd8>)
 800bebc:	482b      	ldr	r0, [pc, #172]	@ (800bf6c <pbuf_copy_partial+0xdc>)
 800bebe:	f00b f8cb 	bl	8017058 <iprintf>
 800bec2:	2300      	movs	r3, #0
 800bec4:	e04a      	b.n	800bf5c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d108      	bne.n	800bede <pbuf_copy_partial+0x4e>
 800becc:	4b25      	ldr	r3, [pc, #148]	@ (800bf64 <pbuf_copy_partial+0xd4>)
 800bece:	f240 420b 	movw	r2, #1035	@ 0x40b
 800bed2:	4927      	ldr	r1, [pc, #156]	@ (800bf70 <pbuf_copy_partial+0xe0>)
 800bed4:	4825      	ldr	r0, [pc, #148]	@ (800bf6c <pbuf_copy_partial+0xdc>)
 800bed6:	f00b f8bf 	bl	8017058 <iprintf>
 800beda:	2300      	movs	r3, #0
 800bedc:	e03e      	b.n	800bf5c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	61fb      	str	r3, [r7, #28]
 800bee2:	e034      	b.n	800bf4e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800bee4:	88bb      	ldrh	r3, [r7, #4]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d00a      	beq.n	800bf00 <pbuf_copy_partial+0x70>
 800beea:	69fb      	ldr	r3, [r7, #28]
 800beec:	895b      	ldrh	r3, [r3, #10]
 800beee:	88ba      	ldrh	r2, [r7, #4]
 800bef0:	429a      	cmp	r2, r3
 800bef2:	d305      	bcc.n	800bf00 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800bef4:	69fb      	ldr	r3, [r7, #28]
 800bef6:	895b      	ldrh	r3, [r3, #10]
 800bef8:	88ba      	ldrh	r2, [r7, #4]
 800befa:	1ad3      	subs	r3, r2, r3
 800befc:	80bb      	strh	r3, [r7, #4]
 800befe:	e023      	b.n	800bf48 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800bf00:	69fb      	ldr	r3, [r7, #28]
 800bf02:	895a      	ldrh	r2, [r3, #10]
 800bf04:	88bb      	ldrh	r3, [r7, #4]
 800bf06:	1ad3      	subs	r3, r2, r3
 800bf08:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800bf0a:	8b3a      	ldrh	r2, [r7, #24]
 800bf0c:	88fb      	ldrh	r3, [r7, #6]
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d901      	bls.n	800bf16 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800bf12:	88fb      	ldrh	r3, [r7, #6]
 800bf14:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800bf16:	8b7b      	ldrh	r3, [r7, #26]
 800bf18:	68ba      	ldr	r2, [r7, #8]
 800bf1a:	18d0      	adds	r0, r2, r3
 800bf1c:	69fb      	ldr	r3, [r7, #28]
 800bf1e:	685a      	ldr	r2, [r3, #4]
 800bf20:	88bb      	ldrh	r3, [r7, #4]
 800bf22:	4413      	add	r3, r2
 800bf24:	8b3a      	ldrh	r2, [r7, #24]
 800bf26:	4619      	mov	r1, r3
 800bf28:	f00b faf3 	bl	8017512 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800bf2c:	8afa      	ldrh	r2, [r7, #22]
 800bf2e:	8b3b      	ldrh	r3, [r7, #24]
 800bf30:	4413      	add	r3, r2
 800bf32:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800bf34:	8b7a      	ldrh	r2, [r7, #26]
 800bf36:	8b3b      	ldrh	r3, [r7, #24]
 800bf38:	4413      	add	r3, r2
 800bf3a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800bf3c:	88fa      	ldrh	r2, [r7, #6]
 800bf3e:	8b3b      	ldrh	r3, [r7, #24]
 800bf40:	1ad3      	subs	r3, r2, r3
 800bf42:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800bf44:	2300      	movs	r3, #0
 800bf46:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bf48:	69fb      	ldr	r3, [r7, #28]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	61fb      	str	r3, [r7, #28]
 800bf4e:	88fb      	ldrh	r3, [r7, #6]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d002      	beq.n	800bf5a <pbuf_copy_partial+0xca>
 800bf54:	69fb      	ldr	r3, [r7, #28]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d1c4      	bne.n	800bee4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800bf5a:	8afb      	ldrh	r3, [r7, #22]
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3720      	adds	r7, #32
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}
 800bf64:	08018c48 	.word	0x08018c48
 800bf68:	08018f90 	.word	0x08018f90
 800bf6c:	08018ca8 	.word	0x08018ca8
 800bf70:	08018fb0 	.word	0x08018fb0

0800bf74 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b084      	sub	sp, #16
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	603a      	str	r2, [r7, #0]
 800bf7e:	71fb      	strb	r3, [r7, #7]
 800bf80:	460b      	mov	r3, r1
 800bf82:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	8919      	ldrh	r1, [r3, #8]
 800bf88:	88ba      	ldrh	r2, [r7, #4]
 800bf8a:	79fb      	ldrb	r3, [r7, #7]
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f7ff fa95 	bl	800b4bc <pbuf_alloc>
 800bf92:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d101      	bne.n	800bf9e <pbuf_clone+0x2a>
    return NULL;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	e011      	b.n	800bfc2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800bf9e:	6839      	ldr	r1, [r7, #0]
 800bfa0:	68f8      	ldr	r0, [r7, #12]
 800bfa2:	f7ff fea3 	bl	800bcec <pbuf_copy>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800bfaa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d006      	beq.n	800bfc0 <pbuf_clone+0x4c>
 800bfb2:	4b06      	ldr	r3, [pc, #24]	@ (800bfcc <pbuf_clone+0x58>)
 800bfb4:	f240 5224 	movw	r2, #1316	@ 0x524
 800bfb8:	4905      	ldr	r1, [pc, #20]	@ (800bfd0 <pbuf_clone+0x5c>)
 800bfba:	4806      	ldr	r0, [pc, #24]	@ (800bfd4 <pbuf_clone+0x60>)
 800bfbc:	f00b f84c 	bl	8017058 <iprintf>
  return q;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3710      	adds	r7, #16
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}
 800bfca:	bf00      	nop
 800bfcc:	08018c48 	.word	0x08018c48
 800bfd0:	080190bc 	.word	0x080190bc
 800bfd4:	08018ca8 	.word	0x08018ca8

0800bfd8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bfdc:	f00a ff3c 	bl	8016e58 <rand>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bfe8:	b29b      	uxth	r3, r3
 800bfea:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800bfee:	b29a      	uxth	r2, r3
 800bff0:	4b01      	ldr	r3, [pc, #4]	@ (800bff8 <tcp_init+0x20>)
 800bff2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bff4:	bf00      	nop
 800bff6:	bd80      	pop	{r7, pc}
 800bff8:	20000028 	.word	0x20000028

0800bffc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b082      	sub	sp, #8
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	7d1b      	ldrb	r3, [r3, #20]
 800c008:	2b01      	cmp	r3, #1
 800c00a:	d105      	bne.n	800c018 <tcp_free+0x1c>
 800c00c:	4b06      	ldr	r3, [pc, #24]	@ (800c028 <tcp_free+0x2c>)
 800c00e:	22d4      	movs	r2, #212	@ 0xd4
 800c010:	4906      	ldr	r1, [pc, #24]	@ (800c02c <tcp_free+0x30>)
 800c012:	4807      	ldr	r0, [pc, #28]	@ (800c030 <tcp_free+0x34>)
 800c014:	f00b f820 	bl	8017058 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c018:	6879      	ldr	r1, [r7, #4]
 800c01a:	2001      	movs	r0, #1
 800c01c:	f7fe fd9c 	bl	800ab58 <memp_free>
}
 800c020:	bf00      	nop
 800c022:	3708      	adds	r7, #8
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}
 800c028:	08019148 	.word	0x08019148
 800c02c:	08019178 	.word	0x08019178
 800c030:	0801918c 	.word	0x0801918c

0800c034 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b082      	sub	sp, #8
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	7d1b      	ldrb	r3, [r3, #20]
 800c040:	2b01      	cmp	r3, #1
 800c042:	d105      	bne.n	800c050 <tcp_free_listen+0x1c>
 800c044:	4b06      	ldr	r3, [pc, #24]	@ (800c060 <tcp_free_listen+0x2c>)
 800c046:	22df      	movs	r2, #223	@ 0xdf
 800c048:	4906      	ldr	r1, [pc, #24]	@ (800c064 <tcp_free_listen+0x30>)
 800c04a:	4807      	ldr	r0, [pc, #28]	@ (800c068 <tcp_free_listen+0x34>)
 800c04c:	f00b f804 	bl	8017058 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c050:	6879      	ldr	r1, [r7, #4]
 800c052:	2002      	movs	r0, #2
 800c054:	f7fe fd80 	bl	800ab58 <memp_free>
}
 800c058:	bf00      	nop
 800c05a:	3708      	adds	r7, #8
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}
 800c060:	08019148 	.word	0x08019148
 800c064:	080191b4 	.word	0x080191b4
 800c068:	0801918c 	.word	0x0801918c

0800c06c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c070:	f000 fea4 	bl	800cdbc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c074:	4b07      	ldr	r3, [pc, #28]	@ (800c094 <tcp_tmr+0x28>)
 800c076:	781b      	ldrb	r3, [r3, #0]
 800c078:	3301      	adds	r3, #1
 800c07a:	b2da      	uxtb	r2, r3
 800c07c:	4b05      	ldr	r3, [pc, #20]	@ (800c094 <tcp_tmr+0x28>)
 800c07e:	701a      	strb	r2, [r3, #0]
 800c080:	4b04      	ldr	r3, [pc, #16]	@ (800c094 <tcp_tmr+0x28>)
 800c082:	781b      	ldrb	r3, [r3, #0]
 800c084:	f003 0301 	and.w	r3, r3, #1
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d001      	beq.n	800c090 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c08c:	f000 fb54 	bl	800c738 <tcp_slowtmr>
  }
}
 800c090:	bf00      	nop
 800c092:	bd80      	pop	{r7, pc}
 800c094:	2000cad5 	.word	0x2000cad5

0800c098 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b084      	sub	sp, #16
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
 800c0a0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d105      	bne.n	800c0b4 <tcp_remove_listener+0x1c>
 800c0a8:	4b0d      	ldr	r3, [pc, #52]	@ (800c0e0 <tcp_remove_listener+0x48>)
 800c0aa:	22ff      	movs	r2, #255	@ 0xff
 800c0ac:	490d      	ldr	r1, [pc, #52]	@ (800c0e4 <tcp_remove_listener+0x4c>)
 800c0ae:	480e      	ldr	r0, [pc, #56]	@ (800c0e8 <tcp_remove_listener+0x50>)
 800c0b0:	f00a ffd2 	bl	8017058 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	60fb      	str	r3, [r7, #12]
 800c0b8:	e00a      	b.n	800c0d0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c0be:	683a      	ldr	r2, [r7, #0]
 800c0c0:	429a      	cmp	r2, r3
 800c0c2:	d102      	bne.n	800c0ca <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	68db      	ldr	r3, [r3, #12]
 800c0ce:	60fb      	str	r3, [r7, #12]
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d1f1      	bne.n	800c0ba <tcp_remove_listener+0x22>
    }
  }
}
 800c0d6:	bf00      	nop
 800c0d8:	bf00      	nop
 800c0da:	3710      	adds	r7, #16
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}
 800c0e0:	08019148 	.word	0x08019148
 800c0e4:	080191d0 	.word	0x080191d0
 800c0e8:	0801918c 	.word	0x0801918c

0800c0ec <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b084      	sub	sp, #16
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d106      	bne.n	800c108 <tcp_listen_closed+0x1c>
 800c0fa:	4b14      	ldr	r3, [pc, #80]	@ (800c14c <tcp_listen_closed+0x60>)
 800c0fc:	f240 1211 	movw	r2, #273	@ 0x111
 800c100:	4913      	ldr	r1, [pc, #76]	@ (800c150 <tcp_listen_closed+0x64>)
 800c102:	4814      	ldr	r0, [pc, #80]	@ (800c154 <tcp_listen_closed+0x68>)
 800c104:	f00a ffa8 	bl	8017058 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	7d1b      	ldrb	r3, [r3, #20]
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	d006      	beq.n	800c11e <tcp_listen_closed+0x32>
 800c110:	4b0e      	ldr	r3, [pc, #56]	@ (800c14c <tcp_listen_closed+0x60>)
 800c112:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800c116:	4910      	ldr	r1, [pc, #64]	@ (800c158 <tcp_listen_closed+0x6c>)
 800c118:	480e      	ldr	r0, [pc, #56]	@ (800c154 <tcp_listen_closed+0x68>)
 800c11a:	f00a ff9d 	bl	8017058 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c11e:	2301      	movs	r3, #1
 800c120:	60fb      	str	r3, [r7, #12]
 800c122:	e00b      	b.n	800c13c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c124:	4a0d      	ldr	r2, [pc, #52]	@ (800c15c <tcp_listen_closed+0x70>)
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	6879      	ldr	r1, [r7, #4]
 800c130:	4618      	mov	r0, r3
 800c132:	f7ff ffb1 	bl	800c098 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	3301      	adds	r3, #1
 800c13a:	60fb      	str	r3, [r7, #12]
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	2b03      	cmp	r3, #3
 800c140:	d9f0      	bls.n	800c124 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c142:	bf00      	nop
 800c144:	bf00      	nop
 800c146:	3710      	adds	r7, #16
 800c148:	46bd      	mov	sp, r7
 800c14a:	bd80      	pop	{r7, pc}
 800c14c:	08019148 	.word	0x08019148
 800c150:	080191f8 	.word	0x080191f8
 800c154:	0801918c 	.word	0x0801918c
 800c158:	08019204 	.word	0x08019204
 800c15c:	0801b894 	.word	0x0801b894

0800c160 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c160:	b5b0      	push	{r4, r5, r7, lr}
 800c162:	b088      	sub	sp, #32
 800c164:	af04      	add	r7, sp, #16
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	460b      	mov	r3, r1
 800c16a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d106      	bne.n	800c180 <tcp_close_shutdown+0x20>
 800c172:	4b63      	ldr	r3, [pc, #396]	@ (800c300 <tcp_close_shutdown+0x1a0>)
 800c174:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800c178:	4962      	ldr	r1, [pc, #392]	@ (800c304 <tcp_close_shutdown+0x1a4>)
 800c17a:	4863      	ldr	r0, [pc, #396]	@ (800c308 <tcp_close_shutdown+0x1a8>)
 800c17c:	f00a ff6c 	bl	8017058 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c180:	78fb      	ldrb	r3, [r7, #3]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d066      	beq.n	800c254 <tcp_close_shutdown+0xf4>
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	7d1b      	ldrb	r3, [r3, #20]
 800c18a:	2b04      	cmp	r3, #4
 800c18c:	d003      	beq.n	800c196 <tcp_close_shutdown+0x36>
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	7d1b      	ldrb	r3, [r3, #20]
 800c192:	2b07      	cmp	r3, #7
 800c194:	d15e      	bne.n	800c254 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d104      	bne.n	800c1a8 <tcp_close_shutdown+0x48>
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c1a2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800c1a6:	d055      	beq.n	800c254 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	8b5b      	ldrh	r3, [r3, #26]
 800c1ac:	f003 0310 	and.w	r3, r3, #16
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d106      	bne.n	800c1c2 <tcp_close_shutdown+0x62>
 800c1b4:	4b52      	ldr	r3, [pc, #328]	@ (800c300 <tcp_close_shutdown+0x1a0>)
 800c1b6:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800c1ba:	4954      	ldr	r1, [pc, #336]	@ (800c30c <tcp_close_shutdown+0x1ac>)
 800c1bc:	4852      	ldr	r0, [pc, #328]	@ (800c308 <tcp_close_shutdown+0x1a8>)
 800c1be:	f00a ff4b 	bl	8017058 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800c1ca:	687d      	ldr	r5, [r7, #4]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	3304      	adds	r3, #4
 800c1d0:	687a      	ldr	r2, [r7, #4]
 800c1d2:	8ad2      	ldrh	r2, [r2, #22]
 800c1d4:	6879      	ldr	r1, [r7, #4]
 800c1d6:	8b09      	ldrh	r1, [r1, #24]
 800c1d8:	9102      	str	r1, [sp, #8]
 800c1da:	9201      	str	r2, [sp, #4]
 800c1dc:	9300      	str	r3, [sp, #0]
 800c1de:	462b      	mov	r3, r5
 800c1e0:	4622      	mov	r2, r4
 800c1e2:	4601      	mov	r1, r0
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f004 fe8d 	bl	8010f04 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f001 f8c8 	bl	800d380 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c1f0:	4b47      	ldr	r3, [pc, #284]	@ (800c310 <tcp_close_shutdown+0x1b0>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	429a      	cmp	r2, r3
 800c1f8:	d105      	bne.n	800c206 <tcp_close_shutdown+0xa6>
 800c1fa:	4b45      	ldr	r3, [pc, #276]	@ (800c310 <tcp_close_shutdown+0x1b0>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	68db      	ldr	r3, [r3, #12]
 800c200:	4a43      	ldr	r2, [pc, #268]	@ (800c310 <tcp_close_shutdown+0x1b0>)
 800c202:	6013      	str	r3, [r2, #0]
 800c204:	e013      	b.n	800c22e <tcp_close_shutdown+0xce>
 800c206:	4b42      	ldr	r3, [pc, #264]	@ (800c310 <tcp_close_shutdown+0x1b0>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	60fb      	str	r3, [r7, #12]
 800c20c:	e00c      	b.n	800c228 <tcp_close_shutdown+0xc8>
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	687a      	ldr	r2, [r7, #4]
 800c214:	429a      	cmp	r2, r3
 800c216:	d104      	bne.n	800c222 <tcp_close_shutdown+0xc2>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	68da      	ldr	r2, [r3, #12]
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	60da      	str	r2, [r3, #12]
 800c220:	e005      	b.n	800c22e <tcp_close_shutdown+0xce>
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	68db      	ldr	r3, [r3, #12]
 800c226:	60fb      	str	r3, [r7, #12]
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d1ef      	bne.n	800c20e <tcp_close_shutdown+0xae>
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2200      	movs	r2, #0
 800c232:	60da      	str	r2, [r3, #12]
 800c234:	4b37      	ldr	r3, [pc, #220]	@ (800c314 <tcp_close_shutdown+0x1b4>)
 800c236:	2201      	movs	r2, #1
 800c238:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c23a:	4b37      	ldr	r3, [pc, #220]	@ (800c318 <tcp_close_shutdown+0x1b8>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	687a      	ldr	r2, [r7, #4]
 800c240:	429a      	cmp	r2, r3
 800c242:	d102      	bne.n	800c24a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c244:	f003 fd5c 	bl	800fd00 <tcp_trigger_input_pcb_close>
 800c248:	e002      	b.n	800c250 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f7ff fed6 	bl	800bffc <tcp_free>
      }
      return ERR_OK;
 800c250:	2300      	movs	r3, #0
 800c252:	e050      	b.n	800c2f6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	7d1b      	ldrb	r3, [r3, #20]
 800c258:	2b02      	cmp	r3, #2
 800c25a:	d03b      	beq.n	800c2d4 <tcp_close_shutdown+0x174>
 800c25c:	2b02      	cmp	r3, #2
 800c25e:	dc44      	bgt.n	800c2ea <tcp_close_shutdown+0x18a>
 800c260:	2b00      	cmp	r3, #0
 800c262:	d002      	beq.n	800c26a <tcp_close_shutdown+0x10a>
 800c264:	2b01      	cmp	r3, #1
 800c266:	d02a      	beq.n	800c2be <tcp_close_shutdown+0x15e>
 800c268:	e03f      	b.n	800c2ea <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	8adb      	ldrh	r3, [r3, #22]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d021      	beq.n	800c2b6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c272:	4b2a      	ldr	r3, [pc, #168]	@ (800c31c <tcp_close_shutdown+0x1bc>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	687a      	ldr	r2, [r7, #4]
 800c278:	429a      	cmp	r2, r3
 800c27a:	d105      	bne.n	800c288 <tcp_close_shutdown+0x128>
 800c27c:	4b27      	ldr	r3, [pc, #156]	@ (800c31c <tcp_close_shutdown+0x1bc>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	68db      	ldr	r3, [r3, #12]
 800c282:	4a26      	ldr	r2, [pc, #152]	@ (800c31c <tcp_close_shutdown+0x1bc>)
 800c284:	6013      	str	r3, [r2, #0]
 800c286:	e013      	b.n	800c2b0 <tcp_close_shutdown+0x150>
 800c288:	4b24      	ldr	r3, [pc, #144]	@ (800c31c <tcp_close_shutdown+0x1bc>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	60bb      	str	r3, [r7, #8]
 800c28e:	e00c      	b.n	800c2aa <tcp_close_shutdown+0x14a>
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	68db      	ldr	r3, [r3, #12]
 800c294:	687a      	ldr	r2, [r7, #4]
 800c296:	429a      	cmp	r2, r3
 800c298:	d104      	bne.n	800c2a4 <tcp_close_shutdown+0x144>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	68da      	ldr	r2, [r3, #12]
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	60da      	str	r2, [r3, #12]
 800c2a2:	e005      	b.n	800c2b0 <tcp_close_shutdown+0x150>
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	68db      	ldr	r3, [r3, #12]
 800c2a8:	60bb      	str	r3, [r7, #8]
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d1ef      	bne.n	800c290 <tcp_close_shutdown+0x130>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f7ff fea0 	bl	800bffc <tcp_free>
      break;
 800c2bc:	e01a      	b.n	800c2f4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f7ff ff14 	bl	800c0ec <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c2c4:	6879      	ldr	r1, [r7, #4]
 800c2c6:	4816      	ldr	r0, [pc, #88]	@ (800c320 <tcp_close_shutdown+0x1c0>)
 800c2c8:	f001 f8aa 	bl	800d420 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f7ff feb1 	bl	800c034 <tcp_free_listen>
      break;
 800c2d2:	e00f      	b.n	800c2f4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c2d4:	6879      	ldr	r1, [r7, #4]
 800c2d6:	480e      	ldr	r0, [pc, #56]	@ (800c310 <tcp_close_shutdown+0x1b0>)
 800c2d8:	f001 f8a2 	bl	800d420 <tcp_pcb_remove>
 800c2dc:	4b0d      	ldr	r3, [pc, #52]	@ (800c314 <tcp_close_shutdown+0x1b4>)
 800c2de:	2201      	movs	r2, #1
 800c2e0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f7ff fe8a 	bl	800bffc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c2e8:	e004      	b.n	800c2f4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f000 f81a 	bl	800c324 <tcp_close_shutdown_fin>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	e000      	b.n	800c2f6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c2f4:	2300      	movs	r3, #0
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3710      	adds	r7, #16
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bdb0      	pop	{r4, r5, r7, pc}
 800c2fe:	bf00      	nop
 800c300:	08019148 	.word	0x08019148
 800c304:	0801921c 	.word	0x0801921c
 800c308:	0801918c 	.word	0x0801918c
 800c30c:	0801923c 	.word	0x0801923c
 800c310:	2000cacc 	.word	0x2000cacc
 800c314:	2000cad4 	.word	0x2000cad4
 800c318:	2000cb0c 	.word	0x2000cb0c
 800c31c:	2000cac4 	.word	0x2000cac4
 800c320:	2000cac8 	.word	0x2000cac8

0800c324 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b084      	sub	sp, #16
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d106      	bne.n	800c340 <tcp_close_shutdown_fin+0x1c>
 800c332:	4b2e      	ldr	r3, [pc, #184]	@ (800c3ec <tcp_close_shutdown_fin+0xc8>)
 800c334:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800c338:	492d      	ldr	r1, [pc, #180]	@ (800c3f0 <tcp_close_shutdown_fin+0xcc>)
 800c33a:	482e      	ldr	r0, [pc, #184]	@ (800c3f4 <tcp_close_shutdown_fin+0xd0>)
 800c33c:	f00a fe8c 	bl	8017058 <iprintf>

  switch (pcb->state) {
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	7d1b      	ldrb	r3, [r3, #20]
 800c344:	2b07      	cmp	r3, #7
 800c346:	d020      	beq.n	800c38a <tcp_close_shutdown_fin+0x66>
 800c348:	2b07      	cmp	r3, #7
 800c34a:	dc2b      	bgt.n	800c3a4 <tcp_close_shutdown_fin+0x80>
 800c34c:	2b03      	cmp	r3, #3
 800c34e:	d002      	beq.n	800c356 <tcp_close_shutdown_fin+0x32>
 800c350:	2b04      	cmp	r3, #4
 800c352:	d00d      	beq.n	800c370 <tcp_close_shutdown_fin+0x4c>
 800c354:	e026      	b.n	800c3a4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f003 fee2 	bl	8010120 <tcp_send_fin>
 800c35c:	4603      	mov	r3, r0
 800c35e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c360:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d11f      	bne.n	800c3a8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2205      	movs	r2, #5
 800c36c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c36e:	e01b      	b.n	800c3a8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f003 fed5 	bl	8010120 <tcp_send_fin>
 800c376:	4603      	mov	r3, r0
 800c378:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c37a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d114      	bne.n	800c3ac <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2205      	movs	r2, #5
 800c386:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c388:	e010      	b.n	800c3ac <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f003 fec8 	bl	8010120 <tcp_send_fin>
 800c390:	4603      	mov	r3, r0
 800c392:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c394:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d109      	bne.n	800c3b0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2209      	movs	r2, #9
 800c3a0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c3a2:	e005      	b.n	800c3b0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	e01c      	b.n	800c3e2 <tcp_close_shutdown_fin+0xbe>
      break;
 800c3a8:	bf00      	nop
 800c3aa:	e002      	b.n	800c3b2 <tcp_close_shutdown_fin+0x8e>
      break;
 800c3ac:	bf00      	nop
 800c3ae:	e000      	b.n	800c3b2 <tcp_close_shutdown_fin+0x8e>
      break;
 800c3b0:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c3b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d103      	bne.n	800c3c2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f003 ffee 	bl	801039c <tcp_output>
 800c3c0:	e00d      	b.n	800c3de <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c3c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3ca:	d108      	bne.n	800c3de <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	8b5b      	ldrh	r3, [r3, #26]
 800c3d0:	f043 0308 	orr.w	r3, r3, #8
 800c3d4:	b29a      	uxth	r2, r3
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	e001      	b.n	800c3e2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c3de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3710      	adds	r7, #16
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
 800c3ea:	bf00      	nop
 800c3ec:	08019148 	.word	0x08019148
 800c3f0:	080191f8 	.word	0x080191f8
 800c3f4:	0801918c 	.word	0x0801918c

0800c3f8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d109      	bne.n	800c41a <tcp_close+0x22>
 800c406:	4b0f      	ldr	r3, [pc, #60]	@ (800c444 <tcp_close+0x4c>)
 800c408:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800c40c:	490e      	ldr	r1, [pc, #56]	@ (800c448 <tcp_close+0x50>)
 800c40e:	480f      	ldr	r0, [pc, #60]	@ (800c44c <tcp_close+0x54>)
 800c410:	f00a fe22 	bl	8017058 <iprintf>
 800c414:	f06f 030f 	mvn.w	r3, #15
 800c418:	e00f      	b.n	800c43a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	7d1b      	ldrb	r3, [r3, #20]
 800c41e:	2b01      	cmp	r3, #1
 800c420:	d006      	beq.n	800c430 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	8b5b      	ldrh	r3, [r3, #26]
 800c426:	f043 0310 	orr.w	r3, r3, #16
 800c42a:	b29a      	uxth	r2, r3
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c430:	2101      	movs	r1, #1
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f7ff fe94 	bl	800c160 <tcp_close_shutdown>
 800c438:	4603      	mov	r3, r0
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3708      	adds	r7, #8
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}
 800c442:	bf00      	nop
 800c444:	08019148 	.word	0x08019148
 800c448:	08019258 	.word	0x08019258
 800c44c:	0801918c 	.word	0x0801918c

0800c450 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b08e      	sub	sp, #56	@ 0x38
 800c454:	af04      	add	r7, sp, #16
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d107      	bne.n	800c470 <tcp_abandon+0x20>
 800c460:	4b52      	ldr	r3, [pc, #328]	@ (800c5ac <tcp_abandon+0x15c>)
 800c462:	f240 223d 	movw	r2, #573	@ 0x23d
 800c466:	4952      	ldr	r1, [pc, #328]	@ (800c5b0 <tcp_abandon+0x160>)
 800c468:	4852      	ldr	r0, [pc, #328]	@ (800c5b4 <tcp_abandon+0x164>)
 800c46a:	f00a fdf5 	bl	8017058 <iprintf>
 800c46e:	e099      	b.n	800c5a4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	7d1b      	ldrb	r3, [r3, #20]
 800c474:	2b01      	cmp	r3, #1
 800c476:	d106      	bne.n	800c486 <tcp_abandon+0x36>
 800c478:	4b4c      	ldr	r3, [pc, #304]	@ (800c5ac <tcp_abandon+0x15c>)
 800c47a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800c47e:	494e      	ldr	r1, [pc, #312]	@ (800c5b8 <tcp_abandon+0x168>)
 800c480:	484c      	ldr	r0, [pc, #304]	@ (800c5b4 <tcp_abandon+0x164>)
 800c482:	f00a fde9 	bl	8017058 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	7d1b      	ldrb	r3, [r3, #20]
 800c48a:	2b0a      	cmp	r3, #10
 800c48c:	d107      	bne.n	800c49e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c48e:	6879      	ldr	r1, [r7, #4]
 800c490:	484a      	ldr	r0, [pc, #296]	@ (800c5bc <tcp_abandon+0x16c>)
 800c492:	f000 ffc5 	bl	800d420 <tcp_pcb_remove>
    tcp_free(pcb);
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f7ff fdb0 	bl	800bffc <tcp_free>
 800c49c:	e082      	b.n	800c5a4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c4aa:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4b0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4b8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	691b      	ldr	r3, [r3, #16]
 800c4be:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	7d1b      	ldrb	r3, [r3, #20]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d126      	bne.n	800c516 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	8adb      	ldrh	r3, [r3, #22]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d02e      	beq.n	800c52e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c4d0:	4b3b      	ldr	r3, [pc, #236]	@ (800c5c0 <tcp_abandon+0x170>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	429a      	cmp	r2, r3
 800c4d8:	d105      	bne.n	800c4e6 <tcp_abandon+0x96>
 800c4da:	4b39      	ldr	r3, [pc, #228]	@ (800c5c0 <tcp_abandon+0x170>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	68db      	ldr	r3, [r3, #12]
 800c4e0:	4a37      	ldr	r2, [pc, #220]	@ (800c5c0 <tcp_abandon+0x170>)
 800c4e2:	6013      	str	r3, [r2, #0]
 800c4e4:	e013      	b.n	800c50e <tcp_abandon+0xbe>
 800c4e6:	4b36      	ldr	r3, [pc, #216]	@ (800c5c0 <tcp_abandon+0x170>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	61fb      	str	r3, [r7, #28]
 800c4ec:	e00c      	b.n	800c508 <tcp_abandon+0xb8>
 800c4ee:	69fb      	ldr	r3, [r7, #28]
 800c4f0:	68db      	ldr	r3, [r3, #12]
 800c4f2:	687a      	ldr	r2, [r7, #4]
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	d104      	bne.n	800c502 <tcp_abandon+0xb2>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	68da      	ldr	r2, [r3, #12]
 800c4fc:	69fb      	ldr	r3, [r7, #28]
 800c4fe:	60da      	str	r2, [r3, #12]
 800c500:	e005      	b.n	800c50e <tcp_abandon+0xbe>
 800c502:	69fb      	ldr	r3, [r7, #28]
 800c504:	68db      	ldr	r3, [r3, #12]
 800c506:	61fb      	str	r3, [r7, #28]
 800c508:	69fb      	ldr	r3, [r7, #28]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d1ef      	bne.n	800c4ee <tcp_abandon+0x9e>
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2200      	movs	r2, #0
 800c512:	60da      	str	r2, [r3, #12]
 800c514:	e00b      	b.n	800c52e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	8adb      	ldrh	r3, [r3, #22]
 800c51e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c520:	6879      	ldr	r1, [r7, #4]
 800c522:	4828      	ldr	r0, [pc, #160]	@ (800c5c4 <tcp_abandon+0x174>)
 800c524:	f000 ff7c 	bl	800d420 <tcp_pcb_remove>
 800c528:	4b27      	ldr	r3, [pc, #156]	@ (800c5c8 <tcp_abandon+0x178>)
 800c52a:	2201      	movs	r2, #1
 800c52c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c532:	2b00      	cmp	r3, #0
 800c534:	d004      	beq.n	800c540 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c53a:	4618      	mov	r0, r3
 800c53c:	f000 fd1e 	bl	800cf7c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c544:	2b00      	cmp	r3, #0
 800c546:	d004      	beq.n	800c552 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c54c:	4618      	mov	r0, r3
 800c54e:	f000 fd15 	bl	800cf7c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c556:	2b00      	cmp	r3, #0
 800c558:	d004      	beq.n	800c564 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c55e:	4618      	mov	r0, r3
 800c560:	f000 fd0c 	bl	800cf7c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c566:	2b00      	cmp	r3, #0
 800c568:	d00e      	beq.n	800c588 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c56a:	6879      	ldr	r1, [r7, #4]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	3304      	adds	r3, #4
 800c570:	687a      	ldr	r2, [r7, #4]
 800c572:	8b12      	ldrh	r2, [r2, #24]
 800c574:	9202      	str	r2, [sp, #8]
 800c576:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c578:	9201      	str	r2, [sp, #4]
 800c57a:	9300      	str	r3, [sp, #0]
 800c57c:	460b      	mov	r3, r1
 800c57e:	697a      	ldr	r2, [r7, #20]
 800c580:	69b9      	ldr	r1, [r7, #24]
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f004 fcbe 	bl	8010f04 <tcp_rst>
    }
    last_state = pcb->state;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	7d1b      	ldrb	r3, [r3, #20]
 800c58c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f7ff fd34 	bl	800bffc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d004      	beq.n	800c5a4 <tcp_abandon+0x154>
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	f06f 010c 	mvn.w	r1, #12
 800c5a0:	68f8      	ldr	r0, [r7, #12]
 800c5a2:	4798      	blx	r3
  }
}
 800c5a4:	3728      	adds	r7, #40	@ 0x28
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}
 800c5aa:	bf00      	nop
 800c5ac:	08019148 	.word	0x08019148
 800c5b0:	0801928c 	.word	0x0801928c
 800c5b4:	0801918c 	.word	0x0801918c
 800c5b8:	080192a8 	.word	0x080192a8
 800c5bc:	2000cad0 	.word	0x2000cad0
 800c5c0:	2000cac4 	.word	0x2000cac4
 800c5c4:	2000cacc 	.word	0x2000cacc
 800c5c8:	2000cad4 	.word	0x2000cad4

0800c5cc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b082      	sub	sp, #8
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c5d4:	2101      	movs	r1, #1
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f7ff ff3a 	bl	800c450 <tcp_abandon>
}
 800c5dc:	bf00      	nop
 800c5de:	3708      	adds	r7, #8
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}

0800c5e4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b084      	sub	sp, #16
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d106      	bne.n	800c600 <tcp_update_rcv_ann_wnd+0x1c>
 800c5f2:	4b25      	ldr	r3, [pc, #148]	@ (800c688 <tcp_update_rcv_ann_wnd+0xa4>)
 800c5f4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800c5f8:	4924      	ldr	r1, [pc, #144]	@ (800c68c <tcp_update_rcv_ann_wnd+0xa8>)
 800c5fa:	4825      	ldr	r0, [pc, #148]	@ (800c690 <tcp_update_rcv_ann_wnd+0xac>)
 800c5fc:	f00a fd2c 	bl	8017058 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c604:	687a      	ldr	r2, [r7, #4]
 800c606:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800c608:	4413      	add	r3, r2
 800c60a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c610:	687a      	ldr	r2, [r7, #4]
 800c612:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800c614:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800c618:	bf28      	it	cs
 800c61a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800c61e:	b292      	uxth	r2, r2
 800c620:	4413      	add	r3, r2
 800c622:	68fa      	ldr	r2, [r7, #12]
 800c624:	1ad3      	subs	r3, r2, r3
 800c626:	2b00      	cmp	r3, #0
 800c628:	db08      	blt.n	800c63c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c636:	68fa      	ldr	r2, [r7, #12]
 800c638:	1ad3      	subs	r3, r2, r3
 800c63a:	e020      	b.n	800c67e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c644:	1ad3      	subs	r3, r2, r3
 800c646:	2b00      	cmp	r3, #0
 800c648:	dd03      	ble.n	800c652 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2200      	movs	r2, #0
 800c64e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c650:	e014      	b.n	800c67c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c65a:	1ad3      	subs	r3, r2, r3
 800c65c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c664:	d306      	bcc.n	800c674 <tcp_update_rcv_ann_wnd+0x90>
 800c666:	4b08      	ldr	r3, [pc, #32]	@ (800c688 <tcp_update_rcv_ann_wnd+0xa4>)
 800c668:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800c66c:	4909      	ldr	r1, [pc, #36]	@ (800c694 <tcp_update_rcv_ann_wnd+0xb0>)
 800c66e:	4808      	ldr	r0, [pc, #32]	@ (800c690 <tcp_update_rcv_ann_wnd+0xac>)
 800c670:	f00a fcf2 	bl	8017058 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	b29a      	uxth	r2, r3
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800c67c:	2300      	movs	r3, #0
  }
}
 800c67e:	4618      	mov	r0, r3
 800c680:	3710      	adds	r7, #16
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}
 800c686:	bf00      	nop
 800c688:	08019148 	.word	0x08019148
 800c68c:	080193a4 	.word	0x080193a4
 800c690:	0801918c 	.word	0x0801918c
 800c694:	080193c8 	.word	0x080193c8

0800c698 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b084      	sub	sp, #16
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	460b      	mov	r3, r1
 800c6a2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d107      	bne.n	800c6ba <tcp_recved+0x22>
 800c6aa:	4b1f      	ldr	r3, [pc, #124]	@ (800c728 <tcp_recved+0x90>)
 800c6ac:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800c6b0:	491e      	ldr	r1, [pc, #120]	@ (800c72c <tcp_recved+0x94>)
 800c6b2:	481f      	ldr	r0, [pc, #124]	@ (800c730 <tcp_recved+0x98>)
 800c6b4:	f00a fcd0 	bl	8017058 <iprintf>
 800c6b8:	e032      	b.n	800c720 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	7d1b      	ldrb	r3, [r3, #20]
 800c6be:	2b01      	cmp	r3, #1
 800c6c0:	d106      	bne.n	800c6d0 <tcp_recved+0x38>
 800c6c2:	4b19      	ldr	r3, [pc, #100]	@ (800c728 <tcp_recved+0x90>)
 800c6c4:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800c6c8:	491a      	ldr	r1, [pc, #104]	@ (800c734 <tcp_recved+0x9c>)
 800c6ca:	4819      	ldr	r0, [pc, #100]	@ (800c730 <tcp_recved+0x98>)
 800c6cc:	f00a fcc4 	bl	8017058 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c6d4:	887b      	ldrh	r3, [r7, #2]
 800c6d6:	4413      	add	r3, r2
 800c6d8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c6da:	89fb      	ldrh	r3, [r7, #14]
 800c6dc:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800c6e0:	d804      	bhi.n	800c6ec <tcp_recved+0x54>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c6e6:	89fa      	ldrh	r2, [r7, #14]
 800c6e8:	429a      	cmp	r2, r3
 800c6ea:	d204      	bcs.n	800c6f6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800c6f2:	851a      	strh	r2, [r3, #40]	@ 0x28
 800c6f4:	e002      	b.n	800c6fc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	89fa      	ldrh	r2, [r7, #14]
 800c6fa:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f7ff ff71 	bl	800c5e4 <tcp_update_rcv_ann_wnd>
 800c702:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800c70a:	d309      	bcc.n	800c720 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	8b5b      	ldrh	r3, [r3, #26]
 800c710:	f043 0302 	orr.w	r3, r3, #2
 800c714:	b29a      	uxth	r2, r3
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f003 fe3e 	bl	801039c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c720:	3710      	adds	r7, #16
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
 800c726:	bf00      	nop
 800c728:	08019148 	.word	0x08019148
 800c72c:	080193e4 	.word	0x080193e4
 800c730:	0801918c 	.word	0x0801918c
 800c734:	080193fc 	.word	0x080193fc

0800c738 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c738:	b5b0      	push	{r4, r5, r7, lr}
 800c73a:	b090      	sub	sp, #64	@ 0x40
 800c73c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c73e:	2300      	movs	r3, #0
 800c740:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800c744:	4b95      	ldr	r3, [pc, #596]	@ (800c99c <tcp_slowtmr+0x264>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	3301      	adds	r3, #1
 800c74a:	4a94      	ldr	r2, [pc, #592]	@ (800c99c <tcp_slowtmr+0x264>)
 800c74c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c74e:	4b94      	ldr	r3, [pc, #592]	@ (800c9a0 <tcp_slowtmr+0x268>)
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	3301      	adds	r3, #1
 800c754:	b2da      	uxtb	r2, r3
 800c756:	4b92      	ldr	r3, [pc, #584]	@ (800c9a0 <tcp_slowtmr+0x268>)
 800c758:	701a      	strb	r2, [r3, #0]
 800c75a:	e000      	b.n	800c75e <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800c75c:	bf00      	nop
  prev = NULL;
 800c75e:	2300      	movs	r3, #0
 800c760:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800c762:	4b90      	ldr	r3, [pc, #576]	@ (800c9a4 <tcp_slowtmr+0x26c>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800c768:	e29f      	b.n	800ccaa <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c76a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c76c:	7d1b      	ldrb	r3, [r3, #20]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d106      	bne.n	800c780 <tcp_slowtmr+0x48>
 800c772:	4b8d      	ldr	r3, [pc, #564]	@ (800c9a8 <tcp_slowtmr+0x270>)
 800c774:	f240 42be 	movw	r2, #1214	@ 0x4be
 800c778:	498c      	ldr	r1, [pc, #560]	@ (800c9ac <tcp_slowtmr+0x274>)
 800c77a:	488d      	ldr	r0, [pc, #564]	@ (800c9b0 <tcp_slowtmr+0x278>)
 800c77c:	f00a fc6c 	bl	8017058 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c782:	7d1b      	ldrb	r3, [r3, #20]
 800c784:	2b01      	cmp	r3, #1
 800c786:	d106      	bne.n	800c796 <tcp_slowtmr+0x5e>
 800c788:	4b87      	ldr	r3, [pc, #540]	@ (800c9a8 <tcp_slowtmr+0x270>)
 800c78a:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800c78e:	4989      	ldr	r1, [pc, #548]	@ (800c9b4 <tcp_slowtmr+0x27c>)
 800c790:	4887      	ldr	r0, [pc, #540]	@ (800c9b0 <tcp_slowtmr+0x278>)
 800c792:	f00a fc61 	bl	8017058 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c798:	7d1b      	ldrb	r3, [r3, #20]
 800c79a:	2b0a      	cmp	r3, #10
 800c79c:	d106      	bne.n	800c7ac <tcp_slowtmr+0x74>
 800c79e:	4b82      	ldr	r3, [pc, #520]	@ (800c9a8 <tcp_slowtmr+0x270>)
 800c7a0:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800c7a4:	4984      	ldr	r1, [pc, #528]	@ (800c9b8 <tcp_slowtmr+0x280>)
 800c7a6:	4882      	ldr	r0, [pc, #520]	@ (800c9b0 <tcp_slowtmr+0x278>)
 800c7a8:	f00a fc56 	bl	8017058 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c7ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7ae:	7f9a      	ldrb	r2, [r3, #30]
 800c7b0:	4b7b      	ldr	r3, [pc, #492]	@ (800c9a0 <tcp_slowtmr+0x268>)
 800c7b2:	781b      	ldrb	r3, [r3, #0]
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d105      	bne.n	800c7c4 <tcp_slowtmr+0x8c>
      prev = pcb;
 800c7b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800c7bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7be:	68db      	ldr	r3, [r3, #12]
 800c7c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800c7c2:	e272      	b.n	800ccaa <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 800c7c4:	4b76      	ldr	r3, [pc, #472]	@ (800c9a0 <tcp_slowtmr+0x268>)
 800c7c6:	781a      	ldrb	r2, [r3, #0]
 800c7c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7ca:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c7d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7da:	7d1b      	ldrb	r3, [r3, #20]
 800c7dc:	2b02      	cmp	r3, #2
 800c7de:	d10a      	bne.n	800c7f6 <tcp_slowtmr+0xbe>
 800c7e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c7e6:	2b05      	cmp	r3, #5
 800c7e8:	d905      	bls.n	800c7f6 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800c7ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c7ee:	3301      	adds	r3, #1
 800c7f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c7f4:	e11e      	b.n	800ca34 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c7f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c7fc:	2b0b      	cmp	r3, #11
 800c7fe:	d905      	bls.n	800c80c <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800c800:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c804:	3301      	adds	r3, #1
 800c806:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c80a:	e113      	b.n	800ca34 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800c80c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c80e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c812:	2b00      	cmp	r3, #0
 800c814:	d075      	beq.n	800c902 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d006      	beq.n	800c82c <tcp_slowtmr+0xf4>
 800c81e:	4b62      	ldr	r3, [pc, #392]	@ (800c9a8 <tcp_slowtmr+0x270>)
 800c820:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800c824:	4965      	ldr	r1, [pc, #404]	@ (800c9bc <tcp_slowtmr+0x284>)
 800c826:	4862      	ldr	r0, [pc, #392]	@ (800c9b0 <tcp_slowtmr+0x278>)
 800c828:	f00a fc16 	bl	8017058 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c82c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c82e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c830:	2b00      	cmp	r3, #0
 800c832:	d106      	bne.n	800c842 <tcp_slowtmr+0x10a>
 800c834:	4b5c      	ldr	r3, [pc, #368]	@ (800c9a8 <tcp_slowtmr+0x270>)
 800c836:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800c83a:	4961      	ldr	r1, [pc, #388]	@ (800c9c0 <tcp_slowtmr+0x288>)
 800c83c:	485c      	ldr	r0, [pc, #368]	@ (800c9b0 <tcp_slowtmr+0x278>)
 800c83e:	f00a fc0b 	bl	8017058 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c844:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800c848:	2b0b      	cmp	r3, #11
 800c84a:	d905      	bls.n	800c858 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800c84c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c850:	3301      	adds	r3, #1
 800c852:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c856:	e0ed      	b.n	800ca34 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c85a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c85e:	3b01      	subs	r3, #1
 800c860:	4a58      	ldr	r2, [pc, #352]	@ (800c9c4 <tcp_slowtmr+0x28c>)
 800c862:	5cd3      	ldrb	r3, [r2, r3]
 800c864:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c868:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c86c:	7c7a      	ldrb	r2, [r7, #17]
 800c86e:	429a      	cmp	r2, r3
 800c870:	d907      	bls.n	800c882 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800c872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c874:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c878:	3301      	adds	r3, #1
 800c87a:	b2da      	uxtb	r2, r3
 800c87c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c87e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800c882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c884:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c888:	7c7a      	ldrb	r2, [r7, #17]
 800c88a:	429a      	cmp	r2, r3
 800c88c:	f200 80d2 	bhi.w	800ca34 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800c890:	2301      	movs	r3, #1
 800c892:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800c894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c896:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d108      	bne.n	800c8b0 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c89e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c8a0:	f004 fc24 	bl	80110ec <tcp_zero_window_probe>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d014      	beq.n	800c8d4 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	623b      	str	r3, [r7, #32]
 800c8ae:	e011      	b.n	800c8d4 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c8b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c8b6:	4619      	mov	r1, r3
 800c8b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c8ba:	f003 fae9 	bl	800fe90 <tcp_split_unsent_seg>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d107      	bne.n	800c8d4 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800c8c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c8c6:	f003 fd69 	bl	801039c <tcp_output>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d101      	bne.n	800c8d4 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800c8d4:	6a3b      	ldr	r3, [r7, #32]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	f000 80ac 	beq.w	800ca34 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800c8dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8de:	2200      	movs	r2, #0
 800c8e0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c8e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8e6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c8ea:	2b06      	cmp	r3, #6
 800c8ec:	f200 80a2 	bhi.w	800ca34 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800c8f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8f2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c8f6:	3301      	adds	r3, #1
 800c8f8:	b2da      	uxtb	r2, r3
 800c8fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8fc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800c900:	e098      	b.n	800ca34 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c904:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c908:	2b00      	cmp	r3, #0
 800c90a:	db0f      	blt.n	800c92c <tcp_slowtmr+0x1f4>
 800c90c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c90e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c912:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800c916:	4293      	cmp	r3, r2
 800c918:	d008      	beq.n	800c92c <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800c91a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c91c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c920:	b29b      	uxth	r3, r3
 800c922:	3301      	adds	r3, #1
 800c924:	b29b      	uxth	r3, r3
 800c926:	b21a      	sxth	r2, r3
 800c928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c92a:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800c92c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c92e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800c932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c934:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800c938:	429a      	cmp	r2, r3
 800c93a:	db7b      	blt.n	800ca34 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c93c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c93e:	f004 f821 	bl	8010984 <tcp_rexmit_rto_prepare>
 800c942:	4603      	mov	r3, r0
 800c944:	2b00      	cmp	r3, #0
 800c946:	d007      	beq.n	800c958 <tcp_slowtmr+0x220>
 800c948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c94a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d171      	bne.n	800ca34 <tcp_slowtmr+0x2fc>
 800c950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c952:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c954:	2b00      	cmp	r3, #0
 800c956:	d06d      	beq.n	800ca34 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800c958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c95a:	7d1b      	ldrb	r3, [r3, #20]
 800c95c:	2b02      	cmp	r3, #2
 800c95e:	d03a      	beq.n	800c9d6 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c962:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c966:	2b0c      	cmp	r3, #12
 800c968:	bf28      	it	cs
 800c96a:	230c      	movcs	r3, #12
 800c96c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c96e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c970:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c974:	10db      	asrs	r3, r3, #3
 800c976:	b21b      	sxth	r3, r3
 800c978:	461a      	mov	r2, r3
 800c97a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c97c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c980:	4413      	add	r3, r2
 800c982:	7efa      	ldrb	r2, [r7, #27]
 800c984:	4910      	ldr	r1, [pc, #64]	@ (800c9c8 <tcp_slowtmr+0x290>)
 800c986:	5c8a      	ldrb	r2, [r1, r2]
 800c988:	4093      	lsls	r3, r2
 800c98a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800c992:	4293      	cmp	r3, r2
 800c994:	dc1a      	bgt.n	800c9cc <tcp_slowtmr+0x294>
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	b21a      	sxth	r2, r3
 800c99a:	e019      	b.n	800c9d0 <tcp_slowtmr+0x298>
 800c99c:	2000cac0 	.word	0x2000cac0
 800c9a0:	2000cad6 	.word	0x2000cad6
 800c9a4:	2000cacc 	.word	0x2000cacc
 800c9a8:	08019148 	.word	0x08019148
 800c9ac:	0801948c 	.word	0x0801948c
 800c9b0:	0801918c 	.word	0x0801918c
 800c9b4:	080194b8 	.word	0x080194b8
 800c9b8:	080194e4 	.word	0x080194e4
 800c9bc:	08019514 	.word	0x08019514
 800c9c0:	08019548 	.word	0x08019548
 800c9c4:	0801b88c 	.word	0x0801b88c
 800c9c8:	0801b87c 	.word	0x0801b87c
 800c9cc:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800c9d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9d2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800c9d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9d8:	2200      	movs	r2, #0
 800c9da:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c9dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800c9e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c9e8:	4293      	cmp	r3, r2
 800c9ea:	bf28      	it	cs
 800c9ec:	4613      	movcs	r3, r2
 800c9ee:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800c9f0:	8a7b      	ldrh	r3, [r7, #18]
 800c9f2:	085b      	lsrs	r3, r3, #1
 800c9f4:	b29a      	uxth	r2, r3
 800c9f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9f8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c9fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9fe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800ca02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ca06:	005b      	lsls	r3, r3, #1
 800ca08:	b29b      	uxth	r3, r3
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	d206      	bcs.n	800ca1c <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ca0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ca12:	005b      	lsls	r3, r3, #1
 800ca14:	b29a      	uxth	r2, r3
 800ca16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca18:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800ca1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca1e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800ca20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca22:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800ca26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca28:	2200      	movs	r2, #0
 800ca2a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800ca2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ca30:	f004 f818 	bl	8010a64 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800ca34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca36:	7d1b      	ldrb	r3, [r3, #20]
 800ca38:	2b06      	cmp	r3, #6
 800ca3a:	d111      	bne.n	800ca60 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800ca3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca3e:	8b5b      	ldrh	r3, [r3, #26]
 800ca40:	f003 0310 	and.w	r3, r3, #16
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d00b      	beq.n	800ca60 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ca48:	4b9d      	ldr	r3, [pc, #628]	@ (800ccc0 <tcp_slowtmr+0x588>)
 800ca4a:	681a      	ldr	r2, [r3, #0]
 800ca4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca4e:	6a1b      	ldr	r3, [r3, #32]
 800ca50:	1ad3      	subs	r3, r2, r3
 800ca52:	2b28      	cmp	r3, #40	@ 0x28
 800ca54:	d904      	bls.n	800ca60 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800ca56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ca60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca62:	7a5b      	ldrb	r3, [r3, #9]
 800ca64:	f003 0308 	and.w	r3, r3, #8
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d04c      	beq.n	800cb06 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 800ca6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca6e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ca70:	2b04      	cmp	r3, #4
 800ca72:	d003      	beq.n	800ca7c <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800ca74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca76:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ca78:	2b07      	cmp	r3, #7
 800ca7a:	d144      	bne.n	800cb06 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ca7c:	4b90      	ldr	r3, [pc, #576]	@ (800ccc0 <tcp_slowtmr+0x588>)
 800ca7e:	681a      	ldr	r2, [r3, #0]
 800ca80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca82:	6a1b      	ldr	r3, [r3, #32]
 800ca84:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ca86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ca8c:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800ca90:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800ca94:	498b      	ldr	r1, [pc, #556]	@ (800ccc4 <tcp_slowtmr+0x58c>)
 800ca96:	fba1 1303 	umull	r1, r3, r1, r3
 800ca9a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ca9c:	429a      	cmp	r2, r3
 800ca9e:	d90a      	bls.n	800cab6 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800caa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800caa4:	3301      	adds	r3, #1
 800caa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800caaa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800caae:	3301      	adds	r3, #1
 800cab0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cab4:	e027      	b.n	800cb06 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cab6:	4b82      	ldr	r3, [pc, #520]	@ (800ccc0 <tcp_slowtmr+0x588>)
 800cab8:	681a      	ldr	r2, [r3, #0]
 800caba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cabc:	6a1b      	ldr	r3, [r3, #32]
 800cabe:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800cac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cac2:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800cac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cac8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800cacc:	4618      	mov	r0, r3
 800cace:	4b7e      	ldr	r3, [pc, #504]	@ (800ccc8 <tcp_slowtmr+0x590>)
 800cad0:	fb00 f303 	mul.w	r3, r0, r3
 800cad4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800cad6:	497b      	ldr	r1, [pc, #492]	@ (800ccc4 <tcp_slowtmr+0x58c>)
 800cad8:	fba1 1303 	umull	r1, r3, r1, r3
 800cadc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cade:	429a      	cmp	r2, r3
 800cae0:	d911      	bls.n	800cb06 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800cae2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cae4:	f004 fac2 	bl	801106c <tcp_keepalive>
 800cae8:	4603      	mov	r3, r0
 800caea:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800caee:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d107      	bne.n	800cb06 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 800caf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caf8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800cafc:	3301      	adds	r3, #1
 800cafe:	b2da      	uxtb	r2, r3
 800cb00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb02:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800cb06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d011      	beq.n	800cb32 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800cb0e:	4b6c      	ldr	r3, [pc, #432]	@ (800ccc0 <tcp_slowtmr+0x588>)
 800cb10:	681a      	ldr	r2, [r3, #0]
 800cb12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb14:	6a1b      	ldr	r3, [r3, #32]
 800cb16:	1ad2      	subs	r2, r2, r3
 800cb18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb1a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800cb1e:	4619      	mov	r1, r3
 800cb20:	460b      	mov	r3, r1
 800cb22:	005b      	lsls	r3, r3, #1
 800cb24:	440b      	add	r3, r1
 800cb26:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d302      	bcc.n	800cb32 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 800cb2c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cb2e:	f000 fddb 	bl	800d6e8 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800cb32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb34:	7d1b      	ldrb	r3, [r3, #20]
 800cb36:	2b03      	cmp	r3, #3
 800cb38:	d10b      	bne.n	800cb52 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cb3a:	4b61      	ldr	r3, [pc, #388]	@ (800ccc0 <tcp_slowtmr+0x588>)
 800cb3c:	681a      	ldr	r2, [r3, #0]
 800cb3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb40:	6a1b      	ldr	r3, [r3, #32]
 800cb42:	1ad3      	subs	r3, r2, r3
 800cb44:	2b28      	cmp	r3, #40	@ 0x28
 800cb46:	d904      	bls.n	800cb52 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 800cb48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800cb52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb54:	7d1b      	ldrb	r3, [r3, #20]
 800cb56:	2b09      	cmp	r3, #9
 800cb58:	d10b      	bne.n	800cb72 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cb5a:	4b59      	ldr	r3, [pc, #356]	@ (800ccc0 <tcp_slowtmr+0x588>)
 800cb5c:	681a      	ldr	r2, [r3, #0]
 800cb5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb60:	6a1b      	ldr	r3, [r3, #32]
 800cb62:	1ad3      	subs	r3, r2, r3
 800cb64:	2bf0      	cmp	r3, #240	@ 0xf0
 800cb66:	d904      	bls.n	800cb72 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 800cb68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb6c:	3301      	adds	r3, #1
 800cb6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800cb72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d060      	beq.n	800cc3c <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 800cb7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb80:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800cb82:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cb84:	f000 fbfc 	bl	800d380 <tcp_pcb_purge>
      if (prev != NULL) {
 800cb88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d010      	beq.n	800cbb0 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800cb8e:	4b4f      	ldr	r3, [pc, #316]	@ (800cccc <tcp_slowtmr+0x594>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb94:	429a      	cmp	r2, r3
 800cb96:	d106      	bne.n	800cba6 <tcp_slowtmr+0x46e>
 800cb98:	4b4d      	ldr	r3, [pc, #308]	@ (800ccd0 <tcp_slowtmr+0x598>)
 800cb9a:	f240 526d 	movw	r2, #1389	@ 0x56d
 800cb9e:	494d      	ldr	r1, [pc, #308]	@ (800ccd4 <tcp_slowtmr+0x59c>)
 800cba0:	484d      	ldr	r0, [pc, #308]	@ (800ccd8 <tcp_slowtmr+0x5a0>)
 800cba2:	f00a fa59 	bl	8017058 <iprintf>
        prev->next = pcb->next;
 800cba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cba8:	68da      	ldr	r2, [r3, #12]
 800cbaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbac:	60da      	str	r2, [r3, #12]
 800cbae:	e00f      	b.n	800cbd0 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800cbb0:	4b46      	ldr	r3, [pc, #280]	@ (800cccc <tcp_slowtmr+0x594>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d006      	beq.n	800cbc8 <tcp_slowtmr+0x490>
 800cbba:	4b45      	ldr	r3, [pc, #276]	@ (800ccd0 <tcp_slowtmr+0x598>)
 800cbbc:	f240 5271 	movw	r2, #1393	@ 0x571
 800cbc0:	4946      	ldr	r1, [pc, #280]	@ (800ccdc <tcp_slowtmr+0x5a4>)
 800cbc2:	4845      	ldr	r0, [pc, #276]	@ (800ccd8 <tcp_slowtmr+0x5a0>)
 800cbc4:	f00a fa48 	bl	8017058 <iprintf>
        tcp_active_pcbs = pcb->next;
 800cbc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	4a3f      	ldr	r2, [pc, #252]	@ (800cccc <tcp_slowtmr+0x594>)
 800cbce:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800cbd0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d013      	beq.n	800cc00 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cbd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbda:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800cbdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbde:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800cbe0:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800cbe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbe4:	3304      	adds	r3, #4
 800cbe6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cbe8:	8ad2      	ldrh	r2, [r2, #22]
 800cbea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cbec:	8b09      	ldrh	r1, [r1, #24]
 800cbee:	9102      	str	r1, [sp, #8]
 800cbf0:	9201      	str	r2, [sp, #4]
 800cbf2:	9300      	str	r3, [sp, #0]
 800cbf4:	462b      	mov	r3, r5
 800cbf6:	4622      	mov	r2, r4
 800cbf8:	4601      	mov	r1, r0
 800cbfa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cbfc:	f004 f982 	bl	8010f04 <tcp_rst>
      err_arg = pcb->callback_arg;
 800cc00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc02:	691b      	ldr	r3, [r3, #16]
 800cc04:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800cc06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc08:	7d1b      	ldrb	r3, [r3, #20]
 800cc0a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800cc0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc0e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800cc10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc12:	68db      	ldr	r3, [r3, #12]
 800cc14:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800cc16:	6838      	ldr	r0, [r7, #0]
 800cc18:	f7ff f9f0 	bl	800bffc <tcp_free>
      tcp_active_pcbs_changed = 0;
 800cc1c:	4b30      	ldr	r3, [pc, #192]	@ (800cce0 <tcp_slowtmr+0x5a8>)
 800cc1e:	2200      	movs	r2, #0
 800cc20:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d004      	beq.n	800cc32 <tcp_slowtmr+0x4fa>
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	f06f 010c 	mvn.w	r1, #12
 800cc2e:	68b8      	ldr	r0, [r7, #8]
 800cc30:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800cc32:	4b2b      	ldr	r3, [pc, #172]	@ (800cce0 <tcp_slowtmr+0x5a8>)
 800cc34:	781b      	ldrb	r3, [r3, #0]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d037      	beq.n	800ccaa <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 800cc3a:	e590      	b.n	800c75e <tcp_slowtmr+0x26>
      prev = pcb;
 800cc3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc3e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800cc40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc42:	68db      	ldr	r3, [r3, #12]
 800cc44:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800cc46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc48:	7f1b      	ldrb	r3, [r3, #28]
 800cc4a:	3301      	adds	r3, #1
 800cc4c:	b2da      	uxtb	r2, r3
 800cc4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc50:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800cc52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc54:	7f1a      	ldrb	r2, [r3, #28]
 800cc56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc58:	7f5b      	ldrb	r3, [r3, #29]
 800cc5a:	429a      	cmp	r2, r3
 800cc5c:	d325      	bcc.n	800ccaa <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 800cc5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc60:	2200      	movs	r2, #0
 800cc62:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800cc64:	4b1e      	ldr	r3, [pc, #120]	@ (800cce0 <tcp_slowtmr+0x5a8>)
 800cc66:	2200      	movs	r2, #0
 800cc68:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800cc6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d00b      	beq.n	800cc8c <tcp_slowtmr+0x554>
 800cc74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cc7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc7c:	6912      	ldr	r2, [r2, #16]
 800cc7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cc80:	4610      	mov	r0, r2
 800cc82:	4798      	blx	r3
 800cc84:	4603      	mov	r3, r0
 800cc86:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800cc8a:	e002      	b.n	800cc92 <tcp_slowtmr+0x55a>
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800cc92:	4b13      	ldr	r3, [pc, #76]	@ (800cce0 <tcp_slowtmr+0x5a8>)
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	f47f ad60 	bne.w	800c75c <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800cc9c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d102      	bne.n	800ccaa <tcp_slowtmr+0x572>
          tcp_output(prev);
 800cca4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cca6:	f003 fb79 	bl	801039c <tcp_output>
  while (pcb != NULL) {
 800ccaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	f47f ad5c 	bne.w	800c76a <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800ccb6:	4b0b      	ldr	r3, [pc, #44]	@ (800cce4 <tcp_slowtmr+0x5ac>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800ccbc:	e067      	b.n	800cd8e <tcp_slowtmr+0x656>
 800ccbe:	bf00      	nop
 800ccc0:	2000cac0 	.word	0x2000cac0
 800ccc4:	10624dd3 	.word	0x10624dd3
 800ccc8:	000124f8 	.word	0x000124f8
 800cccc:	2000cacc 	.word	0x2000cacc
 800ccd0:	08019148 	.word	0x08019148
 800ccd4:	08019580 	.word	0x08019580
 800ccd8:	0801918c 	.word	0x0801918c
 800ccdc:	080195ac 	.word	0x080195ac
 800cce0:	2000cad4 	.word	0x2000cad4
 800cce4:	2000cad0 	.word	0x2000cad0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccea:	7d1b      	ldrb	r3, [r3, #20]
 800ccec:	2b0a      	cmp	r3, #10
 800ccee:	d006      	beq.n	800ccfe <tcp_slowtmr+0x5c6>
 800ccf0:	4b2b      	ldr	r3, [pc, #172]	@ (800cda0 <tcp_slowtmr+0x668>)
 800ccf2:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800ccf6:	492b      	ldr	r1, [pc, #172]	@ (800cda4 <tcp_slowtmr+0x66c>)
 800ccf8:	482b      	ldr	r0, [pc, #172]	@ (800cda8 <tcp_slowtmr+0x670>)
 800ccfa:	f00a f9ad 	bl	8017058 <iprintf>
    pcb_remove = 0;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cd04:	4b29      	ldr	r3, [pc, #164]	@ (800cdac <tcp_slowtmr+0x674>)
 800cd06:	681a      	ldr	r2, [r3, #0]
 800cd08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd0a:	6a1b      	ldr	r3, [r3, #32]
 800cd0c:	1ad3      	subs	r3, r2, r3
 800cd0e:	2bf0      	cmp	r3, #240	@ 0xf0
 800cd10:	d904      	bls.n	800cd1c <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800cd12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cd16:	3301      	adds	r3, #1
 800cd18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cd1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d02f      	beq.n	800cd84 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800cd24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cd26:	f000 fb2b 	bl	800d380 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800cd2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d010      	beq.n	800cd52 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800cd30:	4b1f      	ldr	r3, [pc, #124]	@ (800cdb0 <tcp_slowtmr+0x678>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d106      	bne.n	800cd48 <tcp_slowtmr+0x610>
 800cd3a:	4b19      	ldr	r3, [pc, #100]	@ (800cda0 <tcp_slowtmr+0x668>)
 800cd3c:	f240 52af 	movw	r2, #1455	@ 0x5af
 800cd40:	491c      	ldr	r1, [pc, #112]	@ (800cdb4 <tcp_slowtmr+0x67c>)
 800cd42:	4819      	ldr	r0, [pc, #100]	@ (800cda8 <tcp_slowtmr+0x670>)
 800cd44:	f00a f988 	bl	8017058 <iprintf>
        prev->next = pcb->next;
 800cd48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd4a:	68da      	ldr	r2, [r3, #12]
 800cd4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd4e:	60da      	str	r2, [r3, #12]
 800cd50:	e00f      	b.n	800cd72 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800cd52:	4b17      	ldr	r3, [pc, #92]	@ (800cdb0 <tcp_slowtmr+0x678>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd58:	429a      	cmp	r2, r3
 800cd5a:	d006      	beq.n	800cd6a <tcp_slowtmr+0x632>
 800cd5c:	4b10      	ldr	r3, [pc, #64]	@ (800cda0 <tcp_slowtmr+0x668>)
 800cd5e:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800cd62:	4915      	ldr	r1, [pc, #84]	@ (800cdb8 <tcp_slowtmr+0x680>)
 800cd64:	4810      	ldr	r0, [pc, #64]	@ (800cda8 <tcp_slowtmr+0x670>)
 800cd66:	f00a f977 	bl	8017058 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800cd6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd6c:	68db      	ldr	r3, [r3, #12]
 800cd6e:	4a10      	ldr	r2, [pc, #64]	@ (800cdb0 <tcp_slowtmr+0x678>)
 800cd70:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800cd72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd74:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800cd76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd78:	68db      	ldr	r3, [r3, #12]
 800cd7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800cd7c:	69f8      	ldr	r0, [r7, #28]
 800cd7e:	f7ff f93d 	bl	800bffc <tcp_free>
 800cd82:	e004      	b.n	800cd8e <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800cd84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd86:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800cd88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd8a:	68db      	ldr	r3, [r3, #12]
 800cd8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800cd8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d1a9      	bne.n	800cce8 <tcp_slowtmr+0x5b0>
    }
  }
}
 800cd94:	bf00      	nop
 800cd96:	bf00      	nop
 800cd98:	3730      	adds	r7, #48	@ 0x30
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bdb0      	pop	{r4, r5, r7, pc}
 800cd9e:	bf00      	nop
 800cda0:	08019148 	.word	0x08019148
 800cda4:	080195d8 	.word	0x080195d8
 800cda8:	0801918c 	.word	0x0801918c
 800cdac:	2000cac0 	.word	0x2000cac0
 800cdb0:	2000cad0 	.word	0x2000cad0
 800cdb4:	08019608 	.word	0x08019608
 800cdb8:	08019630 	.word	0x08019630

0800cdbc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b082      	sub	sp, #8
 800cdc0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800cdc2:	4b2d      	ldr	r3, [pc, #180]	@ (800ce78 <tcp_fasttmr+0xbc>)
 800cdc4:	781b      	ldrb	r3, [r3, #0]
 800cdc6:	3301      	adds	r3, #1
 800cdc8:	b2da      	uxtb	r2, r3
 800cdca:	4b2b      	ldr	r3, [pc, #172]	@ (800ce78 <tcp_fasttmr+0xbc>)
 800cdcc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800cdce:	4b2b      	ldr	r3, [pc, #172]	@ (800ce7c <tcp_fasttmr+0xc0>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cdd4:	e048      	b.n	800ce68 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	7f9a      	ldrb	r2, [r3, #30]
 800cdda:	4b27      	ldr	r3, [pc, #156]	@ (800ce78 <tcp_fasttmr+0xbc>)
 800cddc:	781b      	ldrb	r3, [r3, #0]
 800cdde:	429a      	cmp	r2, r3
 800cde0:	d03f      	beq.n	800ce62 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800cde2:	4b25      	ldr	r3, [pc, #148]	@ (800ce78 <tcp_fasttmr+0xbc>)
 800cde4:	781a      	ldrb	r2, [r3, #0]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	8b5b      	ldrh	r3, [r3, #26]
 800cdee:	f003 0301 	and.w	r3, r3, #1
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d010      	beq.n	800ce18 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	8b5b      	ldrh	r3, [r3, #26]
 800cdfa:	f043 0302 	orr.w	r3, r3, #2
 800cdfe:	b29a      	uxth	r2, r3
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	f003 fac9 	bl	801039c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	8b5b      	ldrh	r3, [r3, #26]
 800ce0e:	f023 0303 	bic.w	r3, r3, #3
 800ce12:	b29a      	uxth	r2, r3
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	8b5b      	ldrh	r3, [r3, #26]
 800ce1c:	f003 0308 	and.w	r3, r3, #8
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d009      	beq.n	800ce38 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	8b5b      	ldrh	r3, [r3, #26]
 800ce28:	f023 0308 	bic.w	r3, r3, #8
 800ce2c:	b29a      	uxth	r2, r3
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f7ff fa76 	bl	800c324 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	68db      	ldr	r3, [r3, #12]
 800ce3c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d00a      	beq.n	800ce5c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800ce46:	4b0e      	ldr	r3, [pc, #56]	@ (800ce80 <tcp_fasttmr+0xc4>)
 800ce48:	2200      	movs	r2, #0
 800ce4a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f000 f819 	bl	800ce84 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ce52:	4b0b      	ldr	r3, [pc, #44]	@ (800ce80 <tcp_fasttmr+0xc4>)
 800ce54:	781b      	ldrb	r3, [r3, #0]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d000      	beq.n	800ce5c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ce5a:	e7b8      	b.n	800cdce <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	607b      	str	r3, [r7, #4]
 800ce60:	e002      	b.n	800ce68 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	68db      	ldr	r3, [r3, #12]
 800ce66:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d1b3      	bne.n	800cdd6 <tcp_fasttmr+0x1a>
    }
  }
}
 800ce6e:	bf00      	nop
 800ce70:	bf00      	nop
 800ce72:	3708      	adds	r7, #8
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}
 800ce78:	2000cad6 	.word	0x2000cad6
 800ce7c:	2000cacc 	.word	0x2000cacc
 800ce80:	2000cad4 	.word	0x2000cad4

0800ce84 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ce84:	b590      	push	{r4, r7, lr}
 800ce86:	b085      	sub	sp, #20
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d109      	bne.n	800cea6 <tcp_process_refused_data+0x22>
 800ce92:	4b37      	ldr	r3, [pc, #220]	@ (800cf70 <tcp_process_refused_data+0xec>)
 800ce94:	f240 6209 	movw	r2, #1545	@ 0x609
 800ce98:	4936      	ldr	r1, [pc, #216]	@ (800cf74 <tcp_process_refused_data+0xf0>)
 800ce9a:	4837      	ldr	r0, [pc, #220]	@ (800cf78 <tcp_process_refused_data+0xf4>)
 800ce9c:	f00a f8dc 	bl	8017058 <iprintf>
 800cea0:	f06f 030f 	mvn.w	r3, #15
 800cea4:	e060      	b.n	800cf68 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ceaa:	7b5b      	ldrb	r3, [r3, #13]
 800ceac:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ceb2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d00b      	beq.n	800cedc <tcp_process_refused_data+0x58>
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	6918      	ldr	r0, [r3, #16]
 800cece:	2300      	movs	r3, #0
 800ced0:	68ba      	ldr	r2, [r7, #8]
 800ced2:	6879      	ldr	r1, [r7, #4]
 800ced4:	47a0      	blx	r4
 800ced6:	4603      	mov	r3, r0
 800ced8:	73fb      	strb	r3, [r7, #15]
 800ceda:	e007      	b.n	800ceec <tcp_process_refused_data+0x68>
 800cedc:	2300      	movs	r3, #0
 800cede:	68ba      	ldr	r2, [r7, #8]
 800cee0:	6879      	ldr	r1, [r7, #4]
 800cee2:	2000      	movs	r0, #0
 800cee4:	f000 f8a4 	bl	800d030 <tcp_recv_null>
 800cee8:	4603      	mov	r3, r0
 800ceea:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ceec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d12a      	bne.n	800cf4a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800cef4:	7bbb      	ldrb	r3, [r7, #14]
 800cef6:	f003 0320 	and.w	r3, r3, #32
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d033      	beq.n	800cf66 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cf02:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800cf06:	d005      	beq.n	800cf14 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cf0c:	3301      	adds	r3, #1
 800cf0e:	b29a      	uxth	r2, r3
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d00b      	beq.n	800cf36 <tcp_process_refused_data+0xb2>
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6918      	ldr	r0, [r3, #16]
 800cf28:	2300      	movs	r3, #0
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	6879      	ldr	r1, [r7, #4]
 800cf2e:	47a0      	blx	r4
 800cf30:	4603      	mov	r3, r0
 800cf32:	73fb      	strb	r3, [r7, #15]
 800cf34:	e001      	b.n	800cf3a <tcp_process_refused_data+0xb6>
 800cf36:	2300      	movs	r3, #0
 800cf38:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800cf3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf3e:	f113 0f0d 	cmn.w	r3, #13
 800cf42:	d110      	bne.n	800cf66 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800cf44:	f06f 030c 	mvn.w	r3, #12
 800cf48:	e00e      	b.n	800cf68 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800cf4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf4e:	f113 0f0d 	cmn.w	r3, #13
 800cf52:	d102      	bne.n	800cf5a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800cf54:	f06f 030c 	mvn.w	r3, #12
 800cf58:	e006      	b.n	800cf68 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	68ba      	ldr	r2, [r7, #8]
 800cf5e:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800cf60:	f06f 0304 	mvn.w	r3, #4
 800cf64:	e000      	b.n	800cf68 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800cf66:	2300      	movs	r3, #0
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3714      	adds	r7, #20
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd90      	pop	{r4, r7, pc}
 800cf70:	08019148 	.word	0x08019148
 800cf74:	08019658 	.word	0x08019658
 800cf78:	0801918c 	.word	0x0801918c

0800cf7c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b084      	sub	sp, #16
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800cf84:	e007      	b.n	800cf96 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f000 f80a 	bl	800cfa6 <tcp_seg_free>
    seg = next;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d1f4      	bne.n	800cf86 <tcp_segs_free+0xa>
  }
}
 800cf9c:	bf00      	nop
 800cf9e:	bf00      	nop
 800cfa0:	3710      	adds	r7, #16
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}

0800cfa6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800cfa6:	b580      	push	{r7, lr}
 800cfa8:	b082      	sub	sp, #8
 800cfaa:	af00      	add	r7, sp, #0
 800cfac:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d00c      	beq.n	800cfce <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	685b      	ldr	r3, [r3, #4]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d004      	beq.n	800cfc6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	685b      	ldr	r3, [r3, #4]
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f7fe fd5f 	bl	800ba84 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800cfc6:	6879      	ldr	r1, [r7, #4]
 800cfc8:	2003      	movs	r0, #3
 800cfca:	f7fd fdc5 	bl	800ab58 <memp_free>
  }
}
 800cfce:	bf00      	nop
 800cfd0:	3708      	adds	r7, #8
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}
	...

0800cfd8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b084      	sub	sp, #16
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d106      	bne.n	800cff4 <tcp_seg_copy+0x1c>
 800cfe6:	4b0f      	ldr	r3, [pc, #60]	@ (800d024 <tcp_seg_copy+0x4c>)
 800cfe8:	f240 6282 	movw	r2, #1666	@ 0x682
 800cfec:	490e      	ldr	r1, [pc, #56]	@ (800d028 <tcp_seg_copy+0x50>)
 800cfee:	480f      	ldr	r0, [pc, #60]	@ (800d02c <tcp_seg_copy+0x54>)
 800cff0:	f00a f832 	bl	8017058 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800cff4:	2003      	movs	r0, #3
 800cff6:	f7fd fd39 	bl	800aa6c <memp_malloc>
 800cffa:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d101      	bne.n	800d006 <tcp_seg_copy+0x2e>
    return NULL;
 800d002:	2300      	movs	r3, #0
 800d004:	e00a      	b.n	800d01c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d006:	2210      	movs	r2, #16
 800d008:	6879      	ldr	r1, [r7, #4]
 800d00a:	68f8      	ldr	r0, [r7, #12]
 800d00c:	f00a fa81 	bl	8017512 <memcpy>
  pbuf_ref(cseg->p);
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	685b      	ldr	r3, [r3, #4]
 800d014:	4618      	mov	r0, r3
 800d016:	f7fe fddb 	bl	800bbd0 <pbuf_ref>
  return cseg;
 800d01a:	68fb      	ldr	r3, [r7, #12]
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	3710      	adds	r7, #16
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}
 800d024:	08019148 	.word	0x08019148
 800d028:	0801969c 	.word	0x0801969c
 800d02c:	0801918c 	.word	0x0801918c

0800d030 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b084      	sub	sp, #16
 800d034:	af00      	add	r7, sp, #0
 800d036:	60f8      	str	r0, [r7, #12]
 800d038:	60b9      	str	r1, [r7, #8]
 800d03a:	607a      	str	r2, [r7, #4]
 800d03c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d109      	bne.n	800d058 <tcp_recv_null+0x28>
 800d044:	4b12      	ldr	r3, [pc, #72]	@ (800d090 <tcp_recv_null+0x60>)
 800d046:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800d04a:	4912      	ldr	r1, [pc, #72]	@ (800d094 <tcp_recv_null+0x64>)
 800d04c:	4812      	ldr	r0, [pc, #72]	@ (800d098 <tcp_recv_null+0x68>)
 800d04e:	f00a f803 	bl	8017058 <iprintf>
 800d052:	f06f 030f 	mvn.w	r3, #15
 800d056:	e016      	b.n	800d086 <tcp_recv_null+0x56>

  if (p != NULL) {
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d009      	beq.n	800d072 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	891b      	ldrh	r3, [r3, #8]
 800d062:	4619      	mov	r1, r3
 800d064:	68b8      	ldr	r0, [r7, #8]
 800d066:	f7ff fb17 	bl	800c698 <tcp_recved>
    pbuf_free(p);
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f7fe fd0a 	bl	800ba84 <pbuf_free>
 800d070:	e008      	b.n	800d084 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d072:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d104      	bne.n	800d084 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d07a:	68b8      	ldr	r0, [r7, #8]
 800d07c:	f7ff f9bc 	bl	800c3f8 <tcp_close>
 800d080:	4603      	mov	r3, r0
 800d082:	e000      	b.n	800d086 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d084:	2300      	movs	r3, #0
}
 800d086:	4618      	mov	r0, r3
 800d088:	3710      	adds	r7, #16
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}
 800d08e:	bf00      	nop
 800d090:	08019148 	.word	0x08019148
 800d094:	080196b8 	.word	0x080196b8
 800d098:	0801918c 	.word	0x0801918c

0800d09c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b086      	sub	sp, #24
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d0a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	db01      	blt.n	800d0b2 <tcp_kill_prio+0x16>
 800d0ae:	79fb      	ldrb	r3, [r7, #7]
 800d0b0:	e000      	b.n	800d0b4 <tcp_kill_prio+0x18>
 800d0b2:	237f      	movs	r3, #127	@ 0x7f
 800d0b4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d0b6:	7afb      	ldrb	r3, [r7, #11]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d034      	beq.n	800d126 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d0bc:	7afb      	ldrb	r3, [r7, #11]
 800d0be:	3b01      	subs	r3, #1
 800d0c0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d0ca:	4b19      	ldr	r3, [pc, #100]	@ (800d130 <tcp_kill_prio+0x94>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	617b      	str	r3, [r7, #20]
 800d0d0:	e01f      	b.n	800d112 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d0d2:	697b      	ldr	r3, [r7, #20]
 800d0d4:	7d5b      	ldrb	r3, [r3, #21]
 800d0d6:	7afa      	ldrb	r2, [r7, #11]
 800d0d8:	429a      	cmp	r2, r3
 800d0da:	d80c      	bhi.n	800d0f6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d0e0:	7afa      	ldrb	r2, [r7, #11]
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	d112      	bne.n	800d10c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d0e6:	4b13      	ldr	r3, [pc, #76]	@ (800d134 <tcp_kill_prio+0x98>)
 800d0e8:	681a      	ldr	r2, [r3, #0]
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	6a1b      	ldr	r3, [r3, #32]
 800d0ee:	1ad3      	subs	r3, r2, r3
 800d0f0:	68fa      	ldr	r2, [r7, #12]
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	d80a      	bhi.n	800d10c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d0f6:	4b0f      	ldr	r3, [pc, #60]	@ (800d134 <tcp_kill_prio+0x98>)
 800d0f8:	681a      	ldr	r2, [r3, #0]
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	6a1b      	ldr	r3, [r3, #32]
 800d0fe:	1ad3      	subs	r3, r2, r3
 800d100:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d102:	697b      	ldr	r3, [r7, #20]
 800d104:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	7d5b      	ldrb	r3, [r3, #21]
 800d10a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d10c:	697b      	ldr	r3, [r7, #20]
 800d10e:	68db      	ldr	r3, [r3, #12]
 800d110:	617b      	str	r3, [r7, #20]
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d1dc      	bne.n	800d0d2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d004      	beq.n	800d128 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d11e:	6938      	ldr	r0, [r7, #16]
 800d120:	f7ff fa54 	bl	800c5cc <tcp_abort>
 800d124:	e000      	b.n	800d128 <tcp_kill_prio+0x8c>
    return;
 800d126:	bf00      	nop
  }
}
 800d128:	3718      	adds	r7, #24
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}
 800d12e:	bf00      	nop
 800d130:	2000cacc 	.word	0x2000cacc
 800d134:	2000cac0 	.word	0x2000cac0

0800d138 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b086      	sub	sp, #24
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	4603      	mov	r3, r0
 800d140:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d142:	79fb      	ldrb	r3, [r7, #7]
 800d144:	2b08      	cmp	r3, #8
 800d146:	d009      	beq.n	800d15c <tcp_kill_state+0x24>
 800d148:	79fb      	ldrb	r3, [r7, #7]
 800d14a:	2b09      	cmp	r3, #9
 800d14c:	d006      	beq.n	800d15c <tcp_kill_state+0x24>
 800d14e:	4b1a      	ldr	r3, [pc, #104]	@ (800d1b8 <tcp_kill_state+0x80>)
 800d150:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800d154:	4919      	ldr	r1, [pc, #100]	@ (800d1bc <tcp_kill_state+0x84>)
 800d156:	481a      	ldr	r0, [pc, #104]	@ (800d1c0 <tcp_kill_state+0x88>)
 800d158:	f009 ff7e 	bl	8017058 <iprintf>

  inactivity = 0;
 800d15c:	2300      	movs	r3, #0
 800d15e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d160:	2300      	movs	r3, #0
 800d162:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d164:	4b17      	ldr	r3, [pc, #92]	@ (800d1c4 <tcp_kill_state+0x8c>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	617b      	str	r3, [r7, #20]
 800d16a:	e017      	b.n	800d19c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	7d1b      	ldrb	r3, [r3, #20]
 800d170:	79fa      	ldrb	r2, [r7, #7]
 800d172:	429a      	cmp	r2, r3
 800d174:	d10f      	bne.n	800d196 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d176:	4b14      	ldr	r3, [pc, #80]	@ (800d1c8 <tcp_kill_state+0x90>)
 800d178:	681a      	ldr	r2, [r3, #0]
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	6a1b      	ldr	r3, [r3, #32]
 800d17e:	1ad3      	subs	r3, r2, r3
 800d180:	68fa      	ldr	r2, [r7, #12]
 800d182:	429a      	cmp	r2, r3
 800d184:	d807      	bhi.n	800d196 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d186:	4b10      	ldr	r3, [pc, #64]	@ (800d1c8 <tcp_kill_state+0x90>)
 800d188:	681a      	ldr	r2, [r3, #0]
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	6a1b      	ldr	r3, [r3, #32]
 800d18e:	1ad3      	subs	r3, r2, r3
 800d190:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	68db      	ldr	r3, [r3, #12]
 800d19a:	617b      	str	r3, [r7, #20]
 800d19c:	697b      	ldr	r3, [r7, #20]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d1e4      	bne.n	800d16c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d003      	beq.n	800d1b0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d1a8:	2100      	movs	r1, #0
 800d1aa:	6938      	ldr	r0, [r7, #16]
 800d1ac:	f7ff f950 	bl	800c450 <tcp_abandon>
  }
}
 800d1b0:	bf00      	nop
 800d1b2:	3718      	adds	r7, #24
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}
 800d1b8:	08019148 	.word	0x08019148
 800d1bc:	080196d4 	.word	0x080196d4
 800d1c0:	0801918c 	.word	0x0801918c
 800d1c4:	2000cacc 	.word	0x2000cacc
 800d1c8:	2000cac0 	.word	0x2000cac0

0800d1cc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b084      	sub	sp, #16
 800d1d0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d1da:	4b12      	ldr	r3, [pc, #72]	@ (800d224 <tcp_kill_timewait+0x58>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	60fb      	str	r3, [r7, #12]
 800d1e0:	e012      	b.n	800d208 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d1e2:	4b11      	ldr	r3, [pc, #68]	@ (800d228 <tcp_kill_timewait+0x5c>)
 800d1e4:	681a      	ldr	r2, [r3, #0]
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	6a1b      	ldr	r3, [r3, #32]
 800d1ea:	1ad3      	subs	r3, r2, r3
 800d1ec:	687a      	ldr	r2, [r7, #4]
 800d1ee:	429a      	cmp	r2, r3
 800d1f0:	d807      	bhi.n	800d202 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d1f2:	4b0d      	ldr	r3, [pc, #52]	@ (800d228 <tcp_kill_timewait+0x5c>)
 800d1f4:	681a      	ldr	r2, [r3, #0]
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	6a1b      	ldr	r3, [r3, #32]
 800d1fa:	1ad3      	subs	r3, r2, r3
 800d1fc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	68db      	ldr	r3, [r3, #12]
 800d206:	60fb      	str	r3, [r7, #12]
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d1e9      	bne.n	800d1e2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d002      	beq.n	800d21a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d214:	68b8      	ldr	r0, [r7, #8]
 800d216:	f7ff f9d9 	bl	800c5cc <tcp_abort>
  }
}
 800d21a:	bf00      	nop
 800d21c:	3710      	adds	r7, #16
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}
 800d222:	bf00      	nop
 800d224:	2000cad0 	.word	0x2000cad0
 800d228:	2000cac0 	.word	0x2000cac0

0800d22c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b082      	sub	sp, #8
 800d230:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d232:	4b10      	ldr	r3, [pc, #64]	@ (800d274 <tcp_handle_closepend+0x48>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d238:	e014      	b.n	800d264 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	68db      	ldr	r3, [r3, #12]
 800d23e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	8b5b      	ldrh	r3, [r3, #26]
 800d244:	f003 0308 	and.w	r3, r3, #8
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d009      	beq.n	800d260 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	8b5b      	ldrh	r3, [r3, #26]
 800d250:	f023 0308 	bic.w	r3, r3, #8
 800d254:	b29a      	uxth	r2, r3
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f7ff f862 	bl	800c324 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d1e7      	bne.n	800d23a <tcp_handle_closepend+0xe>
  }
}
 800d26a:	bf00      	nop
 800d26c:	bf00      	nop
 800d26e:	3708      	adds	r7, #8
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}
 800d274:	2000cacc 	.word	0x2000cacc

0800d278 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b084      	sub	sp, #16
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	4603      	mov	r3, r0
 800d280:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d282:	2001      	movs	r0, #1
 800d284:	f7fd fbf2 	bl	800aa6c <memp_malloc>
 800d288:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d126      	bne.n	800d2de <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d290:	f7ff ffcc 	bl	800d22c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d294:	f7ff ff9a 	bl	800d1cc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d298:	2001      	movs	r0, #1
 800d29a:	f7fd fbe7 	bl	800aa6c <memp_malloc>
 800d29e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d11b      	bne.n	800d2de <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d2a6:	2009      	movs	r0, #9
 800d2a8:	f7ff ff46 	bl	800d138 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d2ac:	2001      	movs	r0, #1
 800d2ae:	f7fd fbdd 	bl	800aa6c <memp_malloc>
 800d2b2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d111      	bne.n	800d2de <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d2ba:	2008      	movs	r0, #8
 800d2bc:	f7ff ff3c 	bl	800d138 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d2c0:	2001      	movs	r0, #1
 800d2c2:	f7fd fbd3 	bl	800aa6c <memp_malloc>
 800d2c6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d107      	bne.n	800d2de <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d2ce:	79fb      	ldrb	r3, [r7, #7]
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7ff fee3 	bl	800d09c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d2d6:	2001      	movs	r0, #1
 800d2d8:	f7fd fbc8 	bl	800aa6c <memp_malloc>
 800d2dc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d03f      	beq.n	800d364 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d2e4:	229c      	movs	r2, #156	@ 0x9c
 800d2e6:	2100      	movs	r1, #0
 800d2e8:	68f8      	ldr	r0, [r7, #12]
 800d2ea:	f00a f847 	bl	801737c <memset>
    pcb->prio = prio;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	79fa      	ldrb	r2, [r7, #7]
 800d2f2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800d2fa:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800d304:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	22ff      	movs	r2, #255	@ 0xff
 800d312:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800d31a:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	2206      	movs	r2, #6
 800d320:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	2206      	movs	r2, #6
 800d328:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d330:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	2201      	movs	r2, #1
 800d336:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800d33a:	4b0d      	ldr	r3, [pc, #52]	@ (800d370 <tcp_alloc+0xf8>)
 800d33c:	681a      	ldr	r2, [r3, #0]
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d342:	4b0c      	ldr	r3, [pc, #48]	@ (800d374 <tcp_alloc+0xfc>)
 800d344:	781a      	ldrb	r2, [r3, #0]
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800d350:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	4a08      	ldr	r2, [pc, #32]	@ (800d378 <tcp_alloc+0x100>)
 800d358:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	4a07      	ldr	r2, [pc, #28]	@ (800d37c <tcp_alloc+0x104>)
 800d360:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d364:	68fb      	ldr	r3, [r7, #12]
}
 800d366:	4618      	mov	r0, r3
 800d368:	3710      	adds	r7, #16
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}
 800d36e:	bf00      	nop
 800d370:	2000cac0 	.word	0x2000cac0
 800d374:	2000cad6 	.word	0x2000cad6
 800d378:	0800d031 	.word	0x0800d031
 800d37c:	006ddd00 	.word	0x006ddd00

0800d380 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b082      	sub	sp, #8
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d107      	bne.n	800d39e <tcp_pcb_purge+0x1e>
 800d38e:	4b21      	ldr	r3, [pc, #132]	@ (800d414 <tcp_pcb_purge+0x94>)
 800d390:	f640 0251 	movw	r2, #2129	@ 0x851
 800d394:	4920      	ldr	r1, [pc, #128]	@ (800d418 <tcp_pcb_purge+0x98>)
 800d396:	4821      	ldr	r0, [pc, #132]	@ (800d41c <tcp_pcb_purge+0x9c>)
 800d398:	f009 fe5e 	bl	8017058 <iprintf>
 800d39c:	e037      	b.n	800d40e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	7d1b      	ldrb	r3, [r3, #20]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d033      	beq.n	800d40e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d3aa:	2b0a      	cmp	r3, #10
 800d3ac:	d02f      	beq.n	800d40e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d3b2:	2b01      	cmp	r3, #1
 800d3b4:	d02b      	beq.n	800d40e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d007      	beq.n	800d3ce <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f7fe fb5e 	bl	800ba84 <pbuf_free>
      pcb->refused_data = NULL;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d002      	beq.n	800d3dc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f000 f986 	bl	800d6e8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d3e2:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f7ff fdc7 	bl	800cf7c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f7ff fdc2 	bl	800cf7c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	66da      	str	r2, [r3, #108]	@ 0x6c
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2200      	movs	r2, #0
 800d40a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d40e:	3708      	adds	r7, #8
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}
 800d414:	08019148 	.word	0x08019148
 800d418:	08019794 	.word	0x08019794
 800d41c:	0801918c 	.word	0x0801918c

0800d420 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b084      	sub	sp, #16
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
 800d428:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d106      	bne.n	800d43e <tcp_pcb_remove+0x1e>
 800d430:	4b3e      	ldr	r3, [pc, #248]	@ (800d52c <tcp_pcb_remove+0x10c>)
 800d432:	f640 0283 	movw	r2, #2179	@ 0x883
 800d436:	493e      	ldr	r1, [pc, #248]	@ (800d530 <tcp_pcb_remove+0x110>)
 800d438:	483e      	ldr	r0, [pc, #248]	@ (800d534 <tcp_pcb_remove+0x114>)
 800d43a:	f009 fe0d 	bl	8017058 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d106      	bne.n	800d452 <tcp_pcb_remove+0x32>
 800d444:	4b39      	ldr	r3, [pc, #228]	@ (800d52c <tcp_pcb_remove+0x10c>)
 800d446:	f640 0284 	movw	r2, #2180	@ 0x884
 800d44a:	493b      	ldr	r1, [pc, #236]	@ (800d538 <tcp_pcb_remove+0x118>)
 800d44c:	4839      	ldr	r0, [pc, #228]	@ (800d534 <tcp_pcb_remove+0x114>)
 800d44e:	f009 fe03 	bl	8017058 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	683a      	ldr	r2, [r7, #0]
 800d458:	429a      	cmp	r2, r3
 800d45a:	d105      	bne.n	800d468 <tcp_pcb_remove+0x48>
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	68da      	ldr	r2, [r3, #12]
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	601a      	str	r2, [r3, #0]
 800d466:	e013      	b.n	800d490 <tcp_pcb_remove+0x70>
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	60fb      	str	r3, [r7, #12]
 800d46e:	e00c      	b.n	800d48a <tcp_pcb_remove+0x6a>
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	68db      	ldr	r3, [r3, #12]
 800d474:	683a      	ldr	r2, [r7, #0]
 800d476:	429a      	cmp	r2, r3
 800d478:	d104      	bne.n	800d484 <tcp_pcb_remove+0x64>
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	68da      	ldr	r2, [r3, #12]
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	60da      	str	r2, [r3, #12]
 800d482:	e005      	b.n	800d490 <tcp_pcb_remove+0x70>
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	68db      	ldr	r3, [r3, #12]
 800d488:	60fb      	str	r3, [r7, #12]
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d1ef      	bne.n	800d470 <tcp_pcb_remove+0x50>
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	2200      	movs	r2, #0
 800d494:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d496:	6838      	ldr	r0, [r7, #0]
 800d498:	f7ff ff72 	bl	800d380 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	7d1b      	ldrb	r3, [r3, #20]
 800d4a0:	2b0a      	cmp	r3, #10
 800d4a2:	d013      	beq.n	800d4cc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d4a8:	2b01      	cmp	r3, #1
 800d4aa:	d00f      	beq.n	800d4cc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	8b5b      	ldrh	r3, [r3, #26]
 800d4b0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d009      	beq.n	800d4cc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	8b5b      	ldrh	r3, [r3, #26]
 800d4bc:	f043 0302 	orr.w	r3, r3, #2
 800d4c0:	b29a      	uxth	r2, r3
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d4c6:	6838      	ldr	r0, [r7, #0]
 800d4c8:	f002 ff68 	bl	801039c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	7d1b      	ldrb	r3, [r3, #20]
 800d4d0:	2b01      	cmp	r3, #1
 800d4d2:	d020      	beq.n	800d516 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d006      	beq.n	800d4ea <tcp_pcb_remove+0xca>
 800d4dc:	4b13      	ldr	r3, [pc, #76]	@ (800d52c <tcp_pcb_remove+0x10c>)
 800d4de:	f640 0293 	movw	r2, #2195	@ 0x893
 800d4e2:	4916      	ldr	r1, [pc, #88]	@ (800d53c <tcp_pcb_remove+0x11c>)
 800d4e4:	4813      	ldr	r0, [pc, #76]	@ (800d534 <tcp_pcb_remove+0x114>)
 800d4e6:	f009 fdb7 	bl	8017058 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d006      	beq.n	800d500 <tcp_pcb_remove+0xe0>
 800d4f2:	4b0e      	ldr	r3, [pc, #56]	@ (800d52c <tcp_pcb_remove+0x10c>)
 800d4f4:	f640 0294 	movw	r2, #2196	@ 0x894
 800d4f8:	4911      	ldr	r1, [pc, #68]	@ (800d540 <tcp_pcb_remove+0x120>)
 800d4fa:	480e      	ldr	r0, [pc, #56]	@ (800d534 <tcp_pcb_remove+0x114>)
 800d4fc:	f009 fdac 	bl	8017058 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d504:	2b00      	cmp	r3, #0
 800d506:	d006      	beq.n	800d516 <tcp_pcb_remove+0xf6>
 800d508:	4b08      	ldr	r3, [pc, #32]	@ (800d52c <tcp_pcb_remove+0x10c>)
 800d50a:	f640 0296 	movw	r2, #2198	@ 0x896
 800d50e:	490d      	ldr	r1, [pc, #52]	@ (800d544 <tcp_pcb_remove+0x124>)
 800d510:	4808      	ldr	r0, [pc, #32]	@ (800d534 <tcp_pcb_remove+0x114>)
 800d512:	f009 fda1 	bl	8017058 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	2200      	movs	r2, #0
 800d51a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	2200      	movs	r2, #0
 800d520:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d522:	bf00      	nop
 800d524:	3710      	adds	r7, #16
 800d526:	46bd      	mov	sp, r7
 800d528:	bd80      	pop	{r7, pc}
 800d52a:	bf00      	nop
 800d52c:	08019148 	.word	0x08019148
 800d530:	080197b0 	.word	0x080197b0
 800d534:	0801918c 	.word	0x0801918c
 800d538:	080197cc 	.word	0x080197cc
 800d53c:	080197ec 	.word	0x080197ec
 800d540:	08019804 	.word	0x08019804
 800d544:	08019820 	.word	0x08019820

0800d548 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b082      	sub	sp, #8
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d106      	bne.n	800d564 <tcp_next_iss+0x1c>
 800d556:	4b0a      	ldr	r3, [pc, #40]	@ (800d580 <tcp_next_iss+0x38>)
 800d558:	f640 02af 	movw	r2, #2223	@ 0x8af
 800d55c:	4909      	ldr	r1, [pc, #36]	@ (800d584 <tcp_next_iss+0x3c>)
 800d55e:	480a      	ldr	r0, [pc, #40]	@ (800d588 <tcp_next_iss+0x40>)
 800d560:	f009 fd7a 	bl	8017058 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d564:	4b09      	ldr	r3, [pc, #36]	@ (800d58c <tcp_next_iss+0x44>)
 800d566:	681a      	ldr	r2, [r3, #0]
 800d568:	4b09      	ldr	r3, [pc, #36]	@ (800d590 <tcp_next_iss+0x48>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	4413      	add	r3, r2
 800d56e:	4a07      	ldr	r2, [pc, #28]	@ (800d58c <tcp_next_iss+0x44>)
 800d570:	6013      	str	r3, [r2, #0]
  return iss;
 800d572:	4b06      	ldr	r3, [pc, #24]	@ (800d58c <tcp_next_iss+0x44>)
 800d574:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d576:	4618      	mov	r0, r3
 800d578:	3708      	adds	r7, #8
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}
 800d57e:	bf00      	nop
 800d580:	08019148 	.word	0x08019148
 800d584:	08019838 	.word	0x08019838
 800d588:	0801918c 	.word	0x0801918c
 800d58c:	2000002c 	.word	0x2000002c
 800d590:	2000cac0 	.word	0x2000cac0

0800d594 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b086      	sub	sp, #24
 800d598:	af00      	add	r7, sp, #0
 800d59a:	4603      	mov	r3, r0
 800d59c:	60b9      	str	r1, [r7, #8]
 800d59e:	607a      	str	r2, [r7, #4]
 800d5a0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d106      	bne.n	800d5b6 <tcp_eff_send_mss_netif+0x22>
 800d5a8:	4b14      	ldr	r3, [pc, #80]	@ (800d5fc <tcp_eff_send_mss_netif+0x68>)
 800d5aa:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800d5ae:	4914      	ldr	r1, [pc, #80]	@ (800d600 <tcp_eff_send_mss_netif+0x6c>)
 800d5b0:	4814      	ldr	r0, [pc, #80]	@ (800d604 <tcp_eff_send_mss_netif+0x70>)
 800d5b2:	f009 fd51 	bl	8017058 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d101      	bne.n	800d5c0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d5bc:	89fb      	ldrh	r3, [r7, #14]
 800d5be:	e019      	b.n	800d5f4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800d5c4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d5c6:	8afb      	ldrh	r3, [r7, #22]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d012      	beq.n	800d5f2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d5cc:	2328      	movs	r3, #40	@ 0x28
 800d5ce:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d5d0:	8afa      	ldrh	r2, [r7, #22]
 800d5d2:	8abb      	ldrh	r3, [r7, #20]
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d904      	bls.n	800d5e2 <tcp_eff_send_mss_netif+0x4e>
 800d5d8:	8afa      	ldrh	r2, [r7, #22]
 800d5da:	8abb      	ldrh	r3, [r7, #20]
 800d5dc:	1ad3      	subs	r3, r2, r3
 800d5de:	b29b      	uxth	r3, r3
 800d5e0:	e000      	b.n	800d5e4 <tcp_eff_send_mss_netif+0x50>
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d5e6:	8a7a      	ldrh	r2, [r7, #18]
 800d5e8:	89fb      	ldrh	r3, [r7, #14]
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	bf28      	it	cs
 800d5ee:	4613      	movcs	r3, r2
 800d5f0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d5f2:	89fb      	ldrh	r3, [r7, #14]
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	3718      	adds	r7, #24
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}
 800d5fc:	08019148 	.word	0x08019148
 800d600:	08019854 	.word	0x08019854
 800d604:	0801918c 	.word	0x0801918c

0800d608 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b084      	sub	sp, #16
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
 800d610:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d119      	bne.n	800d650 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d61c:	4b10      	ldr	r3, [pc, #64]	@ (800d660 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d61e:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800d622:	4910      	ldr	r1, [pc, #64]	@ (800d664 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d624:	4810      	ldr	r0, [pc, #64]	@ (800d668 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d626:	f009 fd17 	bl	8017058 <iprintf>

  while (pcb != NULL) {
 800d62a:	e011      	b.n	800d650 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	681a      	ldr	r2, [r3, #0]
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	429a      	cmp	r2, r3
 800d636:	d108      	bne.n	800d64a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	68db      	ldr	r3, [r3, #12]
 800d63c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d63e:	68f8      	ldr	r0, [r7, #12]
 800d640:	f7fe ffc4 	bl	800c5cc <tcp_abort>
      pcb = next;
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	60fb      	str	r3, [r7, #12]
 800d648:	e002      	b.n	800d650 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	68db      	ldr	r3, [r3, #12]
 800d64e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d1ea      	bne.n	800d62c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d656:	bf00      	nop
 800d658:	bf00      	nop
 800d65a:	3710      	adds	r7, #16
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}
 800d660:	08019148 	.word	0x08019148
 800d664:	0801987c 	.word	0x0801987c
 800d668:	0801918c 	.word	0x0801918c

0800d66c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b084      	sub	sp, #16
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
 800d674:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d02a      	beq.n	800d6d2 <tcp_netif_ip_addr_changed+0x66>
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d026      	beq.n	800d6d2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d684:	4b15      	ldr	r3, [pc, #84]	@ (800d6dc <tcp_netif_ip_addr_changed+0x70>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	4619      	mov	r1, r3
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f7ff ffbc 	bl	800d608 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d690:	4b13      	ldr	r3, [pc, #76]	@ (800d6e0 <tcp_netif_ip_addr_changed+0x74>)
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	4619      	mov	r1, r3
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	f7ff ffb6 	bl	800d608 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d017      	beq.n	800d6d2 <tcp_netif_ip_addr_changed+0x66>
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d013      	beq.n	800d6d2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d6aa:	4b0e      	ldr	r3, [pc, #56]	@ (800d6e4 <tcp_netif_ip_addr_changed+0x78>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	60fb      	str	r3, [r7, #12]
 800d6b0:	e00c      	b.n	800d6cc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	681a      	ldr	r2, [r3, #0]
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	d103      	bne.n	800d6c6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	681a      	ldr	r2, [r3, #0]
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	68db      	ldr	r3, [r3, #12]
 800d6ca:	60fb      	str	r3, [r7, #12]
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d1ef      	bne.n	800d6b2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d6d2:	bf00      	nop
 800d6d4:	3710      	adds	r7, #16
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}
 800d6da:	bf00      	nop
 800d6dc:	2000cacc 	.word	0x2000cacc
 800d6e0:	2000cac4 	.word	0x2000cac4
 800d6e4:	2000cac8 	.word	0x2000cac8

0800d6e8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b082      	sub	sp, #8
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d007      	beq.n	800d708 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f7ff fc3d 	bl	800cf7c <tcp_segs_free>
    pcb->ooseq = NULL;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	2200      	movs	r2, #0
 800d706:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d708:	bf00      	nop
 800d70a:	3708      	adds	r7, #8
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}

0800d710 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d710:	b590      	push	{r4, r7, lr}
 800d712:	b08d      	sub	sp, #52	@ 0x34
 800d714:	af04      	add	r7, sp, #16
 800d716:	6078      	str	r0, [r7, #4]
 800d718:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d105      	bne.n	800d72c <tcp_input+0x1c>
 800d720:	4b9b      	ldr	r3, [pc, #620]	@ (800d990 <tcp_input+0x280>)
 800d722:	2283      	movs	r2, #131	@ 0x83
 800d724:	499b      	ldr	r1, [pc, #620]	@ (800d994 <tcp_input+0x284>)
 800d726:	489c      	ldr	r0, [pc, #624]	@ (800d998 <tcp_input+0x288>)
 800d728:	f009 fc96 	bl	8017058 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	685b      	ldr	r3, [r3, #4]
 800d730:	4a9a      	ldr	r2, [pc, #616]	@ (800d99c <tcp_input+0x28c>)
 800d732:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	895b      	ldrh	r3, [r3, #10]
 800d738:	2b13      	cmp	r3, #19
 800d73a:	f240 83d1 	bls.w	800dee0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d73e:	4b98      	ldr	r3, [pc, #608]	@ (800d9a0 <tcp_input+0x290>)
 800d740:	695b      	ldr	r3, [r3, #20]
 800d742:	4a97      	ldr	r2, [pc, #604]	@ (800d9a0 <tcp_input+0x290>)
 800d744:	6812      	ldr	r2, [r2, #0]
 800d746:	4611      	mov	r1, r2
 800d748:	4618      	mov	r0, r3
 800d74a:	f008 fa89 	bl	8015c60 <ip4_addr_isbroadcast_u32>
 800d74e:	4603      	mov	r3, r0
 800d750:	2b00      	cmp	r3, #0
 800d752:	f040 83c7 	bne.w	800dee4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d756:	4b92      	ldr	r3, [pc, #584]	@ (800d9a0 <tcp_input+0x290>)
 800d758:	695b      	ldr	r3, [r3, #20]
 800d75a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d75e:	2be0      	cmp	r3, #224	@ 0xe0
 800d760:	f000 83c0 	beq.w	800dee4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d764:	4b8d      	ldr	r3, [pc, #564]	@ (800d99c <tcp_input+0x28c>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	899b      	ldrh	r3, [r3, #12]
 800d76a:	b29b      	uxth	r3, r3
 800d76c:	4618      	mov	r0, r3
 800d76e:	f7fc fc35 	bl	8009fdc <lwip_htons>
 800d772:	4603      	mov	r3, r0
 800d774:	0b1b      	lsrs	r3, r3, #12
 800d776:	b29b      	uxth	r3, r3
 800d778:	b2db      	uxtb	r3, r3
 800d77a:	009b      	lsls	r3, r3, #2
 800d77c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d77e:	7cbb      	ldrb	r3, [r7, #18]
 800d780:	2b13      	cmp	r3, #19
 800d782:	f240 83b1 	bls.w	800dee8 <tcp_input+0x7d8>
 800d786:	7cbb      	ldrb	r3, [r7, #18]
 800d788:	b29a      	uxth	r2, r3
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	891b      	ldrh	r3, [r3, #8]
 800d78e:	429a      	cmp	r2, r3
 800d790:	f200 83aa 	bhi.w	800dee8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d794:	7cbb      	ldrb	r3, [r7, #18]
 800d796:	b29b      	uxth	r3, r3
 800d798:	3b14      	subs	r3, #20
 800d79a:	b29a      	uxth	r2, r3
 800d79c:	4b81      	ldr	r3, [pc, #516]	@ (800d9a4 <tcp_input+0x294>)
 800d79e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d7a0:	4b81      	ldr	r3, [pc, #516]	@ (800d9a8 <tcp_input+0x298>)
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	895a      	ldrh	r2, [r3, #10]
 800d7aa:	7cbb      	ldrb	r3, [r7, #18]
 800d7ac:	b29b      	uxth	r3, r3
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	d309      	bcc.n	800d7c6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d7b2:	4b7c      	ldr	r3, [pc, #496]	@ (800d9a4 <tcp_input+0x294>)
 800d7b4:	881a      	ldrh	r2, [r3, #0]
 800d7b6:	4b7d      	ldr	r3, [pc, #500]	@ (800d9ac <tcp_input+0x29c>)
 800d7b8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d7ba:	7cbb      	ldrb	r3, [r7, #18]
 800d7bc:	4619      	mov	r1, r3
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f7fe f8da 	bl	800b978 <pbuf_remove_header>
 800d7c4:	e04e      	b.n	800d864 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d105      	bne.n	800d7da <tcp_input+0xca>
 800d7ce:	4b70      	ldr	r3, [pc, #448]	@ (800d990 <tcp_input+0x280>)
 800d7d0:	22c2      	movs	r2, #194	@ 0xc2
 800d7d2:	4977      	ldr	r1, [pc, #476]	@ (800d9b0 <tcp_input+0x2a0>)
 800d7d4:	4870      	ldr	r0, [pc, #448]	@ (800d998 <tcp_input+0x288>)
 800d7d6:	f009 fc3f 	bl	8017058 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d7da:	2114      	movs	r1, #20
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	f7fe f8cb 	bl	800b978 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	895a      	ldrh	r2, [r3, #10]
 800d7e6:	4b71      	ldr	r3, [pc, #452]	@ (800d9ac <tcp_input+0x29c>)
 800d7e8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d7ea:	4b6e      	ldr	r3, [pc, #440]	@ (800d9a4 <tcp_input+0x294>)
 800d7ec:	881a      	ldrh	r2, [r3, #0]
 800d7ee:	4b6f      	ldr	r3, [pc, #444]	@ (800d9ac <tcp_input+0x29c>)
 800d7f0:	881b      	ldrh	r3, [r3, #0]
 800d7f2:	1ad3      	subs	r3, r2, r3
 800d7f4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d7f6:	4b6d      	ldr	r3, [pc, #436]	@ (800d9ac <tcp_input+0x29c>)
 800d7f8:	881b      	ldrh	r3, [r3, #0]
 800d7fa:	4619      	mov	r1, r3
 800d7fc:	6878      	ldr	r0, [r7, #4]
 800d7fe:	f7fe f8bb 	bl	800b978 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	895b      	ldrh	r3, [r3, #10]
 800d808:	8a3a      	ldrh	r2, [r7, #16]
 800d80a:	429a      	cmp	r2, r3
 800d80c:	f200 836e 	bhi.w	800deec <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	685b      	ldr	r3, [r3, #4]
 800d816:	4a64      	ldr	r2, [pc, #400]	@ (800d9a8 <tcp_input+0x298>)
 800d818:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	8a3a      	ldrh	r2, [r7, #16]
 800d820:	4611      	mov	r1, r2
 800d822:	4618      	mov	r0, r3
 800d824:	f7fe f8a8 	bl	800b978 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	891a      	ldrh	r2, [r3, #8]
 800d82c:	8a3b      	ldrh	r3, [r7, #16]
 800d82e:	1ad3      	subs	r3, r2, r3
 800d830:	b29a      	uxth	r2, r3
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	895b      	ldrh	r3, [r3, #10]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d005      	beq.n	800d84a <tcp_input+0x13a>
 800d83e:	4b54      	ldr	r3, [pc, #336]	@ (800d990 <tcp_input+0x280>)
 800d840:	22df      	movs	r2, #223	@ 0xdf
 800d842:	495c      	ldr	r1, [pc, #368]	@ (800d9b4 <tcp_input+0x2a4>)
 800d844:	4854      	ldr	r0, [pc, #336]	@ (800d998 <tcp_input+0x288>)
 800d846:	f009 fc07 	bl	8017058 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	891a      	ldrh	r2, [r3, #8]
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	891b      	ldrh	r3, [r3, #8]
 800d854:	429a      	cmp	r2, r3
 800d856:	d005      	beq.n	800d864 <tcp_input+0x154>
 800d858:	4b4d      	ldr	r3, [pc, #308]	@ (800d990 <tcp_input+0x280>)
 800d85a:	22e0      	movs	r2, #224	@ 0xe0
 800d85c:	4956      	ldr	r1, [pc, #344]	@ (800d9b8 <tcp_input+0x2a8>)
 800d85e:	484e      	ldr	r0, [pc, #312]	@ (800d998 <tcp_input+0x288>)
 800d860:	f009 fbfa 	bl	8017058 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d864:	4b4d      	ldr	r3, [pc, #308]	@ (800d99c <tcp_input+0x28c>)
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	881b      	ldrh	r3, [r3, #0]
 800d86a:	b29b      	uxth	r3, r3
 800d86c:	4a4b      	ldr	r2, [pc, #300]	@ (800d99c <tcp_input+0x28c>)
 800d86e:	6814      	ldr	r4, [r2, #0]
 800d870:	4618      	mov	r0, r3
 800d872:	f7fc fbb3 	bl	8009fdc <lwip_htons>
 800d876:	4603      	mov	r3, r0
 800d878:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d87a:	4b48      	ldr	r3, [pc, #288]	@ (800d99c <tcp_input+0x28c>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	885b      	ldrh	r3, [r3, #2]
 800d880:	b29b      	uxth	r3, r3
 800d882:	4a46      	ldr	r2, [pc, #280]	@ (800d99c <tcp_input+0x28c>)
 800d884:	6814      	ldr	r4, [r2, #0]
 800d886:	4618      	mov	r0, r3
 800d888:	f7fc fba8 	bl	8009fdc <lwip_htons>
 800d88c:	4603      	mov	r3, r0
 800d88e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d890:	4b42      	ldr	r3, [pc, #264]	@ (800d99c <tcp_input+0x28c>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	685b      	ldr	r3, [r3, #4]
 800d896:	4a41      	ldr	r2, [pc, #260]	@ (800d99c <tcp_input+0x28c>)
 800d898:	6814      	ldr	r4, [r2, #0]
 800d89a:	4618      	mov	r0, r3
 800d89c:	f7fc fbb3 	bl	800a006 <lwip_htonl>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	6063      	str	r3, [r4, #4]
 800d8a4:	6863      	ldr	r3, [r4, #4]
 800d8a6:	4a45      	ldr	r2, [pc, #276]	@ (800d9bc <tcp_input+0x2ac>)
 800d8a8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d8aa:	4b3c      	ldr	r3, [pc, #240]	@ (800d99c <tcp_input+0x28c>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	689b      	ldr	r3, [r3, #8]
 800d8b0:	4a3a      	ldr	r2, [pc, #232]	@ (800d99c <tcp_input+0x28c>)
 800d8b2:	6814      	ldr	r4, [r2, #0]
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f7fc fba6 	bl	800a006 <lwip_htonl>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	60a3      	str	r3, [r4, #8]
 800d8be:	68a3      	ldr	r3, [r4, #8]
 800d8c0:	4a3f      	ldr	r2, [pc, #252]	@ (800d9c0 <tcp_input+0x2b0>)
 800d8c2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d8c4:	4b35      	ldr	r3, [pc, #212]	@ (800d99c <tcp_input+0x28c>)
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	89db      	ldrh	r3, [r3, #14]
 800d8ca:	b29b      	uxth	r3, r3
 800d8cc:	4a33      	ldr	r2, [pc, #204]	@ (800d99c <tcp_input+0x28c>)
 800d8ce:	6814      	ldr	r4, [r2, #0]
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f7fc fb83 	bl	8009fdc <lwip_htons>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d8da:	4b30      	ldr	r3, [pc, #192]	@ (800d99c <tcp_input+0x28c>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	899b      	ldrh	r3, [r3, #12]
 800d8e0:	b29b      	uxth	r3, r3
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7fc fb7a 	bl	8009fdc <lwip_htons>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	b2db      	uxtb	r3, r3
 800d8ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d8f0:	b2da      	uxtb	r2, r3
 800d8f2:	4b34      	ldr	r3, [pc, #208]	@ (800d9c4 <tcp_input+0x2b4>)
 800d8f4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	891a      	ldrh	r2, [r3, #8]
 800d8fa:	4b33      	ldr	r3, [pc, #204]	@ (800d9c8 <tcp_input+0x2b8>)
 800d8fc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d8fe:	4b31      	ldr	r3, [pc, #196]	@ (800d9c4 <tcp_input+0x2b4>)
 800d900:	781b      	ldrb	r3, [r3, #0]
 800d902:	f003 0303 	and.w	r3, r3, #3
 800d906:	2b00      	cmp	r3, #0
 800d908:	d00c      	beq.n	800d924 <tcp_input+0x214>
    tcplen++;
 800d90a:	4b2f      	ldr	r3, [pc, #188]	@ (800d9c8 <tcp_input+0x2b8>)
 800d90c:	881b      	ldrh	r3, [r3, #0]
 800d90e:	3301      	adds	r3, #1
 800d910:	b29a      	uxth	r2, r3
 800d912:	4b2d      	ldr	r3, [pc, #180]	@ (800d9c8 <tcp_input+0x2b8>)
 800d914:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	891a      	ldrh	r2, [r3, #8]
 800d91a:	4b2b      	ldr	r3, [pc, #172]	@ (800d9c8 <tcp_input+0x2b8>)
 800d91c:	881b      	ldrh	r3, [r3, #0]
 800d91e:	429a      	cmp	r2, r3
 800d920:	f200 82e6 	bhi.w	800def0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d924:	2300      	movs	r3, #0
 800d926:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d928:	4b28      	ldr	r3, [pc, #160]	@ (800d9cc <tcp_input+0x2bc>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	61fb      	str	r3, [r7, #28]
 800d92e:	e09d      	b.n	800da6c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d930:	69fb      	ldr	r3, [r7, #28]
 800d932:	7d1b      	ldrb	r3, [r3, #20]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d105      	bne.n	800d944 <tcp_input+0x234>
 800d938:	4b15      	ldr	r3, [pc, #84]	@ (800d990 <tcp_input+0x280>)
 800d93a:	22fb      	movs	r2, #251	@ 0xfb
 800d93c:	4924      	ldr	r1, [pc, #144]	@ (800d9d0 <tcp_input+0x2c0>)
 800d93e:	4816      	ldr	r0, [pc, #88]	@ (800d998 <tcp_input+0x288>)
 800d940:	f009 fb8a 	bl	8017058 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d944:	69fb      	ldr	r3, [r7, #28]
 800d946:	7d1b      	ldrb	r3, [r3, #20]
 800d948:	2b0a      	cmp	r3, #10
 800d94a:	d105      	bne.n	800d958 <tcp_input+0x248>
 800d94c:	4b10      	ldr	r3, [pc, #64]	@ (800d990 <tcp_input+0x280>)
 800d94e:	22fc      	movs	r2, #252	@ 0xfc
 800d950:	4920      	ldr	r1, [pc, #128]	@ (800d9d4 <tcp_input+0x2c4>)
 800d952:	4811      	ldr	r0, [pc, #68]	@ (800d998 <tcp_input+0x288>)
 800d954:	f009 fb80 	bl	8017058 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d958:	69fb      	ldr	r3, [r7, #28]
 800d95a:	7d1b      	ldrb	r3, [r3, #20]
 800d95c:	2b01      	cmp	r3, #1
 800d95e:	d105      	bne.n	800d96c <tcp_input+0x25c>
 800d960:	4b0b      	ldr	r3, [pc, #44]	@ (800d990 <tcp_input+0x280>)
 800d962:	22fd      	movs	r2, #253	@ 0xfd
 800d964:	491c      	ldr	r1, [pc, #112]	@ (800d9d8 <tcp_input+0x2c8>)
 800d966:	480c      	ldr	r0, [pc, #48]	@ (800d998 <tcp_input+0x288>)
 800d968:	f009 fb76 	bl	8017058 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d96c:	69fb      	ldr	r3, [r7, #28]
 800d96e:	7a1b      	ldrb	r3, [r3, #8]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d033      	beq.n	800d9dc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d974:	69fb      	ldr	r3, [r7, #28]
 800d976:	7a1a      	ldrb	r2, [r3, #8]
 800d978:	4b09      	ldr	r3, [pc, #36]	@ (800d9a0 <tcp_input+0x290>)
 800d97a:	685b      	ldr	r3, [r3, #4]
 800d97c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d980:	3301      	adds	r3, #1
 800d982:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d984:	429a      	cmp	r2, r3
 800d986:	d029      	beq.n	800d9dc <tcp_input+0x2cc>
      prev = pcb;
 800d988:	69fb      	ldr	r3, [r7, #28]
 800d98a:	61bb      	str	r3, [r7, #24]
      continue;
 800d98c:	e06b      	b.n	800da66 <tcp_input+0x356>
 800d98e:	bf00      	nop
 800d990:	080198b0 	.word	0x080198b0
 800d994:	080198e4 	.word	0x080198e4
 800d998:	080198fc 	.word	0x080198fc
 800d99c:	2000cae8 	.word	0x2000cae8
 800d9a0:	20009290 	.word	0x20009290
 800d9a4:	2000caec 	.word	0x2000caec
 800d9a8:	2000caf0 	.word	0x2000caf0
 800d9ac:	2000caee 	.word	0x2000caee
 800d9b0:	08019924 	.word	0x08019924
 800d9b4:	08019934 	.word	0x08019934
 800d9b8:	08019940 	.word	0x08019940
 800d9bc:	2000caf8 	.word	0x2000caf8
 800d9c0:	2000cafc 	.word	0x2000cafc
 800d9c4:	2000cb04 	.word	0x2000cb04
 800d9c8:	2000cb02 	.word	0x2000cb02
 800d9cc:	2000cacc 	.word	0x2000cacc
 800d9d0:	08019960 	.word	0x08019960
 800d9d4:	08019988 	.word	0x08019988
 800d9d8:	080199b4 	.word	0x080199b4
    }

    if (pcb->remote_port == tcphdr->src &&
 800d9dc:	69fb      	ldr	r3, [r7, #28]
 800d9de:	8b1a      	ldrh	r2, [r3, #24]
 800d9e0:	4b72      	ldr	r3, [pc, #456]	@ (800dbac <tcp_input+0x49c>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	881b      	ldrh	r3, [r3, #0]
 800d9e6:	b29b      	uxth	r3, r3
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	d13a      	bne.n	800da62 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800d9ec:	69fb      	ldr	r3, [r7, #28]
 800d9ee:	8ada      	ldrh	r2, [r3, #22]
 800d9f0:	4b6e      	ldr	r3, [pc, #440]	@ (800dbac <tcp_input+0x49c>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	885b      	ldrh	r3, [r3, #2]
 800d9f6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	d132      	bne.n	800da62 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d9fc:	69fb      	ldr	r3, [r7, #28]
 800d9fe:	685a      	ldr	r2, [r3, #4]
 800da00:	4b6b      	ldr	r3, [pc, #428]	@ (800dbb0 <tcp_input+0x4a0>)
 800da02:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800da04:	429a      	cmp	r2, r3
 800da06:	d12c      	bne.n	800da62 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800da08:	69fb      	ldr	r3, [r7, #28]
 800da0a:	681a      	ldr	r2, [r3, #0]
 800da0c:	4b68      	ldr	r3, [pc, #416]	@ (800dbb0 <tcp_input+0x4a0>)
 800da0e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800da10:	429a      	cmp	r2, r3
 800da12:	d126      	bne.n	800da62 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800da14:	69fb      	ldr	r3, [r7, #28]
 800da16:	68db      	ldr	r3, [r3, #12]
 800da18:	69fa      	ldr	r2, [r7, #28]
 800da1a:	429a      	cmp	r2, r3
 800da1c:	d106      	bne.n	800da2c <tcp_input+0x31c>
 800da1e:	4b65      	ldr	r3, [pc, #404]	@ (800dbb4 <tcp_input+0x4a4>)
 800da20:	f240 120d 	movw	r2, #269	@ 0x10d
 800da24:	4964      	ldr	r1, [pc, #400]	@ (800dbb8 <tcp_input+0x4a8>)
 800da26:	4865      	ldr	r0, [pc, #404]	@ (800dbbc <tcp_input+0x4ac>)
 800da28:	f009 fb16 	bl	8017058 <iprintf>
      if (prev != NULL) {
 800da2c:	69bb      	ldr	r3, [r7, #24]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d00a      	beq.n	800da48 <tcp_input+0x338>
        prev->next = pcb->next;
 800da32:	69fb      	ldr	r3, [r7, #28]
 800da34:	68da      	ldr	r2, [r3, #12]
 800da36:	69bb      	ldr	r3, [r7, #24]
 800da38:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800da3a:	4b61      	ldr	r3, [pc, #388]	@ (800dbc0 <tcp_input+0x4b0>)
 800da3c:	681a      	ldr	r2, [r3, #0]
 800da3e:	69fb      	ldr	r3, [r7, #28]
 800da40:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800da42:	4a5f      	ldr	r2, [pc, #380]	@ (800dbc0 <tcp_input+0x4b0>)
 800da44:	69fb      	ldr	r3, [r7, #28]
 800da46:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800da48:	69fb      	ldr	r3, [r7, #28]
 800da4a:	68db      	ldr	r3, [r3, #12]
 800da4c:	69fa      	ldr	r2, [r7, #28]
 800da4e:	429a      	cmp	r2, r3
 800da50:	d111      	bne.n	800da76 <tcp_input+0x366>
 800da52:	4b58      	ldr	r3, [pc, #352]	@ (800dbb4 <tcp_input+0x4a4>)
 800da54:	f240 1215 	movw	r2, #277	@ 0x115
 800da58:	495a      	ldr	r1, [pc, #360]	@ (800dbc4 <tcp_input+0x4b4>)
 800da5a:	4858      	ldr	r0, [pc, #352]	@ (800dbbc <tcp_input+0x4ac>)
 800da5c:	f009 fafc 	bl	8017058 <iprintf>
      break;
 800da60:	e009      	b.n	800da76 <tcp_input+0x366>
    }
    prev = pcb;
 800da62:	69fb      	ldr	r3, [r7, #28]
 800da64:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800da66:	69fb      	ldr	r3, [r7, #28]
 800da68:	68db      	ldr	r3, [r3, #12]
 800da6a:	61fb      	str	r3, [r7, #28]
 800da6c:	69fb      	ldr	r3, [r7, #28]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	f47f af5e 	bne.w	800d930 <tcp_input+0x220>
 800da74:	e000      	b.n	800da78 <tcp_input+0x368>
      break;
 800da76:	bf00      	nop
  }

  if (pcb == NULL) {
 800da78:	69fb      	ldr	r3, [r7, #28]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	f040 80aa 	bne.w	800dbd4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800da80:	4b51      	ldr	r3, [pc, #324]	@ (800dbc8 <tcp_input+0x4b8>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	61fb      	str	r3, [r7, #28]
 800da86:	e03f      	b.n	800db08 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800da88:	69fb      	ldr	r3, [r7, #28]
 800da8a:	7d1b      	ldrb	r3, [r3, #20]
 800da8c:	2b0a      	cmp	r3, #10
 800da8e:	d006      	beq.n	800da9e <tcp_input+0x38e>
 800da90:	4b48      	ldr	r3, [pc, #288]	@ (800dbb4 <tcp_input+0x4a4>)
 800da92:	f240 121f 	movw	r2, #287	@ 0x11f
 800da96:	494d      	ldr	r1, [pc, #308]	@ (800dbcc <tcp_input+0x4bc>)
 800da98:	4848      	ldr	r0, [pc, #288]	@ (800dbbc <tcp_input+0x4ac>)
 800da9a:	f009 fadd 	bl	8017058 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800da9e:	69fb      	ldr	r3, [r7, #28]
 800daa0:	7a1b      	ldrb	r3, [r3, #8]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d009      	beq.n	800daba <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800daa6:	69fb      	ldr	r3, [r7, #28]
 800daa8:	7a1a      	ldrb	r2, [r3, #8]
 800daaa:	4b41      	ldr	r3, [pc, #260]	@ (800dbb0 <tcp_input+0x4a0>)
 800daac:	685b      	ldr	r3, [r3, #4]
 800daae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dab2:	3301      	adds	r3, #1
 800dab4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dab6:	429a      	cmp	r2, r3
 800dab8:	d122      	bne.n	800db00 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800daba:	69fb      	ldr	r3, [r7, #28]
 800dabc:	8b1a      	ldrh	r2, [r3, #24]
 800dabe:	4b3b      	ldr	r3, [pc, #236]	@ (800dbac <tcp_input+0x49c>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	881b      	ldrh	r3, [r3, #0]
 800dac4:	b29b      	uxth	r3, r3
 800dac6:	429a      	cmp	r2, r3
 800dac8:	d11b      	bne.n	800db02 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800daca:	69fb      	ldr	r3, [r7, #28]
 800dacc:	8ada      	ldrh	r2, [r3, #22]
 800dace:	4b37      	ldr	r3, [pc, #220]	@ (800dbac <tcp_input+0x49c>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	885b      	ldrh	r3, [r3, #2]
 800dad4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800dad6:	429a      	cmp	r2, r3
 800dad8:	d113      	bne.n	800db02 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dada:	69fb      	ldr	r3, [r7, #28]
 800dadc:	685a      	ldr	r2, [r3, #4]
 800dade:	4b34      	ldr	r3, [pc, #208]	@ (800dbb0 <tcp_input+0x4a0>)
 800dae0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d10d      	bne.n	800db02 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dae6:	69fb      	ldr	r3, [r7, #28]
 800dae8:	681a      	ldr	r2, [r3, #0]
 800daea:	4b31      	ldr	r3, [pc, #196]	@ (800dbb0 <tcp_input+0x4a0>)
 800daec:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800daee:	429a      	cmp	r2, r3
 800daf0:	d107      	bne.n	800db02 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800daf2:	69f8      	ldr	r0, [r7, #28]
 800daf4:	f000 fb56 	bl	800e1a4 <tcp_timewait_input>
        }
        pbuf_free(p);
 800daf8:	6878      	ldr	r0, [r7, #4]
 800dafa:	f7fd ffc3 	bl	800ba84 <pbuf_free>
        return;
 800dafe:	e1fd      	b.n	800defc <tcp_input+0x7ec>
        continue;
 800db00:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800db02:	69fb      	ldr	r3, [r7, #28]
 800db04:	68db      	ldr	r3, [r3, #12]
 800db06:	61fb      	str	r3, [r7, #28]
 800db08:	69fb      	ldr	r3, [r7, #28]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d1bc      	bne.n	800da88 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800db0e:	2300      	movs	r3, #0
 800db10:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800db12:	4b2f      	ldr	r3, [pc, #188]	@ (800dbd0 <tcp_input+0x4c0>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	617b      	str	r3, [r7, #20]
 800db18:	e02a      	b.n	800db70 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	7a1b      	ldrb	r3, [r3, #8]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d00c      	beq.n	800db3c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800db22:	697b      	ldr	r3, [r7, #20]
 800db24:	7a1a      	ldrb	r2, [r3, #8]
 800db26:	4b22      	ldr	r3, [pc, #136]	@ (800dbb0 <tcp_input+0x4a0>)
 800db28:	685b      	ldr	r3, [r3, #4]
 800db2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800db2e:	3301      	adds	r3, #1
 800db30:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800db32:	429a      	cmp	r2, r3
 800db34:	d002      	beq.n	800db3c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	61bb      	str	r3, [r7, #24]
        continue;
 800db3a:	e016      	b.n	800db6a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800db3c:	697b      	ldr	r3, [r7, #20]
 800db3e:	8ada      	ldrh	r2, [r3, #22]
 800db40:	4b1a      	ldr	r3, [pc, #104]	@ (800dbac <tcp_input+0x49c>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	885b      	ldrh	r3, [r3, #2]
 800db46:	b29b      	uxth	r3, r3
 800db48:	429a      	cmp	r2, r3
 800db4a:	d10c      	bne.n	800db66 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	681a      	ldr	r2, [r3, #0]
 800db50:	4b17      	ldr	r3, [pc, #92]	@ (800dbb0 <tcp_input+0x4a0>)
 800db52:	695b      	ldr	r3, [r3, #20]
 800db54:	429a      	cmp	r2, r3
 800db56:	d00f      	beq.n	800db78 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800db58:	697b      	ldr	r3, [r7, #20]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d00d      	beq.n	800db7a <tcp_input+0x46a>
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d009      	beq.n	800db7a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800db66:	697b      	ldr	r3, [r7, #20]
 800db68:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800db6a:	697b      	ldr	r3, [r7, #20]
 800db6c:	68db      	ldr	r3, [r3, #12]
 800db6e:	617b      	str	r3, [r7, #20]
 800db70:	697b      	ldr	r3, [r7, #20]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d1d1      	bne.n	800db1a <tcp_input+0x40a>
 800db76:	e000      	b.n	800db7a <tcp_input+0x46a>
            break;
 800db78:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d029      	beq.n	800dbd4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800db80:	69bb      	ldr	r3, [r7, #24]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d00a      	beq.n	800db9c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800db86:	697b      	ldr	r3, [r7, #20]
 800db88:	68da      	ldr	r2, [r3, #12]
 800db8a:	69bb      	ldr	r3, [r7, #24]
 800db8c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800db8e:	4b10      	ldr	r3, [pc, #64]	@ (800dbd0 <tcp_input+0x4c0>)
 800db90:	681a      	ldr	r2, [r3, #0]
 800db92:	697b      	ldr	r3, [r7, #20]
 800db94:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800db96:	4a0e      	ldr	r2, [pc, #56]	@ (800dbd0 <tcp_input+0x4c0>)
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800db9c:	6978      	ldr	r0, [r7, #20]
 800db9e:	f000 fa03 	bl	800dfa8 <tcp_listen_input>
      }
      pbuf_free(p);
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f7fd ff6e 	bl	800ba84 <pbuf_free>
      return;
 800dba8:	e1a8      	b.n	800defc <tcp_input+0x7ec>
 800dbaa:	bf00      	nop
 800dbac:	2000cae8 	.word	0x2000cae8
 800dbb0:	20009290 	.word	0x20009290
 800dbb4:	080198b0 	.word	0x080198b0
 800dbb8:	080199dc 	.word	0x080199dc
 800dbbc:	080198fc 	.word	0x080198fc
 800dbc0:	2000cacc 	.word	0x2000cacc
 800dbc4:	08019a08 	.word	0x08019a08
 800dbc8:	2000cad0 	.word	0x2000cad0
 800dbcc:	08019a34 	.word	0x08019a34
 800dbd0:	2000cac8 	.word	0x2000cac8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800dbd4:	69fb      	ldr	r3, [r7, #28]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	f000 8158 	beq.w	800de8c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800dbdc:	4b95      	ldr	r3, [pc, #596]	@ (800de34 <tcp_input+0x724>)
 800dbde:	2200      	movs	r2, #0
 800dbe0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	891a      	ldrh	r2, [r3, #8]
 800dbe6:	4b93      	ldr	r3, [pc, #588]	@ (800de34 <tcp_input+0x724>)
 800dbe8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800dbea:	4a92      	ldr	r2, [pc, #584]	@ (800de34 <tcp_input+0x724>)
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800dbf0:	4b91      	ldr	r3, [pc, #580]	@ (800de38 <tcp_input+0x728>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	4a8f      	ldr	r2, [pc, #572]	@ (800de34 <tcp_input+0x724>)
 800dbf6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800dbf8:	4b90      	ldr	r3, [pc, #576]	@ (800de3c <tcp_input+0x72c>)
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800dbfe:	4b90      	ldr	r3, [pc, #576]	@ (800de40 <tcp_input+0x730>)
 800dc00:	2200      	movs	r2, #0
 800dc02:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800dc04:	4b8f      	ldr	r3, [pc, #572]	@ (800de44 <tcp_input+0x734>)
 800dc06:	2200      	movs	r2, #0
 800dc08:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800dc0a:	4b8f      	ldr	r3, [pc, #572]	@ (800de48 <tcp_input+0x738>)
 800dc0c:	781b      	ldrb	r3, [r3, #0]
 800dc0e:	f003 0308 	and.w	r3, r3, #8
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d006      	beq.n	800dc24 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	7b5b      	ldrb	r3, [r3, #13]
 800dc1a:	f043 0301 	orr.w	r3, r3, #1
 800dc1e:	b2da      	uxtb	r2, r3
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800dc24:	69fb      	ldr	r3, [r7, #28]
 800dc26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d017      	beq.n	800dc5c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800dc2c:	69f8      	ldr	r0, [r7, #28]
 800dc2e:	f7ff f929 	bl	800ce84 <tcp_process_refused_data>
 800dc32:	4603      	mov	r3, r0
 800dc34:	f113 0f0d 	cmn.w	r3, #13
 800dc38:	d007      	beq.n	800dc4a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800dc3a:	69fb      	ldr	r3, [r7, #28]
 800dc3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d00c      	beq.n	800dc5c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800dc42:	4b82      	ldr	r3, [pc, #520]	@ (800de4c <tcp_input+0x73c>)
 800dc44:	881b      	ldrh	r3, [r3, #0]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d008      	beq.n	800dc5c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800dc4a:	69fb      	ldr	r3, [r7, #28]
 800dc4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	f040 80e3 	bne.w	800de1a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800dc54:	69f8      	ldr	r0, [r7, #28]
 800dc56:	f003 f9a7 	bl	8010fa8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800dc5a:	e0de      	b.n	800de1a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800dc5c:	4a7c      	ldr	r2, [pc, #496]	@ (800de50 <tcp_input+0x740>)
 800dc5e:	69fb      	ldr	r3, [r7, #28]
 800dc60:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800dc62:	69f8      	ldr	r0, [r7, #28]
 800dc64:	f000 fb18 	bl	800e298 <tcp_process>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800dc6c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dc70:	f113 0f0d 	cmn.w	r3, #13
 800dc74:	f000 80d3 	beq.w	800de1e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800dc78:	4b71      	ldr	r3, [pc, #452]	@ (800de40 <tcp_input+0x730>)
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	f003 0308 	and.w	r3, r3, #8
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d015      	beq.n	800dcb0 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800dc84:	69fb      	ldr	r3, [r7, #28]
 800dc86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d008      	beq.n	800dca0 <tcp_input+0x590>
 800dc8e:	69fb      	ldr	r3, [r7, #28]
 800dc90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dc94:	69fa      	ldr	r2, [r7, #28]
 800dc96:	6912      	ldr	r2, [r2, #16]
 800dc98:	f06f 010d 	mvn.w	r1, #13
 800dc9c:	4610      	mov	r0, r2
 800dc9e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800dca0:	69f9      	ldr	r1, [r7, #28]
 800dca2:	486c      	ldr	r0, [pc, #432]	@ (800de54 <tcp_input+0x744>)
 800dca4:	f7ff fbbc 	bl	800d420 <tcp_pcb_remove>
        tcp_free(pcb);
 800dca8:	69f8      	ldr	r0, [r7, #28]
 800dcaa:	f7fe f9a7 	bl	800bffc <tcp_free>
 800dcae:	e0da      	b.n	800de66 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800dcb4:	4b63      	ldr	r3, [pc, #396]	@ (800de44 <tcp_input+0x734>)
 800dcb6:	881b      	ldrh	r3, [r3, #0]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d01d      	beq.n	800dcf8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800dcbc:	4b61      	ldr	r3, [pc, #388]	@ (800de44 <tcp_input+0x734>)
 800dcbe:	881b      	ldrh	r3, [r3, #0]
 800dcc0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800dcc2:	69fb      	ldr	r3, [r7, #28]
 800dcc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d00a      	beq.n	800dce2 <tcp_input+0x5d2>
 800dccc:	69fb      	ldr	r3, [r7, #28]
 800dcce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dcd2:	69fa      	ldr	r2, [r7, #28]
 800dcd4:	6910      	ldr	r0, [r2, #16]
 800dcd6:	89fa      	ldrh	r2, [r7, #14]
 800dcd8:	69f9      	ldr	r1, [r7, #28]
 800dcda:	4798      	blx	r3
 800dcdc:	4603      	mov	r3, r0
 800dcde:	74fb      	strb	r3, [r7, #19]
 800dce0:	e001      	b.n	800dce6 <tcp_input+0x5d6>
 800dce2:	2300      	movs	r3, #0
 800dce4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dce6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dcea:	f113 0f0d 	cmn.w	r3, #13
 800dcee:	f000 8098 	beq.w	800de22 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800dcf2:	4b54      	ldr	r3, [pc, #336]	@ (800de44 <tcp_input+0x734>)
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800dcf8:	69f8      	ldr	r0, [r7, #28]
 800dcfa:	f000 f915 	bl	800df28 <tcp_input_delayed_close>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	f040 8090 	bne.w	800de26 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800dd06:	4b4d      	ldr	r3, [pc, #308]	@ (800de3c <tcp_input+0x72c>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d041      	beq.n	800dd92 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800dd0e:	69fb      	ldr	r3, [r7, #28]
 800dd10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d006      	beq.n	800dd24 <tcp_input+0x614>
 800dd16:	4b50      	ldr	r3, [pc, #320]	@ (800de58 <tcp_input+0x748>)
 800dd18:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800dd1c:	494f      	ldr	r1, [pc, #316]	@ (800de5c <tcp_input+0x74c>)
 800dd1e:	4850      	ldr	r0, [pc, #320]	@ (800de60 <tcp_input+0x750>)
 800dd20:	f009 f99a 	bl	8017058 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800dd24:	69fb      	ldr	r3, [r7, #28]
 800dd26:	8b5b      	ldrh	r3, [r3, #26]
 800dd28:	f003 0310 	and.w	r3, r3, #16
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d008      	beq.n	800dd42 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800dd30:	4b42      	ldr	r3, [pc, #264]	@ (800de3c <tcp_input+0x72c>)
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	4618      	mov	r0, r3
 800dd36:	f7fd fea5 	bl	800ba84 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800dd3a:	69f8      	ldr	r0, [r7, #28]
 800dd3c:	f7fe fc46 	bl	800c5cc <tcp_abort>
            goto aborted;
 800dd40:	e091      	b.n	800de66 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800dd42:	69fb      	ldr	r3, [r7, #28]
 800dd44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d00c      	beq.n	800dd66 <tcp_input+0x656>
 800dd4c:	69fb      	ldr	r3, [r7, #28]
 800dd4e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800dd52:	69fb      	ldr	r3, [r7, #28]
 800dd54:	6918      	ldr	r0, [r3, #16]
 800dd56:	4b39      	ldr	r3, [pc, #228]	@ (800de3c <tcp_input+0x72c>)
 800dd58:	681a      	ldr	r2, [r3, #0]
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	69f9      	ldr	r1, [r7, #28]
 800dd5e:	47a0      	blx	r4
 800dd60:	4603      	mov	r3, r0
 800dd62:	74fb      	strb	r3, [r7, #19]
 800dd64:	e008      	b.n	800dd78 <tcp_input+0x668>
 800dd66:	4b35      	ldr	r3, [pc, #212]	@ (800de3c <tcp_input+0x72c>)
 800dd68:	681a      	ldr	r2, [r3, #0]
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	69f9      	ldr	r1, [r7, #28]
 800dd6e:	2000      	movs	r0, #0
 800dd70:	f7ff f95e 	bl	800d030 <tcp_recv_null>
 800dd74:	4603      	mov	r3, r0
 800dd76:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800dd78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dd7c:	f113 0f0d 	cmn.w	r3, #13
 800dd80:	d053      	beq.n	800de2a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800dd82:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d003      	beq.n	800dd92 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800dd8a:	4b2c      	ldr	r3, [pc, #176]	@ (800de3c <tcp_input+0x72c>)
 800dd8c:	681a      	ldr	r2, [r3, #0]
 800dd8e:	69fb      	ldr	r3, [r7, #28]
 800dd90:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800dd92:	4b2b      	ldr	r3, [pc, #172]	@ (800de40 <tcp_input+0x730>)
 800dd94:	781b      	ldrb	r3, [r3, #0]
 800dd96:	f003 0320 	and.w	r3, r3, #32
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d030      	beq.n	800de00 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800dd9e:	69fb      	ldr	r3, [r7, #28]
 800dda0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d009      	beq.n	800ddba <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800dda6:	69fb      	ldr	r3, [r7, #28]
 800dda8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ddaa:	7b5a      	ldrb	r2, [r3, #13]
 800ddac:	69fb      	ldr	r3, [r7, #28]
 800ddae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ddb0:	f042 0220 	orr.w	r2, r2, #32
 800ddb4:	b2d2      	uxtb	r2, r2
 800ddb6:	735a      	strb	r2, [r3, #13]
 800ddb8:	e022      	b.n	800de00 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ddba:	69fb      	ldr	r3, [r7, #28]
 800ddbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ddbe:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800ddc2:	d005      	beq.n	800ddd0 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800ddc4:	69fb      	ldr	r3, [r7, #28]
 800ddc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ddc8:	3301      	adds	r3, #1
 800ddca:	b29a      	uxth	r2, r3
 800ddcc:	69fb      	ldr	r3, [r7, #28]
 800ddce:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ddd0:	69fb      	ldr	r3, [r7, #28]
 800ddd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d00b      	beq.n	800ddf2 <tcp_input+0x6e2>
 800ddda:	69fb      	ldr	r3, [r7, #28]
 800dddc:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800dde0:	69fb      	ldr	r3, [r7, #28]
 800dde2:	6918      	ldr	r0, [r3, #16]
 800dde4:	2300      	movs	r3, #0
 800dde6:	2200      	movs	r2, #0
 800dde8:	69f9      	ldr	r1, [r7, #28]
 800ddea:	47a0      	blx	r4
 800ddec:	4603      	mov	r3, r0
 800ddee:	74fb      	strb	r3, [r7, #19]
 800ddf0:	e001      	b.n	800ddf6 <tcp_input+0x6e6>
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ddf6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ddfa:	f113 0f0d 	cmn.w	r3, #13
 800ddfe:	d016      	beq.n	800de2e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800de00:	4b13      	ldr	r3, [pc, #76]	@ (800de50 <tcp_input+0x740>)
 800de02:	2200      	movs	r2, #0
 800de04:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800de06:	69f8      	ldr	r0, [r7, #28]
 800de08:	f000 f88e 	bl	800df28 <tcp_input_delayed_close>
 800de0c:	4603      	mov	r3, r0
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d128      	bne.n	800de64 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800de12:	69f8      	ldr	r0, [r7, #28]
 800de14:	f002 fac2 	bl	801039c <tcp_output>
 800de18:	e025      	b.n	800de66 <tcp_input+0x756>
        goto aborted;
 800de1a:	bf00      	nop
 800de1c:	e023      	b.n	800de66 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800de1e:	bf00      	nop
 800de20:	e021      	b.n	800de66 <tcp_input+0x756>
              goto aborted;
 800de22:	bf00      	nop
 800de24:	e01f      	b.n	800de66 <tcp_input+0x756>
          goto aborted;
 800de26:	bf00      	nop
 800de28:	e01d      	b.n	800de66 <tcp_input+0x756>
            goto aborted;
 800de2a:	bf00      	nop
 800de2c:	e01b      	b.n	800de66 <tcp_input+0x756>
              goto aborted;
 800de2e:	bf00      	nop
 800de30:	e019      	b.n	800de66 <tcp_input+0x756>
 800de32:	bf00      	nop
 800de34:	2000cad8 	.word	0x2000cad8
 800de38:	2000cae8 	.word	0x2000cae8
 800de3c:	2000cb08 	.word	0x2000cb08
 800de40:	2000cb05 	.word	0x2000cb05
 800de44:	2000cb00 	.word	0x2000cb00
 800de48:	2000cb04 	.word	0x2000cb04
 800de4c:	2000cb02 	.word	0x2000cb02
 800de50:	2000cb0c 	.word	0x2000cb0c
 800de54:	2000cacc 	.word	0x2000cacc
 800de58:	080198b0 	.word	0x080198b0
 800de5c:	08019a64 	.word	0x08019a64
 800de60:	080198fc 	.word	0x080198fc
          goto aborted;
 800de64:	bf00      	nop
    tcp_input_pcb = NULL;
 800de66:	4b27      	ldr	r3, [pc, #156]	@ (800df04 <tcp_input+0x7f4>)
 800de68:	2200      	movs	r2, #0
 800de6a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800de6c:	4b26      	ldr	r3, [pc, #152]	@ (800df08 <tcp_input+0x7f8>)
 800de6e:	2200      	movs	r2, #0
 800de70:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800de72:	4b26      	ldr	r3, [pc, #152]	@ (800df0c <tcp_input+0x7fc>)
 800de74:	685b      	ldr	r3, [r3, #4]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d03f      	beq.n	800defa <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800de7a:	4b24      	ldr	r3, [pc, #144]	@ (800df0c <tcp_input+0x7fc>)
 800de7c:	685b      	ldr	r3, [r3, #4]
 800de7e:	4618      	mov	r0, r3
 800de80:	f7fd fe00 	bl	800ba84 <pbuf_free>
      inseg.p = NULL;
 800de84:	4b21      	ldr	r3, [pc, #132]	@ (800df0c <tcp_input+0x7fc>)
 800de86:	2200      	movs	r2, #0
 800de88:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800de8a:	e036      	b.n	800defa <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800de8c:	4b20      	ldr	r3, [pc, #128]	@ (800df10 <tcp_input+0x800>)
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	899b      	ldrh	r3, [r3, #12]
 800de92:	b29b      	uxth	r3, r3
 800de94:	4618      	mov	r0, r3
 800de96:	f7fc f8a1 	bl	8009fdc <lwip_htons>
 800de9a:	4603      	mov	r3, r0
 800de9c:	b2db      	uxtb	r3, r3
 800de9e:	f003 0304 	and.w	r3, r3, #4
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d118      	bne.n	800ded8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dea6:	4b1b      	ldr	r3, [pc, #108]	@ (800df14 <tcp_input+0x804>)
 800dea8:	6819      	ldr	r1, [r3, #0]
 800deaa:	4b1b      	ldr	r3, [pc, #108]	@ (800df18 <tcp_input+0x808>)
 800deac:	881b      	ldrh	r3, [r3, #0]
 800deae:	461a      	mov	r2, r3
 800deb0:	4b1a      	ldr	r3, [pc, #104]	@ (800df1c <tcp_input+0x80c>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800deb6:	4b16      	ldr	r3, [pc, #88]	@ (800df10 <tcp_input+0x800>)
 800deb8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800deba:	885b      	ldrh	r3, [r3, #2]
 800debc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800debe:	4a14      	ldr	r2, [pc, #80]	@ (800df10 <tcp_input+0x800>)
 800dec0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dec2:	8812      	ldrh	r2, [r2, #0]
 800dec4:	b292      	uxth	r2, r2
 800dec6:	9202      	str	r2, [sp, #8]
 800dec8:	9301      	str	r3, [sp, #4]
 800deca:	4b15      	ldr	r3, [pc, #84]	@ (800df20 <tcp_input+0x810>)
 800decc:	9300      	str	r3, [sp, #0]
 800dece:	4b15      	ldr	r3, [pc, #84]	@ (800df24 <tcp_input+0x814>)
 800ded0:	4602      	mov	r2, r0
 800ded2:	2000      	movs	r0, #0
 800ded4:	f003 f816 	bl	8010f04 <tcp_rst>
    pbuf_free(p);
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f7fd fdd3 	bl	800ba84 <pbuf_free>
  return;
 800dede:	e00c      	b.n	800defa <tcp_input+0x7ea>
    goto dropped;
 800dee0:	bf00      	nop
 800dee2:	e006      	b.n	800def2 <tcp_input+0x7e2>
    goto dropped;
 800dee4:	bf00      	nop
 800dee6:	e004      	b.n	800def2 <tcp_input+0x7e2>
    goto dropped;
 800dee8:	bf00      	nop
 800deea:	e002      	b.n	800def2 <tcp_input+0x7e2>
      goto dropped;
 800deec:	bf00      	nop
 800deee:	e000      	b.n	800def2 <tcp_input+0x7e2>
      goto dropped;
 800def0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800def2:	6878      	ldr	r0, [r7, #4]
 800def4:	f7fd fdc6 	bl	800ba84 <pbuf_free>
 800def8:	e000      	b.n	800defc <tcp_input+0x7ec>
  return;
 800defa:	bf00      	nop
}
 800defc:	3724      	adds	r7, #36	@ 0x24
 800defe:	46bd      	mov	sp, r7
 800df00:	bd90      	pop	{r4, r7, pc}
 800df02:	bf00      	nop
 800df04:	2000cb0c 	.word	0x2000cb0c
 800df08:	2000cb08 	.word	0x2000cb08
 800df0c:	2000cad8 	.word	0x2000cad8
 800df10:	2000cae8 	.word	0x2000cae8
 800df14:	2000cafc 	.word	0x2000cafc
 800df18:	2000cb02 	.word	0x2000cb02
 800df1c:	2000caf8 	.word	0x2000caf8
 800df20:	200092a0 	.word	0x200092a0
 800df24:	200092a4 	.word	0x200092a4

0800df28 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b082      	sub	sp, #8
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d106      	bne.n	800df44 <tcp_input_delayed_close+0x1c>
 800df36:	4b17      	ldr	r3, [pc, #92]	@ (800df94 <tcp_input_delayed_close+0x6c>)
 800df38:	f240 225a 	movw	r2, #602	@ 0x25a
 800df3c:	4916      	ldr	r1, [pc, #88]	@ (800df98 <tcp_input_delayed_close+0x70>)
 800df3e:	4817      	ldr	r0, [pc, #92]	@ (800df9c <tcp_input_delayed_close+0x74>)
 800df40:	f009 f88a 	bl	8017058 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800df44:	4b16      	ldr	r3, [pc, #88]	@ (800dfa0 <tcp_input_delayed_close+0x78>)
 800df46:	781b      	ldrb	r3, [r3, #0]
 800df48:	f003 0310 	and.w	r3, r3, #16
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d01c      	beq.n	800df8a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	8b5b      	ldrh	r3, [r3, #26]
 800df54:	f003 0310 	and.w	r3, r3, #16
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d10d      	bne.n	800df78 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800df62:	2b00      	cmp	r3, #0
 800df64:	d008      	beq.n	800df78 <tcp_input_delayed_close+0x50>
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800df6c:	687a      	ldr	r2, [r7, #4]
 800df6e:	6912      	ldr	r2, [r2, #16]
 800df70:	f06f 010e 	mvn.w	r1, #14
 800df74:	4610      	mov	r0, r2
 800df76:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800df78:	6879      	ldr	r1, [r7, #4]
 800df7a:	480a      	ldr	r0, [pc, #40]	@ (800dfa4 <tcp_input_delayed_close+0x7c>)
 800df7c:	f7ff fa50 	bl	800d420 <tcp_pcb_remove>
    tcp_free(pcb);
 800df80:	6878      	ldr	r0, [r7, #4]
 800df82:	f7fe f83b 	bl	800bffc <tcp_free>
    return 1;
 800df86:	2301      	movs	r3, #1
 800df88:	e000      	b.n	800df8c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800df8a:	2300      	movs	r3, #0
}
 800df8c:	4618      	mov	r0, r3
 800df8e:	3708      	adds	r7, #8
 800df90:	46bd      	mov	sp, r7
 800df92:	bd80      	pop	{r7, pc}
 800df94:	080198b0 	.word	0x080198b0
 800df98:	08019a80 	.word	0x08019a80
 800df9c:	080198fc 	.word	0x080198fc
 800dfa0:	2000cb05 	.word	0x2000cb05
 800dfa4:	2000cacc 	.word	0x2000cacc

0800dfa8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800dfa8:	b590      	push	{r4, r7, lr}
 800dfaa:	b08b      	sub	sp, #44	@ 0x2c
 800dfac:	af04      	add	r7, sp, #16
 800dfae:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800dfb0:	4b6f      	ldr	r3, [pc, #444]	@ (800e170 <tcp_listen_input+0x1c8>)
 800dfb2:	781b      	ldrb	r3, [r3, #0]
 800dfb4:	f003 0304 	and.w	r3, r3, #4
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	f040 80d2 	bne.w	800e162 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d106      	bne.n	800dfd2 <tcp_listen_input+0x2a>
 800dfc4:	4b6b      	ldr	r3, [pc, #428]	@ (800e174 <tcp_listen_input+0x1cc>)
 800dfc6:	f240 2281 	movw	r2, #641	@ 0x281
 800dfca:	496b      	ldr	r1, [pc, #428]	@ (800e178 <tcp_listen_input+0x1d0>)
 800dfcc:	486b      	ldr	r0, [pc, #428]	@ (800e17c <tcp_listen_input+0x1d4>)
 800dfce:	f009 f843 	bl	8017058 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800dfd2:	4b67      	ldr	r3, [pc, #412]	@ (800e170 <tcp_listen_input+0x1c8>)
 800dfd4:	781b      	ldrb	r3, [r3, #0]
 800dfd6:	f003 0310 	and.w	r3, r3, #16
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d019      	beq.n	800e012 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dfde:	4b68      	ldr	r3, [pc, #416]	@ (800e180 <tcp_listen_input+0x1d8>)
 800dfe0:	6819      	ldr	r1, [r3, #0]
 800dfe2:	4b68      	ldr	r3, [pc, #416]	@ (800e184 <tcp_listen_input+0x1dc>)
 800dfe4:	881b      	ldrh	r3, [r3, #0]
 800dfe6:	461a      	mov	r2, r3
 800dfe8:	4b67      	ldr	r3, [pc, #412]	@ (800e188 <tcp_listen_input+0x1e0>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dfee:	4b67      	ldr	r3, [pc, #412]	@ (800e18c <tcp_listen_input+0x1e4>)
 800dff0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dff2:	885b      	ldrh	r3, [r3, #2]
 800dff4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dff6:	4a65      	ldr	r2, [pc, #404]	@ (800e18c <tcp_listen_input+0x1e4>)
 800dff8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dffa:	8812      	ldrh	r2, [r2, #0]
 800dffc:	b292      	uxth	r2, r2
 800dffe:	9202      	str	r2, [sp, #8]
 800e000:	9301      	str	r3, [sp, #4]
 800e002:	4b63      	ldr	r3, [pc, #396]	@ (800e190 <tcp_listen_input+0x1e8>)
 800e004:	9300      	str	r3, [sp, #0]
 800e006:	4b63      	ldr	r3, [pc, #396]	@ (800e194 <tcp_listen_input+0x1ec>)
 800e008:	4602      	mov	r2, r0
 800e00a:	6878      	ldr	r0, [r7, #4]
 800e00c:	f002 ff7a 	bl	8010f04 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e010:	e0a9      	b.n	800e166 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e012:	4b57      	ldr	r3, [pc, #348]	@ (800e170 <tcp_listen_input+0x1c8>)
 800e014:	781b      	ldrb	r3, [r3, #0]
 800e016:	f003 0302 	and.w	r3, r3, #2
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	f000 80a3 	beq.w	800e166 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	7d5b      	ldrb	r3, [r3, #21]
 800e024:	4618      	mov	r0, r3
 800e026:	f7ff f927 	bl	800d278 <tcp_alloc>
 800e02a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e02c:	697b      	ldr	r3, [r7, #20]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d111      	bne.n	800e056 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	699b      	ldr	r3, [r3, #24]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d00a      	beq.n	800e050 <tcp_listen_input+0xa8>
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	699b      	ldr	r3, [r3, #24]
 800e03e:	687a      	ldr	r2, [r7, #4]
 800e040:	6910      	ldr	r0, [r2, #16]
 800e042:	f04f 32ff 	mov.w	r2, #4294967295
 800e046:	2100      	movs	r1, #0
 800e048:	4798      	blx	r3
 800e04a:	4603      	mov	r3, r0
 800e04c:	73bb      	strb	r3, [r7, #14]
      return;
 800e04e:	e08b      	b.n	800e168 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e050:	23f0      	movs	r3, #240	@ 0xf0
 800e052:	73bb      	strb	r3, [r7, #14]
      return;
 800e054:	e088      	b.n	800e168 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e056:	4b50      	ldr	r3, [pc, #320]	@ (800e198 <tcp_listen_input+0x1f0>)
 800e058:	695a      	ldr	r2, [r3, #20]
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e05e:	4b4e      	ldr	r3, [pc, #312]	@ (800e198 <tcp_listen_input+0x1f0>)
 800e060:	691a      	ldr	r2, [r3, #16]
 800e062:	697b      	ldr	r3, [r7, #20]
 800e064:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	8ada      	ldrh	r2, [r3, #22]
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e06e:	4b47      	ldr	r3, [pc, #284]	@ (800e18c <tcp_listen_input+0x1e4>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	881b      	ldrh	r3, [r3, #0]
 800e074:	b29a      	uxth	r2, r3
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e07a:	697b      	ldr	r3, [r7, #20]
 800e07c:	2203      	movs	r2, #3
 800e07e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e080:	4b41      	ldr	r3, [pc, #260]	@ (800e188 <tcp_listen_input+0x1e0>)
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	1c5a      	adds	r2, r3, #1
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e08a:	697b      	ldr	r3, [r7, #20]
 800e08c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800e092:	6978      	ldr	r0, [r7, #20]
 800e094:	f7ff fa58 	bl	800d548 <tcp_next_iss>
 800e098:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e09a:	697b      	ldr	r3, [r7, #20]
 800e09c:	693a      	ldr	r2, [r7, #16]
 800e09e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800e0a0:	697b      	ldr	r3, [r7, #20]
 800e0a2:	693a      	ldr	r2, [r7, #16]
 800e0a4:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800e0a6:	697b      	ldr	r3, [r7, #20]
 800e0a8:	693a      	ldr	r2, [r7, #16]
 800e0aa:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800e0ac:	697b      	ldr	r3, [r7, #20]
 800e0ae:	693a      	ldr	r2, [r7, #16]
 800e0b0:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e0b2:	4b35      	ldr	r3, [pc, #212]	@ (800e188 <tcp_listen_input+0x1e0>)
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	1e5a      	subs	r2, r3, #1
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	691a      	ldr	r2, [r3, #16]
 800e0c0:	697b      	ldr	r3, [r7, #20]
 800e0c2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e0c4:	697b      	ldr	r3, [r7, #20]
 800e0c6:	687a      	ldr	r2, [r7, #4]
 800e0c8:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	7a5b      	ldrb	r3, [r3, #9]
 800e0ce:	f003 030c 	and.w	r3, r3, #12
 800e0d2:	b2da      	uxtb	r2, r3
 800e0d4:	697b      	ldr	r3, [r7, #20]
 800e0d6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	7a1a      	ldrb	r2, [r3, #8]
 800e0dc:	697b      	ldr	r3, [r7, #20]
 800e0de:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e0e0:	4b2e      	ldr	r3, [pc, #184]	@ (800e19c <tcp_listen_input+0x1f4>)
 800e0e2:	681a      	ldr	r2, [r3, #0]
 800e0e4:	697b      	ldr	r3, [r7, #20]
 800e0e6:	60da      	str	r2, [r3, #12]
 800e0e8:	4a2c      	ldr	r2, [pc, #176]	@ (800e19c <tcp_listen_input+0x1f4>)
 800e0ea:	697b      	ldr	r3, [r7, #20]
 800e0ec:	6013      	str	r3, [r2, #0]
 800e0ee:	f003 f8cb 	bl	8011288 <tcp_timer_needed>
 800e0f2:	4b2b      	ldr	r3, [pc, #172]	@ (800e1a0 <tcp_listen_input+0x1f8>)
 800e0f4:	2201      	movs	r2, #1
 800e0f6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e0f8:	6978      	ldr	r0, [r7, #20]
 800e0fa:	f001 fd8b 	bl	800fc14 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e0fe:	4b23      	ldr	r3, [pc, #140]	@ (800e18c <tcp_listen_input+0x1e4>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	89db      	ldrh	r3, [r3, #14]
 800e104:	b29a      	uxth	r2, r3
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e10c:	697b      	ldr	r3, [r7, #20]
 800e10e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e118:	697b      	ldr	r3, [r7, #20]
 800e11a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800e11c:	697b      	ldr	r3, [r7, #20]
 800e11e:	3304      	adds	r3, #4
 800e120:	4618      	mov	r0, r3
 800e122:	f007 fa2d 	bl	8015580 <ip4_route>
 800e126:	4601      	mov	r1, r0
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	3304      	adds	r3, #4
 800e12c:	461a      	mov	r2, r3
 800e12e:	4620      	mov	r0, r4
 800e130:	f7ff fa30 	bl	800d594 <tcp_eff_send_mss_netif>
 800e134:	4603      	mov	r3, r0
 800e136:	461a      	mov	r2, r3
 800e138:	697b      	ldr	r3, [r7, #20]
 800e13a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e13c:	2112      	movs	r1, #18
 800e13e:	6978      	ldr	r0, [r7, #20]
 800e140:	f002 f83e 	bl	80101c0 <tcp_enqueue_flags>
 800e144:	4603      	mov	r3, r0
 800e146:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e148:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d004      	beq.n	800e15a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e150:	2100      	movs	r1, #0
 800e152:	6978      	ldr	r0, [r7, #20]
 800e154:	f7fe f97c 	bl	800c450 <tcp_abandon>
      return;
 800e158:	e006      	b.n	800e168 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e15a:	6978      	ldr	r0, [r7, #20]
 800e15c:	f002 f91e 	bl	801039c <tcp_output>
  return;
 800e160:	e001      	b.n	800e166 <tcp_listen_input+0x1be>
    return;
 800e162:	bf00      	nop
 800e164:	e000      	b.n	800e168 <tcp_listen_input+0x1c0>
  return;
 800e166:	bf00      	nop
}
 800e168:	371c      	adds	r7, #28
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bd90      	pop	{r4, r7, pc}
 800e16e:	bf00      	nop
 800e170:	2000cb04 	.word	0x2000cb04
 800e174:	080198b0 	.word	0x080198b0
 800e178:	08019aa8 	.word	0x08019aa8
 800e17c:	080198fc 	.word	0x080198fc
 800e180:	2000cafc 	.word	0x2000cafc
 800e184:	2000cb02 	.word	0x2000cb02
 800e188:	2000caf8 	.word	0x2000caf8
 800e18c:	2000cae8 	.word	0x2000cae8
 800e190:	200092a0 	.word	0x200092a0
 800e194:	200092a4 	.word	0x200092a4
 800e198:	20009290 	.word	0x20009290
 800e19c:	2000cacc 	.word	0x2000cacc
 800e1a0:	2000cad4 	.word	0x2000cad4

0800e1a4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b086      	sub	sp, #24
 800e1a8:	af04      	add	r7, sp, #16
 800e1aa:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e1ac:	4b2f      	ldr	r3, [pc, #188]	@ (800e26c <tcp_timewait_input+0xc8>)
 800e1ae:	781b      	ldrb	r3, [r3, #0]
 800e1b0:	f003 0304 	and.w	r3, r3, #4
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d153      	bne.n	800e260 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d106      	bne.n	800e1cc <tcp_timewait_input+0x28>
 800e1be:	4b2c      	ldr	r3, [pc, #176]	@ (800e270 <tcp_timewait_input+0xcc>)
 800e1c0:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800e1c4:	492b      	ldr	r1, [pc, #172]	@ (800e274 <tcp_timewait_input+0xd0>)
 800e1c6:	482c      	ldr	r0, [pc, #176]	@ (800e278 <tcp_timewait_input+0xd4>)
 800e1c8:	f008 ff46 	bl	8017058 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e1cc:	4b27      	ldr	r3, [pc, #156]	@ (800e26c <tcp_timewait_input+0xc8>)
 800e1ce:	781b      	ldrb	r3, [r3, #0]
 800e1d0:	f003 0302 	and.w	r3, r3, #2
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d02a      	beq.n	800e22e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e1d8:	4b28      	ldr	r3, [pc, #160]	@ (800e27c <tcp_timewait_input+0xd8>)
 800e1da:	681a      	ldr	r2, [r3, #0]
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1e0:	1ad3      	subs	r3, r2, r3
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	db2d      	blt.n	800e242 <tcp_timewait_input+0x9e>
 800e1e6:	4b25      	ldr	r3, [pc, #148]	@ (800e27c <tcp_timewait_input+0xd8>)
 800e1e8:	681a      	ldr	r2, [r3, #0]
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1ee:	6879      	ldr	r1, [r7, #4]
 800e1f0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e1f2:	440b      	add	r3, r1
 800e1f4:	1ad3      	subs	r3, r2, r3
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	dc23      	bgt.n	800e242 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e1fa:	4b21      	ldr	r3, [pc, #132]	@ (800e280 <tcp_timewait_input+0xdc>)
 800e1fc:	6819      	ldr	r1, [r3, #0]
 800e1fe:	4b21      	ldr	r3, [pc, #132]	@ (800e284 <tcp_timewait_input+0xe0>)
 800e200:	881b      	ldrh	r3, [r3, #0]
 800e202:	461a      	mov	r2, r3
 800e204:	4b1d      	ldr	r3, [pc, #116]	@ (800e27c <tcp_timewait_input+0xd8>)
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e20a:	4b1f      	ldr	r3, [pc, #124]	@ (800e288 <tcp_timewait_input+0xe4>)
 800e20c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e20e:	885b      	ldrh	r3, [r3, #2]
 800e210:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e212:	4a1d      	ldr	r2, [pc, #116]	@ (800e288 <tcp_timewait_input+0xe4>)
 800e214:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e216:	8812      	ldrh	r2, [r2, #0]
 800e218:	b292      	uxth	r2, r2
 800e21a:	9202      	str	r2, [sp, #8]
 800e21c:	9301      	str	r3, [sp, #4]
 800e21e:	4b1b      	ldr	r3, [pc, #108]	@ (800e28c <tcp_timewait_input+0xe8>)
 800e220:	9300      	str	r3, [sp, #0]
 800e222:	4b1b      	ldr	r3, [pc, #108]	@ (800e290 <tcp_timewait_input+0xec>)
 800e224:	4602      	mov	r2, r0
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f002 fe6c 	bl	8010f04 <tcp_rst>
      return;
 800e22c:	e01b      	b.n	800e266 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e22e:	4b0f      	ldr	r3, [pc, #60]	@ (800e26c <tcp_timewait_input+0xc8>)
 800e230:	781b      	ldrb	r3, [r3, #0]
 800e232:	f003 0301 	and.w	r3, r3, #1
 800e236:	2b00      	cmp	r3, #0
 800e238:	d003      	beq.n	800e242 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e23a:	4b16      	ldr	r3, [pc, #88]	@ (800e294 <tcp_timewait_input+0xf0>)
 800e23c:	681a      	ldr	r2, [r3, #0]
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e242:	4b10      	ldr	r3, [pc, #64]	@ (800e284 <tcp_timewait_input+0xe0>)
 800e244:	881b      	ldrh	r3, [r3, #0]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d00c      	beq.n	800e264 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	8b5b      	ldrh	r3, [r3, #26]
 800e24e:	f043 0302 	orr.w	r3, r3, #2
 800e252:	b29a      	uxth	r2, r3
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	f002 f89f 	bl	801039c <tcp_output>
  }
  return;
 800e25e:	e001      	b.n	800e264 <tcp_timewait_input+0xc0>
    return;
 800e260:	bf00      	nop
 800e262:	e000      	b.n	800e266 <tcp_timewait_input+0xc2>
  return;
 800e264:	bf00      	nop
}
 800e266:	3708      	adds	r7, #8
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}
 800e26c:	2000cb04 	.word	0x2000cb04
 800e270:	080198b0 	.word	0x080198b0
 800e274:	08019ac8 	.word	0x08019ac8
 800e278:	080198fc 	.word	0x080198fc
 800e27c:	2000caf8 	.word	0x2000caf8
 800e280:	2000cafc 	.word	0x2000cafc
 800e284:	2000cb02 	.word	0x2000cb02
 800e288:	2000cae8 	.word	0x2000cae8
 800e28c:	200092a0 	.word	0x200092a0
 800e290:	200092a4 	.word	0x200092a4
 800e294:	2000cac0 	.word	0x2000cac0

0800e298 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e298:	b590      	push	{r4, r7, lr}
 800e29a:	b08d      	sub	sp, #52	@ 0x34
 800e29c:	af04      	add	r7, sp, #16
 800e29e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d106      	bne.n	800e2bc <tcp_process+0x24>
 800e2ae:	4b9d      	ldr	r3, [pc, #628]	@ (800e524 <tcp_process+0x28c>)
 800e2b0:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800e2b4:	499c      	ldr	r1, [pc, #624]	@ (800e528 <tcp_process+0x290>)
 800e2b6:	489d      	ldr	r0, [pc, #628]	@ (800e52c <tcp_process+0x294>)
 800e2b8:	f008 fece 	bl	8017058 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e2bc:	4b9c      	ldr	r3, [pc, #624]	@ (800e530 <tcp_process+0x298>)
 800e2be:	781b      	ldrb	r3, [r3, #0]
 800e2c0:	f003 0304 	and.w	r3, r3, #4
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d04e      	beq.n	800e366 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	7d1b      	ldrb	r3, [r3, #20]
 800e2cc:	2b02      	cmp	r3, #2
 800e2ce:	d108      	bne.n	800e2e2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e2d4:	4b97      	ldr	r3, [pc, #604]	@ (800e534 <tcp_process+0x29c>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	d123      	bne.n	800e324 <tcp_process+0x8c>
        acceptable = 1;
 800e2dc:	2301      	movs	r3, #1
 800e2de:	76fb      	strb	r3, [r7, #27]
 800e2e0:	e020      	b.n	800e324 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e2e6:	4b94      	ldr	r3, [pc, #592]	@ (800e538 <tcp_process+0x2a0>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	d102      	bne.n	800e2f4 <tcp_process+0x5c>
        acceptable = 1;
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	76fb      	strb	r3, [r7, #27]
 800e2f2:	e017      	b.n	800e324 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e2f4:	4b90      	ldr	r3, [pc, #576]	@ (800e538 <tcp_process+0x2a0>)
 800e2f6:	681a      	ldr	r2, [r3, #0]
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2fc:	1ad3      	subs	r3, r2, r3
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	db10      	blt.n	800e324 <tcp_process+0x8c>
 800e302:	4b8d      	ldr	r3, [pc, #564]	@ (800e538 <tcp_process+0x2a0>)
 800e304:	681a      	ldr	r2, [r3, #0]
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e30a:	6879      	ldr	r1, [r7, #4]
 800e30c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e30e:	440b      	add	r3, r1
 800e310:	1ad3      	subs	r3, r2, r3
 800e312:	2b00      	cmp	r3, #0
 800e314:	dc06      	bgt.n	800e324 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	8b5b      	ldrh	r3, [r3, #26]
 800e31a:	f043 0302 	orr.w	r3, r3, #2
 800e31e:	b29a      	uxth	r2, r3
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e324:	7efb      	ldrb	r3, [r7, #27]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d01b      	beq.n	800e362 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	7d1b      	ldrb	r3, [r3, #20]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d106      	bne.n	800e340 <tcp_process+0xa8>
 800e332:	4b7c      	ldr	r3, [pc, #496]	@ (800e524 <tcp_process+0x28c>)
 800e334:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800e338:	4980      	ldr	r1, [pc, #512]	@ (800e53c <tcp_process+0x2a4>)
 800e33a:	487c      	ldr	r0, [pc, #496]	@ (800e52c <tcp_process+0x294>)
 800e33c:	f008 fe8c 	bl	8017058 <iprintf>
      recv_flags |= TF_RESET;
 800e340:	4b7f      	ldr	r3, [pc, #508]	@ (800e540 <tcp_process+0x2a8>)
 800e342:	781b      	ldrb	r3, [r3, #0]
 800e344:	f043 0308 	orr.w	r3, r3, #8
 800e348:	b2da      	uxtb	r2, r3
 800e34a:	4b7d      	ldr	r3, [pc, #500]	@ (800e540 <tcp_process+0x2a8>)
 800e34c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	8b5b      	ldrh	r3, [r3, #26]
 800e352:	f023 0301 	bic.w	r3, r3, #1
 800e356:	b29a      	uxth	r2, r3
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e35c:	f06f 030d 	mvn.w	r3, #13
 800e360:	e37a      	b.n	800ea58 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e362:	2300      	movs	r3, #0
 800e364:	e378      	b.n	800ea58 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e366:	4b72      	ldr	r3, [pc, #456]	@ (800e530 <tcp_process+0x298>)
 800e368:	781b      	ldrb	r3, [r3, #0]
 800e36a:	f003 0302 	and.w	r3, r3, #2
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d010      	beq.n	800e394 <tcp_process+0xfc>
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	7d1b      	ldrb	r3, [r3, #20]
 800e376:	2b02      	cmp	r3, #2
 800e378:	d00c      	beq.n	800e394 <tcp_process+0xfc>
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	7d1b      	ldrb	r3, [r3, #20]
 800e37e:	2b03      	cmp	r3, #3
 800e380:	d008      	beq.n	800e394 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	8b5b      	ldrh	r3, [r3, #26]
 800e386:	f043 0302 	orr.w	r3, r3, #2
 800e38a:	b29a      	uxth	r2, r3
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e390:	2300      	movs	r3, #0
 800e392:	e361      	b.n	800ea58 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	8b5b      	ldrh	r3, [r3, #26]
 800e398:	f003 0310 	and.w	r3, r3, #16
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d103      	bne.n	800e3a8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e3a0:	4b68      	ldr	r3, [pc, #416]	@ (800e544 <tcp_process+0x2ac>)
 800e3a2:	681a      	ldr	r2, [r3, #0]
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f001 fc2b 	bl	800fc14 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	7d1b      	ldrb	r3, [r3, #20]
 800e3c2:	3b02      	subs	r3, #2
 800e3c4:	2b07      	cmp	r3, #7
 800e3c6:	f200 8337 	bhi.w	800ea38 <tcp_process+0x7a0>
 800e3ca:	a201      	add	r2, pc, #4	@ (adr r2, 800e3d0 <tcp_process+0x138>)
 800e3cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3d0:	0800e3f1 	.word	0x0800e3f1
 800e3d4:	0800e621 	.word	0x0800e621
 800e3d8:	0800e799 	.word	0x0800e799
 800e3dc:	0800e7c3 	.word	0x0800e7c3
 800e3e0:	0800e8e7 	.word	0x0800e8e7
 800e3e4:	0800e799 	.word	0x0800e799
 800e3e8:	0800e973 	.word	0x0800e973
 800e3ec:	0800ea03 	.word	0x0800ea03
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e3f0:	4b4f      	ldr	r3, [pc, #316]	@ (800e530 <tcp_process+0x298>)
 800e3f2:	781b      	ldrb	r3, [r3, #0]
 800e3f4:	f003 0310 	and.w	r3, r3, #16
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	f000 80e4 	beq.w	800e5c6 <tcp_process+0x32e>
 800e3fe:	4b4c      	ldr	r3, [pc, #304]	@ (800e530 <tcp_process+0x298>)
 800e400:	781b      	ldrb	r3, [r3, #0]
 800e402:	f003 0302 	and.w	r3, r3, #2
 800e406:	2b00      	cmp	r3, #0
 800e408:	f000 80dd 	beq.w	800e5c6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e410:	1c5a      	adds	r2, r3, #1
 800e412:	4b48      	ldr	r3, [pc, #288]	@ (800e534 <tcp_process+0x29c>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	429a      	cmp	r2, r3
 800e418:	f040 80d5 	bne.w	800e5c6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e41c:	4b46      	ldr	r3, [pc, #280]	@ (800e538 <tcp_process+0x2a0>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	1c5a      	adds	r2, r3, #1
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800e42e:	4b41      	ldr	r3, [pc, #260]	@ (800e534 <tcp_process+0x29c>)
 800e430:	681a      	ldr	r2, [r3, #0]
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e436:	4b44      	ldr	r3, [pc, #272]	@ (800e548 <tcp_process+0x2b0>)
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	89db      	ldrh	r3, [r3, #14]
 800e43c:	b29a      	uxth	r2, r3
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e450:	4b39      	ldr	r3, [pc, #228]	@ (800e538 <tcp_process+0x2a0>)
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	1e5a      	subs	r2, r3, #1
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2204      	movs	r2, #4
 800e45e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	3304      	adds	r3, #4
 800e468:	4618      	mov	r0, r3
 800e46a:	f007 f889 	bl	8015580 <ip4_route>
 800e46e:	4601      	mov	r1, r0
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	3304      	adds	r3, #4
 800e474:	461a      	mov	r2, r3
 800e476:	4620      	mov	r0, r4
 800e478:	f7ff f88c 	bl	800d594 <tcp_eff_send_mss_netif>
 800e47c:	4603      	mov	r3, r0
 800e47e:	461a      	mov	r2, r3
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e488:	009a      	lsls	r2, r3, #2
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e48e:	005b      	lsls	r3, r3, #1
 800e490:	f241 111c 	movw	r1, #4380	@ 0x111c
 800e494:	428b      	cmp	r3, r1
 800e496:	bf38      	it	cc
 800e498:	460b      	movcc	r3, r1
 800e49a:	429a      	cmp	r2, r3
 800e49c:	d204      	bcs.n	800e4a8 <tcp_process+0x210>
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e4a2:	009b      	lsls	r3, r3, #2
 800e4a4:	b29b      	uxth	r3, r3
 800e4a6:	e00d      	b.n	800e4c4 <tcp_process+0x22c>
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e4ac:	005b      	lsls	r3, r3, #1
 800e4ae:	f241 121c 	movw	r2, #4380	@ 0x111c
 800e4b2:	4293      	cmp	r3, r2
 800e4b4:	d904      	bls.n	800e4c0 <tcp_process+0x228>
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e4ba:	005b      	lsls	r3, r3, #1
 800e4bc:	b29b      	uxth	r3, r3
 800e4be:	e001      	b.n	800e4c4 <tcp_process+0x22c>
 800e4c0:	f241 131c 	movw	r3, #4380	@ 0x111c
 800e4c4:	687a      	ldr	r2, [r7, #4]
 800e4c6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d106      	bne.n	800e4e2 <tcp_process+0x24a>
 800e4d4:	4b13      	ldr	r3, [pc, #76]	@ (800e524 <tcp_process+0x28c>)
 800e4d6:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800e4da:	491c      	ldr	r1, [pc, #112]	@ (800e54c <tcp_process+0x2b4>)
 800e4dc:	4813      	ldr	r0, [pc, #76]	@ (800e52c <tcp_process+0x294>)
 800e4de:	f008 fdbb 	bl	8017058 <iprintf>
        --pcb->snd_queuelen;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e4e8:	3b01      	subs	r3, #1
 800e4ea:	b29a      	uxth	r2, r3
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e4f6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e4f8:	69fb      	ldr	r3, [r7, #28]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d12a      	bne.n	800e554 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e502:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e504:	69fb      	ldr	r3, [r7, #28]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d106      	bne.n	800e518 <tcp_process+0x280>
 800e50a:	4b06      	ldr	r3, [pc, #24]	@ (800e524 <tcp_process+0x28c>)
 800e50c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800e510:	490f      	ldr	r1, [pc, #60]	@ (800e550 <tcp_process+0x2b8>)
 800e512:	4806      	ldr	r0, [pc, #24]	@ (800e52c <tcp_process+0x294>)
 800e514:	f008 fda0 	bl	8017058 <iprintf>
          pcb->unsent = rseg->next;
 800e518:	69fb      	ldr	r3, [r7, #28]
 800e51a:	681a      	ldr	r2, [r3, #0]
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	66da      	str	r2, [r3, #108]	@ 0x6c
 800e520:	e01c      	b.n	800e55c <tcp_process+0x2c4>
 800e522:	bf00      	nop
 800e524:	080198b0 	.word	0x080198b0
 800e528:	08019ae8 	.word	0x08019ae8
 800e52c:	080198fc 	.word	0x080198fc
 800e530:	2000cb04 	.word	0x2000cb04
 800e534:	2000cafc 	.word	0x2000cafc
 800e538:	2000caf8 	.word	0x2000caf8
 800e53c:	08019b04 	.word	0x08019b04
 800e540:	2000cb05 	.word	0x2000cb05
 800e544:	2000cac0 	.word	0x2000cac0
 800e548:	2000cae8 	.word	0x2000cae8
 800e54c:	08019b24 	.word	0x08019b24
 800e550:	08019b3c 	.word	0x08019b3c
        } else {
          pcb->unacked = rseg->next;
 800e554:	69fb      	ldr	r3, [r7, #28]
 800e556:	681a      	ldr	r2, [r3, #0]
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800e55c:	69f8      	ldr	r0, [r7, #28]
 800e55e:	f7fe fd22 	bl	800cfa6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e566:	2b00      	cmp	r3, #0
 800e568:	d104      	bne.n	800e574 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e570:	861a      	strh	r2, [r3, #48]	@ 0x30
 800e572:	e006      	b.n	800e582 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2200      	movs	r2, #0
 800e578:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2200      	movs	r2, #0
 800e57e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d00a      	beq.n	800e5a2 <tcp_process+0x30a>
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e592:	687a      	ldr	r2, [r7, #4]
 800e594:	6910      	ldr	r0, [r2, #16]
 800e596:	2200      	movs	r2, #0
 800e598:	6879      	ldr	r1, [r7, #4]
 800e59a:	4798      	blx	r3
 800e59c:	4603      	mov	r3, r0
 800e59e:	76bb      	strb	r3, [r7, #26]
 800e5a0:	e001      	b.n	800e5a6 <tcp_process+0x30e>
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e5a6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e5aa:	f113 0f0d 	cmn.w	r3, #13
 800e5ae:	d102      	bne.n	800e5b6 <tcp_process+0x31e>
          return ERR_ABRT;
 800e5b0:	f06f 030c 	mvn.w	r3, #12
 800e5b4:	e250      	b.n	800ea58 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	8b5b      	ldrh	r3, [r3, #26]
 800e5ba:	f043 0302 	orr.w	r3, r3, #2
 800e5be:	b29a      	uxth	r2, r3
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e5c4:	e23a      	b.n	800ea3c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e5c6:	4b98      	ldr	r3, [pc, #608]	@ (800e828 <tcp_process+0x590>)
 800e5c8:	781b      	ldrb	r3, [r3, #0]
 800e5ca:	f003 0310 	and.w	r3, r3, #16
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	f000 8234 	beq.w	800ea3c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e5d4:	4b95      	ldr	r3, [pc, #596]	@ (800e82c <tcp_process+0x594>)
 800e5d6:	6819      	ldr	r1, [r3, #0]
 800e5d8:	4b95      	ldr	r3, [pc, #596]	@ (800e830 <tcp_process+0x598>)
 800e5da:	881b      	ldrh	r3, [r3, #0]
 800e5dc:	461a      	mov	r2, r3
 800e5de:	4b95      	ldr	r3, [pc, #596]	@ (800e834 <tcp_process+0x59c>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e5e4:	4b94      	ldr	r3, [pc, #592]	@ (800e838 <tcp_process+0x5a0>)
 800e5e6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e5e8:	885b      	ldrh	r3, [r3, #2]
 800e5ea:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e5ec:	4a92      	ldr	r2, [pc, #584]	@ (800e838 <tcp_process+0x5a0>)
 800e5ee:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e5f0:	8812      	ldrh	r2, [r2, #0]
 800e5f2:	b292      	uxth	r2, r2
 800e5f4:	9202      	str	r2, [sp, #8]
 800e5f6:	9301      	str	r3, [sp, #4]
 800e5f8:	4b90      	ldr	r3, [pc, #576]	@ (800e83c <tcp_process+0x5a4>)
 800e5fa:	9300      	str	r3, [sp, #0]
 800e5fc:	4b90      	ldr	r3, [pc, #576]	@ (800e840 <tcp_process+0x5a8>)
 800e5fe:	4602      	mov	r2, r0
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	f002 fc7f 	bl	8010f04 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e60c:	2b05      	cmp	r3, #5
 800e60e:	f200 8215 	bhi.w	800ea3c <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	2200      	movs	r2, #0
 800e616:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f002 fa4b 	bl	8010ab4 <tcp_rexmit_rto>
      break;
 800e61e:	e20d      	b.n	800ea3c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e620:	4b81      	ldr	r3, [pc, #516]	@ (800e828 <tcp_process+0x590>)
 800e622:	781b      	ldrb	r3, [r3, #0]
 800e624:	f003 0310 	and.w	r3, r3, #16
 800e628:	2b00      	cmp	r3, #0
 800e62a:	f000 80a1 	beq.w	800e770 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e62e:	4b7f      	ldr	r3, [pc, #508]	@ (800e82c <tcp_process+0x594>)
 800e630:	681a      	ldr	r2, [r3, #0]
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e636:	1ad3      	subs	r3, r2, r3
 800e638:	3b01      	subs	r3, #1
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	db7e      	blt.n	800e73c <tcp_process+0x4a4>
 800e63e:	4b7b      	ldr	r3, [pc, #492]	@ (800e82c <tcp_process+0x594>)
 800e640:	681a      	ldr	r2, [r3, #0]
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e646:	1ad3      	subs	r3, r2, r3
 800e648:	2b00      	cmp	r3, #0
 800e64a:	dc77      	bgt.n	800e73c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2204      	movs	r2, #4
 800e650:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e656:	2b00      	cmp	r3, #0
 800e658:	d102      	bne.n	800e660 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e65a:	23fa      	movs	r3, #250	@ 0xfa
 800e65c:	76bb      	strb	r3, [r7, #26]
 800e65e:	e01d      	b.n	800e69c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e664:	699b      	ldr	r3, [r3, #24]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d106      	bne.n	800e678 <tcp_process+0x3e0>
 800e66a:	4b76      	ldr	r3, [pc, #472]	@ (800e844 <tcp_process+0x5ac>)
 800e66c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800e670:	4975      	ldr	r1, [pc, #468]	@ (800e848 <tcp_process+0x5b0>)
 800e672:	4876      	ldr	r0, [pc, #472]	@ (800e84c <tcp_process+0x5b4>)
 800e674:	f008 fcf0 	bl	8017058 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e67c:	699b      	ldr	r3, [r3, #24]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d00a      	beq.n	800e698 <tcp_process+0x400>
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e686:	699b      	ldr	r3, [r3, #24]
 800e688:	687a      	ldr	r2, [r7, #4]
 800e68a:	6910      	ldr	r0, [r2, #16]
 800e68c:	2200      	movs	r2, #0
 800e68e:	6879      	ldr	r1, [r7, #4]
 800e690:	4798      	blx	r3
 800e692:	4603      	mov	r3, r0
 800e694:	76bb      	strb	r3, [r7, #26]
 800e696:	e001      	b.n	800e69c <tcp_process+0x404>
 800e698:	23f0      	movs	r3, #240	@ 0xf0
 800e69a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e69c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d00a      	beq.n	800e6ba <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e6a4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e6a8:	f113 0f0d 	cmn.w	r3, #13
 800e6ac:	d002      	beq.n	800e6b4 <tcp_process+0x41c>
              tcp_abort(pcb);
 800e6ae:	6878      	ldr	r0, [r7, #4]
 800e6b0:	f7fd ff8c 	bl	800c5cc <tcp_abort>
            }
            return ERR_ABRT;
 800e6b4:	f06f 030c 	mvn.w	r3, #12
 800e6b8:	e1ce      	b.n	800ea58 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e6ba:	6878      	ldr	r0, [r7, #4]
 800e6bc:	f000 fae0 	bl	800ec80 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e6c0:	4b63      	ldr	r3, [pc, #396]	@ (800e850 <tcp_process+0x5b8>)
 800e6c2:	881b      	ldrh	r3, [r3, #0]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d005      	beq.n	800e6d4 <tcp_process+0x43c>
            recv_acked--;
 800e6c8:	4b61      	ldr	r3, [pc, #388]	@ (800e850 <tcp_process+0x5b8>)
 800e6ca:	881b      	ldrh	r3, [r3, #0]
 800e6cc:	3b01      	subs	r3, #1
 800e6ce:	b29a      	uxth	r2, r3
 800e6d0:	4b5f      	ldr	r3, [pc, #380]	@ (800e850 <tcp_process+0x5b8>)
 800e6d2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e6d8:	009a      	lsls	r2, r3, #2
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e6de:	005b      	lsls	r3, r3, #1
 800e6e0:	f241 111c 	movw	r1, #4380	@ 0x111c
 800e6e4:	428b      	cmp	r3, r1
 800e6e6:	bf38      	it	cc
 800e6e8:	460b      	movcc	r3, r1
 800e6ea:	429a      	cmp	r2, r3
 800e6ec:	d204      	bcs.n	800e6f8 <tcp_process+0x460>
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e6f2:	009b      	lsls	r3, r3, #2
 800e6f4:	b29b      	uxth	r3, r3
 800e6f6:	e00d      	b.n	800e714 <tcp_process+0x47c>
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e6fc:	005b      	lsls	r3, r3, #1
 800e6fe:	f241 121c 	movw	r2, #4380	@ 0x111c
 800e702:	4293      	cmp	r3, r2
 800e704:	d904      	bls.n	800e710 <tcp_process+0x478>
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e70a:	005b      	lsls	r3, r3, #1
 800e70c:	b29b      	uxth	r3, r3
 800e70e:	e001      	b.n	800e714 <tcp_process+0x47c>
 800e710:	f241 131c 	movw	r3, #4380	@ 0x111c
 800e714:	687a      	ldr	r2, [r7, #4]
 800e716:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e71a:	4b4e      	ldr	r3, [pc, #312]	@ (800e854 <tcp_process+0x5bc>)
 800e71c:	781b      	ldrb	r3, [r3, #0]
 800e71e:	f003 0320 	and.w	r3, r3, #32
 800e722:	2b00      	cmp	r3, #0
 800e724:	d037      	beq.n	800e796 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	8b5b      	ldrh	r3, [r3, #26]
 800e72a:	f043 0302 	orr.w	r3, r3, #2
 800e72e:	b29a      	uxth	r2, r3
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2207      	movs	r2, #7
 800e738:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e73a:	e02c      	b.n	800e796 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e73c:	4b3b      	ldr	r3, [pc, #236]	@ (800e82c <tcp_process+0x594>)
 800e73e:	6819      	ldr	r1, [r3, #0]
 800e740:	4b3b      	ldr	r3, [pc, #236]	@ (800e830 <tcp_process+0x598>)
 800e742:	881b      	ldrh	r3, [r3, #0]
 800e744:	461a      	mov	r2, r3
 800e746:	4b3b      	ldr	r3, [pc, #236]	@ (800e834 <tcp_process+0x59c>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e74c:	4b3a      	ldr	r3, [pc, #232]	@ (800e838 <tcp_process+0x5a0>)
 800e74e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e750:	885b      	ldrh	r3, [r3, #2]
 800e752:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e754:	4a38      	ldr	r2, [pc, #224]	@ (800e838 <tcp_process+0x5a0>)
 800e756:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e758:	8812      	ldrh	r2, [r2, #0]
 800e75a:	b292      	uxth	r2, r2
 800e75c:	9202      	str	r2, [sp, #8]
 800e75e:	9301      	str	r3, [sp, #4]
 800e760:	4b36      	ldr	r3, [pc, #216]	@ (800e83c <tcp_process+0x5a4>)
 800e762:	9300      	str	r3, [sp, #0]
 800e764:	4b36      	ldr	r3, [pc, #216]	@ (800e840 <tcp_process+0x5a8>)
 800e766:	4602      	mov	r2, r0
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f002 fbcb 	bl	8010f04 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e76e:	e167      	b.n	800ea40 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e770:	4b2d      	ldr	r3, [pc, #180]	@ (800e828 <tcp_process+0x590>)
 800e772:	781b      	ldrb	r3, [r3, #0]
 800e774:	f003 0302 	and.w	r3, r3, #2
 800e778:	2b00      	cmp	r3, #0
 800e77a:	f000 8161 	beq.w	800ea40 <tcp_process+0x7a8>
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e782:	1e5a      	subs	r2, r3, #1
 800e784:	4b2b      	ldr	r3, [pc, #172]	@ (800e834 <tcp_process+0x59c>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	429a      	cmp	r2, r3
 800e78a:	f040 8159 	bne.w	800ea40 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f002 f9b2 	bl	8010af8 <tcp_rexmit>
      break;
 800e794:	e154      	b.n	800ea40 <tcp_process+0x7a8>
 800e796:	e153      	b.n	800ea40 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	f000 fa71 	bl	800ec80 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e79e:	4b2d      	ldr	r3, [pc, #180]	@ (800e854 <tcp_process+0x5bc>)
 800e7a0:	781b      	ldrb	r3, [r3, #0]
 800e7a2:	f003 0320 	and.w	r3, r3, #32
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	f000 814c 	beq.w	800ea44 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	8b5b      	ldrh	r3, [r3, #26]
 800e7b0:	f043 0302 	orr.w	r3, r3, #2
 800e7b4:	b29a      	uxth	r2, r3
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	2207      	movs	r2, #7
 800e7be:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e7c0:	e140      	b.n	800ea44 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	f000 fa5c 	bl	800ec80 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e7c8:	4b22      	ldr	r3, [pc, #136]	@ (800e854 <tcp_process+0x5bc>)
 800e7ca:	781b      	ldrb	r3, [r3, #0]
 800e7cc:	f003 0320 	and.w	r3, r3, #32
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d071      	beq.n	800e8b8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e7d4:	4b14      	ldr	r3, [pc, #80]	@ (800e828 <tcp_process+0x590>)
 800e7d6:	781b      	ldrb	r3, [r3, #0]
 800e7d8:	f003 0310 	and.w	r3, r3, #16
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d060      	beq.n	800e8a2 <tcp_process+0x60a>
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e7e4:	4b11      	ldr	r3, [pc, #68]	@ (800e82c <tcp_process+0x594>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	429a      	cmp	r2, r3
 800e7ea:	d15a      	bne.n	800e8a2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d156      	bne.n	800e8a2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	8b5b      	ldrh	r3, [r3, #26]
 800e7f8:	f043 0302 	orr.w	r3, r3, #2
 800e7fc:	b29a      	uxth	r2, r3
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f7fe fdbc 	bl	800d380 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e808:	4b13      	ldr	r3, [pc, #76]	@ (800e858 <tcp_process+0x5c0>)
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	687a      	ldr	r2, [r7, #4]
 800e80e:	429a      	cmp	r2, r3
 800e810:	d105      	bne.n	800e81e <tcp_process+0x586>
 800e812:	4b11      	ldr	r3, [pc, #68]	@ (800e858 <tcp_process+0x5c0>)
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	68db      	ldr	r3, [r3, #12]
 800e818:	4a0f      	ldr	r2, [pc, #60]	@ (800e858 <tcp_process+0x5c0>)
 800e81a:	6013      	str	r3, [r2, #0]
 800e81c:	e02e      	b.n	800e87c <tcp_process+0x5e4>
 800e81e:	4b0e      	ldr	r3, [pc, #56]	@ (800e858 <tcp_process+0x5c0>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	617b      	str	r3, [r7, #20]
 800e824:	e027      	b.n	800e876 <tcp_process+0x5de>
 800e826:	bf00      	nop
 800e828:	2000cb04 	.word	0x2000cb04
 800e82c:	2000cafc 	.word	0x2000cafc
 800e830:	2000cb02 	.word	0x2000cb02
 800e834:	2000caf8 	.word	0x2000caf8
 800e838:	2000cae8 	.word	0x2000cae8
 800e83c:	200092a0 	.word	0x200092a0
 800e840:	200092a4 	.word	0x200092a4
 800e844:	080198b0 	.word	0x080198b0
 800e848:	08019b50 	.word	0x08019b50
 800e84c:	080198fc 	.word	0x080198fc
 800e850:	2000cb00 	.word	0x2000cb00
 800e854:	2000cb05 	.word	0x2000cb05
 800e858:	2000cacc 	.word	0x2000cacc
 800e85c:	697b      	ldr	r3, [r7, #20]
 800e85e:	68db      	ldr	r3, [r3, #12]
 800e860:	687a      	ldr	r2, [r7, #4]
 800e862:	429a      	cmp	r2, r3
 800e864:	d104      	bne.n	800e870 <tcp_process+0x5d8>
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	68da      	ldr	r2, [r3, #12]
 800e86a:	697b      	ldr	r3, [r7, #20]
 800e86c:	60da      	str	r2, [r3, #12]
 800e86e:	e005      	b.n	800e87c <tcp_process+0x5e4>
 800e870:	697b      	ldr	r3, [r7, #20]
 800e872:	68db      	ldr	r3, [r3, #12]
 800e874:	617b      	str	r3, [r7, #20]
 800e876:	697b      	ldr	r3, [r7, #20]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d1ef      	bne.n	800e85c <tcp_process+0x5c4>
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	2200      	movs	r2, #0
 800e880:	60da      	str	r2, [r3, #12]
 800e882:	4b77      	ldr	r3, [pc, #476]	@ (800ea60 <tcp_process+0x7c8>)
 800e884:	2201      	movs	r2, #1
 800e886:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	220a      	movs	r2, #10
 800e88c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e88e:	4b75      	ldr	r3, [pc, #468]	@ (800ea64 <tcp_process+0x7cc>)
 800e890:	681a      	ldr	r2, [r3, #0]
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	60da      	str	r2, [r3, #12]
 800e896:	4a73      	ldr	r2, [pc, #460]	@ (800ea64 <tcp_process+0x7cc>)
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	6013      	str	r3, [r2, #0]
 800e89c:	f002 fcf4 	bl	8011288 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e8a0:	e0d2      	b.n	800ea48 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	8b5b      	ldrh	r3, [r3, #26]
 800e8a6:	f043 0302 	orr.w	r3, r3, #2
 800e8aa:	b29a      	uxth	r2, r3
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2208      	movs	r2, #8
 800e8b4:	751a      	strb	r2, [r3, #20]
      break;
 800e8b6:	e0c7      	b.n	800ea48 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e8b8:	4b6b      	ldr	r3, [pc, #428]	@ (800ea68 <tcp_process+0x7d0>)
 800e8ba:	781b      	ldrb	r3, [r3, #0]
 800e8bc:	f003 0310 	and.w	r3, r3, #16
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	f000 80c1 	beq.w	800ea48 <tcp_process+0x7b0>
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e8ca:	4b68      	ldr	r3, [pc, #416]	@ (800ea6c <tcp_process+0x7d4>)
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	429a      	cmp	r2, r3
 800e8d0:	f040 80ba 	bne.w	800ea48 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	f040 80b5 	bne.w	800ea48 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	2206      	movs	r2, #6
 800e8e2:	751a      	strb	r2, [r3, #20]
      break;
 800e8e4:	e0b0      	b.n	800ea48 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e8e6:	6878      	ldr	r0, [r7, #4]
 800e8e8:	f000 f9ca 	bl	800ec80 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e8ec:	4b60      	ldr	r3, [pc, #384]	@ (800ea70 <tcp_process+0x7d8>)
 800e8ee:	781b      	ldrb	r3, [r3, #0]
 800e8f0:	f003 0320 	and.w	r3, r3, #32
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	f000 80a9 	beq.w	800ea4c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	8b5b      	ldrh	r3, [r3, #26]
 800e8fe:	f043 0302 	orr.w	r3, r3, #2
 800e902:	b29a      	uxth	r2, r3
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e908:	6878      	ldr	r0, [r7, #4]
 800e90a:	f7fe fd39 	bl	800d380 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e90e:	4b59      	ldr	r3, [pc, #356]	@ (800ea74 <tcp_process+0x7dc>)
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	687a      	ldr	r2, [r7, #4]
 800e914:	429a      	cmp	r2, r3
 800e916:	d105      	bne.n	800e924 <tcp_process+0x68c>
 800e918:	4b56      	ldr	r3, [pc, #344]	@ (800ea74 <tcp_process+0x7dc>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	68db      	ldr	r3, [r3, #12]
 800e91e:	4a55      	ldr	r2, [pc, #340]	@ (800ea74 <tcp_process+0x7dc>)
 800e920:	6013      	str	r3, [r2, #0]
 800e922:	e013      	b.n	800e94c <tcp_process+0x6b4>
 800e924:	4b53      	ldr	r3, [pc, #332]	@ (800ea74 <tcp_process+0x7dc>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	613b      	str	r3, [r7, #16]
 800e92a:	e00c      	b.n	800e946 <tcp_process+0x6ae>
 800e92c:	693b      	ldr	r3, [r7, #16]
 800e92e:	68db      	ldr	r3, [r3, #12]
 800e930:	687a      	ldr	r2, [r7, #4]
 800e932:	429a      	cmp	r2, r3
 800e934:	d104      	bne.n	800e940 <tcp_process+0x6a8>
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	68da      	ldr	r2, [r3, #12]
 800e93a:	693b      	ldr	r3, [r7, #16]
 800e93c:	60da      	str	r2, [r3, #12]
 800e93e:	e005      	b.n	800e94c <tcp_process+0x6b4>
 800e940:	693b      	ldr	r3, [r7, #16]
 800e942:	68db      	ldr	r3, [r3, #12]
 800e944:	613b      	str	r3, [r7, #16]
 800e946:	693b      	ldr	r3, [r7, #16]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d1ef      	bne.n	800e92c <tcp_process+0x694>
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2200      	movs	r2, #0
 800e950:	60da      	str	r2, [r3, #12]
 800e952:	4b43      	ldr	r3, [pc, #268]	@ (800ea60 <tcp_process+0x7c8>)
 800e954:	2201      	movs	r2, #1
 800e956:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	220a      	movs	r2, #10
 800e95c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e95e:	4b41      	ldr	r3, [pc, #260]	@ (800ea64 <tcp_process+0x7cc>)
 800e960:	681a      	ldr	r2, [r3, #0]
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	60da      	str	r2, [r3, #12]
 800e966:	4a3f      	ldr	r2, [pc, #252]	@ (800ea64 <tcp_process+0x7cc>)
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	6013      	str	r3, [r2, #0]
 800e96c:	f002 fc8c 	bl	8011288 <tcp_timer_needed>
      }
      break;
 800e970:	e06c      	b.n	800ea4c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f000 f984 	bl	800ec80 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e978:	4b3b      	ldr	r3, [pc, #236]	@ (800ea68 <tcp_process+0x7d0>)
 800e97a:	781b      	ldrb	r3, [r3, #0]
 800e97c:	f003 0310 	and.w	r3, r3, #16
 800e980:	2b00      	cmp	r3, #0
 800e982:	d065      	beq.n	800ea50 <tcp_process+0x7b8>
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e988:	4b38      	ldr	r3, [pc, #224]	@ (800ea6c <tcp_process+0x7d4>)
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	429a      	cmp	r2, r3
 800e98e:	d15f      	bne.n	800ea50 <tcp_process+0x7b8>
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e994:	2b00      	cmp	r3, #0
 800e996:	d15b      	bne.n	800ea50 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800e998:	6878      	ldr	r0, [r7, #4]
 800e99a:	f7fe fcf1 	bl	800d380 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e99e:	4b35      	ldr	r3, [pc, #212]	@ (800ea74 <tcp_process+0x7dc>)
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	687a      	ldr	r2, [r7, #4]
 800e9a4:	429a      	cmp	r2, r3
 800e9a6:	d105      	bne.n	800e9b4 <tcp_process+0x71c>
 800e9a8:	4b32      	ldr	r3, [pc, #200]	@ (800ea74 <tcp_process+0x7dc>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	68db      	ldr	r3, [r3, #12]
 800e9ae:	4a31      	ldr	r2, [pc, #196]	@ (800ea74 <tcp_process+0x7dc>)
 800e9b0:	6013      	str	r3, [r2, #0]
 800e9b2:	e013      	b.n	800e9dc <tcp_process+0x744>
 800e9b4:	4b2f      	ldr	r3, [pc, #188]	@ (800ea74 <tcp_process+0x7dc>)
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	60fb      	str	r3, [r7, #12]
 800e9ba:	e00c      	b.n	800e9d6 <tcp_process+0x73e>
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	68db      	ldr	r3, [r3, #12]
 800e9c0:	687a      	ldr	r2, [r7, #4]
 800e9c2:	429a      	cmp	r2, r3
 800e9c4:	d104      	bne.n	800e9d0 <tcp_process+0x738>
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	68da      	ldr	r2, [r3, #12]
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	60da      	str	r2, [r3, #12]
 800e9ce:	e005      	b.n	800e9dc <tcp_process+0x744>
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	68db      	ldr	r3, [r3, #12]
 800e9d4:	60fb      	str	r3, [r7, #12]
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d1ef      	bne.n	800e9bc <tcp_process+0x724>
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2200      	movs	r2, #0
 800e9e0:	60da      	str	r2, [r3, #12]
 800e9e2:	4b1f      	ldr	r3, [pc, #124]	@ (800ea60 <tcp_process+0x7c8>)
 800e9e4:	2201      	movs	r2, #1
 800e9e6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	220a      	movs	r2, #10
 800e9ec:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e9ee:	4b1d      	ldr	r3, [pc, #116]	@ (800ea64 <tcp_process+0x7cc>)
 800e9f0:	681a      	ldr	r2, [r3, #0]
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	60da      	str	r2, [r3, #12]
 800e9f6:	4a1b      	ldr	r2, [pc, #108]	@ (800ea64 <tcp_process+0x7cc>)
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	6013      	str	r3, [r2, #0]
 800e9fc:	f002 fc44 	bl	8011288 <tcp_timer_needed>
      }
      break;
 800ea00:	e026      	b.n	800ea50 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ea02:	6878      	ldr	r0, [r7, #4]
 800ea04:	f000 f93c 	bl	800ec80 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ea08:	4b17      	ldr	r3, [pc, #92]	@ (800ea68 <tcp_process+0x7d0>)
 800ea0a:	781b      	ldrb	r3, [r3, #0]
 800ea0c:	f003 0310 	and.w	r3, r3, #16
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d01f      	beq.n	800ea54 <tcp_process+0x7bc>
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ea18:	4b14      	ldr	r3, [pc, #80]	@ (800ea6c <tcp_process+0x7d4>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	429a      	cmp	r2, r3
 800ea1e:	d119      	bne.n	800ea54 <tcp_process+0x7bc>
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d115      	bne.n	800ea54 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ea28:	4b11      	ldr	r3, [pc, #68]	@ (800ea70 <tcp_process+0x7d8>)
 800ea2a:	781b      	ldrb	r3, [r3, #0]
 800ea2c:	f043 0310 	orr.w	r3, r3, #16
 800ea30:	b2da      	uxtb	r2, r3
 800ea32:	4b0f      	ldr	r3, [pc, #60]	@ (800ea70 <tcp_process+0x7d8>)
 800ea34:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ea36:	e00d      	b.n	800ea54 <tcp_process+0x7bc>
    default:
      break;
 800ea38:	bf00      	nop
 800ea3a:	e00c      	b.n	800ea56 <tcp_process+0x7be>
      break;
 800ea3c:	bf00      	nop
 800ea3e:	e00a      	b.n	800ea56 <tcp_process+0x7be>
      break;
 800ea40:	bf00      	nop
 800ea42:	e008      	b.n	800ea56 <tcp_process+0x7be>
      break;
 800ea44:	bf00      	nop
 800ea46:	e006      	b.n	800ea56 <tcp_process+0x7be>
      break;
 800ea48:	bf00      	nop
 800ea4a:	e004      	b.n	800ea56 <tcp_process+0x7be>
      break;
 800ea4c:	bf00      	nop
 800ea4e:	e002      	b.n	800ea56 <tcp_process+0x7be>
      break;
 800ea50:	bf00      	nop
 800ea52:	e000      	b.n	800ea56 <tcp_process+0x7be>
      break;
 800ea54:	bf00      	nop
  }
  return ERR_OK;
 800ea56:	2300      	movs	r3, #0
}
 800ea58:	4618      	mov	r0, r3
 800ea5a:	3724      	adds	r7, #36	@ 0x24
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd90      	pop	{r4, r7, pc}
 800ea60:	2000cad4 	.word	0x2000cad4
 800ea64:	2000cad0 	.word	0x2000cad0
 800ea68:	2000cb04 	.word	0x2000cb04
 800ea6c:	2000cafc 	.word	0x2000cafc
 800ea70:	2000cb05 	.word	0x2000cb05
 800ea74:	2000cacc 	.word	0x2000cacc

0800ea78 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ea78:	b590      	push	{r4, r7, lr}
 800ea7a:	b085      	sub	sp, #20
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
 800ea80:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d106      	bne.n	800ea96 <tcp_oos_insert_segment+0x1e>
 800ea88:	4b3b      	ldr	r3, [pc, #236]	@ (800eb78 <tcp_oos_insert_segment+0x100>)
 800ea8a:	f240 421f 	movw	r2, #1055	@ 0x41f
 800ea8e:	493b      	ldr	r1, [pc, #236]	@ (800eb7c <tcp_oos_insert_segment+0x104>)
 800ea90:	483b      	ldr	r0, [pc, #236]	@ (800eb80 <tcp_oos_insert_segment+0x108>)
 800ea92:	f008 fae1 	bl	8017058 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	68db      	ldr	r3, [r3, #12]
 800ea9a:	899b      	ldrh	r3, [r3, #12]
 800ea9c:	b29b      	uxth	r3, r3
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	f7fb fa9c 	bl	8009fdc <lwip_htons>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	b2db      	uxtb	r3, r3
 800eaa8:	f003 0301 	and.w	r3, r3, #1
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d028      	beq.n	800eb02 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800eab0:	6838      	ldr	r0, [r7, #0]
 800eab2:	f7fe fa63 	bl	800cf7c <tcp_segs_free>
    next = NULL;
 800eab6:	2300      	movs	r3, #0
 800eab8:	603b      	str	r3, [r7, #0]
 800eaba:	e056      	b.n	800eb6a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	68db      	ldr	r3, [r3, #12]
 800eac0:	899b      	ldrh	r3, [r3, #12]
 800eac2:	b29b      	uxth	r3, r3
 800eac4:	4618      	mov	r0, r3
 800eac6:	f7fb fa89 	bl	8009fdc <lwip_htons>
 800eaca:	4603      	mov	r3, r0
 800eacc:	b2db      	uxtb	r3, r3
 800eace:	f003 0301 	and.w	r3, r3, #1
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d00d      	beq.n	800eaf2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	68db      	ldr	r3, [r3, #12]
 800eada:	899b      	ldrh	r3, [r3, #12]
 800eadc:	b29c      	uxth	r4, r3
 800eade:	2001      	movs	r0, #1
 800eae0:	f7fb fa7c 	bl	8009fdc <lwip_htons>
 800eae4:	4603      	mov	r3, r0
 800eae6:	461a      	mov	r2, r3
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	68db      	ldr	r3, [r3, #12]
 800eaec:	4322      	orrs	r2, r4
 800eaee:	b292      	uxth	r2, r2
 800eaf0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800eaf2:	683b      	ldr	r3, [r7, #0]
 800eaf4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800eafc:	68f8      	ldr	r0, [r7, #12]
 800eafe:	f7fe fa52 	bl	800cfa6 <tcp_seg_free>
    while (next &&
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d00e      	beq.n	800eb26 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	891b      	ldrh	r3, [r3, #8]
 800eb0c:	461a      	mov	r2, r3
 800eb0e:	4b1d      	ldr	r3, [pc, #116]	@ (800eb84 <tcp_oos_insert_segment+0x10c>)
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	441a      	add	r2, r3
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	68db      	ldr	r3, [r3, #12]
 800eb18:	685b      	ldr	r3, [r3, #4]
 800eb1a:	6839      	ldr	r1, [r7, #0]
 800eb1c:	8909      	ldrh	r1, [r1, #8]
 800eb1e:	440b      	add	r3, r1
 800eb20:	1ad3      	subs	r3, r2, r3
    while (next &&
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	daca      	bge.n	800eabc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d01e      	beq.n	800eb6a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	891b      	ldrh	r3, [r3, #8]
 800eb30:	461a      	mov	r2, r3
 800eb32:	4b14      	ldr	r3, [pc, #80]	@ (800eb84 <tcp_oos_insert_segment+0x10c>)
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	441a      	add	r2, r3
 800eb38:	683b      	ldr	r3, [r7, #0]
 800eb3a:	68db      	ldr	r3, [r3, #12]
 800eb3c:	685b      	ldr	r3, [r3, #4]
 800eb3e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	dd12      	ble.n	800eb6a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	68db      	ldr	r3, [r3, #12]
 800eb48:	685b      	ldr	r3, [r3, #4]
 800eb4a:	b29a      	uxth	r2, r3
 800eb4c:	4b0d      	ldr	r3, [pc, #52]	@ (800eb84 <tcp_oos_insert_segment+0x10c>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	b29b      	uxth	r3, r3
 800eb52:	1ad3      	subs	r3, r2, r3
 800eb54:	b29a      	uxth	r2, r3
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	685a      	ldr	r2, [r3, #4]
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	891b      	ldrh	r3, [r3, #8]
 800eb62:	4619      	mov	r1, r3
 800eb64:	4610      	mov	r0, r2
 800eb66:	f7fc fe07 	bl	800b778 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	683a      	ldr	r2, [r7, #0]
 800eb6e:	601a      	str	r2, [r3, #0]
}
 800eb70:	bf00      	nop
 800eb72:	3714      	adds	r7, #20
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd90      	pop	{r4, r7, pc}
 800eb78:	080198b0 	.word	0x080198b0
 800eb7c:	08019b70 	.word	0x08019b70
 800eb80:	080198fc 	.word	0x080198fc
 800eb84:	2000caf8 	.word	0x2000caf8

0800eb88 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800eb88:	b5b0      	push	{r4, r5, r7, lr}
 800eb8a:	b086      	sub	sp, #24
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	60f8      	str	r0, [r7, #12]
 800eb90:	60b9      	str	r1, [r7, #8]
 800eb92:	607a      	str	r2, [r7, #4]
 800eb94:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800eb96:	e03e      	b.n	800ec16 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800eb98:	68bb      	ldr	r3, [r7, #8]
 800eb9a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800eb9c:	68bb      	ldr	r3, [r7, #8]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800eba2:	697b      	ldr	r3, [r7, #20]
 800eba4:	685b      	ldr	r3, [r3, #4]
 800eba6:	4618      	mov	r0, r3
 800eba8:	f7fc fffa 	bl	800bba0 <pbuf_clen>
 800ebac:	4603      	mov	r3, r0
 800ebae:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ebb6:	8a7a      	ldrh	r2, [r7, #18]
 800ebb8:	429a      	cmp	r2, r3
 800ebba:	d906      	bls.n	800ebca <tcp_free_acked_segments+0x42>
 800ebbc:	4b2a      	ldr	r3, [pc, #168]	@ (800ec68 <tcp_free_acked_segments+0xe0>)
 800ebbe:	f240 4257 	movw	r2, #1111	@ 0x457
 800ebc2:	492a      	ldr	r1, [pc, #168]	@ (800ec6c <tcp_free_acked_segments+0xe4>)
 800ebc4:	482a      	ldr	r0, [pc, #168]	@ (800ec70 <tcp_free_acked_segments+0xe8>)
 800ebc6:	f008 fa47 	bl	8017058 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800ebd0:	8a7b      	ldrh	r3, [r7, #18]
 800ebd2:	1ad3      	subs	r3, r2, r3
 800ebd4:	b29a      	uxth	r2, r3
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ebdc:	697b      	ldr	r3, [r7, #20]
 800ebde:	891a      	ldrh	r2, [r3, #8]
 800ebe0:	4b24      	ldr	r3, [pc, #144]	@ (800ec74 <tcp_free_acked_segments+0xec>)
 800ebe2:	881b      	ldrh	r3, [r3, #0]
 800ebe4:	4413      	add	r3, r2
 800ebe6:	b29a      	uxth	r2, r3
 800ebe8:	4b22      	ldr	r3, [pc, #136]	@ (800ec74 <tcp_free_acked_segments+0xec>)
 800ebea:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ebec:	6978      	ldr	r0, [r7, #20]
 800ebee:	f7fe f9da 	bl	800cfa6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d00c      	beq.n	800ec16 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d109      	bne.n	800ec16 <tcp_free_acked_segments+0x8e>
 800ec02:	683b      	ldr	r3, [r7, #0]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d106      	bne.n	800ec16 <tcp_free_acked_segments+0x8e>
 800ec08:	4b17      	ldr	r3, [pc, #92]	@ (800ec68 <tcp_free_acked_segments+0xe0>)
 800ec0a:	f240 4261 	movw	r2, #1121	@ 0x461
 800ec0e:	491a      	ldr	r1, [pc, #104]	@ (800ec78 <tcp_free_acked_segments+0xf0>)
 800ec10:	4817      	ldr	r0, [pc, #92]	@ (800ec70 <tcp_free_acked_segments+0xe8>)
 800ec12:	f008 fa21 	bl	8017058 <iprintf>
  while (seg_list != NULL &&
 800ec16:	68bb      	ldr	r3, [r7, #8]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d020      	beq.n	800ec5e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ec1c:	68bb      	ldr	r3, [r7, #8]
 800ec1e:	68db      	ldr	r3, [r3, #12]
 800ec20:	685b      	ldr	r3, [r3, #4]
 800ec22:	4618      	mov	r0, r3
 800ec24:	f7fb f9ef 	bl	800a006 <lwip_htonl>
 800ec28:	4604      	mov	r4, r0
 800ec2a:	68bb      	ldr	r3, [r7, #8]
 800ec2c:	891b      	ldrh	r3, [r3, #8]
 800ec2e:	461d      	mov	r5, r3
 800ec30:	68bb      	ldr	r3, [r7, #8]
 800ec32:	68db      	ldr	r3, [r3, #12]
 800ec34:	899b      	ldrh	r3, [r3, #12]
 800ec36:	b29b      	uxth	r3, r3
 800ec38:	4618      	mov	r0, r3
 800ec3a:	f7fb f9cf 	bl	8009fdc <lwip_htons>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	b2db      	uxtb	r3, r3
 800ec42:	f003 0303 	and.w	r3, r3, #3
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d001      	beq.n	800ec4e <tcp_free_acked_segments+0xc6>
 800ec4a:	2301      	movs	r3, #1
 800ec4c:	e000      	b.n	800ec50 <tcp_free_acked_segments+0xc8>
 800ec4e:	2300      	movs	r3, #0
 800ec50:	442b      	add	r3, r5
 800ec52:	18e2      	adds	r2, r4, r3
 800ec54:	4b09      	ldr	r3, [pc, #36]	@ (800ec7c <tcp_free_acked_segments+0xf4>)
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	dd9c      	ble.n	800eb98 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ec5e:	68bb      	ldr	r3, [r7, #8]
}
 800ec60:	4618      	mov	r0, r3
 800ec62:	3718      	adds	r7, #24
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bdb0      	pop	{r4, r5, r7, pc}
 800ec68:	080198b0 	.word	0x080198b0
 800ec6c:	08019b98 	.word	0x08019b98
 800ec70:	080198fc 	.word	0x080198fc
 800ec74:	2000cb00 	.word	0x2000cb00
 800ec78:	08019bc0 	.word	0x08019bc0
 800ec7c:	2000cafc 	.word	0x2000cafc

0800ec80 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ec80:	b5b0      	push	{r4, r5, r7, lr}
 800ec82:	b094      	sub	sp, #80	@ 0x50
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ec88:	2300      	movs	r3, #0
 800ec8a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d106      	bne.n	800eca0 <tcp_receive+0x20>
 800ec92:	4b91      	ldr	r3, [pc, #580]	@ (800eed8 <tcp_receive+0x258>)
 800ec94:	f240 427b 	movw	r2, #1147	@ 0x47b
 800ec98:	4990      	ldr	r1, [pc, #576]	@ (800eedc <tcp_receive+0x25c>)
 800ec9a:	4891      	ldr	r0, [pc, #580]	@ (800eee0 <tcp_receive+0x260>)
 800ec9c:	f008 f9dc 	bl	8017058 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	7d1b      	ldrb	r3, [r3, #20]
 800eca4:	2b03      	cmp	r3, #3
 800eca6:	d806      	bhi.n	800ecb6 <tcp_receive+0x36>
 800eca8:	4b8b      	ldr	r3, [pc, #556]	@ (800eed8 <tcp_receive+0x258>)
 800ecaa:	f240 427c 	movw	r2, #1148	@ 0x47c
 800ecae:	498d      	ldr	r1, [pc, #564]	@ (800eee4 <tcp_receive+0x264>)
 800ecb0:	488b      	ldr	r0, [pc, #556]	@ (800eee0 <tcp_receive+0x260>)
 800ecb2:	f008 f9d1 	bl	8017058 <iprintf>

  if (flags & TCP_ACK) {
 800ecb6:	4b8c      	ldr	r3, [pc, #560]	@ (800eee8 <tcp_receive+0x268>)
 800ecb8:	781b      	ldrb	r3, [r3, #0]
 800ecba:	f003 0310 	and.w	r3, r3, #16
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	f000 8264 	beq.w	800f18c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ecca:	461a      	mov	r2, r3
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ecd0:	4413      	add	r3, r2
 800ecd2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ecd8:	4b84      	ldr	r3, [pc, #528]	@ (800eeec <tcp_receive+0x26c>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	1ad3      	subs	r3, r2, r3
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	db1b      	blt.n	800ed1a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ece6:	4b81      	ldr	r3, [pc, #516]	@ (800eeec <tcp_receive+0x26c>)
 800ece8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ecea:	429a      	cmp	r2, r3
 800ecec:	d106      	bne.n	800ecfc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ecf2:	4b7f      	ldr	r3, [pc, #508]	@ (800eef0 <tcp_receive+0x270>)
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	1ad3      	subs	r3, r2, r3
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	db0e      	blt.n	800ed1a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ed00:	4b7b      	ldr	r3, [pc, #492]	@ (800eef0 <tcp_receive+0x270>)
 800ed02:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ed04:	429a      	cmp	r2, r3
 800ed06:	d125      	bne.n	800ed54 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ed08:	4b7a      	ldr	r3, [pc, #488]	@ (800eef4 <tcp_receive+0x274>)
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	89db      	ldrh	r3, [r3, #14]
 800ed0e:	b29a      	uxth	r2, r3
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ed16:	429a      	cmp	r2, r3
 800ed18:	d91c      	bls.n	800ed54 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ed1a:	4b76      	ldr	r3, [pc, #472]	@ (800eef4 <tcp_receive+0x274>)
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	89db      	ldrh	r3, [r3, #14]
 800ed20:	b29a      	uxth	r2, r3
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ed34:	429a      	cmp	r2, r3
 800ed36:	d205      	bcs.n	800ed44 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800ed44:	4b69      	ldr	r3, [pc, #420]	@ (800eeec <tcp_receive+0x26c>)
 800ed46:	681a      	ldr	r2, [r3, #0]
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800ed4c:	4b68      	ldr	r3, [pc, #416]	@ (800eef0 <tcp_receive+0x270>)
 800ed4e:	681a      	ldr	r2, [r3, #0]
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ed54:	4b66      	ldr	r3, [pc, #408]	@ (800eef0 <tcp_receive+0x270>)
 800ed56:	681a      	ldr	r2, [r3, #0]
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed5c:	1ad3      	subs	r3, r2, r3
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	dc58      	bgt.n	800ee14 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ed62:	4b65      	ldr	r3, [pc, #404]	@ (800eef8 <tcp_receive+0x278>)
 800ed64:	881b      	ldrh	r3, [r3, #0]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d14b      	bne.n	800ee02 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed6e:	687a      	ldr	r2, [r7, #4]
 800ed70:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800ed74:	4413      	add	r3, r2
 800ed76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed78:	429a      	cmp	r2, r3
 800ed7a:	d142      	bne.n	800ee02 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	db3d      	blt.n	800ee02 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ed8a:	4b59      	ldr	r3, [pc, #356]	@ (800eef0 <tcp_receive+0x270>)
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	429a      	cmp	r2, r3
 800ed90:	d137      	bne.n	800ee02 <tcp_receive+0x182>
              found_dupack = 1;
 800ed92:	2301      	movs	r3, #1
 800ed94:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ed9c:	2bff      	cmp	r3, #255	@ 0xff
 800ed9e:	d007      	beq.n	800edb0 <tcp_receive+0x130>
                ++pcb->dupacks;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800eda6:	3301      	adds	r3, #1
 800eda8:	b2da      	uxtb	r2, r3
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800edb6:	2b03      	cmp	r3, #3
 800edb8:	d91b      	bls.n	800edf2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800edc4:	4413      	add	r3, r2
 800edc6:	b29a      	uxth	r2, r3
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800edce:	429a      	cmp	r2, r3
 800edd0:	d30a      	bcc.n	800ede8 <tcp_receive+0x168>
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eddc:	4413      	add	r3, r2
 800edde:	b29a      	uxth	r2, r3
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800ede6:	e004      	b.n	800edf2 <tcp_receive+0x172>
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800edee:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800edf8:	2b02      	cmp	r3, #2
 800edfa:	d902      	bls.n	800ee02 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f001 fee7 	bl	8010bd0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800ee02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	f040 8161 	bne.w	800f0cc <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ee12:	e15b      	b.n	800f0cc <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ee14:	4b36      	ldr	r3, [pc, #216]	@ (800eef0 <tcp_receive+0x270>)
 800ee16:	681a      	ldr	r2, [r3, #0]
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee1c:	1ad3      	subs	r3, r2, r3
 800ee1e:	3b01      	subs	r3, #1
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	f2c0 814e 	blt.w	800f0c2 <tcp_receive+0x442>
 800ee26:	4b32      	ldr	r3, [pc, #200]	@ (800eef0 <tcp_receive+0x270>)
 800ee28:	681a      	ldr	r2, [r3, #0]
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee2e:	1ad3      	subs	r3, r2, r3
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	f300 8146 	bgt.w	800f0c2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	8b5b      	ldrh	r3, [r3, #26]
 800ee3a:	f003 0304 	and.w	r3, r3, #4
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d010      	beq.n	800ee64 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	8b5b      	ldrh	r3, [r3, #26]
 800ee46:	f023 0304 	bic.w	r3, r3, #4
 800ee4a:	b29a      	uxth	r2, r3
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	2200      	movs	r2, #0
 800ee60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2200      	movs	r2, #0
 800ee68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ee72:	10db      	asrs	r3, r3, #3
 800ee74:	b21b      	sxth	r3, r3
 800ee76:	b29a      	uxth	r2, r3
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ee7e:	b29b      	uxth	r3, r3
 800ee80:	4413      	add	r3, r2
 800ee82:	b29b      	uxth	r3, r3
 800ee84:	b21a      	sxth	r2, r3
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800ee8c:	4b18      	ldr	r3, [pc, #96]	@ (800eef0 <tcp_receive+0x270>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	b29a      	uxth	r2, r3
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee96:	b29b      	uxth	r3, r3
 800ee98:	1ad3      	subs	r3, r2, r3
 800ee9a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	2200      	movs	r2, #0
 800eea0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800eea4:	4b12      	ldr	r3, [pc, #72]	@ (800eef0 <tcp_receive+0x270>)
 800eea6:	681a      	ldr	r2, [r3, #0]
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	7d1b      	ldrb	r3, [r3, #20]
 800eeb0:	2b03      	cmp	r3, #3
 800eeb2:	f240 8097 	bls.w	800efe4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800eec2:	429a      	cmp	r2, r3
 800eec4:	d245      	bcs.n	800ef52 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	8b5b      	ldrh	r3, [r3, #26]
 800eeca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d014      	beq.n	800eefc <tcp_receive+0x27c>
 800eed2:	2301      	movs	r3, #1
 800eed4:	e013      	b.n	800eefe <tcp_receive+0x27e>
 800eed6:	bf00      	nop
 800eed8:	080198b0 	.word	0x080198b0
 800eedc:	08019be0 	.word	0x08019be0
 800eee0:	080198fc 	.word	0x080198fc
 800eee4:	08019bfc 	.word	0x08019bfc
 800eee8:	2000cb04 	.word	0x2000cb04
 800eeec:	2000caf8 	.word	0x2000caf8
 800eef0:	2000cafc 	.word	0x2000cafc
 800eef4:	2000cae8 	.word	0x2000cae8
 800eef8:	2000cb02 	.word	0x2000cb02
 800eefc:	2302      	movs	r3, #2
 800eefe:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ef02:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800ef06:	b29a      	uxth	r2, r3
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ef0c:	fb12 f303 	smulbb	r3, r2, r3
 800ef10:	b29b      	uxth	r3, r3
 800ef12:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ef14:	4293      	cmp	r3, r2
 800ef16:	bf28      	it	cs
 800ef18:	4613      	movcs	r3, r2
 800ef1a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ef22:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ef24:	4413      	add	r3, r2
 800ef26:	b29a      	uxth	r2, r3
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ef2e:	429a      	cmp	r2, r3
 800ef30:	d309      	bcc.n	800ef46 <tcp_receive+0x2c6>
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ef38:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ef3a:	4413      	add	r3, r2
 800ef3c:	b29a      	uxth	r2, r3
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800ef44:	e04e      	b.n	800efe4 <tcp_receive+0x364>
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ef4c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800ef50:	e048      	b.n	800efe4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800ef58:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ef5a:	4413      	add	r3, r2
 800ef5c:	b29a      	uxth	r2, r3
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ef64:	429a      	cmp	r2, r3
 800ef66:	d309      	bcc.n	800ef7c <tcp_receive+0x2fc>
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800ef6e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ef70:	4413      	add	r3, r2
 800ef72:	b29a      	uxth	r2, r3
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ef7a:	e004      	b.n	800ef86 <tcp_receive+0x306>
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ef82:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ef92:	429a      	cmp	r2, r3
 800ef94:	d326      	bcc.n	800efe4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800efa2:	1ad3      	subs	r3, r2, r3
 800efa4:	b29a      	uxth	r2, r3
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800efb6:	4413      	add	r3, r2
 800efb8:	b29a      	uxth	r2, r3
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d30a      	bcc.n	800efda <tcp_receive+0x35a>
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800efce:	4413      	add	r3, r2
 800efd0:	b29a      	uxth	r2, r3
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800efd8:	e004      	b.n	800efe4 <tcp_receive+0x364>
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800efe0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800efec:	4a98      	ldr	r2, [pc, #608]	@ (800f250 <tcp_receive+0x5d0>)
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	f7ff fdca 	bl	800eb88 <tcp_free_acked_segments>
 800eff4:	4602      	mov	r2, r0
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f002:	4a94      	ldr	r2, [pc, #592]	@ (800f254 <tcp_receive+0x5d4>)
 800f004:	6878      	ldr	r0, [r7, #4]
 800f006:	f7ff fdbf 	bl	800eb88 <tcp_free_acked_segments>
 800f00a:	4602      	mov	r2, r0
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f014:	2b00      	cmp	r3, #0
 800f016:	d104      	bne.n	800f022 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f01e:	861a      	strh	r2, [r3, #48]	@ 0x30
 800f020:	e002      	b.n	800f028 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	2200      	movs	r2, #0
 800f026:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2200      	movs	r2, #0
 800f02c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f032:	2b00      	cmp	r3, #0
 800f034:	d103      	bne.n	800f03e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2200      	movs	r2, #0
 800f03a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800f044:	4b84      	ldr	r3, [pc, #528]	@ (800f258 <tcp_receive+0x5d8>)
 800f046:	881b      	ldrh	r3, [r3, #0]
 800f048:	4413      	add	r3, r2
 800f04a:	b29a      	uxth	r2, r3
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	8b5b      	ldrh	r3, [r3, #26]
 800f056:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d035      	beq.n	800f0ca <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f062:	2b00      	cmp	r3, #0
 800f064:	d118      	bne.n	800f098 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d00c      	beq.n	800f088 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f076:	68db      	ldr	r3, [r3, #12]
 800f078:	685b      	ldr	r3, [r3, #4]
 800f07a:	4618      	mov	r0, r3
 800f07c:	f7fa ffc3 	bl	800a006 <lwip_htonl>
 800f080:	4603      	mov	r3, r0
 800f082:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f084:	2b00      	cmp	r3, #0
 800f086:	dc20      	bgt.n	800f0ca <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	8b5b      	ldrh	r3, [r3, #26]
 800f08c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f090:	b29a      	uxth	r2, r3
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f096:	e018      	b.n	800f0ca <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f0a0:	68db      	ldr	r3, [r3, #12]
 800f0a2:	685b      	ldr	r3, [r3, #4]
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f7fa ffae 	bl	800a006 <lwip_htonl>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	1ae3      	subs	r3, r4, r3
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	dc0b      	bgt.n	800f0ca <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	8b5b      	ldrh	r3, [r3, #26]
 800f0b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f0ba:	b29a      	uxth	r2, r3
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f0c0:	e003      	b.n	800f0ca <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f0c2:	6878      	ldr	r0, [r7, #4]
 800f0c4:	f001 ff70 	bl	8010fa8 <tcp_send_empty_ack>
 800f0c8:	e000      	b.n	800f0cc <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f0ca:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d05b      	beq.n	800f18c <tcp_receive+0x50c>
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f0d8:	4b60      	ldr	r3, [pc, #384]	@ (800f25c <tcp_receive+0x5dc>)
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	1ad3      	subs	r3, r2, r3
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	da54      	bge.n	800f18c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f0e2:	4b5f      	ldr	r3, [pc, #380]	@ (800f260 <tcp_receive+0x5e0>)
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	b29a      	uxth	r2, r3
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f0ec:	b29b      	uxth	r3, r3
 800f0ee:	1ad3      	subs	r3, r2, r3
 800f0f0:	b29b      	uxth	r3, r3
 800f0f2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f0f6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f100:	10db      	asrs	r3, r3, #3
 800f102:	b21b      	sxth	r3, r3
 800f104:	b29b      	uxth	r3, r3
 800f106:	1ad3      	subs	r3, r2, r3
 800f108:	b29b      	uxth	r3, r3
 800f10a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f114:	b29a      	uxth	r2, r3
 800f116:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f11a:	4413      	add	r3, r2
 800f11c:	b29b      	uxth	r3, r3
 800f11e:	b21a      	sxth	r2, r3
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800f124:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800f128:	2b00      	cmp	r3, #0
 800f12a:	da05      	bge.n	800f138 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800f12c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f130:	425b      	negs	r3, r3
 800f132:	b29b      	uxth	r3, r3
 800f134:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f138:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f142:	109b      	asrs	r3, r3, #2
 800f144:	b21b      	sxth	r3, r3
 800f146:	b29b      	uxth	r3, r3
 800f148:	1ad3      	subs	r3, r2, r3
 800f14a:	b29b      	uxth	r3, r3
 800f14c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f156:	b29a      	uxth	r2, r3
 800f158:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f15c:	4413      	add	r3, r2
 800f15e:	b29b      	uxth	r3, r3
 800f160:	b21a      	sxth	r2, r3
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f16c:	10db      	asrs	r3, r3, #3
 800f16e:	b21b      	sxth	r3, r3
 800f170:	b29a      	uxth	r2, r3
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f178:	b29b      	uxth	r3, r3
 800f17a:	4413      	add	r3, r2
 800f17c:	b29b      	uxth	r3, r3
 800f17e:	b21a      	sxth	r2, r3
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2200      	movs	r2, #0
 800f18a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f18c:	4b35      	ldr	r3, [pc, #212]	@ (800f264 <tcp_receive+0x5e4>)
 800f18e:	881b      	ldrh	r3, [r3, #0]
 800f190:	2b00      	cmp	r3, #0
 800f192:	f000 84df 	beq.w	800fb54 <tcp_receive+0xed4>
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	7d1b      	ldrb	r3, [r3, #20]
 800f19a:	2b06      	cmp	r3, #6
 800f19c:	f200 84da 	bhi.w	800fb54 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f1a4:	4b30      	ldr	r3, [pc, #192]	@ (800f268 <tcp_receive+0x5e8>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	1ad3      	subs	r3, r2, r3
 800f1aa:	3b01      	subs	r3, #1
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	f2c0 808f 	blt.w	800f2d0 <tcp_receive+0x650>
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f1b6:	4b2b      	ldr	r3, [pc, #172]	@ (800f264 <tcp_receive+0x5e4>)
 800f1b8:	881b      	ldrh	r3, [r3, #0]
 800f1ba:	4619      	mov	r1, r3
 800f1bc:	4b2a      	ldr	r3, [pc, #168]	@ (800f268 <tcp_receive+0x5e8>)
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	440b      	add	r3, r1
 800f1c2:	1ad3      	subs	r3, r2, r3
 800f1c4:	3301      	adds	r3, #1
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	f300 8082 	bgt.w	800f2d0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f1cc:	4b27      	ldr	r3, [pc, #156]	@ (800f26c <tcp_receive+0x5ec>)
 800f1ce:	685b      	ldr	r3, [r3, #4]
 800f1d0:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f1d6:	4b24      	ldr	r3, [pc, #144]	@ (800f268 <tcp_receive+0x5e8>)
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	1ad3      	subs	r3, r2, r3
 800f1dc:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f1de:	4b23      	ldr	r3, [pc, #140]	@ (800f26c <tcp_receive+0x5ec>)
 800f1e0:	685b      	ldr	r3, [r3, #4]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d106      	bne.n	800f1f4 <tcp_receive+0x574>
 800f1e6:	4b22      	ldr	r3, [pc, #136]	@ (800f270 <tcp_receive+0x5f0>)
 800f1e8:	f240 5294 	movw	r2, #1428	@ 0x594
 800f1ec:	4921      	ldr	r1, [pc, #132]	@ (800f274 <tcp_receive+0x5f4>)
 800f1ee:	4822      	ldr	r0, [pc, #136]	@ (800f278 <tcp_receive+0x5f8>)
 800f1f0:	f007 ff32 	bl	8017058 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1f6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800f1fa:	4293      	cmp	r3, r2
 800f1fc:	d906      	bls.n	800f20c <tcp_receive+0x58c>
 800f1fe:	4b1c      	ldr	r3, [pc, #112]	@ (800f270 <tcp_receive+0x5f0>)
 800f200:	f240 5295 	movw	r2, #1429	@ 0x595
 800f204:	491d      	ldr	r1, [pc, #116]	@ (800f27c <tcp_receive+0x5fc>)
 800f206:	481c      	ldr	r0, [pc, #112]	@ (800f278 <tcp_receive+0x5f8>)
 800f208:	f007 ff26 	bl	8017058 <iprintf>
      off = (u16_t)off32;
 800f20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f20e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f212:	4b16      	ldr	r3, [pc, #88]	@ (800f26c <tcp_receive+0x5ec>)
 800f214:	685b      	ldr	r3, [r3, #4]
 800f216:	891b      	ldrh	r3, [r3, #8]
 800f218:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f21c:	429a      	cmp	r2, r3
 800f21e:	d906      	bls.n	800f22e <tcp_receive+0x5ae>
 800f220:	4b13      	ldr	r3, [pc, #76]	@ (800f270 <tcp_receive+0x5f0>)
 800f222:	f240 5297 	movw	r2, #1431	@ 0x597
 800f226:	4916      	ldr	r1, [pc, #88]	@ (800f280 <tcp_receive+0x600>)
 800f228:	4813      	ldr	r0, [pc, #76]	@ (800f278 <tcp_receive+0x5f8>)
 800f22a:	f007 ff15 	bl	8017058 <iprintf>
      inseg.len -= off;
 800f22e:	4b0f      	ldr	r3, [pc, #60]	@ (800f26c <tcp_receive+0x5ec>)
 800f230:	891a      	ldrh	r2, [r3, #8]
 800f232:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f236:	1ad3      	subs	r3, r2, r3
 800f238:	b29a      	uxth	r2, r3
 800f23a:	4b0c      	ldr	r3, [pc, #48]	@ (800f26c <tcp_receive+0x5ec>)
 800f23c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f23e:	4b0b      	ldr	r3, [pc, #44]	@ (800f26c <tcp_receive+0x5ec>)
 800f240:	685b      	ldr	r3, [r3, #4]
 800f242:	891a      	ldrh	r2, [r3, #8]
 800f244:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f248:	1ad3      	subs	r3, r2, r3
 800f24a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800f24c:	e02a      	b.n	800f2a4 <tcp_receive+0x624>
 800f24e:	bf00      	nop
 800f250:	08019c18 	.word	0x08019c18
 800f254:	08019c20 	.word	0x08019c20
 800f258:	2000cb00 	.word	0x2000cb00
 800f25c:	2000cafc 	.word	0x2000cafc
 800f260:	2000cac0 	.word	0x2000cac0
 800f264:	2000cb02 	.word	0x2000cb02
 800f268:	2000caf8 	.word	0x2000caf8
 800f26c:	2000cad8 	.word	0x2000cad8
 800f270:	080198b0 	.word	0x080198b0
 800f274:	08019c28 	.word	0x08019c28
 800f278:	080198fc 	.word	0x080198fc
 800f27c:	08019c38 	.word	0x08019c38
 800f280:	08019c48 	.word	0x08019c48
        off -= p->len;
 800f284:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f286:	895b      	ldrh	r3, [r3, #10]
 800f288:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f28c:	1ad3      	subs	r3, r2, r3
 800f28e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f292:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f294:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800f296:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f298:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f29a:	2200      	movs	r2, #0
 800f29c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f29e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800f2a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f2a6:	895b      	ldrh	r3, [r3, #10]
 800f2a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f2ac:	429a      	cmp	r2, r3
 800f2ae:	d8e9      	bhi.n	800f284 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f2b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f2b4:	4619      	mov	r1, r3
 800f2b6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f2b8:	f7fc fb5e 	bl	800b978 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2c0:	4a90      	ldr	r2, [pc, #576]	@ (800f504 <tcp_receive+0x884>)
 800f2c2:	6013      	str	r3, [r2, #0]
 800f2c4:	4b90      	ldr	r3, [pc, #576]	@ (800f508 <tcp_receive+0x888>)
 800f2c6:	68db      	ldr	r3, [r3, #12]
 800f2c8:	4a8e      	ldr	r2, [pc, #568]	@ (800f504 <tcp_receive+0x884>)
 800f2ca:	6812      	ldr	r2, [r2, #0]
 800f2cc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f2ce:	e00d      	b.n	800f2ec <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f2d0:	4b8c      	ldr	r3, [pc, #560]	@ (800f504 <tcp_receive+0x884>)
 800f2d2:	681a      	ldr	r2, [r3, #0]
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2d8:	1ad3      	subs	r3, r2, r3
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	da06      	bge.n	800f2ec <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	8b5b      	ldrh	r3, [r3, #26]
 800f2e2:	f043 0302 	orr.w	r3, r3, #2
 800f2e6:	b29a      	uxth	r2, r3
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f2ec:	4b85      	ldr	r3, [pc, #532]	@ (800f504 <tcp_receive+0x884>)
 800f2ee:	681a      	ldr	r2, [r3, #0]
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2f4:	1ad3      	subs	r3, r2, r3
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	f2c0 8427 	blt.w	800fb4a <tcp_receive+0xeca>
 800f2fc:	4b81      	ldr	r3, [pc, #516]	@ (800f504 <tcp_receive+0x884>)
 800f2fe:	681a      	ldr	r2, [r3, #0]
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f304:	6879      	ldr	r1, [r7, #4]
 800f306:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f308:	440b      	add	r3, r1
 800f30a:	1ad3      	subs	r3, r2, r3
 800f30c:	3301      	adds	r3, #1
 800f30e:	2b00      	cmp	r3, #0
 800f310:	f300 841b 	bgt.w	800fb4a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f318:	4b7a      	ldr	r3, [pc, #488]	@ (800f504 <tcp_receive+0x884>)
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	429a      	cmp	r2, r3
 800f31e:	f040 8298 	bne.w	800f852 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f322:	4b79      	ldr	r3, [pc, #484]	@ (800f508 <tcp_receive+0x888>)
 800f324:	891c      	ldrh	r4, [r3, #8]
 800f326:	4b78      	ldr	r3, [pc, #480]	@ (800f508 <tcp_receive+0x888>)
 800f328:	68db      	ldr	r3, [r3, #12]
 800f32a:	899b      	ldrh	r3, [r3, #12]
 800f32c:	b29b      	uxth	r3, r3
 800f32e:	4618      	mov	r0, r3
 800f330:	f7fa fe54 	bl	8009fdc <lwip_htons>
 800f334:	4603      	mov	r3, r0
 800f336:	b2db      	uxtb	r3, r3
 800f338:	f003 0303 	and.w	r3, r3, #3
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d001      	beq.n	800f344 <tcp_receive+0x6c4>
 800f340:	2301      	movs	r3, #1
 800f342:	e000      	b.n	800f346 <tcp_receive+0x6c6>
 800f344:	2300      	movs	r3, #0
 800f346:	4423      	add	r3, r4
 800f348:	b29a      	uxth	r2, r3
 800f34a:	4b70      	ldr	r3, [pc, #448]	@ (800f50c <tcp_receive+0x88c>)
 800f34c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f352:	4b6e      	ldr	r3, [pc, #440]	@ (800f50c <tcp_receive+0x88c>)
 800f354:	881b      	ldrh	r3, [r3, #0]
 800f356:	429a      	cmp	r2, r3
 800f358:	d274      	bcs.n	800f444 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f35a:	4b6b      	ldr	r3, [pc, #428]	@ (800f508 <tcp_receive+0x888>)
 800f35c:	68db      	ldr	r3, [r3, #12]
 800f35e:	899b      	ldrh	r3, [r3, #12]
 800f360:	b29b      	uxth	r3, r3
 800f362:	4618      	mov	r0, r3
 800f364:	f7fa fe3a 	bl	8009fdc <lwip_htons>
 800f368:	4603      	mov	r3, r0
 800f36a:	b2db      	uxtb	r3, r3
 800f36c:	f003 0301 	and.w	r3, r3, #1
 800f370:	2b00      	cmp	r3, #0
 800f372:	d01e      	beq.n	800f3b2 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f374:	4b64      	ldr	r3, [pc, #400]	@ (800f508 <tcp_receive+0x888>)
 800f376:	68db      	ldr	r3, [r3, #12]
 800f378:	899b      	ldrh	r3, [r3, #12]
 800f37a:	b29b      	uxth	r3, r3
 800f37c:	b21b      	sxth	r3, r3
 800f37e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f382:	b21c      	sxth	r4, r3
 800f384:	4b60      	ldr	r3, [pc, #384]	@ (800f508 <tcp_receive+0x888>)
 800f386:	68db      	ldr	r3, [r3, #12]
 800f388:	899b      	ldrh	r3, [r3, #12]
 800f38a:	b29b      	uxth	r3, r3
 800f38c:	4618      	mov	r0, r3
 800f38e:	f7fa fe25 	bl	8009fdc <lwip_htons>
 800f392:	4603      	mov	r3, r0
 800f394:	b2db      	uxtb	r3, r3
 800f396:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800f39a:	b29b      	uxth	r3, r3
 800f39c:	4618      	mov	r0, r3
 800f39e:	f7fa fe1d 	bl	8009fdc <lwip_htons>
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	b21b      	sxth	r3, r3
 800f3a6:	4323      	orrs	r3, r4
 800f3a8:	b21a      	sxth	r2, r3
 800f3aa:	4b57      	ldr	r3, [pc, #348]	@ (800f508 <tcp_receive+0x888>)
 800f3ac:	68db      	ldr	r3, [r3, #12]
 800f3ae:	b292      	uxth	r2, r2
 800f3b0:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f3b6:	4b54      	ldr	r3, [pc, #336]	@ (800f508 <tcp_receive+0x888>)
 800f3b8:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f3ba:	4b53      	ldr	r3, [pc, #332]	@ (800f508 <tcp_receive+0x888>)
 800f3bc:	68db      	ldr	r3, [r3, #12]
 800f3be:	899b      	ldrh	r3, [r3, #12]
 800f3c0:	b29b      	uxth	r3, r3
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	f7fa fe0a 	bl	8009fdc <lwip_htons>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	b2db      	uxtb	r3, r3
 800f3cc:	f003 0302 	and.w	r3, r3, #2
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d005      	beq.n	800f3e0 <tcp_receive+0x760>
            inseg.len -= 1;
 800f3d4:	4b4c      	ldr	r3, [pc, #304]	@ (800f508 <tcp_receive+0x888>)
 800f3d6:	891b      	ldrh	r3, [r3, #8]
 800f3d8:	3b01      	subs	r3, #1
 800f3da:	b29a      	uxth	r2, r3
 800f3dc:	4b4a      	ldr	r3, [pc, #296]	@ (800f508 <tcp_receive+0x888>)
 800f3de:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f3e0:	4b49      	ldr	r3, [pc, #292]	@ (800f508 <tcp_receive+0x888>)
 800f3e2:	685b      	ldr	r3, [r3, #4]
 800f3e4:	4a48      	ldr	r2, [pc, #288]	@ (800f508 <tcp_receive+0x888>)
 800f3e6:	8912      	ldrh	r2, [r2, #8]
 800f3e8:	4611      	mov	r1, r2
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f7fc f9c4 	bl	800b778 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f3f0:	4b45      	ldr	r3, [pc, #276]	@ (800f508 <tcp_receive+0x888>)
 800f3f2:	891c      	ldrh	r4, [r3, #8]
 800f3f4:	4b44      	ldr	r3, [pc, #272]	@ (800f508 <tcp_receive+0x888>)
 800f3f6:	68db      	ldr	r3, [r3, #12]
 800f3f8:	899b      	ldrh	r3, [r3, #12]
 800f3fa:	b29b      	uxth	r3, r3
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	f7fa fded 	bl	8009fdc <lwip_htons>
 800f402:	4603      	mov	r3, r0
 800f404:	b2db      	uxtb	r3, r3
 800f406:	f003 0303 	and.w	r3, r3, #3
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d001      	beq.n	800f412 <tcp_receive+0x792>
 800f40e:	2301      	movs	r3, #1
 800f410:	e000      	b.n	800f414 <tcp_receive+0x794>
 800f412:	2300      	movs	r3, #0
 800f414:	4423      	add	r3, r4
 800f416:	b29a      	uxth	r2, r3
 800f418:	4b3c      	ldr	r3, [pc, #240]	@ (800f50c <tcp_receive+0x88c>)
 800f41a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f41c:	4b3b      	ldr	r3, [pc, #236]	@ (800f50c <tcp_receive+0x88c>)
 800f41e:	881b      	ldrh	r3, [r3, #0]
 800f420:	461a      	mov	r2, r3
 800f422:	4b38      	ldr	r3, [pc, #224]	@ (800f504 <tcp_receive+0x884>)
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	441a      	add	r2, r3
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f42c:	6879      	ldr	r1, [r7, #4]
 800f42e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f430:	440b      	add	r3, r1
 800f432:	429a      	cmp	r2, r3
 800f434:	d006      	beq.n	800f444 <tcp_receive+0x7c4>
 800f436:	4b36      	ldr	r3, [pc, #216]	@ (800f510 <tcp_receive+0x890>)
 800f438:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800f43c:	4935      	ldr	r1, [pc, #212]	@ (800f514 <tcp_receive+0x894>)
 800f43e:	4836      	ldr	r0, [pc, #216]	@ (800f518 <tcp_receive+0x898>)
 800f440:	f007 fe0a 	bl	8017058 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f448:	2b00      	cmp	r3, #0
 800f44a:	f000 80e6 	beq.w	800f61a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f44e:	4b2e      	ldr	r3, [pc, #184]	@ (800f508 <tcp_receive+0x888>)
 800f450:	68db      	ldr	r3, [r3, #12]
 800f452:	899b      	ldrh	r3, [r3, #12]
 800f454:	b29b      	uxth	r3, r3
 800f456:	4618      	mov	r0, r3
 800f458:	f7fa fdc0 	bl	8009fdc <lwip_htons>
 800f45c:	4603      	mov	r3, r0
 800f45e:	b2db      	uxtb	r3, r3
 800f460:	f003 0301 	and.w	r3, r3, #1
 800f464:	2b00      	cmp	r3, #0
 800f466:	d010      	beq.n	800f48a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f468:	e00a      	b.n	800f480 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f46e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f474:	681a      	ldr	r2, [r3, #0]
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800f47a:	68f8      	ldr	r0, [r7, #12]
 800f47c:	f7fd fd93 	bl	800cfa6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f484:	2b00      	cmp	r3, #0
 800f486:	d1f0      	bne.n	800f46a <tcp_receive+0x7ea>
 800f488:	e0c7      	b.n	800f61a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f48e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f490:	e051      	b.n	800f536 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f494:	68db      	ldr	r3, [r3, #12]
 800f496:	899b      	ldrh	r3, [r3, #12]
 800f498:	b29b      	uxth	r3, r3
 800f49a:	4618      	mov	r0, r3
 800f49c:	f7fa fd9e 	bl	8009fdc <lwip_htons>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	b2db      	uxtb	r3, r3
 800f4a4:	f003 0301 	and.w	r3, r3, #1
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d03c      	beq.n	800f526 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f4ac:	4b16      	ldr	r3, [pc, #88]	@ (800f508 <tcp_receive+0x888>)
 800f4ae:	68db      	ldr	r3, [r3, #12]
 800f4b0:	899b      	ldrh	r3, [r3, #12]
 800f4b2:	b29b      	uxth	r3, r3
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	f7fa fd91 	bl	8009fdc <lwip_htons>
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	b2db      	uxtb	r3, r3
 800f4be:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d12f      	bne.n	800f526 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f4c6:	4b10      	ldr	r3, [pc, #64]	@ (800f508 <tcp_receive+0x888>)
 800f4c8:	68db      	ldr	r3, [r3, #12]
 800f4ca:	899b      	ldrh	r3, [r3, #12]
 800f4cc:	b29c      	uxth	r4, r3
 800f4ce:	2001      	movs	r0, #1
 800f4d0:	f7fa fd84 	bl	8009fdc <lwip_htons>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	461a      	mov	r2, r3
 800f4d8:	4b0b      	ldr	r3, [pc, #44]	@ (800f508 <tcp_receive+0x888>)
 800f4da:	68db      	ldr	r3, [r3, #12]
 800f4dc:	4322      	orrs	r2, r4
 800f4de:	b292      	uxth	r2, r2
 800f4e0:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f4e2:	4b09      	ldr	r3, [pc, #36]	@ (800f508 <tcp_receive+0x888>)
 800f4e4:	891c      	ldrh	r4, [r3, #8]
 800f4e6:	4b08      	ldr	r3, [pc, #32]	@ (800f508 <tcp_receive+0x888>)
 800f4e8:	68db      	ldr	r3, [r3, #12]
 800f4ea:	899b      	ldrh	r3, [r3, #12]
 800f4ec:	b29b      	uxth	r3, r3
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f7fa fd74 	bl	8009fdc <lwip_htons>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	b2db      	uxtb	r3, r3
 800f4f8:	f003 0303 	and.w	r3, r3, #3
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d00d      	beq.n	800f51c <tcp_receive+0x89c>
 800f500:	2301      	movs	r3, #1
 800f502:	e00c      	b.n	800f51e <tcp_receive+0x89e>
 800f504:	2000caf8 	.word	0x2000caf8
 800f508:	2000cad8 	.word	0x2000cad8
 800f50c:	2000cb02 	.word	0x2000cb02
 800f510:	080198b0 	.word	0x080198b0
 800f514:	08019c58 	.word	0x08019c58
 800f518:	080198fc 	.word	0x080198fc
 800f51c:	2300      	movs	r3, #0
 800f51e:	4423      	add	r3, r4
 800f520:	b29a      	uxth	r2, r3
 800f522:	4b98      	ldr	r3, [pc, #608]	@ (800f784 <tcp_receive+0xb04>)
 800f524:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f528:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f52a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800f530:	6938      	ldr	r0, [r7, #16]
 800f532:	f7fd fd38 	bl	800cfa6 <tcp_seg_free>
            while (next &&
 800f536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d00e      	beq.n	800f55a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f53c:	4b91      	ldr	r3, [pc, #580]	@ (800f784 <tcp_receive+0xb04>)
 800f53e:	881b      	ldrh	r3, [r3, #0]
 800f540:	461a      	mov	r2, r3
 800f542:	4b91      	ldr	r3, [pc, #580]	@ (800f788 <tcp_receive+0xb08>)
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	441a      	add	r2, r3
 800f548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f54a:	68db      	ldr	r3, [r3, #12]
 800f54c:	685b      	ldr	r3, [r3, #4]
 800f54e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f550:	8909      	ldrh	r1, [r1, #8]
 800f552:	440b      	add	r3, r1
 800f554:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f556:	2b00      	cmp	r3, #0
 800f558:	da9b      	bge.n	800f492 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f55a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d059      	beq.n	800f614 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800f560:	4b88      	ldr	r3, [pc, #544]	@ (800f784 <tcp_receive+0xb04>)
 800f562:	881b      	ldrh	r3, [r3, #0]
 800f564:	461a      	mov	r2, r3
 800f566:	4b88      	ldr	r3, [pc, #544]	@ (800f788 <tcp_receive+0xb08>)
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	441a      	add	r2, r3
 800f56c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f56e:	68db      	ldr	r3, [r3, #12]
 800f570:	685b      	ldr	r3, [r3, #4]
 800f572:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f574:	2b00      	cmp	r3, #0
 800f576:	dd4d      	ble.n	800f614 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f57a:	68db      	ldr	r3, [r3, #12]
 800f57c:	685b      	ldr	r3, [r3, #4]
 800f57e:	b29a      	uxth	r2, r3
 800f580:	4b81      	ldr	r3, [pc, #516]	@ (800f788 <tcp_receive+0xb08>)
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	b29b      	uxth	r3, r3
 800f586:	1ad3      	subs	r3, r2, r3
 800f588:	b29a      	uxth	r2, r3
 800f58a:	4b80      	ldr	r3, [pc, #512]	@ (800f78c <tcp_receive+0xb0c>)
 800f58c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f58e:	4b7f      	ldr	r3, [pc, #508]	@ (800f78c <tcp_receive+0xb0c>)
 800f590:	68db      	ldr	r3, [r3, #12]
 800f592:	899b      	ldrh	r3, [r3, #12]
 800f594:	b29b      	uxth	r3, r3
 800f596:	4618      	mov	r0, r3
 800f598:	f7fa fd20 	bl	8009fdc <lwip_htons>
 800f59c:	4603      	mov	r3, r0
 800f59e:	b2db      	uxtb	r3, r3
 800f5a0:	f003 0302 	and.w	r3, r3, #2
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d005      	beq.n	800f5b4 <tcp_receive+0x934>
                inseg.len -= 1;
 800f5a8:	4b78      	ldr	r3, [pc, #480]	@ (800f78c <tcp_receive+0xb0c>)
 800f5aa:	891b      	ldrh	r3, [r3, #8]
 800f5ac:	3b01      	subs	r3, #1
 800f5ae:	b29a      	uxth	r2, r3
 800f5b0:	4b76      	ldr	r3, [pc, #472]	@ (800f78c <tcp_receive+0xb0c>)
 800f5b2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f5b4:	4b75      	ldr	r3, [pc, #468]	@ (800f78c <tcp_receive+0xb0c>)
 800f5b6:	685b      	ldr	r3, [r3, #4]
 800f5b8:	4a74      	ldr	r2, [pc, #464]	@ (800f78c <tcp_receive+0xb0c>)
 800f5ba:	8912      	ldrh	r2, [r2, #8]
 800f5bc:	4611      	mov	r1, r2
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f7fc f8da 	bl	800b778 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f5c4:	4b71      	ldr	r3, [pc, #452]	@ (800f78c <tcp_receive+0xb0c>)
 800f5c6:	891c      	ldrh	r4, [r3, #8]
 800f5c8:	4b70      	ldr	r3, [pc, #448]	@ (800f78c <tcp_receive+0xb0c>)
 800f5ca:	68db      	ldr	r3, [r3, #12]
 800f5cc:	899b      	ldrh	r3, [r3, #12]
 800f5ce:	b29b      	uxth	r3, r3
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f7fa fd03 	bl	8009fdc <lwip_htons>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	b2db      	uxtb	r3, r3
 800f5da:	f003 0303 	and.w	r3, r3, #3
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d001      	beq.n	800f5e6 <tcp_receive+0x966>
 800f5e2:	2301      	movs	r3, #1
 800f5e4:	e000      	b.n	800f5e8 <tcp_receive+0x968>
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	4423      	add	r3, r4
 800f5ea:	b29a      	uxth	r2, r3
 800f5ec:	4b65      	ldr	r3, [pc, #404]	@ (800f784 <tcp_receive+0xb04>)
 800f5ee:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f5f0:	4b64      	ldr	r3, [pc, #400]	@ (800f784 <tcp_receive+0xb04>)
 800f5f2:	881b      	ldrh	r3, [r3, #0]
 800f5f4:	461a      	mov	r2, r3
 800f5f6:	4b64      	ldr	r3, [pc, #400]	@ (800f788 <tcp_receive+0xb08>)
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	441a      	add	r2, r3
 800f5fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f5fe:	68db      	ldr	r3, [r3, #12]
 800f600:	685b      	ldr	r3, [r3, #4]
 800f602:	429a      	cmp	r2, r3
 800f604:	d006      	beq.n	800f614 <tcp_receive+0x994>
 800f606:	4b62      	ldr	r3, [pc, #392]	@ (800f790 <tcp_receive+0xb10>)
 800f608:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800f60c:	4961      	ldr	r1, [pc, #388]	@ (800f794 <tcp_receive+0xb14>)
 800f60e:	4862      	ldr	r0, [pc, #392]	@ (800f798 <tcp_receive+0xb18>)
 800f610:	f007 fd22 	bl	8017058 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f618:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f61a:	4b5a      	ldr	r3, [pc, #360]	@ (800f784 <tcp_receive+0xb04>)
 800f61c:	881b      	ldrh	r3, [r3, #0]
 800f61e:	461a      	mov	r2, r3
 800f620:	4b59      	ldr	r3, [pc, #356]	@ (800f788 <tcp_receive+0xb08>)
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	441a      	add	r2, r3
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f62e:	4b55      	ldr	r3, [pc, #340]	@ (800f784 <tcp_receive+0xb04>)
 800f630:	881b      	ldrh	r3, [r3, #0]
 800f632:	429a      	cmp	r2, r3
 800f634:	d206      	bcs.n	800f644 <tcp_receive+0x9c4>
 800f636:	4b56      	ldr	r3, [pc, #344]	@ (800f790 <tcp_receive+0xb10>)
 800f638:	f240 6207 	movw	r2, #1543	@ 0x607
 800f63c:	4957      	ldr	r1, [pc, #348]	@ (800f79c <tcp_receive+0xb1c>)
 800f63e:	4856      	ldr	r0, [pc, #344]	@ (800f798 <tcp_receive+0xb18>)
 800f640:	f007 fd0a 	bl	8017058 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f648:	4b4e      	ldr	r3, [pc, #312]	@ (800f784 <tcp_receive+0xb04>)
 800f64a:	881b      	ldrh	r3, [r3, #0]
 800f64c:	1ad3      	subs	r3, r2, r3
 800f64e:	b29a      	uxth	r2, r3
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f654:	6878      	ldr	r0, [r7, #4]
 800f656:	f7fc ffc5 	bl	800c5e4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f65a:	4b4c      	ldr	r3, [pc, #304]	@ (800f78c <tcp_receive+0xb0c>)
 800f65c:	685b      	ldr	r3, [r3, #4]
 800f65e:	891b      	ldrh	r3, [r3, #8]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d006      	beq.n	800f672 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800f664:	4b49      	ldr	r3, [pc, #292]	@ (800f78c <tcp_receive+0xb0c>)
 800f666:	685b      	ldr	r3, [r3, #4]
 800f668:	4a4d      	ldr	r2, [pc, #308]	@ (800f7a0 <tcp_receive+0xb20>)
 800f66a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f66c:	4b47      	ldr	r3, [pc, #284]	@ (800f78c <tcp_receive+0xb0c>)
 800f66e:	2200      	movs	r2, #0
 800f670:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f672:	4b46      	ldr	r3, [pc, #280]	@ (800f78c <tcp_receive+0xb0c>)
 800f674:	68db      	ldr	r3, [r3, #12]
 800f676:	899b      	ldrh	r3, [r3, #12]
 800f678:	b29b      	uxth	r3, r3
 800f67a:	4618      	mov	r0, r3
 800f67c:	f7fa fcae 	bl	8009fdc <lwip_htons>
 800f680:	4603      	mov	r3, r0
 800f682:	b2db      	uxtb	r3, r3
 800f684:	f003 0301 	and.w	r3, r3, #1
 800f688:	2b00      	cmp	r3, #0
 800f68a:	f000 80b8 	beq.w	800f7fe <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f68e:	4b45      	ldr	r3, [pc, #276]	@ (800f7a4 <tcp_receive+0xb24>)
 800f690:	781b      	ldrb	r3, [r3, #0]
 800f692:	f043 0320 	orr.w	r3, r3, #32
 800f696:	b2da      	uxtb	r2, r3
 800f698:	4b42      	ldr	r3, [pc, #264]	@ (800f7a4 <tcp_receive+0xb24>)
 800f69a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f69c:	e0af      	b.n	800f7fe <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f6a2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f6a8:	68db      	ldr	r3, [r3, #12]
 800f6aa:	685b      	ldr	r3, [r3, #4]
 800f6ac:	4a36      	ldr	r2, [pc, #216]	@ (800f788 <tcp_receive+0xb08>)
 800f6ae:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f6b0:	68bb      	ldr	r3, [r7, #8]
 800f6b2:	891b      	ldrh	r3, [r3, #8]
 800f6b4:	461c      	mov	r4, r3
 800f6b6:	68bb      	ldr	r3, [r7, #8]
 800f6b8:	68db      	ldr	r3, [r3, #12]
 800f6ba:	899b      	ldrh	r3, [r3, #12]
 800f6bc:	b29b      	uxth	r3, r3
 800f6be:	4618      	mov	r0, r3
 800f6c0:	f7fa fc8c 	bl	8009fdc <lwip_htons>
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	b2db      	uxtb	r3, r3
 800f6c8:	f003 0303 	and.w	r3, r3, #3
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d001      	beq.n	800f6d4 <tcp_receive+0xa54>
 800f6d0:	2301      	movs	r3, #1
 800f6d2:	e000      	b.n	800f6d6 <tcp_receive+0xa56>
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	191a      	adds	r2, r3, r4
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6dc:	441a      	add	r2, r3
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f6e6:	461c      	mov	r4, r3
 800f6e8:	68bb      	ldr	r3, [r7, #8]
 800f6ea:	891b      	ldrh	r3, [r3, #8]
 800f6ec:	461d      	mov	r5, r3
 800f6ee:	68bb      	ldr	r3, [r7, #8]
 800f6f0:	68db      	ldr	r3, [r3, #12]
 800f6f2:	899b      	ldrh	r3, [r3, #12]
 800f6f4:	b29b      	uxth	r3, r3
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f7fa fc70 	bl	8009fdc <lwip_htons>
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	b2db      	uxtb	r3, r3
 800f700:	f003 0303 	and.w	r3, r3, #3
 800f704:	2b00      	cmp	r3, #0
 800f706:	d001      	beq.n	800f70c <tcp_receive+0xa8c>
 800f708:	2301      	movs	r3, #1
 800f70a:	e000      	b.n	800f70e <tcp_receive+0xa8e>
 800f70c:	2300      	movs	r3, #0
 800f70e:	442b      	add	r3, r5
 800f710:	429c      	cmp	r4, r3
 800f712:	d206      	bcs.n	800f722 <tcp_receive+0xaa2>
 800f714:	4b1e      	ldr	r3, [pc, #120]	@ (800f790 <tcp_receive+0xb10>)
 800f716:	f240 622b 	movw	r2, #1579	@ 0x62b
 800f71a:	4923      	ldr	r1, [pc, #140]	@ (800f7a8 <tcp_receive+0xb28>)
 800f71c:	481e      	ldr	r0, [pc, #120]	@ (800f798 <tcp_receive+0xb18>)
 800f71e:	f007 fc9b 	bl	8017058 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f722:	68bb      	ldr	r3, [r7, #8]
 800f724:	891b      	ldrh	r3, [r3, #8]
 800f726:	461c      	mov	r4, r3
 800f728:	68bb      	ldr	r3, [r7, #8]
 800f72a:	68db      	ldr	r3, [r3, #12]
 800f72c:	899b      	ldrh	r3, [r3, #12]
 800f72e:	b29b      	uxth	r3, r3
 800f730:	4618      	mov	r0, r3
 800f732:	f7fa fc53 	bl	8009fdc <lwip_htons>
 800f736:	4603      	mov	r3, r0
 800f738:	b2db      	uxtb	r3, r3
 800f73a:	f003 0303 	and.w	r3, r3, #3
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d001      	beq.n	800f746 <tcp_receive+0xac6>
 800f742:	2301      	movs	r3, #1
 800f744:	e000      	b.n	800f748 <tcp_receive+0xac8>
 800f746:	2300      	movs	r3, #0
 800f748:	1919      	adds	r1, r3, r4
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f74e:	b28b      	uxth	r3, r1
 800f750:	1ad3      	subs	r3, r2, r3
 800f752:	b29a      	uxth	r2, r3
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	f7fc ff43 	bl	800c5e4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	685b      	ldr	r3, [r3, #4]
 800f762:	891b      	ldrh	r3, [r3, #8]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d028      	beq.n	800f7ba <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f768:	4b0d      	ldr	r3, [pc, #52]	@ (800f7a0 <tcp_receive+0xb20>)
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d01d      	beq.n	800f7ac <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800f770:	4b0b      	ldr	r3, [pc, #44]	@ (800f7a0 <tcp_receive+0xb20>)
 800f772:	681a      	ldr	r2, [r3, #0]
 800f774:	68bb      	ldr	r3, [r7, #8]
 800f776:	685b      	ldr	r3, [r3, #4]
 800f778:	4619      	mov	r1, r3
 800f77a:	4610      	mov	r0, r2
 800f77c:	f7fc fa50 	bl	800bc20 <pbuf_cat>
 800f780:	e018      	b.n	800f7b4 <tcp_receive+0xb34>
 800f782:	bf00      	nop
 800f784:	2000cb02 	.word	0x2000cb02
 800f788:	2000caf8 	.word	0x2000caf8
 800f78c:	2000cad8 	.word	0x2000cad8
 800f790:	080198b0 	.word	0x080198b0
 800f794:	08019c90 	.word	0x08019c90
 800f798:	080198fc 	.word	0x080198fc
 800f79c:	08019ccc 	.word	0x08019ccc
 800f7a0:	2000cb08 	.word	0x2000cb08
 800f7a4:	2000cb05 	.word	0x2000cb05
 800f7a8:	08019cec 	.word	0x08019cec
            } else {
              recv_data = cseg->p;
 800f7ac:	68bb      	ldr	r3, [r7, #8]
 800f7ae:	685b      	ldr	r3, [r3, #4]
 800f7b0:	4a70      	ldr	r2, [pc, #448]	@ (800f974 <tcp_receive+0xcf4>)
 800f7b2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f7ba:	68bb      	ldr	r3, [r7, #8]
 800f7bc:	68db      	ldr	r3, [r3, #12]
 800f7be:	899b      	ldrh	r3, [r3, #12]
 800f7c0:	b29b      	uxth	r3, r3
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	f7fa fc0a 	bl	8009fdc <lwip_htons>
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	b2db      	uxtb	r3, r3
 800f7cc:	f003 0301 	and.w	r3, r3, #1
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d00d      	beq.n	800f7f0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f7d4:	4b68      	ldr	r3, [pc, #416]	@ (800f978 <tcp_receive+0xcf8>)
 800f7d6:	781b      	ldrb	r3, [r3, #0]
 800f7d8:	f043 0320 	orr.w	r3, r3, #32
 800f7dc:	b2da      	uxtb	r2, r3
 800f7de:	4b66      	ldr	r3, [pc, #408]	@ (800f978 <tcp_receive+0xcf8>)
 800f7e0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	7d1b      	ldrb	r3, [r3, #20]
 800f7e6:	2b04      	cmp	r3, #4
 800f7e8:	d102      	bne.n	800f7f0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	2207      	movs	r2, #7
 800f7ee:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	681a      	ldr	r2, [r3, #0]
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800f7f8:	68b8      	ldr	r0, [r7, #8]
 800f7fa:	f7fd fbd4 	bl	800cfa6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f802:	2b00      	cmp	r3, #0
 800f804:	d008      	beq.n	800f818 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f80a:	68db      	ldr	r3, [r3, #12]
 800f80c:	685a      	ldr	r2, [r3, #4]
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800f812:	429a      	cmp	r2, r3
 800f814:	f43f af43 	beq.w	800f69e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	8b5b      	ldrh	r3, [r3, #26]
 800f81c:	f003 0301 	and.w	r3, r3, #1
 800f820:	2b00      	cmp	r3, #0
 800f822:	d00e      	beq.n	800f842 <tcp_receive+0xbc2>
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	8b5b      	ldrh	r3, [r3, #26]
 800f828:	f023 0301 	bic.w	r3, r3, #1
 800f82c:	b29a      	uxth	r2, r3
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	835a      	strh	r2, [r3, #26]
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	8b5b      	ldrh	r3, [r3, #26]
 800f836:	f043 0302 	orr.w	r3, r3, #2
 800f83a:	b29a      	uxth	r2, r3
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f840:	e187      	b.n	800fb52 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	8b5b      	ldrh	r3, [r3, #26]
 800f846:	f043 0301 	orr.w	r3, r3, #1
 800f84a:	b29a      	uxth	r2, r3
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f850:	e17f      	b.n	800fb52 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f856:	2b00      	cmp	r3, #0
 800f858:	d106      	bne.n	800f868 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f85a:	4848      	ldr	r0, [pc, #288]	@ (800f97c <tcp_receive+0xcfc>)
 800f85c:	f7fd fbbc 	bl	800cfd8 <tcp_seg_copy>
 800f860:	4602      	mov	r2, r0
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	675a      	str	r2, [r3, #116]	@ 0x74
 800f866:	e16c      	b.n	800fb42 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f868:	2300      	movs	r3, #0
 800f86a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f870:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f872:	e156      	b.n	800fb22 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800f874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f876:	68db      	ldr	r3, [r3, #12]
 800f878:	685a      	ldr	r2, [r3, #4]
 800f87a:	4b41      	ldr	r3, [pc, #260]	@ (800f980 <tcp_receive+0xd00>)
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	429a      	cmp	r2, r3
 800f880:	d11d      	bne.n	800f8be <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f882:	4b3e      	ldr	r3, [pc, #248]	@ (800f97c <tcp_receive+0xcfc>)
 800f884:	891a      	ldrh	r2, [r3, #8]
 800f886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f888:	891b      	ldrh	r3, [r3, #8]
 800f88a:	429a      	cmp	r2, r3
 800f88c:	f240 814e 	bls.w	800fb2c <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f890:	483a      	ldr	r0, [pc, #232]	@ (800f97c <tcp_receive+0xcfc>)
 800f892:	f7fd fba1 	bl	800cfd8 <tcp_seg_copy>
 800f896:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f898:	697b      	ldr	r3, [r7, #20]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	f000 8148 	beq.w	800fb30 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800f8a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d003      	beq.n	800f8ae <tcp_receive+0xc2e>
                    prev->next = cseg;
 800f8a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8a8:	697a      	ldr	r2, [r7, #20]
 800f8aa:	601a      	str	r2, [r3, #0]
 800f8ac:	e002      	b.n	800f8b4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	697a      	ldr	r2, [r7, #20]
 800f8b2:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f8b4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f8b6:	6978      	ldr	r0, [r7, #20]
 800f8b8:	f7ff f8de 	bl	800ea78 <tcp_oos_insert_segment>
                }
                break;
 800f8bc:	e138      	b.n	800fb30 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f8be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d117      	bne.n	800f8f4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f8c4:	4b2e      	ldr	r3, [pc, #184]	@ (800f980 <tcp_receive+0xd00>)
 800f8c6:	681a      	ldr	r2, [r3, #0]
 800f8c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8ca:	68db      	ldr	r3, [r3, #12]
 800f8cc:	685b      	ldr	r3, [r3, #4]
 800f8ce:	1ad3      	subs	r3, r2, r3
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	da57      	bge.n	800f984 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f8d4:	4829      	ldr	r0, [pc, #164]	@ (800f97c <tcp_receive+0xcfc>)
 800f8d6:	f7fd fb7f 	bl	800cfd8 <tcp_seg_copy>
 800f8da:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f8dc:	69bb      	ldr	r3, [r7, #24]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	f000 8128 	beq.w	800fb34 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	69ba      	ldr	r2, [r7, #24]
 800f8e8:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f8ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f8ec:	69b8      	ldr	r0, [r7, #24]
 800f8ee:	f7ff f8c3 	bl	800ea78 <tcp_oos_insert_segment>
                  }
                  break;
 800f8f2:	e11f      	b.n	800fb34 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f8f4:	4b22      	ldr	r3, [pc, #136]	@ (800f980 <tcp_receive+0xd00>)
 800f8f6:	681a      	ldr	r2, [r3, #0]
 800f8f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8fa:	68db      	ldr	r3, [r3, #12]
 800f8fc:	685b      	ldr	r3, [r3, #4]
 800f8fe:	1ad3      	subs	r3, r2, r3
 800f900:	3b01      	subs	r3, #1
 800f902:	2b00      	cmp	r3, #0
 800f904:	db3e      	blt.n	800f984 <tcp_receive+0xd04>
 800f906:	4b1e      	ldr	r3, [pc, #120]	@ (800f980 <tcp_receive+0xd00>)
 800f908:	681a      	ldr	r2, [r3, #0]
 800f90a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f90c:	68db      	ldr	r3, [r3, #12]
 800f90e:	685b      	ldr	r3, [r3, #4]
 800f910:	1ad3      	subs	r3, r2, r3
 800f912:	3301      	adds	r3, #1
 800f914:	2b00      	cmp	r3, #0
 800f916:	dc35      	bgt.n	800f984 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f918:	4818      	ldr	r0, [pc, #96]	@ (800f97c <tcp_receive+0xcfc>)
 800f91a:	f7fd fb5d 	bl	800cfd8 <tcp_seg_copy>
 800f91e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f920:	69fb      	ldr	r3, [r7, #28]
 800f922:	2b00      	cmp	r3, #0
 800f924:	f000 8108 	beq.w	800fb38 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f92a:	68db      	ldr	r3, [r3, #12]
 800f92c:	685b      	ldr	r3, [r3, #4]
 800f92e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f930:	8912      	ldrh	r2, [r2, #8]
 800f932:	441a      	add	r2, r3
 800f934:	4b12      	ldr	r3, [pc, #72]	@ (800f980 <tcp_receive+0xd00>)
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	1ad3      	subs	r3, r2, r3
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	dd12      	ble.n	800f964 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f93e:	4b10      	ldr	r3, [pc, #64]	@ (800f980 <tcp_receive+0xd00>)
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	b29a      	uxth	r2, r3
 800f944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f946:	68db      	ldr	r3, [r3, #12]
 800f948:	685b      	ldr	r3, [r3, #4]
 800f94a:	b29b      	uxth	r3, r3
 800f94c:	1ad3      	subs	r3, r2, r3
 800f94e:	b29a      	uxth	r2, r3
 800f950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f952:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f956:	685a      	ldr	r2, [r3, #4]
 800f958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f95a:	891b      	ldrh	r3, [r3, #8]
 800f95c:	4619      	mov	r1, r3
 800f95e:	4610      	mov	r0, r2
 800f960:	f7fb ff0a 	bl	800b778 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f966:	69fa      	ldr	r2, [r7, #28]
 800f968:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f96a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f96c:	69f8      	ldr	r0, [r7, #28]
 800f96e:	f7ff f883 	bl	800ea78 <tcp_oos_insert_segment>
                  }
                  break;
 800f972:	e0e1      	b.n	800fb38 <tcp_receive+0xeb8>
 800f974:	2000cb08 	.word	0x2000cb08
 800f978:	2000cb05 	.word	0x2000cb05
 800f97c:	2000cad8 	.word	0x2000cad8
 800f980:	2000caf8 	.word	0x2000caf8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f986:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	f040 80c5 	bne.w	800fb1c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f992:	4b7f      	ldr	r3, [pc, #508]	@ (800fb90 <tcp_receive+0xf10>)
 800f994:	681a      	ldr	r2, [r3, #0]
 800f996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f998:	68db      	ldr	r3, [r3, #12]
 800f99a:	685b      	ldr	r3, [r3, #4]
 800f99c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	f340 80bc 	ble.w	800fb1c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f9a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9a6:	68db      	ldr	r3, [r3, #12]
 800f9a8:	899b      	ldrh	r3, [r3, #12]
 800f9aa:	b29b      	uxth	r3, r3
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	f7fa fb15 	bl	8009fdc <lwip_htons>
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	b2db      	uxtb	r3, r3
 800f9b6:	f003 0301 	and.w	r3, r3, #1
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	f040 80be 	bne.w	800fb3c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f9c0:	4874      	ldr	r0, [pc, #464]	@ (800fb94 <tcp_receive+0xf14>)
 800f9c2:	f7fd fb09 	bl	800cfd8 <tcp_seg_copy>
 800f9c6:	4602      	mov	r2, r0
 800f9c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9ca:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f9cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	f000 80b5 	beq.w	800fb40 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f9d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9d8:	68db      	ldr	r3, [r3, #12]
 800f9da:	685b      	ldr	r3, [r3, #4]
 800f9dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f9de:	8912      	ldrh	r2, [r2, #8]
 800f9e0:	441a      	add	r2, r3
 800f9e2:	4b6b      	ldr	r3, [pc, #428]	@ (800fb90 <tcp_receive+0xf10>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	1ad3      	subs	r3, r2, r3
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	dd12      	ble.n	800fa12 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f9ec:	4b68      	ldr	r3, [pc, #416]	@ (800fb90 <tcp_receive+0xf10>)
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	b29a      	uxth	r2, r3
 800f9f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9f4:	68db      	ldr	r3, [r3, #12]
 800f9f6:	685b      	ldr	r3, [r3, #4]
 800f9f8:	b29b      	uxth	r3, r3
 800f9fa:	1ad3      	subs	r3, r2, r3
 800f9fc:	b29a      	uxth	r2, r3
 800f9fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa00:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800fa02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa04:	685a      	ldr	r2, [r3, #4]
 800fa06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa08:	891b      	ldrh	r3, [r3, #8]
 800fa0a:	4619      	mov	r1, r3
 800fa0c:	4610      	mov	r0, r2
 800fa0e:	f7fb feb3 	bl	800b778 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800fa12:	4b61      	ldr	r3, [pc, #388]	@ (800fb98 <tcp_receive+0xf18>)
 800fa14:	881b      	ldrh	r3, [r3, #0]
 800fa16:	461a      	mov	r2, r3
 800fa18:	4b5d      	ldr	r3, [pc, #372]	@ (800fb90 <tcp_receive+0xf10>)
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	441a      	add	r2, r3
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa22:	6879      	ldr	r1, [r7, #4]
 800fa24:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fa26:	440b      	add	r3, r1
 800fa28:	1ad3      	subs	r3, r2, r3
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	f340 8088 	ble.w	800fb40 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800fa30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	68db      	ldr	r3, [r3, #12]
 800fa36:	899b      	ldrh	r3, [r3, #12]
 800fa38:	b29b      	uxth	r3, r3
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f7fa face 	bl	8009fdc <lwip_htons>
 800fa40:	4603      	mov	r3, r0
 800fa42:	b2db      	uxtb	r3, r3
 800fa44:	f003 0301 	and.w	r3, r3, #1
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d021      	beq.n	800fa90 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800fa4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	68db      	ldr	r3, [r3, #12]
 800fa52:	899b      	ldrh	r3, [r3, #12]
 800fa54:	b29b      	uxth	r3, r3
 800fa56:	b21b      	sxth	r3, r3
 800fa58:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800fa5c:	b21c      	sxth	r4, r3
 800fa5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	68db      	ldr	r3, [r3, #12]
 800fa64:	899b      	ldrh	r3, [r3, #12]
 800fa66:	b29b      	uxth	r3, r3
 800fa68:	4618      	mov	r0, r3
 800fa6a:	f7fa fab7 	bl	8009fdc <lwip_htons>
 800fa6e:	4603      	mov	r3, r0
 800fa70:	b2db      	uxtb	r3, r3
 800fa72:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800fa76:	b29b      	uxth	r3, r3
 800fa78:	4618      	mov	r0, r3
 800fa7a:	f7fa faaf 	bl	8009fdc <lwip_htons>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	b21b      	sxth	r3, r3
 800fa82:	4323      	orrs	r3, r4
 800fa84:	b21a      	sxth	r2, r3
 800fa86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	68db      	ldr	r3, [r3, #12]
 800fa8c:	b292      	uxth	r2, r2
 800fa8e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa94:	b29a      	uxth	r2, r3
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fa9a:	4413      	add	r3, r2
 800fa9c:	b299      	uxth	r1, r3
 800fa9e:	4b3c      	ldr	r3, [pc, #240]	@ (800fb90 <tcp_receive+0xf10>)
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	b29a      	uxth	r2, r3
 800faa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	1a8a      	subs	r2, r1, r2
 800faaa:	b292      	uxth	r2, r2
 800faac:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800faae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	685a      	ldr	r2, [r3, #4]
 800fab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	891b      	ldrh	r3, [r3, #8]
 800faba:	4619      	mov	r1, r3
 800fabc:	4610      	mov	r0, r2
 800fabe:	f7fb fe5b 	bl	800b778 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800fac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	891c      	ldrh	r4, [r3, #8]
 800fac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	68db      	ldr	r3, [r3, #12]
 800face:	899b      	ldrh	r3, [r3, #12]
 800fad0:	b29b      	uxth	r3, r3
 800fad2:	4618      	mov	r0, r3
 800fad4:	f7fa fa82 	bl	8009fdc <lwip_htons>
 800fad8:	4603      	mov	r3, r0
 800fada:	b2db      	uxtb	r3, r3
 800fadc:	f003 0303 	and.w	r3, r3, #3
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d001      	beq.n	800fae8 <tcp_receive+0xe68>
 800fae4:	2301      	movs	r3, #1
 800fae6:	e000      	b.n	800faea <tcp_receive+0xe6a>
 800fae8:	2300      	movs	r3, #0
 800faea:	4423      	add	r3, r4
 800faec:	b29a      	uxth	r2, r3
 800faee:	4b2a      	ldr	r3, [pc, #168]	@ (800fb98 <tcp_receive+0xf18>)
 800faf0:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800faf2:	4b29      	ldr	r3, [pc, #164]	@ (800fb98 <tcp_receive+0xf18>)
 800faf4:	881b      	ldrh	r3, [r3, #0]
 800faf6:	461a      	mov	r2, r3
 800faf8:	4b25      	ldr	r3, [pc, #148]	@ (800fb90 <tcp_receive+0xf10>)
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	441a      	add	r2, r3
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb02:	6879      	ldr	r1, [r7, #4]
 800fb04:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fb06:	440b      	add	r3, r1
 800fb08:	429a      	cmp	r2, r3
 800fb0a:	d019      	beq.n	800fb40 <tcp_receive+0xec0>
 800fb0c:	4b23      	ldr	r3, [pc, #140]	@ (800fb9c <tcp_receive+0xf1c>)
 800fb0e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800fb12:	4923      	ldr	r1, [pc, #140]	@ (800fba0 <tcp_receive+0xf20>)
 800fb14:	4823      	ldr	r0, [pc, #140]	@ (800fba4 <tcp_receive+0xf24>)
 800fb16:	f007 fa9f 	bl	8017058 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800fb1a:	e011      	b.n	800fb40 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fb1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fb22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	f47f aea5 	bne.w	800f874 <tcp_receive+0xbf4>
 800fb2a:	e00a      	b.n	800fb42 <tcp_receive+0xec2>
                break;
 800fb2c:	bf00      	nop
 800fb2e:	e008      	b.n	800fb42 <tcp_receive+0xec2>
                break;
 800fb30:	bf00      	nop
 800fb32:	e006      	b.n	800fb42 <tcp_receive+0xec2>
                  break;
 800fb34:	bf00      	nop
 800fb36:	e004      	b.n	800fb42 <tcp_receive+0xec2>
                  break;
 800fb38:	bf00      	nop
 800fb3a:	e002      	b.n	800fb42 <tcp_receive+0xec2>
                  break;
 800fb3c:	bf00      	nop
 800fb3e:	e000      	b.n	800fb42 <tcp_receive+0xec2>
                break;
 800fb40:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800fb42:	6878      	ldr	r0, [r7, #4]
 800fb44:	f001 fa30 	bl	8010fa8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800fb48:	e003      	b.n	800fb52 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800fb4a:	6878      	ldr	r0, [r7, #4]
 800fb4c:	f001 fa2c 	bl	8010fa8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fb50:	e01a      	b.n	800fb88 <tcp_receive+0xf08>
 800fb52:	e019      	b.n	800fb88 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800fb54:	4b0e      	ldr	r3, [pc, #56]	@ (800fb90 <tcp_receive+0xf10>)
 800fb56:	681a      	ldr	r2, [r3, #0]
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb5c:	1ad3      	subs	r3, r2, r3
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	db0a      	blt.n	800fb78 <tcp_receive+0xef8>
 800fb62:	4b0b      	ldr	r3, [pc, #44]	@ (800fb90 <tcp_receive+0xf10>)
 800fb64:	681a      	ldr	r2, [r3, #0]
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb6a:	6879      	ldr	r1, [r7, #4]
 800fb6c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fb6e:	440b      	add	r3, r1
 800fb70:	1ad3      	subs	r3, r2, r3
 800fb72:	3301      	adds	r3, #1
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	dd07      	ble.n	800fb88 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	8b5b      	ldrh	r3, [r3, #26]
 800fb7c:	f043 0302 	orr.w	r3, r3, #2
 800fb80:	b29a      	uxth	r2, r3
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800fb86:	e7ff      	b.n	800fb88 <tcp_receive+0xf08>
 800fb88:	bf00      	nop
 800fb8a:	3750      	adds	r7, #80	@ 0x50
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	bdb0      	pop	{r4, r5, r7, pc}
 800fb90:	2000caf8 	.word	0x2000caf8
 800fb94:	2000cad8 	.word	0x2000cad8
 800fb98:	2000cb02 	.word	0x2000cb02
 800fb9c:	080198b0 	.word	0x080198b0
 800fba0:	08019c58 	.word	0x08019c58
 800fba4:	080198fc 	.word	0x080198fc

0800fba8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800fba8:	b480      	push	{r7}
 800fbaa:	b083      	sub	sp, #12
 800fbac:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800fbae:	4b15      	ldr	r3, [pc, #84]	@ (800fc04 <tcp_get_next_optbyte+0x5c>)
 800fbb0:	881b      	ldrh	r3, [r3, #0]
 800fbb2:	1c5a      	adds	r2, r3, #1
 800fbb4:	b291      	uxth	r1, r2
 800fbb6:	4a13      	ldr	r2, [pc, #76]	@ (800fc04 <tcp_get_next_optbyte+0x5c>)
 800fbb8:	8011      	strh	r1, [r2, #0]
 800fbba:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fbbc:	4b12      	ldr	r3, [pc, #72]	@ (800fc08 <tcp_get_next_optbyte+0x60>)
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d004      	beq.n	800fbce <tcp_get_next_optbyte+0x26>
 800fbc4:	4b11      	ldr	r3, [pc, #68]	@ (800fc0c <tcp_get_next_optbyte+0x64>)
 800fbc6:	881b      	ldrh	r3, [r3, #0]
 800fbc8:	88fa      	ldrh	r2, [r7, #6]
 800fbca:	429a      	cmp	r2, r3
 800fbcc:	d208      	bcs.n	800fbe0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800fbce:	4b10      	ldr	r3, [pc, #64]	@ (800fc10 <tcp_get_next_optbyte+0x68>)
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	3314      	adds	r3, #20
 800fbd4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800fbd6:	88fb      	ldrh	r3, [r7, #6]
 800fbd8:	683a      	ldr	r2, [r7, #0]
 800fbda:	4413      	add	r3, r2
 800fbdc:	781b      	ldrb	r3, [r3, #0]
 800fbde:	e00b      	b.n	800fbf8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800fbe0:	88fb      	ldrh	r3, [r7, #6]
 800fbe2:	b2da      	uxtb	r2, r3
 800fbe4:	4b09      	ldr	r3, [pc, #36]	@ (800fc0c <tcp_get_next_optbyte+0x64>)
 800fbe6:	881b      	ldrh	r3, [r3, #0]
 800fbe8:	b2db      	uxtb	r3, r3
 800fbea:	1ad3      	subs	r3, r2, r3
 800fbec:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800fbee:	4b06      	ldr	r3, [pc, #24]	@ (800fc08 <tcp_get_next_optbyte+0x60>)
 800fbf0:	681a      	ldr	r2, [r3, #0]
 800fbf2:	797b      	ldrb	r3, [r7, #5]
 800fbf4:	4413      	add	r3, r2
 800fbf6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	370c      	adds	r7, #12
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc02:	4770      	bx	lr
 800fc04:	2000caf4 	.word	0x2000caf4
 800fc08:	2000caf0 	.word	0x2000caf0
 800fc0c:	2000caee 	.word	0x2000caee
 800fc10:	2000cae8 	.word	0x2000cae8

0800fc14 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b084      	sub	sp, #16
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d106      	bne.n	800fc30 <tcp_parseopt+0x1c>
 800fc22:	4b32      	ldr	r3, [pc, #200]	@ (800fcec <tcp_parseopt+0xd8>)
 800fc24:	f240 727d 	movw	r2, #1917	@ 0x77d
 800fc28:	4931      	ldr	r1, [pc, #196]	@ (800fcf0 <tcp_parseopt+0xdc>)
 800fc2a:	4832      	ldr	r0, [pc, #200]	@ (800fcf4 <tcp_parseopt+0xe0>)
 800fc2c:	f007 fa14 	bl	8017058 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800fc30:	4b31      	ldr	r3, [pc, #196]	@ (800fcf8 <tcp_parseopt+0xe4>)
 800fc32:	881b      	ldrh	r3, [r3, #0]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d056      	beq.n	800fce6 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fc38:	4b30      	ldr	r3, [pc, #192]	@ (800fcfc <tcp_parseopt+0xe8>)
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	801a      	strh	r2, [r3, #0]
 800fc3e:	e046      	b.n	800fcce <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800fc40:	f7ff ffb2 	bl	800fba8 <tcp_get_next_optbyte>
 800fc44:	4603      	mov	r3, r0
 800fc46:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800fc48:	7bfb      	ldrb	r3, [r7, #15]
 800fc4a:	2b02      	cmp	r3, #2
 800fc4c:	d006      	beq.n	800fc5c <tcp_parseopt+0x48>
 800fc4e:	2b02      	cmp	r3, #2
 800fc50:	dc2a      	bgt.n	800fca8 <tcp_parseopt+0x94>
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d042      	beq.n	800fcdc <tcp_parseopt+0xc8>
 800fc56:	2b01      	cmp	r3, #1
 800fc58:	d038      	beq.n	800fccc <tcp_parseopt+0xb8>
 800fc5a:	e025      	b.n	800fca8 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800fc5c:	f7ff ffa4 	bl	800fba8 <tcp_get_next_optbyte>
 800fc60:	4603      	mov	r3, r0
 800fc62:	2b04      	cmp	r3, #4
 800fc64:	d13c      	bne.n	800fce0 <tcp_parseopt+0xcc>
 800fc66:	4b25      	ldr	r3, [pc, #148]	@ (800fcfc <tcp_parseopt+0xe8>)
 800fc68:	881b      	ldrh	r3, [r3, #0]
 800fc6a:	3301      	adds	r3, #1
 800fc6c:	4a22      	ldr	r2, [pc, #136]	@ (800fcf8 <tcp_parseopt+0xe4>)
 800fc6e:	8812      	ldrh	r2, [r2, #0]
 800fc70:	4293      	cmp	r3, r2
 800fc72:	da35      	bge.n	800fce0 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800fc74:	f7ff ff98 	bl	800fba8 <tcp_get_next_optbyte>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	021b      	lsls	r3, r3, #8
 800fc7c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800fc7e:	f7ff ff93 	bl	800fba8 <tcp_get_next_optbyte>
 800fc82:	4603      	mov	r3, r0
 800fc84:	461a      	mov	r2, r3
 800fc86:	89bb      	ldrh	r3, [r7, #12]
 800fc88:	4313      	orrs	r3, r2
 800fc8a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800fc8c:	89bb      	ldrh	r3, [r7, #12]
 800fc8e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800fc92:	d804      	bhi.n	800fc9e <tcp_parseopt+0x8a>
 800fc94:	89bb      	ldrh	r3, [r7, #12]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d001      	beq.n	800fc9e <tcp_parseopt+0x8a>
 800fc9a:	89ba      	ldrh	r2, [r7, #12]
 800fc9c:	e001      	b.n	800fca2 <tcp_parseopt+0x8e>
 800fc9e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800fca6:	e012      	b.n	800fcce <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800fca8:	f7ff ff7e 	bl	800fba8 <tcp_get_next_optbyte>
 800fcac:	4603      	mov	r3, r0
 800fcae:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800fcb0:	7afb      	ldrb	r3, [r7, #11]
 800fcb2:	2b01      	cmp	r3, #1
 800fcb4:	d916      	bls.n	800fce4 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800fcb6:	7afb      	ldrb	r3, [r7, #11]
 800fcb8:	b29a      	uxth	r2, r3
 800fcba:	4b10      	ldr	r3, [pc, #64]	@ (800fcfc <tcp_parseopt+0xe8>)
 800fcbc:	881b      	ldrh	r3, [r3, #0]
 800fcbe:	4413      	add	r3, r2
 800fcc0:	b29b      	uxth	r3, r3
 800fcc2:	3b02      	subs	r3, #2
 800fcc4:	b29a      	uxth	r2, r3
 800fcc6:	4b0d      	ldr	r3, [pc, #52]	@ (800fcfc <tcp_parseopt+0xe8>)
 800fcc8:	801a      	strh	r2, [r3, #0]
 800fcca:	e000      	b.n	800fcce <tcp_parseopt+0xba>
          break;
 800fccc:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fcce:	4b0b      	ldr	r3, [pc, #44]	@ (800fcfc <tcp_parseopt+0xe8>)
 800fcd0:	881a      	ldrh	r2, [r3, #0]
 800fcd2:	4b09      	ldr	r3, [pc, #36]	@ (800fcf8 <tcp_parseopt+0xe4>)
 800fcd4:	881b      	ldrh	r3, [r3, #0]
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	d3b2      	bcc.n	800fc40 <tcp_parseopt+0x2c>
 800fcda:	e004      	b.n	800fce6 <tcp_parseopt+0xd2>
          return;
 800fcdc:	bf00      	nop
 800fcde:	e002      	b.n	800fce6 <tcp_parseopt+0xd2>
            return;
 800fce0:	bf00      	nop
 800fce2:	e000      	b.n	800fce6 <tcp_parseopt+0xd2>
            return;
 800fce4:	bf00      	nop
      }
    }
  }
}
 800fce6:	3710      	adds	r7, #16
 800fce8:	46bd      	mov	sp, r7
 800fcea:	bd80      	pop	{r7, pc}
 800fcec:	080198b0 	.word	0x080198b0
 800fcf0:	08019d14 	.word	0x08019d14
 800fcf4:	080198fc 	.word	0x080198fc
 800fcf8:	2000caec 	.word	0x2000caec
 800fcfc:	2000caf4 	.word	0x2000caf4

0800fd00 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800fd00:	b480      	push	{r7}
 800fd02:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800fd04:	4b05      	ldr	r3, [pc, #20]	@ (800fd1c <tcp_trigger_input_pcb_close+0x1c>)
 800fd06:	781b      	ldrb	r3, [r3, #0]
 800fd08:	f043 0310 	orr.w	r3, r3, #16
 800fd0c:	b2da      	uxtb	r2, r3
 800fd0e:	4b03      	ldr	r3, [pc, #12]	@ (800fd1c <tcp_trigger_input_pcb_close+0x1c>)
 800fd10:	701a      	strb	r2, [r3, #0]
}
 800fd12:	bf00      	nop
 800fd14:	46bd      	mov	sp, r7
 800fd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1a:	4770      	bx	lr
 800fd1c:	2000cb05 	.word	0x2000cb05

0800fd20 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b084      	sub	sp, #16
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	60f8      	str	r0, [r7, #12]
 800fd28:	60b9      	str	r1, [r7, #8]
 800fd2a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d00a      	beq.n	800fd48 <tcp_route+0x28>
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	7a1b      	ldrb	r3, [r3, #8]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d006      	beq.n	800fd48 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	7a1b      	ldrb	r3, [r3, #8]
 800fd3e:	4618      	mov	r0, r3
 800fd40:	f7fb fae4 	bl	800b30c <netif_get_by_index>
 800fd44:	4603      	mov	r3, r0
 800fd46:	e003      	b.n	800fd50 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800fd48:	6878      	ldr	r0, [r7, #4]
 800fd4a:	f005 fc19 	bl	8015580 <ip4_route>
 800fd4e:	4603      	mov	r3, r0
  }
}
 800fd50:	4618      	mov	r0, r3
 800fd52:	3710      	adds	r7, #16
 800fd54:	46bd      	mov	sp, r7
 800fd56:	bd80      	pop	{r7, pc}

0800fd58 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800fd58:	b590      	push	{r4, r7, lr}
 800fd5a:	b087      	sub	sp, #28
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	60f8      	str	r0, [r7, #12]
 800fd60:	60b9      	str	r1, [r7, #8]
 800fd62:	603b      	str	r3, [r7, #0]
 800fd64:	4613      	mov	r3, r2
 800fd66:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d105      	bne.n	800fd7a <tcp_create_segment+0x22>
 800fd6e:	4b43      	ldr	r3, [pc, #268]	@ (800fe7c <tcp_create_segment+0x124>)
 800fd70:	22a3      	movs	r2, #163	@ 0xa3
 800fd72:	4943      	ldr	r1, [pc, #268]	@ (800fe80 <tcp_create_segment+0x128>)
 800fd74:	4843      	ldr	r0, [pc, #268]	@ (800fe84 <tcp_create_segment+0x12c>)
 800fd76:	f007 f96f 	bl	8017058 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800fd7a:	68bb      	ldr	r3, [r7, #8]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d105      	bne.n	800fd8c <tcp_create_segment+0x34>
 800fd80:	4b3e      	ldr	r3, [pc, #248]	@ (800fe7c <tcp_create_segment+0x124>)
 800fd82:	22a4      	movs	r2, #164	@ 0xa4
 800fd84:	4940      	ldr	r1, [pc, #256]	@ (800fe88 <tcp_create_segment+0x130>)
 800fd86:	483f      	ldr	r0, [pc, #252]	@ (800fe84 <tcp_create_segment+0x12c>)
 800fd88:	f007 f966 	bl	8017058 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fd8c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fd90:	009b      	lsls	r3, r3, #2
 800fd92:	b2db      	uxtb	r3, r3
 800fd94:	f003 0304 	and.w	r3, r3, #4
 800fd98:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800fd9a:	2003      	movs	r0, #3
 800fd9c:	f7fa fe66 	bl	800aa6c <memp_malloc>
 800fda0:	6138      	str	r0, [r7, #16]
 800fda2:	693b      	ldr	r3, [r7, #16]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d104      	bne.n	800fdb2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800fda8:	68b8      	ldr	r0, [r7, #8]
 800fdaa:	f7fb fe6b 	bl	800ba84 <pbuf_free>
    return NULL;
 800fdae:	2300      	movs	r3, #0
 800fdb0:	e060      	b.n	800fe74 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800fdb2:	693b      	ldr	r3, [r7, #16]
 800fdb4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800fdb8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800fdba:	693b      	ldr	r3, [r7, #16]
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800fdc0:	693b      	ldr	r3, [r7, #16]
 800fdc2:	68ba      	ldr	r2, [r7, #8]
 800fdc4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800fdc6:	68bb      	ldr	r3, [r7, #8]
 800fdc8:	891a      	ldrh	r2, [r3, #8]
 800fdca:	7dfb      	ldrb	r3, [r7, #23]
 800fdcc:	b29b      	uxth	r3, r3
 800fdce:	429a      	cmp	r2, r3
 800fdd0:	d205      	bcs.n	800fdde <tcp_create_segment+0x86>
 800fdd2:	4b2a      	ldr	r3, [pc, #168]	@ (800fe7c <tcp_create_segment+0x124>)
 800fdd4:	22b0      	movs	r2, #176	@ 0xb0
 800fdd6:	492d      	ldr	r1, [pc, #180]	@ (800fe8c <tcp_create_segment+0x134>)
 800fdd8:	482a      	ldr	r0, [pc, #168]	@ (800fe84 <tcp_create_segment+0x12c>)
 800fdda:	f007 f93d 	bl	8017058 <iprintf>
  seg->len = p->tot_len - optlen;
 800fdde:	68bb      	ldr	r3, [r7, #8]
 800fde0:	891a      	ldrh	r2, [r3, #8]
 800fde2:	7dfb      	ldrb	r3, [r7, #23]
 800fde4:	b29b      	uxth	r3, r3
 800fde6:	1ad3      	subs	r3, r2, r3
 800fde8:	b29a      	uxth	r2, r3
 800fdea:	693b      	ldr	r3, [r7, #16]
 800fdec:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800fdee:	2114      	movs	r1, #20
 800fdf0:	68b8      	ldr	r0, [r7, #8]
 800fdf2:	f7fb fdb1 	bl	800b958 <pbuf_add_header>
 800fdf6:	4603      	mov	r3, r0
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d004      	beq.n	800fe06 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800fdfc:	6938      	ldr	r0, [r7, #16]
 800fdfe:	f7fd f8d2 	bl	800cfa6 <tcp_seg_free>
    return NULL;
 800fe02:	2300      	movs	r3, #0
 800fe04:	e036      	b.n	800fe74 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800fe06:	693b      	ldr	r3, [r7, #16]
 800fe08:	685b      	ldr	r3, [r3, #4]
 800fe0a:	685a      	ldr	r2, [r3, #4]
 800fe0c:	693b      	ldr	r3, [r7, #16]
 800fe0e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	8ada      	ldrh	r2, [r3, #22]
 800fe14:	693b      	ldr	r3, [r7, #16]
 800fe16:	68dc      	ldr	r4, [r3, #12]
 800fe18:	4610      	mov	r0, r2
 800fe1a:	f7fa f8df 	bl	8009fdc <lwip_htons>
 800fe1e:	4603      	mov	r3, r0
 800fe20:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	8b1a      	ldrh	r2, [r3, #24]
 800fe26:	693b      	ldr	r3, [r7, #16]
 800fe28:	68dc      	ldr	r4, [r3, #12]
 800fe2a:	4610      	mov	r0, r2
 800fe2c:	f7fa f8d6 	bl	8009fdc <lwip_htons>
 800fe30:	4603      	mov	r3, r0
 800fe32:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800fe34:	693b      	ldr	r3, [r7, #16]
 800fe36:	68dc      	ldr	r4, [r3, #12]
 800fe38:	6838      	ldr	r0, [r7, #0]
 800fe3a:	f7fa f8e4 	bl	800a006 <lwip_htonl>
 800fe3e:	4603      	mov	r3, r0
 800fe40:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800fe42:	7dfb      	ldrb	r3, [r7, #23]
 800fe44:	089b      	lsrs	r3, r3, #2
 800fe46:	b2db      	uxtb	r3, r3
 800fe48:	3305      	adds	r3, #5
 800fe4a:	b29b      	uxth	r3, r3
 800fe4c:	031b      	lsls	r3, r3, #12
 800fe4e:	b29a      	uxth	r2, r3
 800fe50:	79fb      	ldrb	r3, [r7, #7]
 800fe52:	b29b      	uxth	r3, r3
 800fe54:	4313      	orrs	r3, r2
 800fe56:	b29a      	uxth	r2, r3
 800fe58:	693b      	ldr	r3, [r7, #16]
 800fe5a:	68dc      	ldr	r4, [r3, #12]
 800fe5c:	4610      	mov	r0, r2
 800fe5e:	f7fa f8bd 	bl	8009fdc <lwip_htons>
 800fe62:	4603      	mov	r3, r0
 800fe64:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800fe66:	693b      	ldr	r3, [r7, #16]
 800fe68:	68db      	ldr	r3, [r3, #12]
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	749a      	strb	r2, [r3, #18]
 800fe6e:	2200      	movs	r2, #0
 800fe70:	74da      	strb	r2, [r3, #19]
  return seg;
 800fe72:	693b      	ldr	r3, [r7, #16]
}
 800fe74:	4618      	mov	r0, r3
 800fe76:	371c      	adds	r7, #28
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd90      	pop	{r4, r7, pc}
 800fe7c:	08019d30 	.word	0x08019d30
 800fe80:	08019d64 	.word	0x08019d64
 800fe84:	08019d84 	.word	0x08019d84
 800fe88:	08019dac 	.word	0x08019dac
 800fe8c:	08019dd0 	.word	0x08019dd0

0800fe90 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800fe90:	b590      	push	{r4, r7, lr}
 800fe92:	b08b      	sub	sp, #44	@ 0x2c
 800fe94:	af02      	add	r7, sp, #8
 800fe96:	6078      	str	r0, [r7, #4]
 800fe98:	460b      	mov	r3, r1
 800fe9a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	61fb      	str	r3, [r7, #28]
 800fea0:	2300      	movs	r3, #0
 800fea2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800fea4:	2300      	movs	r3, #0
 800fea6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d106      	bne.n	800febc <tcp_split_unsent_seg+0x2c>
 800feae:	4b95      	ldr	r3, [pc, #596]	@ (8010104 <tcp_split_unsent_seg+0x274>)
 800feb0:	f240 324b 	movw	r2, #843	@ 0x34b
 800feb4:	4994      	ldr	r1, [pc, #592]	@ (8010108 <tcp_split_unsent_seg+0x278>)
 800feb6:	4895      	ldr	r0, [pc, #596]	@ (801010c <tcp_split_unsent_seg+0x27c>)
 800feb8:	f007 f8ce 	bl	8017058 <iprintf>

  useg = pcb->unsent;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fec0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800fec2:	697b      	ldr	r3, [r7, #20]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d102      	bne.n	800fece <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800fec8:	f04f 33ff 	mov.w	r3, #4294967295
 800fecc:	e116      	b.n	80100fc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800fece:	887b      	ldrh	r3, [r7, #2]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d109      	bne.n	800fee8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800fed4:	4b8b      	ldr	r3, [pc, #556]	@ (8010104 <tcp_split_unsent_seg+0x274>)
 800fed6:	f240 3253 	movw	r2, #851	@ 0x353
 800feda:	498d      	ldr	r1, [pc, #564]	@ (8010110 <tcp_split_unsent_seg+0x280>)
 800fedc:	488b      	ldr	r0, [pc, #556]	@ (801010c <tcp_split_unsent_seg+0x27c>)
 800fede:	f007 f8bb 	bl	8017058 <iprintf>
    return ERR_VAL;
 800fee2:	f06f 0305 	mvn.w	r3, #5
 800fee6:	e109      	b.n	80100fc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800fee8:	697b      	ldr	r3, [r7, #20]
 800feea:	891b      	ldrh	r3, [r3, #8]
 800feec:	887a      	ldrh	r2, [r7, #2]
 800feee:	429a      	cmp	r2, r3
 800fef0:	d301      	bcc.n	800fef6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800fef2:	2300      	movs	r3, #0
 800fef4:	e102      	b.n	80100fc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fefa:	887a      	ldrh	r2, [r7, #2]
 800fefc:	429a      	cmp	r2, r3
 800fefe:	d906      	bls.n	800ff0e <tcp_split_unsent_seg+0x7e>
 800ff00:	4b80      	ldr	r3, [pc, #512]	@ (8010104 <tcp_split_unsent_seg+0x274>)
 800ff02:	f240 325b 	movw	r2, #859	@ 0x35b
 800ff06:	4983      	ldr	r1, [pc, #524]	@ (8010114 <tcp_split_unsent_seg+0x284>)
 800ff08:	4880      	ldr	r0, [pc, #512]	@ (801010c <tcp_split_unsent_seg+0x27c>)
 800ff0a:	f007 f8a5 	bl	8017058 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ff0e:	697b      	ldr	r3, [r7, #20]
 800ff10:	891b      	ldrh	r3, [r3, #8]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d106      	bne.n	800ff24 <tcp_split_unsent_seg+0x94>
 800ff16:	4b7b      	ldr	r3, [pc, #492]	@ (8010104 <tcp_split_unsent_seg+0x274>)
 800ff18:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800ff1c:	497e      	ldr	r1, [pc, #504]	@ (8010118 <tcp_split_unsent_seg+0x288>)
 800ff1e:	487b      	ldr	r0, [pc, #492]	@ (801010c <tcp_split_unsent_seg+0x27c>)
 800ff20:	f007 f89a 	bl	8017058 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ff24:	697b      	ldr	r3, [r7, #20]
 800ff26:	7a9b      	ldrb	r3, [r3, #10]
 800ff28:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ff2a:	7bfb      	ldrb	r3, [r7, #15]
 800ff2c:	009b      	lsls	r3, r3, #2
 800ff2e:	b2db      	uxtb	r3, r3
 800ff30:	f003 0304 	and.w	r3, r3, #4
 800ff34:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800ff36:	697b      	ldr	r3, [r7, #20]
 800ff38:	891a      	ldrh	r2, [r3, #8]
 800ff3a:	887b      	ldrh	r3, [r7, #2]
 800ff3c:	1ad3      	subs	r3, r2, r3
 800ff3e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800ff40:	7bbb      	ldrb	r3, [r7, #14]
 800ff42:	b29a      	uxth	r2, r3
 800ff44:	89bb      	ldrh	r3, [r7, #12]
 800ff46:	4413      	add	r3, r2
 800ff48:	b29b      	uxth	r3, r3
 800ff4a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ff4e:	4619      	mov	r1, r3
 800ff50:	2036      	movs	r0, #54	@ 0x36
 800ff52:	f7fb fab3 	bl	800b4bc <pbuf_alloc>
 800ff56:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ff58:	693b      	ldr	r3, [r7, #16]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	f000 80b7 	beq.w	80100ce <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800ff60:	697b      	ldr	r3, [r7, #20]
 800ff62:	685b      	ldr	r3, [r3, #4]
 800ff64:	891a      	ldrh	r2, [r3, #8]
 800ff66:	697b      	ldr	r3, [r7, #20]
 800ff68:	891b      	ldrh	r3, [r3, #8]
 800ff6a:	1ad3      	subs	r3, r2, r3
 800ff6c:	b29a      	uxth	r2, r3
 800ff6e:	887b      	ldrh	r3, [r7, #2]
 800ff70:	4413      	add	r3, r2
 800ff72:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800ff74:	697b      	ldr	r3, [r7, #20]
 800ff76:	6858      	ldr	r0, [r3, #4]
 800ff78:	693b      	ldr	r3, [r7, #16]
 800ff7a:	685a      	ldr	r2, [r3, #4]
 800ff7c:	7bbb      	ldrb	r3, [r7, #14]
 800ff7e:	18d1      	adds	r1, r2, r3
 800ff80:	897b      	ldrh	r3, [r7, #10]
 800ff82:	89ba      	ldrh	r2, [r7, #12]
 800ff84:	f7fb ff84 	bl	800be90 <pbuf_copy_partial>
 800ff88:	4603      	mov	r3, r0
 800ff8a:	461a      	mov	r2, r3
 800ff8c:	89bb      	ldrh	r3, [r7, #12]
 800ff8e:	4293      	cmp	r3, r2
 800ff90:	f040 809f 	bne.w	80100d2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800ff94:	697b      	ldr	r3, [r7, #20]
 800ff96:	68db      	ldr	r3, [r3, #12]
 800ff98:	899b      	ldrh	r3, [r3, #12]
 800ff9a:	b29b      	uxth	r3, r3
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	f7fa f81d 	bl	8009fdc <lwip_htons>
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	b2db      	uxtb	r3, r3
 800ffa6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ffaa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800ffac:	2300      	movs	r3, #0
 800ffae:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800ffb0:	7efb      	ldrb	r3, [r7, #27]
 800ffb2:	f003 0308 	and.w	r3, r3, #8
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d007      	beq.n	800ffca <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800ffba:	7efb      	ldrb	r3, [r7, #27]
 800ffbc:	f023 0308 	bic.w	r3, r3, #8
 800ffc0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800ffc2:	7ebb      	ldrb	r3, [r7, #26]
 800ffc4:	f043 0308 	orr.w	r3, r3, #8
 800ffc8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800ffca:	7efb      	ldrb	r3, [r7, #27]
 800ffcc:	f003 0301 	and.w	r3, r3, #1
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d007      	beq.n	800ffe4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800ffd4:	7efb      	ldrb	r3, [r7, #27]
 800ffd6:	f023 0301 	bic.w	r3, r3, #1
 800ffda:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ffdc:	7ebb      	ldrb	r3, [r7, #26]
 800ffde:	f043 0301 	orr.w	r3, r3, #1
 800ffe2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ffe4:	697b      	ldr	r3, [r7, #20]
 800ffe6:	68db      	ldr	r3, [r3, #12]
 800ffe8:	685b      	ldr	r3, [r3, #4]
 800ffea:	4618      	mov	r0, r3
 800ffec:	f7fa f80b 	bl	800a006 <lwip_htonl>
 800fff0:	4602      	mov	r2, r0
 800fff2:	887b      	ldrh	r3, [r7, #2]
 800fff4:	18d1      	adds	r1, r2, r3
 800fff6:	7eba      	ldrb	r2, [r7, #26]
 800fff8:	7bfb      	ldrb	r3, [r7, #15]
 800fffa:	9300      	str	r3, [sp, #0]
 800fffc:	460b      	mov	r3, r1
 800fffe:	6939      	ldr	r1, [r7, #16]
 8010000:	6878      	ldr	r0, [r7, #4]
 8010002:	f7ff fea9 	bl	800fd58 <tcp_create_segment>
 8010006:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010008:	69fb      	ldr	r3, [r7, #28]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d063      	beq.n	80100d6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801000e:	697b      	ldr	r3, [r7, #20]
 8010010:	685b      	ldr	r3, [r3, #4]
 8010012:	4618      	mov	r0, r3
 8010014:	f7fb fdc4 	bl	800bba0 <pbuf_clen>
 8010018:	4603      	mov	r3, r0
 801001a:	461a      	mov	r2, r3
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010022:	1a9b      	subs	r3, r3, r2
 8010024:	b29a      	uxth	r2, r3
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801002c:	697b      	ldr	r3, [r7, #20]
 801002e:	6858      	ldr	r0, [r3, #4]
 8010030:	697b      	ldr	r3, [r7, #20]
 8010032:	685b      	ldr	r3, [r3, #4]
 8010034:	891a      	ldrh	r2, [r3, #8]
 8010036:	89bb      	ldrh	r3, [r7, #12]
 8010038:	1ad3      	subs	r3, r2, r3
 801003a:	b29b      	uxth	r3, r3
 801003c:	4619      	mov	r1, r3
 801003e:	f7fb fb9b 	bl	800b778 <pbuf_realloc>
  useg->len -= remainder;
 8010042:	697b      	ldr	r3, [r7, #20]
 8010044:	891a      	ldrh	r2, [r3, #8]
 8010046:	89bb      	ldrh	r3, [r7, #12]
 8010048:	1ad3      	subs	r3, r2, r3
 801004a:	b29a      	uxth	r2, r3
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010050:	697b      	ldr	r3, [r7, #20]
 8010052:	68db      	ldr	r3, [r3, #12]
 8010054:	899b      	ldrh	r3, [r3, #12]
 8010056:	b29c      	uxth	r4, r3
 8010058:	7efb      	ldrb	r3, [r7, #27]
 801005a:	b29b      	uxth	r3, r3
 801005c:	4618      	mov	r0, r3
 801005e:	f7f9 ffbd 	bl	8009fdc <lwip_htons>
 8010062:	4603      	mov	r3, r0
 8010064:	461a      	mov	r2, r3
 8010066:	697b      	ldr	r3, [r7, #20]
 8010068:	68db      	ldr	r3, [r3, #12]
 801006a:	4322      	orrs	r2, r4
 801006c:	b292      	uxth	r2, r2
 801006e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010070:	697b      	ldr	r3, [r7, #20]
 8010072:	685b      	ldr	r3, [r3, #4]
 8010074:	4618      	mov	r0, r3
 8010076:	f7fb fd93 	bl	800bba0 <pbuf_clen>
 801007a:	4603      	mov	r3, r0
 801007c:	461a      	mov	r2, r3
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010084:	4413      	add	r3, r2
 8010086:	b29a      	uxth	r2, r3
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801008e:	69fb      	ldr	r3, [r7, #28]
 8010090:	685b      	ldr	r3, [r3, #4]
 8010092:	4618      	mov	r0, r3
 8010094:	f7fb fd84 	bl	800bba0 <pbuf_clen>
 8010098:	4603      	mov	r3, r0
 801009a:	461a      	mov	r2, r3
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80100a2:	4413      	add	r3, r2
 80100a4:	b29a      	uxth	r2, r3
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80100ac:	697b      	ldr	r3, [r7, #20]
 80100ae:	681a      	ldr	r2, [r3, #0]
 80100b0:	69fb      	ldr	r3, [r7, #28]
 80100b2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80100b4:	697b      	ldr	r3, [r7, #20]
 80100b6:	69fa      	ldr	r2, [r7, #28]
 80100b8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80100ba:	69fb      	ldr	r3, [r7, #28]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d103      	bne.n	80100ca <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	2200      	movs	r2, #0
 80100c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80100ca:	2300      	movs	r3, #0
 80100cc:	e016      	b.n	80100fc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80100ce:	bf00      	nop
 80100d0:	e002      	b.n	80100d8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80100d2:	bf00      	nop
 80100d4:	e000      	b.n	80100d8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80100d6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80100d8:	69fb      	ldr	r3, [r7, #28]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d006      	beq.n	80100ec <tcp_split_unsent_seg+0x25c>
 80100de:	4b09      	ldr	r3, [pc, #36]	@ (8010104 <tcp_split_unsent_seg+0x274>)
 80100e0:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 80100e4:	490d      	ldr	r1, [pc, #52]	@ (801011c <tcp_split_unsent_seg+0x28c>)
 80100e6:	4809      	ldr	r0, [pc, #36]	@ (801010c <tcp_split_unsent_seg+0x27c>)
 80100e8:	f006 ffb6 	bl	8017058 <iprintf>
  if (p != NULL) {
 80100ec:	693b      	ldr	r3, [r7, #16]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d002      	beq.n	80100f8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80100f2:	6938      	ldr	r0, [r7, #16]
 80100f4:	f7fb fcc6 	bl	800ba84 <pbuf_free>
  }

  return ERR_MEM;
 80100f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	3724      	adds	r7, #36	@ 0x24
 8010100:	46bd      	mov	sp, r7
 8010102:	bd90      	pop	{r4, r7, pc}
 8010104:	08019d30 	.word	0x08019d30
 8010108:	0801a0c4 	.word	0x0801a0c4
 801010c:	08019d84 	.word	0x08019d84
 8010110:	0801a0e8 	.word	0x0801a0e8
 8010114:	0801a10c 	.word	0x0801a10c
 8010118:	0801a11c 	.word	0x0801a11c
 801011c:	0801a12c 	.word	0x0801a12c

08010120 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010120:	b590      	push	{r4, r7, lr}
 8010122:	b085      	sub	sp, #20
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d106      	bne.n	801013c <tcp_send_fin+0x1c>
 801012e:	4b21      	ldr	r3, [pc, #132]	@ (80101b4 <tcp_send_fin+0x94>)
 8010130:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8010134:	4920      	ldr	r1, [pc, #128]	@ (80101b8 <tcp_send_fin+0x98>)
 8010136:	4821      	ldr	r0, [pc, #132]	@ (80101bc <tcp_send_fin+0x9c>)
 8010138:	f006 ff8e 	bl	8017058 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010140:	2b00      	cmp	r3, #0
 8010142:	d02e      	beq.n	80101a2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010148:	60fb      	str	r3, [r7, #12]
 801014a:	e002      	b.n	8010152 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d1f8      	bne.n	801014c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	68db      	ldr	r3, [r3, #12]
 801015e:	899b      	ldrh	r3, [r3, #12]
 8010160:	b29b      	uxth	r3, r3
 8010162:	4618      	mov	r0, r3
 8010164:	f7f9 ff3a 	bl	8009fdc <lwip_htons>
 8010168:	4603      	mov	r3, r0
 801016a:	b2db      	uxtb	r3, r3
 801016c:	f003 0307 	and.w	r3, r3, #7
 8010170:	2b00      	cmp	r3, #0
 8010172:	d116      	bne.n	80101a2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	68db      	ldr	r3, [r3, #12]
 8010178:	899b      	ldrh	r3, [r3, #12]
 801017a:	b29c      	uxth	r4, r3
 801017c:	2001      	movs	r0, #1
 801017e:	f7f9 ff2d 	bl	8009fdc <lwip_htons>
 8010182:	4603      	mov	r3, r0
 8010184:	461a      	mov	r2, r3
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	68db      	ldr	r3, [r3, #12]
 801018a:	4322      	orrs	r2, r4
 801018c:	b292      	uxth	r2, r2
 801018e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	8b5b      	ldrh	r3, [r3, #26]
 8010194:	f043 0320 	orr.w	r3, r3, #32
 8010198:	b29a      	uxth	r2, r3
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801019e:	2300      	movs	r3, #0
 80101a0:	e004      	b.n	80101ac <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80101a2:	2101      	movs	r1, #1
 80101a4:	6878      	ldr	r0, [r7, #4]
 80101a6:	f000 f80b 	bl	80101c0 <tcp_enqueue_flags>
 80101aa:	4603      	mov	r3, r0
}
 80101ac:	4618      	mov	r0, r3
 80101ae:	3714      	adds	r7, #20
 80101b0:	46bd      	mov	sp, r7
 80101b2:	bd90      	pop	{r4, r7, pc}
 80101b4:	08019d30 	.word	0x08019d30
 80101b8:	0801a138 	.word	0x0801a138
 80101bc:	08019d84 	.word	0x08019d84

080101c0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b08a      	sub	sp, #40	@ 0x28
 80101c4:	af02      	add	r7, sp, #8
 80101c6:	6078      	str	r0, [r7, #4]
 80101c8:	460b      	mov	r3, r1
 80101ca:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80101cc:	2300      	movs	r3, #0
 80101ce:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80101d0:	2300      	movs	r3, #0
 80101d2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80101d4:	78fb      	ldrb	r3, [r7, #3]
 80101d6:	f003 0303 	and.w	r3, r3, #3
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d106      	bne.n	80101ec <tcp_enqueue_flags+0x2c>
 80101de:	4b67      	ldr	r3, [pc, #412]	@ (801037c <tcp_enqueue_flags+0x1bc>)
 80101e0:	f240 4211 	movw	r2, #1041	@ 0x411
 80101e4:	4966      	ldr	r1, [pc, #408]	@ (8010380 <tcp_enqueue_flags+0x1c0>)
 80101e6:	4867      	ldr	r0, [pc, #412]	@ (8010384 <tcp_enqueue_flags+0x1c4>)
 80101e8:	f006 ff36 	bl	8017058 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d106      	bne.n	8010200 <tcp_enqueue_flags+0x40>
 80101f2:	4b62      	ldr	r3, [pc, #392]	@ (801037c <tcp_enqueue_flags+0x1bc>)
 80101f4:	f240 4213 	movw	r2, #1043	@ 0x413
 80101f8:	4963      	ldr	r1, [pc, #396]	@ (8010388 <tcp_enqueue_flags+0x1c8>)
 80101fa:	4862      	ldr	r0, [pc, #392]	@ (8010384 <tcp_enqueue_flags+0x1c4>)
 80101fc:	f006 ff2c 	bl	8017058 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010200:	78fb      	ldrb	r3, [r7, #3]
 8010202:	f003 0302 	and.w	r3, r3, #2
 8010206:	2b00      	cmp	r3, #0
 8010208:	d001      	beq.n	801020e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801020a:	2301      	movs	r3, #1
 801020c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801020e:	7ffb      	ldrb	r3, [r7, #31]
 8010210:	009b      	lsls	r3, r3, #2
 8010212:	b2db      	uxtb	r3, r3
 8010214:	f003 0304 	and.w	r3, r3, #4
 8010218:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801021a:	7dfb      	ldrb	r3, [r7, #23]
 801021c:	b29b      	uxth	r3, r3
 801021e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010222:	4619      	mov	r1, r3
 8010224:	2036      	movs	r0, #54	@ 0x36
 8010226:	f7fb f949 	bl	800b4bc <pbuf_alloc>
 801022a:	6138      	str	r0, [r7, #16]
 801022c:	693b      	ldr	r3, [r7, #16]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d109      	bne.n	8010246 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	8b5b      	ldrh	r3, [r3, #26]
 8010236:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801023a:	b29a      	uxth	r2, r3
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010240:	f04f 33ff 	mov.w	r3, #4294967295
 8010244:	e095      	b.n	8010372 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010246:	693b      	ldr	r3, [r7, #16]
 8010248:	895a      	ldrh	r2, [r3, #10]
 801024a:	7dfb      	ldrb	r3, [r7, #23]
 801024c:	b29b      	uxth	r3, r3
 801024e:	429a      	cmp	r2, r3
 8010250:	d206      	bcs.n	8010260 <tcp_enqueue_flags+0xa0>
 8010252:	4b4a      	ldr	r3, [pc, #296]	@ (801037c <tcp_enqueue_flags+0x1bc>)
 8010254:	f240 4239 	movw	r2, #1081	@ 0x439
 8010258:	494c      	ldr	r1, [pc, #304]	@ (801038c <tcp_enqueue_flags+0x1cc>)
 801025a:	484a      	ldr	r0, [pc, #296]	@ (8010384 <tcp_enqueue_flags+0x1c4>)
 801025c:	f006 fefc 	bl	8017058 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8010264:	78fa      	ldrb	r2, [r7, #3]
 8010266:	7ffb      	ldrb	r3, [r7, #31]
 8010268:	9300      	str	r3, [sp, #0]
 801026a:	460b      	mov	r3, r1
 801026c:	6939      	ldr	r1, [r7, #16]
 801026e:	6878      	ldr	r0, [r7, #4]
 8010270:	f7ff fd72 	bl	800fd58 <tcp_create_segment>
 8010274:	60f8      	str	r0, [r7, #12]
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d109      	bne.n	8010290 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	8b5b      	ldrh	r3, [r3, #26]
 8010280:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010284:	b29a      	uxth	r2, r3
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801028a:	f04f 33ff 	mov.w	r3, #4294967295
 801028e:	e070      	b.n	8010372 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	68db      	ldr	r3, [r3, #12]
 8010294:	f003 0303 	and.w	r3, r3, #3
 8010298:	2b00      	cmp	r3, #0
 801029a:	d006      	beq.n	80102aa <tcp_enqueue_flags+0xea>
 801029c:	4b37      	ldr	r3, [pc, #220]	@ (801037c <tcp_enqueue_flags+0x1bc>)
 801029e:	f240 4242 	movw	r2, #1090	@ 0x442
 80102a2:	493b      	ldr	r1, [pc, #236]	@ (8010390 <tcp_enqueue_flags+0x1d0>)
 80102a4:	4837      	ldr	r0, [pc, #220]	@ (8010384 <tcp_enqueue_flags+0x1c4>)
 80102a6:	f006 fed7 	bl	8017058 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	891b      	ldrh	r3, [r3, #8]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d006      	beq.n	80102c0 <tcp_enqueue_flags+0x100>
 80102b2:	4b32      	ldr	r3, [pc, #200]	@ (801037c <tcp_enqueue_flags+0x1bc>)
 80102b4:	f240 4243 	movw	r2, #1091	@ 0x443
 80102b8:	4936      	ldr	r1, [pc, #216]	@ (8010394 <tcp_enqueue_flags+0x1d4>)
 80102ba:	4832      	ldr	r0, [pc, #200]	@ (8010384 <tcp_enqueue_flags+0x1c4>)
 80102bc:	f006 fecc 	bl	8017058 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d103      	bne.n	80102d0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	68fa      	ldr	r2, [r7, #12]
 80102cc:	66da      	str	r2, [r3, #108]	@ 0x6c
 80102ce:	e00d      	b.n	80102ec <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102d4:	61bb      	str	r3, [r7, #24]
 80102d6:	e002      	b.n	80102de <tcp_enqueue_flags+0x11e>
 80102d8:	69bb      	ldr	r3, [r7, #24]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	61bb      	str	r3, [r7, #24]
 80102de:	69bb      	ldr	r3, [r7, #24]
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d1f8      	bne.n	80102d8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80102e6:	69bb      	ldr	r3, [r7, #24]
 80102e8:	68fa      	ldr	r2, [r7, #12]
 80102ea:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	2200      	movs	r2, #0
 80102f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80102f4:	78fb      	ldrb	r3, [r7, #3]
 80102f6:	f003 0302 	and.w	r3, r3, #2
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d104      	bne.n	8010308 <tcp_enqueue_flags+0x148>
 80102fe:	78fb      	ldrb	r3, [r7, #3]
 8010300:	f003 0301 	and.w	r3, r3, #1
 8010304:	2b00      	cmp	r3, #0
 8010306:	d004      	beq.n	8010312 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801030c:	1c5a      	adds	r2, r3, #1
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010312:	78fb      	ldrb	r3, [r7, #3]
 8010314:	f003 0301 	and.w	r3, r3, #1
 8010318:	2b00      	cmp	r3, #0
 801031a:	d006      	beq.n	801032a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	8b5b      	ldrh	r3, [r3, #26]
 8010320:	f043 0320 	orr.w	r3, r3, #32
 8010324:	b29a      	uxth	r2, r3
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	685b      	ldr	r3, [r3, #4]
 801032e:	4618      	mov	r0, r3
 8010330:	f7fb fc36 	bl	800bba0 <pbuf_clen>
 8010334:	4603      	mov	r3, r0
 8010336:	461a      	mov	r2, r3
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801033e:	4413      	add	r3, r2
 8010340:	b29a      	uxth	r2, r3
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801034e:	2b00      	cmp	r3, #0
 8010350:	d00e      	beq.n	8010370 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010356:	2b00      	cmp	r3, #0
 8010358:	d10a      	bne.n	8010370 <tcp_enqueue_flags+0x1b0>
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801035e:	2b00      	cmp	r3, #0
 8010360:	d106      	bne.n	8010370 <tcp_enqueue_flags+0x1b0>
 8010362:	4b06      	ldr	r3, [pc, #24]	@ (801037c <tcp_enqueue_flags+0x1bc>)
 8010364:	f240 4265 	movw	r2, #1125	@ 0x465
 8010368:	490b      	ldr	r1, [pc, #44]	@ (8010398 <tcp_enqueue_flags+0x1d8>)
 801036a:	4806      	ldr	r0, [pc, #24]	@ (8010384 <tcp_enqueue_flags+0x1c4>)
 801036c:	f006 fe74 	bl	8017058 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010370:	2300      	movs	r3, #0
}
 8010372:	4618      	mov	r0, r3
 8010374:	3720      	adds	r7, #32
 8010376:	46bd      	mov	sp, r7
 8010378:	bd80      	pop	{r7, pc}
 801037a:	bf00      	nop
 801037c:	08019d30 	.word	0x08019d30
 8010380:	0801a154 	.word	0x0801a154
 8010384:	08019d84 	.word	0x08019d84
 8010388:	0801a1ac 	.word	0x0801a1ac
 801038c:	0801a1cc 	.word	0x0801a1cc
 8010390:	0801a208 	.word	0x0801a208
 8010394:	0801a220 	.word	0x0801a220
 8010398:	0801a24c 	.word	0x0801a24c

0801039c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801039c:	b5b0      	push	{r4, r5, r7, lr}
 801039e:	b08a      	sub	sp, #40	@ 0x28
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d106      	bne.n	80103b8 <tcp_output+0x1c>
 80103aa:	4b8a      	ldr	r3, [pc, #552]	@ (80105d4 <tcp_output+0x238>)
 80103ac:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80103b0:	4989      	ldr	r1, [pc, #548]	@ (80105d8 <tcp_output+0x23c>)
 80103b2:	488a      	ldr	r0, [pc, #552]	@ (80105dc <tcp_output+0x240>)
 80103b4:	f006 fe50 	bl	8017058 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	7d1b      	ldrb	r3, [r3, #20]
 80103bc:	2b01      	cmp	r3, #1
 80103be:	d106      	bne.n	80103ce <tcp_output+0x32>
 80103c0:	4b84      	ldr	r3, [pc, #528]	@ (80105d4 <tcp_output+0x238>)
 80103c2:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80103c6:	4986      	ldr	r1, [pc, #536]	@ (80105e0 <tcp_output+0x244>)
 80103c8:	4884      	ldr	r0, [pc, #528]	@ (80105dc <tcp_output+0x240>)
 80103ca:	f006 fe45 	bl	8017058 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80103ce:	4b85      	ldr	r3, [pc, #532]	@ (80105e4 <tcp_output+0x248>)
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	687a      	ldr	r2, [r7, #4]
 80103d4:	429a      	cmp	r2, r3
 80103d6:	d101      	bne.n	80103dc <tcp_output+0x40>
    return ERR_OK;
 80103d8:	2300      	movs	r3, #0
 80103da:	e1ce      	b.n	801077a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80103e8:	4293      	cmp	r3, r2
 80103ea:	bf28      	it	cs
 80103ec:	4613      	movcs	r3, r2
 80103ee:	b29b      	uxth	r3, r3
 80103f0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80103f6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 80103f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d10b      	bne.n	8010416 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	8b5b      	ldrh	r3, [r3, #26]
 8010402:	f003 0302 	and.w	r3, r3, #2
 8010406:	2b00      	cmp	r3, #0
 8010408:	f000 81aa 	beq.w	8010760 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f000 fdcb 	bl	8010fa8 <tcp_send_empty_ack>
 8010412:	4603      	mov	r3, r0
 8010414:	e1b1      	b.n	801077a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010416:	6879      	ldr	r1, [r7, #4]
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	3304      	adds	r3, #4
 801041c:	461a      	mov	r2, r3
 801041e:	6878      	ldr	r0, [r7, #4]
 8010420:	f7ff fc7e 	bl	800fd20 <tcp_route>
 8010424:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010426:	697b      	ldr	r3, [r7, #20]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d102      	bne.n	8010432 <tcp_output+0x96>
    return ERR_RTE;
 801042c:	f06f 0303 	mvn.w	r3, #3
 8010430:	e1a3      	b.n	801077a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d003      	beq.n	8010440 <tcp_output+0xa4>
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d111      	bne.n	8010464 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010440:	697b      	ldr	r3, [r7, #20]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d002      	beq.n	801044c <tcp_output+0xb0>
 8010446:	697b      	ldr	r3, [r7, #20]
 8010448:	3304      	adds	r3, #4
 801044a:	e000      	b.n	801044e <tcp_output+0xb2>
 801044c:	2300      	movs	r3, #0
 801044e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010450:	693b      	ldr	r3, [r7, #16]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d102      	bne.n	801045c <tcp_output+0xc0>
      return ERR_RTE;
 8010456:	f06f 0303 	mvn.w	r3, #3
 801045a:	e18e      	b.n	801077a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801045c:	693b      	ldr	r3, [r7, #16]
 801045e:	681a      	ldr	r2, [r3, #0]
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010466:	68db      	ldr	r3, [r3, #12]
 8010468:	685b      	ldr	r3, [r3, #4]
 801046a:	4618      	mov	r0, r3
 801046c:	f7f9 fdcb 	bl	800a006 <lwip_htonl>
 8010470:	4602      	mov	r2, r0
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010476:	1ad3      	subs	r3, r2, r3
 8010478:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801047a:	8912      	ldrh	r2, [r2, #8]
 801047c:	4413      	add	r3, r2
 801047e:	69ba      	ldr	r2, [r7, #24]
 8010480:	429a      	cmp	r2, r3
 8010482:	d227      	bcs.n	80104d4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801048a:	461a      	mov	r2, r3
 801048c:	69bb      	ldr	r3, [r7, #24]
 801048e:	4293      	cmp	r3, r2
 8010490:	d114      	bne.n	80104bc <tcp_output+0x120>
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010496:	2b00      	cmp	r3, #0
 8010498:	d110      	bne.n	80104bc <tcp_output+0x120>
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d10b      	bne.n	80104bc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	2200      	movs	r2, #0
 80104a8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	2201      	movs	r2, #1
 80104b0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	2200      	movs	r2, #0
 80104b8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	8b5b      	ldrh	r3, [r3, #26]
 80104c0:	f003 0302 	and.w	r3, r3, #2
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	f000 814d 	beq.w	8010764 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80104ca:	6878      	ldr	r0, [r7, #4]
 80104cc:	f000 fd6c 	bl	8010fa8 <tcp_send_empty_ack>
 80104d0:	4603      	mov	r3, r0
 80104d2:	e152      	b.n	801077a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	2200      	movs	r2, #0
 80104d8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80104e0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80104e2:	6a3b      	ldr	r3, [r7, #32]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	f000 811c 	beq.w	8010722 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80104ea:	e002      	b.n	80104f2 <tcp_output+0x156>
 80104ec:	6a3b      	ldr	r3, [r7, #32]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	623b      	str	r3, [r7, #32]
 80104f2:	6a3b      	ldr	r3, [r7, #32]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d1f8      	bne.n	80104ec <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80104fa:	e112      	b.n	8010722 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80104fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104fe:	68db      	ldr	r3, [r3, #12]
 8010500:	899b      	ldrh	r3, [r3, #12]
 8010502:	b29b      	uxth	r3, r3
 8010504:	4618      	mov	r0, r3
 8010506:	f7f9 fd69 	bl	8009fdc <lwip_htons>
 801050a:	4603      	mov	r3, r0
 801050c:	b2db      	uxtb	r3, r3
 801050e:	f003 0304 	and.w	r3, r3, #4
 8010512:	2b00      	cmp	r3, #0
 8010514:	d006      	beq.n	8010524 <tcp_output+0x188>
 8010516:	4b2f      	ldr	r3, [pc, #188]	@ (80105d4 <tcp_output+0x238>)
 8010518:	f240 5236 	movw	r2, #1334	@ 0x536
 801051c:	4932      	ldr	r1, [pc, #200]	@ (80105e8 <tcp_output+0x24c>)
 801051e:	482f      	ldr	r0, [pc, #188]	@ (80105dc <tcp_output+0x240>)
 8010520:	f006 fd9a 	bl	8017058 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010528:	2b00      	cmp	r3, #0
 801052a:	d01f      	beq.n	801056c <tcp_output+0x1d0>
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	8b5b      	ldrh	r3, [r3, #26]
 8010530:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8010534:	2b00      	cmp	r3, #0
 8010536:	d119      	bne.n	801056c <tcp_output+0x1d0>
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801053c:	2b00      	cmp	r3, #0
 801053e:	d00b      	beq.n	8010558 <tcp_output+0x1bc>
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d110      	bne.n	801056c <tcp_output+0x1d0>
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801054e:	891a      	ldrh	r2, [r3, #8]
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010554:	429a      	cmp	r2, r3
 8010556:	d209      	bcs.n	801056c <tcp_output+0x1d0>
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801055e:	2b00      	cmp	r3, #0
 8010560:	d004      	beq.n	801056c <tcp_output+0x1d0>
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010568:	2b08      	cmp	r3, #8
 801056a:	d901      	bls.n	8010570 <tcp_output+0x1d4>
 801056c:	2301      	movs	r3, #1
 801056e:	e000      	b.n	8010572 <tcp_output+0x1d6>
 8010570:	2300      	movs	r3, #0
 8010572:	2b00      	cmp	r3, #0
 8010574:	d106      	bne.n	8010584 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	8b5b      	ldrh	r3, [r3, #26]
 801057a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801057e:	2b00      	cmp	r3, #0
 8010580:	f000 80e4 	beq.w	801074c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	7d1b      	ldrb	r3, [r3, #20]
 8010588:	2b02      	cmp	r3, #2
 801058a:	d00d      	beq.n	80105a8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801058c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801058e:	68db      	ldr	r3, [r3, #12]
 8010590:	899b      	ldrh	r3, [r3, #12]
 8010592:	b29c      	uxth	r4, r3
 8010594:	2010      	movs	r0, #16
 8010596:	f7f9 fd21 	bl	8009fdc <lwip_htons>
 801059a:	4603      	mov	r3, r0
 801059c:	461a      	mov	r2, r3
 801059e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105a0:	68db      	ldr	r3, [r3, #12]
 80105a2:	4322      	orrs	r2, r4
 80105a4:	b292      	uxth	r2, r2
 80105a6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80105a8:	697a      	ldr	r2, [r7, #20]
 80105aa:	6879      	ldr	r1, [r7, #4]
 80105ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80105ae:	f000 f909 	bl	80107c4 <tcp_output_segment>
 80105b2:	4603      	mov	r3, r0
 80105b4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80105b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d016      	beq.n	80105ec <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	8b5b      	ldrh	r3, [r3, #26]
 80105c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80105c6:	b29a      	uxth	r2, r3
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	835a      	strh	r2, [r3, #26]
      return err;
 80105cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80105d0:	e0d3      	b.n	801077a <tcp_output+0x3de>
 80105d2:	bf00      	nop
 80105d4:	08019d30 	.word	0x08019d30
 80105d8:	0801a274 	.word	0x0801a274
 80105dc:	08019d84 	.word	0x08019d84
 80105e0:	0801a28c 	.word	0x0801a28c
 80105e4:	2000cb0c 	.word	0x2000cb0c
 80105e8:	0801a2b4 	.word	0x0801a2b4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80105ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105ee:	681a      	ldr	r2, [r3, #0]
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	7d1b      	ldrb	r3, [r3, #20]
 80105f8:	2b02      	cmp	r3, #2
 80105fa:	d006      	beq.n	801060a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	8b5b      	ldrh	r3, [r3, #26]
 8010600:	f023 0303 	bic.w	r3, r3, #3
 8010604:	b29a      	uxth	r2, r3
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801060a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801060c:	68db      	ldr	r3, [r3, #12]
 801060e:	685b      	ldr	r3, [r3, #4]
 8010610:	4618      	mov	r0, r3
 8010612:	f7f9 fcf8 	bl	800a006 <lwip_htonl>
 8010616:	4604      	mov	r4, r0
 8010618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801061a:	891b      	ldrh	r3, [r3, #8]
 801061c:	461d      	mov	r5, r3
 801061e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010620:	68db      	ldr	r3, [r3, #12]
 8010622:	899b      	ldrh	r3, [r3, #12]
 8010624:	b29b      	uxth	r3, r3
 8010626:	4618      	mov	r0, r3
 8010628:	f7f9 fcd8 	bl	8009fdc <lwip_htons>
 801062c:	4603      	mov	r3, r0
 801062e:	b2db      	uxtb	r3, r3
 8010630:	f003 0303 	and.w	r3, r3, #3
 8010634:	2b00      	cmp	r3, #0
 8010636:	d001      	beq.n	801063c <tcp_output+0x2a0>
 8010638:	2301      	movs	r3, #1
 801063a:	e000      	b.n	801063e <tcp_output+0x2a2>
 801063c:	2300      	movs	r3, #0
 801063e:	442b      	add	r3, r5
 8010640:	4423      	add	r3, r4
 8010642:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010648:	68bb      	ldr	r3, [r7, #8]
 801064a:	1ad3      	subs	r3, r2, r3
 801064c:	2b00      	cmp	r3, #0
 801064e:	da02      	bge.n	8010656 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	68ba      	ldr	r2, [r7, #8]
 8010654:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010658:	891b      	ldrh	r3, [r3, #8]
 801065a:	461c      	mov	r4, r3
 801065c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801065e:	68db      	ldr	r3, [r3, #12]
 8010660:	899b      	ldrh	r3, [r3, #12]
 8010662:	b29b      	uxth	r3, r3
 8010664:	4618      	mov	r0, r3
 8010666:	f7f9 fcb9 	bl	8009fdc <lwip_htons>
 801066a:	4603      	mov	r3, r0
 801066c:	b2db      	uxtb	r3, r3
 801066e:	f003 0303 	and.w	r3, r3, #3
 8010672:	2b00      	cmp	r3, #0
 8010674:	d001      	beq.n	801067a <tcp_output+0x2de>
 8010676:	2301      	movs	r3, #1
 8010678:	e000      	b.n	801067c <tcp_output+0x2e0>
 801067a:	2300      	movs	r3, #0
 801067c:	4423      	add	r3, r4
 801067e:	2b00      	cmp	r3, #0
 8010680:	d049      	beq.n	8010716 <tcp_output+0x37a>
      seg->next = NULL;
 8010682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010684:	2200      	movs	r2, #0
 8010686:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801068c:	2b00      	cmp	r3, #0
 801068e:	d105      	bne.n	801069c <tcp_output+0x300>
        pcb->unacked = seg;
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010694:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8010696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010698:	623b      	str	r3, [r7, #32]
 801069a:	e03f      	b.n	801071c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801069c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801069e:	68db      	ldr	r3, [r3, #12]
 80106a0:	685b      	ldr	r3, [r3, #4]
 80106a2:	4618      	mov	r0, r3
 80106a4:	f7f9 fcaf 	bl	800a006 <lwip_htonl>
 80106a8:	4604      	mov	r4, r0
 80106aa:	6a3b      	ldr	r3, [r7, #32]
 80106ac:	68db      	ldr	r3, [r3, #12]
 80106ae:	685b      	ldr	r3, [r3, #4]
 80106b0:	4618      	mov	r0, r3
 80106b2:	f7f9 fca8 	bl	800a006 <lwip_htonl>
 80106b6:	4603      	mov	r3, r0
 80106b8:	1ae3      	subs	r3, r4, r3
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	da24      	bge.n	8010708 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	3370      	adds	r3, #112	@ 0x70
 80106c2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80106c4:	e002      	b.n	80106cc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80106c6:	69fb      	ldr	r3, [r7, #28]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80106cc:	69fb      	ldr	r3, [r7, #28]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d011      	beq.n	80106f8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80106d4:	69fb      	ldr	r3, [r7, #28]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	68db      	ldr	r3, [r3, #12]
 80106da:	685b      	ldr	r3, [r3, #4]
 80106dc:	4618      	mov	r0, r3
 80106de:	f7f9 fc92 	bl	800a006 <lwip_htonl>
 80106e2:	4604      	mov	r4, r0
 80106e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106e6:	68db      	ldr	r3, [r3, #12]
 80106e8:	685b      	ldr	r3, [r3, #4]
 80106ea:	4618      	mov	r0, r3
 80106ec:	f7f9 fc8b 	bl	800a006 <lwip_htonl>
 80106f0:	4603      	mov	r3, r0
 80106f2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	dbe6      	blt.n	80106c6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80106f8:	69fb      	ldr	r3, [r7, #28]
 80106fa:	681a      	ldr	r2, [r3, #0]
 80106fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106fe:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010700:	69fb      	ldr	r3, [r7, #28]
 8010702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010704:	601a      	str	r2, [r3, #0]
 8010706:	e009      	b.n	801071c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010708:	6a3b      	ldr	r3, [r7, #32]
 801070a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801070c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801070e:	6a3b      	ldr	r3, [r7, #32]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	623b      	str	r3, [r7, #32]
 8010714:	e002      	b.n	801071c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8010716:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010718:	f7fc fc45 	bl	800cfa6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010720:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8010722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010724:	2b00      	cmp	r3, #0
 8010726:	d012      	beq.n	801074e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801072a:	68db      	ldr	r3, [r3, #12]
 801072c:	685b      	ldr	r3, [r3, #4]
 801072e:	4618      	mov	r0, r3
 8010730:	f7f9 fc69 	bl	800a006 <lwip_htonl>
 8010734:	4602      	mov	r2, r0
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801073a:	1ad3      	subs	r3, r2, r3
 801073c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801073e:	8912      	ldrh	r2, [r2, #8]
 8010740:	4413      	add	r3, r2
  while (seg != NULL &&
 8010742:	69ba      	ldr	r2, [r7, #24]
 8010744:	429a      	cmp	r2, r3
 8010746:	f4bf aed9 	bcs.w	80104fc <tcp_output+0x160>
 801074a:	e000      	b.n	801074e <tcp_output+0x3b2>
      break;
 801074c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010752:	2b00      	cmp	r3, #0
 8010754:	d108      	bne.n	8010768 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	2200      	movs	r2, #0
 801075a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801075e:	e004      	b.n	801076a <tcp_output+0x3ce>
    goto output_done;
 8010760:	bf00      	nop
 8010762:	e002      	b.n	801076a <tcp_output+0x3ce>
    goto output_done;
 8010764:	bf00      	nop
 8010766:	e000      	b.n	801076a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8010768:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	8b5b      	ldrh	r3, [r3, #26]
 801076e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010772:	b29a      	uxth	r2, r3
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8010778:	2300      	movs	r3, #0
}
 801077a:	4618      	mov	r0, r3
 801077c:	3728      	adds	r7, #40	@ 0x28
 801077e:	46bd      	mov	sp, r7
 8010780:	bdb0      	pop	{r4, r5, r7, pc}
 8010782:	bf00      	nop

08010784 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b082      	sub	sp, #8
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d106      	bne.n	80107a0 <tcp_output_segment_busy+0x1c>
 8010792:	4b09      	ldr	r3, [pc, #36]	@ (80107b8 <tcp_output_segment_busy+0x34>)
 8010794:	f240 529a 	movw	r2, #1434	@ 0x59a
 8010798:	4908      	ldr	r1, [pc, #32]	@ (80107bc <tcp_output_segment_busy+0x38>)
 801079a:	4809      	ldr	r0, [pc, #36]	@ (80107c0 <tcp_output_segment_busy+0x3c>)
 801079c:	f006 fc5c 	bl	8017058 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	685b      	ldr	r3, [r3, #4]
 80107a4:	7b9b      	ldrb	r3, [r3, #14]
 80107a6:	2b01      	cmp	r3, #1
 80107a8:	d001      	beq.n	80107ae <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80107aa:	2301      	movs	r3, #1
 80107ac:	e000      	b.n	80107b0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80107ae:	2300      	movs	r3, #0
}
 80107b0:	4618      	mov	r0, r3
 80107b2:	3708      	adds	r7, #8
 80107b4:	46bd      	mov	sp, r7
 80107b6:	bd80      	pop	{r7, pc}
 80107b8:	08019d30 	.word	0x08019d30
 80107bc:	0801a2cc 	.word	0x0801a2cc
 80107c0:	08019d84 	.word	0x08019d84

080107c4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80107c4:	b5b0      	push	{r4, r5, r7, lr}
 80107c6:	b08c      	sub	sp, #48	@ 0x30
 80107c8:	af04      	add	r7, sp, #16
 80107ca:	60f8      	str	r0, [r7, #12]
 80107cc:	60b9      	str	r1, [r7, #8]
 80107ce:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d106      	bne.n	80107e4 <tcp_output_segment+0x20>
 80107d6:	4b64      	ldr	r3, [pc, #400]	@ (8010968 <tcp_output_segment+0x1a4>)
 80107d8:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 80107dc:	4963      	ldr	r1, [pc, #396]	@ (801096c <tcp_output_segment+0x1a8>)
 80107de:	4864      	ldr	r0, [pc, #400]	@ (8010970 <tcp_output_segment+0x1ac>)
 80107e0:	f006 fc3a 	bl	8017058 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80107e4:	68bb      	ldr	r3, [r7, #8]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d106      	bne.n	80107f8 <tcp_output_segment+0x34>
 80107ea:	4b5f      	ldr	r3, [pc, #380]	@ (8010968 <tcp_output_segment+0x1a4>)
 80107ec:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 80107f0:	4960      	ldr	r1, [pc, #384]	@ (8010974 <tcp_output_segment+0x1b0>)
 80107f2:	485f      	ldr	r0, [pc, #380]	@ (8010970 <tcp_output_segment+0x1ac>)
 80107f4:	f006 fc30 	bl	8017058 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d106      	bne.n	801080c <tcp_output_segment+0x48>
 80107fe:	4b5a      	ldr	r3, [pc, #360]	@ (8010968 <tcp_output_segment+0x1a4>)
 8010800:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8010804:	495c      	ldr	r1, [pc, #368]	@ (8010978 <tcp_output_segment+0x1b4>)
 8010806:	485a      	ldr	r0, [pc, #360]	@ (8010970 <tcp_output_segment+0x1ac>)
 8010808:	f006 fc26 	bl	8017058 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801080c:	68f8      	ldr	r0, [r7, #12]
 801080e:	f7ff ffb9 	bl	8010784 <tcp_output_segment_busy>
 8010812:	4603      	mov	r3, r0
 8010814:	2b00      	cmp	r3, #0
 8010816:	d001      	beq.n	801081c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8010818:	2300      	movs	r3, #0
 801081a:	e0a1      	b.n	8010960 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801081c:	68bb      	ldr	r3, [r7, #8]
 801081e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	68dc      	ldr	r4, [r3, #12]
 8010824:	4610      	mov	r0, r2
 8010826:	f7f9 fbee 	bl	800a006 <lwip_htonl>
 801082a:	4603      	mov	r3, r0
 801082c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801082e:	68bb      	ldr	r3, [r7, #8]
 8010830:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	68dc      	ldr	r4, [r3, #12]
 8010836:	4610      	mov	r0, r2
 8010838:	f7f9 fbd0 	bl	8009fdc <lwip_htons>
 801083c:	4603      	mov	r3, r0
 801083e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010840:	68bb      	ldr	r3, [r7, #8]
 8010842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010844:	68ba      	ldr	r2, [r7, #8]
 8010846:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8010848:	441a      	add	r2, r3
 801084a:	68bb      	ldr	r3, [r7, #8]
 801084c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	68db      	ldr	r3, [r3, #12]
 8010852:	3314      	adds	r3, #20
 8010854:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	7a9b      	ldrb	r3, [r3, #10]
 801085a:	f003 0301 	and.w	r3, r3, #1
 801085e:	2b00      	cmp	r3, #0
 8010860:	d015      	beq.n	801088e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8010862:	68bb      	ldr	r3, [r7, #8]
 8010864:	3304      	adds	r3, #4
 8010866:	461a      	mov	r2, r3
 8010868:	6879      	ldr	r1, [r7, #4]
 801086a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801086e:	f7fc fe91 	bl	800d594 <tcp_eff_send_mss_netif>
 8010872:	4603      	mov	r3, r0
 8010874:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8010876:	8b7b      	ldrh	r3, [r7, #26]
 8010878:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801087c:	4618      	mov	r0, r3
 801087e:	f7f9 fbc2 	bl	800a006 <lwip_htonl>
 8010882:	4602      	mov	r2, r0
 8010884:	69fb      	ldr	r3, [r7, #28]
 8010886:	601a      	str	r2, [r3, #0]
    opts += 1;
 8010888:	69fb      	ldr	r3, [r7, #28]
 801088a:	3304      	adds	r3, #4
 801088c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801088e:	68bb      	ldr	r3, [r7, #8]
 8010890:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010894:	2b00      	cmp	r3, #0
 8010896:	da02      	bge.n	801089e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8010898:	68bb      	ldr	r3, [r7, #8]
 801089a:	2200      	movs	r2, #0
 801089c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801089e:	68bb      	ldr	r3, [r7, #8]
 80108a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d10c      	bne.n	80108c0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80108a6:	4b35      	ldr	r3, [pc, #212]	@ (801097c <tcp_output_segment+0x1b8>)
 80108a8:	681a      	ldr	r2, [r3, #0]
 80108aa:	68bb      	ldr	r3, [r7, #8]
 80108ac:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	68db      	ldr	r3, [r3, #12]
 80108b2:	685b      	ldr	r3, [r3, #4]
 80108b4:	4618      	mov	r0, r3
 80108b6:	f7f9 fba6 	bl	800a006 <lwip_htonl>
 80108ba:	4602      	mov	r2, r0
 80108bc:	68bb      	ldr	r3, [r7, #8]
 80108be:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	68da      	ldr	r2, [r3, #12]
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	685b      	ldr	r3, [r3, #4]
 80108c8:	685b      	ldr	r3, [r3, #4]
 80108ca:	1ad3      	subs	r3, r2, r3
 80108cc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	685b      	ldr	r3, [r3, #4]
 80108d2:	8959      	ldrh	r1, [r3, #10]
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	685b      	ldr	r3, [r3, #4]
 80108d8:	8b3a      	ldrh	r2, [r7, #24]
 80108da:	1a8a      	subs	r2, r1, r2
 80108dc:	b292      	uxth	r2, r2
 80108de:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	685b      	ldr	r3, [r3, #4]
 80108e4:	8919      	ldrh	r1, [r3, #8]
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	685b      	ldr	r3, [r3, #4]
 80108ea:	8b3a      	ldrh	r2, [r7, #24]
 80108ec:	1a8a      	subs	r2, r1, r2
 80108ee:	b292      	uxth	r2, r2
 80108f0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	685b      	ldr	r3, [r3, #4]
 80108f6:	68fa      	ldr	r2, [r7, #12]
 80108f8:	68d2      	ldr	r2, [r2, #12]
 80108fa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	68db      	ldr	r3, [r3, #12]
 8010900:	2200      	movs	r2, #0
 8010902:	741a      	strb	r2, [r3, #16]
 8010904:	2200      	movs	r2, #0
 8010906:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	68da      	ldr	r2, [r3, #12]
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	7a9b      	ldrb	r3, [r3, #10]
 8010910:	f003 0301 	and.w	r3, r3, #1
 8010914:	2b00      	cmp	r3, #0
 8010916:	d001      	beq.n	801091c <tcp_output_segment+0x158>
 8010918:	2318      	movs	r3, #24
 801091a:	e000      	b.n	801091e <tcp_output_segment+0x15a>
 801091c:	2314      	movs	r3, #20
 801091e:	4413      	add	r3, r2
 8010920:	69fa      	ldr	r2, [r7, #28]
 8010922:	429a      	cmp	r2, r3
 8010924:	d006      	beq.n	8010934 <tcp_output_segment+0x170>
 8010926:	4b10      	ldr	r3, [pc, #64]	@ (8010968 <tcp_output_segment+0x1a4>)
 8010928:	f240 621c 	movw	r2, #1564	@ 0x61c
 801092c:	4914      	ldr	r1, [pc, #80]	@ (8010980 <tcp_output_segment+0x1bc>)
 801092e:	4810      	ldr	r0, [pc, #64]	@ (8010970 <tcp_output_segment+0x1ac>)
 8010930:	f006 fb92 	bl	8017058 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	6858      	ldr	r0, [r3, #4]
 8010938:	68b9      	ldr	r1, [r7, #8]
 801093a:	68bb      	ldr	r3, [r7, #8]
 801093c:	1d1c      	adds	r4, r3, #4
 801093e:	68bb      	ldr	r3, [r7, #8]
 8010940:	7add      	ldrb	r5, [r3, #11]
 8010942:	68bb      	ldr	r3, [r7, #8]
 8010944:	7a9b      	ldrb	r3, [r3, #10]
 8010946:	687a      	ldr	r2, [r7, #4]
 8010948:	9202      	str	r2, [sp, #8]
 801094a:	2206      	movs	r2, #6
 801094c:	9201      	str	r2, [sp, #4]
 801094e:	9300      	str	r3, [sp, #0]
 8010950:	462b      	mov	r3, r5
 8010952:	4622      	mov	r2, r4
 8010954:	f005 f836 	bl	80159c4 <ip4_output_if>
 8010958:	4603      	mov	r3, r0
 801095a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801095c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010960:	4618      	mov	r0, r3
 8010962:	3720      	adds	r7, #32
 8010964:	46bd      	mov	sp, r7
 8010966:	bdb0      	pop	{r4, r5, r7, pc}
 8010968:	08019d30 	.word	0x08019d30
 801096c:	0801a2f4 	.word	0x0801a2f4
 8010970:	08019d84 	.word	0x08019d84
 8010974:	0801a314 	.word	0x0801a314
 8010978:	0801a334 	.word	0x0801a334
 801097c:	2000cac0 	.word	0x2000cac0
 8010980:	0801a358 	.word	0x0801a358

08010984 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8010984:	b5b0      	push	{r4, r5, r7, lr}
 8010986:	b084      	sub	sp, #16
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d106      	bne.n	80109a0 <tcp_rexmit_rto_prepare+0x1c>
 8010992:	4b31      	ldr	r3, [pc, #196]	@ (8010a58 <tcp_rexmit_rto_prepare+0xd4>)
 8010994:	f240 6263 	movw	r2, #1635	@ 0x663
 8010998:	4930      	ldr	r1, [pc, #192]	@ (8010a5c <tcp_rexmit_rto_prepare+0xd8>)
 801099a:	4831      	ldr	r0, [pc, #196]	@ (8010a60 <tcp_rexmit_rto_prepare+0xdc>)
 801099c:	f006 fb5c 	bl	8017058 <iprintf>

  if (pcb->unacked == NULL) {
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d102      	bne.n	80109ae <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80109a8:	f06f 0305 	mvn.w	r3, #5
 80109ac:	e050      	b.n	8010a50 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80109b2:	60fb      	str	r3, [r7, #12]
 80109b4:	e00b      	b.n	80109ce <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80109b6:	68f8      	ldr	r0, [r7, #12]
 80109b8:	f7ff fee4 	bl	8010784 <tcp_output_segment_busy>
 80109bc:	4603      	mov	r3, r0
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d002      	beq.n	80109c8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80109c2:	f06f 0305 	mvn.w	r3, #5
 80109c6:	e043      	b.n	8010a50 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	60fb      	str	r3, [r7, #12]
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d1ef      	bne.n	80109b6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80109d6:	68f8      	ldr	r0, [r7, #12]
 80109d8:	f7ff fed4 	bl	8010784 <tcp_output_segment_busy>
 80109dc:	4603      	mov	r3, r0
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d002      	beq.n	80109e8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80109e2:	f06f 0305 	mvn.w	r3, #5
 80109e6:	e033      	b.n	8010a50 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2200      	movs	r2, #0
 80109fc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	8b5b      	ldrh	r3, [r3, #26]
 8010a02:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8010a06:	b29a      	uxth	r2, r3
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	68db      	ldr	r3, [r3, #12]
 8010a10:	685b      	ldr	r3, [r3, #4]
 8010a12:	4618      	mov	r0, r3
 8010a14:	f7f9 faf7 	bl	800a006 <lwip_htonl>
 8010a18:	4604      	mov	r4, r0
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	891b      	ldrh	r3, [r3, #8]
 8010a1e:	461d      	mov	r5, r3
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	68db      	ldr	r3, [r3, #12]
 8010a24:	899b      	ldrh	r3, [r3, #12]
 8010a26:	b29b      	uxth	r3, r3
 8010a28:	4618      	mov	r0, r3
 8010a2a:	f7f9 fad7 	bl	8009fdc <lwip_htons>
 8010a2e:	4603      	mov	r3, r0
 8010a30:	b2db      	uxtb	r3, r3
 8010a32:	f003 0303 	and.w	r3, r3, #3
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d001      	beq.n	8010a3e <tcp_rexmit_rto_prepare+0xba>
 8010a3a:	2301      	movs	r3, #1
 8010a3c:	e000      	b.n	8010a40 <tcp_rexmit_rto_prepare+0xbc>
 8010a3e:	2300      	movs	r3, #0
 8010a40:	442b      	add	r3, r5
 8010a42:	18e2      	adds	r2, r4, r3
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8010a4e:	2300      	movs	r3, #0
}
 8010a50:	4618      	mov	r0, r3
 8010a52:	3710      	adds	r7, #16
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bdb0      	pop	{r4, r5, r7, pc}
 8010a58:	08019d30 	.word	0x08019d30
 8010a5c:	0801a36c 	.word	0x0801a36c
 8010a60:	08019d84 	.word	0x08019d84

08010a64 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b082      	sub	sp, #8
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d106      	bne.n	8010a80 <tcp_rexmit_rto_commit+0x1c>
 8010a72:	4b0d      	ldr	r3, [pc, #52]	@ (8010aa8 <tcp_rexmit_rto_commit+0x44>)
 8010a74:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8010a78:	490c      	ldr	r1, [pc, #48]	@ (8010aac <tcp_rexmit_rto_commit+0x48>)
 8010a7a:	480d      	ldr	r0, [pc, #52]	@ (8010ab0 <tcp_rexmit_rto_commit+0x4c>)
 8010a7c:	f006 faec 	bl	8017058 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010a86:	2bff      	cmp	r3, #255	@ 0xff
 8010a88:	d007      	beq.n	8010a9a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010a90:	3301      	adds	r3, #1
 8010a92:	b2da      	uxtb	r2, r3
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8010a9a:	6878      	ldr	r0, [r7, #4]
 8010a9c:	f7ff fc7e 	bl	801039c <tcp_output>
}
 8010aa0:	bf00      	nop
 8010aa2:	3708      	adds	r7, #8
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	bd80      	pop	{r7, pc}
 8010aa8:	08019d30 	.word	0x08019d30
 8010aac:	0801a390 	.word	0x0801a390
 8010ab0:	08019d84 	.word	0x08019d84

08010ab4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b082      	sub	sp, #8
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d106      	bne.n	8010ad0 <tcp_rexmit_rto+0x1c>
 8010ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8010aec <tcp_rexmit_rto+0x38>)
 8010ac4:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8010ac8:	4909      	ldr	r1, [pc, #36]	@ (8010af0 <tcp_rexmit_rto+0x3c>)
 8010aca:	480a      	ldr	r0, [pc, #40]	@ (8010af4 <tcp_rexmit_rto+0x40>)
 8010acc:	f006 fac4 	bl	8017058 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010ad0:	6878      	ldr	r0, [r7, #4]
 8010ad2:	f7ff ff57 	bl	8010984 <tcp_rexmit_rto_prepare>
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d102      	bne.n	8010ae2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8010adc:	6878      	ldr	r0, [r7, #4]
 8010ade:	f7ff ffc1 	bl	8010a64 <tcp_rexmit_rto_commit>
  }
}
 8010ae2:	bf00      	nop
 8010ae4:	3708      	adds	r7, #8
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	bd80      	pop	{r7, pc}
 8010aea:	bf00      	nop
 8010aec:	08019d30 	.word	0x08019d30
 8010af0:	0801a3b4 	.word	0x0801a3b4
 8010af4:	08019d84 	.word	0x08019d84

08010af8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010af8:	b590      	push	{r4, r7, lr}
 8010afa:	b085      	sub	sp, #20
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d106      	bne.n	8010b14 <tcp_rexmit+0x1c>
 8010b06:	4b2f      	ldr	r3, [pc, #188]	@ (8010bc4 <tcp_rexmit+0xcc>)
 8010b08:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8010b0c:	492e      	ldr	r1, [pc, #184]	@ (8010bc8 <tcp_rexmit+0xd0>)
 8010b0e:	482f      	ldr	r0, [pc, #188]	@ (8010bcc <tcp_rexmit+0xd4>)
 8010b10:	f006 faa2 	bl	8017058 <iprintf>

  if (pcb->unacked == NULL) {
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d102      	bne.n	8010b22 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8010b1c:	f06f 0305 	mvn.w	r3, #5
 8010b20:	e04c      	b.n	8010bbc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010b26:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8010b28:	68b8      	ldr	r0, [r7, #8]
 8010b2a:	f7ff fe2b 	bl	8010784 <tcp_output_segment_busy>
 8010b2e:	4603      	mov	r3, r0
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d002      	beq.n	8010b3a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8010b34:	f06f 0305 	mvn.w	r3, #5
 8010b38:	e040      	b.n	8010bbc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8010b3a:	68bb      	ldr	r3, [r7, #8]
 8010b3c:	681a      	ldr	r2, [r3, #0]
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	336c      	adds	r3, #108	@ 0x6c
 8010b46:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010b48:	e002      	b.n	8010b50 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d011      	beq.n	8010b7c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	68db      	ldr	r3, [r3, #12]
 8010b5e:	685b      	ldr	r3, [r3, #4]
 8010b60:	4618      	mov	r0, r3
 8010b62:	f7f9 fa50 	bl	800a006 <lwip_htonl>
 8010b66:	4604      	mov	r4, r0
 8010b68:	68bb      	ldr	r3, [r7, #8]
 8010b6a:	68db      	ldr	r3, [r3, #12]
 8010b6c:	685b      	ldr	r3, [r3, #4]
 8010b6e:	4618      	mov	r0, r3
 8010b70:	f7f9 fa49 	bl	800a006 <lwip_htonl>
 8010b74:	4603      	mov	r3, r0
 8010b76:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	dbe6      	blt.n	8010b4a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	681a      	ldr	r2, [r3, #0]
 8010b80:	68bb      	ldr	r3, [r7, #8]
 8010b82:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	68ba      	ldr	r2, [r7, #8]
 8010b88:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8010b8a:	68bb      	ldr	r3, [r7, #8]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d103      	bne.n	8010b9a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	2200      	movs	r2, #0
 8010b96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010ba0:	2bff      	cmp	r3, #255	@ 0xff
 8010ba2:	d007      	beq.n	8010bb4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010baa:	3301      	adds	r3, #1
 8010bac:	b2da      	uxtb	r2, r3
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8010bba:	2300      	movs	r3, #0
}
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	3714      	adds	r7, #20
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bd90      	pop	{r4, r7, pc}
 8010bc4:	08019d30 	.word	0x08019d30
 8010bc8:	0801a3d0 	.word	0x0801a3d0
 8010bcc:	08019d84 	.word	0x08019d84

08010bd0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b082      	sub	sp, #8
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d106      	bne.n	8010bec <tcp_rexmit_fast+0x1c>
 8010bde:	4b2a      	ldr	r3, [pc, #168]	@ (8010c88 <tcp_rexmit_fast+0xb8>)
 8010be0:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8010be4:	4929      	ldr	r1, [pc, #164]	@ (8010c8c <tcp_rexmit_fast+0xbc>)
 8010be6:	482a      	ldr	r0, [pc, #168]	@ (8010c90 <tcp_rexmit_fast+0xc0>)
 8010be8:	f006 fa36 	bl	8017058 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d044      	beq.n	8010c7e <tcp_rexmit_fast+0xae>
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	8b5b      	ldrh	r3, [r3, #26]
 8010bf8:	f003 0304 	and.w	r3, r3, #4
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d13e      	bne.n	8010c7e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010c00:	6878      	ldr	r0, [r7, #4]
 8010c02:	f7ff ff79 	bl	8010af8 <tcp_rexmit>
 8010c06:	4603      	mov	r3, r0
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d138      	bne.n	8010c7e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010c18:	4293      	cmp	r3, r2
 8010c1a:	bf28      	it	cs
 8010c1c:	4613      	movcs	r3, r2
 8010c1e:	b29b      	uxth	r3, r3
 8010c20:	0fda      	lsrs	r2, r3, #31
 8010c22:	4413      	add	r3, r2
 8010c24:	105b      	asrs	r3, r3, #1
 8010c26:	b29a      	uxth	r2, r3
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8010c34:	461a      	mov	r2, r3
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010c3a:	005b      	lsls	r3, r3, #1
 8010c3c:	429a      	cmp	r2, r3
 8010c3e:	d206      	bcs.n	8010c4e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010c44:	005b      	lsls	r3, r3, #1
 8010c46:	b29a      	uxth	r2, r3
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010c58:	4619      	mov	r1, r3
 8010c5a:	0049      	lsls	r1, r1, #1
 8010c5c:	440b      	add	r3, r1
 8010c5e:	b29b      	uxth	r3, r3
 8010c60:	4413      	add	r3, r2
 8010c62:	b29a      	uxth	r2, r3
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	8b5b      	ldrh	r3, [r3, #26]
 8010c6e:	f043 0304 	orr.w	r3, r3, #4
 8010c72:	b29a      	uxth	r2, r3
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	2200      	movs	r2, #0
 8010c7c:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8010c7e:	bf00      	nop
 8010c80:	3708      	adds	r7, #8
 8010c82:	46bd      	mov	sp, r7
 8010c84:	bd80      	pop	{r7, pc}
 8010c86:	bf00      	nop
 8010c88:	08019d30 	.word	0x08019d30
 8010c8c:	0801a3e8 	.word	0x0801a3e8
 8010c90:	08019d84 	.word	0x08019d84

08010c94 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b086      	sub	sp, #24
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	60f8      	str	r0, [r7, #12]
 8010c9c:	607b      	str	r3, [r7, #4]
 8010c9e:	460b      	mov	r3, r1
 8010ca0:	817b      	strh	r3, [r7, #10]
 8010ca2:	4613      	mov	r3, r2
 8010ca4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010ca6:	897a      	ldrh	r2, [r7, #10]
 8010ca8:	893b      	ldrh	r3, [r7, #8]
 8010caa:	4413      	add	r3, r2
 8010cac:	b29b      	uxth	r3, r3
 8010cae:	3314      	adds	r3, #20
 8010cb0:	b29b      	uxth	r3, r3
 8010cb2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010cb6:	4619      	mov	r1, r3
 8010cb8:	2022      	movs	r0, #34	@ 0x22
 8010cba:	f7fa fbff 	bl	800b4bc <pbuf_alloc>
 8010cbe:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010cc0:	697b      	ldr	r3, [r7, #20]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d04d      	beq.n	8010d62 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010cc6:	897b      	ldrh	r3, [r7, #10]
 8010cc8:	3313      	adds	r3, #19
 8010cca:	697a      	ldr	r2, [r7, #20]
 8010ccc:	8952      	ldrh	r2, [r2, #10]
 8010cce:	4293      	cmp	r3, r2
 8010cd0:	db06      	blt.n	8010ce0 <tcp_output_alloc_header_common+0x4c>
 8010cd2:	4b26      	ldr	r3, [pc, #152]	@ (8010d6c <tcp_output_alloc_header_common+0xd8>)
 8010cd4:	f240 7223 	movw	r2, #1827	@ 0x723
 8010cd8:	4925      	ldr	r1, [pc, #148]	@ (8010d70 <tcp_output_alloc_header_common+0xdc>)
 8010cda:	4826      	ldr	r0, [pc, #152]	@ (8010d74 <tcp_output_alloc_header_common+0xe0>)
 8010cdc:	f006 f9bc 	bl	8017058 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010ce0:	697b      	ldr	r3, [r7, #20]
 8010ce2:	685b      	ldr	r3, [r3, #4]
 8010ce4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8010ce6:	8c3b      	ldrh	r3, [r7, #32]
 8010ce8:	4618      	mov	r0, r3
 8010cea:	f7f9 f977 	bl	8009fdc <lwip_htons>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	461a      	mov	r2, r3
 8010cf2:	693b      	ldr	r3, [r7, #16]
 8010cf4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8010cf6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	f7f9 f96f 	bl	8009fdc <lwip_htons>
 8010cfe:	4603      	mov	r3, r0
 8010d00:	461a      	mov	r2, r3
 8010d02:	693b      	ldr	r3, [r7, #16]
 8010d04:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010d06:	693b      	ldr	r3, [r7, #16]
 8010d08:	687a      	ldr	r2, [r7, #4]
 8010d0a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010d0c:	68f8      	ldr	r0, [r7, #12]
 8010d0e:	f7f9 f97a 	bl	800a006 <lwip_htonl>
 8010d12:	4602      	mov	r2, r0
 8010d14:	693b      	ldr	r3, [r7, #16]
 8010d16:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010d18:	897b      	ldrh	r3, [r7, #10]
 8010d1a:	089b      	lsrs	r3, r3, #2
 8010d1c:	b29b      	uxth	r3, r3
 8010d1e:	3305      	adds	r3, #5
 8010d20:	b29b      	uxth	r3, r3
 8010d22:	031b      	lsls	r3, r3, #12
 8010d24:	b29a      	uxth	r2, r3
 8010d26:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010d2a:	b29b      	uxth	r3, r3
 8010d2c:	4313      	orrs	r3, r2
 8010d2e:	b29b      	uxth	r3, r3
 8010d30:	4618      	mov	r0, r3
 8010d32:	f7f9 f953 	bl	8009fdc <lwip_htons>
 8010d36:	4603      	mov	r3, r0
 8010d38:	461a      	mov	r2, r3
 8010d3a:	693b      	ldr	r3, [r7, #16]
 8010d3c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010d3e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010d40:	4618      	mov	r0, r3
 8010d42:	f7f9 f94b 	bl	8009fdc <lwip_htons>
 8010d46:	4603      	mov	r3, r0
 8010d48:	461a      	mov	r2, r3
 8010d4a:	693b      	ldr	r3, [r7, #16]
 8010d4c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010d4e:	693b      	ldr	r3, [r7, #16]
 8010d50:	2200      	movs	r2, #0
 8010d52:	741a      	strb	r2, [r3, #16]
 8010d54:	2200      	movs	r2, #0
 8010d56:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010d58:	693b      	ldr	r3, [r7, #16]
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	749a      	strb	r2, [r3, #18]
 8010d5e:	2200      	movs	r2, #0
 8010d60:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8010d62:	697b      	ldr	r3, [r7, #20]
}
 8010d64:	4618      	mov	r0, r3
 8010d66:	3718      	adds	r7, #24
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	bd80      	pop	{r7, pc}
 8010d6c:	08019d30 	.word	0x08019d30
 8010d70:	0801a408 	.word	0x0801a408
 8010d74:	08019d84 	.word	0x08019d84

08010d78 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010d78:	b5b0      	push	{r4, r5, r7, lr}
 8010d7a:	b08a      	sub	sp, #40	@ 0x28
 8010d7c:	af04      	add	r7, sp, #16
 8010d7e:	60f8      	str	r0, [r7, #12]
 8010d80:	607b      	str	r3, [r7, #4]
 8010d82:	460b      	mov	r3, r1
 8010d84:	817b      	strh	r3, [r7, #10]
 8010d86:	4613      	mov	r3, r2
 8010d88:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d106      	bne.n	8010d9e <tcp_output_alloc_header+0x26>
 8010d90:	4b15      	ldr	r3, [pc, #84]	@ (8010de8 <tcp_output_alloc_header+0x70>)
 8010d92:	f240 7242 	movw	r2, #1858	@ 0x742
 8010d96:	4915      	ldr	r1, [pc, #84]	@ (8010dec <tcp_output_alloc_header+0x74>)
 8010d98:	4815      	ldr	r0, [pc, #84]	@ (8010df0 <tcp_output_alloc_header+0x78>)
 8010d9a:	f006 f95d 	bl	8017058 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	8adb      	ldrh	r3, [r3, #22]
 8010da6:	68fa      	ldr	r2, [r7, #12]
 8010da8:	8b12      	ldrh	r2, [r2, #24]
 8010daa:	68f9      	ldr	r1, [r7, #12]
 8010dac:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8010dae:	893d      	ldrh	r5, [r7, #8]
 8010db0:	897c      	ldrh	r4, [r7, #10]
 8010db2:	9103      	str	r1, [sp, #12]
 8010db4:	2110      	movs	r1, #16
 8010db6:	9102      	str	r1, [sp, #8]
 8010db8:	9201      	str	r2, [sp, #4]
 8010dba:	9300      	str	r3, [sp, #0]
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	462a      	mov	r2, r5
 8010dc0:	4621      	mov	r1, r4
 8010dc2:	f7ff ff67 	bl	8010c94 <tcp_output_alloc_header_common>
 8010dc6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010dc8:	697b      	ldr	r3, [r7, #20]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d006      	beq.n	8010ddc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010dd2:	68fa      	ldr	r2, [r7, #12]
 8010dd4:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8010dd6:	441a      	add	r2, r3
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8010ddc:	697b      	ldr	r3, [r7, #20]
}
 8010dde:	4618      	mov	r0, r3
 8010de0:	3718      	adds	r7, #24
 8010de2:	46bd      	mov	sp, r7
 8010de4:	bdb0      	pop	{r4, r5, r7, pc}
 8010de6:	bf00      	nop
 8010de8:	08019d30 	.word	0x08019d30
 8010dec:	0801a438 	.word	0x0801a438
 8010df0:	08019d84 	.word	0x08019d84

08010df4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b088      	sub	sp, #32
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	60f8      	str	r0, [r7, #12]
 8010dfc:	60b9      	str	r1, [r7, #8]
 8010dfe:	4611      	mov	r1, r2
 8010e00:	461a      	mov	r2, r3
 8010e02:	460b      	mov	r3, r1
 8010e04:	71fb      	strb	r3, [r7, #7]
 8010e06:	4613      	mov	r3, r2
 8010e08:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8010e0e:	68bb      	ldr	r3, [r7, #8]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d106      	bne.n	8010e22 <tcp_output_fill_options+0x2e>
 8010e14:	4b12      	ldr	r3, [pc, #72]	@ (8010e60 <tcp_output_fill_options+0x6c>)
 8010e16:	f240 7256 	movw	r2, #1878	@ 0x756
 8010e1a:	4912      	ldr	r1, [pc, #72]	@ (8010e64 <tcp_output_fill_options+0x70>)
 8010e1c:	4812      	ldr	r0, [pc, #72]	@ (8010e68 <tcp_output_fill_options+0x74>)
 8010e1e:	f006 f91b 	bl	8017058 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8010e22:	68bb      	ldr	r3, [r7, #8]
 8010e24:	685b      	ldr	r3, [r3, #4]
 8010e26:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8010e28:	69bb      	ldr	r3, [r7, #24]
 8010e2a:	3314      	adds	r3, #20
 8010e2c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8010e2e:	8bfb      	ldrh	r3, [r7, #30]
 8010e30:	009b      	lsls	r3, r3, #2
 8010e32:	461a      	mov	r2, r3
 8010e34:	79fb      	ldrb	r3, [r7, #7]
 8010e36:	009b      	lsls	r3, r3, #2
 8010e38:	f003 0304 	and.w	r3, r3, #4
 8010e3c:	4413      	add	r3, r2
 8010e3e:	3314      	adds	r3, #20
 8010e40:	69ba      	ldr	r2, [r7, #24]
 8010e42:	4413      	add	r3, r2
 8010e44:	697a      	ldr	r2, [r7, #20]
 8010e46:	429a      	cmp	r2, r3
 8010e48:	d006      	beq.n	8010e58 <tcp_output_fill_options+0x64>
 8010e4a:	4b05      	ldr	r3, [pc, #20]	@ (8010e60 <tcp_output_fill_options+0x6c>)
 8010e4c:	f240 7275 	movw	r2, #1909	@ 0x775
 8010e50:	4906      	ldr	r1, [pc, #24]	@ (8010e6c <tcp_output_fill_options+0x78>)
 8010e52:	4805      	ldr	r0, [pc, #20]	@ (8010e68 <tcp_output_fill_options+0x74>)
 8010e54:	f006 f900 	bl	8017058 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8010e58:	bf00      	nop
 8010e5a:	3720      	adds	r7, #32
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	bd80      	pop	{r7, pc}
 8010e60:	08019d30 	.word	0x08019d30
 8010e64:	0801a460 	.word	0x0801a460
 8010e68:	08019d84 	.word	0x08019d84
 8010e6c:	0801a358 	.word	0x0801a358

08010e70 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b08a      	sub	sp, #40	@ 0x28
 8010e74:	af04      	add	r7, sp, #16
 8010e76:	60f8      	str	r0, [r7, #12]
 8010e78:	60b9      	str	r1, [r7, #8]
 8010e7a:	607a      	str	r2, [r7, #4]
 8010e7c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010e7e:	68bb      	ldr	r3, [r7, #8]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d106      	bne.n	8010e92 <tcp_output_control_segment+0x22>
 8010e84:	4b1c      	ldr	r3, [pc, #112]	@ (8010ef8 <tcp_output_control_segment+0x88>)
 8010e86:	f240 7287 	movw	r2, #1927	@ 0x787
 8010e8a:	491c      	ldr	r1, [pc, #112]	@ (8010efc <tcp_output_control_segment+0x8c>)
 8010e8c:	481c      	ldr	r0, [pc, #112]	@ (8010f00 <tcp_output_control_segment+0x90>)
 8010e8e:	f006 f8e3 	bl	8017058 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8010e92:	683a      	ldr	r2, [r7, #0]
 8010e94:	6879      	ldr	r1, [r7, #4]
 8010e96:	68f8      	ldr	r0, [r7, #12]
 8010e98:	f7fe ff42 	bl	800fd20 <tcp_route>
 8010e9c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010e9e:	693b      	ldr	r3, [r7, #16]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d102      	bne.n	8010eaa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8010ea4:	23fc      	movs	r3, #252	@ 0xfc
 8010ea6:	75fb      	strb	r3, [r7, #23]
 8010ea8:	e01c      	b.n	8010ee4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d006      	beq.n	8010ebe <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	7adb      	ldrb	r3, [r3, #11]
 8010eb4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	7a9b      	ldrb	r3, [r3, #10]
 8010eba:	757b      	strb	r3, [r7, #21]
 8010ebc:	e003      	b.n	8010ec6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8010ebe:	23ff      	movs	r3, #255	@ 0xff
 8010ec0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8010ec6:	7dba      	ldrb	r2, [r7, #22]
 8010ec8:	693b      	ldr	r3, [r7, #16]
 8010eca:	9302      	str	r3, [sp, #8]
 8010ecc:	2306      	movs	r3, #6
 8010ece:	9301      	str	r3, [sp, #4]
 8010ed0:	7d7b      	ldrb	r3, [r7, #21]
 8010ed2:	9300      	str	r3, [sp, #0]
 8010ed4:	4613      	mov	r3, r2
 8010ed6:	683a      	ldr	r2, [r7, #0]
 8010ed8:	6879      	ldr	r1, [r7, #4]
 8010eda:	68b8      	ldr	r0, [r7, #8]
 8010edc:	f004 fd72 	bl	80159c4 <ip4_output_if>
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8010ee4:	68b8      	ldr	r0, [r7, #8]
 8010ee6:	f7fa fdcd 	bl	800ba84 <pbuf_free>
  return err;
 8010eea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010eee:	4618      	mov	r0, r3
 8010ef0:	3718      	adds	r7, #24
 8010ef2:	46bd      	mov	sp, r7
 8010ef4:	bd80      	pop	{r7, pc}
 8010ef6:	bf00      	nop
 8010ef8:	08019d30 	.word	0x08019d30
 8010efc:	0801a488 	.word	0x0801a488
 8010f00:	08019d84 	.word	0x08019d84

08010f04 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010f04:	b590      	push	{r4, r7, lr}
 8010f06:	b08b      	sub	sp, #44	@ 0x2c
 8010f08:	af04      	add	r7, sp, #16
 8010f0a:	60f8      	str	r0, [r7, #12]
 8010f0c:	60b9      	str	r1, [r7, #8]
 8010f0e:	607a      	str	r2, [r7, #4]
 8010f10:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010f12:	683b      	ldr	r3, [r7, #0]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d106      	bne.n	8010f26 <tcp_rst+0x22>
 8010f18:	4b1f      	ldr	r3, [pc, #124]	@ (8010f98 <tcp_rst+0x94>)
 8010f1a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8010f1e:	491f      	ldr	r1, [pc, #124]	@ (8010f9c <tcp_rst+0x98>)
 8010f20:	481f      	ldr	r0, [pc, #124]	@ (8010fa0 <tcp_rst+0x9c>)
 8010f22:	f006 f899 	bl	8017058 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8010f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d106      	bne.n	8010f3a <tcp_rst+0x36>
 8010f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8010f98 <tcp_rst+0x94>)
 8010f2e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8010f32:	491c      	ldr	r1, [pc, #112]	@ (8010fa4 <tcp_rst+0xa0>)
 8010f34:	481a      	ldr	r0, [pc, #104]	@ (8010fa0 <tcp_rst+0x9c>)
 8010f36:	f006 f88f 	bl	8017058 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010f3a:	2300      	movs	r3, #0
 8010f3c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8010f3e:	f246 0308 	movw	r3, #24584	@ 0x6008
 8010f42:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8010f44:	7dfb      	ldrb	r3, [r7, #23]
 8010f46:	b29c      	uxth	r4, r3
 8010f48:	68b8      	ldr	r0, [r7, #8]
 8010f4a:	f7f9 f85c 	bl	800a006 <lwip_htonl>
 8010f4e:	4602      	mov	r2, r0
 8010f50:	8abb      	ldrh	r3, [r7, #20]
 8010f52:	9303      	str	r3, [sp, #12]
 8010f54:	2314      	movs	r3, #20
 8010f56:	9302      	str	r3, [sp, #8]
 8010f58:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8010f5a:	9301      	str	r3, [sp, #4]
 8010f5c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010f5e:	9300      	str	r3, [sp, #0]
 8010f60:	4613      	mov	r3, r2
 8010f62:	2200      	movs	r2, #0
 8010f64:	4621      	mov	r1, r4
 8010f66:	6878      	ldr	r0, [r7, #4]
 8010f68:	f7ff fe94 	bl	8010c94 <tcp_output_alloc_header_common>
 8010f6c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010f6e:	693b      	ldr	r3, [r7, #16]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d00c      	beq.n	8010f8e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010f74:	7dfb      	ldrb	r3, [r7, #23]
 8010f76:	2200      	movs	r2, #0
 8010f78:	6939      	ldr	r1, [r7, #16]
 8010f7a:	68f8      	ldr	r0, [r7, #12]
 8010f7c:	f7ff ff3a 	bl	8010df4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f82:	683a      	ldr	r2, [r7, #0]
 8010f84:	6939      	ldr	r1, [r7, #16]
 8010f86:	68f8      	ldr	r0, [r7, #12]
 8010f88:	f7ff ff72 	bl	8010e70 <tcp_output_control_segment>
 8010f8c:	e000      	b.n	8010f90 <tcp_rst+0x8c>
    return;
 8010f8e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010f90:	371c      	adds	r7, #28
 8010f92:	46bd      	mov	sp, r7
 8010f94:	bd90      	pop	{r4, r7, pc}
 8010f96:	bf00      	nop
 8010f98:	08019d30 	.word	0x08019d30
 8010f9c:	0801a4b4 	.word	0x0801a4b4
 8010fa0:	08019d84 	.word	0x08019d84
 8010fa4:	0801a4d0 	.word	0x0801a4d0

08010fa8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010fa8:	b590      	push	{r4, r7, lr}
 8010faa:	b087      	sub	sp, #28
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d106      	bne.n	8010fcc <tcp_send_empty_ack+0x24>
 8010fbe:	4b28      	ldr	r3, [pc, #160]	@ (8011060 <tcp_send_empty_ack+0xb8>)
 8010fc0:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8010fc4:	4927      	ldr	r1, [pc, #156]	@ (8011064 <tcp_send_empty_ack+0xbc>)
 8010fc6:	4828      	ldr	r0, [pc, #160]	@ (8011068 <tcp_send_empty_ack+0xc0>)
 8010fc8:	f006 f846 	bl	8017058 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010fcc:	7dfb      	ldrb	r3, [r7, #23]
 8010fce:	009b      	lsls	r3, r3, #2
 8010fd0:	b2db      	uxtb	r3, r3
 8010fd2:	f003 0304 	and.w	r3, r3, #4
 8010fd6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010fd8:	7d7b      	ldrb	r3, [r7, #21]
 8010fda:	b29c      	uxth	r4, r3
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f7f9 f810 	bl	800a006 <lwip_htonl>
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	2200      	movs	r2, #0
 8010fea:	4621      	mov	r1, r4
 8010fec:	6878      	ldr	r0, [r7, #4]
 8010fee:	f7ff fec3 	bl	8010d78 <tcp_output_alloc_header>
 8010ff2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010ff4:	693b      	ldr	r3, [r7, #16]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d109      	bne.n	801100e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	8b5b      	ldrh	r3, [r3, #26]
 8010ffe:	f043 0303 	orr.w	r3, r3, #3
 8011002:	b29a      	uxth	r2, r3
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011008:	f06f 0301 	mvn.w	r3, #1
 801100c:	e023      	b.n	8011056 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801100e:	7dbb      	ldrb	r3, [r7, #22]
 8011010:	7dfa      	ldrb	r2, [r7, #23]
 8011012:	6939      	ldr	r1, [r7, #16]
 8011014:	6878      	ldr	r0, [r7, #4]
 8011016:	f7ff feed 	bl	8010df4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801101a:	687a      	ldr	r2, [r7, #4]
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	3304      	adds	r3, #4
 8011020:	6939      	ldr	r1, [r7, #16]
 8011022:	6878      	ldr	r0, [r7, #4]
 8011024:	f7ff ff24 	bl	8010e70 <tcp_output_control_segment>
 8011028:	4603      	mov	r3, r0
 801102a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801102c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d007      	beq.n	8011044 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	8b5b      	ldrh	r3, [r3, #26]
 8011038:	f043 0303 	orr.w	r3, r3, #3
 801103c:	b29a      	uxth	r2, r3
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	835a      	strh	r2, [r3, #26]
 8011042:	e006      	b.n	8011052 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	8b5b      	ldrh	r3, [r3, #26]
 8011048:	f023 0303 	bic.w	r3, r3, #3
 801104c:	b29a      	uxth	r2, r3
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011052:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011056:	4618      	mov	r0, r3
 8011058:	371c      	adds	r7, #28
 801105a:	46bd      	mov	sp, r7
 801105c:	bd90      	pop	{r4, r7, pc}
 801105e:	bf00      	nop
 8011060:	08019d30 	.word	0x08019d30
 8011064:	0801a4ec 	.word	0x0801a4ec
 8011068:	08019d84 	.word	0x08019d84

0801106c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801106c:	b590      	push	{r4, r7, lr}
 801106e:	b087      	sub	sp, #28
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011074:	2300      	movs	r3, #0
 8011076:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d106      	bne.n	801108c <tcp_keepalive+0x20>
 801107e:	4b18      	ldr	r3, [pc, #96]	@ (80110e0 <tcp_keepalive+0x74>)
 8011080:	f640 0224 	movw	r2, #2084	@ 0x824
 8011084:	4917      	ldr	r1, [pc, #92]	@ (80110e4 <tcp_keepalive+0x78>)
 8011086:	4818      	ldr	r0, [pc, #96]	@ (80110e8 <tcp_keepalive+0x7c>)
 8011088:	f005 ffe6 	bl	8017058 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801108c:	7dfb      	ldrb	r3, [r7, #23]
 801108e:	b29c      	uxth	r4, r3
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011094:	3b01      	subs	r3, #1
 8011096:	4618      	mov	r0, r3
 8011098:	f7f8 ffb5 	bl	800a006 <lwip_htonl>
 801109c:	4603      	mov	r3, r0
 801109e:	2200      	movs	r2, #0
 80110a0:	4621      	mov	r1, r4
 80110a2:	6878      	ldr	r0, [r7, #4]
 80110a4:	f7ff fe68 	bl	8010d78 <tcp_output_alloc_header>
 80110a8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80110aa:	693b      	ldr	r3, [r7, #16]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d102      	bne.n	80110b6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80110b0:	f04f 33ff 	mov.w	r3, #4294967295
 80110b4:	e010      	b.n	80110d8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80110b6:	7dfb      	ldrb	r3, [r7, #23]
 80110b8:	2200      	movs	r2, #0
 80110ba:	6939      	ldr	r1, [r7, #16]
 80110bc:	6878      	ldr	r0, [r7, #4]
 80110be:	f7ff fe99 	bl	8010df4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80110c2:	687a      	ldr	r2, [r7, #4]
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	3304      	adds	r3, #4
 80110c8:	6939      	ldr	r1, [r7, #16]
 80110ca:	6878      	ldr	r0, [r7, #4]
 80110cc:	f7ff fed0 	bl	8010e70 <tcp_output_control_segment>
 80110d0:	4603      	mov	r3, r0
 80110d2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80110d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80110d8:	4618      	mov	r0, r3
 80110da:	371c      	adds	r7, #28
 80110dc:	46bd      	mov	sp, r7
 80110de:	bd90      	pop	{r4, r7, pc}
 80110e0:	08019d30 	.word	0x08019d30
 80110e4:	0801a50c 	.word	0x0801a50c
 80110e8:	08019d84 	.word	0x08019d84

080110ec <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80110ec:	b590      	push	{r4, r7, lr}
 80110ee:	b08b      	sub	sp, #44	@ 0x2c
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80110f4:	2300      	movs	r3, #0
 80110f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d106      	bne.n	801110e <tcp_zero_window_probe+0x22>
 8011100:	4b4c      	ldr	r3, [pc, #304]	@ (8011234 <tcp_zero_window_probe+0x148>)
 8011102:	f640 024f 	movw	r2, #2127	@ 0x84f
 8011106:	494c      	ldr	r1, [pc, #304]	@ (8011238 <tcp_zero_window_probe+0x14c>)
 8011108:	484c      	ldr	r0, [pc, #304]	@ (801123c <tcp_zero_window_probe+0x150>)
 801110a:	f005 ffa5 	bl	8017058 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011112:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011114:	6a3b      	ldr	r3, [r7, #32]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d101      	bne.n	801111e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801111a:	2300      	movs	r3, #0
 801111c:	e086      	b.n	801122c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8011124:	2bff      	cmp	r3, #255	@ 0xff
 8011126:	d007      	beq.n	8011138 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801112e:	3301      	adds	r3, #1
 8011130:	b2da      	uxtb	r2, r3
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011138:	6a3b      	ldr	r3, [r7, #32]
 801113a:	68db      	ldr	r3, [r3, #12]
 801113c:	899b      	ldrh	r3, [r3, #12]
 801113e:	b29b      	uxth	r3, r3
 8011140:	4618      	mov	r0, r3
 8011142:	f7f8 ff4b 	bl	8009fdc <lwip_htons>
 8011146:	4603      	mov	r3, r0
 8011148:	b2db      	uxtb	r3, r3
 801114a:	f003 0301 	and.w	r3, r3, #1
 801114e:	2b00      	cmp	r3, #0
 8011150:	d005      	beq.n	801115e <tcp_zero_window_probe+0x72>
 8011152:	6a3b      	ldr	r3, [r7, #32]
 8011154:	891b      	ldrh	r3, [r3, #8]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d101      	bne.n	801115e <tcp_zero_window_probe+0x72>
 801115a:	2301      	movs	r3, #1
 801115c:	e000      	b.n	8011160 <tcp_zero_window_probe+0x74>
 801115e:	2300      	movs	r3, #0
 8011160:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011162:	7ffb      	ldrb	r3, [r7, #31]
 8011164:	2b00      	cmp	r3, #0
 8011166:	bf0c      	ite	eq
 8011168:	2301      	moveq	r3, #1
 801116a:	2300      	movne	r3, #0
 801116c:	b2db      	uxtb	r3, r3
 801116e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011170:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011174:	b299      	uxth	r1, r3
 8011176:	6a3b      	ldr	r3, [r7, #32]
 8011178:	68db      	ldr	r3, [r3, #12]
 801117a:	685b      	ldr	r3, [r3, #4]
 801117c:	8bba      	ldrh	r2, [r7, #28]
 801117e:	6878      	ldr	r0, [r7, #4]
 8011180:	f7ff fdfa 	bl	8010d78 <tcp_output_alloc_header>
 8011184:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011186:	69bb      	ldr	r3, [r7, #24]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d102      	bne.n	8011192 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801118c:	f04f 33ff 	mov.w	r3, #4294967295
 8011190:	e04c      	b.n	801122c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011192:	69bb      	ldr	r3, [r7, #24]
 8011194:	685b      	ldr	r3, [r3, #4]
 8011196:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011198:	7ffb      	ldrb	r3, [r7, #31]
 801119a:	2b00      	cmp	r3, #0
 801119c:	d011      	beq.n	80111c2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801119e:	697b      	ldr	r3, [r7, #20]
 80111a0:	899b      	ldrh	r3, [r3, #12]
 80111a2:	b29b      	uxth	r3, r3
 80111a4:	b21b      	sxth	r3, r3
 80111a6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80111aa:	b21c      	sxth	r4, r3
 80111ac:	2011      	movs	r0, #17
 80111ae:	f7f8 ff15 	bl	8009fdc <lwip_htons>
 80111b2:	4603      	mov	r3, r0
 80111b4:	b21b      	sxth	r3, r3
 80111b6:	4323      	orrs	r3, r4
 80111b8:	b21b      	sxth	r3, r3
 80111ba:	b29a      	uxth	r2, r3
 80111bc:	697b      	ldr	r3, [r7, #20]
 80111be:	819a      	strh	r2, [r3, #12]
 80111c0:	e010      	b.n	80111e4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80111c2:	69bb      	ldr	r3, [r7, #24]
 80111c4:	685b      	ldr	r3, [r3, #4]
 80111c6:	3314      	adds	r3, #20
 80111c8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80111ca:	6a3b      	ldr	r3, [r7, #32]
 80111cc:	6858      	ldr	r0, [r3, #4]
 80111ce:	6a3b      	ldr	r3, [r7, #32]
 80111d0:	685b      	ldr	r3, [r3, #4]
 80111d2:	891a      	ldrh	r2, [r3, #8]
 80111d4:	6a3b      	ldr	r3, [r7, #32]
 80111d6:	891b      	ldrh	r3, [r3, #8]
 80111d8:	1ad3      	subs	r3, r2, r3
 80111da:	b29b      	uxth	r3, r3
 80111dc:	2201      	movs	r2, #1
 80111de:	6939      	ldr	r1, [r7, #16]
 80111e0:	f7fa fe56 	bl	800be90 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80111e4:	6a3b      	ldr	r3, [r7, #32]
 80111e6:	68db      	ldr	r3, [r3, #12]
 80111e8:	685b      	ldr	r3, [r3, #4]
 80111ea:	4618      	mov	r0, r3
 80111ec:	f7f8 ff0b 	bl	800a006 <lwip_htonl>
 80111f0:	4603      	mov	r3, r0
 80111f2:	3301      	adds	r3, #1
 80111f4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	1ad3      	subs	r3, r2, r3
 80111fe:	2b00      	cmp	r3, #0
 8011200:	da02      	bge.n	8011208 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	68fa      	ldr	r2, [r7, #12]
 8011206:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011208:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801120c:	2200      	movs	r2, #0
 801120e:	69b9      	ldr	r1, [r7, #24]
 8011210:	6878      	ldr	r0, [r7, #4]
 8011212:	f7ff fdef 	bl	8010df4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011216:	687a      	ldr	r2, [r7, #4]
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	3304      	adds	r3, #4
 801121c:	69b9      	ldr	r1, [r7, #24]
 801121e:	6878      	ldr	r0, [r7, #4]
 8011220:	f7ff fe26 	bl	8010e70 <tcp_output_control_segment>
 8011224:	4603      	mov	r3, r0
 8011226:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011228:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801122c:	4618      	mov	r0, r3
 801122e:	372c      	adds	r7, #44	@ 0x2c
 8011230:	46bd      	mov	sp, r7
 8011232:	bd90      	pop	{r4, r7, pc}
 8011234:	08019d30 	.word	0x08019d30
 8011238:	0801a528 	.word	0x0801a528
 801123c:	08019d84 	.word	0x08019d84

08011240 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b082      	sub	sp, #8
 8011244:	af00      	add	r7, sp, #0
 8011246:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011248:	f7fa ff10 	bl	800c06c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801124c:	4b0a      	ldr	r3, [pc, #40]	@ (8011278 <tcpip_tcp_timer+0x38>)
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d103      	bne.n	801125c <tcpip_tcp_timer+0x1c>
 8011254:	4b09      	ldr	r3, [pc, #36]	@ (801127c <tcpip_tcp_timer+0x3c>)
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d005      	beq.n	8011268 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801125c:	2200      	movs	r2, #0
 801125e:	4908      	ldr	r1, [pc, #32]	@ (8011280 <tcpip_tcp_timer+0x40>)
 8011260:	20fa      	movs	r0, #250	@ 0xfa
 8011262:	f000 f8f3 	bl	801144c <sys_timeout>
 8011266:	e003      	b.n	8011270 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011268:	4b06      	ldr	r3, [pc, #24]	@ (8011284 <tcpip_tcp_timer+0x44>)
 801126a:	2200      	movs	r2, #0
 801126c:	601a      	str	r2, [r3, #0]
  }
}
 801126e:	bf00      	nop
 8011270:	bf00      	nop
 8011272:	3708      	adds	r7, #8
 8011274:	46bd      	mov	sp, r7
 8011276:	bd80      	pop	{r7, pc}
 8011278:	2000cacc 	.word	0x2000cacc
 801127c:	2000cad0 	.word	0x2000cad0
 8011280:	08011241 	.word	0x08011241
 8011284:	2000cb18 	.word	0x2000cb18

08011288 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011288:	b580      	push	{r7, lr}
 801128a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801128c:	4b0a      	ldr	r3, [pc, #40]	@ (80112b8 <tcp_timer_needed+0x30>)
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d10f      	bne.n	80112b4 <tcp_timer_needed+0x2c>
 8011294:	4b09      	ldr	r3, [pc, #36]	@ (80112bc <tcp_timer_needed+0x34>)
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d103      	bne.n	80112a4 <tcp_timer_needed+0x1c>
 801129c:	4b08      	ldr	r3, [pc, #32]	@ (80112c0 <tcp_timer_needed+0x38>)
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d007      	beq.n	80112b4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80112a4:	4b04      	ldr	r3, [pc, #16]	@ (80112b8 <tcp_timer_needed+0x30>)
 80112a6:	2201      	movs	r2, #1
 80112a8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80112aa:	2200      	movs	r2, #0
 80112ac:	4905      	ldr	r1, [pc, #20]	@ (80112c4 <tcp_timer_needed+0x3c>)
 80112ae:	20fa      	movs	r0, #250	@ 0xfa
 80112b0:	f000 f8cc 	bl	801144c <sys_timeout>
  }
}
 80112b4:	bf00      	nop
 80112b6:	bd80      	pop	{r7, pc}
 80112b8:	2000cb18 	.word	0x2000cb18
 80112bc:	2000cacc 	.word	0x2000cacc
 80112c0:	2000cad0 	.word	0x2000cad0
 80112c4:	08011241 	.word	0x08011241

080112c8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b086      	sub	sp, #24
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	60f8      	str	r0, [r7, #12]
 80112d0:	60b9      	str	r1, [r7, #8]
 80112d2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80112d4:	200b      	movs	r0, #11
 80112d6:	f7f9 fbc9 	bl	800aa6c <memp_malloc>
 80112da:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80112dc:	693b      	ldr	r3, [r7, #16]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d109      	bne.n	80112f6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80112e2:	693b      	ldr	r3, [r7, #16]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d151      	bne.n	801138c <sys_timeout_abs+0xc4>
 80112e8:	4b2a      	ldr	r3, [pc, #168]	@ (8011394 <sys_timeout_abs+0xcc>)
 80112ea:	22be      	movs	r2, #190	@ 0xbe
 80112ec:	492a      	ldr	r1, [pc, #168]	@ (8011398 <sys_timeout_abs+0xd0>)
 80112ee:	482b      	ldr	r0, [pc, #172]	@ (801139c <sys_timeout_abs+0xd4>)
 80112f0:	f005 feb2 	bl	8017058 <iprintf>
    return;
 80112f4:	e04a      	b.n	801138c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80112f6:	693b      	ldr	r3, [r7, #16]
 80112f8:	2200      	movs	r2, #0
 80112fa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80112fc:	693b      	ldr	r3, [r7, #16]
 80112fe:	68ba      	ldr	r2, [r7, #8]
 8011300:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011302:	693b      	ldr	r3, [r7, #16]
 8011304:	687a      	ldr	r2, [r7, #4]
 8011306:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011308:	693b      	ldr	r3, [r7, #16]
 801130a:	68fa      	ldr	r2, [r7, #12]
 801130c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801130e:	4b24      	ldr	r3, [pc, #144]	@ (80113a0 <sys_timeout_abs+0xd8>)
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d103      	bne.n	801131e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011316:	4a22      	ldr	r2, [pc, #136]	@ (80113a0 <sys_timeout_abs+0xd8>)
 8011318:	693b      	ldr	r3, [r7, #16]
 801131a:	6013      	str	r3, [r2, #0]
    return;
 801131c:	e037      	b.n	801138e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801131e:	693b      	ldr	r3, [r7, #16]
 8011320:	685a      	ldr	r2, [r3, #4]
 8011322:	4b1f      	ldr	r3, [pc, #124]	@ (80113a0 <sys_timeout_abs+0xd8>)
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	685b      	ldr	r3, [r3, #4]
 8011328:	1ad3      	subs	r3, r2, r3
 801132a:	0fdb      	lsrs	r3, r3, #31
 801132c:	f003 0301 	and.w	r3, r3, #1
 8011330:	b2db      	uxtb	r3, r3
 8011332:	2b00      	cmp	r3, #0
 8011334:	d007      	beq.n	8011346 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011336:	4b1a      	ldr	r3, [pc, #104]	@ (80113a0 <sys_timeout_abs+0xd8>)
 8011338:	681a      	ldr	r2, [r3, #0]
 801133a:	693b      	ldr	r3, [r7, #16]
 801133c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801133e:	4a18      	ldr	r2, [pc, #96]	@ (80113a0 <sys_timeout_abs+0xd8>)
 8011340:	693b      	ldr	r3, [r7, #16]
 8011342:	6013      	str	r3, [r2, #0]
 8011344:	e023      	b.n	801138e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011346:	4b16      	ldr	r3, [pc, #88]	@ (80113a0 <sys_timeout_abs+0xd8>)
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	617b      	str	r3, [r7, #20]
 801134c:	e01a      	b.n	8011384 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801134e:	697b      	ldr	r3, [r7, #20]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d00b      	beq.n	801136e <sys_timeout_abs+0xa6>
 8011356:	693b      	ldr	r3, [r7, #16]
 8011358:	685a      	ldr	r2, [r3, #4]
 801135a:	697b      	ldr	r3, [r7, #20]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	685b      	ldr	r3, [r3, #4]
 8011360:	1ad3      	subs	r3, r2, r3
 8011362:	0fdb      	lsrs	r3, r3, #31
 8011364:	f003 0301 	and.w	r3, r3, #1
 8011368:	b2db      	uxtb	r3, r3
 801136a:	2b00      	cmp	r3, #0
 801136c:	d007      	beq.n	801137e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801136e:	697b      	ldr	r3, [r7, #20]
 8011370:	681a      	ldr	r2, [r3, #0]
 8011372:	693b      	ldr	r3, [r7, #16]
 8011374:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011376:	697b      	ldr	r3, [r7, #20]
 8011378:	693a      	ldr	r2, [r7, #16]
 801137a:	601a      	str	r2, [r3, #0]
        break;
 801137c:	e007      	b.n	801138e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801137e:	697b      	ldr	r3, [r7, #20]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	617b      	str	r3, [r7, #20]
 8011384:	697b      	ldr	r3, [r7, #20]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d1e1      	bne.n	801134e <sys_timeout_abs+0x86>
 801138a:	e000      	b.n	801138e <sys_timeout_abs+0xc6>
    return;
 801138c:	bf00      	nop
      }
    }
  }
}
 801138e:	3718      	adds	r7, #24
 8011390:	46bd      	mov	sp, r7
 8011392:	bd80      	pop	{r7, pc}
 8011394:	0801a54c 	.word	0x0801a54c
 8011398:	0801a580 	.word	0x0801a580
 801139c:	0801a5c0 	.word	0x0801a5c0
 80113a0:	2000cb10 	.word	0x2000cb10

080113a4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b086      	sub	sp, #24
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80113b0:	697b      	ldr	r3, [r7, #20]
 80113b2:	685b      	ldr	r3, [r3, #4]
 80113b4:	4798      	blx	r3

  now = sys_now();
 80113b6:	f7f5 fad5 	bl	8006964 <sys_now>
 80113ba:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80113bc:	697b      	ldr	r3, [r7, #20]
 80113be:	681a      	ldr	r2, [r3, #0]
 80113c0:	4b0f      	ldr	r3, [pc, #60]	@ (8011400 <lwip_cyclic_timer+0x5c>)
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	4413      	add	r3, r2
 80113c6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80113c8:	68fa      	ldr	r2, [r7, #12]
 80113ca:	693b      	ldr	r3, [r7, #16]
 80113cc:	1ad3      	subs	r3, r2, r3
 80113ce:	0fdb      	lsrs	r3, r3, #31
 80113d0:	f003 0301 	and.w	r3, r3, #1
 80113d4:	b2db      	uxtb	r3, r3
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d009      	beq.n	80113ee <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80113da:	697b      	ldr	r3, [r7, #20]
 80113dc:	681a      	ldr	r2, [r3, #0]
 80113de:	693b      	ldr	r3, [r7, #16]
 80113e0:	4413      	add	r3, r2
 80113e2:	687a      	ldr	r2, [r7, #4]
 80113e4:	4907      	ldr	r1, [pc, #28]	@ (8011404 <lwip_cyclic_timer+0x60>)
 80113e6:	4618      	mov	r0, r3
 80113e8:	f7ff ff6e 	bl	80112c8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80113ec:	e004      	b.n	80113f8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80113ee:	687a      	ldr	r2, [r7, #4]
 80113f0:	4904      	ldr	r1, [pc, #16]	@ (8011404 <lwip_cyclic_timer+0x60>)
 80113f2:	68f8      	ldr	r0, [r7, #12]
 80113f4:	f7ff ff68 	bl	80112c8 <sys_timeout_abs>
}
 80113f8:	bf00      	nop
 80113fa:	3718      	adds	r7, #24
 80113fc:	46bd      	mov	sp, r7
 80113fe:	bd80      	pop	{r7, pc}
 8011400:	2000cb14 	.word	0x2000cb14
 8011404:	080113a5 	.word	0x080113a5

08011408 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011408:	b580      	push	{r7, lr}
 801140a:	b082      	sub	sp, #8
 801140c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801140e:	2301      	movs	r3, #1
 8011410:	607b      	str	r3, [r7, #4]
 8011412:	e00e      	b.n	8011432 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011414:	4a0b      	ldr	r2, [pc, #44]	@ (8011444 <sys_timeouts_init+0x3c>)
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	00db      	lsls	r3, r3, #3
 8011420:	4a08      	ldr	r2, [pc, #32]	@ (8011444 <sys_timeouts_init+0x3c>)
 8011422:	4413      	add	r3, r2
 8011424:	461a      	mov	r2, r3
 8011426:	4908      	ldr	r1, [pc, #32]	@ (8011448 <sys_timeouts_init+0x40>)
 8011428:	f000 f810 	bl	801144c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	3301      	adds	r3, #1
 8011430:	607b      	str	r3, [r7, #4]
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	2b05      	cmp	r3, #5
 8011436:	d9ed      	bls.n	8011414 <sys_timeouts_init+0xc>
  }
}
 8011438:	bf00      	nop
 801143a:	bf00      	nop
 801143c:	3708      	adds	r7, #8
 801143e:	46bd      	mov	sp, r7
 8011440:	bd80      	pop	{r7, pc}
 8011442:	bf00      	nop
 8011444:	0801b8a4 	.word	0x0801b8a4
 8011448:	080113a5 	.word	0x080113a5

0801144c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801144c:	b580      	push	{r7, lr}
 801144e:	b086      	sub	sp, #24
 8011450:	af00      	add	r7, sp, #0
 8011452:	60f8      	str	r0, [r7, #12]
 8011454:	60b9      	str	r1, [r7, #8]
 8011456:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801145e:	d306      	bcc.n	801146e <sys_timeout+0x22>
 8011460:	4b0a      	ldr	r3, [pc, #40]	@ (801148c <sys_timeout+0x40>)
 8011462:	f240 1229 	movw	r2, #297	@ 0x129
 8011466:	490a      	ldr	r1, [pc, #40]	@ (8011490 <sys_timeout+0x44>)
 8011468:	480a      	ldr	r0, [pc, #40]	@ (8011494 <sys_timeout+0x48>)
 801146a:	f005 fdf5 	bl	8017058 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801146e:	f7f5 fa79 	bl	8006964 <sys_now>
 8011472:	4602      	mov	r2, r0
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	4413      	add	r3, r2
 8011478:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801147a:	687a      	ldr	r2, [r7, #4]
 801147c:	68b9      	ldr	r1, [r7, #8]
 801147e:	6978      	ldr	r0, [r7, #20]
 8011480:	f7ff ff22 	bl	80112c8 <sys_timeout_abs>
#endif
}
 8011484:	bf00      	nop
 8011486:	3718      	adds	r7, #24
 8011488:	46bd      	mov	sp, r7
 801148a:	bd80      	pop	{r7, pc}
 801148c:	0801a54c 	.word	0x0801a54c
 8011490:	0801a5e8 	.word	0x0801a5e8
 8011494:	0801a5c0 	.word	0x0801a5c0

08011498 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b084      	sub	sp, #16
 801149c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801149e:	f7f5 fa61 	bl	8006964 <sys_now>
 80114a2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80114a4:	4b17      	ldr	r3, [pc, #92]	@ (8011504 <sys_check_timeouts+0x6c>)
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80114aa:	68bb      	ldr	r3, [r7, #8]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d022      	beq.n	80114f6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80114b0:	68bb      	ldr	r3, [r7, #8]
 80114b2:	685b      	ldr	r3, [r3, #4]
 80114b4:	68fa      	ldr	r2, [r7, #12]
 80114b6:	1ad3      	subs	r3, r2, r3
 80114b8:	0fdb      	lsrs	r3, r3, #31
 80114ba:	f003 0301 	and.w	r3, r3, #1
 80114be:	b2db      	uxtb	r3, r3
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d11a      	bne.n	80114fa <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80114c4:	68bb      	ldr	r3, [r7, #8]
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	4a0e      	ldr	r2, [pc, #56]	@ (8011504 <sys_check_timeouts+0x6c>)
 80114ca:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80114cc:	68bb      	ldr	r3, [r7, #8]
 80114ce:	689b      	ldr	r3, [r3, #8]
 80114d0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80114d2:	68bb      	ldr	r3, [r7, #8]
 80114d4:	68db      	ldr	r3, [r3, #12]
 80114d6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80114d8:	68bb      	ldr	r3, [r7, #8]
 80114da:	685b      	ldr	r3, [r3, #4]
 80114dc:	4a0a      	ldr	r2, [pc, #40]	@ (8011508 <sys_check_timeouts+0x70>)
 80114de:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80114e0:	68b9      	ldr	r1, [r7, #8]
 80114e2:	200b      	movs	r0, #11
 80114e4:	f7f9 fb38 	bl	800ab58 <memp_free>
    if (handler != NULL) {
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d0da      	beq.n	80114a4 <sys_check_timeouts+0xc>
      handler(arg);
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	6838      	ldr	r0, [r7, #0]
 80114f2:	4798      	blx	r3
  do {
 80114f4:	e7d6      	b.n	80114a4 <sys_check_timeouts+0xc>
      return;
 80114f6:	bf00      	nop
 80114f8:	e000      	b.n	80114fc <sys_check_timeouts+0x64>
      return;
 80114fa:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80114fc:	3710      	adds	r7, #16
 80114fe:	46bd      	mov	sp, r7
 8011500:	bd80      	pop	{r7, pc}
 8011502:	bf00      	nop
 8011504:	2000cb10 	.word	0x2000cb10
 8011508:	2000cb14 	.word	0x2000cb14

0801150c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b082      	sub	sp, #8
 8011510:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8011512:	4b16      	ldr	r3, [pc, #88]	@ (801156c <sys_timeouts_sleeptime+0x60>)
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d102      	bne.n	8011520 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801151a:	f04f 33ff 	mov.w	r3, #4294967295
 801151e:	e020      	b.n	8011562 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8011520:	f7f5 fa20 	bl	8006964 <sys_now>
 8011524:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8011526:	4b11      	ldr	r3, [pc, #68]	@ (801156c <sys_timeouts_sleeptime+0x60>)
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	685a      	ldr	r2, [r3, #4]
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	1ad3      	subs	r3, r2, r3
 8011530:	0fdb      	lsrs	r3, r3, #31
 8011532:	f003 0301 	and.w	r3, r3, #1
 8011536:	b2db      	uxtb	r3, r3
 8011538:	2b00      	cmp	r3, #0
 801153a:	d001      	beq.n	8011540 <sys_timeouts_sleeptime+0x34>
    return 0;
 801153c:	2300      	movs	r3, #0
 801153e:	e010      	b.n	8011562 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8011540:	4b0a      	ldr	r3, [pc, #40]	@ (801156c <sys_timeouts_sleeptime+0x60>)
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	685a      	ldr	r2, [r3, #4]
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	1ad3      	subs	r3, r2, r3
 801154a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801154c:	683b      	ldr	r3, [r7, #0]
 801154e:	2b00      	cmp	r3, #0
 8011550:	da06      	bge.n	8011560 <sys_timeouts_sleeptime+0x54>
 8011552:	4b07      	ldr	r3, [pc, #28]	@ (8011570 <sys_timeouts_sleeptime+0x64>)
 8011554:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8011558:	4906      	ldr	r1, [pc, #24]	@ (8011574 <sys_timeouts_sleeptime+0x68>)
 801155a:	4807      	ldr	r0, [pc, #28]	@ (8011578 <sys_timeouts_sleeptime+0x6c>)
 801155c:	f005 fd7c 	bl	8017058 <iprintf>
    return ret;
 8011560:	683b      	ldr	r3, [r7, #0]
  }
}
 8011562:	4618      	mov	r0, r3
 8011564:	3708      	adds	r7, #8
 8011566:	46bd      	mov	sp, r7
 8011568:	bd80      	pop	{r7, pc}
 801156a:	bf00      	nop
 801156c:	2000cb10 	.word	0x2000cb10
 8011570:	0801a54c 	.word	0x0801a54c
 8011574:	0801a620 	.word	0x0801a620
 8011578:	0801a5c0 	.word	0x0801a5c0

0801157c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801157c:	b580      	push	{r7, lr}
 801157e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011580:	f005 fc6a 	bl	8016e58 <rand>
 8011584:	4603      	mov	r3, r0
 8011586:	b29b      	uxth	r3, r3
 8011588:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801158c:	b29b      	uxth	r3, r3
 801158e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8011592:	b29a      	uxth	r2, r3
 8011594:	4b01      	ldr	r3, [pc, #4]	@ (801159c <udp_init+0x20>)
 8011596:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011598:	bf00      	nop
 801159a:	bd80      	pop	{r7, pc}
 801159c:	20000030 	.word	0x20000030

080115a0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80115a0:	b480      	push	{r7}
 80115a2:	b083      	sub	sp, #12
 80115a4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80115a6:	2300      	movs	r3, #0
 80115a8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80115aa:	4b17      	ldr	r3, [pc, #92]	@ (8011608 <udp_new_port+0x68>)
 80115ac:	881b      	ldrh	r3, [r3, #0]
 80115ae:	1c5a      	adds	r2, r3, #1
 80115b0:	b291      	uxth	r1, r2
 80115b2:	4a15      	ldr	r2, [pc, #84]	@ (8011608 <udp_new_port+0x68>)
 80115b4:	8011      	strh	r1, [r2, #0]
 80115b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80115ba:	4293      	cmp	r3, r2
 80115bc:	d103      	bne.n	80115c6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80115be:	4b12      	ldr	r3, [pc, #72]	@ (8011608 <udp_new_port+0x68>)
 80115c0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80115c4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80115c6:	4b11      	ldr	r3, [pc, #68]	@ (801160c <udp_new_port+0x6c>)
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	603b      	str	r3, [r7, #0]
 80115cc:	e011      	b.n	80115f2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80115ce:	683b      	ldr	r3, [r7, #0]
 80115d0:	8a5a      	ldrh	r2, [r3, #18]
 80115d2:	4b0d      	ldr	r3, [pc, #52]	@ (8011608 <udp_new_port+0x68>)
 80115d4:	881b      	ldrh	r3, [r3, #0]
 80115d6:	429a      	cmp	r2, r3
 80115d8:	d108      	bne.n	80115ec <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80115da:	88fb      	ldrh	r3, [r7, #6]
 80115dc:	3301      	adds	r3, #1
 80115de:	80fb      	strh	r3, [r7, #6]
 80115e0:	88fb      	ldrh	r3, [r7, #6]
 80115e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80115e6:	d3e0      	bcc.n	80115aa <udp_new_port+0xa>
        return 0;
 80115e8:	2300      	movs	r3, #0
 80115ea:	e007      	b.n	80115fc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80115ec:	683b      	ldr	r3, [r7, #0]
 80115ee:	68db      	ldr	r3, [r3, #12]
 80115f0:	603b      	str	r3, [r7, #0]
 80115f2:	683b      	ldr	r3, [r7, #0]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d1ea      	bne.n	80115ce <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80115f8:	4b03      	ldr	r3, [pc, #12]	@ (8011608 <udp_new_port+0x68>)
 80115fa:	881b      	ldrh	r3, [r3, #0]
}
 80115fc:	4618      	mov	r0, r3
 80115fe:	370c      	adds	r7, #12
 8011600:	46bd      	mov	sp, r7
 8011602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011606:	4770      	bx	lr
 8011608:	20000030 	.word	0x20000030
 801160c:	2000cb1c 	.word	0x2000cb1c

08011610 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011610:	b580      	push	{r7, lr}
 8011612:	b084      	sub	sp, #16
 8011614:	af00      	add	r7, sp, #0
 8011616:	60f8      	str	r0, [r7, #12]
 8011618:	60b9      	str	r1, [r7, #8]
 801161a:	4613      	mov	r3, r2
 801161c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d105      	bne.n	8011630 <udp_input_local_match+0x20>
 8011624:	4b27      	ldr	r3, [pc, #156]	@ (80116c4 <udp_input_local_match+0xb4>)
 8011626:	2287      	movs	r2, #135	@ 0x87
 8011628:	4927      	ldr	r1, [pc, #156]	@ (80116c8 <udp_input_local_match+0xb8>)
 801162a:	4828      	ldr	r0, [pc, #160]	@ (80116cc <udp_input_local_match+0xbc>)
 801162c:	f005 fd14 	bl	8017058 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011630:	68bb      	ldr	r3, [r7, #8]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d105      	bne.n	8011642 <udp_input_local_match+0x32>
 8011636:	4b23      	ldr	r3, [pc, #140]	@ (80116c4 <udp_input_local_match+0xb4>)
 8011638:	2288      	movs	r2, #136	@ 0x88
 801163a:	4925      	ldr	r1, [pc, #148]	@ (80116d0 <udp_input_local_match+0xc0>)
 801163c:	4823      	ldr	r0, [pc, #140]	@ (80116cc <udp_input_local_match+0xbc>)
 801163e:	f005 fd0b 	bl	8017058 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	7a1b      	ldrb	r3, [r3, #8]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d00b      	beq.n	8011662 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	7a1a      	ldrb	r2, [r3, #8]
 801164e:	4b21      	ldr	r3, [pc, #132]	@ (80116d4 <udp_input_local_match+0xc4>)
 8011650:	685b      	ldr	r3, [r3, #4]
 8011652:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011656:	3301      	adds	r3, #1
 8011658:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801165a:	429a      	cmp	r2, r3
 801165c:	d001      	beq.n	8011662 <udp_input_local_match+0x52>
    return 0;
 801165e:	2300      	movs	r3, #0
 8011660:	e02b      	b.n	80116ba <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011662:	79fb      	ldrb	r3, [r7, #7]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d018      	beq.n	801169a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d013      	beq.n	8011696 <udp_input_local_match+0x86>
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	2b00      	cmp	r3, #0
 8011674:	d00f      	beq.n	8011696 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011676:	4b17      	ldr	r3, [pc, #92]	@ (80116d4 <udp_input_local_match+0xc4>)
 8011678:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801167a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801167e:	d00a      	beq.n	8011696 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	681a      	ldr	r2, [r3, #0]
 8011684:	4b13      	ldr	r3, [pc, #76]	@ (80116d4 <udp_input_local_match+0xc4>)
 8011686:	695b      	ldr	r3, [r3, #20]
 8011688:	405a      	eors	r2, r3
 801168a:	68bb      	ldr	r3, [r7, #8]
 801168c:	3308      	adds	r3, #8
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011692:	2b00      	cmp	r3, #0
 8011694:	d110      	bne.n	80116b8 <udp_input_local_match+0xa8>
          return 1;
 8011696:	2301      	movs	r3, #1
 8011698:	e00f      	b.n	80116ba <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d009      	beq.n	80116b4 <udp_input_local_match+0xa4>
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d005      	beq.n	80116b4 <udp_input_local_match+0xa4>
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	681a      	ldr	r2, [r3, #0]
 80116ac:	4b09      	ldr	r3, [pc, #36]	@ (80116d4 <udp_input_local_match+0xc4>)
 80116ae:	695b      	ldr	r3, [r3, #20]
 80116b0:	429a      	cmp	r2, r3
 80116b2:	d101      	bne.n	80116b8 <udp_input_local_match+0xa8>
        return 1;
 80116b4:	2301      	movs	r3, #1
 80116b6:	e000      	b.n	80116ba <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80116b8:	2300      	movs	r3, #0
}
 80116ba:	4618      	mov	r0, r3
 80116bc:	3710      	adds	r7, #16
 80116be:	46bd      	mov	sp, r7
 80116c0:	bd80      	pop	{r7, pc}
 80116c2:	bf00      	nop
 80116c4:	0801a634 	.word	0x0801a634
 80116c8:	0801a664 	.word	0x0801a664
 80116cc:	0801a688 	.word	0x0801a688
 80116d0:	0801a6b0 	.word	0x0801a6b0
 80116d4:	20009290 	.word	0x20009290

080116d8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80116d8:	b590      	push	{r4, r7, lr}
 80116da:	b08d      	sub	sp, #52	@ 0x34
 80116dc:	af02      	add	r7, sp, #8
 80116de:	6078      	str	r0, [r7, #4]
 80116e0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80116e2:	2300      	movs	r3, #0
 80116e4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d105      	bne.n	80116f8 <udp_input+0x20>
 80116ec:	4b7c      	ldr	r3, [pc, #496]	@ (80118e0 <udp_input+0x208>)
 80116ee:	22cf      	movs	r2, #207	@ 0xcf
 80116f0:	497c      	ldr	r1, [pc, #496]	@ (80118e4 <udp_input+0x20c>)
 80116f2:	487d      	ldr	r0, [pc, #500]	@ (80118e8 <udp_input+0x210>)
 80116f4:	f005 fcb0 	bl	8017058 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80116f8:	683b      	ldr	r3, [r7, #0]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d105      	bne.n	801170a <udp_input+0x32>
 80116fe:	4b78      	ldr	r3, [pc, #480]	@ (80118e0 <udp_input+0x208>)
 8011700:	22d0      	movs	r2, #208	@ 0xd0
 8011702:	497a      	ldr	r1, [pc, #488]	@ (80118ec <udp_input+0x214>)
 8011704:	4878      	ldr	r0, [pc, #480]	@ (80118e8 <udp_input+0x210>)
 8011706:	f005 fca7 	bl	8017058 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	895b      	ldrh	r3, [r3, #10]
 801170e:	2b07      	cmp	r3, #7
 8011710:	d803      	bhi.n	801171a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8011712:	6878      	ldr	r0, [r7, #4]
 8011714:	f7fa f9b6 	bl	800ba84 <pbuf_free>
    goto end;
 8011718:	e0de      	b.n	80118d8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	685b      	ldr	r3, [r3, #4]
 801171e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011720:	4b73      	ldr	r3, [pc, #460]	@ (80118f0 <udp_input+0x218>)
 8011722:	695b      	ldr	r3, [r3, #20]
 8011724:	4a72      	ldr	r2, [pc, #456]	@ (80118f0 <udp_input+0x218>)
 8011726:	6812      	ldr	r2, [r2, #0]
 8011728:	4611      	mov	r1, r2
 801172a:	4618      	mov	r0, r3
 801172c:	f004 fa98 	bl	8015c60 <ip4_addr_isbroadcast_u32>
 8011730:	4603      	mov	r3, r0
 8011732:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011734:	697b      	ldr	r3, [r7, #20]
 8011736:	881b      	ldrh	r3, [r3, #0]
 8011738:	b29b      	uxth	r3, r3
 801173a:	4618      	mov	r0, r3
 801173c:	f7f8 fc4e 	bl	8009fdc <lwip_htons>
 8011740:	4603      	mov	r3, r0
 8011742:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011744:	697b      	ldr	r3, [r7, #20]
 8011746:	885b      	ldrh	r3, [r3, #2]
 8011748:	b29b      	uxth	r3, r3
 801174a:	4618      	mov	r0, r3
 801174c:	f7f8 fc46 	bl	8009fdc <lwip_htons>
 8011750:	4603      	mov	r3, r0
 8011752:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8011754:	2300      	movs	r3, #0
 8011756:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8011758:	2300      	movs	r3, #0
 801175a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801175c:	2300      	movs	r3, #0
 801175e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011760:	4b64      	ldr	r3, [pc, #400]	@ (80118f4 <udp_input+0x21c>)
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	627b      	str	r3, [r7, #36]	@ 0x24
 8011766:	e054      	b.n	8011812 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801176a:	8a5b      	ldrh	r3, [r3, #18]
 801176c:	89fa      	ldrh	r2, [r7, #14]
 801176e:	429a      	cmp	r2, r3
 8011770:	d14a      	bne.n	8011808 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8011772:	7cfb      	ldrb	r3, [r7, #19]
 8011774:	461a      	mov	r2, r3
 8011776:	6839      	ldr	r1, [r7, #0]
 8011778:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801177a:	f7ff ff49 	bl	8011610 <udp_input_local_match>
 801177e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011780:	2b00      	cmp	r3, #0
 8011782:	d041      	beq.n	8011808 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011786:	7c1b      	ldrb	r3, [r3, #16]
 8011788:	f003 0304 	and.w	r3, r3, #4
 801178c:	2b00      	cmp	r3, #0
 801178e:	d11d      	bne.n	80117cc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8011790:	69fb      	ldr	r3, [r7, #28]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d102      	bne.n	801179c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8011796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011798:	61fb      	str	r3, [r7, #28]
 801179a:	e017      	b.n	80117cc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801179c:	7cfb      	ldrb	r3, [r7, #19]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d014      	beq.n	80117cc <udp_input+0xf4>
 80117a2:	4b53      	ldr	r3, [pc, #332]	@ (80118f0 <udp_input+0x218>)
 80117a4:	695b      	ldr	r3, [r3, #20]
 80117a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117aa:	d10f      	bne.n	80117cc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80117ac:	69fb      	ldr	r3, [r7, #28]
 80117ae:	681a      	ldr	r2, [r3, #0]
 80117b0:	683b      	ldr	r3, [r7, #0]
 80117b2:	3304      	adds	r3, #4
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	429a      	cmp	r2, r3
 80117b8:	d008      	beq.n	80117cc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80117ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117bc:	681a      	ldr	r2, [r3, #0]
 80117be:	683b      	ldr	r3, [r7, #0]
 80117c0:	3304      	adds	r3, #4
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	429a      	cmp	r2, r3
 80117c6:	d101      	bne.n	80117cc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80117c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117ca:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80117cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117ce:	8a9b      	ldrh	r3, [r3, #20]
 80117d0:	8a3a      	ldrh	r2, [r7, #16]
 80117d2:	429a      	cmp	r2, r3
 80117d4:	d118      	bne.n	8011808 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80117d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117d8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d005      	beq.n	80117ea <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80117de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117e0:	685a      	ldr	r2, [r3, #4]
 80117e2:	4b43      	ldr	r3, [pc, #268]	@ (80118f0 <udp_input+0x218>)
 80117e4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80117e6:	429a      	cmp	r2, r3
 80117e8:	d10e      	bne.n	8011808 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80117ea:	6a3b      	ldr	r3, [r7, #32]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d014      	beq.n	801181a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80117f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117f2:	68da      	ldr	r2, [r3, #12]
 80117f4:	6a3b      	ldr	r3, [r7, #32]
 80117f6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80117f8:	4b3e      	ldr	r3, [pc, #248]	@ (80118f4 <udp_input+0x21c>)
 80117fa:	681a      	ldr	r2, [r3, #0]
 80117fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117fe:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011800:	4a3c      	ldr	r2, [pc, #240]	@ (80118f4 <udp_input+0x21c>)
 8011802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011804:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8011806:	e008      	b.n	801181a <udp_input+0x142>
      }
    }

    prev = pcb;
 8011808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801180a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801180c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801180e:	68db      	ldr	r3, [r3, #12]
 8011810:	627b      	str	r3, [r7, #36]	@ 0x24
 8011812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011814:	2b00      	cmp	r3, #0
 8011816:	d1a7      	bne.n	8011768 <udp_input+0x90>
 8011818:	e000      	b.n	801181c <udp_input+0x144>
        break;
 801181a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801181c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801181e:	2b00      	cmp	r3, #0
 8011820:	d101      	bne.n	8011826 <udp_input+0x14e>
    pcb = uncon_pcb;
 8011822:	69fb      	ldr	r3, [r7, #28]
 8011824:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8011826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011828:	2b00      	cmp	r3, #0
 801182a:	d002      	beq.n	8011832 <udp_input+0x15a>
    for_us = 1;
 801182c:	2301      	movs	r3, #1
 801182e:	76fb      	strb	r3, [r7, #27]
 8011830:	e00a      	b.n	8011848 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8011832:	683b      	ldr	r3, [r7, #0]
 8011834:	3304      	adds	r3, #4
 8011836:	681a      	ldr	r2, [r3, #0]
 8011838:	4b2d      	ldr	r3, [pc, #180]	@ (80118f0 <udp_input+0x218>)
 801183a:	695b      	ldr	r3, [r3, #20]
 801183c:	429a      	cmp	r2, r3
 801183e:	bf0c      	ite	eq
 8011840:	2301      	moveq	r3, #1
 8011842:	2300      	movne	r3, #0
 8011844:	b2db      	uxtb	r3, r3
 8011846:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8011848:	7efb      	ldrb	r3, [r7, #27]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d041      	beq.n	80118d2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801184e:	2108      	movs	r1, #8
 8011850:	6878      	ldr	r0, [r7, #4]
 8011852:	f7fa f891 	bl	800b978 <pbuf_remove_header>
 8011856:	4603      	mov	r3, r0
 8011858:	2b00      	cmp	r3, #0
 801185a:	d00a      	beq.n	8011872 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801185c:	4b20      	ldr	r3, [pc, #128]	@ (80118e0 <udp_input+0x208>)
 801185e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8011862:	4925      	ldr	r1, [pc, #148]	@ (80118f8 <udp_input+0x220>)
 8011864:	4820      	ldr	r0, [pc, #128]	@ (80118e8 <udp_input+0x210>)
 8011866:	f005 fbf7 	bl	8017058 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801186a:	6878      	ldr	r0, [r7, #4]
 801186c:	f7fa f90a 	bl	800ba84 <pbuf_free>
      goto end;
 8011870:	e032      	b.n	80118d8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8011872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011874:	2b00      	cmp	r3, #0
 8011876:	d012      	beq.n	801189e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801187a:	6a1b      	ldr	r3, [r3, #32]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d00a      	beq.n	8011896 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011882:	6a1c      	ldr	r4, [r3, #32]
 8011884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011886:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8011888:	8a3b      	ldrh	r3, [r7, #16]
 801188a:	9300      	str	r3, [sp, #0]
 801188c:	4b1b      	ldr	r3, [pc, #108]	@ (80118fc <udp_input+0x224>)
 801188e:	687a      	ldr	r2, [r7, #4]
 8011890:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011892:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8011894:	e021      	b.n	80118da <udp_input+0x202>
        pbuf_free(p);
 8011896:	6878      	ldr	r0, [r7, #4]
 8011898:	f7fa f8f4 	bl	800ba84 <pbuf_free>
        goto end;
 801189c:	e01c      	b.n	80118d8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801189e:	7cfb      	ldrb	r3, [r7, #19]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d112      	bne.n	80118ca <udp_input+0x1f2>
 80118a4:	4b12      	ldr	r3, [pc, #72]	@ (80118f0 <udp_input+0x218>)
 80118a6:	695b      	ldr	r3, [r3, #20]
 80118a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80118ac:	2be0      	cmp	r3, #224	@ 0xe0
 80118ae:	d00c      	beq.n	80118ca <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80118b0:	4b0f      	ldr	r3, [pc, #60]	@ (80118f0 <udp_input+0x218>)
 80118b2:	899b      	ldrh	r3, [r3, #12]
 80118b4:	3308      	adds	r3, #8
 80118b6:	b29b      	uxth	r3, r3
 80118b8:	b21b      	sxth	r3, r3
 80118ba:	4619      	mov	r1, r3
 80118bc:	6878      	ldr	r0, [r7, #4]
 80118be:	f7fa f8ce 	bl	800ba5e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80118c2:	2103      	movs	r1, #3
 80118c4:	6878      	ldr	r0, [r7, #4]
 80118c6:	f003 fb27 	bl	8014f18 <icmp_dest_unreach>
      pbuf_free(p);
 80118ca:	6878      	ldr	r0, [r7, #4]
 80118cc:	f7fa f8da 	bl	800ba84 <pbuf_free>
  return;
 80118d0:	e003      	b.n	80118da <udp_input+0x202>
    pbuf_free(p);
 80118d2:	6878      	ldr	r0, [r7, #4]
 80118d4:	f7fa f8d6 	bl	800ba84 <pbuf_free>
  return;
 80118d8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80118da:	372c      	adds	r7, #44	@ 0x2c
 80118dc:	46bd      	mov	sp, r7
 80118de:	bd90      	pop	{r4, r7, pc}
 80118e0:	0801a634 	.word	0x0801a634
 80118e4:	0801a6d8 	.word	0x0801a6d8
 80118e8:	0801a688 	.word	0x0801a688
 80118ec:	0801a6f0 	.word	0x0801a6f0
 80118f0:	20009290 	.word	0x20009290
 80118f4:	2000cb1c 	.word	0x2000cb1c
 80118f8:	0801a70c 	.word	0x0801a70c
 80118fc:	200092a0 	.word	0x200092a0

08011900 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8011900:	b580      	push	{r7, lr}
 8011902:	b088      	sub	sp, #32
 8011904:	af02      	add	r7, sp, #8
 8011906:	60f8      	str	r0, [r7, #12]
 8011908:	60b9      	str	r1, [r7, #8]
 801190a:	607a      	str	r2, [r7, #4]
 801190c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d109      	bne.n	8011928 <udp_sendto+0x28>
 8011914:	4b36      	ldr	r3, [pc, #216]	@ (80119f0 <udp_sendto+0xf0>)
 8011916:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801191a:	4936      	ldr	r1, [pc, #216]	@ (80119f4 <udp_sendto+0xf4>)
 801191c:	4836      	ldr	r0, [pc, #216]	@ (80119f8 <udp_sendto+0xf8>)
 801191e:	f005 fb9b 	bl	8017058 <iprintf>
 8011922:	f06f 030f 	mvn.w	r3, #15
 8011926:	e05e      	b.n	80119e6 <udp_sendto+0xe6>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8011928:	68bb      	ldr	r3, [r7, #8]
 801192a:	2b00      	cmp	r3, #0
 801192c:	d109      	bne.n	8011942 <udp_sendto+0x42>
 801192e:	4b30      	ldr	r3, [pc, #192]	@ (80119f0 <udp_sendto+0xf0>)
 8011930:	f240 2219 	movw	r2, #537	@ 0x219
 8011934:	4931      	ldr	r1, [pc, #196]	@ (80119fc <udp_sendto+0xfc>)
 8011936:	4830      	ldr	r0, [pc, #192]	@ (80119f8 <udp_sendto+0xf8>)
 8011938:	f005 fb8e 	bl	8017058 <iprintf>
 801193c:	f06f 030f 	mvn.w	r3, #15
 8011940:	e051      	b.n	80119e6 <udp_sendto+0xe6>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d109      	bne.n	801195c <udp_sendto+0x5c>
 8011948:	4b29      	ldr	r3, [pc, #164]	@ (80119f0 <udp_sendto+0xf0>)
 801194a:	f240 221a 	movw	r2, #538	@ 0x21a
 801194e:	492c      	ldr	r1, [pc, #176]	@ (8011a00 <udp_sendto+0x100>)
 8011950:	4829      	ldr	r0, [pc, #164]	@ (80119f8 <udp_sendto+0xf8>)
 8011952:	f005 fb81 	bl	8017058 <iprintf>
 8011956:	f06f 030f 	mvn.w	r3, #15
 801195a:	e044      	b.n	80119e6 <udp_sendto+0xe6>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	7a1b      	ldrb	r3, [r3, #8]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d006      	beq.n	8011972 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	7a1b      	ldrb	r3, [r3, #8]
 8011968:	4618      	mov	r0, r3
 801196a:	f7f9 fccf 	bl	800b30c <netif_get_by_index>
 801196e:	6178      	str	r0, [r7, #20]
 8011970:	e029      	b.n	80119c6 <udp_sendto+0xc6>
  } else {
#if LWIP_MULTICAST_TX_OPTIONS
    netif = NULL;
 8011972:	2300      	movs	r3, #0
 8011974:	617b      	str	r3, [r7, #20]
    if (ip_addr_ismulticast(dst_ip)) {
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801197e:	2be0      	cmp	r3, #224	@ 0xe0
 8011980:	d11a      	bne.n	80119b8 <udp_sendto+0xb8>
       * is specified using an interface index. The same approach may be used for
       * IPv4 as well, in which case it overrides the IPv4 multicast override
       * address below. Here we have to look up the netif by going through the
       * list, but by doing so we skip a route lookup. If the interface index has
       * gone stale, we fall through and do the regular route lookup after all. */
      if (pcb->mcast_ifindex != NETIF_NO_INDEX) {
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	7f1b      	ldrb	r3, [r3, #28]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d006      	beq.n	8011998 <udp_sendto+0x98>
        netif = netif_get_by_index(pcb->mcast_ifindex);
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	7f1b      	ldrb	r3, [r3, #28]
 801198e:	4618      	mov	r0, r3
 8011990:	f7f9 fcbc 	bl	800b30c <netif_get_by_index>
 8011994:	6178      	str	r0, [r7, #20]
 8011996:	e00f      	b.n	80119b8 <udp_sendto+0xb8>
          /* IPv4 does not use source-based routing by default, so we use an
             administratively selected interface for multicast by default.
             However, this can be overridden by setting an interface address
             in pcb->mcast_ip4 that is used for routing. If this routing lookup
             fails, we try regular routing as though no override was set. */
          if (!ip4_addr_isany_val(pcb->mcast_ip4) &&
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	699b      	ldr	r3, [r3, #24]
 801199c:	2b00      	cmp	r3, #0
 801199e:	d00b      	beq.n	80119b8 <udp_sendto+0xb8>
              !ip4_addr_cmp(&pcb->mcast_ip4, IP4_ADDR_BROADCAST)) {
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	699a      	ldr	r2, [r3, #24]
 80119a4:	4b17      	ldr	r3, [pc, #92]	@ (8011a04 <udp_sendto+0x104>)
 80119a6:	681b      	ldr	r3, [r3, #0]
          if (!ip4_addr_isany_val(pcb->mcast_ip4) &&
 80119a8:	429a      	cmp	r2, r3
 80119aa:	d005      	beq.n	80119b8 <udp_sendto+0xb8>
            netif = ip4_route_src(ip_2_ip4(&pcb->local_ip), &pcb->mcast_ip4);
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	3318      	adds	r3, #24
 80119b0:	4618      	mov	r0, r3
 80119b2:	f003 fde5 	bl	8015580 <ip4_route>
 80119b6:	6178      	str	r0, [r7, #20]
          }
        }
#endif /* LWIP_IPV4 */
    }

    if (netif == NULL)
 80119b8:	697b      	ldr	r3, [r7, #20]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d103      	bne.n	80119c6 <udp_sendto+0xc6>
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80119be:	6878      	ldr	r0, [r7, #4]
 80119c0:	f003 fdde 	bl	8015580 <ip4_route>
 80119c4:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80119c6:	697b      	ldr	r3, [r7, #20]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d102      	bne.n	80119d2 <udp_sendto+0xd2>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80119cc:	f06f 0303 	mvn.w	r3, #3
 80119d0:	e009      	b.n	80119e6 <udp_sendto+0xe6>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80119d2:	887a      	ldrh	r2, [r7, #2]
 80119d4:	697b      	ldr	r3, [r7, #20]
 80119d6:	9300      	str	r3, [sp, #0]
 80119d8:	4613      	mov	r3, r2
 80119da:	687a      	ldr	r2, [r7, #4]
 80119dc:	68b9      	ldr	r1, [r7, #8]
 80119de:	68f8      	ldr	r0, [r7, #12]
 80119e0:	f000 f812 	bl	8011a08 <udp_sendto_if>
 80119e4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80119e6:	4618      	mov	r0, r3
 80119e8:	3718      	adds	r7, #24
 80119ea:	46bd      	mov	sp, r7
 80119ec:	bd80      	pop	{r7, pc}
 80119ee:	bf00      	nop
 80119f0:	0801a634 	.word	0x0801a634
 80119f4:	0801a758 	.word	0x0801a758
 80119f8:	0801a688 	.word	0x0801a688
 80119fc:	0801a770 	.word	0x0801a770
 8011a00:	0801a78c 	.word	0x0801a78c
 8011a04:	0801b8d8 	.word	0x0801b8d8

08011a08 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	b088      	sub	sp, #32
 8011a0c:	af02      	add	r7, sp, #8
 8011a0e:	60f8      	str	r0, [r7, #12]
 8011a10:	60b9      	str	r1, [r7, #8]
 8011a12:	607a      	str	r2, [r7, #4]
 8011a14:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d109      	bne.n	8011a30 <udp_sendto_if+0x28>
 8011a1c:	4b2e      	ldr	r3, [pc, #184]	@ (8011ad8 <udp_sendto_if+0xd0>)
 8011a1e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011a22:	492e      	ldr	r1, [pc, #184]	@ (8011adc <udp_sendto_if+0xd4>)
 8011a24:	482e      	ldr	r0, [pc, #184]	@ (8011ae0 <udp_sendto_if+0xd8>)
 8011a26:	f005 fb17 	bl	8017058 <iprintf>
 8011a2a:	f06f 030f 	mvn.w	r3, #15
 8011a2e:	e04f      	b.n	8011ad0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8011a30:	68bb      	ldr	r3, [r7, #8]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d109      	bne.n	8011a4a <udp_sendto_if+0x42>
 8011a36:	4b28      	ldr	r3, [pc, #160]	@ (8011ad8 <udp_sendto_if+0xd0>)
 8011a38:	f240 2281 	movw	r2, #641	@ 0x281
 8011a3c:	4929      	ldr	r1, [pc, #164]	@ (8011ae4 <udp_sendto_if+0xdc>)
 8011a3e:	4828      	ldr	r0, [pc, #160]	@ (8011ae0 <udp_sendto_if+0xd8>)
 8011a40:	f005 fb0a 	bl	8017058 <iprintf>
 8011a44:	f06f 030f 	mvn.w	r3, #15
 8011a48:	e042      	b.n	8011ad0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d109      	bne.n	8011a64 <udp_sendto_if+0x5c>
 8011a50:	4b21      	ldr	r3, [pc, #132]	@ (8011ad8 <udp_sendto_if+0xd0>)
 8011a52:	f240 2282 	movw	r2, #642	@ 0x282
 8011a56:	4924      	ldr	r1, [pc, #144]	@ (8011ae8 <udp_sendto_if+0xe0>)
 8011a58:	4821      	ldr	r0, [pc, #132]	@ (8011ae0 <udp_sendto_if+0xd8>)
 8011a5a:	f005 fafd 	bl	8017058 <iprintf>
 8011a5e:	f06f 030f 	mvn.w	r3, #15
 8011a62:	e035      	b.n	8011ad0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8011a64:	6a3b      	ldr	r3, [r7, #32]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d109      	bne.n	8011a7e <udp_sendto_if+0x76>
 8011a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8011ad8 <udp_sendto_if+0xd0>)
 8011a6c:	f240 2283 	movw	r2, #643	@ 0x283
 8011a70:	491e      	ldr	r1, [pc, #120]	@ (8011aec <udp_sendto_if+0xe4>)
 8011a72:	481b      	ldr	r0, [pc, #108]	@ (8011ae0 <udp_sendto_if+0xd8>)
 8011a74:	f005 faf0 	bl	8017058 <iprintf>
 8011a78:	f06f 030f 	mvn.w	r3, #15
 8011a7c:	e028      	b.n	8011ad0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d009      	beq.n	8011a98 <udp_sendto_if+0x90>
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d005      	beq.n	8011a98 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011a94:	2be0      	cmp	r3, #224	@ 0xe0
 8011a96:	d103      	bne.n	8011aa0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8011a98:	6a3b      	ldr	r3, [r7, #32]
 8011a9a:	3304      	adds	r3, #4
 8011a9c:	617b      	str	r3, [r7, #20]
 8011a9e:	e00b      	b.n	8011ab8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	681a      	ldr	r2, [r3, #0]
 8011aa4:	6a3b      	ldr	r3, [r7, #32]
 8011aa6:	3304      	adds	r3, #4
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	429a      	cmp	r2, r3
 8011aac:	d002      	beq.n	8011ab4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8011aae:	f06f 0303 	mvn.w	r3, #3
 8011ab2:	e00d      	b.n	8011ad0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8011ab8:	887a      	ldrh	r2, [r7, #2]
 8011aba:	697b      	ldr	r3, [r7, #20]
 8011abc:	9301      	str	r3, [sp, #4]
 8011abe:	6a3b      	ldr	r3, [r7, #32]
 8011ac0:	9300      	str	r3, [sp, #0]
 8011ac2:	4613      	mov	r3, r2
 8011ac4:	687a      	ldr	r2, [r7, #4]
 8011ac6:	68b9      	ldr	r1, [r7, #8]
 8011ac8:	68f8      	ldr	r0, [r7, #12]
 8011aca:	f000 f811 	bl	8011af0 <udp_sendto_if_src>
 8011ace:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	3718      	adds	r7, #24
 8011ad4:	46bd      	mov	sp, r7
 8011ad6:	bd80      	pop	{r7, pc}
 8011ad8:	0801a634 	.word	0x0801a634
 8011adc:	0801a7a8 	.word	0x0801a7a8
 8011ae0:	0801a688 	.word	0x0801a688
 8011ae4:	0801a7c4 	.word	0x0801a7c4
 8011ae8:	0801a7e0 	.word	0x0801a7e0
 8011aec:	0801a800 	.word	0x0801a800

08011af0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b08c      	sub	sp, #48	@ 0x30
 8011af4:	af04      	add	r7, sp, #16
 8011af6:	60f8      	str	r0, [r7, #12]
 8011af8:	60b9      	str	r1, [r7, #8]
 8011afa:	607a      	str	r2, [r7, #4]
 8011afc:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d109      	bne.n	8011b18 <udp_sendto_if_src+0x28>
 8011b04:	4b73      	ldr	r3, [pc, #460]	@ (8011cd4 <udp_sendto_if_src+0x1e4>)
 8011b06:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8011b0a:	4973      	ldr	r1, [pc, #460]	@ (8011cd8 <udp_sendto_if_src+0x1e8>)
 8011b0c:	4873      	ldr	r0, [pc, #460]	@ (8011cdc <udp_sendto_if_src+0x1ec>)
 8011b0e:	f005 faa3 	bl	8017058 <iprintf>
 8011b12:	f06f 030f 	mvn.w	r3, #15
 8011b16:	e0d8      	b.n	8011cca <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8011b18:	68bb      	ldr	r3, [r7, #8]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d109      	bne.n	8011b32 <udp_sendto_if_src+0x42>
 8011b1e:	4b6d      	ldr	r3, [pc, #436]	@ (8011cd4 <udp_sendto_if_src+0x1e4>)
 8011b20:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8011b24:	496e      	ldr	r1, [pc, #440]	@ (8011ce0 <udp_sendto_if_src+0x1f0>)
 8011b26:	486d      	ldr	r0, [pc, #436]	@ (8011cdc <udp_sendto_if_src+0x1ec>)
 8011b28:	f005 fa96 	bl	8017058 <iprintf>
 8011b2c:	f06f 030f 	mvn.w	r3, #15
 8011b30:	e0cb      	b.n	8011cca <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d109      	bne.n	8011b4c <udp_sendto_if_src+0x5c>
 8011b38:	4b66      	ldr	r3, [pc, #408]	@ (8011cd4 <udp_sendto_if_src+0x1e4>)
 8011b3a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8011b3e:	4969      	ldr	r1, [pc, #420]	@ (8011ce4 <udp_sendto_if_src+0x1f4>)
 8011b40:	4866      	ldr	r0, [pc, #408]	@ (8011cdc <udp_sendto_if_src+0x1ec>)
 8011b42:	f005 fa89 	bl	8017058 <iprintf>
 8011b46:	f06f 030f 	mvn.w	r3, #15
 8011b4a:	e0be      	b.n	8011cca <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8011b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d109      	bne.n	8011b66 <udp_sendto_if_src+0x76>
 8011b52:	4b60      	ldr	r3, [pc, #384]	@ (8011cd4 <udp_sendto_if_src+0x1e4>)
 8011b54:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8011b58:	4963      	ldr	r1, [pc, #396]	@ (8011ce8 <udp_sendto_if_src+0x1f8>)
 8011b5a:	4860      	ldr	r0, [pc, #384]	@ (8011cdc <udp_sendto_if_src+0x1ec>)
 8011b5c:	f005 fa7c 	bl	8017058 <iprintf>
 8011b60:	f06f 030f 	mvn.w	r3, #15
 8011b64:	e0b1      	b.n	8011cca <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8011b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d109      	bne.n	8011b80 <udp_sendto_if_src+0x90>
 8011b6c:	4b59      	ldr	r3, [pc, #356]	@ (8011cd4 <udp_sendto_if_src+0x1e4>)
 8011b6e:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8011b72:	495e      	ldr	r1, [pc, #376]	@ (8011cec <udp_sendto_if_src+0x1fc>)
 8011b74:	4859      	ldr	r0, [pc, #356]	@ (8011cdc <udp_sendto_if_src+0x1ec>)
 8011b76:	f005 fa6f 	bl	8017058 <iprintf>
 8011b7a:	f06f 030f 	mvn.w	r3, #15
 8011b7e:	e0a4      	b.n	8011cca <udp_sendto_if_src+0x1da>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	8a5b      	ldrh	r3, [r3, #18]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d10f      	bne.n	8011ba8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011b88:	68f9      	ldr	r1, [r7, #12]
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	8a5b      	ldrh	r3, [r3, #18]
 8011b8e:	461a      	mov	r2, r3
 8011b90:	68f8      	ldr	r0, [r7, #12]
 8011b92:	f000 f8af 	bl	8011cf4 <udp_bind>
 8011b96:	4603      	mov	r3, r0
 8011b98:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8011b9a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d002      	beq.n	8011ba8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8011ba2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011ba6:	e090      	b.n	8011cca <udp_sendto_if_src+0x1da>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8011ba8:	68bb      	ldr	r3, [r7, #8]
 8011baa:	891b      	ldrh	r3, [r3, #8]
 8011bac:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8011bb0:	4293      	cmp	r3, r2
 8011bb2:	d902      	bls.n	8011bba <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8011bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8011bb8:	e087      	b.n	8011cca <udp_sendto_if_src+0x1da>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8011bba:	2108      	movs	r1, #8
 8011bbc:	68b8      	ldr	r0, [r7, #8]
 8011bbe:	f7f9 fecb 	bl	800b958 <pbuf_add_header>
 8011bc2:	4603      	mov	r3, r0
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d015      	beq.n	8011bf4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8011bc8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011bcc:	2108      	movs	r1, #8
 8011bce:	2022      	movs	r0, #34	@ 0x22
 8011bd0:	f7f9 fc74 	bl	800b4bc <pbuf_alloc>
 8011bd4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8011bd6:	69fb      	ldr	r3, [r7, #28]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d102      	bne.n	8011be2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8011bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8011be0:	e073      	b.n	8011cca <udp_sendto_if_src+0x1da>
    }
    if (p->tot_len != 0) {
 8011be2:	68bb      	ldr	r3, [r7, #8]
 8011be4:	891b      	ldrh	r3, [r3, #8]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d006      	beq.n	8011bf8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8011bea:	68b9      	ldr	r1, [r7, #8]
 8011bec:	69f8      	ldr	r0, [r7, #28]
 8011bee:	f7fa f86d 	bl	800bccc <pbuf_chain>
 8011bf2:	e001      	b.n	8011bf8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8011bf4:	68bb      	ldr	r3, [r7, #8]
 8011bf6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8011bf8:	69fb      	ldr	r3, [r7, #28]
 8011bfa:	895b      	ldrh	r3, [r3, #10]
 8011bfc:	2b07      	cmp	r3, #7
 8011bfe:	d806      	bhi.n	8011c0e <udp_sendto_if_src+0x11e>
 8011c00:	4b34      	ldr	r3, [pc, #208]	@ (8011cd4 <udp_sendto_if_src+0x1e4>)
 8011c02:	f240 320d 	movw	r2, #781	@ 0x30d
 8011c06:	493a      	ldr	r1, [pc, #232]	@ (8011cf0 <udp_sendto_if_src+0x200>)
 8011c08:	4834      	ldr	r0, [pc, #208]	@ (8011cdc <udp_sendto_if_src+0x1ec>)
 8011c0a:	f005 fa25 	bl	8017058 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8011c0e:	69fb      	ldr	r3, [r7, #28]
 8011c10:	685b      	ldr	r3, [r3, #4]
 8011c12:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	8a5b      	ldrh	r3, [r3, #18]
 8011c18:	4618      	mov	r0, r3
 8011c1a:	f7f8 f9df 	bl	8009fdc <lwip_htons>
 8011c1e:	4603      	mov	r3, r0
 8011c20:	461a      	mov	r2, r3
 8011c22:	697b      	ldr	r3, [r7, #20]
 8011c24:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8011c26:	887b      	ldrh	r3, [r7, #2]
 8011c28:	4618      	mov	r0, r3
 8011c2a:	f7f8 f9d7 	bl	8009fdc <lwip_htons>
 8011c2e:	4603      	mov	r3, r0
 8011c30:	461a      	mov	r2, r3
 8011c32:	697b      	ldr	r3, [r7, #20]
 8011c34:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8011c36:	697b      	ldr	r3, [r7, #20]
 8011c38:	2200      	movs	r2, #0
 8011c3a:	719a      	strb	r2, [r3, #6]
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	71da      	strb	r2, [r3, #7]

  /* Multicast Loop? */
#if LWIP_MULTICAST_TX_OPTIONS
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	7c1b      	ldrb	r3, [r3, #16]
 8011c44:	f003 0308 	and.w	r3, r3, #8
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d00c      	beq.n	8011c66 <udp_sendto_if_src+0x176>
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011c54:	2be0      	cmp	r3, #224	@ 0xe0
 8011c56:	d106      	bne.n	8011c66 <udp_sendto_if_src+0x176>
    q->flags |= PBUF_FLAG_MCASTLOOP;
 8011c58:	69fb      	ldr	r3, [r7, #28]
 8011c5a:	7b5b      	ldrb	r3, [r3, #13]
 8011c5c:	f043 0304 	orr.w	r3, r3, #4
 8011c60:	b2da      	uxtb	r2, r3
 8011c62:	69fb      	ldr	r3, [r7, #28]
 8011c64:	735a      	strb	r2, [r3, #13]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8011c66:	69fb      	ldr	r3, [r7, #28]
 8011c68:	891b      	ldrh	r3, [r3, #8]
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	f7f8 f9b6 	bl	8009fdc <lwip_htons>
 8011c70:	4603      	mov	r3, r0
 8011c72:	461a      	mov	r2, r3
 8011c74:	697b      	ldr	r3, [r7, #20]
 8011c76:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8011c78:	2311      	movs	r3, #17
 8011c7a:	74fb      	strb	r3, [r7, #19]
  }

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011c84:	2be0      	cmp	r3, #224	@ 0xe0
 8011c86:	d102      	bne.n	8011c8e <udp_sendto_if_src+0x19e>
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	7f5b      	ldrb	r3, [r3, #29]
 8011c8c:	e001      	b.n	8011c92 <udp_sendto_if_src+0x1a2>
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	7adb      	ldrb	r3, [r3, #11]
 8011c92:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	7a9b      	ldrb	r3, [r3, #10]
 8011c98:	7cb9      	ldrb	r1, [r7, #18]
 8011c9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011c9c:	9202      	str	r2, [sp, #8]
 8011c9e:	7cfa      	ldrb	r2, [r7, #19]
 8011ca0:	9201      	str	r2, [sp, #4]
 8011ca2:	9300      	str	r3, [sp, #0]
 8011ca4:	460b      	mov	r3, r1
 8011ca6:	687a      	ldr	r2, [r7, #4]
 8011ca8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011caa:	69f8      	ldr	r0, [r7, #28]
 8011cac:	f003 fed5 	bl	8015a5a <ip4_output_if_src>
 8011cb0:	4603      	mov	r3, r0
 8011cb2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8011cb4:	69fa      	ldr	r2, [r7, #28]
 8011cb6:	68bb      	ldr	r3, [r7, #8]
 8011cb8:	429a      	cmp	r2, r3
 8011cba:	d004      	beq.n	8011cc6 <udp_sendto_if_src+0x1d6>
    /* free the header pbuf */
    pbuf_free(q);
 8011cbc:	69f8      	ldr	r0, [r7, #28]
 8011cbe:	f7f9 fee1 	bl	800ba84 <pbuf_free>
    q = NULL;
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8011cc6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8011cca:	4618      	mov	r0, r3
 8011ccc:	3720      	adds	r7, #32
 8011cce:	46bd      	mov	sp, r7
 8011cd0:	bd80      	pop	{r7, pc}
 8011cd2:	bf00      	nop
 8011cd4:	0801a634 	.word	0x0801a634
 8011cd8:	0801a820 	.word	0x0801a820
 8011cdc:	0801a688 	.word	0x0801a688
 8011ce0:	0801a840 	.word	0x0801a840
 8011ce4:	0801a860 	.word	0x0801a860
 8011ce8:	0801a884 	.word	0x0801a884
 8011cec:	0801a8a8 	.word	0x0801a8a8
 8011cf0:	0801a8cc 	.word	0x0801a8cc

08011cf4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b086      	sub	sp, #24
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	60f8      	str	r0, [r7, #12]
 8011cfc:	60b9      	str	r1, [r7, #8]
 8011cfe:	4613      	mov	r3, r2
 8011d00:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011d02:	68bb      	ldr	r3, [r7, #8]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d101      	bne.n	8011d0c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8011d08:	4b39      	ldr	r3, [pc, #228]	@ (8011df0 <udp_bind+0xfc>)
 8011d0a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d109      	bne.n	8011d26 <udp_bind+0x32>
 8011d12:	4b38      	ldr	r3, [pc, #224]	@ (8011df4 <udp_bind+0x100>)
 8011d14:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8011d18:	4937      	ldr	r1, [pc, #220]	@ (8011df8 <udp_bind+0x104>)
 8011d1a:	4838      	ldr	r0, [pc, #224]	@ (8011dfc <udp_bind+0x108>)
 8011d1c:	f005 f99c 	bl	8017058 <iprintf>
 8011d20:	f06f 030f 	mvn.w	r3, #15
 8011d24:	e060      	b.n	8011de8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8011d26:	2300      	movs	r3, #0
 8011d28:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011d2a:	4b35      	ldr	r3, [pc, #212]	@ (8011e00 <udp_bind+0x10c>)
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	617b      	str	r3, [r7, #20]
 8011d30:	e009      	b.n	8011d46 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8011d32:	68fa      	ldr	r2, [r7, #12]
 8011d34:	697b      	ldr	r3, [r7, #20]
 8011d36:	429a      	cmp	r2, r3
 8011d38:	d102      	bne.n	8011d40 <udp_bind+0x4c>
      rebind = 1;
 8011d3a:	2301      	movs	r3, #1
 8011d3c:	74fb      	strb	r3, [r7, #19]
      break;
 8011d3e:	e005      	b.n	8011d4c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011d40:	697b      	ldr	r3, [r7, #20]
 8011d42:	68db      	ldr	r3, [r3, #12]
 8011d44:	617b      	str	r3, [r7, #20]
 8011d46:	697b      	ldr	r3, [r7, #20]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d1f2      	bne.n	8011d32 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8011d4c:	88fb      	ldrh	r3, [r7, #6]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d109      	bne.n	8011d66 <udp_bind+0x72>
    port = udp_new_port();
 8011d52:	f7ff fc25 	bl	80115a0 <udp_new_port>
 8011d56:	4603      	mov	r3, r0
 8011d58:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8011d5a:	88fb      	ldrh	r3, [r7, #6]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d12c      	bne.n	8011dba <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8011d60:	f06f 0307 	mvn.w	r3, #7
 8011d64:	e040      	b.n	8011de8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011d66:	4b26      	ldr	r3, [pc, #152]	@ (8011e00 <udp_bind+0x10c>)
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	617b      	str	r3, [r7, #20]
 8011d6c:	e022      	b.n	8011db4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8011d6e:	68fa      	ldr	r2, [r7, #12]
 8011d70:	697b      	ldr	r3, [r7, #20]
 8011d72:	429a      	cmp	r2, r3
 8011d74:	d01b      	beq.n	8011dae <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8011d76:	697b      	ldr	r3, [r7, #20]
 8011d78:	8a5b      	ldrh	r3, [r3, #18]
 8011d7a:	88fa      	ldrh	r2, [r7, #6]
 8011d7c:	429a      	cmp	r2, r3
 8011d7e:	d116      	bne.n	8011dae <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011d80:	697b      	ldr	r3, [r7, #20]
 8011d82:	681a      	ldr	r2, [r3, #0]
 8011d84:	68bb      	ldr	r3, [r7, #8]
 8011d86:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8011d88:	429a      	cmp	r2, r3
 8011d8a:	d00d      	beq.n	8011da8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011d8c:	68bb      	ldr	r3, [r7, #8]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d00a      	beq.n	8011da8 <udp_bind+0xb4>
 8011d92:	68bb      	ldr	r3, [r7, #8]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d006      	beq.n	8011da8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011d9a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d003      	beq.n	8011da8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011da0:	697b      	ldr	r3, [r7, #20]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d102      	bne.n	8011dae <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8011da8:	f06f 0307 	mvn.w	r3, #7
 8011dac:	e01c      	b.n	8011de8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011dae:	697b      	ldr	r3, [r7, #20]
 8011db0:	68db      	ldr	r3, [r3, #12]
 8011db2:	617b      	str	r3, [r7, #20]
 8011db4:	697b      	ldr	r3, [r7, #20]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d1d9      	bne.n	8011d6e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8011dba:	68bb      	ldr	r3, [r7, #8]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d002      	beq.n	8011dc6 <udp_bind+0xd2>
 8011dc0:	68bb      	ldr	r3, [r7, #8]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	e000      	b.n	8011dc8 <udp_bind+0xd4>
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	68fa      	ldr	r2, [r7, #12]
 8011dca:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	88fa      	ldrh	r2, [r7, #6]
 8011dd0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8011dd2:	7cfb      	ldrb	r3, [r7, #19]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d106      	bne.n	8011de6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8011dd8:	4b09      	ldr	r3, [pc, #36]	@ (8011e00 <udp_bind+0x10c>)
 8011dda:	681a      	ldr	r2, [r3, #0]
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8011de0:	4a07      	ldr	r2, [pc, #28]	@ (8011e00 <udp_bind+0x10c>)
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8011de6:	2300      	movs	r3, #0
}
 8011de8:	4618      	mov	r0, r3
 8011dea:	3718      	adds	r7, #24
 8011dec:	46bd      	mov	sp, r7
 8011dee:	bd80      	pop	{r7, pc}
 8011df0:	0801b8d4 	.word	0x0801b8d4
 8011df4:	0801a634 	.word	0x0801a634
 8011df8:	0801a8fc 	.word	0x0801a8fc
 8011dfc:	0801a688 	.word	0x0801a688
 8011e00:	2000cb1c 	.word	0x2000cb1c

08011e04 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b086      	sub	sp, #24
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	60f8      	str	r0, [r7, #12]
 8011e0c:	60b9      	str	r1, [r7, #8]
 8011e0e:	4613      	mov	r3, r2
 8011e10:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d109      	bne.n	8011e2c <udp_connect+0x28>
 8011e18:	4b2c      	ldr	r3, [pc, #176]	@ (8011ecc <udp_connect+0xc8>)
 8011e1a:	f240 4235 	movw	r2, #1077	@ 0x435
 8011e1e:	492c      	ldr	r1, [pc, #176]	@ (8011ed0 <udp_connect+0xcc>)
 8011e20:	482c      	ldr	r0, [pc, #176]	@ (8011ed4 <udp_connect+0xd0>)
 8011e22:	f005 f919 	bl	8017058 <iprintf>
 8011e26:	f06f 030f 	mvn.w	r3, #15
 8011e2a:	e04b      	b.n	8011ec4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8011e2c:	68bb      	ldr	r3, [r7, #8]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d109      	bne.n	8011e46 <udp_connect+0x42>
 8011e32:	4b26      	ldr	r3, [pc, #152]	@ (8011ecc <udp_connect+0xc8>)
 8011e34:	f240 4236 	movw	r2, #1078	@ 0x436
 8011e38:	4927      	ldr	r1, [pc, #156]	@ (8011ed8 <udp_connect+0xd4>)
 8011e3a:	4826      	ldr	r0, [pc, #152]	@ (8011ed4 <udp_connect+0xd0>)
 8011e3c:	f005 f90c 	bl	8017058 <iprintf>
 8011e40:	f06f 030f 	mvn.w	r3, #15
 8011e44:	e03e      	b.n	8011ec4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	8a5b      	ldrh	r3, [r3, #18]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d10f      	bne.n	8011e6e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011e4e:	68f9      	ldr	r1, [r7, #12]
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	8a5b      	ldrh	r3, [r3, #18]
 8011e54:	461a      	mov	r2, r3
 8011e56:	68f8      	ldr	r0, [r7, #12]
 8011e58:	f7ff ff4c 	bl	8011cf4 <udp_bind>
 8011e5c:	4603      	mov	r3, r0
 8011e5e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8011e60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d002      	beq.n	8011e6e <udp_connect+0x6a>
      return err;
 8011e68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011e6c:	e02a      	b.n	8011ec4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8011e6e:	68bb      	ldr	r3, [r7, #8]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d002      	beq.n	8011e7a <udp_connect+0x76>
 8011e74:	68bb      	ldr	r3, [r7, #8]
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	e000      	b.n	8011e7c <udp_connect+0x78>
 8011e7a:	2300      	movs	r3, #0
 8011e7c:	68fa      	ldr	r2, [r7, #12]
 8011e7e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	88fa      	ldrh	r2, [r7, #6]
 8011e84:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	7c1b      	ldrb	r3, [r3, #16]
 8011e8a:	f043 0304 	orr.w	r3, r3, #4
 8011e8e:	b2da      	uxtb	r2, r3
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011e94:	4b11      	ldr	r3, [pc, #68]	@ (8011edc <udp_connect+0xd8>)
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	617b      	str	r3, [r7, #20]
 8011e9a:	e008      	b.n	8011eae <udp_connect+0xaa>
    if (pcb == ipcb) {
 8011e9c:	68fa      	ldr	r2, [r7, #12]
 8011e9e:	697b      	ldr	r3, [r7, #20]
 8011ea0:	429a      	cmp	r2, r3
 8011ea2:	d101      	bne.n	8011ea8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	e00d      	b.n	8011ec4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011ea8:	697b      	ldr	r3, [r7, #20]
 8011eaa:	68db      	ldr	r3, [r3, #12]
 8011eac:	617b      	str	r3, [r7, #20]
 8011eae:	697b      	ldr	r3, [r7, #20]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d1f3      	bne.n	8011e9c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8011eb4:	4b09      	ldr	r3, [pc, #36]	@ (8011edc <udp_connect+0xd8>)
 8011eb6:	681a      	ldr	r2, [r3, #0]
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8011ebc:	4a07      	ldr	r2, [pc, #28]	@ (8011edc <udp_connect+0xd8>)
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8011ec2:	2300      	movs	r3, #0
}
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	3718      	adds	r7, #24
 8011ec8:	46bd      	mov	sp, r7
 8011eca:	bd80      	pop	{r7, pc}
 8011ecc:	0801a634 	.word	0x0801a634
 8011ed0:	0801a914 	.word	0x0801a914
 8011ed4:	0801a688 	.word	0x0801a688
 8011ed8:	0801a930 	.word	0x0801a930
 8011edc:	2000cb1c 	.word	0x2000cb1c

08011ee0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b084      	sub	sp, #16
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	60f8      	str	r0, [r7, #12]
 8011ee8:	60b9      	str	r1, [r7, #8]
 8011eea:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d107      	bne.n	8011f02 <udp_recv+0x22>
 8011ef2:	4b08      	ldr	r3, [pc, #32]	@ (8011f14 <udp_recv+0x34>)
 8011ef4:	f240 428a 	movw	r2, #1162	@ 0x48a
 8011ef8:	4907      	ldr	r1, [pc, #28]	@ (8011f18 <udp_recv+0x38>)
 8011efa:	4808      	ldr	r0, [pc, #32]	@ (8011f1c <udp_recv+0x3c>)
 8011efc:	f005 f8ac 	bl	8017058 <iprintf>
 8011f00:	e005      	b.n	8011f0e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	68ba      	ldr	r2, [r7, #8]
 8011f06:	621a      	str	r2, [r3, #32]
  pcb->recv_arg = recv_arg;
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	687a      	ldr	r2, [r7, #4]
 8011f0c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8011f0e:	3710      	adds	r7, #16
 8011f10:	46bd      	mov	sp, r7
 8011f12:	bd80      	pop	{r7, pc}
 8011f14:	0801a634 	.word	0x0801a634
 8011f18:	0801a968 	.word	0x0801a968
 8011f1c:	0801a688 	.word	0x0801a688

08011f20 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b084      	sub	sp, #16
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d107      	bne.n	8011f3e <udp_remove+0x1e>
 8011f2e:	4b19      	ldr	r3, [pc, #100]	@ (8011f94 <udp_remove+0x74>)
 8011f30:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8011f34:	4918      	ldr	r1, [pc, #96]	@ (8011f98 <udp_remove+0x78>)
 8011f36:	4819      	ldr	r0, [pc, #100]	@ (8011f9c <udp_remove+0x7c>)
 8011f38:	f005 f88e 	bl	8017058 <iprintf>
 8011f3c:	e026      	b.n	8011f8c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8011f3e:	4b18      	ldr	r3, [pc, #96]	@ (8011fa0 <udp_remove+0x80>)
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	687a      	ldr	r2, [r7, #4]
 8011f44:	429a      	cmp	r2, r3
 8011f46:	d105      	bne.n	8011f54 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8011f48:	4b15      	ldr	r3, [pc, #84]	@ (8011fa0 <udp_remove+0x80>)
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	68db      	ldr	r3, [r3, #12]
 8011f4e:	4a14      	ldr	r2, [pc, #80]	@ (8011fa0 <udp_remove+0x80>)
 8011f50:	6013      	str	r3, [r2, #0]
 8011f52:	e017      	b.n	8011f84 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011f54:	4b12      	ldr	r3, [pc, #72]	@ (8011fa0 <udp_remove+0x80>)
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	60fb      	str	r3, [r7, #12]
 8011f5a:	e010      	b.n	8011f7e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	68db      	ldr	r3, [r3, #12]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d009      	beq.n	8011f78 <udp_remove+0x58>
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	68db      	ldr	r3, [r3, #12]
 8011f68:	687a      	ldr	r2, [r7, #4]
 8011f6a:	429a      	cmp	r2, r3
 8011f6c:	d104      	bne.n	8011f78 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	68da      	ldr	r2, [r3, #12]
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	60da      	str	r2, [r3, #12]
        break;
 8011f76:	e005      	b.n	8011f84 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	68db      	ldr	r3, [r3, #12]
 8011f7c:	60fb      	str	r3, [r7, #12]
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d1eb      	bne.n	8011f5c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8011f84:	6879      	ldr	r1, [r7, #4]
 8011f86:	2000      	movs	r0, #0
 8011f88:	f7f8 fde6 	bl	800ab58 <memp_free>
}
 8011f8c:	3710      	adds	r7, #16
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	bd80      	pop	{r7, pc}
 8011f92:	bf00      	nop
 8011f94:	0801a634 	.word	0x0801a634
 8011f98:	0801a980 	.word	0x0801a980
 8011f9c:	0801a688 	.word	0x0801a688
 8011fa0:	2000cb1c 	.word	0x2000cb1c

08011fa4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b082      	sub	sp, #8
 8011fa8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8011faa:	2000      	movs	r0, #0
 8011fac:	f7f8 fd5e 	bl	800aa6c <memp_malloc>
 8011fb0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d00a      	beq.n	8011fce <udp_new+0x2a>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8011fb8:	2228      	movs	r2, #40	@ 0x28
 8011fba:	2100      	movs	r1, #0
 8011fbc:	6878      	ldr	r0, [r7, #4]
 8011fbe:	f005 f9dd 	bl	801737c <memset>
    pcb->ttl = UDP_TTL;
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	22ff      	movs	r2, #255	@ 0xff
 8011fc6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	22ff      	movs	r2, #255	@ 0xff
 8011fcc:	775a      	strb	r2, [r3, #29]
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8011fce:	687b      	ldr	r3, [r7, #4]
}
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	3708      	adds	r7, #8
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	bd80      	pop	{r7, pc}

08011fd8 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b084      	sub	sp, #16
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	4603      	mov	r3, r0
 8011fe0:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8011fe2:	f7ff ffdf 	bl	8011fa4 <udp_new>
 8011fe6:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8011fe8:	68fb      	ldr	r3, [r7, #12]
}
 8011fea:	4618      	mov	r0, r3
 8011fec:	3710      	adds	r7, #16
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	bd80      	pop	{r7, pc}
	...

08011ff4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011ff4:	b480      	push	{r7}
 8011ff6:	b085      	sub	sp, #20
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
 8011ffc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d01e      	beq.n	8012042 <udp_netif_ip_addr_changed+0x4e>
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	2b00      	cmp	r3, #0
 801200a:	d01a      	beq.n	8012042 <udp_netif_ip_addr_changed+0x4e>
 801200c:	683b      	ldr	r3, [r7, #0]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d017      	beq.n	8012042 <udp_netif_ip_addr_changed+0x4e>
 8012012:	683b      	ldr	r3, [r7, #0]
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	2b00      	cmp	r3, #0
 8012018:	d013      	beq.n	8012042 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801201a:	4b0d      	ldr	r3, [pc, #52]	@ (8012050 <udp_netif_ip_addr_changed+0x5c>)
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	60fb      	str	r3, [r7, #12]
 8012020:	e00c      	b.n	801203c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	681a      	ldr	r2, [r3, #0]
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	429a      	cmp	r2, r3
 801202c:	d103      	bne.n	8012036 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801202e:	683b      	ldr	r3, [r7, #0]
 8012030:	681a      	ldr	r2, [r3, #0]
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	68db      	ldr	r3, [r3, #12]
 801203a:	60fb      	str	r3, [r7, #12]
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d1ef      	bne.n	8012022 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012042:	bf00      	nop
 8012044:	3714      	adds	r7, #20
 8012046:	46bd      	mov	sp, r7
 8012048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801204c:	4770      	bx	lr
 801204e:	bf00      	nop
 8012050:	2000cb1c 	.word	0x2000cb1c

08012054 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8012054:	b580      	push	{r7, lr}
 8012056:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8012058:	4b20      	ldr	r3, [pc, #128]	@ (80120dc <dhcp_inc_pcb_refcount+0x88>)
 801205a:	781b      	ldrb	r3, [r3, #0]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d133      	bne.n	80120c8 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8012060:	4b1f      	ldr	r3, [pc, #124]	@ (80120e0 <dhcp_inc_pcb_refcount+0x8c>)
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d005      	beq.n	8012074 <dhcp_inc_pcb_refcount+0x20>
 8012068:	4b1e      	ldr	r3, [pc, #120]	@ (80120e4 <dhcp_inc_pcb_refcount+0x90>)
 801206a:	22e5      	movs	r2, #229	@ 0xe5
 801206c:	491e      	ldr	r1, [pc, #120]	@ (80120e8 <dhcp_inc_pcb_refcount+0x94>)
 801206e:	481f      	ldr	r0, [pc, #124]	@ (80120ec <dhcp_inc_pcb_refcount+0x98>)
 8012070:	f004 fff2 	bl	8017058 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8012074:	f7ff ff96 	bl	8011fa4 <udp_new>
 8012078:	4603      	mov	r3, r0
 801207a:	4a19      	ldr	r2, [pc, #100]	@ (80120e0 <dhcp_inc_pcb_refcount+0x8c>)
 801207c:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801207e:	4b18      	ldr	r3, [pc, #96]	@ (80120e0 <dhcp_inc_pcb_refcount+0x8c>)
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	2b00      	cmp	r3, #0
 8012084:	d102      	bne.n	801208c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8012086:	f04f 33ff 	mov.w	r3, #4294967295
 801208a:	e024      	b.n	80120d6 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801208c:	4b14      	ldr	r3, [pc, #80]	@ (80120e0 <dhcp_inc_pcb_refcount+0x8c>)
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	7a5a      	ldrb	r2, [r3, #9]
 8012092:	4b13      	ldr	r3, [pc, #76]	@ (80120e0 <dhcp_inc_pcb_refcount+0x8c>)
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	f042 0220 	orr.w	r2, r2, #32
 801209a:	b2d2      	uxtb	r2, r2
 801209c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801209e:	4b10      	ldr	r3, [pc, #64]	@ (80120e0 <dhcp_inc_pcb_refcount+0x8c>)
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	2244      	movs	r2, #68	@ 0x44
 80120a4:	4912      	ldr	r1, [pc, #72]	@ (80120f0 <dhcp_inc_pcb_refcount+0x9c>)
 80120a6:	4618      	mov	r0, r3
 80120a8:	f7ff fe24 	bl	8011cf4 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80120ac:	4b0c      	ldr	r3, [pc, #48]	@ (80120e0 <dhcp_inc_pcb_refcount+0x8c>)
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	2243      	movs	r2, #67	@ 0x43
 80120b2:	490f      	ldr	r1, [pc, #60]	@ (80120f0 <dhcp_inc_pcb_refcount+0x9c>)
 80120b4:	4618      	mov	r0, r3
 80120b6:	f7ff fea5 	bl	8011e04 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80120ba:	4b09      	ldr	r3, [pc, #36]	@ (80120e0 <dhcp_inc_pcb_refcount+0x8c>)
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	2200      	movs	r2, #0
 80120c0:	490c      	ldr	r1, [pc, #48]	@ (80120f4 <dhcp_inc_pcb_refcount+0xa0>)
 80120c2:	4618      	mov	r0, r3
 80120c4:	f7ff ff0c 	bl	8011ee0 <udp_recv>
  }

  dhcp_pcb_refcount++;
 80120c8:	4b04      	ldr	r3, [pc, #16]	@ (80120dc <dhcp_inc_pcb_refcount+0x88>)
 80120ca:	781b      	ldrb	r3, [r3, #0]
 80120cc:	3301      	adds	r3, #1
 80120ce:	b2da      	uxtb	r2, r3
 80120d0:	4b02      	ldr	r3, [pc, #8]	@ (80120dc <dhcp_inc_pcb_refcount+0x88>)
 80120d2:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80120d4:	2300      	movs	r3, #0
}
 80120d6:	4618      	mov	r0, r3
 80120d8:	bd80      	pop	{r7, pc}
 80120da:	bf00      	nop
 80120dc:	2000cb4c 	.word	0x2000cb4c
 80120e0:	2000cb48 	.word	0x2000cb48
 80120e4:	0801a998 	.word	0x0801a998
 80120e8:	0801a9d0 	.word	0x0801a9d0
 80120ec:	0801a9f8 	.word	0x0801a9f8
 80120f0:	0801b8d4 	.word	0x0801b8d4
 80120f4:	08013a81 	.word	0x08013a81

080120f8 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80120f8:	b580      	push	{r7, lr}
 80120fa:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80120fc:	4b0e      	ldr	r3, [pc, #56]	@ (8012138 <dhcp_dec_pcb_refcount+0x40>)
 80120fe:	781b      	ldrb	r3, [r3, #0]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d105      	bne.n	8012110 <dhcp_dec_pcb_refcount+0x18>
 8012104:	4b0d      	ldr	r3, [pc, #52]	@ (801213c <dhcp_dec_pcb_refcount+0x44>)
 8012106:	22ff      	movs	r2, #255	@ 0xff
 8012108:	490d      	ldr	r1, [pc, #52]	@ (8012140 <dhcp_dec_pcb_refcount+0x48>)
 801210a:	480e      	ldr	r0, [pc, #56]	@ (8012144 <dhcp_dec_pcb_refcount+0x4c>)
 801210c:	f004 ffa4 	bl	8017058 <iprintf>
  dhcp_pcb_refcount--;
 8012110:	4b09      	ldr	r3, [pc, #36]	@ (8012138 <dhcp_dec_pcb_refcount+0x40>)
 8012112:	781b      	ldrb	r3, [r3, #0]
 8012114:	3b01      	subs	r3, #1
 8012116:	b2da      	uxtb	r2, r3
 8012118:	4b07      	ldr	r3, [pc, #28]	@ (8012138 <dhcp_dec_pcb_refcount+0x40>)
 801211a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801211c:	4b06      	ldr	r3, [pc, #24]	@ (8012138 <dhcp_dec_pcb_refcount+0x40>)
 801211e:	781b      	ldrb	r3, [r3, #0]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d107      	bne.n	8012134 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8012124:	4b08      	ldr	r3, [pc, #32]	@ (8012148 <dhcp_dec_pcb_refcount+0x50>)
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	4618      	mov	r0, r3
 801212a:	f7ff fef9 	bl	8011f20 <udp_remove>
    dhcp_pcb = NULL;
 801212e:	4b06      	ldr	r3, [pc, #24]	@ (8012148 <dhcp_dec_pcb_refcount+0x50>)
 8012130:	2200      	movs	r2, #0
 8012132:	601a      	str	r2, [r3, #0]
  }
}
 8012134:	bf00      	nop
 8012136:	bd80      	pop	{r7, pc}
 8012138:	2000cb4c 	.word	0x2000cb4c
 801213c:	0801a998 	.word	0x0801a998
 8012140:	0801aa20 	.word	0x0801aa20
 8012144:	0801a9f8 	.word	0x0801a9f8
 8012148:	2000cb48 	.word	0x2000cb48

0801214c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801214c:	b580      	push	{r7, lr}
 801214e:	b084      	sub	sp, #16
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012158:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801215a:	210c      	movs	r1, #12
 801215c:	68f8      	ldr	r0, [r7, #12]
 801215e:	f001 f875 	bl	801324c <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8012162:	4b06      	ldr	r3, [pc, #24]	@ (801217c <dhcp_handle_nak+0x30>)
 8012164:	4a05      	ldr	r2, [pc, #20]	@ (801217c <dhcp_handle_nak+0x30>)
 8012166:	4905      	ldr	r1, [pc, #20]	@ (801217c <dhcp_handle_nak+0x30>)
 8012168:	6878      	ldr	r0, [r7, #4]
 801216a:	f7f8 fed7 	bl	800af1c <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801216e:	6878      	ldr	r0, [r7, #4]
 8012170:	f000 fc50 	bl	8012a14 <dhcp_discover>
}
 8012174:	bf00      	nop
 8012176:	3710      	adds	r7, #16
 8012178:	46bd      	mov	sp, r7
 801217a:	bd80      	pop	{r7, pc}
 801217c:	0801b8d4 	.word	0x0801b8d4

08012180 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8012180:	b580      	push	{r7, lr}
 8012182:	b084      	sub	sp, #16
 8012184:	af00      	add	r7, sp, #0
 8012186:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801218c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801218e:	2108      	movs	r1, #8
 8012190:	68f8      	ldr	r0, [r7, #12]
 8012192:	f001 f85b 	bl	801324c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	331c      	adds	r3, #28
 801219a:	2200      	movs	r2, #0
 801219c:	4619      	mov	r1, r3
 801219e:	6878      	ldr	r0, [r7, #4]
 80121a0:	f002 fbb8 	bl	8014914 <etharp_query>
 80121a4:	4603      	mov	r3, r0
 80121a6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	799b      	ldrb	r3, [r3, #6]
 80121ac:	2bff      	cmp	r3, #255	@ 0xff
 80121ae:	d005      	beq.n	80121bc <dhcp_check+0x3c>
    dhcp->tries++;
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	799b      	ldrb	r3, [r3, #6]
 80121b4:	3301      	adds	r3, #1
 80121b6:	b2da      	uxtb	r2, r3
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80121bc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80121c0:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80121c2:	893b      	ldrh	r3, [r7, #8]
 80121c4:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80121c8:	4a06      	ldr	r2, [pc, #24]	@ (80121e4 <dhcp_check+0x64>)
 80121ca:	fb82 1203 	smull	r1, r2, r2, r3
 80121ce:	1152      	asrs	r2, r2, #5
 80121d0:	17db      	asrs	r3, r3, #31
 80121d2:	1ad3      	subs	r3, r2, r3
 80121d4:	b29a      	uxth	r2, r3
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80121da:	bf00      	nop
 80121dc:	3710      	adds	r7, #16
 80121de:	46bd      	mov	sp, r7
 80121e0:	bd80      	pop	{r7, pc}
 80121e2:	bf00      	nop
 80121e4:	10624dd3 	.word	0x10624dd3

080121e8 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b084      	sub	sp, #16
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	6078      	str	r0, [r7, #4]
 80121f0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80121f6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80121f8:	4b0c      	ldr	r3, [pc, #48]	@ (801222c <dhcp_handle_offer+0x44>)
 80121fa:	789b      	ldrb	r3, [r3, #2]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d011      	beq.n	8012224 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	2200      	movs	r2, #0
 8012204:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8012206:	4b0a      	ldr	r3, [pc, #40]	@ (8012230 <dhcp_handle_offer+0x48>)
 8012208:	689b      	ldr	r3, [r3, #8]
 801220a:	4618      	mov	r0, r3
 801220c:	f7f7 fefb 	bl	800a006 <lwip_htonl>
 8012210:	4602      	mov	r2, r0
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8012216:	683b      	ldr	r3, [r7, #0]
 8012218:	691a      	ldr	r2, [r3, #16]
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801221e:	6878      	ldr	r0, [r7, #4]
 8012220:	f000 f808 	bl	8012234 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8012224:	bf00      	nop
 8012226:	3710      	adds	r7, #16
 8012228:	46bd      	mov	sp, r7
 801222a:	bd80      	pop	{r7, pc}
 801222c:	2000cb40 	.word	0x2000cb40
 8012230:	2000cb20 	.word	0x2000cb20

08012234 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8012234:	b5b0      	push	{r4, r5, r7, lr}
 8012236:	b08a      	sub	sp, #40	@ 0x28
 8012238:	af02      	add	r7, sp, #8
 801223a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d109      	bne.n	8012256 <dhcp_select+0x22>
 8012242:	4b75      	ldr	r3, [pc, #468]	@ (8012418 <dhcp_select+0x1e4>)
 8012244:	f240 1277 	movw	r2, #375	@ 0x177
 8012248:	4974      	ldr	r1, [pc, #464]	@ (801241c <dhcp_select+0x1e8>)
 801224a:	4875      	ldr	r0, [pc, #468]	@ (8012420 <dhcp_select+0x1ec>)
 801224c:	f004 ff04 	bl	8017058 <iprintf>
 8012250:	f06f 030f 	mvn.w	r3, #15
 8012254:	e0dc      	b.n	8012410 <dhcp_select+0x1dc>
  dhcp = netif_dhcp_data(netif);
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801225a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801225c:	69bb      	ldr	r3, [r7, #24]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d109      	bne.n	8012276 <dhcp_select+0x42>
 8012262:	4b6d      	ldr	r3, [pc, #436]	@ (8012418 <dhcp_select+0x1e4>)
 8012264:	f240 1279 	movw	r2, #377	@ 0x179
 8012268:	496e      	ldr	r1, [pc, #440]	@ (8012424 <dhcp_select+0x1f0>)
 801226a:	486d      	ldr	r0, [pc, #436]	@ (8012420 <dhcp_select+0x1ec>)
 801226c:	f004 fef4 	bl	8017058 <iprintf>
 8012270:	f06f 0305 	mvn.w	r3, #5
 8012274:	e0cc      	b.n	8012410 <dhcp_select+0x1dc>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8012276:	2101      	movs	r1, #1
 8012278:	69b8      	ldr	r0, [r7, #24]
 801227a:	f000 ffe7 	bl	801324c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801227e:	f107 030c 	add.w	r3, r7, #12
 8012282:	2203      	movs	r2, #3
 8012284:	69b9      	ldr	r1, [r7, #24]
 8012286:	6878      	ldr	r0, [r7, #4]
 8012288:	f001 fcc8 	bl	8013c1c <dhcp_create_msg>
 801228c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801228e:	697b      	ldr	r3, [r7, #20]
 8012290:	2b00      	cmp	r3, #0
 8012292:	f000 808e 	beq.w	80123b2 <dhcp_select+0x17e>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012296:	697b      	ldr	r3, [r7, #20]
 8012298:	685b      	ldr	r3, [r3, #4]
 801229a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801229c:	89b8      	ldrh	r0, [r7, #12]
 801229e:	693b      	ldr	r3, [r7, #16]
 80122a0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80122a4:	2302      	movs	r3, #2
 80122a6:	2239      	movs	r2, #57	@ 0x39
 80122a8:	f000 ffea 	bl	8013280 <dhcp_option>
 80122ac:	4603      	mov	r3, r0
 80122ae:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80122b0:	89b8      	ldrh	r0, [r7, #12]
 80122b2:	693b      	ldr	r3, [r7, #16]
 80122b4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80122bc:	461a      	mov	r2, r3
 80122be:	f001 f839 	bl	8013334 <dhcp_option_short>
 80122c2:	4603      	mov	r3, r0
 80122c4:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80122c6:	89b8      	ldrh	r0, [r7, #12]
 80122c8:	693b      	ldr	r3, [r7, #16]
 80122ca:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80122ce:	2304      	movs	r3, #4
 80122d0:	2232      	movs	r2, #50	@ 0x32
 80122d2:	f000 ffd5 	bl	8013280 <dhcp_option>
 80122d6:	4603      	mov	r3, r0
 80122d8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80122da:	89bc      	ldrh	r4, [r7, #12]
 80122dc:	693b      	ldr	r3, [r7, #16]
 80122de:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80122e2:	69bb      	ldr	r3, [r7, #24]
 80122e4:	69db      	ldr	r3, [r3, #28]
 80122e6:	4618      	mov	r0, r3
 80122e8:	f7f7 fe8d 	bl	800a006 <lwip_htonl>
 80122ec:	4603      	mov	r3, r0
 80122ee:	461a      	mov	r2, r3
 80122f0:	4629      	mov	r1, r5
 80122f2:	4620      	mov	r0, r4
 80122f4:	f001 f850 	bl	8013398 <dhcp_option_long>
 80122f8:	4603      	mov	r3, r0
 80122fa:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80122fc:	89b8      	ldrh	r0, [r7, #12]
 80122fe:	693b      	ldr	r3, [r7, #16]
 8012300:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012304:	2304      	movs	r3, #4
 8012306:	2236      	movs	r2, #54	@ 0x36
 8012308:	f000 ffba 	bl	8013280 <dhcp_option>
 801230c:	4603      	mov	r3, r0
 801230e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8012310:	89bc      	ldrh	r4, [r7, #12]
 8012312:	693b      	ldr	r3, [r7, #16]
 8012314:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8012318:	69bb      	ldr	r3, [r7, #24]
 801231a:	699b      	ldr	r3, [r3, #24]
 801231c:	4618      	mov	r0, r3
 801231e:	f7f7 fe72 	bl	800a006 <lwip_htonl>
 8012322:	4603      	mov	r3, r0
 8012324:	461a      	mov	r2, r3
 8012326:	4629      	mov	r1, r5
 8012328:	4620      	mov	r0, r4
 801232a:	f001 f835 	bl	8013398 <dhcp_option_long>
 801232e:	4603      	mov	r3, r0
 8012330:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012332:	89b8      	ldrh	r0, [r7, #12]
 8012334:	693b      	ldr	r3, [r7, #16]
 8012336:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801233a:	2303      	movs	r3, #3
 801233c:	2237      	movs	r2, #55	@ 0x37
 801233e:	f000 ff9f 	bl	8013280 <dhcp_option>
 8012342:	4603      	mov	r3, r0
 8012344:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012346:	2300      	movs	r3, #0
 8012348:	77bb      	strb	r3, [r7, #30]
 801234a:	e00e      	b.n	801236a <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801234c:	89b8      	ldrh	r0, [r7, #12]
 801234e:	693b      	ldr	r3, [r7, #16]
 8012350:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012354:	7fbb      	ldrb	r3, [r7, #30]
 8012356:	4a34      	ldr	r2, [pc, #208]	@ (8012428 <dhcp_select+0x1f4>)
 8012358:	5cd3      	ldrb	r3, [r2, r3]
 801235a:	461a      	mov	r2, r3
 801235c:	f000 ffc4 	bl	80132e8 <dhcp_option_byte>
 8012360:	4603      	mov	r3, r0
 8012362:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012364:	7fbb      	ldrb	r3, [r7, #30]
 8012366:	3301      	adds	r3, #1
 8012368:	77bb      	strb	r3, [r7, #30]
 801236a:	7fbb      	ldrb	r3, [r7, #30]
 801236c:	2b02      	cmp	r3, #2
 801236e:	d9ed      	bls.n	801234c <dhcp_select+0x118>
    }

#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
 8012370:	89b8      	ldrh	r0, [r7, #12]
 8012372:	693b      	ldr	r3, [r7, #16]
 8012374:	33f0      	adds	r3, #240	@ 0xf0
 8012376:	687a      	ldr	r2, [r7, #4]
 8012378:	4619      	mov	r1, r3
 801237a:	f001 f851 	bl	8013420 <dhcp_option_hostname>
 801237e:	4603      	mov	r3, r0
 8012380:	81bb      	strh	r3, [r7, #12]
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012382:	89b8      	ldrh	r0, [r7, #12]
 8012384:	693b      	ldr	r3, [r7, #16]
 8012386:	33f0      	adds	r3, #240	@ 0xf0
 8012388:	697a      	ldr	r2, [r7, #20]
 801238a:	4619      	mov	r1, r3
 801238c:	f001 fd1c 	bl	8013dc8 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8012390:	4b26      	ldr	r3, [pc, #152]	@ (801242c <dhcp_select+0x1f8>)
 8012392:	6818      	ldr	r0, [r3, #0]
 8012394:	4b26      	ldr	r3, [pc, #152]	@ (8012430 <dhcp_select+0x1fc>)
 8012396:	9301      	str	r3, [sp, #4]
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	9300      	str	r3, [sp, #0]
 801239c:	2343      	movs	r3, #67	@ 0x43
 801239e:	4a25      	ldr	r2, [pc, #148]	@ (8012434 <dhcp_select+0x200>)
 80123a0:	6979      	ldr	r1, [r7, #20]
 80123a2:	f7ff fba5 	bl	8011af0 <udp_sendto_if_src>
 80123a6:	4603      	mov	r3, r0
 80123a8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80123aa:	6978      	ldr	r0, [r7, #20]
 80123ac:	f7f9 fb6a 	bl	800ba84 <pbuf_free>
 80123b0:	e001      	b.n	80123b6 <dhcp_select+0x182>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80123b2:	23ff      	movs	r3, #255	@ 0xff
 80123b4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80123b6:	69bb      	ldr	r3, [r7, #24]
 80123b8:	799b      	ldrb	r3, [r3, #6]
 80123ba:	2bff      	cmp	r3, #255	@ 0xff
 80123bc:	d005      	beq.n	80123ca <dhcp_select+0x196>
    dhcp->tries++;
 80123be:	69bb      	ldr	r3, [r7, #24]
 80123c0:	799b      	ldrb	r3, [r3, #6]
 80123c2:	3301      	adds	r3, #1
 80123c4:	b2da      	uxtb	r2, r3
 80123c6:	69bb      	ldr	r3, [r7, #24]
 80123c8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80123ca:	69bb      	ldr	r3, [r7, #24]
 80123cc:	799b      	ldrb	r3, [r3, #6]
 80123ce:	2b05      	cmp	r3, #5
 80123d0:	d80d      	bhi.n	80123ee <dhcp_select+0x1ba>
 80123d2:	69bb      	ldr	r3, [r7, #24]
 80123d4:	799b      	ldrb	r3, [r3, #6]
 80123d6:	461a      	mov	r2, r3
 80123d8:	2301      	movs	r3, #1
 80123da:	4093      	lsls	r3, r2
 80123dc:	b29b      	uxth	r3, r3
 80123de:	461a      	mov	r2, r3
 80123e0:	0152      	lsls	r2, r2, #5
 80123e2:	1ad2      	subs	r2, r2, r3
 80123e4:	0092      	lsls	r2, r2, #2
 80123e6:	4413      	add	r3, r2
 80123e8:	00db      	lsls	r3, r3, #3
 80123ea:	b29b      	uxth	r3, r3
 80123ec:	e001      	b.n	80123f2 <dhcp_select+0x1be>
 80123ee:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80123f2:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80123f4:	89fb      	ldrh	r3, [r7, #14]
 80123f6:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80123fa:	4a0f      	ldr	r2, [pc, #60]	@ (8012438 <dhcp_select+0x204>)
 80123fc:	fb82 1203 	smull	r1, r2, r2, r3
 8012400:	1152      	asrs	r2, r2, #5
 8012402:	17db      	asrs	r3, r3, #31
 8012404:	1ad3      	subs	r3, r2, r3
 8012406:	b29a      	uxth	r2, r3
 8012408:	69bb      	ldr	r3, [r7, #24]
 801240a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801240c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012410:	4618      	mov	r0, r3
 8012412:	3720      	adds	r7, #32
 8012414:	46bd      	mov	sp, r7
 8012416:	bdb0      	pop	{r4, r5, r7, pc}
 8012418:	0801a998 	.word	0x0801a998
 801241c:	0801aa44 	.word	0x0801aa44
 8012420:	0801a9f8 	.word	0x0801a9f8
 8012424:	0801aa60 	.word	0x0801aa60
 8012428:	20000034 	.word	0x20000034
 801242c:	2000cb48 	.word	0x2000cb48
 8012430:	0801b8d4 	.word	0x0801b8d4
 8012434:	0801b8d8 	.word	0x0801b8d8
 8012438:	10624dd3 	.word	0x10624dd3

0801243c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801243c:	b580      	push	{r7, lr}
 801243e:	b082      	sub	sp, #8
 8012440:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8012442:	4b27      	ldr	r3, [pc, #156]	@ (80124e0 <dhcp_coarse_tmr+0xa4>)
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	607b      	str	r3, [r7, #4]
 8012448:	e042      	b.n	80124d0 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801244e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8012450:	683b      	ldr	r3, [r7, #0]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d039      	beq.n	80124ca <dhcp_coarse_tmr+0x8e>
 8012456:	683b      	ldr	r3, [r7, #0]
 8012458:	795b      	ldrb	r3, [r3, #5]
 801245a:	2b00      	cmp	r3, #0
 801245c:	d035      	beq.n	80124ca <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801245e:	683b      	ldr	r3, [r7, #0]
 8012460:	8a9b      	ldrh	r3, [r3, #20]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d012      	beq.n	801248c <dhcp_coarse_tmr+0x50>
 8012466:	683b      	ldr	r3, [r7, #0]
 8012468:	8a5b      	ldrh	r3, [r3, #18]
 801246a:	3301      	adds	r3, #1
 801246c:	b29a      	uxth	r2, r3
 801246e:	683b      	ldr	r3, [r7, #0]
 8012470:	825a      	strh	r2, [r3, #18]
 8012472:	683b      	ldr	r3, [r7, #0]
 8012474:	8a5a      	ldrh	r2, [r3, #18]
 8012476:	683b      	ldr	r3, [r7, #0]
 8012478:	8a9b      	ldrh	r3, [r3, #20]
 801247a:	429a      	cmp	r2, r3
 801247c:	d106      	bne.n	801248c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801247e:	6878      	ldr	r0, [r7, #4]
 8012480:	f000 fe4a 	bl	8013118 <dhcp_release_and_stop>
        dhcp_start(netif);
 8012484:	6878      	ldr	r0, [r7, #4]
 8012486:	f000 f969 	bl	801275c <dhcp_start>
 801248a:	e01e      	b.n	80124ca <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801248c:	683b      	ldr	r3, [r7, #0]
 801248e:	8a1b      	ldrh	r3, [r3, #16]
 8012490:	2b00      	cmp	r3, #0
 8012492:	d00b      	beq.n	80124ac <dhcp_coarse_tmr+0x70>
 8012494:	683b      	ldr	r3, [r7, #0]
 8012496:	8a1b      	ldrh	r3, [r3, #16]
 8012498:	1e5a      	subs	r2, r3, #1
 801249a:	b291      	uxth	r1, r2
 801249c:	683a      	ldr	r2, [r7, #0]
 801249e:	8211      	strh	r1, [r2, #16]
 80124a0:	2b01      	cmp	r3, #1
 80124a2:	d103      	bne.n	80124ac <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80124a4:	6878      	ldr	r0, [r7, #4]
 80124a6:	f000 f8c6 	bl	8012636 <dhcp_t2_timeout>
 80124aa:	e00e      	b.n	80124ca <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80124ac:	683b      	ldr	r3, [r7, #0]
 80124ae:	89db      	ldrh	r3, [r3, #14]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d00a      	beq.n	80124ca <dhcp_coarse_tmr+0x8e>
 80124b4:	683b      	ldr	r3, [r7, #0]
 80124b6:	89db      	ldrh	r3, [r3, #14]
 80124b8:	1e5a      	subs	r2, r3, #1
 80124ba:	b291      	uxth	r1, r2
 80124bc:	683a      	ldr	r2, [r7, #0]
 80124be:	81d1      	strh	r1, [r2, #14]
 80124c0:	2b01      	cmp	r3, #1
 80124c2:	d102      	bne.n	80124ca <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80124c4:	6878      	ldr	r0, [r7, #4]
 80124c6:	f000 f888 	bl	80125da <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	607b      	str	r3, [r7, #4]
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d1b9      	bne.n	801244a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80124d6:	bf00      	nop
 80124d8:	bf00      	nop
 80124da:	3708      	adds	r7, #8
 80124dc:	46bd      	mov	sp, r7
 80124de:	bd80      	pop	{r7, pc}
 80124e0:	2000cab4 	.word	0x2000cab4

080124e4 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80124e4:	b580      	push	{r7, lr}
 80124e6:	b082      	sub	sp, #8
 80124e8:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80124ea:	4b16      	ldr	r3, [pc, #88]	@ (8012544 <dhcp_fine_tmr+0x60>)
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	607b      	str	r3, [r7, #4]
 80124f0:	e020      	b.n	8012534 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80124f6:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80124f8:	683b      	ldr	r3, [r7, #0]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d017      	beq.n	801252e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80124fe:	683b      	ldr	r3, [r7, #0]
 8012500:	891b      	ldrh	r3, [r3, #8]
 8012502:	2b01      	cmp	r3, #1
 8012504:	d906      	bls.n	8012514 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8012506:	683b      	ldr	r3, [r7, #0]
 8012508:	891b      	ldrh	r3, [r3, #8]
 801250a:	3b01      	subs	r3, #1
 801250c:	b29a      	uxth	r2, r3
 801250e:	683b      	ldr	r3, [r7, #0]
 8012510:	811a      	strh	r2, [r3, #8]
 8012512:	e00c      	b.n	801252e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8012514:	683b      	ldr	r3, [r7, #0]
 8012516:	891b      	ldrh	r3, [r3, #8]
 8012518:	2b01      	cmp	r3, #1
 801251a:	d108      	bne.n	801252e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801251c:	683b      	ldr	r3, [r7, #0]
 801251e:	891b      	ldrh	r3, [r3, #8]
 8012520:	3b01      	subs	r3, #1
 8012522:	b29a      	uxth	r2, r3
 8012524:	683b      	ldr	r3, [r7, #0]
 8012526:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8012528:	6878      	ldr	r0, [r7, #4]
 801252a:	f000 f80d 	bl	8012548 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	607b      	str	r3, [r7, #4]
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d1db      	bne.n	80124f2 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801253a:	bf00      	nop
 801253c:	bf00      	nop
 801253e:	3708      	adds	r7, #8
 8012540:	46bd      	mov	sp, r7
 8012542:	bd80      	pop	{r7, pc}
 8012544:	2000cab4 	.word	0x2000cab4

08012548 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b084      	sub	sp, #16
 801254c:	af00      	add	r7, sp, #0
 801254e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012554:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	795b      	ldrb	r3, [r3, #5]
 801255a:	2b0c      	cmp	r3, #12
 801255c:	d003      	beq.n	8012566 <dhcp_timeout+0x1e>
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	795b      	ldrb	r3, [r3, #5]
 8012562:	2b06      	cmp	r3, #6
 8012564:	d103      	bne.n	801256e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8012566:	6878      	ldr	r0, [r7, #4]
 8012568:	f000 fa54 	bl	8012a14 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801256c:	e031      	b.n	80125d2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	795b      	ldrb	r3, [r3, #5]
 8012572:	2b01      	cmp	r3, #1
 8012574:	d10e      	bne.n	8012594 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	799b      	ldrb	r3, [r3, #6]
 801257a:	2b05      	cmp	r3, #5
 801257c:	d803      	bhi.n	8012586 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801257e:	6878      	ldr	r0, [r7, #4]
 8012580:	f7ff fe58 	bl	8012234 <dhcp_select>
}
 8012584:	e025      	b.n	80125d2 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8012586:	6878      	ldr	r0, [r7, #4]
 8012588:	f000 fdc6 	bl	8013118 <dhcp_release_and_stop>
      dhcp_start(netif);
 801258c:	6878      	ldr	r0, [r7, #4]
 801258e:	f000 f8e5 	bl	801275c <dhcp_start>
}
 8012592:	e01e      	b.n	80125d2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	795b      	ldrb	r3, [r3, #5]
 8012598:	2b08      	cmp	r3, #8
 801259a:	d10b      	bne.n	80125b4 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	799b      	ldrb	r3, [r3, #6]
 80125a0:	2b01      	cmp	r3, #1
 80125a2:	d803      	bhi.n	80125ac <dhcp_timeout+0x64>
      dhcp_check(netif);
 80125a4:	6878      	ldr	r0, [r7, #4]
 80125a6:	f7ff fdeb 	bl	8012180 <dhcp_check>
}
 80125aa:	e012      	b.n	80125d2 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80125ac:	6878      	ldr	r0, [r7, #4]
 80125ae:	f000 fad3 	bl	8012b58 <dhcp_bind>
}
 80125b2:	e00e      	b.n	80125d2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	795b      	ldrb	r3, [r3, #5]
 80125b8:	2b03      	cmp	r3, #3
 80125ba:	d10a      	bne.n	80125d2 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	799b      	ldrb	r3, [r3, #6]
 80125c0:	2b01      	cmp	r3, #1
 80125c2:	d803      	bhi.n	80125cc <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80125c4:	6878      	ldr	r0, [r7, #4]
 80125c6:	f000 fce9 	bl	8012f9c <dhcp_reboot>
}
 80125ca:	e002      	b.n	80125d2 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80125cc:	6878      	ldr	r0, [r7, #4]
 80125ce:	f000 fa21 	bl	8012a14 <dhcp_discover>
}
 80125d2:	bf00      	nop
 80125d4:	3710      	adds	r7, #16
 80125d6:	46bd      	mov	sp, r7
 80125d8:	bd80      	pop	{r7, pc}

080125da <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80125da:	b580      	push	{r7, lr}
 80125dc:	b084      	sub	sp, #16
 80125de:	af00      	add	r7, sp, #0
 80125e0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80125e6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	795b      	ldrb	r3, [r3, #5]
 80125ec:	2b01      	cmp	r3, #1
 80125ee:	d007      	beq.n	8012600 <dhcp_t1_timeout+0x26>
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	795b      	ldrb	r3, [r3, #5]
 80125f4:	2b0a      	cmp	r3, #10
 80125f6:	d003      	beq.n	8012600 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80125fc:	2b05      	cmp	r3, #5
 80125fe:	d116      	bne.n	801262e <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8012600:	6878      	ldr	r0, [r7, #4]
 8012602:	f000 fb83 	bl	8012d0c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	899b      	ldrh	r3, [r3, #12]
 801260a:	461a      	mov	r2, r3
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	8a5b      	ldrh	r3, [r3, #18]
 8012610:	1ad3      	subs	r3, r2, r3
 8012612:	2b01      	cmp	r3, #1
 8012614:	dd0b      	ble.n	801262e <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	899b      	ldrh	r3, [r3, #12]
 801261a:	461a      	mov	r2, r3
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	8a5b      	ldrh	r3, [r3, #18]
 8012620:	1ad3      	subs	r3, r2, r3
 8012622:	0fda      	lsrs	r2, r3, #31
 8012624:	4413      	add	r3, r2
 8012626:	105b      	asrs	r3, r3, #1
 8012628:	b29a      	uxth	r2, r3
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801262e:	bf00      	nop
 8012630:	3710      	adds	r7, #16
 8012632:	46bd      	mov	sp, r7
 8012634:	bd80      	pop	{r7, pc}

08012636 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8012636:	b580      	push	{r7, lr}
 8012638:	b084      	sub	sp, #16
 801263a:	af00      	add	r7, sp, #0
 801263c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012642:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	795b      	ldrb	r3, [r3, #5]
 8012648:	2b01      	cmp	r3, #1
 801264a:	d00b      	beq.n	8012664 <dhcp_t2_timeout+0x2e>
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	795b      	ldrb	r3, [r3, #5]
 8012650:	2b0a      	cmp	r3, #10
 8012652:	d007      	beq.n	8012664 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012658:	2b05      	cmp	r3, #5
 801265a:	d003      	beq.n	8012664 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	795b      	ldrb	r3, [r3, #5]
 8012660:	2b04      	cmp	r3, #4
 8012662:	d116      	bne.n	8012692 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8012664:	6878      	ldr	r0, [r7, #4]
 8012666:	f000 fbf5 	bl	8012e54 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	8a9b      	ldrh	r3, [r3, #20]
 801266e:	461a      	mov	r2, r3
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	8a5b      	ldrh	r3, [r3, #18]
 8012674:	1ad3      	subs	r3, r2, r3
 8012676:	2b01      	cmp	r3, #1
 8012678:	dd0b      	ble.n	8012692 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	8a9b      	ldrh	r3, [r3, #20]
 801267e:	461a      	mov	r2, r3
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	8a5b      	ldrh	r3, [r3, #18]
 8012684:	1ad3      	subs	r3, r2, r3
 8012686:	0fda      	lsrs	r2, r3, #31
 8012688:	4413      	add	r3, r2
 801268a:	105b      	asrs	r3, r3, #1
 801268c:	b29a      	uxth	r2, r3
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8012692:	bf00      	nop
 8012694:	3710      	adds	r7, #16
 8012696:	46bd      	mov	sp, r7
 8012698:	bd80      	pop	{r7, pc}
	...

0801269c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801269c:	b580      	push	{r7, lr}
 801269e:	b084      	sub	sp, #16
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]
 80126a4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80126aa:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	2200      	movs	r2, #0
 80126b0:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	2200      	movs	r2, #0
 80126b6:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80126b8:	4b26      	ldr	r3, [pc, #152]	@ (8012754 <dhcp_handle_ack+0xb8>)
 80126ba:	78db      	ldrb	r3, [r3, #3]
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d003      	beq.n	80126c8 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80126c0:	4b25      	ldr	r3, [pc, #148]	@ (8012758 <dhcp_handle_ack+0xbc>)
 80126c2:	68da      	ldr	r2, [r3, #12]
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80126c8:	4b22      	ldr	r3, [pc, #136]	@ (8012754 <dhcp_handle_ack+0xb8>)
 80126ca:	791b      	ldrb	r3, [r3, #4]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d004      	beq.n	80126da <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80126d0:	4b21      	ldr	r3, [pc, #132]	@ (8012758 <dhcp_handle_ack+0xbc>)
 80126d2:	691a      	ldr	r2, [r3, #16]
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80126d8:	e004      	b.n	80126e4 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80126de:	085a      	lsrs	r2, r3, #1
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80126e4:	4b1b      	ldr	r3, [pc, #108]	@ (8012754 <dhcp_handle_ack+0xb8>)
 80126e6:	795b      	ldrb	r3, [r3, #5]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d004      	beq.n	80126f6 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80126ec:	4b1a      	ldr	r3, [pc, #104]	@ (8012758 <dhcp_handle_ack+0xbc>)
 80126ee:	695a      	ldr	r2, [r3, #20]
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80126f4:	e007      	b.n	8012706 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80126fa:	4613      	mov	r3, r2
 80126fc:	00db      	lsls	r3, r3, #3
 80126fe:	1a9b      	subs	r3, r3, r2
 8012700:	08da      	lsrs	r2, r3, #3
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8012706:	683b      	ldr	r3, [r7, #0]
 8012708:	691a      	ldr	r2, [r3, #16]
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801270e:	4b11      	ldr	r3, [pc, #68]	@ (8012754 <dhcp_handle_ack+0xb8>)
 8012710:	799b      	ldrb	r3, [r3, #6]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d00b      	beq.n	801272e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8012716:	4b10      	ldr	r3, [pc, #64]	@ (8012758 <dhcp_handle_ack+0xbc>)
 8012718:	699b      	ldr	r3, [r3, #24]
 801271a:	4618      	mov	r0, r3
 801271c:	f7f7 fc73 	bl	800a006 <lwip_htonl>
 8012720:	4602      	mov	r2, r0
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	2201      	movs	r2, #1
 801272a:	71da      	strb	r2, [r3, #7]
 801272c:	e002      	b.n	8012734 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	2200      	movs	r2, #0
 8012732:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8012734:	4b07      	ldr	r3, [pc, #28]	@ (8012754 <dhcp_handle_ack+0xb8>)
 8012736:	79db      	ldrb	r3, [r3, #7]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d007      	beq.n	801274c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801273c:	4b06      	ldr	r3, [pc, #24]	@ (8012758 <dhcp_handle_ack+0xbc>)
 801273e:	69db      	ldr	r3, [r3, #28]
 8012740:	4618      	mov	r0, r3
 8012742:	f7f7 fc60 	bl	800a006 <lwip_htonl>
 8012746:	4602      	mov	r2, r0
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801274c:	bf00      	nop
 801274e:	3710      	adds	r7, #16
 8012750:	46bd      	mov	sp, r7
 8012752:	bd80      	pop	{r7, pc}
 8012754:	2000cb40 	.word	0x2000cb40
 8012758:	2000cb20 	.word	0x2000cb20

0801275c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801275c:	b580      	push	{r7, lr}
 801275e:	b084      	sub	sp, #16
 8012760:	af00      	add	r7, sp, #0
 8012762:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d109      	bne.n	801277e <dhcp_start+0x22>
 801276a:	4b37      	ldr	r3, [pc, #220]	@ (8012848 <dhcp_start+0xec>)
 801276c:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8012770:	4936      	ldr	r1, [pc, #216]	@ (801284c <dhcp_start+0xf0>)
 8012772:	4837      	ldr	r0, [pc, #220]	@ (8012850 <dhcp_start+0xf4>)
 8012774:	f004 fc70 	bl	8017058 <iprintf>
 8012778:	f06f 030f 	mvn.w	r3, #15
 801277c:	e060      	b.n	8012840 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012784:	f003 0301 	and.w	r3, r3, #1
 8012788:	2b00      	cmp	r3, #0
 801278a:	d109      	bne.n	80127a0 <dhcp_start+0x44>
 801278c:	4b2e      	ldr	r3, [pc, #184]	@ (8012848 <dhcp_start+0xec>)
 801278e:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 8012792:	4930      	ldr	r1, [pc, #192]	@ (8012854 <dhcp_start+0xf8>)
 8012794:	482e      	ldr	r0, [pc, #184]	@ (8012850 <dhcp_start+0xf4>)
 8012796:	f004 fc5f 	bl	8017058 <iprintf>
 801279a:	f06f 030f 	mvn.w	r3, #15
 801279e:	e04f      	b.n	8012840 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80127a4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80127aa:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 80127ae:	d202      	bcs.n	80127b6 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80127b0:	f04f 33ff 	mov.w	r3, #4294967295
 80127b4:	e044      	b.n	8012840 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d10d      	bne.n	80127d8 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80127bc:	2034      	movs	r0, #52	@ 0x34
 80127be:	f7f7 ffb1 	bl	800a724 <mem_malloc>
 80127c2:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d102      	bne.n	80127d0 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80127ca:	f04f 33ff 	mov.w	r3, #4294967295
 80127ce:	e037      	b.n	8012840 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	68fa      	ldr	r2, [r7, #12]
 80127d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80127d6:	e005      	b.n	80127e4 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	791b      	ldrb	r3, [r3, #4]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d001      	beq.n	80127e4 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80127e0:	f7ff fc8a 	bl	80120f8 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80127e4:	2234      	movs	r2, #52	@ 0x34
 80127e6:	2100      	movs	r1, #0
 80127e8:	68f8      	ldr	r0, [r7, #12]
 80127ea:	f004 fdc7 	bl	801737c <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80127ee:	f7ff fc31 	bl	8012054 <dhcp_inc_pcb_refcount>
 80127f2:	4603      	mov	r3, r0
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d002      	beq.n	80127fe <dhcp_start+0xa2>
    return ERR_MEM;
 80127f8:	f04f 33ff 	mov.w	r3, #4294967295
 80127fc:	e020      	b.n	8012840 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	2201      	movs	r2, #1
 8012802:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801280a:	f003 0304 	and.w	r3, r3, #4
 801280e:	2b00      	cmp	r3, #0
 8012810:	d105      	bne.n	801281e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8012812:	2102      	movs	r1, #2
 8012814:	68f8      	ldr	r0, [r7, #12]
 8012816:	f000 fd19 	bl	801324c <dhcp_set_state>
    return ERR_OK;
 801281a:	2300      	movs	r3, #0
 801281c:	e010      	b.n	8012840 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801281e:	6878      	ldr	r0, [r7, #4]
 8012820:	f000 f8f8 	bl	8012a14 <dhcp_discover>
 8012824:	4603      	mov	r3, r0
 8012826:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8012828:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d005      	beq.n	801283c <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8012830:	6878      	ldr	r0, [r7, #4]
 8012832:	f000 fc71 	bl	8013118 <dhcp_release_and_stop>
    return ERR_MEM;
 8012836:	f04f 33ff 	mov.w	r3, #4294967295
 801283a:	e001      	b.n	8012840 <dhcp_start+0xe4>
  }
  return result;
 801283c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012840:	4618      	mov	r0, r3
 8012842:	3710      	adds	r7, #16
 8012844:	46bd      	mov	sp, r7
 8012846:	bd80      	pop	{r7, pc}
 8012848:	0801a998 	.word	0x0801a998
 801284c:	0801aa7c 	.word	0x0801aa7c
 8012850:	0801a9f8 	.word	0x0801a9f8
 8012854:	0801aac0 	.word	0x0801aac0

08012858 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8012858:	b580      	push	{r7, lr}
 801285a:	b084      	sub	sp, #16
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012864:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	2b00      	cmp	r3, #0
 801286a:	d025      	beq.n	80128b8 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	795b      	ldrb	r3, [r3, #5]
 8012870:	2b0a      	cmp	r3, #10
 8012872:	d008      	beq.n	8012886 <dhcp_network_changed+0x2e>
 8012874:	2b0a      	cmp	r3, #10
 8012876:	dc0d      	bgt.n	8012894 <dhcp_network_changed+0x3c>
 8012878:	2b00      	cmp	r3, #0
 801287a:	d01f      	beq.n	80128bc <dhcp_network_changed+0x64>
 801287c:	2b00      	cmp	r3, #0
 801287e:	db09      	blt.n	8012894 <dhcp_network_changed+0x3c>
 8012880:	3b03      	subs	r3, #3
 8012882:	2b02      	cmp	r3, #2
 8012884:	d806      	bhi.n	8012894 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	2200      	movs	r2, #0
 801288a:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 801288c:	6878      	ldr	r0, [r7, #4]
 801288e:	f000 fb85 	bl	8012f9c <dhcp_reboot>
      break;
 8012892:	e014      	b.n	80128be <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	795b      	ldrb	r3, [r3, #5]
 8012898:	2b0c      	cmp	r3, #12
 801289a:	d906      	bls.n	80128aa <dhcp_network_changed+0x52>
 801289c:	4b09      	ldr	r3, [pc, #36]	@ (80128c4 <dhcp_network_changed+0x6c>)
 801289e:	f240 326d 	movw	r2, #877	@ 0x36d
 80128a2:	4909      	ldr	r1, [pc, #36]	@ (80128c8 <dhcp_network_changed+0x70>)
 80128a4:	4809      	ldr	r0, [pc, #36]	@ (80128cc <dhcp_network_changed+0x74>)
 80128a6:	f004 fbd7 	bl	8017058 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	2200      	movs	r2, #0
 80128ae:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 80128b0:	6878      	ldr	r0, [r7, #4]
 80128b2:	f000 f8af 	bl	8012a14 <dhcp_discover>
      break;
 80128b6:	e002      	b.n	80128be <dhcp_network_changed+0x66>
    return;
 80128b8:	bf00      	nop
 80128ba:	e000      	b.n	80128be <dhcp_network_changed+0x66>
      break;
 80128bc:	bf00      	nop
  }
}
 80128be:	3710      	adds	r7, #16
 80128c0:	46bd      	mov	sp, r7
 80128c2:	bd80      	pop	{r7, pc}
 80128c4:	0801a998 	.word	0x0801a998
 80128c8:	0801aae4 	.word	0x0801aae4
 80128cc:	0801a9f8 	.word	0x0801a9f8

080128d0 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b084      	sub	sp, #16
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	6078      	str	r0, [r7, #4]
 80128d8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d107      	bne.n	80128f0 <dhcp_arp_reply+0x20>
 80128e0:	4b0e      	ldr	r3, [pc, #56]	@ (801291c <dhcp_arp_reply+0x4c>)
 80128e2:	f240 328b 	movw	r2, #907	@ 0x38b
 80128e6:	490e      	ldr	r1, [pc, #56]	@ (8012920 <dhcp_arp_reply+0x50>)
 80128e8:	480e      	ldr	r0, [pc, #56]	@ (8012924 <dhcp_arp_reply+0x54>)
 80128ea:	f004 fbb5 	bl	8017058 <iprintf>
 80128ee:	e012      	b.n	8012916 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80128f4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d00c      	beq.n	8012916 <dhcp_arp_reply+0x46>
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	795b      	ldrb	r3, [r3, #5]
 8012900:	2b08      	cmp	r3, #8
 8012902:	d108      	bne.n	8012916 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8012904:	683b      	ldr	r3, [r7, #0]
 8012906:	681a      	ldr	r2, [r3, #0]
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	69db      	ldr	r3, [r3, #28]
 801290c:	429a      	cmp	r2, r3
 801290e:	d102      	bne.n	8012916 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8012910:	6878      	ldr	r0, [r7, #4]
 8012912:	f000 f809 	bl	8012928 <dhcp_decline>
    }
  }
}
 8012916:	3710      	adds	r7, #16
 8012918:	46bd      	mov	sp, r7
 801291a:	bd80      	pop	{r7, pc}
 801291c:	0801a998 	.word	0x0801a998
 8012920:	0801aa7c 	.word	0x0801aa7c
 8012924:	0801a9f8 	.word	0x0801a9f8

08012928 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8012928:	b5b0      	push	{r4, r5, r7, lr}
 801292a:	b08a      	sub	sp, #40	@ 0x28
 801292c:	af02      	add	r7, sp, #8
 801292e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012934:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8012936:	210c      	movs	r1, #12
 8012938:	69b8      	ldr	r0, [r7, #24]
 801293a:	f000 fc87 	bl	801324c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801293e:	f107 030c 	add.w	r3, r7, #12
 8012942:	2204      	movs	r2, #4
 8012944:	69b9      	ldr	r1, [r7, #24]
 8012946:	6878      	ldr	r0, [r7, #4]
 8012948:	f001 f968 	bl	8013c1c <dhcp_create_msg>
 801294c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801294e:	697b      	ldr	r3, [r7, #20]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d035      	beq.n	80129c0 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012954:	697b      	ldr	r3, [r7, #20]
 8012956:	685b      	ldr	r3, [r3, #4]
 8012958:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801295a:	89b8      	ldrh	r0, [r7, #12]
 801295c:	693b      	ldr	r3, [r7, #16]
 801295e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012962:	2304      	movs	r3, #4
 8012964:	2232      	movs	r2, #50	@ 0x32
 8012966:	f000 fc8b 	bl	8013280 <dhcp_option>
 801296a:	4603      	mov	r3, r0
 801296c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801296e:	89bc      	ldrh	r4, [r7, #12]
 8012970:	693b      	ldr	r3, [r7, #16]
 8012972:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8012976:	69bb      	ldr	r3, [r7, #24]
 8012978:	69db      	ldr	r3, [r3, #28]
 801297a:	4618      	mov	r0, r3
 801297c:	f7f7 fb43 	bl	800a006 <lwip_htonl>
 8012980:	4603      	mov	r3, r0
 8012982:	461a      	mov	r2, r3
 8012984:	4629      	mov	r1, r5
 8012986:	4620      	mov	r0, r4
 8012988:	f000 fd06 	bl	8013398 <dhcp_option_long>
 801298c:	4603      	mov	r3, r0
 801298e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012990:	89b8      	ldrh	r0, [r7, #12]
 8012992:	693b      	ldr	r3, [r7, #16]
 8012994:	33f0      	adds	r3, #240	@ 0xf0
 8012996:	697a      	ldr	r2, [r7, #20]
 8012998:	4619      	mov	r1, r3
 801299a:	f001 fa15 	bl	8013dc8 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801299e:	4b19      	ldr	r3, [pc, #100]	@ (8012a04 <dhcp_decline+0xdc>)
 80129a0:	6818      	ldr	r0, [r3, #0]
 80129a2:	4b19      	ldr	r3, [pc, #100]	@ (8012a08 <dhcp_decline+0xe0>)
 80129a4:	9301      	str	r3, [sp, #4]
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	9300      	str	r3, [sp, #0]
 80129aa:	2343      	movs	r3, #67	@ 0x43
 80129ac:	4a17      	ldr	r2, [pc, #92]	@ (8012a0c <dhcp_decline+0xe4>)
 80129ae:	6979      	ldr	r1, [r7, #20]
 80129b0:	f7ff f89e 	bl	8011af0 <udp_sendto_if_src>
 80129b4:	4603      	mov	r3, r0
 80129b6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80129b8:	6978      	ldr	r0, [r7, #20]
 80129ba:	f7f9 f863 	bl	800ba84 <pbuf_free>
 80129be:	e001      	b.n	80129c4 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80129c0:	23ff      	movs	r3, #255	@ 0xff
 80129c2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80129c4:	69bb      	ldr	r3, [r7, #24]
 80129c6:	799b      	ldrb	r3, [r3, #6]
 80129c8:	2bff      	cmp	r3, #255	@ 0xff
 80129ca:	d005      	beq.n	80129d8 <dhcp_decline+0xb0>
    dhcp->tries++;
 80129cc:	69bb      	ldr	r3, [r7, #24]
 80129ce:	799b      	ldrb	r3, [r3, #6]
 80129d0:	3301      	adds	r3, #1
 80129d2:	b2da      	uxtb	r2, r3
 80129d4:	69bb      	ldr	r3, [r7, #24]
 80129d6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80129d8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80129dc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80129de:	89fb      	ldrh	r3, [r7, #14]
 80129e0:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80129e4:	4a0a      	ldr	r2, [pc, #40]	@ (8012a10 <dhcp_decline+0xe8>)
 80129e6:	fb82 1203 	smull	r1, r2, r2, r3
 80129ea:	1152      	asrs	r2, r2, #5
 80129ec:	17db      	asrs	r3, r3, #31
 80129ee:	1ad3      	subs	r3, r2, r3
 80129f0:	b29a      	uxth	r2, r3
 80129f2:	69bb      	ldr	r3, [r7, #24]
 80129f4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80129f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80129fa:	4618      	mov	r0, r3
 80129fc:	3720      	adds	r7, #32
 80129fe:	46bd      	mov	sp, r7
 8012a00:	bdb0      	pop	{r4, r5, r7, pc}
 8012a02:	bf00      	nop
 8012a04:	2000cb48 	.word	0x2000cb48
 8012a08:	0801b8d4 	.word	0x0801b8d4
 8012a0c:	0801b8d8 	.word	0x0801b8d8
 8012a10:	10624dd3 	.word	0x10624dd3

08012a14 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b08a      	sub	sp, #40	@ 0x28
 8012a18:	af02      	add	r7, sp, #8
 8012a1a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a20:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8012a22:	2300      	movs	r3, #0
 8012a24:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8012a26:	69bb      	ldr	r3, [r7, #24]
 8012a28:	2200      	movs	r2, #0
 8012a2a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8012a2c:	2106      	movs	r1, #6
 8012a2e:	69b8      	ldr	r0, [r7, #24]
 8012a30:	f000 fc0c 	bl	801324c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8012a34:	f107 0308 	add.w	r3, r7, #8
 8012a38:	2201      	movs	r2, #1
 8012a3a:	69b9      	ldr	r1, [r7, #24]
 8012a3c:	6878      	ldr	r0, [r7, #4]
 8012a3e:	f001 f8ed 	bl	8013c1c <dhcp_create_msg>
 8012a42:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8012a44:	693b      	ldr	r3, [r7, #16]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d04b      	beq.n	8012ae2 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012a4a:	693b      	ldr	r3, [r7, #16]
 8012a4c:	685b      	ldr	r3, [r3, #4]
 8012a4e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012a50:	8938      	ldrh	r0, [r7, #8]
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012a58:	2302      	movs	r3, #2
 8012a5a:	2239      	movs	r2, #57	@ 0x39
 8012a5c:	f000 fc10 	bl	8013280 <dhcp_option>
 8012a60:	4603      	mov	r3, r0
 8012a62:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012a64:	8938      	ldrh	r0, [r7, #8]
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8012a70:	461a      	mov	r2, r3
 8012a72:	f000 fc5f 	bl	8013334 <dhcp_option_short>
 8012a76:	4603      	mov	r3, r0
 8012a78:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012a7a:	8938      	ldrh	r0, [r7, #8]
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012a82:	2303      	movs	r3, #3
 8012a84:	2237      	movs	r2, #55	@ 0x37
 8012a86:	f000 fbfb 	bl	8013280 <dhcp_option>
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012a8e:	2300      	movs	r3, #0
 8012a90:	77fb      	strb	r3, [r7, #31]
 8012a92:	e00e      	b.n	8012ab2 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012a94:	8938      	ldrh	r0, [r7, #8]
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012a9c:	7ffb      	ldrb	r3, [r7, #31]
 8012a9e:	4a29      	ldr	r2, [pc, #164]	@ (8012b44 <dhcp_discover+0x130>)
 8012aa0:	5cd3      	ldrb	r3, [r2, r3]
 8012aa2:	461a      	mov	r2, r3
 8012aa4:	f000 fc20 	bl	80132e8 <dhcp_option_byte>
 8012aa8:	4603      	mov	r3, r0
 8012aaa:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012aac:	7ffb      	ldrb	r3, [r7, #31]
 8012aae:	3301      	adds	r3, #1
 8012ab0:	77fb      	strb	r3, [r7, #31]
 8012ab2:	7ffb      	ldrb	r3, [r7, #31]
 8012ab4:	2b02      	cmp	r3, #2
 8012ab6:	d9ed      	bls.n	8012a94 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012ab8:	8938      	ldrh	r0, [r7, #8]
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	33f0      	adds	r3, #240	@ 0xf0
 8012abe:	693a      	ldr	r2, [r7, #16]
 8012ac0:	4619      	mov	r1, r3
 8012ac2:	f001 f981 	bl	8013dc8 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8012ac6:	4b20      	ldr	r3, [pc, #128]	@ (8012b48 <dhcp_discover+0x134>)
 8012ac8:	6818      	ldr	r0, [r3, #0]
 8012aca:	4b20      	ldr	r3, [pc, #128]	@ (8012b4c <dhcp_discover+0x138>)
 8012acc:	9301      	str	r3, [sp, #4]
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	9300      	str	r3, [sp, #0]
 8012ad2:	2343      	movs	r3, #67	@ 0x43
 8012ad4:	4a1e      	ldr	r2, [pc, #120]	@ (8012b50 <dhcp_discover+0x13c>)
 8012ad6:	6939      	ldr	r1, [r7, #16]
 8012ad8:	f7ff f80a 	bl	8011af0 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8012adc:	6938      	ldr	r0, [r7, #16]
 8012ade:	f7f8 ffd1 	bl	800ba84 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8012ae2:	69bb      	ldr	r3, [r7, #24]
 8012ae4:	799b      	ldrb	r3, [r3, #6]
 8012ae6:	2bff      	cmp	r3, #255	@ 0xff
 8012ae8:	d005      	beq.n	8012af6 <dhcp_discover+0xe2>
    dhcp->tries++;
 8012aea:	69bb      	ldr	r3, [r7, #24]
 8012aec:	799b      	ldrb	r3, [r3, #6]
 8012aee:	3301      	adds	r3, #1
 8012af0:	b2da      	uxtb	r2, r3
 8012af2:	69bb      	ldr	r3, [r7, #24]
 8012af4:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8012af6:	69bb      	ldr	r3, [r7, #24]
 8012af8:	799b      	ldrb	r3, [r3, #6]
 8012afa:	2b05      	cmp	r3, #5
 8012afc:	d80d      	bhi.n	8012b1a <dhcp_discover+0x106>
 8012afe:	69bb      	ldr	r3, [r7, #24]
 8012b00:	799b      	ldrb	r3, [r3, #6]
 8012b02:	461a      	mov	r2, r3
 8012b04:	2301      	movs	r3, #1
 8012b06:	4093      	lsls	r3, r2
 8012b08:	b29b      	uxth	r3, r3
 8012b0a:	461a      	mov	r2, r3
 8012b0c:	0152      	lsls	r2, r2, #5
 8012b0e:	1ad2      	subs	r2, r2, r3
 8012b10:	0092      	lsls	r2, r2, #2
 8012b12:	4413      	add	r3, r2
 8012b14:	00db      	lsls	r3, r3, #3
 8012b16:	b29b      	uxth	r3, r3
 8012b18:	e001      	b.n	8012b1e <dhcp_discover+0x10a>
 8012b1a:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8012b1e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012b20:	897b      	ldrh	r3, [r7, #10]
 8012b22:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8012b26:	4a0b      	ldr	r2, [pc, #44]	@ (8012b54 <dhcp_discover+0x140>)
 8012b28:	fb82 1203 	smull	r1, r2, r2, r3
 8012b2c:	1152      	asrs	r2, r2, #5
 8012b2e:	17db      	asrs	r3, r3, #31
 8012b30:	1ad3      	subs	r3, r2, r3
 8012b32:	b29a      	uxth	r2, r3
 8012b34:	69bb      	ldr	r3, [r7, #24]
 8012b36:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012b38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	3720      	adds	r7, #32
 8012b40:	46bd      	mov	sp, r7
 8012b42:	bd80      	pop	{r7, pc}
 8012b44:	20000034 	.word	0x20000034
 8012b48:	2000cb48 	.word	0x2000cb48
 8012b4c:	0801b8d4 	.word	0x0801b8d4
 8012b50:	0801b8d8 	.word	0x0801b8d8
 8012b54:	10624dd3 	.word	0x10624dd3

08012b58 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8012b58:	b580      	push	{r7, lr}
 8012b5a:	b088      	sub	sp, #32
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d107      	bne.n	8012b76 <dhcp_bind+0x1e>
 8012b66:	4b64      	ldr	r3, [pc, #400]	@ (8012cf8 <dhcp_bind+0x1a0>)
 8012b68:	f240 4215 	movw	r2, #1045	@ 0x415
 8012b6c:	4963      	ldr	r1, [pc, #396]	@ (8012cfc <dhcp_bind+0x1a4>)
 8012b6e:	4864      	ldr	r0, [pc, #400]	@ (8012d00 <dhcp_bind+0x1a8>)
 8012b70:	f004 fa72 	bl	8017058 <iprintf>
 8012b74:	e0bc      	b.n	8012cf0 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012b7a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8012b7c:	69bb      	ldr	r3, [r7, #24]
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d107      	bne.n	8012b92 <dhcp_bind+0x3a>
 8012b82:	4b5d      	ldr	r3, [pc, #372]	@ (8012cf8 <dhcp_bind+0x1a0>)
 8012b84:	f240 4217 	movw	r2, #1047	@ 0x417
 8012b88:	495e      	ldr	r1, [pc, #376]	@ (8012d04 <dhcp_bind+0x1ac>)
 8012b8a:	485d      	ldr	r0, [pc, #372]	@ (8012d00 <dhcp_bind+0x1a8>)
 8012b8c:	f004 fa64 	bl	8017058 <iprintf>
 8012b90:	e0ae      	b.n	8012cf0 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8012b92:	69bb      	ldr	r3, [r7, #24]
 8012b94:	2200      	movs	r2, #0
 8012b96:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8012b98:	69bb      	ldr	r3, [r7, #24]
 8012b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ba0:	d019      	beq.n	8012bd6 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012ba2:	69bb      	ldr	r3, [r7, #24]
 8012ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ba6:	331e      	adds	r3, #30
 8012ba8:	4a57      	ldr	r2, [pc, #348]	@ (8012d08 <dhcp_bind+0x1b0>)
 8012baa:	fba2 2303 	umull	r2, r3, r2, r3
 8012bae:	095b      	lsrs	r3, r3, #5
 8012bb0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012bb2:	69fb      	ldr	r3, [r7, #28]
 8012bb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012bb8:	d302      	bcc.n	8012bc0 <dhcp_bind+0x68>
      timeout = 0xffff;
 8012bba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012bbe:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8012bc0:	69fb      	ldr	r3, [r7, #28]
 8012bc2:	b29a      	uxth	r2, r3
 8012bc4:	69bb      	ldr	r3, [r7, #24]
 8012bc6:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8012bc8:	69bb      	ldr	r3, [r7, #24]
 8012bca:	8a9b      	ldrh	r3, [r3, #20]
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d102      	bne.n	8012bd6 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8012bd0:	69bb      	ldr	r3, [r7, #24]
 8012bd2:	2201      	movs	r2, #1
 8012bd4:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8012bd6:	69bb      	ldr	r3, [r7, #24]
 8012bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bde:	d01d      	beq.n	8012c1c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012be0:	69bb      	ldr	r3, [r7, #24]
 8012be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012be4:	331e      	adds	r3, #30
 8012be6:	4a48      	ldr	r2, [pc, #288]	@ (8012d08 <dhcp_bind+0x1b0>)
 8012be8:	fba2 2303 	umull	r2, r3, r2, r3
 8012bec:	095b      	lsrs	r3, r3, #5
 8012bee:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012bf0:	69fb      	ldr	r3, [r7, #28]
 8012bf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012bf6:	d302      	bcc.n	8012bfe <dhcp_bind+0xa6>
      timeout = 0xffff;
 8012bf8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012bfc:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8012bfe:	69fb      	ldr	r3, [r7, #28]
 8012c00:	b29a      	uxth	r2, r3
 8012c02:	69bb      	ldr	r3, [r7, #24]
 8012c04:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8012c06:	69bb      	ldr	r3, [r7, #24]
 8012c08:	895b      	ldrh	r3, [r3, #10]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d102      	bne.n	8012c14 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8012c0e:	69bb      	ldr	r3, [r7, #24]
 8012c10:	2201      	movs	r2, #1
 8012c12:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8012c14:	69bb      	ldr	r3, [r7, #24]
 8012c16:	895a      	ldrh	r2, [r3, #10]
 8012c18:	69bb      	ldr	r3, [r7, #24]
 8012c1a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8012c1c:	69bb      	ldr	r3, [r7, #24]
 8012c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c24:	d01d      	beq.n	8012c62 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012c26:	69bb      	ldr	r3, [r7, #24]
 8012c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012c2a:	331e      	adds	r3, #30
 8012c2c:	4a36      	ldr	r2, [pc, #216]	@ (8012d08 <dhcp_bind+0x1b0>)
 8012c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8012c32:	095b      	lsrs	r3, r3, #5
 8012c34:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012c36:	69fb      	ldr	r3, [r7, #28]
 8012c38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012c3c:	d302      	bcc.n	8012c44 <dhcp_bind+0xec>
      timeout = 0xffff;
 8012c3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012c42:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8012c44:	69fb      	ldr	r3, [r7, #28]
 8012c46:	b29a      	uxth	r2, r3
 8012c48:	69bb      	ldr	r3, [r7, #24]
 8012c4a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8012c4c:	69bb      	ldr	r3, [r7, #24]
 8012c4e:	899b      	ldrh	r3, [r3, #12]
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d102      	bne.n	8012c5a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8012c54:	69bb      	ldr	r3, [r7, #24]
 8012c56:	2201      	movs	r2, #1
 8012c58:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8012c5a:	69bb      	ldr	r3, [r7, #24]
 8012c5c:	899a      	ldrh	r2, [r3, #12]
 8012c5e:	69bb      	ldr	r3, [r7, #24]
 8012c60:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8012c62:	69bb      	ldr	r3, [r7, #24]
 8012c64:	895a      	ldrh	r2, [r3, #10]
 8012c66:	69bb      	ldr	r3, [r7, #24]
 8012c68:	899b      	ldrh	r3, [r3, #12]
 8012c6a:	429a      	cmp	r2, r3
 8012c6c:	d306      	bcc.n	8012c7c <dhcp_bind+0x124>
 8012c6e:	69bb      	ldr	r3, [r7, #24]
 8012c70:	899b      	ldrh	r3, [r3, #12]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d002      	beq.n	8012c7c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8012c76:	69bb      	ldr	r3, [r7, #24]
 8012c78:	2200      	movs	r2, #0
 8012c7a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8012c7c:	69bb      	ldr	r3, [r7, #24]
 8012c7e:	79db      	ldrb	r3, [r3, #7]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d003      	beq.n	8012c8c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8012c84:	69bb      	ldr	r3, [r7, #24]
 8012c86:	6a1b      	ldr	r3, [r3, #32]
 8012c88:	613b      	str	r3, [r7, #16]
 8012c8a:	e014      	b.n	8012cb6 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8012c8c:	69bb      	ldr	r3, [r7, #24]
 8012c8e:	331c      	adds	r3, #28
 8012c90:	781b      	ldrb	r3, [r3, #0]
 8012c92:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8012c94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	db02      	blt.n	8012ca2 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8012c9c:	23ff      	movs	r3, #255	@ 0xff
 8012c9e:	613b      	str	r3, [r7, #16]
 8012ca0:	e009      	b.n	8012cb6 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8012ca2:	7dfb      	ldrb	r3, [r7, #23]
 8012ca4:	2bbf      	cmp	r3, #191	@ 0xbf
 8012ca6:	d903      	bls.n	8012cb0 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8012ca8:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8012cac:	613b      	str	r3, [r7, #16]
 8012cae:	e002      	b.n	8012cb6 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8012cb0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012cb4:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8012cb6:	69bb      	ldr	r3, [r7, #24]
 8012cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012cba:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d108      	bne.n	8012cd4 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8012cc2:	69bb      	ldr	r3, [r7, #24]
 8012cc4:	69da      	ldr	r2, [r3, #28]
 8012cc6:	693b      	ldr	r3, [r7, #16]
 8012cc8:	4013      	ands	r3, r2
 8012cca:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8012cd2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8012cd4:	210a      	movs	r1, #10
 8012cd6:	69b8      	ldr	r0, [r7, #24]
 8012cd8:	f000 fab8 	bl	801324c <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8012cdc:	69bb      	ldr	r3, [r7, #24]
 8012cde:	f103 011c 	add.w	r1, r3, #28
 8012ce2:	f107 030c 	add.w	r3, r7, #12
 8012ce6:	f107 0210 	add.w	r2, r7, #16
 8012cea:	6878      	ldr	r0, [r7, #4]
 8012cec:	f7f8 f916 	bl	800af1c <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8012cf0:	3720      	adds	r7, #32
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	bd80      	pop	{r7, pc}
 8012cf6:	bf00      	nop
 8012cf8:	0801a998 	.word	0x0801a998
 8012cfc:	0801aaf8 	.word	0x0801aaf8
 8012d00:	0801a9f8 	.word	0x0801a9f8
 8012d04:	0801ab14 	.word	0x0801ab14
 8012d08:	88888889 	.word	0x88888889

08012d0c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8012d0c:	b580      	push	{r7, lr}
 8012d0e:	b08a      	sub	sp, #40	@ 0x28
 8012d10:	af02      	add	r7, sp, #8
 8012d12:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012d18:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8012d1a:	2105      	movs	r1, #5
 8012d1c:	69b8      	ldr	r0, [r7, #24]
 8012d1e:	f000 fa95 	bl	801324c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012d22:	f107 030c 	add.w	r3, r7, #12
 8012d26:	2203      	movs	r2, #3
 8012d28:	69b9      	ldr	r1, [r7, #24]
 8012d2a:	6878      	ldr	r0, [r7, #4]
 8012d2c:	f000 ff76 	bl	8013c1c <dhcp_create_msg>
 8012d30:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012d32:	697b      	ldr	r3, [r7, #20]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d057      	beq.n	8012de8 <dhcp_renew+0xdc>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012d38:	697b      	ldr	r3, [r7, #20]
 8012d3a:	685b      	ldr	r3, [r3, #4]
 8012d3c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012d3e:	89b8      	ldrh	r0, [r7, #12]
 8012d40:	693b      	ldr	r3, [r7, #16]
 8012d42:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012d46:	2302      	movs	r3, #2
 8012d48:	2239      	movs	r2, #57	@ 0x39
 8012d4a:	f000 fa99 	bl	8013280 <dhcp_option>
 8012d4e:	4603      	mov	r3, r0
 8012d50:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012d52:	89b8      	ldrh	r0, [r7, #12]
 8012d54:	693b      	ldr	r3, [r7, #16]
 8012d56:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8012d5e:	461a      	mov	r2, r3
 8012d60:	f000 fae8 	bl	8013334 <dhcp_option_short>
 8012d64:	4603      	mov	r3, r0
 8012d66:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012d68:	89b8      	ldrh	r0, [r7, #12]
 8012d6a:	693b      	ldr	r3, [r7, #16]
 8012d6c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012d70:	2303      	movs	r3, #3
 8012d72:	2237      	movs	r2, #55	@ 0x37
 8012d74:	f000 fa84 	bl	8013280 <dhcp_option>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012d7c:	2300      	movs	r3, #0
 8012d7e:	77bb      	strb	r3, [r7, #30]
 8012d80:	e00e      	b.n	8012da0 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012d82:	89b8      	ldrh	r0, [r7, #12]
 8012d84:	693b      	ldr	r3, [r7, #16]
 8012d86:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012d8a:	7fbb      	ldrb	r3, [r7, #30]
 8012d8c:	4a2e      	ldr	r2, [pc, #184]	@ (8012e48 <dhcp_renew+0x13c>)
 8012d8e:	5cd3      	ldrb	r3, [r2, r3]
 8012d90:	461a      	mov	r2, r3
 8012d92:	f000 faa9 	bl	80132e8 <dhcp_option_byte>
 8012d96:	4603      	mov	r3, r0
 8012d98:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012d9a:	7fbb      	ldrb	r3, [r7, #30]
 8012d9c:	3301      	adds	r3, #1
 8012d9e:	77bb      	strb	r3, [r7, #30]
 8012da0:	7fbb      	ldrb	r3, [r7, #30]
 8012da2:	2b02      	cmp	r3, #2
 8012da4:	d9ed      	bls.n	8012d82 <dhcp_renew+0x76>
    }

#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
 8012da6:	89b8      	ldrh	r0, [r7, #12]
 8012da8:	693b      	ldr	r3, [r7, #16]
 8012daa:	33f0      	adds	r3, #240	@ 0xf0
 8012dac:	687a      	ldr	r2, [r7, #4]
 8012dae:	4619      	mov	r1, r3
 8012db0:	f000 fb36 	bl	8013420 <dhcp_option_hostname>
 8012db4:	4603      	mov	r3, r0
 8012db6:	81bb      	strh	r3, [r7, #12]
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012db8:	89b8      	ldrh	r0, [r7, #12]
 8012dba:	693b      	ldr	r3, [r7, #16]
 8012dbc:	33f0      	adds	r3, #240	@ 0xf0
 8012dbe:	697a      	ldr	r2, [r7, #20]
 8012dc0:	4619      	mov	r1, r3
 8012dc2:	f001 f801 	bl	8013dc8 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012dc6:	4b21      	ldr	r3, [pc, #132]	@ (8012e4c <dhcp_renew+0x140>)
 8012dc8:	6818      	ldr	r0, [r3, #0]
 8012dca:	69bb      	ldr	r3, [r7, #24]
 8012dcc:	f103 0218 	add.w	r2, r3, #24
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	9300      	str	r3, [sp, #0]
 8012dd4:	2343      	movs	r3, #67	@ 0x43
 8012dd6:	6979      	ldr	r1, [r7, #20]
 8012dd8:	f7fe fe16 	bl	8011a08 <udp_sendto_if>
 8012ddc:	4603      	mov	r3, r0
 8012dde:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012de0:	6978      	ldr	r0, [r7, #20]
 8012de2:	f7f8 fe4f 	bl	800ba84 <pbuf_free>
 8012de6:	e001      	b.n	8012dec <dhcp_renew+0xe0>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012de8:	23ff      	movs	r3, #255	@ 0xff
 8012dea:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012dec:	69bb      	ldr	r3, [r7, #24]
 8012dee:	799b      	ldrb	r3, [r3, #6]
 8012df0:	2bff      	cmp	r3, #255	@ 0xff
 8012df2:	d005      	beq.n	8012e00 <dhcp_renew+0xf4>
    dhcp->tries++;
 8012df4:	69bb      	ldr	r3, [r7, #24]
 8012df6:	799b      	ldrb	r3, [r3, #6]
 8012df8:	3301      	adds	r3, #1
 8012dfa:	b2da      	uxtb	r2, r3
 8012dfc:	69bb      	ldr	r3, [r7, #24]
 8012dfe:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8012e00:	69bb      	ldr	r3, [r7, #24]
 8012e02:	799b      	ldrb	r3, [r3, #6]
 8012e04:	2b09      	cmp	r3, #9
 8012e06:	d809      	bhi.n	8012e1c <dhcp_renew+0x110>
 8012e08:	69bb      	ldr	r3, [r7, #24]
 8012e0a:	799b      	ldrb	r3, [r3, #6]
 8012e0c:	461a      	mov	r2, r3
 8012e0e:	0152      	lsls	r2, r2, #5
 8012e10:	1ad2      	subs	r2, r2, r3
 8012e12:	0092      	lsls	r2, r2, #2
 8012e14:	4413      	add	r3, r2
 8012e16:	011b      	lsls	r3, r3, #4
 8012e18:	b29b      	uxth	r3, r3
 8012e1a:	e001      	b.n	8012e20 <dhcp_renew+0x114>
 8012e1c:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8012e20:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012e22:	89fb      	ldrh	r3, [r7, #14]
 8012e24:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8012e28:	4a09      	ldr	r2, [pc, #36]	@ (8012e50 <dhcp_renew+0x144>)
 8012e2a:	fb82 1203 	smull	r1, r2, r2, r3
 8012e2e:	1152      	asrs	r2, r2, #5
 8012e30:	17db      	asrs	r3, r3, #31
 8012e32:	1ad3      	subs	r3, r2, r3
 8012e34:	b29a      	uxth	r2, r3
 8012e36:	69bb      	ldr	r3, [r7, #24]
 8012e38:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012e3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012e3e:	4618      	mov	r0, r3
 8012e40:	3720      	adds	r7, #32
 8012e42:	46bd      	mov	sp, r7
 8012e44:	bd80      	pop	{r7, pc}
 8012e46:	bf00      	nop
 8012e48:	20000034 	.word	0x20000034
 8012e4c:	2000cb48 	.word	0x2000cb48
 8012e50:	10624dd3 	.word	0x10624dd3

08012e54 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8012e54:	b580      	push	{r7, lr}
 8012e56:	b08a      	sub	sp, #40	@ 0x28
 8012e58:	af02      	add	r7, sp, #8
 8012e5a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012e60:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8012e62:	2104      	movs	r1, #4
 8012e64:	69b8      	ldr	r0, [r7, #24]
 8012e66:	f000 f9f1 	bl	801324c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012e6a:	f107 030c 	add.w	r3, r7, #12
 8012e6e:	2203      	movs	r2, #3
 8012e70:	69b9      	ldr	r1, [r7, #24]
 8012e72:	6878      	ldr	r0, [r7, #4]
 8012e74:	f000 fed2 	bl	8013c1c <dhcp_create_msg>
 8012e78:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012e7a:	697b      	ldr	r3, [r7, #20]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d055      	beq.n	8012f2c <dhcp_rebind+0xd8>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012e80:	697b      	ldr	r3, [r7, #20]
 8012e82:	685b      	ldr	r3, [r3, #4]
 8012e84:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012e86:	89b8      	ldrh	r0, [r7, #12]
 8012e88:	693b      	ldr	r3, [r7, #16]
 8012e8a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012e8e:	2302      	movs	r3, #2
 8012e90:	2239      	movs	r2, #57	@ 0x39
 8012e92:	f000 f9f5 	bl	8013280 <dhcp_option>
 8012e96:	4603      	mov	r3, r0
 8012e98:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012e9a:	89b8      	ldrh	r0, [r7, #12]
 8012e9c:	693b      	ldr	r3, [r7, #16]
 8012e9e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8012ea6:	461a      	mov	r2, r3
 8012ea8:	f000 fa44 	bl	8013334 <dhcp_option_short>
 8012eac:	4603      	mov	r3, r0
 8012eae:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012eb0:	89b8      	ldrh	r0, [r7, #12]
 8012eb2:	693b      	ldr	r3, [r7, #16]
 8012eb4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012eb8:	2303      	movs	r3, #3
 8012eba:	2237      	movs	r2, #55	@ 0x37
 8012ebc:	f000 f9e0 	bl	8013280 <dhcp_option>
 8012ec0:	4603      	mov	r3, r0
 8012ec2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	77bb      	strb	r3, [r7, #30]
 8012ec8:	e00e      	b.n	8012ee8 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012eca:	89b8      	ldrh	r0, [r7, #12]
 8012ecc:	693b      	ldr	r3, [r7, #16]
 8012ece:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012ed2:	7fbb      	ldrb	r3, [r7, #30]
 8012ed4:	4a2d      	ldr	r2, [pc, #180]	@ (8012f8c <dhcp_rebind+0x138>)
 8012ed6:	5cd3      	ldrb	r3, [r2, r3]
 8012ed8:	461a      	mov	r2, r3
 8012eda:	f000 fa05 	bl	80132e8 <dhcp_option_byte>
 8012ede:	4603      	mov	r3, r0
 8012ee0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012ee2:	7fbb      	ldrb	r3, [r7, #30]
 8012ee4:	3301      	adds	r3, #1
 8012ee6:	77bb      	strb	r3, [r7, #30]
 8012ee8:	7fbb      	ldrb	r3, [r7, #30]
 8012eea:	2b02      	cmp	r3, #2
 8012eec:	d9ed      	bls.n	8012eca <dhcp_rebind+0x76>
    }

#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
 8012eee:	89b8      	ldrh	r0, [r7, #12]
 8012ef0:	693b      	ldr	r3, [r7, #16]
 8012ef2:	33f0      	adds	r3, #240	@ 0xf0
 8012ef4:	687a      	ldr	r2, [r7, #4]
 8012ef6:	4619      	mov	r1, r3
 8012ef8:	f000 fa92 	bl	8013420 <dhcp_option_hostname>
 8012efc:	4603      	mov	r3, r0
 8012efe:	81bb      	strh	r3, [r7, #12]
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012f00:	89b8      	ldrh	r0, [r7, #12]
 8012f02:	693b      	ldr	r3, [r7, #16]
 8012f04:	33f0      	adds	r3, #240	@ 0xf0
 8012f06:	697a      	ldr	r2, [r7, #20]
 8012f08:	4619      	mov	r1, r3
 8012f0a:	f000 ff5d 	bl	8013dc8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012f0e:	4b20      	ldr	r3, [pc, #128]	@ (8012f90 <dhcp_rebind+0x13c>)
 8012f10:	6818      	ldr	r0, [r3, #0]
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	9300      	str	r3, [sp, #0]
 8012f16:	2343      	movs	r3, #67	@ 0x43
 8012f18:	4a1e      	ldr	r2, [pc, #120]	@ (8012f94 <dhcp_rebind+0x140>)
 8012f1a:	6979      	ldr	r1, [r7, #20]
 8012f1c:	f7fe fd74 	bl	8011a08 <udp_sendto_if>
 8012f20:	4603      	mov	r3, r0
 8012f22:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012f24:	6978      	ldr	r0, [r7, #20]
 8012f26:	f7f8 fdad 	bl	800ba84 <pbuf_free>
 8012f2a:	e001      	b.n	8012f30 <dhcp_rebind+0xdc>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012f2c:	23ff      	movs	r3, #255	@ 0xff
 8012f2e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012f30:	69bb      	ldr	r3, [r7, #24]
 8012f32:	799b      	ldrb	r3, [r3, #6]
 8012f34:	2bff      	cmp	r3, #255	@ 0xff
 8012f36:	d005      	beq.n	8012f44 <dhcp_rebind+0xf0>
    dhcp->tries++;
 8012f38:	69bb      	ldr	r3, [r7, #24]
 8012f3a:	799b      	ldrb	r3, [r3, #6]
 8012f3c:	3301      	adds	r3, #1
 8012f3e:	b2da      	uxtb	r2, r3
 8012f40:	69bb      	ldr	r3, [r7, #24]
 8012f42:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8012f44:	69bb      	ldr	r3, [r7, #24]
 8012f46:	799b      	ldrb	r3, [r3, #6]
 8012f48:	2b09      	cmp	r3, #9
 8012f4a:	d809      	bhi.n	8012f60 <dhcp_rebind+0x10c>
 8012f4c:	69bb      	ldr	r3, [r7, #24]
 8012f4e:	799b      	ldrb	r3, [r3, #6]
 8012f50:	461a      	mov	r2, r3
 8012f52:	0152      	lsls	r2, r2, #5
 8012f54:	1ad2      	subs	r2, r2, r3
 8012f56:	0092      	lsls	r2, r2, #2
 8012f58:	4413      	add	r3, r2
 8012f5a:	00db      	lsls	r3, r3, #3
 8012f5c:	b29b      	uxth	r3, r3
 8012f5e:	e001      	b.n	8012f64 <dhcp_rebind+0x110>
 8012f60:	f242 7310 	movw	r3, #10000	@ 0x2710
 8012f64:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012f66:	89fb      	ldrh	r3, [r7, #14]
 8012f68:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8012f6c:	4a0a      	ldr	r2, [pc, #40]	@ (8012f98 <dhcp_rebind+0x144>)
 8012f6e:	fb82 1203 	smull	r1, r2, r2, r3
 8012f72:	1152      	asrs	r2, r2, #5
 8012f74:	17db      	asrs	r3, r3, #31
 8012f76:	1ad3      	subs	r3, r2, r3
 8012f78:	b29a      	uxth	r2, r3
 8012f7a:	69bb      	ldr	r3, [r7, #24]
 8012f7c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012f7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012f82:	4618      	mov	r0, r3
 8012f84:	3720      	adds	r7, #32
 8012f86:	46bd      	mov	sp, r7
 8012f88:	bd80      	pop	{r7, pc}
 8012f8a:	bf00      	nop
 8012f8c:	20000034 	.word	0x20000034
 8012f90:	2000cb48 	.word	0x2000cb48
 8012f94:	0801b8d8 	.word	0x0801b8d8
 8012f98:	10624dd3 	.word	0x10624dd3

08012f9c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8012f9c:	b5b0      	push	{r4, r5, r7, lr}
 8012f9e:	b08a      	sub	sp, #40	@ 0x28
 8012fa0:	af02      	add	r7, sp, #8
 8012fa2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012fa8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8012faa:	2103      	movs	r1, #3
 8012fac:	69b8      	ldr	r0, [r7, #24]
 8012fae:	f000 f94d 	bl	801324c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012fb2:	f107 030c 	add.w	r3, r7, #12
 8012fb6:	2203      	movs	r2, #3
 8012fb8:	69b9      	ldr	r1, [r7, #24]
 8012fba:	6878      	ldr	r0, [r7, #4]
 8012fbc:	f000 fe2e 	bl	8013c1c <dhcp_create_msg>
 8012fc0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012fc2:	697b      	ldr	r3, [r7, #20]
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d06f      	beq.n	80130a8 <dhcp_reboot+0x10c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012fc8:	697b      	ldr	r3, [r7, #20]
 8012fca:	685b      	ldr	r3, [r3, #4]
 8012fcc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012fce:	89b8      	ldrh	r0, [r7, #12]
 8012fd0:	693b      	ldr	r3, [r7, #16]
 8012fd2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012fd6:	2302      	movs	r3, #2
 8012fd8:	2239      	movs	r2, #57	@ 0x39
 8012fda:	f000 f951 	bl	8013280 <dhcp_option>
 8012fde:	4603      	mov	r3, r0
 8012fe0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8012fe2:	89b8      	ldrh	r0, [r7, #12]
 8012fe4:	693b      	ldr	r3, [r7, #16]
 8012fe6:	33f0      	adds	r3, #240	@ 0xf0
 8012fe8:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8012fec:	4619      	mov	r1, r3
 8012fee:	f000 f9a1 	bl	8013334 <dhcp_option_short>
 8012ff2:	4603      	mov	r3, r0
 8012ff4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012ff6:	89b8      	ldrh	r0, [r7, #12]
 8012ff8:	693b      	ldr	r3, [r7, #16]
 8012ffa:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012ffe:	2304      	movs	r3, #4
 8013000:	2232      	movs	r2, #50	@ 0x32
 8013002:	f000 f93d 	bl	8013280 <dhcp_option>
 8013006:	4603      	mov	r3, r0
 8013008:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801300a:	89bc      	ldrh	r4, [r7, #12]
 801300c:	693b      	ldr	r3, [r7, #16]
 801300e:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8013012:	69bb      	ldr	r3, [r7, #24]
 8013014:	69db      	ldr	r3, [r3, #28]
 8013016:	4618      	mov	r0, r3
 8013018:	f7f6 fff5 	bl	800a006 <lwip_htonl>
 801301c:	4603      	mov	r3, r0
 801301e:	461a      	mov	r2, r3
 8013020:	4629      	mov	r1, r5
 8013022:	4620      	mov	r0, r4
 8013024:	f000 f9b8 	bl	8013398 <dhcp_option_long>
 8013028:	4603      	mov	r3, r0
 801302a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801302c:	89b8      	ldrh	r0, [r7, #12]
 801302e:	693b      	ldr	r3, [r7, #16]
 8013030:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013034:	2303      	movs	r3, #3
 8013036:	2237      	movs	r2, #55	@ 0x37
 8013038:	f000 f922 	bl	8013280 <dhcp_option>
 801303c:	4603      	mov	r3, r0
 801303e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013040:	2300      	movs	r3, #0
 8013042:	77bb      	strb	r3, [r7, #30]
 8013044:	e00e      	b.n	8013064 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013046:	89b8      	ldrh	r0, [r7, #12]
 8013048:	693b      	ldr	r3, [r7, #16]
 801304a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801304e:	7fbb      	ldrb	r3, [r7, #30]
 8013050:	4a2d      	ldr	r2, [pc, #180]	@ (8013108 <dhcp_reboot+0x16c>)
 8013052:	5cd3      	ldrb	r3, [r2, r3]
 8013054:	461a      	mov	r2, r3
 8013056:	f000 f947 	bl	80132e8 <dhcp_option_byte>
 801305a:	4603      	mov	r3, r0
 801305c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801305e:	7fbb      	ldrb	r3, [r7, #30]
 8013060:	3301      	adds	r3, #1
 8013062:	77bb      	strb	r3, [r7, #30]
 8013064:	7fbb      	ldrb	r3, [r7, #30]
 8013066:	2b02      	cmp	r3, #2
 8013068:	d9ed      	bls.n	8013046 <dhcp_reboot+0xaa>
    }

#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
 801306a:	89b8      	ldrh	r0, [r7, #12]
 801306c:	693b      	ldr	r3, [r7, #16]
 801306e:	33f0      	adds	r3, #240	@ 0xf0
 8013070:	687a      	ldr	r2, [r7, #4]
 8013072:	4619      	mov	r1, r3
 8013074:	f000 f9d4 	bl	8013420 <dhcp_option_hostname>
 8013078:	4603      	mov	r3, r0
 801307a:	81bb      	strh	r3, [r7, #12]
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801307c:	89b8      	ldrh	r0, [r7, #12]
 801307e:	693b      	ldr	r3, [r7, #16]
 8013080:	33f0      	adds	r3, #240	@ 0xf0
 8013082:	697a      	ldr	r2, [r7, #20]
 8013084:	4619      	mov	r1, r3
 8013086:	f000 fe9f 	bl	8013dc8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801308a:	4b20      	ldr	r3, [pc, #128]	@ (801310c <dhcp_reboot+0x170>)
 801308c:	6818      	ldr	r0, [r3, #0]
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	9300      	str	r3, [sp, #0]
 8013092:	2343      	movs	r3, #67	@ 0x43
 8013094:	4a1e      	ldr	r2, [pc, #120]	@ (8013110 <dhcp_reboot+0x174>)
 8013096:	6979      	ldr	r1, [r7, #20]
 8013098:	f7fe fcb6 	bl	8011a08 <udp_sendto_if>
 801309c:	4603      	mov	r3, r0
 801309e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80130a0:	6978      	ldr	r0, [r7, #20]
 80130a2:	f7f8 fcef 	bl	800ba84 <pbuf_free>
 80130a6:	e001      	b.n	80130ac <dhcp_reboot+0x110>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80130a8:	23ff      	movs	r3, #255	@ 0xff
 80130aa:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80130ac:	69bb      	ldr	r3, [r7, #24]
 80130ae:	799b      	ldrb	r3, [r3, #6]
 80130b0:	2bff      	cmp	r3, #255	@ 0xff
 80130b2:	d005      	beq.n	80130c0 <dhcp_reboot+0x124>
    dhcp->tries++;
 80130b4:	69bb      	ldr	r3, [r7, #24]
 80130b6:	799b      	ldrb	r3, [r3, #6]
 80130b8:	3301      	adds	r3, #1
 80130ba:	b2da      	uxtb	r2, r3
 80130bc:	69bb      	ldr	r3, [r7, #24]
 80130be:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80130c0:	69bb      	ldr	r3, [r7, #24]
 80130c2:	799b      	ldrb	r3, [r3, #6]
 80130c4:	2b09      	cmp	r3, #9
 80130c6:	d809      	bhi.n	80130dc <dhcp_reboot+0x140>
 80130c8:	69bb      	ldr	r3, [r7, #24]
 80130ca:	799b      	ldrb	r3, [r3, #6]
 80130cc:	461a      	mov	r2, r3
 80130ce:	0152      	lsls	r2, r2, #5
 80130d0:	1ad2      	subs	r2, r2, r3
 80130d2:	0092      	lsls	r2, r2, #2
 80130d4:	4413      	add	r3, r2
 80130d6:	00db      	lsls	r3, r3, #3
 80130d8:	b29b      	uxth	r3, r3
 80130da:	e001      	b.n	80130e0 <dhcp_reboot+0x144>
 80130dc:	f242 7310 	movw	r3, #10000	@ 0x2710
 80130e0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80130e2:	89fb      	ldrh	r3, [r7, #14]
 80130e4:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80130e8:	4a0a      	ldr	r2, [pc, #40]	@ (8013114 <dhcp_reboot+0x178>)
 80130ea:	fb82 1203 	smull	r1, r2, r2, r3
 80130ee:	1152      	asrs	r2, r2, #5
 80130f0:	17db      	asrs	r3, r3, #31
 80130f2:	1ad3      	subs	r3, r2, r3
 80130f4:	b29a      	uxth	r2, r3
 80130f6:	69bb      	ldr	r3, [r7, #24]
 80130f8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80130fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80130fe:	4618      	mov	r0, r3
 8013100:	3720      	adds	r7, #32
 8013102:	46bd      	mov	sp, r7
 8013104:	bdb0      	pop	{r4, r5, r7, pc}
 8013106:	bf00      	nop
 8013108:	20000034 	.word	0x20000034
 801310c:	2000cb48 	.word	0x2000cb48
 8013110:	0801b8d8 	.word	0x0801b8d8
 8013114:	10624dd3 	.word	0x10624dd3

08013118 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8013118:	b5b0      	push	{r4, r5, r7, lr}
 801311a:	b08a      	sub	sp, #40	@ 0x28
 801311c:	af02      	add	r7, sp, #8
 801311e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013124:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8013126:	69fb      	ldr	r3, [r7, #28]
 8013128:	2b00      	cmp	r3, #0
 801312a:	f000 8084 	beq.w	8013236 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801312e:	69fb      	ldr	r3, [r7, #28]
 8013130:	795b      	ldrb	r3, [r3, #5]
 8013132:	2b00      	cmp	r3, #0
 8013134:	f000 8081 	beq.w	801323a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8013138:	69fb      	ldr	r3, [r7, #28]
 801313a:	699b      	ldr	r3, [r3, #24]
 801313c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801313e:	69fb      	ldr	r3, [r7, #28]
 8013140:	2200      	movs	r2, #0
 8013142:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8013144:	69fb      	ldr	r3, [r7, #28]
 8013146:	2200      	movs	r2, #0
 8013148:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801314a:	69fb      	ldr	r3, [r7, #28]
 801314c:	2200      	movs	r2, #0
 801314e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8013150:	69fb      	ldr	r3, [r7, #28]
 8013152:	2200      	movs	r2, #0
 8013154:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8013156:	69fb      	ldr	r3, [r7, #28]
 8013158:	2200      	movs	r2, #0
 801315a:	631a      	str	r2, [r3, #48]	@ 0x30
 801315c:	69fb      	ldr	r3, [r7, #28]
 801315e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013160:	69fb      	ldr	r3, [r7, #28]
 8013162:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013164:	69fb      	ldr	r3, [r7, #28]
 8013166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013168:	69fb      	ldr	r3, [r7, #28]
 801316a:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801316c:	69fb      	ldr	r3, [r7, #28]
 801316e:	2200      	movs	r2, #0
 8013170:	829a      	strh	r2, [r3, #20]
 8013172:	69fb      	ldr	r3, [r7, #28]
 8013174:	8a9a      	ldrh	r2, [r3, #20]
 8013176:	69fb      	ldr	r3, [r7, #28]
 8013178:	825a      	strh	r2, [r3, #18]
 801317a:	69fb      	ldr	r3, [r7, #28]
 801317c:	8a5a      	ldrh	r2, [r3, #18]
 801317e:	69fb      	ldr	r3, [r7, #28]
 8013180:	821a      	strh	r2, [r3, #16]
 8013182:	69fb      	ldr	r3, [r7, #28]
 8013184:	8a1a      	ldrh	r2, [r3, #16]
 8013186:	69fb      	ldr	r3, [r7, #28]
 8013188:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801318a:	6878      	ldr	r0, [r7, #4]
 801318c:	f000 fe4a 	bl	8013e24 <dhcp_supplied_address>
 8013190:	4603      	mov	r3, r0
 8013192:	2b00      	cmp	r3, #0
 8013194:	d03b      	beq.n	801320e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8013196:	f107 030e 	add.w	r3, r7, #14
 801319a:	2207      	movs	r2, #7
 801319c:	69f9      	ldr	r1, [r7, #28]
 801319e:	6878      	ldr	r0, [r7, #4]
 80131a0:	f000 fd3c 	bl	8013c1c <dhcp_create_msg>
 80131a4:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80131a6:	69bb      	ldr	r3, [r7, #24]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d030      	beq.n	801320e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80131ac:	69bb      	ldr	r3, [r7, #24]
 80131ae:	685b      	ldr	r3, [r3, #4]
 80131b0:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80131b2:	89f8      	ldrh	r0, [r7, #14]
 80131b4:	697b      	ldr	r3, [r7, #20]
 80131b6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80131ba:	2304      	movs	r3, #4
 80131bc:	2236      	movs	r2, #54	@ 0x36
 80131be:	f000 f85f 	bl	8013280 <dhcp_option>
 80131c2:	4603      	mov	r3, r0
 80131c4:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80131c6:	89fc      	ldrh	r4, [r7, #14]
 80131c8:	697b      	ldr	r3, [r7, #20]
 80131ca:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80131ce:	693b      	ldr	r3, [r7, #16]
 80131d0:	4618      	mov	r0, r3
 80131d2:	f7f6 ff18 	bl	800a006 <lwip_htonl>
 80131d6:	4603      	mov	r3, r0
 80131d8:	461a      	mov	r2, r3
 80131da:	4629      	mov	r1, r5
 80131dc:	4620      	mov	r0, r4
 80131de:	f000 f8db 	bl	8013398 <dhcp_option_long>
 80131e2:	4603      	mov	r3, r0
 80131e4:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80131e6:	89f8      	ldrh	r0, [r7, #14]
 80131e8:	697b      	ldr	r3, [r7, #20]
 80131ea:	33f0      	adds	r3, #240	@ 0xf0
 80131ec:	69ba      	ldr	r2, [r7, #24]
 80131ee:	4619      	mov	r1, r3
 80131f0:	f000 fdea 	bl	8013dc8 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80131f4:	4b13      	ldr	r3, [pc, #76]	@ (8013244 <dhcp_release_and_stop+0x12c>)
 80131f6:	6818      	ldr	r0, [r3, #0]
 80131f8:	f107 0210 	add.w	r2, r7, #16
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	9300      	str	r3, [sp, #0]
 8013200:	2343      	movs	r3, #67	@ 0x43
 8013202:	69b9      	ldr	r1, [r7, #24]
 8013204:	f7fe fc00 	bl	8011a08 <udp_sendto_if>
      pbuf_free(p_out);
 8013208:	69b8      	ldr	r0, [r7, #24]
 801320a:	f7f8 fc3b 	bl	800ba84 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801320e:	4b0e      	ldr	r3, [pc, #56]	@ (8013248 <dhcp_release_and_stop+0x130>)
 8013210:	4a0d      	ldr	r2, [pc, #52]	@ (8013248 <dhcp_release_and_stop+0x130>)
 8013212:	490d      	ldr	r1, [pc, #52]	@ (8013248 <dhcp_release_and_stop+0x130>)
 8013214:	6878      	ldr	r0, [r7, #4]
 8013216:	f7f7 fe81 	bl	800af1c <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801321a:	2100      	movs	r1, #0
 801321c:	69f8      	ldr	r0, [r7, #28]
 801321e:	f000 f815 	bl	801324c <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8013222:	69fb      	ldr	r3, [r7, #28]
 8013224:	791b      	ldrb	r3, [r3, #4]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d008      	beq.n	801323c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801322a:	f7fe ff65 	bl	80120f8 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801322e:	69fb      	ldr	r3, [r7, #28]
 8013230:	2200      	movs	r2, #0
 8013232:	711a      	strb	r2, [r3, #4]
 8013234:	e002      	b.n	801323c <dhcp_release_and_stop+0x124>
    return;
 8013236:	bf00      	nop
 8013238:	e000      	b.n	801323c <dhcp_release_and_stop+0x124>
    return;
 801323a:	bf00      	nop
  }
}
 801323c:	3720      	adds	r7, #32
 801323e:	46bd      	mov	sp, r7
 8013240:	bdb0      	pop	{r4, r5, r7, pc}
 8013242:	bf00      	nop
 8013244:	2000cb48 	.word	0x2000cb48
 8013248:	0801b8d4 	.word	0x0801b8d4

0801324c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801324c:	b480      	push	{r7}
 801324e:	b083      	sub	sp, #12
 8013250:	af00      	add	r7, sp, #0
 8013252:	6078      	str	r0, [r7, #4]
 8013254:	460b      	mov	r3, r1
 8013256:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	795b      	ldrb	r3, [r3, #5]
 801325c:	78fa      	ldrb	r2, [r7, #3]
 801325e:	429a      	cmp	r2, r3
 8013260:	d008      	beq.n	8013274 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	78fa      	ldrb	r2, [r7, #3]
 8013266:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	2200      	movs	r2, #0
 801326c:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	2200      	movs	r2, #0
 8013272:	811a      	strh	r2, [r3, #8]
  }
}
 8013274:	bf00      	nop
 8013276:	370c      	adds	r7, #12
 8013278:	46bd      	mov	sp, r7
 801327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801327e:	4770      	bx	lr

08013280 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8013280:	b580      	push	{r7, lr}
 8013282:	b082      	sub	sp, #8
 8013284:	af00      	add	r7, sp, #0
 8013286:	6039      	str	r1, [r7, #0]
 8013288:	4611      	mov	r1, r2
 801328a:	461a      	mov	r2, r3
 801328c:	4603      	mov	r3, r0
 801328e:	80fb      	strh	r3, [r7, #6]
 8013290:	460b      	mov	r3, r1
 8013292:	717b      	strb	r3, [r7, #5]
 8013294:	4613      	mov	r3, r2
 8013296:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8013298:	88fa      	ldrh	r2, [r7, #6]
 801329a:	793b      	ldrb	r3, [r7, #4]
 801329c:	4413      	add	r3, r2
 801329e:	3302      	adds	r3, #2
 80132a0:	2b44      	cmp	r3, #68	@ 0x44
 80132a2:	d906      	bls.n	80132b2 <dhcp_option+0x32>
 80132a4:	4b0d      	ldr	r3, [pc, #52]	@ (80132dc <dhcp_option+0x5c>)
 80132a6:	f240 529a 	movw	r2, #1434	@ 0x59a
 80132aa:	490d      	ldr	r1, [pc, #52]	@ (80132e0 <dhcp_option+0x60>)
 80132ac:	480d      	ldr	r0, [pc, #52]	@ (80132e4 <dhcp_option+0x64>)
 80132ae:	f003 fed3 	bl	8017058 <iprintf>
  options[options_out_len++] = option_type;
 80132b2:	88fb      	ldrh	r3, [r7, #6]
 80132b4:	1c5a      	adds	r2, r3, #1
 80132b6:	80fa      	strh	r2, [r7, #6]
 80132b8:	461a      	mov	r2, r3
 80132ba:	683b      	ldr	r3, [r7, #0]
 80132bc:	4413      	add	r3, r2
 80132be:	797a      	ldrb	r2, [r7, #5]
 80132c0:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80132c2:	88fb      	ldrh	r3, [r7, #6]
 80132c4:	1c5a      	adds	r2, r3, #1
 80132c6:	80fa      	strh	r2, [r7, #6]
 80132c8:	461a      	mov	r2, r3
 80132ca:	683b      	ldr	r3, [r7, #0]
 80132cc:	4413      	add	r3, r2
 80132ce:	793a      	ldrb	r2, [r7, #4]
 80132d0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80132d2:	88fb      	ldrh	r3, [r7, #6]
}
 80132d4:	4618      	mov	r0, r3
 80132d6:	3708      	adds	r7, #8
 80132d8:	46bd      	mov	sp, r7
 80132da:	bd80      	pop	{r7, pc}
 80132dc:	0801a998 	.word	0x0801a998
 80132e0:	0801ab2c 	.word	0x0801ab2c
 80132e4:	0801a9f8 	.word	0x0801a9f8

080132e8 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b082      	sub	sp, #8
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	4603      	mov	r3, r0
 80132f0:	6039      	str	r1, [r7, #0]
 80132f2:	80fb      	strh	r3, [r7, #6]
 80132f4:	4613      	mov	r3, r2
 80132f6:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80132f8:	88fb      	ldrh	r3, [r7, #6]
 80132fa:	2b43      	cmp	r3, #67	@ 0x43
 80132fc:	d906      	bls.n	801330c <dhcp_option_byte+0x24>
 80132fe:	4b0a      	ldr	r3, [pc, #40]	@ (8013328 <dhcp_option_byte+0x40>)
 8013300:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 8013304:	4909      	ldr	r1, [pc, #36]	@ (801332c <dhcp_option_byte+0x44>)
 8013306:	480a      	ldr	r0, [pc, #40]	@ (8013330 <dhcp_option_byte+0x48>)
 8013308:	f003 fea6 	bl	8017058 <iprintf>
  options[options_out_len++] = value;
 801330c:	88fb      	ldrh	r3, [r7, #6]
 801330e:	1c5a      	adds	r2, r3, #1
 8013310:	80fa      	strh	r2, [r7, #6]
 8013312:	461a      	mov	r2, r3
 8013314:	683b      	ldr	r3, [r7, #0]
 8013316:	4413      	add	r3, r2
 8013318:	797a      	ldrb	r2, [r7, #5]
 801331a:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801331c:	88fb      	ldrh	r3, [r7, #6]
}
 801331e:	4618      	mov	r0, r3
 8013320:	3708      	adds	r7, #8
 8013322:	46bd      	mov	sp, r7
 8013324:	bd80      	pop	{r7, pc}
 8013326:	bf00      	nop
 8013328:	0801a998 	.word	0x0801a998
 801332c:	0801ab70 	.word	0x0801ab70
 8013330:	0801a9f8 	.word	0x0801a9f8

08013334 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8013334:	b580      	push	{r7, lr}
 8013336:	b082      	sub	sp, #8
 8013338:	af00      	add	r7, sp, #0
 801333a:	4603      	mov	r3, r0
 801333c:	6039      	str	r1, [r7, #0]
 801333e:	80fb      	strh	r3, [r7, #6]
 8013340:	4613      	mov	r3, r2
 8013342:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8013344:	88fb      	ldrh	r3, [r7, #6]
 8013346:	3302      	adds	r3, #2
 8013348:	2b44      	cmp	r3, #68	@ 0x44
 801334a:	d906      	bls.n	801335a <dhcp_option_short+0x26>
 801334c:	4b0f      	ldr	r3, [pc, #60]	@ (801338c <dhcp_option_short+0x58>)
 801334e:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 8013352:	490f      	ldr	r1, [pc, #60]	@ (8013390 <dhcp_option_short+0x5c>)
 8013354:	480f      	ldr	r0, [pc, #60]	@ (8013394 <dhcp_option_short+0x60>)
 8013356:	f003 fe7f 	bl	8017058 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801335a:	88bb      	ldrh	r3, [r7, #4]
 801335c:	0a1b      	lsrs	r3, r3, #8
 801335e:	b29a      	uxth	r2, r3
 8013360:	88fb      	ldrh	r3, [r7, #6]
 8013362:	1c59      	adds	r1, r3, #1
 8013364:	80f9      	strh	r1, [r7, #6]
 8013366:	4619      	mov	r1, r3
 8013368:	683b      	ldr	r3, [r7, #0]
 801336a:	440b      	add	r3, r1
 801336c:	b2d2      	uxtb	r2, r2
 801336e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8013370:	88fb      	ldrh	r3, [r7, #6]
 8013372:	1c5a      	adds	r2, r3, #1
 8013374:	80fa      	strh	r2, [r7, #6]
 8013376:	461a      	mov	r2, r3
 8013378:	683b      	ldr	r3, [r7, #0]
 801337a:	4413      	add	r3, r2
 801337c:	88ba      	ldrh	r2, [r7, #4]
 801337e:	b2d2      	uxtb	r2, r2
 8013380:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013382:	88fb      	ldrh	r3, [r7, #6]
}
 8013384:	4618      	mov	r0, r3
 8013386:	3708      	adds	r7, #8
 8013388:	46bd      	mov	sp, r7
 801338a:	bd80      	pop	{r7, pc}
 801338c:	0801a998 	.word	0x0801a998
 8013390:	0801aba8 	.word	0x0801aba8
 8013394:	0801a9f8 	.word	0x0801a9f8

08013398 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8013398:	b580      	push	{r7, lr}
 801339a:	b084      	sub	sp, #16
 801339c:	af00      	add	r7, sp, #0
 801339e:	4603      	mov	r3, r0
 80133a0:	60b9      	str	r1, [r7, #8]
 80133a2:	607a      	str	r2, [r7, #4]
 80133a4:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80133a6:	89fb      	ldrh	r3, [r7, #14]
 80133a8:	3304      	adds	r3, #4
 80133aa:	2b44      	cmp	r3, #68	@ 0x44
 80133ac:	d906      	bls.n	80133bc <dhcp_option_long+0x24>
 80133ae:	4b19      	ldr	r3, [pc, #100]	@ (8013414 <dhcp_option_long+0x7c>)
 80133b0:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 80133b4:	4918      	ldr	r1, [pc, #96]	@ (8013418 <dhcp_option_long+0x80>)
 80133b6:	4819      	ldr	r0, [pc, #100]	@ (801341c <dhcp_option_long+0x84>)
 80133b8:	f003 fe4e 	bl	8017058 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	0e1a      	lsrs	r2, r3, #24
 80133c0:	89fb      	ldrh	r3, [r7, #14]
 80133c2:	1c59      	adds	r1, r3, #1
 80133c4:	81f9      	strh	r1, [r7, #14]
 80133c6:	4619      	mov	r1, r3
 80133c8:	68bb      	ldr	r3, [r7, #8]
 80133ca:	440b      	add	r3, r1
 80133cc:	b2d2      	uxtb	r2, r2
 80133ce:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	0c1a      	lsrs	r2, r3, #16
 80133d4:	89fb      	ldrh	r3, [r7, #14]
 80133d6:	1c59      	adds	r1, r3, #1
 80133d8:	81f9      	strh	r1, [r7, #14]
 80133da:	4619      	mov	r1, r3
 80133dc:	68bb      	ldr	r3, [r7, #8]
 80133de:	440b      	add	r3, r1
 80133e0:	b2d2      	uxtb	r2, r2
 80133e2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	0a1a      	lsrs	r2, r3, #8
 80133e8:	89fb      	ldrh	r3, [r7, #14]
 80133ea:	1c59      	adds	r1, r3, #1
 80133ec:	81f9      	strh	r1, [r7, #14]
 80133ee:	4619      	mov	r1, r3
 80133f0:	68bb      	ldr	r3, [r7, #8]
 80133f2:	440b      	add	r3, r1
 80133f4:	b2d2      	uxtb	r2, r2
 80133f6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80133f8:	89fb      	ldrh	r3, [r7, #14]
 80133fa:	1c5a      	adds	r2, r3, #1
 80133fc:	81fa      	strh	r2, [r7, #14]
 80133fe:	461a      	mov	r2, r3
 8013400:	68bb      	ldr	r3, [r7, #8]
 8013402:	4413      	add	r3, r2
 8013404:	687a      	ldr	r2, [r7, #4]
 8013406:	b2d2      	uxtb	r2, r2
 8013408:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801340a:	89fb      	ldrh	r3, [r7, #14]
}
 801340c:	4618      	mov	r0, r3
 801340e:	3710      	adds	r7, #16
 8013410:	46bd      	mov	sp, r7
 8013412:	bd80      	pop	{r7, pc}
 8013414:	0801a998 	.word	0x0801a998
 8013418:	0801abe4 	.word	0x0801abe4
 801341c:	0801a9f8 	.word	0x0801a9f8

08013420 <dhcp_option_hostname>:

#if LWIP_NETIF_HOSTNAME
static u16_t
dhcp_option_hostname(u16_t options_out_len, u8_t *options, struct netif *netif)
{
 8013420:	b580      	push	{r7, lr}
 8013422:	b088      	sub	sp, #32
 8013424:	af00      	add	r7, sp, #0
 8013426:	4603      	mov	r3, r0
 8013428:	60b9      	str	r1, [r7, #8]
 801342a:	607a      	str	r2, [r7, #4]
 801342c:	81fb      	strh	r3, [r7, #14]
  if (netif->hostname != NULL) {
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013432:	2b00      	cmp	r3, #0
 8013434:	d044      	beq.n	80134c0 <dhcp_option_hostname+0xa0>
    size_t namelen = strlen(netif->hostname);
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801343a:	4618      	mov	r0, r3
 801343c:	f7ec fed8 	bl	80001f0 <strlen>
 8013440:	6178      	str	r0, [r7, #20]
    if (namelen > 0) {
 8013442:	697b      	ldr	r3, [r7, #20]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d03b      	beq.n	80134c0 <dhcp_option_hostname+0xa0>
      size_t len;
      const char *p = netif->hostname;
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801344c:	61bb      	str	r3, [r7, #24]
      /* Shrink len to available bytes (need 2 bytes for OPTION_HOSTNAME
         and 1 byte for trailer) */
      size_t available = DHCP_OPTIONS_LEN - options_out_len - 3;
 801344e:	89fb      	ldrh	r3, [r7, #14]
 8013450:	f1c3 0341 	rsb	r3, r3, #65	@ 0x41
 8013454:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("DHCP: hostname is too long!", namelen <= available);
 8013456:	697a      	ldr	r2, [r7, #20]
 8013458:	693b      	ldr	r3, [r7, #16]
 801345a:	429a      	cmp	r2, r3
 801345c:	d906      	bls.n	801346c <dhcp_option_hostname+0x4c>
 801345e:	4b1b      	ldr	r3, [pc, #108]	@ (80134cc <dhcp_option_hostname+0xac>)
 8013460:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8013464:	491a      	ldr	r1, [pc, #104]	@ (80134d0 <dhcp_option_hostname+0xb0>)
 8013466:	481b      	ldr	r0, [pc, #108]	@ (80134d4 <dhcp_option_hostname+0xb4>)
 8013468:	f003 fdf6 	bl	8017058 <iprintf>
      len = LWIP_MIN(namelen, available);
 801346c:	693a      	ldr	r2, [r7, #16]
 801346e:	697b      	ldr	r3, [r7, #20]
 8013470:	4293      	cmp	r3, r2
 8013472:	bf28      	it	cs
 8013474:	4613      	movcs	r3, r2
 8013476:	61fb      	str	r3, [r7, #28]
      LWIP_ASSERT("DHCP: hostname is too long!", len <= 0xFF);
 8013478:	69fb      	ldr	r3, [r7, #28]
 801347a:	2bff      	cmp	r3, #255	@ 0xff
 801347c:	d906      	bls.n	801348c <dhcp_option_hostname+0x6c>
 801347e:	4b13      	ldr	r3, [pc, #76]	@ (80134cc <dhcp_option_hostname+0xac>)
 8013480:	f240 52cd 	movw	r2, #1485	@ 0x5cd
 8013484:	4912      	ldr	r1, [pc, #72]	@ (80134d0 <dhcp_option_hostname+0xb0>)
 8013486:	4813      	ldr	r0, [pc, #76]	@ (80134d4 <dhcp_option_hostname+0xb4>)
 8013488:	f003 fde6 	bl	8017058 <iprintf>
      options_out_len = dhcp_option(options_out_len, options, DHCP_OPTION_HOSTNAME, (u8_t)len);
 801348c:	69fb      	ldr	r3, [r7, #28]
 801348e:	b2db      	uxtb	r3, r3
 8013490:	89f8      	ldrh	r0, [r7, #14]
 8013492:	220c      	movs	r2, #12
 8013494:	68b9      	ldr	r1, [r7, #8]
 8013496:	f7ff fef3 	bl	8013280 <dhcp_option>
 801349a:	4603      	mov	r3, r0
 801349c:	81fb      	strh	r3, [r7, #14]
      while (len--) {
 801349e:	e00a      	b.n	80134b6 <dhcp_option_hostname+0x96>
        options_out_len = dhcp_option_byte(options_out_len, options, *p++);
 80134a0:	69bb      	ldr	r3, [r7, #24]
 80134a2:	1c5a      	adds	r2, r3, #1
 80134a4:	61ba      	str	r2, [r7, #24]
 80134a6:	781a      	ldrb	r2, [r3, #0]
 80134a8:	89fb      	ldrh	r3, [r7, #14]
 80134aa:	68b9      	ldr	r1, [r7, #8]
 80134ac:	4618      	mov	r0, r3
 80134ae:	f7ff ff1b 	bl	80132e8 <dhcp_option_byte>
 80134b2:	4603      	mov	r3, r0
 80134b4:	81fb      	strh	r3, [r7, #14]
      while (len--) {
 80134b6:	69fb      	ldr	r3, [r7, #28]
 80134b8:	1e5a      	subs	r2, r3, #1
 80134ba:	61fa      	str	r2, [r7, #28]
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d1ef      	bne.n	80134a0 <dhcp_option_hostname+0x80>
      }
    }
  }
  return options_out_len;
 80134c0:	89fb      	ldrh	r3, [r7, #14]
}
 80134c2:	4618      	mov	r0, r3
 80134c4:	3720      	adds	r7, #32
 80134c6:	46bd      	mov	sp, r7
 80134c8:	bd80      	pop	{r7, pc}
 80134ca:	bf00      	nop
 80134cc:	0801a998 	.word	0x0801a998
 80134d0:	0801ac20 	.word	0x0801ac20
 80134d4:	0801a9f8 	.word	0x0801a9f8

080134d8 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 80134d8:	b580      	push	{r7, lr}
 80134da:	b090      	sub	sp, #64	@ 0x40
 80134dc:	af00      	add	r7, sp, #0
 80134de:	6078      	str	r0, [r7, #4]
 80134e0:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 80134e2:	2300      	movs	r3, #0
 80134e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 80134e6:	2300      	movs	r3, #0
 80134e8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80134ea:	2208      	movs	r2, #8
 80134ec:	2100      	movs	r1, #0
 80134ee:	48b5      	ldr	r0, [pc, #724]	@ (80137c4 <dhcp_parse_reply+0x2ec>)
 80134f0:	f003 ff44 	bl	801737c <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	895b      	ldrh	r3, [r3, #10]
 80134f8:	2b2b      	cmp	r3, #43	@ 0x2b
 80134fa:	d802      	bhi.n	8013502 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80134fc:	f06f 0301 	mvn.w	r3, #1
 8013500:	e2a7      	b.n	8013a52 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	685b      	ldr	r3, [r3, #4]
 8013506:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8013508:	23f0      	movs	r3, #240	@ 0xf0
 801350a:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	891b      	ldrh	r3, [r3, #8]
 8013510:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8013516:	e00c      	b.n	8013532 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8013518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801351a:	895b      	ldrh	r3, [r3, #10]
 801351c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801351e:	1ad3      	subs	r3, r2, r3
 8013520:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8013522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013524:	895b      	ldrh	r3, [r3, #10]
 8013526:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8013528:	1ad3      	subs	r3, r2, r3
 801352a:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 801352c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8013532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013534:	2b00      	cmp	r3, #0
 8013536:	d004      	beq.n	8013542 <dhcp_parse_reply+0x6a>
 8013538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801353a:	895b      	ldrh	r3, [r3, #10]
 801353c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801353e:	429a      	cmp	r2, r3
 8013540:	d2ea      	bcs.n	8013518 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8013542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013544:	2b00      	cmp	r3, #0
 8013546:	d102      	bne.n	801354e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8013548:	f06f 0301 	mvn.w	r3, #1
 801354c:	e281      	b.n	8013a52 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 801354e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013550:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 8013552:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8013554:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 8013556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013558:	685b      	ldr	r3, [r3, #4]
 801355a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801355c:	e239      	b.n	80139d2 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 801355e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013560:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013562:	4413      	add	r3, r2
 8013564:	781b      	ldrb	r3, [r3, #0]
 8013566:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8013568:	2300      	movs	r3, #0
 801356a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 801356e:	f04f 33ff 	mov.w	r3, #4294967295
 8013572:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8013574:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013576:	3302      	adds	r3, #2
 8013578:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801357a:	8bfa      	ldrh	r2, [r7, #30]
 801357c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801357e:	429a      	cmp	r2, r3
 8013580:	d202      	bcs.n	8013588 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8013582:	f06f 0301 	mvn.w	r3, #1
 8013586:	e264      	b.n	8013a52 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8013588:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801358a:	3301      	adds	r3, #1
 801358c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801358e:	8952      	ldrh	r2, [r2, #10]
 8013590:	4293      	cmp	r3, r2
 8013592:	da07      	bge.n	80135a4 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8013594:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013596:	3301      	adds	r3, #1
 8013598:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801359a:	4413      	add	r3, r2
 801359c:	781b      	ldrb	r3, [r3, #0]
 801359e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80135a2:	e00b      	b.n	80135bc <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80135a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d004      	beq.n	80135b6 <dhcp_parse_reply+0xde>
 80135ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	685b      	ldr	r3, [r3, #4]
 80135b2:	781b      	ldrb	r3, [r3, #0]
 80135b4:	e000      	b.n	80135b8 <dhcp_parse_reply+0xe0>
 80135b6:	2300      	movs	r3, #0
 80135b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 80135bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80135c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 80135c4:	7dfb      	ldrb	r3, [r7, #23]
 80135c6:	2b3b      	cmp	r3, #59	@ 0x3b
 80135c8:	f200 812c 	bhi.w	8013824 <dhcp_parse_reply+0x34c>
 80135cc:	a201      	add	r2, pc, #4	@ (adr r2, 80135d4 <dhcp_parse_reply+0xfc>)
 80135ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135d2:	bf00      	nop
 80135d4:	080136c5 	.word	0x080136c5
 80135d8:	080136d5 	.word	0x080136d5
 80135dc:	08013825 	.word	0x08013825
 80135e0:	080136f7 	.word	0x080136f7
 80135e4:	08013825 	.word	0x08013825
 80135e8:	08013825 	.word	0x08013825
 80135ec:	08013825 	.word	0x08013825
 80135f0:	08013825 	.word	0x08013825
 80135f4:	08013825 	.word	0x08013825
 80135f8:	08013825 	.word	0x08013825
 80135fc:	08013825 	.word	0x08013825
 8013600:	08013825 	.word	0x08013825
 8013604:	08013825 	.word	0x08013825
 8013608:	08013825 	.word	0x08013825
 801360c:	08013825 	.word	0x08013825
 8013610:	08013825 	.word	0x08013825
 8013614:	08013825 	.word	0x08013825
 8013618:	08013825 	.word	0x08013825
 801361c:	08013825 	.word	0x08013825
 8013620:	08013825 	.word	0x08013825
 8013624:	08013825 	.word	0x08013825
 8013628:	08013825 	.word	0x08013825
 801362c:	08013825 	.word	0x08013825
 8013630:	08013825 	.word	0x08013825
 8013634:	08013825 	.word	0x08013825
 8013638:	08013825 	.word	0x08013825
 801363c:	08013825 	.word	0x08013825
 8013640:	08013825 	.word	0x08013825
 8013644:	08013825 	.word	0x08013825
 8013648:	08013825 	.word	0x08013825
 801364c:	08013825 	.word	0x08013825
 8013650:	08013825 	.word	0x08013825
 8013654:	08013825 	.word	0x08013825
 8013658:	08013825 	.word	0x08013825
 801365c:	08013825 	.word	0x08013825
 8013660:	08013825 	.word	0x08013825
 8013664:	08013825 	.word	0x08013825
 8013668:	08013825 	.word	0x08013825
 801366c:	08013825 	.word	0x08013825
 8013670:	08013825 	.word	0x08013825
 8013674:	08013825 	.word	0x08013825
 8013678:	08013825 	.word	0x08013825
 801367c:	08013825 	.word	0x08013825
 8013680:	08013825 	.word	0x08013825
 8013684:	08013825 	.word	0x08013825
 8013688:	08013825 	.word	0x08013825
 801368c:	08013825 	.word	0x08013825
 8013690:	08013825 	.word	0x08013825
 8013694:	08013825 	.word	0x08013825
 8013698:	08013825 	.word	0x08013825
 801369c:	08013825 	.word	0x08013825
 80136a0:	08013723 	.word	0x08013723
 80136a4:	08013745 	.word	0x08013745
 80136a8:	08013781 	.word	0x08013781
 80136ac:	080137a3 	.word	0x080137a3
 80136b0:	08013825 	.word	0x08013825
 80136b4:	08013825 	.word	0x08013825
 80136b8:	08013825 	.word	0x08013825
 80136bc:	080137e1 	.word	0x080137e1
 80136c0:	08013803 	.word	0x08013803
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80136c4:	2300      	movs	r3, #0
 80136c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80136ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80136ce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 80136d2:	e0ab      	b.n	801382c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80136d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80136d8:	2b04      	cmp	r3, #4
 80136da:	d009      	beq.n	80136f0 <dhcp_parse_reply+0x218>
 80136dc:	4b3a      	ldr	r3, [pc, #232]	@ (80137c8 <dhcp_parse_reply+0x2f0>)
 80136de:	f240 622e 	movw	r2, #1582	@ 0x62e
 80136e2:	493a      	ldr	r1, [pc, #232]	@ (80137cc <dhcp_parse_reply+0x2f4>)
 80136e4:	483a      	ldr	r0, [pc, #232]	@ (80137d0 <dhcp_parse_reply+0x2f8>)
 80136e6:	f003 fcb7 	bl	8017058 <iprintf>
 80136ea:	f06f 0305 	mvn.w	r3, #5
 80136ee:	e1b0      	b.n	8013a52 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80136f0:	2306      	movs	r3, #6
 80136f2:	623b      	str	r3, [r7, #32]
        break;
 80136f4:	e09a      	b.n	801382c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 80136f6:	2304      	movs	r3, #4
 80136f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80136fc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8013700:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013704:	429a      	cmp	r2, r3
 8013706:	d209      	bcs.n	801371c <dhcp_parse_reply+0x244>
 8013708:	4b2f      	ldr	r3, [pc, #188]	@ (80137c8 <dhcp_parse_reply+0x2f0>)
 801370a:	f240 6233 	movw	r2, #1587	@ 0x633
 801370e:	4931      	ldr	r1, [pc, #196]	@ (80137d4 <dhcp_parse_reply+0x2fc>)
 8013710:	482f      	ldr	r0, [pc, #188]	@ (80137d0 <dhcp_parse_reply+0x2f8>)
 8013712:	f003 fca1 	bl	8017058 <iprintf>
 8013716:	f06f 0305 	mvn.w	r3, #5
 801371a:	e19a      	b.n	8013a52 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801371c:	2307      	movs	r3, #7
 801371e:	623b      	str	r3, [r7, #32]
        break;
 8013720:	e084      	b.n	801382c <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013722:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013726:	2b04      	cmp	r3, #4
 8013728:	d009      	beq.n	801373e <dhcp_parse_reply+0x266>
 801372a:	4b27      	ldr	r3, [pc, #156]	@ (80137c8 <dhcp_parse_reply+0x2f0>)
 801372c:	f240 6241 	movw	r2, #1601	@ 0x641
 8013730:	4926      	ldr	r1, [pc, #152]	@ (80137cc <dhcp_parse_reply+0x2f4>)
 8013732:	4827      	ldr	r0, [pc, #156]	@ (80137d0 <dhcp_parse_reply+0x2f8>)
 8013734:	f003 fc90 	bl	8017058 <iprintf>
 8013738:	f06f 0305 	mvn.w	r3, #5
 801373c:	e189      	b.n	8013a52 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801373e:	2303      	movs	r3, #3
 8013740:	623b      	str	r3, [r7, #32]
        break;
 8013742:	e073      	b.n	801382c <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8013744:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013748:	2b01      	cmp	r3, #1
 801374a:	d009      	beq.n	8013760 <dhcp_parse_reply+0x288>
 801374c:	4b1e      	ldr	r3, [pc, #120]	@ (80137c8 <dhcp_parse_reply+0x2f0>)
 801374e:	f240 624f 	movw	r2, #1615	@ 0x64f
 8013752:	4921      	ldr	r1, [pc, #132]	@ (80137d8 <dhcp_parse_reply+0x300>)
 8013754:	481e      	ldr	r0, [pc, #120]	@ (80137d0 <dhcp_parse_reply+0x2f8>)
 8013756:	f003 fc7f 	bl	8017058 <iprintf>
 801375a:	f06f 0305 	mvn.w	r3, #5
 801375e:	e178      	b.n	8013a52 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8013760:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013762:	2bf0      	cmp	r3, #240	@ 0xf0
 8013764:	d009      	beq.n	801377a <dhcp_parse_reply+0x2a2>
 8013766:	4b18      	ldr	r3, [pc, #96]	@ (80137c8 <dhcp_parse_reply+0x2f0>)
 8013768:	f240 6251 	movw	r2, #1617	@ 0x651
 801376c:	491b      	ldr	r1, [pc, #108]	@ (80137dc <dhcp_parse_reply+0x304>)
 801376e:	4818      	ldr	r0, [pc, #96]	@ (80137d0 <dhcp_parse_reply+0x2f8>)
 8013770:	f003 fc72 	bl	8017058 <iprintf>
 8013774:	f06f 0305 	mvn.w	r3, #5
 8013778:	e16b      	b.n	8013a52 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801377a:	2300      	movs	r3, #0
 801377c:	623b      	str	r3, [r7, #32]
        break;
 801377e:	e055      	b.n	801382c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8013780:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013784:	2b01      	cmp	r3, #1
 8013786:	d009      	beq.n	801379c <dhcp_parse_reply+0x2c4>
 8013788:	4b0f      	ldr	r3, [pc, #60]	@ (80137c8 <dhcp_parse_reply+0x2f0>)
 801378a:	f240 6255 	movw	r2, #1621	@ 0x655
 801378e:	4912      	ldr	r1, [pc, #72]	@ (80137d8 <dhcp_parse_reply+0x300>)
 8013790:	480f      	ldr	r0, [pc, #60]	@ (80137d0 <dhcp_parse_reply+0x2f8>)
 8013792:	f003 fc61 	bl	8017058 <iprintf>
 8013796:	f06f 0305 	mvn.w	r3, #5
 801379a:	e15a      	b.n	8013a52 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801379c:	2301      	movs	r3, #1
 801379e:	623b      	str	r3, [r7, #32]
        break;
 80137a0:	e044      	b.n	801382c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80137a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80137a6:	2b04      	cmp	r3, #4
 80137a8:	d009      	beq.n	80137be <dhcp_parse_reply+0x2e6>
 80137aa:	4b07      	ldr	r3, [pc, #28]	@ (80137c8 <dhcp_parse_reply+0x2f0>)
 80137ac:	f240 6259 	movw	r2, #1625	@ 0x659
 80137b0:	4906      	ldr	r1, [pc, #24]	@ (80137cc <dhcp_parse_reply+0x2f4>)
 80137b2:	4807      	ldr	r0, [pc, #28]	@ (80137d0 <dhcp_parse_reply+0x2f8>)
 80137b4:	f003 fc50 	bl	8017058 <iprintf>
 80137b8:	f06f 0305 	mvn.w	r3, #5
 80137bc:	e149      	b.n	8013a52 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80137be:	2302      	movs	r3, #2
 80137c0:	623b      	str	r3, [r7, #32]
        break;
 80137c2:	e033      	b.n	801382c <dhcp_parse_reply+0x354>
 80137c4:	2000cb40 	.word	0x2000cb40
 80137c8:	0801a998 	.word	0x0801a998
 80137cc:	0801ac3c 	.word	0x0801ac3c
 80137d0:	0801a9f8 	.word	0x0801a9f8
 80137d4:	0801ac48 	.word	0x0801ac48
 80137d8:	0801ac5c 	.word	0x0801ac5c
 80137dc:	0801ac68 	.word	0x0801ac68
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80137e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80137e4:	2b04      	cmp	r3, #4
 80137e6:	d009      	beq.n	80137fc <dhcp_parse_reply+0x324>
 80137e8:	4b9c      	ldr	r3, [pc, #624]	@ (8013a5c <dhcp_parse_reply+0x584>)
 80137ea:	f240 625d 	movw	r2, #1629	@ 0x65d
 80137ee:	499c      	ldr	r1, [pc, #624]	@ (8013a60 <dhcp_parse_reply+0x588>)
 80137f0:	489c      	ldr	r0, [pc, #624]	@ (8013a64 <dhcp_parse_reply+0x58c>)
 80137f2:	f003 fc31 	bl	8017058 <iprintf>
 80137f6:	f06f 0305 	mvn.w	r3, #5
 80137fa:	e12a      	b.n	8013a52 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 80137fc:	2304      	movs	r3, #4
 80137fe:	623b      	str	r3, [r7, #32]
        break;
 8013800:	e014      	b.n	801382c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013802:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013806:	2b04      	cmp	r3, #4
 8013808:	d009      	beq.n	801381e <dhcp_parse_reply+0x346>
 801380a:	4b94      	ldr	r3, [pc, #592]	@ (8013a5c <dhcp_parse_reply+0x584>)
 801380c:	f240 6261 	movw	r2, #1633	@ 0x661
 8013810:	4993      	ldr	r1, [pc, #588]	@ (8013a60 <dhcp_parse_reply+0x588>)
 8013812:	4894      	ldr	r0, [pc, #592]	@ (8013a64 <dhcp_parse_reply+0x58c>)
 8013814:	f003 fc20 	bl	8017058 <iprintf>
 8013818:	f06f 0305 	mvn.w	r3, #5
 801381c:	e119      	b.n	8013a52 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 801381e:	2305      	movs	r3, #5
 8013820:	623b      	str	r3, [r7, #32]
        break;
 8013822:	e003      	b.n	801382c <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8013824:	2300      	movs	r3, #0
 8013826:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801382a:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801382c:	7dfb      	ldrb	r3, [r7, #23]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d103      	bne.n	801383a <dhcp_parse_reply+0x362>
      offset++;
 8013832:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013834:	3301      	adds	r3, #1
 8013836:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8013838:	e0a1      	b.n	801397e <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801383a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801383c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013840:	4413      	add	r3, r2
 8013842:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8013846:	4293      	cmp	r3, r2
 8013848:	dd02      	ble.n	8013850 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 801384a:	f06f 0301 	mvn.w	r3, #1
 801384e:	e100      	b.n	8013a52 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8013850:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013854:	b29a      	uxth	r2, r3
 8013856:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013858:	4413      	add	r3, r2
 801385a:	b29b      	uxth	r3, r3
 801385c:	3302      	adds	r3, #2
 801385e:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 8013860:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013864:	2b00      	cmp	r3, #0
 8013866:	f000 808a 	beq.w	801397e <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 801386a:	2300      	movs	r3, #0
 801386c:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801386e:	6a3b      	ldr	r3, [r7, #32]
 8013870:	2b00      	cmp	r3, #0
 8013872:	db02      	blt.n	801387a <dhcp_parse_reply+0x3a2>
 8013874:	6a3b      	ldr	r3, [r7, #32]
 8013876:	2b07      	cmp	r3, #7
 8013878:	dd06      	ble.n	8013888 <dhcp_parse_reply+0x3b0>
 801387a:	4b78      	ldr	r3, [pc, #480]	@ (8013a5c <dhcp_parse_reply+0x584>)
 801387c:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 8013880:	4979      	ldr	r1, [pc, #484]	@ (8013a68 <dhcp_parse_reply+0x590>)
 8013882:	4878      	ldr	r0, [pc, #480]	@ (8013a64 <dhcp_parse_reply+0x58c>)
 8013884:	f003 fbe8 	bl	8017058 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8013888:	4a78      	ldr	r2, [pc, #480]	@ (8013a6c <dhcp_parse_reply+0x594>)
 801388a:	6a3b      	ldr	r3, [r7, #32]
 801388c:	4413      	add	r3, r2
 801388e:	781b      	ldrb	r3, [r3, #0]
 8013890:	2b00      	cmp	r3, #0
 8013892:	d174      	bne.n	801397e <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8013894:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013898:	2b04      	cmp	r3, #4
 801389a:	bf28      	it	cs
 801389c:	2304      	movcs	r3, #4
 801389e:	b2db      	uxtb	r3, r3
 80138a0:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80138a2:	8bfb      	ldrh	r3, [r7, #30]
 80138a4:	8aba      	ldrh	r2, [r7, #20]
 80138a6:	f107 0108 	add.w	r1, r7, #8
 80138aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80138ac:	f7f8 faf0 	bl	800be90 <pbuf_copy_partial>
 80138b0:	4603      	mov	r3, r0
 80138b2:	461a      	mov	r2, r3
 80138b4:	8abb      	ldrh	r3, [r7, #20]
 80138b6:	4293      	cmp	r3, r2
 80138b8:	d002      	beq.n	80138c0 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 80138ba:	f06f 0301 	mvn.w	r3, #1
 80138be:	e0c8      	b.n	8013a52 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 80138c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80138c4:	2b04      	cmp	r3, #4
 80138c6:	d933      	bls.n	8013930 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80138c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80138cc:	f003 0303 	and.w	r3, r3, #3
 80138d0:	b2db      	uxtb	r3, r3
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d009      	beq.n	80138ea <dhcp_parse_reply+0x412>
 80138d6:	4b61      	ldr	r3, [pc, #388]	@ (8013a5c <dhcp_parse_reply+0x584>)
 80138d8:	f240 6281 	movw	r2, #1665	@ 0x681
 80138dc:	4964      	ldr	r1, [pc, #400]	@ (8013a70 <dhcp_parse_reply+0x598>)
 80138de:	4861      	ldr	r0, [pc, #388]	@ (8013a64 <dhcp_parse_reply+0x58c>)
 80138e0:	f003 fbba 	bl	8017058 <iprintf>
 80138e4:	f06f 0305 	mvn.w	r3, #5
 80138e8:	e0b3      	b.n	8013a52 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 80138ea:	4a60      	ldr	r2, [pc, #384]	@ (8013a6c <dhcp_parse_reply+0x594>)
 80138ec:	6a3b      	ldr	r3, [r7, #32]
 80138ee:	4413      	add	r3, r2
 80138f0:	2201      	movs	r2, #1
 80138f2:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80138f4:	68bb      	ldr	r3, [r7, #8]
 80138f6:	4618      	mov	r0, r3
 80138f8:	f7f6 fb85 	bl	800a006 <lwip_htonl>
 80138fc:	4602      	mov	r2, r0
 80138fe:	495d      	ldr	r1, [pc, #372]	@ (8013a74 <dhcp_parse_reply+0x59c>)
 8013900:	6a3b      	ldr	r3, [r7, #32]
 8013902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8013906:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801390a:	3b04      	subs	r3, #4
 801390c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8013910:	8bfb      	ldrh	r3, [r7, #30]
 8013912:	3304      	adds	r3, #4
 8013914:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8013916:	8a7a      	ldrh	r2, [r7, #18]
 8013918:	8bfb      	ldrh	r3, [r7, #30]
 801391a:	429a      	cmp	r2, r3
 801391c:	d202      	bcs.n	8013924 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 801391e:	f06f 0301 	mvn.w	r3, #1
 8013922:	e096      	b.n	8013a52 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8013924:	8a7b      	ldrh	r3, [r7, #18]
 8013926:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8013928:	6a3b      	ldr	r3, [r7, #32]
 801392a:	3301      	adds	r3, #1
 801392c:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801392e:	e79e      	b.n	801386e <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8013930:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013934:	2b04      	cmp	r3, #4
 8013936:	d106      	bne.n	8013946 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8013938:	68bb      	ldr	r3, [r7, #8]
 801393a:	4618      	mov	r0, r3
 801393c:	f7f6 fb63 	bl	800a006 <lwip_htonl>
 8013940:	4603      	mov	r3, r0
 8013942:	60bb      	str	r3, [r7, #8]
 8013944:	e011      	b.n	801396a <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8013946:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801394a:	2b01      	cmp	r3, #1
 801394c:	d009      	beq.n	8013962 <dhcp_parse_reply+0x48a>
 801394e:	4b43      	ldr	r3, [pc, #268]	@ (8013a5c <dhcp_parse_reply+0x584>)
 8013950:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8013954:	4948      	ldr	r1, [pc, #288]	@ (8013a78 <dhcp_parse_reply+0x5a0>)
 8013956:	4843      	ldr	r0, [pc, #268]	@ (8013a64 <dhcp_parse_reply+0x58c>)
 8013958:	f003 fb7e 	bl	8017058 <iprintf>
 801395c:	f06f 0305 	mvn.w	r3, #5
 8013960:	e077      	b.n	8013a52 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8013962:	f107 0308 	add.w	r3, r7, #8
 8013966:	781b      	ldrb	r3, [r3, #0]
 8013968:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801396a:	4a40      	ldr	r2, [pc, #256]	@ (8013a6c <dhcp_parse_reply+0x594>)
 801396c:	6a3b      	ldr	r3, [r7, #32]
 801396e:	4413      	add	r3, r2
 8013970:	2201      	movs	r2, #1
 8013972:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8013974:	68ba      	ldr	r2, [r7, #8]
 8013976:	493f      	ldr	r1, [pc, #252]	@ (8013a74 <dhcp_parse_reply+0x59c>)
 8013978:	6a3b      	ldr	r3, [r7, #32]
 801397a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801397e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013980:	895b      	ldrh	r3, [r3, #10]
 8013982:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8013984:	429a      	cmp	r2, r3
 8013986:	d324      	bcc.n	80139d2 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8013988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801398a:	895b      	ldrh	r3, [r3, #10]
 801398c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801398e:	1ad3      	subs	r3, r2, r3
 8013990:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8013992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013994:	895b      	ldrh	r3, [r3, #10]
 8013996:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8013998:	1ad3      	subs	r3, r2, r3
 801399a:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 801399c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801399e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80139a0:	429a      	cmp	r2, r3
 80139a2:	d213      	bcs.n	80139cc <dhcp_parse_reply+0x4f4>
        q = q->next;
 80139a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80139aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d109      	bne.n	80139c4 <dhcp_parse_reply+0x4ec>
 80139b0:	4b2a      	ldr	r3, [pc, #168]	@ (8013a5c <dhcp_parse_reply+0x584>)
 80139b2:	f240 629d 	movw	r2, #1693	@ 0x69d
 80139b6:	4931      	ldr	r1, [pc, #196]	@ (8013a7c <dhcp_parse_reply+0x5a4>)
 80139b8:	482a      	ldr	r0, [pc, #168]	@ (8013a64 <dhcp_parse_reply+0x58c>)
 80139ba:	f003 fb4d 	bl	8017058 <iprintf>
 80139be:	f06f 0305 	mvn.w	r3, #5
 80139c2:	e046      	b.n	8013a52 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 80139c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139c6:	685b      	ldr	r3, [r3, #4]
 80139c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80139ca:	e002      	b.n	80139d2 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80139cc:	f06f 0301 	mvn.w	r3, #1
 80139d0:	e03f      	b.n	8013a52 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80139d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d00a      	beq.n	80139ee <dhcp_parse_reply+0x516>
 80139d8:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80139da:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80139dc:	429a      	cmp	r2, r3
 80139de:	d206      	bcs.n	80139ee <dhcp_parse_reply+0x516>
 80139e0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80139e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80139e4:	4413      	add	r3, r2
 80139e6:	781b      	ldrb	r3, [r3, #0]
 80139e8:	2bff      	cmp	r3, #255	@ 0xff
 80139ea:	f47f adb8 	bne.w	801355e <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80139ee:	4b1f      	ldr	r3, [pc, #124]	@ (8013a6c <dhcp_parse_reply+0x594>)
 80139f0:	781b      	ldrb	r3, [r3, #0]
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d018      	beq.n	8013a28 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80139f6:	4b1f      	ldr	r3, [pc, #124]	@ (8013a74 <dhcp_parse_reply+0x59c>)
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80139fc:	4b1b      	ldr	r3, [pc, #108]	@ (8013a6c <dhcp_parse_reply+0x594>)
 80139fe:	2200      	movs	r2, #0
 8013a00:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	2b01      	cmp	r3, #1
 8013a06:	d102      	bne.n	8013a0e <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8013a08:	2301      	movs	r3, #1
 8013a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013a0c:	e00c      	b.n	8013a28 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	2b02      	cmp	r3, #2
 8013a12:	d102      	bne.n	8013a1a <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8013a14:	2301      	movs	r3, #1
 8013a16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013a18:	e006      	b.n	8013a28 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	2b03      	cmp	r3, #3
 8013a1e:	d103      	bne.n	8013a28 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8013a20:	2301      	movs	r3, #1
 8013a22:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 8013a24:	2301      	movs	r3, #1
 8013a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8013a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d006      	beq.n	8013a3c <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8013a2e:	2300      	movs	r3, #0
 8013a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 8013a32:	236c      	movs	r3, #108	@ 0x6c
 8013a34:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8013a36:	23ec      	movs	r3, #236	@ 0xec
 8013a38:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8013a3a:	e56a      	b.n	8013512 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8013a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d006      	beq.n	8013a50 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8013a42:	2300      	movs	r3, #0
 8013a44:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 8013a46:	232c      	movs	r3, #44	@ 0x2c
 8013a48:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8013a4a:	236c      	movs	r3, #108	@ 0x6c
 8013a4c:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 8013a4e:	e560      	b.n	8013512 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8013a50:	2300      	movs	r3, #0
}
 8013a52:	4618      	mov	r0, r3
 8013a54:	3740      	adds	r7, #64	@ 0x40
 8013a56:	46bd      	mov	sp, r7
 8013a58:	bd80      	pop	{r7, pc}
 8013a5a:	bf00      	nop
 8013a5c:	0801a998 	.word	0x0801a998
 8013a60:	0801ac3c 	.word	0x0801ac3c
 8013a64:	0801a9f8 	.word	0x0801a9f8
 8013a68:	0801ac80 	.word	0x0801ac80
 8013a6c:	2000cb40 	.word	0x2000cb40
 8013a70:	0801ac94 	.word	0x0801ac94
 8013a74:	2000cb20 	.word	0x2000cb20
 8013a78:	0801acac 	.word	0x0801acac
 8013a7c:	0801acc0 	.word	0x0801acc0

08013a80 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8013a80:	b580      	push	{r7, lr}
 8013a82:	b08a      	sub	sp, #40	@ 0x28
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	60f8      	str	r0, [r7, #12]
 8013a88:	60b9      	str	r1, [r7, #8]
 8013a8a:	607a      	str	r2, [r7, #4]
 8013a8c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8013a8e:	4b60      	ldr	r3, [pc, #384]	@ (8013c10 <dhcp_recv+0x190>)
 8013a90:	685b      	ldr	r3, [r3, #4]
 8013a92:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013a94:	6a3b      	ldr	r3, [r7, #32]
 8013a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a98:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	685b      	ldr	r3, [r3, #4]
 8013a9e:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8013aa0:	69fb      	ldr	r3, [r7, #28]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	f000 809d 	beq.w	8013be2 <dhcp_recv+0x162>
 8013aa8:	69fb      	ldr	r3, [r7, #28]
 8013aaa:	791b      	ldrb	r3, [r3, #4]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	f000 8098 	beq.w	8013be2 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	895b      	ldrh	r3, [r3, #10]
 8013ab6:	2b2b      	cmp	r3, #43	@ 0x2b
 8013ab8:	f240 8095 	bls.w	8013be6 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8013abc:	69bb      	ldr	r3, [r7, #24]
 8013abe:	781b      	ldrb	r3, [r3, #0]
 8013ac0:	2b02      	cmp	r3, #2
 8013ac2:	f040 8092 	bne.w	8013bea <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013ac6:	2300      	movs	r3, #0
 8013ac8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013acc:	e012      	b.n	8013af4 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8013ace:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013ad2:	6a3a      	ldr	r2, [r7, #32]
 8013ad4:	4413      	add	r3, r2
 8013ad6:	f893 2036 	ldrb.w	r2, [r3, #54]	@ 0x36
 8013ada:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013ade:	69b9      	ldr	r1, [r7, #24]
 8013ae0:	440b      	add	r3, r1
 8013ae2:	7f1b      	ldrb	r3, [r3, #28]
 8013ae4:	429a      	cmp	r2, r3
 8013ae6:	f040 8082 	bne.w	8013bee <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013aea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013aee:	3301      	adds	r3, #1
 8013af0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013af4:	6a3b      	ldr	r3, [r7, #32]
 8013af6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013afa:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8013afe:	429a      	cmp	r2, r3
 8013b00:	d203      	bcs.n	8013b0a <dhcp_recv+0x8a>
 8013b02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013b06:	2b05      	cmp	r3, #5
 8013b08:	d9e1      	bls.n	8013ace <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8013b0a:	69bb      	ldr	r3, [r7, #24]
 8013b0c:	685b      	ldr	r3, [r3, #4]
 8013b0e:	4618      	mov	r0, r3
 8013b10:	f7f6 fa79 	bl	800a006 <lwip_htonl>
 8013b14:	4602      	mov	r2, r0
 8013b16:	69fb      	ldr	r3, [r7, #28]
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	429a      	cmp	r2, r3
 8013b1c:	d169      	bne.n	8013bf2 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8013b1e:	69f9      	ldr	r1, [r7, #28]
 8013b20:	6878      	ldr	r0, [r7, #4]
 8013b22:	f7ff fcd9 	bl	80134d8 <dhcp_parse_reply>
 8013b26:	4603      	mov	r3, r0
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d164      	bne.n	8013bf6 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8013b2c:	4b39      	ldr	r3, [pc, #228]	@ (8013c14 <dhcp_recv+0x194>)
 8013b2e:	785b      	ldrb	r3, [r3, #1]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d062      	beq.n	8013bfa <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	685b      	ldr	r3, [r3, #4]
 8013b38:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8013b3a:	4b37      	ldr	r3, [pc, #220]	@ (8013c18 <dhcp_recv+0x198>)
 8013b3c:	685b      	ldr	r3, [r3, #4]
 8013b3e:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8013b40:	7cfb      	ldrb	r3, [r7, #19]
 8013b42:	2b05      	cmp	r3, #5
 8013b44:	d12a      	bne.n	8013b9c <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8013b46:	69fb      	ldr	r3, [r7, #28]
 8013b48:	795b      	ldrb	r3, [r3, #5]
 8013b4a:	2b01      	cmp	r3, #1
 8013b4c:	d112      	bne.n	8013b74 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8013b4e:	6979      	ldr	r1, [r7, #20]
 8013b50:	6a38      	ldr	r0, [r7, #32]
 8013b52:	f7fe fda3 	bl	801269c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8013b56:	6a3b      	ldr	r3, [r7, #32]
 8013b58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013b5c:	f003 0308 	and.w	r3, r3, #8
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d003      	beq.n	8013b6c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8013b64:	6a38      	ldr	r0, [r7, #32]
 8013b66:	f7fe fb0b 	bl	8012180 <dhcp_check>
 8013b6a:	e049      	b.n	8013c00 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8013b6c:	6a38      	ldr	r0, [r7, #32]
 8013b6e:	f7fe fff3 	bl	8012b58 <dhcp_bind>
 8013b72:	e045      	b.n	8013c00 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8013b74:	69fb      	ldr	r3, [r7, #28]
 8013b76:	795b      	ldrb	r3, [r3, #5]
 8013b78:	2b03      	cmp	r3, #3
 8013b7a:	d007      	beq.n	8013b8c <dhcp_recv+0x10c>
 8013b7c:	69fb      	ldr	r3, [r7, #28]
 8013b7e:	795b      	ldrb	r3, [r3, #5]
 8013b80:	2b04      	cmp	r3, #4
 8013b82:	d003      	beq.n	8013b8c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8013b84:	69fb      	ldr	r3, [r7, #28]
 8013b86:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8013b88:	2b05      	cmp	r3, #5
 8013b8a:	d139      	bne.n	8013c00 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8013b8c:	6979      	ldr	r1, [r7, #20]
 8013b8e:	6a38      	ldr	r0, [r7, #32]
 8013b90:	f7fe fd84 	bl	801269c <dhcp_handle_ack>
      dhcp_bind(netif);
 8013b94:	6a38      	ldr	r0, [r7, #32]
 8013b96:	f7fe ffdf 	bl	8012b58 <dhcp_bind>
 8013b9a:	e031      	b.n	8013c00 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8013b9c:	7cfb      	ldrb	r3, [r7, #19]
 8013b9e:	2b06      	cmp	r3, #6
 8013ba0:	d113      	bne.n	8013bca <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013ba2:	69fb      	ldr	r3, [r7, #28]
 8013ba4:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8013ba6:	2b03      	cmp	r3, #3
 8013ba8:	d00b      	beq.n	8013bc2 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013baa:	69fb      	ldr	r3, [r7, #28]
 8013bac:	795b      	ldrb	r3, [r3, #5]
 8013bae:	2b01      	cmp	r3, #1
 8013bb0:	d007      	beq.n	8013bc2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8013bb2:	69fb      	ldr	r3, [r7, #28]
 8013bb4:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013bb6:	2b04      	cmp	r3, #4
 8013bb8:	d003      	beq.n	8013bc2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8013bba:	69fb      	ldr	r3, [r7, #28]
 8013bbc:	795b      	ldrb	r3, [r3, #5]
 8013bbe:	2b05      	cmp	r3, #5
 8013bc0:	d103      	bne.n	8013bca <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8013bc2:	6a38      	ldr	r0, [r7, #32]
 8013bc4:	f7fe fac2 	bl	801214c <dhcp_handle_nak>
 8013bc8:	e01a      	b.n	8013c00 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8013bca:	7cfb      	ldrb	r3, [r7, #19]
 8013bcc:	2b02      	cmp	r3, #2
 8013bce:	d116      	bne.n	8013bfe <dhcp_recv+0x17e>
 8013bd0:	69fb      	ldr	r3, [r7, #28]
 8013bd2:	795b      	ldrb	r3, [r3, #5]
 8013bd4:	2b06      	cmp	r3, #6
 8013bd6:	d112      	bne.n	8013bfe <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8013bd8:	6979      	ldr	r1, [r7, #20]
 8013bda:	6a38      	ldr	r0, [r7, #32]
 8013bdc:	f7fe fb04 	bl	80121e8 <dhcp_handle_offer>
 8013be0:	e00e      	b.n	8013c00 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8013be2:	bf00      	nop
 8013be4:	e00c      	b.n	8013c00 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8013be6:	bf00      	nop
 8013be8:	e00a      	b.n	8013c00 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8013bea:	bf00      	nop
 8013bec:	e008      	b.n	8013c00 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8013bee:	bf00      	nop
 8013bf0:	e006      	b.n	8013c00 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8013bf2:	bf00      	nop
 8013bf4:	e004      	b.n	8013c00 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8013bf6:	bf00      	nop
 8013bf8:	e002      	b.n	8013c00 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8013bfa:	bf00      	nop
 8013bfc:	e000      	b.n	8013c00 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8013bfe:	bf00      	nop
  pbuf_free(p);
 8013c00:	6878      	ldr	r0, [r7, #4]
 8013c02:	f7f7 ff3f 	bl	800ba84 <pbuf_free>
}
 8013c06:	bf00      	nop
 8013c08:	3728      	adds	r7, #40	@ 0x28
 8013c0a:	46bd      	mov	sp, r7
 8013c0c:	bd80      	pop	{r7, pc}
 8013c0e:	bf00      	nop
 8013c10:	20009290 	.word	0x20009290
 8013c14:	2000cb40 	.word	0x2000cb40
 8013c18:	2000cb20 	.word	0x2000cb20

08013c1c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b088      	sub	sp, #32
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	60f8      	str	r0, [r7, #12]
 8013c24:	60b9      	str	r1, [r7, #8]
 8013c26:	603b      	str	r3, [r7, #0]
 8013c28:	4613      	mov	r3, r2
 8013c2a:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8013c2c:	68fb      	ldr	r3, [r7, #12]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d108      	bne.n	8013c44 <dhcp_create_msg+0x28>
 8013c32:	4b5f      	ldr	r3, [pc, #380]	@ (8013db0 <dhcp_create_msg+0x194>)
 8013c34:	f240 7269 	movw	r2, #1897	@ 0x769
 8013c38:	495e      	ldr	r1, [pc, #376]	@ (8013db4 <dhcp_create_msg+0x198>)
 8013c3a:	485f      	ldr	r0, [pc, #380]	@ (8013db8 <dhcp_create_msg+0x19c>)
 8013c3c:	f003 fa0c 	bl	8017058 <iprintf>
 8013c40:	2300      	movs	r3, #0
 8013c42:	e0b1      	b.n	8013da8 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8013c44:	68bb      	ldr	r3, [r7, #8]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d108      	bne.n	8013c5c <dhcp_create_msg+0x40>
 8013c4a:	4b59      	ldr	r3, [pc, #356]	@ (8013db0 <dhcp_create_msg+0x194>)
 8013c4c:	f240 726a 	movw	r2, #1898	@ 0x76a
 8013c50:	495a      	ldr	r1, [pc, #360]	@ (8013dbc <dhcp_create_msg+0x1a0>)
 8013c52:	4859      	ldr	r0, [pc, #356]	@ (8013db8 <dhcp_create_msg+0x19c>)
 8013c54:	f003 fa00 	bl	8017058 <iprintf>
 8013c58:	2300      	movs	r3, #0
 8013c5a:	e0a5      	b.n	8013da8 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8013c5c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013c60:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8013c64:	2036      	movs	r0, #54	@ 0x36
 8013c66:	f7f7 fc29 	bl	800b4bc <pbuf_alloc>
 8013c6a:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8013c6c:	69bb      	ldr	r3, [r7, #24]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d101      	bne.n	8013c76 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8013c72:	2300      	movs	r3, #0
 8013c74:	e098      	b.n	8013da8 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8013c76:	69bb      	ldr	r3, [r7, #24]
 8013c78:	895b      	ldrh	r3, [r3, #10]
 8013c7a:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8013c7e:	d206      	bcs.n	8013c8e <dhcp_create_msg+0x72>
 8013c80:	4b4b      	ldr	r3, [pc, #300]	@ (8013db0 <dhcp_create_msg+0x194>)
 8013c82:	f240 7271 	movw	r2, #1905	@ 0x771
 8013c86:	494e      	ldr	r1, [pc, #312]	@ (8013dc0 <dhcp_create_msg+0x1a4>)
 8013c88:	484b      	ldr	r0, [pc, #300]	@ (8013db8 <dhcp_create_msg+0x19c>)
 8013c8a:	f003 f9e5 	bl	8017058 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8013c8e:	79fb      	ldrb	r3, [r7, #7]
 8013c90:	2b03      	cmp	r3, #3
 8013c92:	d103      	bne.n	8013c9c <dhcp_create_msg+0x80>
 8013c94:	68bb      	ldr	r3, [r7, #8]
 8013c96:	795b      	ldrb	r3, [r3, #5]
 8013c98:	2b03      	cmp	r3, #3
 8013c9a:	d10d      	bne.n	8013cb8 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8013c9c:	68bb      	ldr	r3, [r7, #8]
 8013c9e:	799b      	ldrb	r3, [r3, #6]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d105      	bne.n	8013cb0 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8013ca4:	f003 f8d8 	bl	8016e58 <rand>
 8013ca8:	4603      	mov	r3, r0
 8013caa:	461a      	mov	r2, r3
 8013cac:	4b45      	ldr	r3, [pc, #276]	@ (8013dc4 <dhcp_create_msg+0x1a8>)
 8013cae:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8013cb0:	4b44      	ldr	r3, [pc, #272]	@ (8013dc4 <dhcp_create_msg+0x1a8>)
 8013cb2:	681a      	ldr	r2, [r3, #0]
 8013cb4:	68bb      	ldr	r3, [r7, #8]
 8013cb6:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8013cb8:	69bb      	ldr	r3, [r7, #24]
 8013cba:	685b      	ldr	r3, [r3, #4]
 8013cbc:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8013cbe:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8013cc2:	2100      	movs	r1, #0
 8013cc4:	6978      	ldr	r0, [r7, #20]
 8013cc6:	f003 fb59 	bl	801737c <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8013cca:	697b      	ldr	r3, [r7, #20]
 8013ccc:	2201      	movs	r2, #1
 8013cce:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8013cd0:	697b      	ldr	r3, [r7, #20]
 8013cd2:	2201      	movs	r2, #1
 8013cd4:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8013cdc:	697b      	ldr	r3, [r7, #20]
 8013cde:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8013ce0:	68bb      	ldr	r3, [r7, #8]
 8013ce2:	681b      	ldr	r3, [r3, #0]
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	f7f6 f98e 	bl	800a006 <lwip_htonl>
 8013cea:	4602      	mov	r2, r0
 8013cec:	697b      	ldr	r3, [r7, #20]
 8013cee:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8013cf0:	79fb      	ldrb	r3, [r7, #7]
 8013cf2:	2b08      	cmp	r3, #8
 8013cf4:	d010      	beq.n	8013d18 <dhcp_create_msg+0xfc>
 8013cf6:	79fb      	ldrb	r3, [r7, #7]
 8013cf8:	2b04      	cmp	r3, #4
 8013cfa:	d00d      	beq.n	8013d18 <dhcp_create_msg+0xfc>
 8013cfc:	79fb      	ldrb	r3, [r7, #7]
 8013cfe:	2b07      	cmp	r3, #7
 8013d00:	d00a      	beq.n	8013d18 <dhcp_create_msg+0xfc>
 8013d02:	79fb      	ldrb	r3, [r7, #7]
 8013d04:	2b03      	cmp	r3, #3
 8013d06:	d10c      	bne.n	8013d22 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8013d08:	68bb      	ldr	r3, [r7, #8]
 8013d0a:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8013d0c:	2b05      	cmp	r3, #5
 8013d0e:	d003      	beq.n	8013d18 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8013d10:	68bb      	ldr	r3, [r7, #8]
 8013d12:	795b      	ldrb	r3, [r3, #5]
 8013d14:	2b04      	cmp	r3, #4
 8013d16:	d104      	bne.n	8013d22 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	3304      	adds	r3, #4
 8013d1c:	681a      	ldr	r2, [r3, #0]
 8013d1e:	697b      	ldr	r3, [r7, #20]
 8013d20:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013d22:	2300      	movs	r3, #0
 8013d24:	83fb      	strh	r3, [r7, #30]
 8013d26:	e00c      	b.n	8013d42 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8013d28:	8bfa      	ldrh	r2, [r7, #30]
 8013d2a:	8bfb      	ldrh	r3, [r7, #30]
 8013d2c:	68f9      	ldr	r1, [r7, #12]
 8013d2e:	440a      	add	r2, r1
 8013d30:	f892 1036 	ldrb.w	r1, [r2, #54]	@ 0x36
 8013d34:	697a      	ldr	r2, [r7, #20]
 8013d36:	4413      	add	r3, r2
 8013d38:	460a      	mov	r2, r1
 8013d3a:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013d3c:	8bfb      	ldrh	r3, [r7, #30]
 8013d3e:	3301      	adds	r3, #1
 8013d40:	83fb      	strh	r3, [r7, #30]
 8013d42:	8bfb      	ldrh	r3, [r7, #30]
 8013d44:	2b05      	cmp	r3, #5
 8013d46:	d9ef      	bls.n	8013d28 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8013d48:	697b      	ldr	r3, [r7, #20]
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8013d50:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8013d54:	2200      	movs	r2, #0
 8013d56:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 8013d5a:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8013d5e:	2200      	movs	r2, #0
 8013d60:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 8013d64:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 8013d68:	2200      	movs	r2, #0
 8013d6a:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8013d6e:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8013d72:	697b      	ldr	r3, [r7, #20]
 8013d74:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013d78:	2301      	movs	r3, #1
 8013d7a:	2235      	movs	r2, #53	@ 0x35
 8013d7c:	2000      	movs	r0, #0
 8013d7e:	f7ff fa7f 	bl	8013280 <dhcp_option>
 8013d82:	4603      	mov	r3, r0
 8013d84:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8013d86:	697b      	ldr	r3, [r7, #20]
 8013d88:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013d8c:	79fa      	ldrb	r2, [r7, #7]
 8013d8e:	8a7b      	ldrh	r3, [r7, #18]
 8013d90:	4618      	mov	r0, r3
 8013d92:	f7ff faa9 	bl	80132e8 <dhcp_option_byte>
 8013d96:	4603      	mov	r3, r0
 8013d98:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8013d9a:	683b      	ldr	r3, [r7, #0]
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d002      	beq.n	8013da6 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8013da0:	683b      	ldr	r3, [r7, #0]
 8013da2:	8a7a      	ldrh	r2, [r7, #18]
 8013da4:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8013da6:	69bb      	ldr	r3, [r7, #24]
}
 8013da8:	4618      	mov	r0, r3
 8013daa:	3720      	adds	r7, #32
 8013dac:	46bd      	mov	sp, r7
 8013dae:	bd80      	pop	{r7, pc}
 8013db0:	0801a998 	.word	0x0801a998
 8013db4:	0801acd4 	.word	0x0801acd4
 8013db8:	0801a9f8 	.word	0x0801a9f8
 8013dbc:	0801acf4 	.word	0x0801acf4
 8013dc0:	0801ad14 	.word	0x0801ad14
 8013dc4:	2000cb50 	.word	0x2000cb50

08013dc8 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8013dc8:	b580      	push	{r7, lr}
 8013dca:	b084      	sub	sp, #16
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	4603      	mov	r3, r0
 8013dd0:	60b9      	str	r1, [r7, #8]
 8013dd2:	607a      	str	r2, [r7, #4]
 8013dd4:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8013dd6:	89fb      	ldrh	r3, [r7, #14]
 8013dd8:	1c5a      	adds	r2, r3, #1
 8013dda:	81fa      	strh	r2, [r7, #14]
 8013ddc:	461a      	mov	r2, r3
 8013dde:	68bb      	ldr	r3, [r7, #8]
 8013de0:	4413      	add	r3, r2
 8013de2:	22ff      	movs	r2, #255	@ 0xff
 8013de4:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8013de6:	e007      	b.n	8013df8 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8013de8:	89fb      	ldrh	r3, [r7, #14]
 8013dea:	1c5a      	adds	r2, r3, #1
 8013dec:	81fa      	strh	r2, [r7, #14]
 8013dee:	461a      	mov	r2, r3
 8013df0:	68bb      	ldr	r3, [r7, #8]
 8013df2:	4413      	add	r3, r2
 8013df4:	2200      	movs	r2, #0
 8013df6:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8013df8:	89fb      	ldrh	r3, [r7, #14]
 8013dfa:	2b43      	cmp	r3, #67	@ 0x43
 8013dfc:	d904      	bls.n	8013e08 <dhcp_option_trailer+0x40>
 8013dfe:	89fb      	ldrh	r3, [r7, #14]
 8013e00:	f003 0303 	and.w	r3, r3, #3
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d002      	beq.n	8013e0e <dhcp_option_trailer+0x46>
 8013e08:	89fb      	ldrh	r3, [r7, #14]
 8013e0a:	2b43      	cmp	r3, #67	@ 0x43
 8013e0c:	d9ec      	bls.n	8013de8 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8013e0e:	89fb      	ldrh	r3, [r7, #14]
 8013e10:	33f0      	adds	r3, #240	@ 0xf0
 8013e12:	b29b      	uxth	r3, r3
 8013e14:	4619      	mov	r1, r3
 8013e16:	6878      	ldr	r0, [r7, #4]
 8013e18:	f7f7 fcae 	bl	800b778 <pbuf_realloc>
}
 8013e1c:	bf00      	nop
 8013e1e:	3710      	adds	r7, #16
 8013e20:	46bd      	mov	sp, r7
 8013e22:	bd80      	pop	{r7, pc}

08013e24 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8013e24:	b480      	push	{r7}
 8013e26:	b085      	sub	sp, #20
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d017      	beq.n	8013e62 <dhcp_supplied_address+0x3e>
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d013      	beq.n	8013e62 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013e3e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	795b      	ldrb	r3, [r3, #5]
 8013e44:	2b0a      	cmp	r3, #10
 8013e46:	d007      	beq.n	8013e58 <dhcp_supplied_address+0x34>
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	795b      	ldrb	r3, [r3, #5]
 8013e4c:	2b05      	cmp	r3, #5
 8013e4e:	d003      	beq.n	8013e58 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8013e54:	2b04      	cmp	r3, #4
 8013e56:	d101      	bne.n	8013e5c <dhcp_supplied_address+0x38>
 8013e58:	2301      	movs	r3, #1
 8013e5a:	e000      	b.n	8013e5e <dhcp_supplied_address+0x3a>
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	b2db      	uxtb	r3, r3
 8013e60:	e000      	b.n	8013e64 <dhcp_supplied_address+0x40>
  }
  return 0;
 8013e62:	2300      	movs	r3, #0
}
 8013e64:	4618      	mov	r0, r3
 8013e66:	3714      	adds	r7, #20
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e6e:	4770      	bx	lr

08013e70 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013e70:	b580      	push	{r7, lr}
 8013e72:	b082      	sub	sp, #8
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013e78:	4915      	ldr	r1, [pc, #84]	@ (8013ed0 <etharp_free_entry+0x60>)
 8013e7a:	687a      	ldr	r2, [r7, #4]
 8013e7c:	4613      	mov	r3, r2
 8013e7e:	005b      	lsls	r3, r3, #1
 8013e80:	4413      	add	r3, r2
 8013e82:	00db      	lsls	r3, r3, #3
 8013e84:	440b      	add	r3, r1
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d013      	beq.n	8013eb4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013e8c:	4910      	ldr	r1, [pc, #64]	@ (8013ed0 <etharp_free_entry+0x60>)
 8013e8e:	687a      	ldr	r2, [r7, #4]
 8013e90:	4613      	mov	r3, r2
 8013e92:	005b      	lsls	r3, r3, #1
 8013e94:	4413      	add	r3, r2
 8013e96:	00db      	lsls	r3, r3, #3
 8013e98:	440b      	add	r3, r1
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	f7f7 fdf1 	bl	800ba84 <pbuf_free>
    arp_table[i].q = NULL;
 8013ea2:	490b      	ldr	r1, [pc, #44]	@ (8013ed0 <etharp_free_entry+0x60>)
 8013ea4:	687a      	ldr	r2, [r7, #4]
 8013ea6:	4613      	mov	r3, r2
 8013ea8:	005b      	lsls	r3, r3, #1
 8013eaa:	4413      	add	r3, r2
 8013eac:	00db      	lsls	r3, r3, #3
 8013eae:	440b      	add	r3, r1
 8013eb0:	2200      	movs	r2, #0
 8013eb2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013eb4:	4906      	ldr	r1, [pc, #24]	@ (8013ed0 <etharp_free_entry+0x60>)
 8013eb6:	687a      	ldr	r2, [r7, #4]
 8013eb8:	4613      	mov	r3, r2
 8013eba:	005b      	lsls	r3, r3, #1
 8013ebc:	4413      	add	r3, r2
 8013ebe:	00db      	lsls	r3, r3, #3
 8013ec0:	440b      	add	r3, r1
 8013ec2:	3314      	adds	r3, #20
 8013ec4:	2200      	movs	r2, #0
 8013ec6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013ec8:	bf00      	nop
 8013eca:	3708      	adds	r7, #8
 8013ecc:	46bd      	mov	sp, r7
 8013ece:	bd80      	pop	{r7, pc}
 8013ed0:	2000cb54 	.word	0x2000cb54

08013ed4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b082      	sub	sp, #8
 8013ed8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013eda:	2300      	movs	r3, #0
 8013edc:	607b      	str	r3, [r7, #4]
 8013ede:	e096      	b.n	801400e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013ee0:	494f      	ldr	r1, [pc, #316]	@ (8014020 <etharp_tmr+0x14c>)
 8013ee2:	687a      	ldr	r2, [r7, #4]
 8013ee4:	4613      	mov	r3, r2
 8013ee6:	005b      	lsls	r3, r3, #1
 8013ee8:	4413      	add	r3, r2
 8013eea:	00db      	lsls	r3, r3, #3
 8013eec:	440b      	add	r3, r1
 8013eee:	3314      	adds	r3, #20
 8013ef0:	781b      	ldrb	r3, [r3, #0]
 8013ef2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013ef4:	78fb      	ldrb	r3, [r7, #3]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	f000 8086 	beq.w	8014008 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013efc:	4948      	ldr	r1, [pc, #288]	@ (8014020 <etharp_tmr+0x14c>)
 8013efe:	687a      	ldr	r2, [r7, #4]
 8013f00:	4613      	mov	r3, r2
 8013f02:	005b      	lsls	r3, r3, #1
 8013f04:	4413      	add	r3, r2
 8013f06:	00db      	lsls	r3, r3, #3
 8013f08:	440b      	add	r3, r1
 8013f0a:	3312      	adds	r3, #18
 8013f0c:	881b      	ldrh	r3, [r3, #0]
 8013f0e:	3301      	adds	r3, #1
 8013f10:	b298      	uxth	r0, r3
 8013f12:	4943      	ldr	r1, [pc, #268]	@ (8014020 <etharp_tmr+0x14c>)
 8013f14:	687a      	ldr	r2, [r7, #4]
 8013f16:	4613      	mov	r3, r2
 8013f18:	005b      	lsls	r3, r3, #1
 8013f1a:	4413      	add	r3, r2
 8013f1c:	00db      	lsls	r3, r3, #3
 8013f1e:	440b      	add	r3, r1
 8013f20:	3312      	adds	r3, #18
 8013f22:	4602      	mov	r2, r0
 8013f24:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013f26:	493e      	ldr	r1, [pc, #248]	@ (8014020 <etharp_tmr+0x14c>)
 8013f28:	687a      	ldr	r2, [r7, #4]
 8013f2a:	4613      	mov	r3, r2
 8013f2c:	005b      	lsls	r3, r3, #1
 8013f2e:	4413      	add	r3, r2
 8013f30:	00db      	lsls	r3, r3, #3
 8013f32:	440b      	add	r3, r1
 8013f34:	3312      	adds	r3, #18
 8013f36:	881b      	ldrh	r3, [r3, #0]
 8013f38:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8013f3c:	d215      	bcs.n	8013f6a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013f3e:	4938      	ldr	r1, [pc, #224]	@ (8014020 <etharp_tmr+0x14c>)
 8013f40:	687a      	ldr	r2, [r7, #4]
 8013f42:	4613      	mov	r3, r2
 8013f44:	005b      	lsls	r3, r3, #1
 8013f46:	4413      	add	r3, r2
 8013f48:	00db      	lsls	r3, r3, #3
 8013f4a:	440b      	add	r3, r1
 8013f4c:	3314      	adds	r3, #20
 8013f4e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013f50:	2b01      	cmp	r3, #1
 8013f52:	d10e      	bne.n	8013f72 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013f54:	4932      	ldr	r1, [pc, #200]	@ (8014020 <etharp_tmr+0x14c>)
 8013f56:	687a      	ldr	r2, [r7, #4]
 8013f58:	4613      	mov	r3, r2
 8013f5a:	005b      	lsls	r3, r3, #1
 8013f5c:	4413      	add	r3, r2
 8013f5e:	00db      	lsls	r3, r3, #3
 8013f60:	440b      	add	r3, r1
 8013f62:	3312      	adds	r3, #18
 8013f64:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013f66:	2b04      	cmp	r3, #4
 8013f68:	d903      	bls.n	8013f72 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013f6a:	6878      	ldr	r0, [r7, #4]
 8013f6c:	f7ff ff80 	bl	8013e70 <etharp_free_entry>
 8013f70:	e04a      	b.n	8014008 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013f72:	492b      	ldr	r1, [pc, #172]	@ (8014020 <etharp_tmr+0x14c>)
 8013f74:	687a      	ldr	r2, [r7, #4]
 8013f76:	4613      	mov	r3, r2
 8013f78:	005b      	lsls	r3, r3, #1
 8013f7a:	4413      	add	r3, r2
 8013f7c:	00db      	lsls	r3, r3, #3
 8013f7e:	440b      	add	r3, r1
 8013f80:	3314      	adds	r3, #20
 8013f82:	781b      	ldrb	r3, [r3, #0]
 8013f84:	2b03      	cmp	r3, #3
 8013f86:	d10a      	bne.n	8013f9e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013f88:	4925      	ldr	r1, [pc, #148]	@ (8014020 <etharp_tmr+0x14c>)
 8013f8a:	687a      	ldr	r2, [r7, #4]
 8013f8c:	4613      	mov	r3, r2
 8013f8e:	005b      	lsls	r3, r3, #1
 8013f90:	4413      	add	r3, r2
 8013f92:	00db      	lsls	r3, r3, #3
 8013f94:	440b      	add	r3, r1
 8013f96:	3314      	adds	r3, #20
 8013f98:	2204      	movs	r2, #4
 8013f9a:	701a      	strb	r2, [r3, #0]
 8013f9c:	e034      	b.n	8014008 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013f9e:	4920      	ldr	r1, [pc, #128]	@ (8014020 <etharp_tmr+0x14c>)
 8013fa0:	687a      	ldr	r2, [r7, #4]
 8013fa2:	4613      	mov	r3, r2
 8013fa4:	005b      	lsls	r3, r3, #1
 8013fa6:	4413      	add	r3, r2
 8013fa8:	00db      	lsls	r3, r3, #3
 8013faa:	440b      	add	r3, r1
 8013fac:	3314      	adds	r3, #20
 8013fae:	781b      	ldrb	r3, [r3, #0]
 8013fb0:	2b04      	cmp	r3, #4
 8013fb2:	d10a      	bne.n	8013fca <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013fb4:	491a      	ldr	r1, [pc, #104]	@ (8014020 <etharp_tmr+0x14c>)
 8013fb6:	687a      	ldr	r2, [r7, #4]
 8013fb8:	4613      	mov	r3, r2
 8013fba:	005b      	lsls	r3, r3, #1
 8013fbc:	4413      	add	r3, r2
 8013fbe:	00db      	lsls	r3, r3, #3
 8013fc0:	440b      	add	r3, r1
 8013fc2:	3314      	adds	r3, #20
 8013fc4:	2202      	movs	r2, #2
 8013fc6:	701a      	strb	r2, [r3, #0]
 8013fc8:	e01e      	b.n	8014008 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013fca:	4915      	ldr	r1, [pc, #84]	@ (8014020 <etharp_tmr+0x14c>)
 8013fcc:	687a      	ldr	r2, [r7, #4]
 8013fce:	4613      	mov	r3, r2
 8013fd0:	005b      	lsls	r3, r3, #1
 8013fd2:	4413      	add	r3, r2
 8013fd4:	00db      	lsls	r3, r3, #3
 8013fd6:	440b      	add	r3, r1
 8013fd8:	3314      	adds	r3, #20
 8013fda:	781b      	ldrb	r3, [r3, #0]
 8013fdc:	2b01      	cmp	r3, #1
 8013fde:	d113      	bne.n	8014008 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013fe0:	490f      	ldr	r1, [pc, #60]	@ (8014020 <etharp_tmr+0x14c>)
 8013fe2:	687a      	ldr	r2, [r7, #4]
 8013fe4:	4613      	mov	r3, r2
 8013fe6:	005b      	lsls	r3, r3, #1
 8013fe8:	4413      	add	r3, r2
 8013fea:	00db      	lsls	r3, r3, #3
 8013fec:	440b      	add	r3, r1
 8013fee:	3308      	adds	r3, #8
 8013ff0:	6818      	ldr	r0, [r3, #0]
 8013ff2:	687a      	ldr	r2, [r7, #4]
 8013ff4:	4613      	mov	r3, r2
 8013ff6:	005b      	lsls	r3, r3, #1
 8013ff8:	4413      	add	r3, r2
 8013ffa:	00db      	lsls	r3, r3, #3
 8013ffc:	4a08      	ldr	r2, [pc, #32]	@ (8014020 <etharp_tmr+0x14c>)
 8013ffe:	4413      	add	r3, r2
 8014000:	3304      	adds	r3, #4
 8014002:	4619      	mov	r1, r3
 8014004:	f000 fe72 	bl	8014cec <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	3301      	adds	r3, #1
 801400c:	607b      	str	r3, [r7, #4]
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	2b09      	cmp	r3, #9
 8014012:	f77f af65 	ble.w	8013ee0 <etharp_tmr+0xc>
      }
    }
  }
}
 8014016:	bf00      	nop
 8014018:	bf00      	nop
 801401a:	3708      	adds	r7, #8
 801401c:	46bd      	mov	sp, r7
 801401e:	bd80      	pop	{r7, pc}
 8014020:	2000cb54 	.word	0x2000cb54

08014024 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014024:	b580      	push	{r7, lr}
 8014026:	b08a      	sub	sp, #40	@ 0x28
 8014028:	af00      	add	r7, sp, #0
 801402a:	60f8      	str	r0, [r7, #12]
 801402c:	460b      	mov	r3, r1
 801402e:	607a      	str	r2, [r7, #4]
 8014030:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014032:	230a      	movs	r3, #10
 8014034:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8014036:	230a      	movs	r3, #10
 8014038:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801403a:	230a      	movs	r3, #10
 801403c:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801403e:	2300      	movs	r3, #0
 8014040:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014042:	230a      	movs	r3, #10
 8014044:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014046:	2300      	movs	r3, #0
 8014048:	83bb      	strh	r3, [r7, #28]
 801404a:	2300      	movs	r3, #0
 801404c:	837b      	strh	r3, [r7, #26]
 801404e:	2300      	movs	r3, #0
 8014050:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014052:	2300      	movs	r3, #0
 8014054:	843b      	strh	r3, [r7, #32]
 8014056:	e0ae      	b.n	80141b6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014058:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801405c:	49a6      	ldr	r1, [pc, #664]	@ (80142f8 <etharp_find_entry+0x2d4>)
 801405e:	4613      	mov	r3, r2
 8014060:	005b      	lsls	r3, r3, #1
 8014062:	4413      	add	r3, r2
 8014064:	00db      	lsls	r3, r3, #3
 8014066:	440b      	add	r3, r1
 8014068:	3314      	adds	r3, #20
 801406a:	781b      	ldrb	r3, [r3, #0]
 801406c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801406e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8014072:	2b0a      	cmp	r3, #10
 8014074:	d105      	bne.n	8014082 <etharp_find_entry+0x5e>
 8014076:	7dfb      	ldrb	r3, [r7, #23]
 8014078:	2b00      	cmp	r3, #0
 801407a:	d102      	bne.n	8014082 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801407c:	8c3b      	ldrh	r3, [r7, #32]
 801407e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8014080:	e095      	b.n	80141ae <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014082:	7dfb      	ldrb	r3, [r7, #23]
 8014084:	2b00      	cmp	r3, #0
 8014086:	f000 8092 	beq.w	80141ae <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801408a:	7dfb      	ldrb	r3, [r7, #23]
 801408c:	2b01      	cmp	r3, #1
 801408e:	d009      	beq.n	80140a4 <etharp_find_entry+0x80>
 8014090:	7dfb      	ldrb	r3, [r7, #23]
 8014092:	2b01      	cmp	r3, #1
 8014094:	d806      	bhi.n	80140a4 <etharp_find_entry+0x80>
 8014096:	4b99      	ldr	r3, [pc, #612]	@ (80142fc <etharp_find_entry+0x2d8>)
 8014098:	f240 1223 	movw	r2, #291	@ 0x123
 801409c:	4998      	ldr	r1, [pc, #608]	@ (8014300 <etharp_find_entry+0x2dc>)
 801409e:	4899      	ldr	r0, [pc, #612]	@ (8014304 <etharp_find_entry+0x2e0>)
 80140a0:	f002 ffda 	bl	8017058 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80140a4:	68fb      	ldr	r3, [r7, #12]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d020      	beq.n	80140ec <etharp_find_entry+0xc8>
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	6819      	ldr	r1, [r3, #0]
 80140ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140b2:	4891      	ldr	r0, [pc, #580]	@ (80142f8 <etharp_find_entry+0x2d4>)
 80140b4:	4613      	mov	r3, r2
 80140b6:	005b      	lsls	r3, r3, #1
 80140b8:	4413      	add	r3, r2
 80140ba:	00db      	lsls	r3, r3, #3
 80140bc:	4403      	add	r3, r0
 80140be:	3304      	adds	r3, #4
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	4299      	cmp	r1, r3
 80140c4:	d112      	bne.n	80140ec <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d00c      	beq.n	80140e6 <etharp_find_entry+0xc2>
 80140cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140d0:	4989      	ldr	r1, [pc, #548]	@ (80142f8 <etharp_find_entry+0x2d4>)
 80140d2:	4613      	mov	r3, r2
 80140d4:	005b      	lsls	r3, r3, #1
 80140d6:	4413      	add	r3, r2
 80140d8:	00db      	lsls	r3, r3, #3
 80140da:	440b      	add	r3, r1
 80140dc:	3308      	adds	r3, #8
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	687a      	ldr	r2, [r7, #4]
 80140e2:	429a      	cmp	r2, r3
 80140e4:	d102      	bne.n	80140ec <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80140e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80140ea:	e100      	b.n	80142ee <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80140ec:	7dfb      	ldrb	r3, [r7, #23]
 80140ee:	2b01      	cmp	r3, #1
 80140f0:	d140      	bne.n	8014174 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80140f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140f6:	4980      	ldr	r1, [pc, #512]	@ (80142f8 <etharp_find_entry+0x2d4>)
 80140f8:	4613      	mov	r3, r2
 80140fa:	005b      	lsls	r3, r3, #1
 80140fc:	4413      	add	r3, r2
 80140fe:	00db      	lsls	r3, r3, #3
 8014100:	440b      	add	r3, r1
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d01a      	beq.n	801413e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014108:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801410c:	497a      	ldr	r1, [pc, #488]	@ (80142f8 <etharp_find_entry+0x2d4>)
 801410e:	4613      	mov	r3, r2
 8014110:	005b      	lsls	r3, r3, #1
 8014112:	4413      	add	r3, r2
 8014114:	00db      	lsls	r3, r3, #3
 8014116:	440b      	add	r3, r1
 8014118:	3312      	adds	r3, #18
 801411a:	881b      	ldrh	r3, [r3, #0]
 801411c:	8bba      	ldrh	r2, [r7, #28]
 801411e:	429a      	cmp	r2, r3
 8014120:	d845      	bhi.n	80141ae <etharp_find_entry+0x18a>
            old_queue = i;
 8014122:	8c3b      	ldrh	r3, [r7, #32]
 8014124:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014126:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801412a:	4973      	ldr	r1, [pc, #460]	@ (80142f8 <etharp_find_entry+0x2d4>)
 801412c:	4613      	mov	r3, r2
 801412e:	005b      	lsls	r3, r3, #1
 8014130:	4413      	add	r3, r2
 8014132:	00db      	lsls	r3, r3, #3
 8014134:	440b      	add	r3, r1
 8014136:	3312      	adds	r3, #18
 8014138:	881b      	ldrh	r3, [r3, #0]
 801413a:	83bb      	strh	r3, [r7, #28]
 801413c:	e037      	b.n	80141ae <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801413e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014142:	496d      	ldr	r1, [pc, #436]	@ (80142f8 <etharp_find_entry+0x2d4>)
 8014144:	4613      	mov	r3, r2
 8014146:	005b      	lsls	r3, r3, #1
 8014148:	4413      	add	r3, r2
 801414a:	00db      	lsls	r3, r3, #3
 801414c:	440b      	add	r3, r1
 801414e:	3312      	adds	r3, #18
 8014150:	881b      	ldrh	r3, [r3, #0]
 8014152:	8b7a      	ldrh	r2, [r7, #26]
 8014154:	429a      	cmp	r2, r3
 8014156:	d82a      	bhi.n	80141ae <etharp_find_entry+0x18a>
            old_pending = i;
 8014158:	8c3b      	ldrh	r3, [r7, #32]
 801415a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801415c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014160:	4965      	ldr	r1, [pc, #404]	@ (80142f8 <etharp_find_entry+0x2d4>)
 8014162:	4613      	mov	r3, r2
 8014164:	005b      	lsls	r3, r3, #1
 8014166:	4413      	add	r3, r2
 8014168:	00db      	lsls	r3, r3, #3
 801416a:	440b      	add	r3, r1
 801416c:	3312      	adds	r3, #18
 801416e:	881b      	ldrh	r3, [r3, #0]
 8014170:	837b      	strh	r3, [r7, #26]
 8014172:	e01c      	b.n	80141ae <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014174:	7dfb      	ldrb	r3, [r7, #23]
 8014176:	2b01      	cmp	r3, #1
 8014178:	d919      	bls.n	80141ae <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801417a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801417e:	495e      	ldr	r1, [pc, #376]	@ (80142f8 <etharp_find_entry+0x2d4>)
 8014180:	4613      	mov	r3, r2
 8014182:	005b      	lsls	r3, r3, #1
 8014184:	4413      	add	r3, r2
 8014186:	00db      	lsls	r3, r3, #3
 8014188:	440b      	add	r3, r1
 801418a:	3312      	adds	r3, #18
 801418c:	881b      	ldrh	r3, [r3, #0]
 801418e:	8b3a      	ldrh	r2, [r7, #24]
 8014190:	429a      	cmp	r2, r3
 8014192:	d80c      	bhi.n	80141ae <etharp_find_entry+0x18a>
            old_stable = i;
 8014194:	8c3b      	ldrh	r3, [r7, #32]
 8014196:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8014198:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801419c:	4956      	ldr	r1, [pc, #344]	@ (80142f8 <etharp_find_entry+0x2d4>)
 801419e:	4613      	mov	r3, r2
 80141a0:	005b      	lsls	r3, r3, #1
 80141a2:	4413      	add	r3, r2
 80141a4:	00db      	lsls	r3, r3, #3
 80141a6:	440b      	add	r3, r1
 80141a8:	3312      	adds	r3, #18
 80141aa:	881b      	ldrh	r3, [r3, #0]
 80141ac:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80141ae:	8c3b      	ldrh	r3, [r7, #32]
 80141b0:	3301      	adds	r3, #1
 80141b2:	b29b      	uxth	r3, r3
 80141b4:	843b      	strh	r3, [r7, #32]
 80141b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80141ba:	2b09      	cmp	r3, #9
 80141bc:	f77f af4c 	ble.w	8014058 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80141c0:	7afb      	ldrb	r3, [r7, #11]
 80141c2:	f003 0302 	and.w	r3, r3, #2
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d108      	bne.n	80141dc <etharp_find_entry+0x1b8>
 80141ca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80141ce:	2b0a      	cmp	r3, #10
 80141d0:	d107      	bne.n	80141e2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80141d2:	7afb      	ldrb	r3, [r7, #11]
 80141d4:	f003 0301 	and.w	r3, r3, #1
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d102      	bne.n	80141e2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80141dc:	f04f 33ff 	mov.w	r3, #4294967295
 80141e0:	e085      	b.n	80142ee <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80141e2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80141e6:	2b09      	cmp	r3, #9
 80141e8:	dc02      	bgt.n	80141f0 <etharp_find_entry+0x1cc>
    i = empty;
 80141ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80141ec:	843b      	strh	r3, [r7, #32]
 80141ee:	e039      	b.n	8014264 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80141f0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80141f4:	2b09      	cmp	r3, #9
 80141f6:	dc14      	bgt.n	8014222 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80141f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80141fa:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80141fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014200:	493d      	ldr	r1, [pc, #244]	@ (80142f8 <etharp_find_entry+0x2d4>)
 8014202:	4613      	mov	r3, r2
 8014204:	005b      	lsls	r3, r3, #1
 8014206:	4413      	add	r3, r2
 8014208:	00db      	lsls	r3, r3, #3
 801420a:	440b      	add	r3, r1
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	2b00      	cmp	r3, #0
 8014210:	d018      	beq.n	8014244 <etharp_find_entry+0x220>
 8014212:	4b3a      	ldr	r3, [pc, #232]	@ (80142fc <etharp_find_entry+0x2d8>)
 8014214:	f240 126d 	movw	r2, #365	@ 0x16d
 8014218:	493b      	ldr	r1, [pc, #236]	@ (8014308 <etharp_find_entry+0x2e4>)
 801421a:	483a      	ldr	r0, [pc, #232]	@ (8014304 <etharp_find_entry+0x2e0>)
 801421c:	f002 ff1c 	bl	8017058 <iprintf>
 8014220:	e010      	b.n	8014244 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014222:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8014226:	2b09      	cmp	r3, #9
 8014228:	dc02      	bgt.n	8014230 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801422a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801422c:	843b      	strh	r3, [r7, #32]
 801422e:	e009      	b.n	8014244 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014230:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014234:	2b09      	cmp	r3, #9
 8014236:	dc02      	bgt.n	801423e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014238:	8bfb      	ldrh	r3, [r7, #30]
 801423a:	843b      	strh	r3, [r7, #32]
 801423c:	e002      	b.n	8014244 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801423e:	f04f 33ff 	mov.w	r3, #4294967295
 8014242:	e054      	b.n	80142ee <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014244:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014248:	2b09      	cmp	r3, #9
 801424a:	dd06      	ble.n	801425a <etharp_find_entry+0x236>
 801424c:	4b2b      	ldr	r3, [pc, #172]	@ (80142fc <etharp_find_entry+0x2d8>)
 801424e:	f240 127f 	movw	r2, #383	@ 0x17f
 8014252:	492e      	ldr	r1, [pc, #184]	@ (801430c <etharp_find_entry+0x2e8>)
 8014254:	482b      	ldr	r0, [pc, #172]	@ (8014304 <etharp_find_entry+0x2e0>)
 8014256:	f002 feff 	bl	8017058 <iprintf>
    etharp_free_entry(i);
 801425a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801425e:	4618      	mov	r0, r3
 8014260:	f7ff fe06 	bl	8013e70 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014264:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014268:	2b09      	cmp	r3, #9
 801426a:	dd06      	ble.n	801427a <etharp_find_entry+0x256>
 801426c:	4b23      	ldr	r3, [pc, #140]	@ (80142fc <etharp_find_entry+0x2d8>)
 801426e:	f240 1283 	movw	r2, #387	@ 0x183
 8014272:	4926      	ldr	r1, [pc, #152]	@ (801430c <etharp_find_entry+0x2e8>)
 8014274:	4823      	ldr	r0, [pc, #140]	@ (8014304 <etharp_find_entry+0x2e0>)
 8014276:	f002 feef 	bl	8017058 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801427a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801427e:	491e      	ldr	r1, [pc, #120]	@ (80142f8 <etharp_find_entry+0x2d4>)
 8014280:	4613      	mov	r3, r2
 8014282:	005b      	lsls	r3, r3, #1
 8014284:	4413      	add	r3, r2
 8014286:	00db      	lsls	r3, r3, #3
 8014288:	440b      	add	r3, r1
 801428a:	3314      	adds	r3, #20
 801428c:	781b      	ldrb	r3, [r3, #0]
 801428e:	2b00      	cmp	r3, #0
 8014290:	d006      	beq.n	80142a0 <etharp_find_entry+0x27c>
 8014292:	4b1a      	ldr	r3, [pc, #104]	@ (80142fc <etharp_find_entry+0x2d8>)
 8014294:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8014298:	491d      	ldr	r1, [pc, #116]	@ (8014310 <etharp_find_entry+0x2ec>)
 801429a:	481a      	ldr	r0, [pc, #104]	@ (8014304 <etharp_find_entry+0x2e0>)
 801429c:	f002 fedc 	bl	8017058 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d00b      	beq.n	80142be <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80142a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	6819      	ldr	r1, [r3, #0]
 80142ae:	4812      	ldr	r0, [pc, #72]	@ (80142f8 <etharp_find_entry+0x2d4>)
 80142b0:	4613      	mov	r3, r2
 80142b2:	005b      	lsls	r3, r3, #1
 80142b4:	4413      	add	r3, r2
 80142b6:	00db      	lsls	r3, r3, #3
 80142b8:	4403      	add	r3, r0
 80142ba:	3304      	adds	r3, #4
 80142bc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80142be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142c2:	490d      	ldr	r1, [pc, #52]	@ (80142f8 <etharp_find_entry+0x2d4>)
 80142c4:	4613      	mov	r3, r2
 80142c6:	005b      	lsls	r3, r3, #1
 80142c8:	4413      	add	r3, r2
 80142ca:	00db      	lsls	r3, r3, #3
 80142cc:	440b      	add	r3, r1
 80142ce:	3312      	adds	r3, #18
 80142d0:	2200      	movs	r2, #0
 80142d2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80142d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142d8:	4907      	ldr	r1, [pc, #28]	@ (80142f8 <etharp_find_entry+0x2d4>)
 80142da:	4613      	mov	r3, r2
 80142dc:	005b      	lsls	r3, r3, #1
 80142de:	4413      	add	r3, r2
 80142e0:	00db      	lsls	r3, r3, #3
 80142e2:	440b      	add	r3, r1
 80142e4:	3308      	adds	r3, #8
 80142e6:	687a      	ldr	r2, [r7, #4]
 80142e8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80142ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80142ee:	4618      	mov	r0, r3
 80142f0:	3728      	adds	r7, #40	@ 0x28
 80142f2:	46bd      	mov	sp, r7
 80142f4:	bd80      	pop	{r7, pc}
 80142f6:	bf00      	nop
 80142f8:	2000cb54 	.word	0x2000cb54
 80142fc:	0801ad54 	.word	0x0801ad54
 8014300:	0801ad8c 	.word	0x0801ad8c
 8014304:	0801adcc 	.word	0x0801adcc
 8014308:	0801adf4 	.word	0x0801adf4
 801430c:	0801ae0c 	.word	0x0801ae0c
 8014310:	0801ae20 	.word	0x0801ae20

08014314 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014314:	b580      	push	{r7, lr}
 8014316:	b088      	sub	sp, #32
 8014318:	af02      	add	r7, sp, #8
 801431a:	60f8      	str	r0, [r7, #12]
 801431c:	60b9      	str	r1, [r7, #8]
 801431e:	607a      	str	r2, [r7, #4]
 8014320:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014322:	68fb      	ldr	r3, [r7, #12]
 8014324:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8014328:	2b06      	cmp	r3, #6
 801432a:	d006      	beq.n	801433a <etharp_update_arp_entry+0x26>
 801432c:	4b48      	ldr	r3, [pc, #288]	@ (8014450 <etharp_update_arp_entry+0x13c>)
 801432e:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8014332:	4948      	ldr	r1, [pc, #288]	@ (8014454 <etharp_update_arp_entry+0x140>)
 8014334:	4848      	ldr	r0, [pc, #288]	@ (8014458 <etharp_update_arp_entry+0x144>)
 8014336:	f002 fe8f 	bl	8017058 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801433a:	68bb      	ldr	r3, [r7, #8]
 801433c:	2b00      	cmp	r3, #0
 801433e:	d012      	beq.n	8014366 <etharp_update_arp_entry+0x52>
 8014340:	68bb      	ldr	r3, [r7, #8]
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	2b00      	cmp	r3, #0
 8014346:	d00e      	beq.n	8014366 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014348:	68bb      	ldr	r3, [r7, #8]
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	68f9      	ldr	r1, [r7, #12]
 801434e:	4618      	mov	r0, r3
 8014350:	f001 fc86 	bl	8015c60 <ip4_addr_isbroadcast_u32>
 8014354:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014356:	2b00      	cmp	r3, #0
 8014358:	d105      	bne.n	8014366 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801435a:	68bb      	ldr	r3, [r7, #8]
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014362:	2be0      	cmp	r3, #224	@ 0xe0
 8014364:	d102      	bne.n	801436c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014366:	f06f 030f 	mvn.w	r3, #15
 801436a:	e06c      	b.n	8014446 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801436c:	78fb      	ldrb	r3, [r7, #3]
 801436e:	68fa      	ldr	r2, [r7, #12]
 8014370:	4619      	mov	r1, r3
 8014372:	68b8      	ldr	r0, [r7, #8]
 8014374:	f7ff fe56 	bl	8014024 <etharp_find_entry>
 8014378:	4603      	mov	r3, r0
 801437a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801437c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014380:	2b00      	cmp	r3, #0
 8014382:	da02      	bge.n	801438a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014384:	8afb      	ldrh	r3, [r7, #22]
 8014386:	b25b      	sxtb	r3, r3
 8014388:	e05d      	b.n	8014446 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801438a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801438e:	4933      	ldr	r1, [pc, #204]	@ (801445c <etharp_update_arp_entry+0x148>)
 8014390:	4613      	mov	r3, r2
 8014392:	005b      	lsls	r3, r3, #1
 8014394:	4413      	add	r3, r2
 8014396:	00db      	lsls	r3, r3, #3
 8014398:	440b      	add	r3, r1
 801439a:	3314      	adds	r3, #20
 801439c:	2202      	movs	r2, #2
 801439e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80143a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80143a4:	492d      	ldr	r1, [pc, #180]	@ (801445c <etharp_update_arp_entry+0x148>)
 80143a6:	4613      	mov	r3, r2
 80143a8:	005b      	lsls	r3, r3, #1
 80143aa:	4413      	add	r3, r2
 80143ac:	00db      	lsls	r3, r3, #3
 80143ae:	440b      	add	r3, r1
 80143b0:	3308      	adds	r3, #8
 80143b2:	68fa      	ldr	r2, [r7, #12]
 80143b4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80143b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80143ba:	4613      	mov	r3, r2
 80143bc:	005b      	lsls	r3, r3, #1
 80143be:	4413      	add	r3, r2
 80143c0:	00db      	lsls	r3, r3, #3
 80143c2:	3308      	adds	r3, #8
 80143c4:	4a25      	ldr	r2, [pc, #148]	@ (801445c <etharp_update_arp_entry+0x148>)
 80143c6:	4413      	add	r3, r2
 80143c8:	3304      	adds	r3, #4
 80143ca:	2206      	movs	r2, #6
 80143cc:	6879      	ldr	r1, [r7, #4]
 80143ce:	4618      	mov	r0, r3
 80143d0:	f003 f89f 	bl	8017512 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80143d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80143d8:	4920      	ldr	r1, [pc, #128]	@ (801445c <etharp_update_arp_entry+0x148>)
 80143da:	4613      	mov	r3, r2
 80143dc:	005b      	lsls	r3, r3, #1
 80143de:	4413      	add	r3, r2
 80143e0:	00db      	lsls	r3, r3, #3
 80143e2:	440b      	add	r3, r1
 80143e4:	3312      	adds	r3, #18
 80143e6:	2200      	movs	r2, #0
 80143e8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80143ea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80143ee:	491b      	ldr	r1, [pc, #108]	@ (801445c <etharp_update_arp_entry+0x148>)
 80143f0:	4613      	mov	r3, r2
 80143f2:	005b      	lsls	r3, r3, #1
 80143f4:	4413      	add	r3, r2
 80143f6:	00db      	lsls	r3, r3, #3
 80143f8:	440b      	add	r3, r1
 80143fa:	681b      	ldr	r3, [r3, #0]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d021      	beq.n	8014444 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014400:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014404:	4915      	ldr	r1, [pc, #84]	@ (801445c <etharp_update_arp_entry+0x148>)
 8014406:	4613      	mov	r3, r2
 8014408:	005b      	lsls	r3, r3, #1
 801440a:	4413      	add	r3, r2
 801440c:	00db      	lsls	r3, r3, #3
 801440e:	440b      	add	r3, r1
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014414:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014418:	4910      	ldr	r1, [pc, #64]	@ (801445c <etharp_update_arp_entry+0x148>)
 801441a:	4613      	mov	r3, r2
 801441c:	005b      	lsls	r3, r3, #1
 801441e:	4413      	add	r3, r2
 8014420:	00db      	lsls	r3, r3, #3
 8014422:	440b      	add	r3, r1
 8014424:	2200      	movs	r2, #0
 8014426:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 801442e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014432:	9300      	str	r3, [sp, #0]
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	6939      	ldr	r1, [r7, #16]
 8014438:	68f8      	ldr	r0, [r7, #12]
 801443a:	f002 fbaf 	bl	8016b9c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801443e:	6938      	ldr	r0, [r7, #16]
 8014440:	f7f7 fb20 	bl	800ba84 <pbuf_free>
  }
  return ERR_OK;
 8014444:	2300      	movs	r3, #0
}
 8014446:	4618      	mov	r0, r3
 8014448:	3718      	adds	r7, #24
 801444a:	46bd      	mov	sp, r7
 801444c:	bd80      	pop	{r7, pc}
 801444e:	bf00      	nop
 8014450:	0801ad54 	.word	0x0801ad54
 8014454:	0801ae4c 	.word	0x0801ae4c
 8014458:	0801adcc 	.word	0x0801adcc
 801445c:	2000cb54 	.word	0x2000cb54

08014460 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014460:	b580      	push	{r7, lr}
 8014462:	b084      	sub	sp, #16
 8014464:	af00      	add	r7, sp, #0
 8014466:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014468:	2300      	movs	r3, #0
 801446a:	60fb      	str	r3, [r7, #12]
 801446c:	e01e      	b.n	80144ac <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801446e:	4913      	ldr	r1, [pc, #76]	@ (80144bc <etharp_cleanup_netif+0x5c>)
 8014470:	68fa      	ldr	r2, [r7, #12]
 8014472:	4613      	mov	r3, r2
 8014474:	005b      	lsls	r3, r3, #1
 8014476:	4413      	add	r3, r2
 8014478:	00db      	lsls	r3, r3, #3
 801447a:	440b      	add	r3, r1
 801447c:	3314      	adds	r3, #20
 801447e:	781b      	ldrb	r3, [r3, #0]
 8014480:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014482:	7afb      	ldrb	r3, [r7, #11]
 8014484:	2b00      	cmp	r3, #0
 8014486:	d00e      	beq.n	80144a6 <etharp_cleanup_netif+0x46>
 8014488:	490c      	ldr	r1, [pc, #48]	@ (80144bc <etharp_cleanup_netif+0x5c>)
 801448a:	68fa      	ldr	r2, [r7, #12]
 801448c:	4613      	mov	r3, r2
 801448e:	005b      	lsls	r3, r3, #1
 8014490:	4413      	add	r3, r2
 8014492:	00db      	lsls	r3, r3, #3
 8014494:	440b      	add	r3, r1
 8014496:	3308      	adds	r3, #8
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	687a      	ldr	r2, [r7, #4]
 801449c:	429a      	cmp	r2, r3
 801449e:	d102      	bne.n	80144a6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80144a0:	68f8      	ldr	r0, [r7, #12]
 80144a2:	f7ff fce5 	bl	8013e70 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	3301      	adds	r3, #1
 80144aa:	60fb      	str	r3, [r7, #12]
 80144ac:	68fb      	ldr	r3, [r7, #12]
 80144ae:	2b09      	cmp	r3, #9
 80144b0:	dddd      	ble.n	801446e <etharp_cleanup_netif+0xe>
    }
  }
}
 80144b2:	bf00      	nop
 80144b4:	bf00      	nop
 80144b6:	3710      	adds	r7, #16
 80144b8:	46bd      	mov	sp, r7
 80144ba:	bd80      	pop	{r7, pc}
 80144bc:	2000cb54 	.word	0x2000cb54

080144c0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80144c0:	b5b0      	push	{r4, r5, r7, lr}
 80144c2:	b08a      	sub	sp, #40	@ 0x28
 80144c4:	af04      	add	r7, sp, #16
 80144c6:	6078      	str	r0, [r7, #4]
 80144c8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80144ca:	683b      	ldr	r3, [r7, #0]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d107      	bne.n	80144e0 <etharp_input+0x20>
 80144d0:	4b3f      	ldr	r3, [pc, #252]	@ (80145d0 <etharp_input+0x110>)
 80144d2:	f240 228a 	movw	r2, #650	@ 0x28a
 80144d6:	493f      	ldr	r1, [pc, #252]	@ (80145d4 <etharp_input+0x114>)
 80144d8:	483f      	ldr	r0, [pc, #252]	@ (80145d8 <etharp_input+0x118>)
 80144da:	f002 fdbd 	bl	8017058 <iprintf>
 80144de:	e074      	b.n	80145ca <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	685b      	ldr	r3, [r3, #4]
 80144e4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80144e6:	693b      	ldr	r3, [r7, #16]
 80144e8:	881b      	ldrh	r3, [r3, #0]
 80144ea:	b29b      	uxth	r3, r3
 80144ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80144f0:	d10c      	bne.n	801450c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80144f2:	693b      	ldr	r3, [r7, #16]
 80144f4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80144f6:	2b06      	cmp	r3, #6
 80144f8:	d108      	bne.n	801450c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80144fa:	693b      	ldr	r3, [r7, #16]
 80144fc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80144fe:	2b04      	cmp	r3, #4
 8014500:	d104      	bne.n	801450c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014502:	693b      	ldr	r3, [r7, #16]
 8014504:	885b      	ldrh	r3, [r3, #2]
 8014506:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014508:	2b08      	cmp	r3, #8
 801450a:	d003      	beq.n	8014514 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801450c:	6878      	ldr	r0, [r7, #4]
 801450e:	f7f7 fab9 	bl	800ba84 <pbuf_free>
    return;
 8014512:	e05a      	b.n	80145ca <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014514:	693b      	ldr	r3, [r7, #16]
 8014516:	330e      	adds	r3, #14
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801451c:	693b      	ldr	r3, [r7, #16]
 801451e:	3318      	adds	r3, #24
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014524:	683b      	ldr	r3, [r7, #0]
 8014526:	3304      	adds	r3, #4
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d102      	bne.n	8014534 <etharp_input+0x74>
    for_us = 0;
 801452e:	2300      	movs	r3, #0
 8014530:	75fb      	strb	r3, [r7, #23]
 8014532:	e009      	b.n	8014548 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014534:	68ba      	ldr	r2, [r7, #8]
 8014536:	683b      	ldr	r3, [r7, #0]
 8014538:	3304      	adds	r3, #4
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	429a      	cmp	r2, r3
 801453e:	bf0c      	ite	eq
 8014540:	2301      	moveq	r3, #1
 8014542:	2300      	movne	r3, #0
 8014544:	b2db      	uxtb	r3, r3
 8014546:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014548:	693b      	ldr	r3, [r7, #16]
 801454a:	f103 0208 	add.w	r2, r3, #8
 801454e:	7dfb      	ldrb	r3, [r7, #23]
 8014550:	2b00      	cmp	r3, #0
 8014552:	d001      	beq.n	8014558 <etharp_input+0x98>
 8014554:	2301      	movs	r3, #1
 8014556:	e000      	b.n	801455a <etharp_input+0x9a>
 8014558:	2302      	movs	r3, #2
 801455a:	f107 010c 	add.w	r1, r7, #12
 801455e:	6838      	ldr	r0, [r7, #0]
 8014560:	f7ff fed8 	bl	8014314 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014564:	693b      	ldr	r3, [r7, #16]
 8014566:	88db      	ldrh	r3, [r3, #6]
 8014568:	b29b      	uxth	r3, r3
 801456a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801456e:	d003      	beq.n	8014578 <etharp_input+0xb8>
 8014570:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014574:	d01e      	beq.n	80145b4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014576:	e025      	b.n	80145c4 <etharp_input+0x104>
      if (for_us) {
 8014578:	7dfb      	ldrb	r3, [r7, #23]
 801457a:	2b00      	cmp	r3, #0
 801457c:	d021      	beq.n	80145c2 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801457e:	683b      	ldr	r3, [r7, #0]
 8014580:	f103 0036 	add.w	r0, r3, #54	@ 0x36
 8014584:	693b      	ldr	r3, [r7, #16]
 8014586:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801458a:	683b      	ldr	r3, [r7, #0]
 801458c:	f103 0536 	add.w	r5, r3, #54	@ 0x36
 8014590:	683b      	ldr	r3, [r7, #0]
 8014592:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014594:	693a      	ldr	r2, [r7, #16]
 8014596:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014598:	2102      	movs	r1, #2
 801459a:	9103      	str	r1, [sp, #12]
 801459c:	f107 010c 	add.w	r1, r7, #12
 80145a0:	9102      	str	r1, [sp, #8]
 80145a2:	9201      	str	r2, [sp, #4]
 80145a4:	9300      	str	r3, [sp, #0]
 80145a6:	462b      	mov	r3, r5
 80145a8:	4622      	mov	r2, r4
 80145aa:	4601      	mov	r1, r0
 80145ac:	6838      	ldr	r0, [r7, #0]
 80145ae:	f000 faef 	bl	8014b90 <etharp_raw>
      break;
 80145b2:	e006      	b.n	80145c2 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 80145b4:	f107 030c 	add.w	r3, r7, #12
 80145b8:	4619      	mov	r1, r3
 80145ba:	6838      	ldr	r0, [r7, #0]
 80145bc:	f7fe f988 	bl	80128d0 <dhcp_arp_reply>
      break;
 80145c0:	e000      	b.n	80145c4 <etharp_input+0x104>
      break;
 80145c2:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80145c4:	6878      	ldr	r0, [r7, #4]
 80145c6:	f7f7 fa5d 	bl	800ba84 <pbuf_free>
}
 80145ca:	3718      	adds	r7, #24
 80145cc:	46bd      	mov	sp, r7
 80145ce:	bdb0      	pop	{r4, r5, r7, pc}
 80145d0:	0801ad54 	.word	0x0801ad54
 80145d4:	0801aea4 	.word	0x0801aea4
 80145d8:	0801adcc 	.word	0x0801adcc

080145dc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80145dc:	b580      	push	{r7, lr}
 80145de:	b086      	sub	sp, #24
 80145e0:	af02      	add	r7, sp, #8
 80145e2:	60f8      	str	r0, [r7, #12]
 80145e4:	60b9      	str	r1, [r7, #8]
 80145e6:	4613      	mov	r3, r2
 80145e8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80145ea:	79fa      	ldrb	r2, [r7, #7]
 80145ec:	4944      	ldr	r1, [pc, #272]	@ (8014700 <etharp_output_to_arp_index+0x124>)
 80145ee:	4613      	mov	r3, r2
 80145f0:	005b      	lsls	r3, r3, #1
 80145f2:	4413      	add	r3, r2
 80145f4:	00db      	lsls	r3, r3, #3
 80145f6:	440b      	add	r3, r1
 80145f8:	3314      	adds	r3, #20
 80145fa:	781b      	ldrb	r3, [r3, #0]
 80145fc:	2b01      	cmp	r3, #1
 80145fe:	d806      	bhi.n	801460e <etharp_output_to_arp_index+0x32>
 8014600:	4b40      	ldr	r3, [pc, #256]	@ (8014704 <etharp_output_to_arp_index+0x128>)
 8014602:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8014606:	4940      	ldr	r1, [pc, #256]	@ (8014708 <etharp_output_to_arp_index+0x12c>)
 8014608:	4840      	ldr	r0, [pc, #256]	@ (801470c <etharp_output_to_arp_index+0x130>)
 801460a:	f002 fd25 	bl	8017058 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801460e:	79fa      	ldrb	r2, [r7, #7]
 8014610:	493b      	ldr	r1, [pc, #236]	@ (8014700 <etharp_output_to_arp_index+0x124>)
 8014612:	4613      	mov	r3, r2
 8014614:	005b      	lsls	r3, r3, #1
 8014616:	4413      	add	r3, r2
 8014618:	00db      	lsls	r3, r3, #3
 801461a:	440b      	add	r3, r1
 801461c:	3314      	adds	r3, #20
 801461e:	781b      	ldrb	r3, [r3, #0]
 8014620:	2b02      	cmp	r3, #2
 8014622:	d153      	bne.n	80146cc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014624:	79fa      	ldrb	r2, [r7, #7]
 8014626:	4936      	ldr	r1, [pc, #216]	@ (8014700 <etharp_output_to_arp_index+0x124>)
 8014628:	4613      	mov	r3, r2
 801462a:	005b      	lsls	r3, r3, #1
 801462c:	4413      	add	r3, r2
 801462e:	00db      	lsls	r3, r3, #3
 8014630:	440b      	add	r3, r1
 8014632:	3312      	adds	r3, #18
 8014634:	881b      	ldrh	r3, [r3, #0]
 8014636:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801463a:	d919      	bls.n	8014670 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801463c:	79fa      	ldrb	r2, [r7, #7]
 801463e:	4613      	mov	r3, r2
 8014640:	005b      	lsls	r3, r3, #1
 8014642:	4413      	add	r3, r2
 8014644:	00db      	lsls	r3, r3, #3
 8014646:	4a2e      	ldr	r2, [pc, #184]	@ (8014700 <etharp_output_to_arp_index+0x124>)
 8014648:	4413      	add	r3, r2
 801464a:	3304      	adds	r3, #4
 801464c:	4619      	mov	r1, r3
 801464e:	68f8      	ldr	r0, [r7, #12]
 8014650:	f000 fb4c 	bl	8014cec <etharp_request>
 8014654:	4603      	mov	r3, r0
 8014656:	2b00      	cmp	r3, #0
 8014658:	d138      	bne.n	80146cc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801465a:	79fa      	ldrb	r2, [r7, #7]
 801465c:	4928      	ldr	r1, [pc, #160]	@ (8014700 <etharp_output_to_arp_index+0x124>)
 801465e:	4613      	mov	r3, r2
 8014660:	005b      	lsls	r3, r3, #1
 8014662:	4413      	add	r3, r2
 8014664:	00db      	lsls	r3, r3, #3
 8014666:	440b      	add	r3, r1
 8014668:	3314      	adds	r3, #20
 801466a:	2203      	movs	r2, #3
 801466c:	701a      	strb	r2, [r3, #0]
 801466e:	e02d      	b.n	80146cc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014670:	79fa      	ldrb	r2, [r7, #7]
 8014672:	4923      	ldr	r1, [pc, #140]	@ (8014700 <etharp_output_to_arp_index+0x124>)
 8014674:	4613      	mov	r3, r2
 8014676:	005b      	lsls	r3, r3, #1
 8014678:	4413      	add	r3, r2
 801467a:	00db      	lsls	r3, r3, #3
 801467c:	440b      	add	r3, r1
 801467e:	3312      	adds	r3, #18
 8014680:	881b      	ldrh	r3, [r3, #0]
 8014682:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8014686:	d321      	bcc.n	80146cc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014688:	79fa      	ldrb	r2, [r7, #7]
 801468a:	4613      	mov	r3, r2
 801468c:	005b      	lsls	r3, r3, #1
 801468e:	4413      	add	r3, r2
 8014690:	00db      	lsls	r3, r3, #3
 8014692:	4a1b      	ldr	r2, [pc, #108]	@ (8014700 <etharp_output_to_arp_index+0x124>)
 8014694:	4413      	add	r3, r2
 8014696:	1d19      	adds	r1, r3, #4
 8014698:	79fa      	ldrb	r2, [r7, #7]
 801469a:	4613      	mov	r3, r2
 801469c:	005b      	lsls	r3, r3, #1
 801469e:	4413      	add	r3, r2
 80146a0:	00db      	lsls	r3, r3, #3
 80146a2:	3308      	adds	r3, #8
 80146a4:	4a16      	ldr	r2, [pc, #88]	@ (8014700 <etharp_output_to_arp_index+0x124>)
 80146a6:	4413      	add	r3, r2
 80146a8:	3304      	adds	r3, #4
 80146aa:	461a      	mov	r2, r3
 80146ac:	68f8      	ldr	r0, [r7, #12]
 80146ae:	f000 fafb 	bl	8014ca8 <etharp_request_dst>
 80146b2:	4603      	mov	r3, r0
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d109      	bne.n	80146cc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80146b8:	79fa      	ldrb	r2, [r7, #7]
 80146ba:	4911      	ldr	r1, [pc, #68]	@ (8014700 <etharp_output_to_arp_index+0x124>)
 80146bc:	4613      	mov	r3, r2
 80146be:	005b      	lsls	r3, r3, #1
 80146c0:	4413      	add	r3, r2
 80146c2:	00db      	lsls	r3, r3, #3
 80146c4:	440b      	add	r3, r1
 80146c6:	3314      	adds	r3, #20
 80146c8:	2203      	movs	r2, #3
 80146ca:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	f103 0136 	add.w	r1, r3, #54	@ 0x36
 80146d2:	79fa      	ldrb	r2, [r7, #7]
 80146d4:	4613      	mov	r3, r2
 80146d6:	005b      	lsls	r3, r3, #1
 80146d8:	4413      	add	r3, r2
 80146da:	00db      	lsls	r3, r3, #3
 80146dc:	3308      	adds	r3, #8
 80146de:	4a08      	ldr	r2, [pc, #32]	@ (8014700 <etharp_output_to_arp_index+0x124>)
 80146e0:	4413      	add	r3, r2
 80146e2:	3304      	adds	r3, #4
 80146e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80146e8:	9200      	str	r2, [sp, #0]
 80146ea:	460a      	mov	r2, r1
 80146ec:	68b9      	ldr	r1, [r7, #8]
 80146ee:	68f8      	ldr	r0, [r7, #12]
 80146f0:	f002 fa54 	bl	8016b9c <ethernet_output>
 80146f4:	4603      	mov	r3, r0
}
 80146f6:	4618      	mov	r0, r3
 80146f8:	3710      	adds	r7, #16
 80146fa:	46bd      	mov	sp, r7
 80146fc:	bd80      	pop	{r7, pc}
 80146fe:	bf00      	nop
 8014700:	2000cb54 	.word	0x2000cb54
 8014704:	0801ad54 	.word	0x0801ad54
 8014708:	0801aec4 	.word	0x0801aec4
 801470c:	0801adcc 	.word	0x0801adcc

08014710 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014710:	b580      	push	{r7, lr}
 8014712:	b08a      	sub	sp, #40	@ 0x28
 8014714:	af02      	add	r7, sp, #8
 8014716:	60f8      	str	r0, [r7, #12]
 8014718:	60b9      	str	r1, [r7, #8]
 801471a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	2b00      	cmp	r3, #0
 8014724:	d106      	bne.n	8014734 <etharp_output+0x24>
 8014726:	4b73      	ldr	r3, [pc, #460]	@ (80148f4 <etharp_output+0x1e4>)
 8014728:	f240 321e 	movw	r2, #798	@ 0x31e
 801472c:	4972      	ldr	r1, [pc, #456]	@ (80148f8 <etharp_output+0x1e8>)
 801472e:	4873      	ldr	r0, [pc, #460]	@ (80148fc <etharp_output+0x1ec>)
 8014730:	f002 fc92 	bl	8017058 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014734:	68bb      	ldr	r3, [r7, #8]
 8014736:	2b00      	cmp	r3, #0
 8014738:	d106      	bne.n	8014748 <etharp_output+0x38>
 801473a:	4b6e      	ldr	r3, [pc, #440]	@ (80148f4 <etharp_output+0x1e4>)
 801473c:	f240 321f 	movw	r2, #799	@ 0x31f
 8014740:	496f      	ldr	r1, [pc, #444]	@ (8014900 <etharp_output+0x1f0>)
 8014742:	486e      	ldr	r0, [pc, #440]	@ (80148fc <etharp_output+0x1ec>)
 8014744:	f002 fc88 	bl	8017058 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d106      	bne.n	801475c <etharp_output+0x4c>
 801474e:	4b69      	ldr	r3, [pc, #420]	@ (80148f4 <etharp_output+0x1e4>)
 8014750:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8014754:	496b      	ldr	r1, [pc, #428]	@ (8014904 <etharp_output+0x1f4>)
 8014756:	4869      	ldr	r0, [pc, #420]	@ (80148fc <etharp_output+0x1ec>)
 8014758:	f002 fc7e 	bl	8017058 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	68f9      	ldr	r1, [r7, #12]
 8014762:	4618      	mov	r0, r3
 8014764:	f001 fa7c 	bl	8015c60 <ip4_addr_isbroadcast_u32>
 8014768:	4603      	mov	r3, r0
 801476a:	2b00      	cmp	r3, #0
 801476c:	d002      	beq.n	8014774 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801476e:	4b66      	ldr	r3, [pc, #408]	@ (8014908 <etharp_output+0x1f8>)
 8014770:	61fb      	str	r3, [r7, #28]
 8014772:	e0af      	b.n	80148d4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801477c:	2be0      	cmp	r3, #224	@ 0xe0
 801477e:	d118      	bne.n	80147b2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014780:	2301      	movs	r3, #1
 8014782:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014784:	2300      	movs	r3, #0
 8014786:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014788:	235e      	movs	r3, #94	@ 0x5e
 801478a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	3301      	adds	r3, #1
 8014790:	781b      	ldrb	r3, [r3, #0]
 8014792:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014796:	b2db      	uxtb	r3, r3
 8014798:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	3302      	adds	r3, #2
 801479e:	781b      	ldrb	r3, [r3, #0]
 80147a0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	3303      	adds	r3, #3
 80147a6:	781b      	ldrb	r3, [r3, #0]
 80147a8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80147aa:	f107 0310 	add.w	r3, r7, #16
 80147ae:	61fb      	str	r3, [r7, #28]
 80147b0:	e090      	b.n	80148d4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	681a      	ldr	r2, [r3, #0]
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	3304      	adds	r3, #4
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	405a      	eors	r2, r3
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	3308      	adds	r3, #8
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	4013      	ands	r3, r2
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d012      	beq.n	80147f0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80147d0:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 80147d4:	4293      	cmp	r3, r2
 80147d6:	d00b      	beq.n	80147f0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	330c      	adds	r3, #12
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d003      	beq.n	80147ea <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	330c      	adds	r3, #12
 80147e6:	61bb      	str	r3, [r7, #24]
 80147e8:	e002      	b.n	80147f0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80147ea:	f06f 0303 	mvn.w	r3, #3
 80147ee:	e07d      	b.n	80148ec <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80147f0:	4b46      	ldr	r3, [pc, #280]	@ (801490c <etharp_output+0x1fc>)
 80147f2:	781b      	ldrb	r3, [r3, #0]
 80147f4:	4619      	mov	r1, r3
 80147f6:	4a46      	ldr	r2, [pc, #280]	@ (8014910 <etharp_output+0x200>)
 80147f8:	460b      	mov	r3, r1
 80147fa:	005b      	lsls	r3, r3, #1
 80147fc:	440b      	add	r3, r1
 80147fe:	00db      	lsls	r3, r3, #3
 8014800:	4413      	add	r3, r2
 8014802:	3314      	adds	r3, #20
 8014804:	781b      	ldrb	r3, [r3, #0]
 8014806:	2b01      	cmp	r3, #1
 8014808:	d925      	bls.n	8014856 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801480a:	4b40      	ldr	r3, [pc, #256]	@ (801490c <etharp_output+0x1fc>)
 801480c:	781b      	ldrb	r3, [r3, #0]
 801480e:	4619      	mov	r1, r3
 8014810:	4a3f      	ldr	r2, [pc, #252]	@ (8014910 <etharp_output+0x200>)
 8014812:	460b      	mov	r3, r1
 8014814:	005b      	lsls	r3, r3, #1
 8014816:	440b      	add	r3, r1
 8014818:	00db      	lsls	r3, r3, #3
 801481a:	4413      	add	r3, r2
 801481c:	3308      	adds	r3, #8
 801481e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014820:	68fa      	ldr	r2, [r7, #12]
 8014822:	429a      	cmp	r2, r3
 8014824:	d117      	bne.n	8014856 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014826:	69bb      	ldr	r3, [r7, #24]
 8014828:	681a      	ldr	r2, [r3, #0]
 801482a:	4b38      	ldr	r3, [pc, #224]	@ (801490c <etharp_output+0x1fc>)
 801482c:	781b      	ldrb	r3, [r3, #0]
 801482e:	4618      	mov	r0, r3
 8014830:	4937      	ldr	r1, [pc, #220]	@ (8014910 <etharp_output+0x200>)
 8014832:	4603      	mov	r3, r0
 8014834:	005b      	lsls	r3, r3, #1
 8014836:	4403      	add	r3, r0
 8014838:	00db      	lsls	r3, r3, #3
 801483a:	440b      	add	r3, r1
 801483c:	3304      	adds	r3, #4
 801483e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014840:	429a      	cmp	r2, r3
 8014842:	d108      	bne.n	8014856 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014844:	4b31      	ldr	r3, [pc, #196]	@ (801490c <etharp_output+0x1fc>)
 8014846:	781b      	ldrb	r3, [r3, #0]
 8014848:	461a      	mov	r2, r3
 801484a:	68b9      	ldr	r1, [r7, #8]
 801484c:	68f8      	ldr	r0, [r7, #12]
 801484e:	f7ff fec5 	bl	80145dc <etharp_output_to_arp_index>
 8014852:	4603      	mov	r3, r0
 8014854:	e04a      	b.n	80148ec <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014856:	2300      	movs	r3, #0
 8014858:	75fb      	strb	r3, [r7, #23]
 801485a:	e031      	b.n	80148c0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801485c:	7dfa      	ldrb	r2, [r7, #23]
 801485e:	492c      	ldr	r1, [pc, #176]	@ (8014910 <etharp_output+0x200>)
 8014860:	4613      	mov	r3, r2
 8014862:	005b      	lsls	r3, r3, #1
 8014864:	4413      	add	r3, r2
 8014866:	00db      	lsls	r3, r3, #3
 8014868:	440b      	add	r3, r1
 801486a:	3314      	adds	r3, #20
 801486c:	781b      	ldrb	r3, [r3, #0]
 801486e:	2b01      	cmp	r3, #1
 8014870:	d923      	bls.n	80148ba <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014872:	7dfa      	ldrb	r2, [r7, #23]
 8014874:	4926      	ldr	r1, [pc, #152]	@ (8014910 <etharp_output+0x200>)
 8014876:	4613      	mov	r3, r2
 8014878:	005b      	lsls	r3, r3, #1
 801487a:	4413      	add	r3, r2
 801487c:	00db      	lsls	r3, r3, #3
 801487e:	440b      	add	r3, r1
 8014880:	3308      	adds	r3, #8
 8014882:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014884:	68fa      	ldr	r2, [r7, #12]
 8014886:	429a      	cmp	r2, r3
 8014888:	d117      	bne.n	80148ba <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801488a:	69bb      	ldr	r3, [r7, #24]
 801488c:	6819      	ldr	r1, [r3, #0]
 801488e:	7dfa      	ldrb	r2, [r7, #23]
 8014890:	481f      	ldr	r0, [pc, #124]	@ (8014910 <etharp_output+0x200>)
 8014892:	4613      	mov	r3, r2
 8014894:	005b      	lsls	r3, r3, #1
 8014896:	4413      	add	r3, r2
 8014898:	00db      	lsls	r3, r3, #3
 801489a:	4403      	add	r3, r0
 801489c:	3304      	adds	r3, #4
 801489e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80148a0:	4299      	cmp	r1, r3
 80148a2:	d10a      	bne.n	80148ba <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80148a4:	4a19      	ldr	r2, [pc, #100]	@ (801490c <etharp_output+0x1fc>)
 80148a6:	7dfb      	ldrb	r3, [r7, #23]
 80148a8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80148aa:	7dfb      	ldrb	r3, [r7, #23]
 80148ac:	461a      	mov	r2, r3
 80148ae:	68b9      	ldr	r1, [r7, #8]
 80148b0:	68f8      	ldr	r0, [r7, #12]
 80148b2:	f7ff fe93 	bl	80145dc <etharp_output_to_arp_index>
 80148b6:	4603      	mov	r3, r0
 80148b8:	e018      	b.n	80148ec <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80148ba:	7dfb      	ldrb	r3, [r7, #23]
 80148bc:	3301      	adds	r3, #1
 80148be:	75fb      	strb	r3, [r7, #23]
 80148c0:	7dfb      	ldrb	r3, [r7, #23]
 80148c2:	2b09      	cmp	r3, #9
 80148c4:	d9ca      	bls.n	801485c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80148c6:	68ba      	ldr	r2, [r7, #8]
 80148c8:	69b9      	ldr	r1, [r7, #24]
 80148ca:	68f8      	ldr	r0, [r7, #12]
 80148cc:	f000 f822 	bl	8014914 <etharp_query>
 80148d0:	4603      	mov	r3, r0
 80148d2:	e00b      	b.n	80148ec <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 80148da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80148de:	9300      	str	r3, [sp, #0]
 80148e0:	69fb      	ldr	r3, [r7, #28]
 80148e2:	68b9      	ldr	r1, [r7, #8]
 80148e4:	68f8      	ldr	r0, [r7, #12]
 80148e6:	f002 f959 	bl	8016b9c <ethernet_output>
 80148ea:	4603      	mov	r3, r0
}
 80148ec:	4618      	mov	r0, r3
 80148ee:	3720      	adds	r7, #32
 80148f0:	46bd      	mov	sp, r7
 80148f2:	bd80      	pop	{r7, pc}
 80148f4:	0801ad54 	.word	0x0801ad54
 80148f8:	0801aea4 	.word	0x0801aea4
 80148fc:	0801adcc 	.word	0x0801adcc
 8014900:	0801aef4 	.word	0x0801aef4
 8014904:	0801ae94 	.word	0x0801ae94
 8014908:	0801b8dc 	.word	0x0801b8dc
 801490c:	2000cc44 	.word	0x2000cc44
 8014910:	2000cb54 	.word	0x2000cb54

08014914 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014914:	b580      	push	{r7, lr}
 8014916:	b08c      	sub	sp, #48	@ 0x30
 8014918:	af02      	add	r7, sp, #8
 801491a:	60f8      	str	r0, [r7, #12]
 801491c:	60b9      	str	r1, [r7, #8]
 801491e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	3336      	adds	r3, #54	@ 0x36
 8014924:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014926:	23ff      	movs	r3, #255	@ 0xff
 8014928:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801492c:	2300      	movs	r3, #0
 801492e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014930:	68bb      	ldr	r3, [r7, #8]
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	68f9      	ldr	r1, [r7, #12]
 8014936:	4618      	mov	r0, r3
 8014938:	f001 f992 	bl	8015c60 <ip4_addr_isbroadcast_u32>
 801493c:	4603      	mov	r3, r0
 801493e:	2b00      	cmp	r3, #0
 8014940:	d10c      	bne.n	801495c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014942:	68bb      	ldr	r3, [r7, #8]
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801494a:	2be0      	cmp	r3, #224	@ 0xe0
 801494c:	d006      	beq.n	801495c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801494e:	68bb      	ldr	r3, [r7, #8]
 8014950:	2b00      	cmp	r3, #0
 8014952:	d003      	beq.n	801495c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014954:	68bb      	ldr	r3, [r7, #8]
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	2b00      	cmp	r3, #0
 801495a:	d102      	bne.n	8014962 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801495c:	f06f 030f 	mvn.w	r3, #15
 8014960:	e101      	b.n	8014b66 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014962:	68fa      	ldr	r2, [r7, #12]
 8014964:	2101      	movs	r1, #1
 8014966:	68b8      	ldr	r0, [r7, #8]
 8014968:	f7ff fb5c 	bl	8014024 <etharp_find_entry>
 801496c:	4603      	mov	r3, r0
 801496e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014970:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014974:	2b00      	cmp	r3, #0
 8014976:	da02      	bge.n	801497e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014978:	8a7b      	ldrh	r3, [r7, #18]
 801497a:	b25b      	sxtb	r3, r3
 801497c:	e0f3      	b.n	8014b66 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801497e:	8a7b      	ldrh	r3, [r7, #18]
 8014980:	2b7e      	cmp	r3, #126	@ 0x7e
 8014982:	d906      	bls.n	8014992 <etharp_query+0x7e>
 8014984:	4b7a      	ldr	r3, [pc, #488]	@ (8014b70 <etharp_query+0x25c>)
 8014986:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801498a:	497a      	ldr	r1, [pc, #488]	@ (8014b74 <etharp_query+0x260>)
 801498c:	487a      	ldr	r0, [pc, #488]	@ (8014b78 <etharp_query+0x264>)
 801498e:	f002 fb63 	bl	8017058 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014992:	8a7b      	ldrh	r3, [r7, #18]
 8014994:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014996:	7c7a      	ldrb	r2, [r7, #17]
 8014998:	4978      	ldr	r1, [pc, #480]	@ (8014b7c <etharp_query+0x268>)
 801499a:	4613      	mov	r3, r2
 801499c:	005b      	lsls	r3, r3, #1
 801499e:	4413      	add	r3, r2
 80149a0:	00db      	lsls	r3, r3, #3
 80149a2:	440b      	add	r3, r1
 80149a4:	3314      	adds	r3, #20
 80149a6:	781b      	ldrb	r3, [r3, #0]
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d115      	bne.n	80149d8 <etharp_query+0xc4>
    is_new_entry = 1;
 80149ac:	2301      	movs	r3, #1
 80149ae:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80149b0:	7c7a      	ldrb	r2, [r7, #17]
 80149b2:	4972      	ldr	r1, [pc, #456]	@ (8014b7c <etharp_query+0x268>)
 80149b4:	4613      	mov	r3, r2
 80149b6:	005b      	lsls	r3, r3, #1
 80149b8:	4413      	add	r3, r2
 80149ba:	00db      	lsls	r3, r3, #3
 80149bc:	440b      	add	r3, r1
 80149be:	3314      	adds	r3, #20
 80149c0:	2201      	movs	r2, #1
 80149c2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80149c4:	7c7a      	ldrb	r2, [r7, #17]
 80149c6:	496d      	ldr	r1, [pc, #436]	@ (8014b7c <etharp_query+0x268>)
 80149c8:	4613      	mov	r3, r2
 80149ca:	005b      	lsls	r3, r3, #1
 80149cc:	4413      	add	r3, r2
 80149ce:	00db      	lsls	r3, r3, #3
 80149d0:	440b      	add	r3, r1
 80149d2:	3308      	adds	r3, #8
 80149d4:	68fa      	ldr	r2, [r7, #12]
 80149d6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80149d8:	7c7a      	ldrb	r2, [r7, #17]
 80149da:	4968      	ldr	r1, [pc, #416]	@ (8014b7c <etharp_query+0x268>)
 80149dc:	4613      	mov	r3, r2
 80149de:	005b      	lsls	r3, r3, #1
 80149e0:	4413      	add	r3, r2
 80149e2:	00db      	lsls	r3, r3, #3
 80149e4:	440b      	add	r3, r1
 80149e6:	3314      	adds	r3, #20
 80149e8:	781b      	ldrb	r3, [r3, #0]
 80149ea:	2b01      	cmp	r3, #1
 80149ec:	d011      	beq.n	8014a12 <etharp_query+0xfe>
 80149ee:	7c7a      	ldrb	r2, [r7, #17]
 80149f0:	4962      	ldr	r1, [pc, #392]	@ (8014b7c <etharp_query+0x268>)
 80149f2:	4613      	mov	r3, r2
 80149f4:	005b      	lsls	r3, r3, #1
 80149f6:	4413      	add	r3, r2
 80149f8:	00db      	lsls	r3, r3, #3
 80149fa:	440b      	add	r3, r1
 80149fc:	3314      	adds	r3, #20
 80149fe:	781b      	ldrb	r3, [r3, #0]
 8014a00:	2b01      	cmp	r3, #1
 8014a02:	d806      	bhi.n	8014a12 <etharp_query+0xfe>
 8014a04:	4b5a      	ldr	r3, [pc, #360]	@ (8014b70 <etharp_query+0x25c>)
 8014a06:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8014a0a:	495d      	ldr	r1, [pc, #372]	@ (8014b80 <etharp_query+0x26c>)
 8014a0c:	485a      	ldr	r0, [pc, #360]	@ (8014b78 <etharp_query+0x264>)
 8014a0e:	f002 fb23 	bl	8017058 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014a12:	6a3b      	ldr	r3, [r7, #32]
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d102      	bne.n	8014a1e <etharp_query+0x10a>
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d10c      	bne.n	8014a38 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014a1e:	68b9      	ldr	r1, [r7, #8]
 8014a20:	68f8      	ldr	r0, [r7, #12]
 8014a22:	f000 f963 	bl	8014cec <etharp_request>
 8014a26:	4603      	mov	r3, r0
 8014a28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d102      	bne.n	8014a38 <etharp_query+0x124>
      return result;
 8014a32:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8014a36:	e096      	b.n	8014b66 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d106      	bne.n	8014a4c <etharp_query+0x138>
 8014a3e:	4b4c      	ldr	r3, [pc, #304]	@ (8014b70 <etharp_query+0x25c>)
 8014a40:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8014a44:	494f      	ldr	r1, [pc, #316]	@ (8014b84 <etharp_query+0x270>)
 8014a46:	484c      	ldr	r0, [pc, #304]	@ (8014b78 <etharp_query+0x264>)
 8014a48:	f002 fb06 	bl	8017058 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014a4c:	7c7a      	ldrb	r2, [r7, #17]
 8014a4e:	494b      	ldr	r1, [pc, #300]	@ (8014b7c <etharp_query+0x268>)
 8014a50:	4613      	mov	r3, r2
 8014a52:	005b      	lsls	r3, r3, #1
 8014a54:	4413      	add	r3, r2
 8014a56:	00db      	lsls	r3, r3, #3
 8014a58:	440b      	add	r3, r1
 8014a5a:	3314      	adds	r3, #20
 8014a5c:	781b      	ldrb	r3, [r3, #0]
 8014a5e:	2b01      	cmp	r3, #1
 8014a60:	d917      	bls.n	8014a92 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014a62:	4a49      	ldr	r2, [pc, #292]	@ (8014b88 <etharp_query+0x274>)
 8014a64:	7c7b      	ldrb	r3, [r7, #17]
 8014a66:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014a68:	7c7a      	ldrb	r2, [r7, #17]
 8014a6a:	4613      	mov	r3, r2
 8014a6c:	005b      	lsls	r3, r3, #1
 8014a6e:	4413      	add	r3, r2
 8014a70:	00db      	lsls	r3, r3, #3
 8014a72:	3308      	adds	r3, #8
 8014a74:	4a41      	ldr	r2, [pc, #260]	@ (8014b7c <etharp_query+0x268>)
 8014a76:	4413      	add	r3, r2
 8014a78:	3304      	adds	r3, #4
 8014a7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014a7e:	9200      	str	r2, [sp, #0]
 8014a80:	697a      	ldr	r2, [r7, #20]
 8014a82:	6879      	ldr	r1, [r7, #4]
 8014a84:	68f8      	ldr	r0, [r7, #12]
 8014a86:	f002 f889 	bl	8016b9c <ethernet_output>
 8014a8a:	4603      	mov	r3, r0
 8014a8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014a90:	e067      	b.n	8014b62 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014a92:	7c7a      	ldrb	r2, [r7, #17]
 8014a94:	4939      	ldr	r1, [pc, #228]	@ (8014b7c <etharp_query+0x268>)
 8014a96:	4613      	mov	r3, r2
 8014a98:	005b      	lsls	r3, r3, #1
 8014a9a:	4413      	add	r3, r2
 8014a9c:	00db      	lsls	r3, r3, #3
 8014a9e:	440b      	add	r3, r1
 8014aa0:	3314      	adds	r3, #20
 8014aa2:	781b      	ldrb	r3, [r3, #0]
 8014aa4:	2b01      	cmp	r3, #1
 8014aa6:	d15c      	bne.n	8014b62 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014aa8:	2300      	movs	r3, #0
 8014aaa:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014ab0:	e01c      	b.n	8014aec <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014ab2:	69fb      	ldr	r3, [r7, #28]
 8014ab4:	895a      	ldrh	r2, [r3, #10]
 8014ab6:	69fb      	ldr	r3, [r7, #28]
 8014ab8:	891b      	ldrh	r3, [r3, #8]
 8014aba:	429a      	cmp	r2, r3
 8014abc:	d10a      	bne.n	8014ad4 <etharp_query+0x1c0>
 8014abe:	69fb      	ldr	r3, [r7, #28]
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d006      	beq.n	8014ad4 <etharp_query+0x1c0>
 8014ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8014b70 <etharp_query+0x25c>)
 8014ac8:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8014acc:	492f      	ldr	r1, [pc, #188]	@ (8014b8c <etharp_query+0x278>)
 8014ace:	482a      	ldr	r0, [pc, #168]	@ (8014b78 <etharp_query+0x264>)
 8014ad0:	f002 fac2 	bl	8017058 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014ad4:	69fb      	ldr	r3, [r7, #28]
 8014ad6:	7b1b      	ldrb	r3, [r3, #12]
 8014ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d002      	beq.n	8014ae6 <etharp_query+0x1d2>
        copy_needed = 1;
 8014ae0:	2301      	movs	r3, #1
 8014ae2:	61bb      	str	r3, [r7, #24]
        break;
 8014ae4:	e005      	b.n	8014af2 <etharp_query+0x1de>
      }
      p = p->next;
 8014ae6:	69fb      	ldr	r3, [r7, #28]
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014aec:	69fb      	ldr	r3, [r7, #28]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d1df      	bne.n	8014ab2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014af2:	69bb      	ldr	r3, [r7, #24]
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d007      	beq.n	8014b08 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014af8:	687a      	ldr	r2, [r7, #4]
 8014afa:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8014afe:	200e      	movs	r0, #14
 8014b00:	f7f7 fa38 	bl	800bf74 <pbuf_clone>
 8014b04:	61f8      	str	r0, [r7, #28]
 8014b06:	e004      	b.n	8014b12 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014b0c:	69f8      	ldr	r0, [r7, #28]
 8014b0e:	f7f7 f85f 	bl	800bbd0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014b12:	69fb      	ldr	r3, [r7, #28]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d021      	beq.n	8014b5c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014b18:	7c7a      	ldrb	r2, [r7, #17]
 8014b1a:	4918      	ldr	r1, [pc, #96]	@ (8014b7c <etharp_query+0x268>)
 8014b1c:	4613      	mov	r3, r2
 8014b1e:	005b      	lsls	r3, r3, #1
 8014b20:	4413      	add	r3, r2
 8014b22:	00db      	lsls	r3, r3, #3
 8014b24:	440b      	add	r3, r1
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d00a      	beq.n	8014b42 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014b2c:	7c7a      	ldrb	r2, [r7, #17]
 8014b2e:	4913      	ldr	r1, [pc, #76]	@ (8014b7c <etharp_query+0x268>)
 8014b30:	4613      	mov	r3, r2
 8014b32:	005b      	lsls	r3, r3, #1
 8014b34:	4413      	add	r3, r2
 8014b36:	00db      	lsls	r3, r3, #3
 8014b38:	440b      	add	r3, r1
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	4618      	mov	r0, r3
 8014b3e:	f7f6 ffa1 	bl	800ba84 <pbuf_free>
      }
      arp_table[i].q = p;
 8014b42:	7c7a      	ldrb	r2, [r7, #17]
 8014b44:	490d      	ldr	r1, [pc, #52]	@ (8014b7c <etharp_query+0x268>)
 8014b46:	4613      	mov	r3, r2
 8014b48:	005b      	lsls	r3, r3, #1
 8014b4a:	4413      	add	r3, r2
 8014b4c:	00db      	lsls	r3, r3, #3
 8014b4e:	440b      	add	r3, r1
 8014b50:	69fa      	ldr	r2, [r7, #28]
 8014b52:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014b54:	2300      	movs	r3, #0
 8014b56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014b5a:	e002      	b.n	8014b62 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014b5c:	23ff      	movs	r3, #255	@ 0xff
 8014b5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8014b62:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8014b66:	4618      	mov	r0, r3
 8014b68:	3728      	adds	r7, #40	@ 0x28
 8014b6a:	46bd      	mov	sp, r7
 8014b6c:	bd80      	pop	{r7, pc}
 8014b6e:	bf00      	nop
 8014b70:	0801ad54 	.word	0x0801ad54
 8014b74:	0801af00 	.word	0x0801af00
 8014b78:	0801adcc 	.word	0x0801adcc
 8014b7c:	2000cb54 	.word	0x2000cb54
 8014b80:	0801af10 	.word	0x0801af10
 8014b84:	0801aef4 	.word	0x0801aef4
 8014b88:	2000cc44 	.word	0x2000cc44
 8014b8c:	0801af38 	.word	0x0801af38

08014b90 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014b90:	b580      	push	{r7, lr}
 8014b92:	b08a      	sub	sp, #40	@ 0x28
 8014b94:	af02      	add	r7, sp, #8
 8014b96:	60f8      	str	r0, [r7, #12]
 8014b98:	60b9      	str	r1, [r7, #8]
 8014b9a:	607a      	str	r2, [r7, #4]
 8014b9c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014b9e:	2300      	movs	r3, #0
 8014ba0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014ba2:	68fb      	ldr	r3, [r7, #12]
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d106      	bne.n	8014bb6 <etharp_raw+0x26>
 8014ba8:	4b3a      	ldr	r3, [pc, #232]	@ (8014c94 <etharp_raw+0x104>)
 8014baa:	f240 4257 	movw	r2, #1111	@ 0x457
 8014bae:	493a      	ldr	r1, [pc, #232]	@ (8014c98 <etharp_raw+0x108>)
 8014bb0:	483a      	ldr	r0, [pc, #232]	@ (8014c9c <etharp_raw+0x10c>)
 8014bb2:	f002 fa51 	bl	8017058 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014bb6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014bba:	211c      	movs	r1, #28
 8014bbc:	200e      	movs	r0, #14
 8014bbe:	f7f6 fc7d 	bl	800b4bc <pbuf_alloc>
 8014bc2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014bc4:	69bb      	ldr	r3, [r7, #24]
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d102      	bne.n	8014bd0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014bca:	f04f 33ff 	mov.w	r3, #4294967295
 8014bce:	e05d      	b.n	8014c8c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014bd0:	69bb      	ldr	r3, [r7, #24]
 8014bd2:	895b      	ldrh	r3, [r3, #10]
 8014bd4:	2b1b      	cmp	r3, #27
 8014bd6:	d806      	bhi.n	8014be6 <etharp_raw+0x56>
 8014bd8:	4b2e      	ldr	r3, [pc, #184]	@ (8014c94 <etharp_raw+0x104>)
 8014bda:	f240 4262 	movw	r2, #1122	@ 0x462
 8014bde:	4930      	ldr	r1, [pc, #192]	@ (8014ca0 <etharp_raw+0x110>)
 8014be0:	482e      	ldr	r0, [pc, #184]	@ (8014c9c <etharp_raw+0x10c>)
 8014be2:	f002 fa39 	bl	8017058 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014be6:	69bb      	ldr	r3, [r7, #24]
 8014be8:	685b      	ldr	r3, [r3, #4]
 8014bea:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014bec:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8014bee:	4618      	mov	r0, r3
 8014bf0:	f7f5 f9f4 	bl	8009fdc <lwip_htons>
 8014bf4:	4603      	mov	r3, r0
 8014bf6:	461a      	mov	r2, r3
 8014bf8:	697b      	ldr	r3, [r7, #20]
 8014bfa:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8014c02:	2b06      	cmp	r3, #6
 8014c04:	d006      	beq.n	8014c14 <etharp_raw+0x84>
 8014c06:	4b23      	ldr	r3, [pc, #140]	@ (8014c94 <etharp_raw+0x104>)
 8014c08:	f240 4269 	movw	r2, #1129	@ 0x469
 8014c0c:	4925      	ldr	r1, [pc, #148]	@ (8014ca4 <etharp_raw+0x114>)
 8014c0e:	4823      	ldr	r0, [pc, #140]	@ (8014c9c <etharp_raw+0x10c>)
 8014c10:	f002 fa22 	bl	8017058 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014c14:	697b      	ldr	r3, [r7, #20]
 8014c16:	3308      	adds	r3, #8
 8014c18:	2206      	movs	r2, #6
 8014c1a:	6839      	ldr	r1, [r7, #0]
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	f002 fc78 	bl	8017512 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014c22:	697b      	ldr	r3, [r7, #20]
 8014c24:	3312      	adds	r3, #18
 8014c26:	2206      	movs	r2, #6
 8014c28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014c2a:	4618      	mov	r0, r3
 8014c2c:	f002 fc71 	bl	8017512 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014c30:	697b      	ldr	r3, [r7, #20]
 8014c32:	330e      	adds	r3, #14
 8014c34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014c36:	6812      	ldr	r2, [r2, #0]
 8014c38:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014c3a:	697b      	ldr	r3, [r7, #20]
 8014c3c:	3318      	adds	r3, #24
 8014c3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014c40:	6812      	ldr	r2, [r2, #0]
 8014c42:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014c44:	697b      	ldr	r3, [r7, #20]
 8014c46:	2200      	movs	r2, #0
 8014c48:	701a      	strb	r2, [r3, #0]
 8014c4a:	2200      	movs	r2, #0
 8014c4c:	f042 0201 	orr.w	r2, r2, #1
 8014c50:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014c52:	697b      	ldr	r3, [r7, #20]
 8014c54:	2200      	movs	r2, #0
 8014c56:	f042 0208 	orr.w	r2, r2, #8
 8014c5a:	709a      	strb	r2, [r3, #2]
 8014c5c:	2200      	movs	r2, #0
 8014c5e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014c60:	697b      	ldr	r3, [r7, #20]
 8014c62:	2206      	movs	r2, #6
 8014c64:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014c66:	697b      	ldr	r3, [r7, #20]
 8014c68:	2204      	movs	r2, #4
 8014c6a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014c6c:	f640 0306 	movw	r3, #2054	@ 0x806
 8014c70:	9300      	str	r3, [sp, #0]
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	68ba      	ldr	r2, [r7, #8]
 8014c76:	69b9      	ldr	r1, [r7, #24]
 8014c78:	68f8      	ldr	r0, [r7, #12]
 8014c7a:	f001 ff8f 	bl	8016b9c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014c7e:	69b8      	ldr	r0, [r7, #24]
 8014c80:	f7f6 ff00 	bl	800ba84 <pbuf_free>
  p = NULL;
 8014c84:	2300      	movs	r3, #0
 8014c86:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014c88:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014c8c:	4618      	mov	r0, r3
 8014c8e:	3720      	adds	r7, #32
 8014c90:	46bd      	mov	sp, r7
 8014c92:	bd80      	pop	{r7, pc}
 8014c94:	0801ad54 	.word	0x0801ad54
 8014c98:	0801aea4 	.word	0x0801aea4
 8014c9c:	0801adcc 	.word	0x0801adcc
 8014ca0:	0801af54 	.word	0x0801af54
 8014ca4:	0801af88 	.word	0x0801af88

08014ca8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014ca8:	b580      	push	{r7, lr}
 8014caa:	b088      	sub	sp, #32
 8014cac:	af04      	add	r7, sp, #16
 8014cae:	60f8      	str	r0, [r7, #12]
 8014cb0:	60b9      	str	r1, [r7, #8]
 8014cb2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	f103 0136 	add.w	r1, r3, #54	@ 0x36
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	f103 0036 	add.w	r0, r3, #54	@ 0x36
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014cc4:	2201      	movs	r2, #1
 8014cc6:	9203      	str	r2, [sp, #12]
 8014cc8:	68ba      	ldr	r2, [r7, #8]
 8014cca:	9202      	str	r2, [sp, #8]
 8014ccc:	4a06      	ldr	r2, [pc, #24]	@ (8014ce8 <etharp_request_dst+0x40>)
 8014cce:	9201      	str	r2, [sp, #4]
 8014cd0:	9300      	str	r3, [sp, #0]
 8014cd2:	4603      	mov	r3, r0
 8014cd4:	687a      	ldr	r2, [r7, #4]
 8014cd6:	68f8      	ldr	r0, [r7, #12]
 8014cd8:	f7ff ff5a 	bl	8014b90 <etharp_raw>
 8014cdc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014cde:	4618      	mov	r0, r3
 8014ce0:	3710      	adds	r7, #16
 8014ce2:	46bd      	mov	sp, r7
 8014ce4:	bd80      	pop	{r7, pc}
 8014ce6:	bf00      	nop
 8014ce8:	0801b8e4 	.word	0x0801b8e4

08014cec <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014cec:	b580      	push	{r7, lr}
 8014cee:	b082      	sub	sp, #8
 8014cf0:	af00      	add	r7, sp, #0
 8014cf2:	6078      	str	r0, [r7, #4]
 8014cf4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014cf6:	4a05      	ldr	r2, [pc, #20]	@ (8014d0c <etharp_request+0x20>)
 8014cf8:	6839      	ldr	r1, [r7, #0]
 8014cfa:	6878      	ldr	r0, [r7, #4]
 8014cfc:	f7ff ffd4 	bl	8014ca8 <etharp_request_dst>
 8014d00:	4603      	mov	r3, r0
}
 8014d02:	4618      	mov	r0, r3
 8014d04:	3708      	adds	r7, #8
 8014d06:	46bd      	mov	sp, r7
 8014d08:	bd80      	pop	{r7, pc}
 8014d0a:	bf00      	nop
 8014d0c:	0801b8dc 	.word	0x0801b8dc

08014d10 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014d10:	b580      	push	{r7, lr}
 8014d12:	b08e      	sub	sp, #56	@ 0x38
 8014d14:	af04      	add	r7, sp, #16
 8014d16:	6078      	str	r0, [r7, #4]
 8014d18:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014d1a:	4b79      	ldr	r3, [pc, #484]	@ (8014f00 <icmp_input+0x1f0>)
 8014d1c:	689b      	ldr	r3, [r3, #8]
 8014d1e:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d22:	781b      	ldrb	r3, [r3, #0]
 8014d24:	f003 030f 	and.w	r3, r3, #15
 8014d28:	b2db      	uxtb	r3, r3
 8014d2a:	009b      	lsls	r3, r3, #2
 8014d2c:	b2db      	uxtb	r3, r3
 8014d2e:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8014d30:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014d32:	2b13      	cmp	r3, #19
 8014d34:	f240 80cd 	bls.w	8014ed2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	895b      	ldrh	r3, [r3, #10]
 8014d3c:	2b03      	cmp	r3, #3
 8014d3e:	f240 80ca 	bls.w	8014ed6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	685b      	ldr	r3, [r3, #4]
 8014d46:	781b      	ldrb	r3, [r3, #0]
 8014d48:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014d4c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	f000 80b7 	beq.w	8014ec4 <icmp_input+0x1b4>
 8014d56:	2b08      	cmp	r3, #8
 8014d58:	f040 80b7 	bne.w	8014eca <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014d5c:	4b69      	ldr	r3, [pc, #420]	@ (8014f04 <icmp_input+0x1f4>)
 8014d5e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014d60:	4b67      	ldr	r3, [pc, #412]	@ (8014f00 <icmp_input+0x1f0>)
 8014d62:	695b      	ldr	r3, [r3, #20]
 8014d64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014d68:	2be0      	cmp	r3, #224	@ 0xe0
 8014d6a:	f000 80bb 	beq.w	8014ee4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014d6e:	4b64      	ldr	r3, [pc, #400]	@ (8014f00 <icmp_input+0x1f0>)
 8014d70:	695b      	ldr	r3, [r3, #20]
 8014d72:	4a63      	ldr	r2, [pc, #396]	@ (8014f00 <icmp_input+0x1f0>)
 8014d74:	6812      	ldr	r2, [r2, #0]
 8014d76:	4611      	mov	r1, r2
 8014d78:	4618      	mov	r0, r3
 8014d7a:	f000 ff71 	bl	8015c60 <ip4_addr_isbroadcast_u32>
 8014d7e:	4603      	mov	r3, r0
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	f040 80b1 	bne.w	8014ee8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	891b      	ldrh	r3, [r3, #8]
 8014d8a:	2b07      	cmp	r3, #7
 8014d8c:	f240 80a5 	bls.w	8014eda <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014d90:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014d92:	330e      	adds	r3, #14
 8014d94:	4619      	mov	r1, r3
 8014d96:	6878      	ldr	r0, [r7, #4]
 8014d98:	f7f6 fdde 	bl	800b958 <pbuf_add_header>
 8014d9c:	4603      	mov	r3, r0
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d04b      	beq.n	8014e3a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	891a      	ldrh	r2, [r3, #8]
 8014da6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014da8:	4413      	add	r3, r2
 8014daa:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	891b      	ldrh	r3, [r3, #8]
 8014db0:	8b7a      	ldrh	r2, [r7, #26]
 8014db2:	429a      	cmp	r2, r3
 8014db4:	f0c0 809a 	bcc.w	8014eec <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014db8:	8b7b      	ldrh	r3, [r7, #26]
 8014dba:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014dbe:	4619      	mov	r1, r3
 8014dc0:	200e      	movs	r0, #14
 8014dc2:	f7f6 fb7b 	bl	800b4bc <pbuf_alloc>
 8014dc6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014dc8:	697b      	ldr	r3, [r7, #20]
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	f000 8090 	beq.w	8014ef0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014dd0:	697b      	ldr	r3, [r7, #20]
 8014dd2:	895b      	ldrh	r3, [r3, #10]
 8014dd4:	461a      	mov	r2, r3
 8014dd6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014dd8:	3308      	adds	r3, #8
 8014dda:	429a      	cmp	r2, r3
 8014ddc:	d203      	bcs.n	8014de6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014dde:	6978      	ldr	r0, [r7, #20]
 8014de0:	f7f6 fe50 	bl	800ba84 <pbuf_free>
          goto icmperr;
 8014de4:	e085      	b.n	8014ef2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014de6:	697b      	ldr	r3, [r7, #20]
 8014de8:	685b      	ldr	r3, [r3, #4]
 8014dea:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8014dec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014dee:	4618      	mov	r0, r3
 8014df0:	f002 fb8f 	bl	8017512 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014df4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014df6:	4619      	mov	r1, r3
 8014df8:	6978      	ldr	r0, [r7, #20]
 8014dfa:	f7f6 fdbd 	bl	800b978 <pbuf_remove_header>
 8014dfe:	4603      	mov	r3, r0
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d009      	beq.n	8014e18 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014e04:	4b40      	ldr	r3, [pc, #256]	@ (8014f08 <icmp_input+0x1f8>)
 8014e06:	22b6      	movs	r2, #182	@ 0xb6
 8014e08:	4940      	ldr	r1, [pc, #256]	@ (8014f0c <icmp_input+0x1fc>)
 8014e0a:	4841      	ldr	r0, [pc, #260]	@ (8014f10 <icmp_input+0x200>)
 8014e0c:	f002 f924 	bl	8017058 <iprintf>
          pbuf_free(r);
 8014e10:	6978      	ldr	r0, [r7, #20]
 8014e12:	f7f6 fe37 	bl	800ba84 <pbuf_free>
          goto icmperr;
 8014e16:	e06c      	b.n	8014ef2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014e18:	6879      	ldr	r1, [r7, #4]
 8014e1a:	6978      	ldr	r0, [r7, #20]
 8014e1c:	f7f6 ff66 	bl	800bcec <pbuf_copy>
 8014e20:	4603      	mov	r3, r0
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d003      	beq.n	8014e2e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014e26:	6978      	ldr	r0, [r7, #20]
 8014e28:	f7f6 fe2c 	bl	800ba84 <pbuf_free>
          goto icmperr;
 8014e2c:	e061      	b.n	8014ef2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8014e2e:	6878      	ldr	r0, [r7, #4]
 8014e30:	f7f6 fe28 	bl	800ba84 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014e34:	697b      	ldr	r3, [r7, #20]
 8014e36:	607b      	str	r3, [r7, #4]
 8014e38:	e00f      	b.n	8014e5a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014e3a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014e3c:	330e      	adds	r3, #14
 8014e3e:	4619      	mov	r1, r3
 8014e40:	6878      	ldr	r0, [r7, #4]
 8014e42:	f7f6 fd99 	bl	800b978 <pbuf_remove_header>
 8014e46:	4603      	mov	r3, r0
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d006      	beq.n	8014e5a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014e4c:	4b2e      	ldr	r3, [pc, #184]	@ (8014f08 <icmp_input+0x1f8>)
 8014e4e:	22c7      	movs	r2, #199	@ 0xc7
 8014e50:	4930      	ldr	r1, [pc, #192]	@ (8014f14 <icmp_input+0x204>)
 8014e52:	482f      	ldr	r0, [pc, #188]	@ (8014f10 <icmp_input+0x200>)
 8014e54:	f002 f900 	bl	8017058 <iprintf>
          goto icmperr;
 8014e58:	e04b      	b.n	8014ef2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	685b      	ldr	r3, [r3, #4]
 8014e5e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014e60:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014e62:	4619      	mov	r1, r3
 8014e64:	6878      	ldr	r0, [r7, #4]
 8014e66:	f7f6 fd77 	bl	800b958 <pbuf_add_header>
 8014e6a:	4603      	mov	r3, r0
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d12b      	bne.n	8014ec8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	685b      	ldr	r3, [r3, #4]
 8014e74:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014e76:	69fb      	ldr	r3, [r7, #28]
 8014e78:	681a      	ldr	r2, [r3, #0]
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014e7e:	4b20      	ldr	r3, [pc, #128]	@ (8014f00 <icmp_input+0x1f0>)
 8014e80:	691a      	ldr	r2, [r3, #16]
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014e86:	693b      	ldr	r3, [r7, #16]
 8014e88:	2200      	movs	r2, #0
 8014e8a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8014e8c:	693b      	ldr	r3, [r7, #16]
 8014e8e:	2200      	movs	r2, #0
 8014e90:	709a      	strb	r2, [r3, #2]
 8014e92:	2200      	movs	r2, #0
 8014e94:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	22ff      	movs	r2, #255	@ 0xff
 8014e9a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	2200      	movs	r2, #0
 8014ea0:	729a      	strb	r2, [r3, #10]
 8014ea2:	2200      	movs	r2, #0
 8014ea4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014ea6:	683b      	ldr	r3, [r7, #0]
 8014ea8:	9302      	str	r3, [sp, #8]
 8014eaa:	2301      	movs	r3, #1
 8014eac:	9301      	str	r3, [sp, #4]
 8014eae:	2300      	movs	r3, #0
 8014eb0:	9300      	str	r3, [sp, #0]
 8014eb2:	23ff      	movs	r3, #255	@ 0xff
 8014eb4:	2200      	movs	r2, #0
 8014eb6:	69f9      	ldr	r1, [r7, #28]
 8014eb8:	6878      	ldr	r0, [r7, #4]
 8014eba:	f000 fd83 	bl	80159c4 <ip4_output_if>
 8014ebe:	4603      	mov	r3, r0
 8014ec0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014ec2:	e001      	b.n	8014ec8 <icmp_input+0x1b8>
      break;
 8014ec4:	bf00      	nop
 8014ec6:	e000      	b.n	8014eca <icmp_input+0x1ba>
      break;
 8014ec8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014eca:	6878      	ldr	r0, [r7, #4]
 8014ecc:	f7f6 fdda 	bl	800ba84 <pbuf_free>
  return;
 8014ed0:	e013      	b.n	8014efa <icmp_input+0x1ea>
    goto lenerr;
 8014ed2:	bf00      	nop
 8014ed4:	e002      	b.n	8014edc <icmp_input+0x1cc>
    goto lenerr;
 8014ed6:	bf00      	nop
 8014ed8:	e000      	b.n	8014edc <icmp_input+0x1cc>
        goto lenerr;
 8014eda:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014edc:	6878      	ldr	r0, [r7, #4]
 8014ede:	f7f6 fdd1 	bl	800ba84 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014ee2:	e00a      	b.n	8014efa <icmp_input+0x1ea>
        goto icmperr;
 8014ee4:	bf00      	nop
 8014ee6:	e004      	b.n	8014ef2 <icmp_input+0x1e2>
        goto icmperr;
 8014ee8:	bf00      	nop
 8014eea:	e002      	b.n	8014ef2 <icmp_input+0x1e2>
          goto icmperr;
 8014eec:	bf00      	nop
 8014eee:	e000      	b.n	8014ef2 <icmp_input+0x1e2>
          goto icmperr;
 8014ef0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014ef2:	6878      	ldr	r0, [r7, #4]
 8014ef4:	f7f6 fdc6 	bl	800ba84 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014ef8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014efa:	3728      	adds	r7, #40	@ 0x28
 8014efc:	46bd      	mov	sp, r7
 8014efe:	bd80      	pop	{r7, pc}
 8014f00:	20009290 	.word	0x20009290
 8014f04:	200092a4 	.word	0x200092a4
 8014f08:	0801afcc 	.word	0x0801afcc
 8014f0c:	0801b004 	.word	0x0801b004
 8014f10:	0801b03c 	.word	0x0801b03c
 8014f14:	0801b064 	.word	0x0801b064

08014f18 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014f18:	b580      	push	{r7, lr}
 8014f1a:	b082      	sub	sp, #8
 8014f1c:	af00      	add	r7, sp, #0
 8014f1e:	6078      	str	r0, [r7, #4]
 8014f20:	460b      	mov	r3, r1
 8014f22:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014f24:	78fb      	ldrb	r3, [r7, #3]
 8014f26:	461a      	mov	r2, r3
 8014f28:	2103      	movs	r1, #3
 8014f2a:	6878      	ldr	r0, [r7, #4]
 8014f2c:	f000 f814 	bl	8014f58 <icmp_send_response>
}
 8014f30:	bf00      	nop
 8014f32:	3708      	adds	r7, #8
 8014f34:	46bd      	mov	sp, r7
 8014f36:	bd80      	pop	{r7, pc}

08014f38 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014f38:	b580      	push	{r7, lr}
 8014f3a:	b082      	sub	sp, #8
 8014f3c:	af00      	add	r7, sp, #0
 8014f3e:	6078      	str	r0, [r7, #4]
 8014f40:	460b      	mov	r3, r1
 8014f42:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014f44:	78fb      	ldrb	r3, [r7, #3]
 8014f46:	461a      	mov	r2, r3
 8014f48:	210b      	movs	r1, #11
 8014f4a:	6878      	ldr	r0, [r7, #4]
 8014f4c:	f000 f804 	bl	8014f58 <icmp_send_response>
}
 8014f50:	bf00      	nop
 8014f52:	3708      	adds	r7, #8
 8014f54:	46bd      	mov	sp, r7
 8014f56:	bd80      	pop	{r7, pc}

08014f58 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014f58:	b580      	push	{r7, lr}
 8014f5a:	b08c      	sub	sp, #48	@ 0x30
 8014f5c:	af04      	add	r7, sp, #16
 8014f5e:	6078      	str	r0, [r7, #4]
 8014f60:	460b      	mov	r3, r1
 8014f62:	70fb      	strb	r3, [r7, #3]
 8014f64:	4613      	mov	r3, r2
 8014f66:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014f68:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014f6c:	2124      	movs	r1, #36	@ 0x24
 8014f6e:	2022      	movs	r0, #34	@ 0x22
 8014f70:	f7f6 faa4 	bl	800b4bc <pbuf_alloc>
 8014f74:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014f76:	69fb      	ldr	r3, [r7, #28]
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d04c      	beq.n	8015016 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014f7c:	69fb      	ldr	r3, [r7, #28]
 8014f7e:	895b      	ldrh	r3, [r3, #10]
 8014f80:	2b23      	cmp	r3, #35	@ 0x23
 8014f82:	d806      	bhi.n	8014f92 <icmp_send_response+0x3a>
 8014f84:	4b26      	ldr	r3, [pc, #152]	@ (8015020 <icmp_send_response+0xc8>)
 8014f86:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8014f8a:	4926      	ldr	r1, [pc, #152]	@ (8015024 <icmp_send_response+0xcc>)
 8014f8c:	4826      	ldr	r0, [pc, #152]	@ (8015028 <icmp_send_response+0xd0>)
 8014f8e:	f002 f863 	bl	8017058 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	685b      	ldr	r3, [r3, #4]
 8014f96:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014f98:	69fb      	ldr	r3, [r7, #28]
 8014f9a:	685b      	ldr	r3, [r3, #4]
 8014f9c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014f9e:	697b      	ldr	r3, [r7, #20]
 8014fa0:	78fa      	ldrb	r2, [r7, #3]
 8014fa2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014fa4:	697b      	ldr	r3, [r7, #20]
 8014fa6:	78ba      	ldrb	r2, [r7, #2]
 8014fa8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8014faa:	697b      	ldr	r3, [r7, #20]
 8014fac:	2200      	movs	r2, #0
 8014fae:	711a      	strb	r2, [r3, #4]
 8014fb0:	2200      	movs	r2, #0
 8014fb2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014fb4:	697b      	ldr	r3, [r7, #20]
 8014fb6:	2200      	movs	r2, #0
 8014fb8:	719a      	strb	r2, [r3, #6]
 8014fba:	2200      	movs	r2, #0
 8014fbc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8014fbe:	69fb      	ldr	r3, [r7, #28]
 8014fc0:	685b      	ldr	r3, [r3, #4]
 8014fc2:	f103 0008 	add.w	r0, r3, #8
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	685b      	ldr	r3, [r3, #4]
 8014fca:	221c      	movs	r2, #28
 8014fcc:	4619      	mov	r1, r3
 8014fce:	f002 faa0 	bl	8017512 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014fd2:	69bb      	ldr	r3, [r7, #24]
 8014fd4:	68db      	ldr	r3, [r3, #12]
 8014fd6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014fd8:	f107 030c 	add.w	r3, r7, #12
 8014fdc:	4618      	mov	r0, r3
 8014fde:	f000 facf 	bl	8015580 <ip4_route>
 8014fe2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014fe4:	693b      	ldr	r3, [r7, #16]
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d011      	beq.n	801500e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014fea:	697b      	ldr	r3, [r7, #20]
 8014fec:	2200      	movs	r2, #0
 8014fee:	709a      	strb	r2, [r3, #2]
 8014ff0:	2200      	movs	r2, #0
 8014ff2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014ff4:	f107 020c 	add.w	r2, r7, #12
 8014ff8:	693b      	ldr	r3, [r7, #16]
 8014ffa:	9302      	str	r3, [sp, #8]
 8014ffc:	2301      	movs	r3, #1
 8014ffe:	9301      	str	r3, [sp, #4]
 8015000:	2300      	movs	r3, #0
 8015002:	9300      	str	r3, [sp, #0]
 8015004:	23ff      	movs	r3, #255	@ 0xff
 8015006:	2100      	movs	r1, #0
 8015008:	69f8      	ldr	r0, [r7, #28]
 801500a:	f000 fcdb 	bl	80159c4 <ip4_output_if>
  }
  pbuf_free(q);
 801500e:	69f8      	ldr	r0, [r7, #28]
 8015010:	f7f6 fd38 	bl	800ba84 <pbuf_free>
 8015014:	e000      	b.n	8015018 <icmp_send_response+0xc0>
    return;
 8015016:	bf00      	nop
}
 8015018:	3720      	adds	r7, #32
 801501a:	46bd      	mov	sp, r7
 801501c:	bd80      	pop	{r7, pc}
 801501e:	bf00      	nop
 8015020:	0801afcc 	.word	0x0801afcc
 8015024:	0801b098 	.word	0x0801b098
 8015028:	0801b03c 	.word	0x0801b03c

0801502c <igmp_init>:
/**
 * Initialize the IGMP module
 */
void
igmp_init(void)
{
 801502c:	b480      	push	{r7}
 801502e:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_init: initializing\n"));

  IP4_ADDR(&allsystems, 224, 0, 0, 1);
 8015030:	4b05      	ldr	r3, [pc, #20]	@ (8015048 <igmp_init+0x1c>)
 8015032:	4a06      	ldr	r2, [pc, #24]	@ (801504c <igmp_init+0x20>)
 8015034:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&allrouters, 224, 0, 0, 2);
 8015036:	4b06      	ldr	r3, [pc, #24]	@ (8015050 <igmp_init+0x24>)
 8015038:	4a06      	ldr	r2, [pc, #24]	@ (8015054 <igmp_init+0x28>)
 801503a:	601a      	str	r2, [r3, #0]
}
 801503c:	bf00      	nop
 801503e:	46bd      	mov	sp, r7
 8015040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015044:	4770      	bx	lr
 8015046:	bf00      	nop
 8015048:	2000cc48 	.word	0x2000cc48
 801504c:	010000e0 	.word	0x010000e0
 8015050:	2000cc4c 	.word	0x2000cc4c
 8015054:	020000e0 	.word	0x020000e0

08015058 <igmp_start>:
 *
 * @param netif network interface on which start IGMP processing
 */
err_t
igmp_start(struct netif *netif)
{
 8015058:	b580      	push	{r7, lr}
 801505a:	b084      	sub	sp, #16
 801505c:	af00      	add	r7, sp, #0
 801505e:	6078      	str	r0, [r7, #4]
  struct igmp_group *group;

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: starting IGMP processing on if %p\n", (void *)netif));

  group = igmp_lookup_group(netif, &allsystems);
 8015060:	4911      	ldr	r1, [pc, #68]	@ (80150a8 <igmp_start+0x50>)
 8015062:	6878      	ldr	r0, [r7, #4]
 8015064:	f000 f85e 	bl	8015124 <igmp_lookup_group>
 8015068:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 801506a:	68fb      	ldr	r3, [r7, #12]
 801506c:	2b00      	cmp	r3, #0
 801506e:	d014      	beq.n	801509a <igmp_start+0x42>
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	2202      	movs	r2, #2
 8015074:	725a      	strb	r2, [r3, #9]
    group->use++;
 8015076:	68fb      	ldr	r3, [r7, #12]
 8015078:	7b1b      	ldrb	r3, [r3, #12]
 801507a:	3301      	adds	r3, #1
 801507c:	b2da      	uxtb	r2, r3
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	731a      	strb	r2, [r3, #12]

    /* Allow the igmp messages at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015086:	2b00      	cmp	r3, #0
 8015088:	d005      	beq.n	8015096 <igmp_start+0x3e>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: igmp_mac_filter(ADD "));
      ip4_addr_debug_print_val(IGMP_DEBUG, allsystems);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void *)netif));
      netif->igmp_mac_filter(netif, &allsystems, NETIF_ADD_MAC_FILTER);
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801508e:	2201      	movs	r2, #1
 8015090:	4905      	ldr	r1, [pc, #20]	@ (80150a8 <igmp_start+0x50>)
 8015092:	6878      	ldr	r0, [r7, #4]
 8015094:	4798      	blx	r3
    }

    return ERR_OK;
 8015096:	2300      	movs	r3, #0
 8015098:	e001      	b.n	801509e <igmp_start+0x46>
  }

  return ERR_MEM;
 801509a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801509e:	4618      	mov	r0, r3
 80150a0:	3710      	adds	r7, #16
 80150a2:	46bd      	mov	sp, r7
 80150a4:	bd80      	pop	{r7, pc}
 80150a6:	bf00      	nop
 80150a8:	2000cc48 	.word	0x2000cc48

080150ac <igmp_report_groups>:
 *
 * @param netif network interface on which report IGMP memberships
 */
void
igmp_report_groups(struct netif *netif)
{
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b084      	sub	sp, #16
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	6078      	str	r0, [r7, #4]
  struct igmp_group *group = netif_igmp_data(netif);
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80150b8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_report_groups: sending IGMP reports on if %p\n", (void *)netif));

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  if (group != NULL) {
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d00a      	beq.n	80150d6 <igmp_report_groups+0x2a>
    group = group->next;
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	60fb      	str	r3, [r7, #12]
  }

  while (group != NULL) {
 80150c6:	e006      	b.n	80150d6 <igmp_report_groups+0x2a>
    igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
 80150c8:	2105      	movs	r1, #5
 80150ca:	68f8      	ldr	r0, [r7, #12]
 80150cc:	f000 f99d 	bl	801540a <igmp_delaying_member>
    group = group->next;
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	60fb      	str	r3, [r7, #12]
  while (group != NULL) {
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d1f5      	bne.n	80150c8 <igmp_report_groups+0x1c>
  }
}
 80150dc:	bf00      	nop
 80150de:	bf00      	nop
 80150e0:	3710      	adds	r7, #16
 80150e2:	46bd      	mov	sp, r7
 80150e4:	bd80      	pop	{r7, pc}

080150e6 <igmp_lookfor_group>:
 * @return a struct igmp_group* if the group has been found,
 *         NULL if the group wasn't found.
 */
struct igmp_group *
igmp_lookfor_group(struct netif *ifp, const ip4_addr_t *addr)
{
 80150e6:	b480      	push	{r7}
 80150e8:	b085      	sub	sp, #20
 80150ea:	af00      	add	r7, sp, #0
 80150ec:	6078      	str	r0, [r7, #4]
 80150ee:	6039      	str	r1, [r7, #0]
  struct igmp_group *group = netif_igmp_data(ifp);
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80150f4:	60fb      	str	r3, [r7, #12]

  while (group != NULL) {
 80150f6:	e00a      	b.n	801510e <igmp_lookfor_group+0x28>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	685a      	ldr	r2, [r3, #4]
 80150fc:	683b      	ldr	r3, [r7, #0]
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	429a      	cmp	r2, r3
 8015102:	d101      	bne.n	8015108 <igmp_lookfor_group+0x22>
      return group;
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	e006      	b.n	8015116 <igmp_lookfor_group+0x30>
    }
    group = group->next;
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	60fb      	str	r3, [r7, #12]
  while (group != NULL) {
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	2b00      	cmp	r3, #0
 8015112:	d1f1      	bne.n	80150f8 <igmp_lookfor_group+0x12>
  }

  /* to be clearer, we return NULL here instead of
   * 'group' (which is also NULL at this point).
   */
  return NULL;
 8015114:	2300      	movs	r3, #0
}
 8015116:	4618      	mov	r0, r3
 8015118:	3714      	adds	r7, #20
 801511a:	46bd      	mov	sp, r7
 801511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015120:	4770      	bx	lr
	...

08015124 <igmp_lookup_group>:
 * @return a struct igmp_group*,
 *         NULL on memory error.
 */
static struct igmp_group *
igmp_lookup_group(struct netif *ifp, const ip4_addr_t *addr)
{
 8015124:	b580      	push	{r7, lr}
 8015126:	b084      	sub	sp, #16
 8015128:	af00      	add	r7, sp, #0
 801512a:	6078      	str	r0, [r7, #4]
 801512c:	6039      	str	r1, [r7, #0]
  struct igmp_group *group;
  struct igmp_group *list_head = netif_igmp_data(ifp);
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015132:	60fb      	str	r3, [r7, #12]

  /* Search if the group already exists */
  group = igmp_lookfor_group(ifp, addr);
 8015134:	6839      	ldr	r1, [r7, #0]
 8015136:	6878      	ldr	r0, [r7, #4]
 8015138:	f7ff ffd5 	bl	80150e6 <igmp_lookfor_group>
 801513c:	60b8      	str	r0, [r7, #8]
  if (group != NULL) {
 801513e:	68bb      	ldr	r3, [r7, #8]
 8015140:	2b00      	cmp	r3, #0
 8015142:	d001      	beq.n	8015148 <igmp_lookup_group+0x24>
    /* Group already exists. */
    return group;
 8015144:	68bb      	ldr	r3, [r7, #8]
 8015146:	e047      	b.n	80151d8 <igmp_lookup_group+0xb4>
  }

  /* Group doesn't exist yet, create a new one */
  group = (struct igmp_group *)memp_malloc(MEMP_IGMP_GROUP);
 8015148:	200a      	movs	r0, #10
 801514a:	f7f5 fc8f 	bl	800aa6c <memp_malloc>
 801514e:	60b8      	str	r0, [r7, #8]
  if (group != NULL) {
 8015150:	68bb      	ldr	r3, [r7, #8]
 8015152:	2b00      	cmp	r3, #0
 8015154:	d03f      	beq.n	80151d6 <igmp_lookup_group+0xb2>
    ip4_addr_set(&(group->group_address), addr);
 8015156:	683b      	ldr	r3, [r7, #0]
 8015158:	2b00      	cmp	r3, #0
 801515a:	d002      	beq.n	8015162 <igmp_lookup_group+0x3e>
 801515c:	683b      	ldr	r3, [r7, #0]
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	e000      	b.n	8015164 <igmp_lookup_group+0x40>
 8015162:	2300      	movs	r3, #0
 8015164:	68ba      	ldr	r2, [r7, #8]
 8015166:	6053      	str	r3, [r2, #4]
    group->timer              = 0; /* Not running */
 8015168:	68bb      	ldr	r3, [r7, #8]
 801516a:	2200      	movs	r2, #0
 801516c:	815a      	strh	r2, [r3, #10]
    group->group_state        = IGMP_GROUP_NON_MEMBER;
 801516e:	68bb      	ldr	r3, [r7, #8]
 8015170:	2200      	movs	r2, #0
 8015172:	725a      	strb	r2, [r3, #9]
    group->last_reporter_flag = 0;
 8015174:	68bb      	ldr	r3, [r7, #8]
 8015176:	2200      	movs	r2, #0
 8015178:	721a      	strb	r2, [r3, #8]
    group->use                = 0;
 801517a:	68bb      	ldr	r3, [r7, #8]
 801517c:	2200      	movs	r2, #0
 801517e:	731a      	strb	r2, [r3, #12]

    /* Ensure allsystems group is always first in list */
    if (list_head == NULL) {
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	2b00      	cmp	r3, #0
 8015184:	d113      	bne.n	80151ae <igmp_lookup_group+0x8a>
      /* this is the first entry in linked list */
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
 8015186:	683b      	ldr	r3, [r7, #0]
 8015188:	681a      	ldr	r2, [r3, #0]
 801518a:	4b15      	ldr	r3, [pc, #84]	@ (80151e0 <igmp_lookup_group+0xbc>)
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	429a      	cmp	r2, r3
 8015190:	d006      	beq.n	80151a0 <igmp_lookup_group+0x7c>
 8015192:	4b14      	ldr	r3, [pc, #80]	@ (80151e4 <igmp_lookup_group+0xc0>)
 8015194:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8015198:	4913      	ldr	r1, [pc, #76]	@ (80151e8 <igmp_lookup_group+0xc4>)
 801519a:	4814      	ldr	r0, [pc, #80]	@ (80151ec <igmp_lookup_group+0xc8>)
 801519c:	f001 ff5c 	bl	8017058 <iprintf>
                  (ip4_addr_cmp(addr, &allsystems) != 0));
      group->next = NULL;
 80151a0:	68bb      	ldr	r3, [r7, #8]
 80151a2:	2200      	movs	r2, #0
 80151a4:	601a      	str	r2, [r3, #0]
      netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, group);
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	68ba      	ldr	r2, [r7, #8]
 80151aa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80151ac:	e013      	b.n	80151d6 <igmp_lookup_group+0xb2>
    } else {
      /* append _after_ first entry */
      LWIP_ASSERT("igmp_lookup_group: all except first group must not be allsystems",
 80151ae:	683b      	ldr	r3, [r7, #0]
 80151b0:	681a      	ldr	r2, [r3, #0]
 80151b2:	4b0b      	ldr	r3, [pc, #44]	@ (80151e0 <igmp_lookup_group+0xbc>)
 80151b4:	681b      	ldr	r3, [r3, #0]
 80151b6:	429a      	cmp	r2, r3
 80151b8:	d106      	bne.n	80151c8 <igmp_lookup_group+0xa4>
 80151ba:	4b0a      	ldr	r3, [pc, #40]	@ (80151e4 <igmp_lookup_group+0xc0>)
 80151bc:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80151c0:	490b      	ldr	r1, [pc, #44]	@ (80151f0 <igmp_lookup_group+0xcc>)
 80151c2:	480a      	ldr	r0, [pc, #40]	@ (80151ec <igmp_lookup_group+0xc8>)
 80151c4:	f001 ff48 	bl	8017058 <iprintf>
                  (ip4_addr_cmp(addr, &allsystems) == 0));
      group->next = list_head->next;
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	681a      	ldr	r2, [r3, #0]
 80151cc:	68bb      	ldr	r3, [r7, #8]
 80151ce:	601a      	str	r2, [r3, #0]
      list_head->next = group;
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	68ba      	ldr	r2, [r7, #8]
 80151d4:	601a      	str	r2, [r3, #0]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_lookup_group: %sallocated a new group with address ", (group ? "" : "impossible to ")));
  ip4_addr_debug_print(IGMP_DEBUG, addr);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)ifp));

  return group;
 80151d6:	68bb      	ldr	r3, [r7, #8]
}
 80151d8:	4618      	mov	r0, r3
 80151da:	3710      	adds	r7, #16
 80151dc:	46bd      	mov	sp, r7
 80151de:	bd80      	pop	{r7, pc}
 80151e0:	2000cc48 	.word	0x2000cc48
 80151e4:	0801b0c4 	.word	0x0801b0c4
 80151e8:	0801b0fc 	.word	0x0801b0fc
 80151ec:	0801b130 	.word	0x0801b130
 80151f0:	0801b158 	.word	0x0801b158

080151f4 <igmp_input>:
 * @param inp network interface on which the packet was received
 * @param dest destination ip address of the igmp packet
 */
void
igmp_input(struct pbuf *p, struct netif *inp, const ip4_addr_t *dest)
{
 80151f4:	b580      	push	{r7, lr}
 80151f6:	b088      	sub	sp, #32
 80151f8:	af00      	add	r7, sp, #0
 80151fa:	60f8      	str	r0, [r7, #12]
 80151fc:	60b9      	str	r1, [r7, #8]
 80151fe:	607a      	str	r2, [r7, #4]
  struct igmp_group *groupref;

  IGMP_STATS_INC(igmp.recv);

  /* Note that the length CAN be greater than 8 but only 8 are used - All are included in the checksum */
  if (p->len < IGMP_MINLEN) {
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	895b      	ldrh	r3, [r3, #10]
 8015204:	2b07      	cmp	r3, #7
 8015206:	d803      	bhi.n	8015210 <igmp_input+0x1c>
    pbuf_free(p);
 8015208:	68f8      	ldr	r0, [r7, #12]
 801520a:	f7f6 fc3b 	bl	800ba84 <pbuf_free>
    IGMP_STATS_INC(igmp.lenerr);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: length error\n"));
    return;
 801520e:	e086      	b.n	801531e <igmp_input+0x12a>
  LWIP_DEBUGF(IGMP_DEBUG, (" to address "));
  ip4_addr_debug_print_val(IGMP_DEBUG, ip4_current_header()->dest);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)inp));

  /* Now calculate and check the checksum */
  igmp = (struct igmp_msg *)p->payload;
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	685b      	ldr	r3, [r3, #4]
 8015214:	617b      	str	r3, [r7, #20]
  if (inet_chksum(igmp, p->len)) {
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	895b      	ldrh	r3, [r3, #10]
 801521a:	4619      	mov	r1, r3
 801521c:	6978      	ldr	r0, [r7, #20]
 801521e:	f7f4 ff68 	bl	800a0f2 <inet_chksum>
 8015222:	4603      	mov	r3, r0
 8015224:	2b00      	cmp	r3, #0
 8015226:	d003      	beq.n	8015230 <igmp_input+0x3c>
    pbuf_free(p);
 8015228:	68f8      	ldr	r0, [r7, #12]
 801522a:	f7f6 fc2b 	bl	800ba84 <pbuf_free>
    IGMP_STATS_INC(igmp.chkerr);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: checksum error\n"));
    return;
 801522e:	e076      	b.n	801531e <igmp_input+0x12a>
  }

  /* Packet is ok so find an existing group */
  group = igmp_lookfor_group(inp, dest); /* use the destination IP address of incoming packet */
 8015230:	6879      	ldr	r1, [r7, #4]
 8015232:	68b8      	ldr	r0, [r7, #8]
 8015234:	f7ff ff57 	bl	80150e6 <igmp_lookfor_group>
 8015238:	61f8      	str	r0, [r7, #28]

  /* If group can be found or create... */
  if (!group) {
 801523a:	69fb      	ldr	r3, [r7, #28]
 801523c:	2b00      	cmp	r3, #0
 801523e:	d103      	bne.n	8015248 <igmp_input+0x54>
    pbuf_free(p);
 8015240:	68f8      	ldr	r0, [r7, #12]
 8015242:	f7f6 fc1f 	bl	800ba84 <pbuf_free>
    IGMP_STATS_INC(igmp.drop);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP frame not for us\n"));
    return;
 8015246:	e06a      	b.n	801531e <igmp_input+0x12a>
  }

  /* NOW ACT ON THE INCOMING MESSAGE TYPE... */
  switch (igmp->igmp_msgtype) {
 8015248:	697b      	ldr	r3, [r7, #20]
 801524a:	781b      	ldrb	r3, [r3, #0]
 801524c:	2b11      	cmp	r3, #17
 801524e:	d002      	beq.n	8015256 <igmp_input+0x62>
 8015250:	2b16      	cmp	r3, #22
 8015252:	d04f      	beq.n	80152f4 <igmp_input+0x100>
      break;
    default:
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: unexpected msg %d in state %d on group %p on if %p\n",
                               igmp->igmp_msgtype, group->group_state, (void *)&group, (void *)inp));
      IGMP_STATS_INC(igmp.proterr);
      break;
 8015254:	e05f      	b.n	8015316 <igmp_input+0x122>
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	681a      	ldr	r2, [r3, #0]
 801525a:	4b32      	ldr	r3, [pc, #200]	@ (8015324 <igmp_input+0x130>)
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	429a      	cmp	r2, r3
 8015260:	d125      	bne.n	80152ae <igmp_input+0xba>
 8015262:	697b      	ldr	r3, [r7, #20]
 8015264:	3304      	adds	r3, #4
 8015266:	2b00      	cmp	r3, #0
 8015268:	d003      	beq.n	8015272 <igmp_input+0x7e>
 801526a:	697b      	ldr	r3, [r7, #20]
 801526c:	685b      	ldr	r3, [r3, #4]
 801526e:	2b00      	cmp	r3, #0
 8015270:	d11d      	bne.n	80152ae <igmp_input+0xba>
        if (igmp->igmp_maxresp == 0) {
 8015272:	697b      	ldr	r3, [r7, #20]
 8015274:	785b      	ldrb	r3, [r3, #1]
 8015276:	2b00      	cmp	r3, #0
 8015278:	d102      	bne.n	8015280 <igmp_input+0x8c>
          igmp->igmp_maxresp = IGMP_V1_DELAYING_MEMBER_TMR;
 801527a:	697b      	ldr	r3, [r7, #20]
 801527c:	220a      	movs	r2, #10
 801527e:	705a      	strb	r2, [r3, #1]
        groupref = netif_igmp_data(inp);
 8015280:	68bb      	ldr	r3, [r7, #8]
 8015282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015284:	61bb      	str	r3, [r7, #24]
        if (groupref != NULL) {
 8015286:	69bb      	ldr	r3, [r7, #24]
 8015288:	2b00      	cmp	r3, #0
 801528a:	d00c      	beq.n	80152a6 <igmp_input+0xb2>
          groupref = groupref->next;
 801528c:	69bb      	ldr	r3, [r7, #24]
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	61bb      	str	r3, [r7, #24]
        while (groupref) {
 8015292:	e008      	b.n	80152a6 <igmp_input+0xb2>
          igmp_delaying_member(groupref, igmp->igmp_maxresp);
 8015294:	697b      	ldr	r3, [r7, #20]
 8015296:	785b      	ldrb	r3, [r3, #1]
 8015298:	4619      	mov	r1, r3
 801529a:	69b8      	ldr	r0, [r7, #24]
 801529c:	f000 f8b5 	bl	801540a <igmp_delaying_member>
          groupref = groupref->next;
 80152a0:	69bb      	ldr	r3, [r7, #24]
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	61bb      	str	r3, [r7, #24]
        while (groupref) {
 80152a6:	69bb      	ldr	r3, [r7, #24]
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d1f3      	bne.n	8015294 <igmp_input+0xa0>
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 80152ac:	e021      	b.n	80152f2 <igmp_input+0xfe>
        if (!ip4_addr_isany(&igmp->igmp_group_address)) {
 80152ae:	697b      	ldr	r3, [r7, #20]
 80152b0:	3304      	adds	r3, #4
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d02c      	beq.n	8015310 <igmp_input+0x11c>
 80152b6:	697b      	ldr	r3, [r7, #20]
 80152b8:	685b      	ldr	r3, [r3, #4]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d028      	beq.n	8015310 <igmp_input+0x11c>
          if (ip4_addr_cmp(dest, &allsystems)) {
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	681a      	ldr	r2, [r3, #0]
 80152c2:	4b18      	ldr	r3, [pc, #96]	@ (8015324 <igmp_input+0x130>)
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	429a      	cmp	r2, r3
 80152c8:	d109      	bne.n	80152de <igmp_input+0xea>
            ip4_addr_copy(groupaddr, igmp->igmp_group_address);
 80152ca:	697b      	ldr	r3, [r7, #20]
 80152cc:	685b      	ldr	r3, [r3, #4]
 80152ce:	613b      	str	r3, [r7, #16]
            group = igmp_lookfor_group(inp, &groupaddr);
 80152d0:	f107 0310 	add.w	r3, r7, #16
 80152d4:	4619      	mov	r1, r3
 80152d6:	68b8      	ldr	r0, [r7, #8]
 80152d8:	f7ff ff05 	bl	80150e6 <igmp_lookfor_group>
 80152dc:	61f8      	str	r0, [r7, #28]
          if (group != NULL) {
 80152de:	69fb      	ldr	r3, [r7, #28]
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d015      	beq.n	8015310 <igmp_input+0x11c>
            igmp_delaying_member(group, igmp->igmp_maxresp);
 80152e4:	697b      	ldr	r3, [r7, #20]
 80152e6:	785b      	ldrb	r3, [r3, #1]
 80152e8:	4619      	mov	r1, r3
 80152ea:	69f8      	ldr	r0, [r7, #28]
 80152ec:	f000 f88d 	bl	801540a <igmp_delaying_member>
      break;
 80152f0:	e00e      	b.n	8015310 <igmp_input+0x11c>
 80152f2:	e00d      	b.n	8015310 <igmp_input+0x11c>
      if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
 80152f4:	69fb      	ldr	r3, [r7, #28]
 80152f6:	7a5b      	ldrb	r3, [r3, #9]
 80152f8:	2b01      	cmp	r3, #1
 80152fa:	d10b      	bne.n	8015314 <igmp_input+0x120>
        group->timer = 0; /* stopped */
 80152fc:	69fb      	ldr	r3, [r7, #28]
 80152fe:	2200      	movs	r2, #0
 8015300:	815a      	strh	r2, [r3, #10]
        group->group_state = IGMP_GROUP_IDLE_MEMBER;
 8015302:	69fb      	ldr	r3, [r7, #28]
 8015304:	2202      	movs	r2, #2
 8015306:	725a      	strb	r2, [r3, #9]
        group->last_reporter_flag = 0;
 8015308:	69fb      	ldr	r3, [r7, #28]
 801530a:	2200      	movs	r2, #0
 801530c:	721a      	strb	r2, [r3, #8]
      break;
 801530e:	e001      	b.n	8015314 <igmp_input+0x120>
      break;
 8015310:	bf00      	nop
 8015312:	e000      	b.n	8015316 <igmp_input+0x122>
      break;
 8015314:	bf00      	nop
  }

  pbuf_free(p);
 8015316:	68f8      	ldr	r0, [r7, #12]
 8015318:	f7f6 fbb4 	bl	800ba84 <pbuf_free>
  return;
 801531c:	bf00      	nop
}
 801531e:	3720      	adds	r7, #32
 8015320:	46bd      	mov	sp, r7
 8015322:	bd80      	pop	{r7, pc}
 8015324:	2000cc48 	.word	0x2000cc48

08015328 <igmp_tmr>:
 * The igmp timer function (both for NO_SYS=1 and =0)
 * Should be called every IGMP_TMR_INTERVAL milliseconds (100 ms is default).
 */
void
igmp_tmr(void)
{
 8015328:	b580      	push	{r7, lr}
 801532a:	b082      	sub	sp, #8
 801532c:	af00      	add	r7, sp, #0
  struct netif *netif;

  NETIF_FOREACH(netif) {
 801532e:	4b15      	ldr	r3, [pc, #84]	@ (8015384 <igmp_tmr+0x5c>)
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	607b      	str	r3, [r7, #4]
 8015334:	e01e      	b.n	8015374 <igmp_tmr+0x4c>
    struct igmp_group *group = netif_igmp_data(netif);
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801533a:	603b      	str	r3, [r7, #0]

    while (group != NULL) {
 801533c:	e014      	b.n	8015368 <igmp_tmr+0x40>
      if (group->timer > 0) {
 801533e:	683b      	ldr	r3, [r7, #0]
 8015340:	895b      	ldrh	r3, [r3, #10]
 8015342:	2b00      	cmp	r3, #0
 8015344:	d00d      	beq.n	8015362 <igmp_tmr+0x3a>
        group->timer--;
 8015346:	683b      	ldr	r3, [r7, #0]
 8015348:	895b      	ldrh	r3, [r3, #10]
 801534a:	3b01      	subs	r3, #1
 801534c:	b29a      	uxth	r2, r3
 801534e:	683b      	ldr	r3, [r7, #0]
 8015350:	815a      	strh	r2, [r3, #10]
        if (group->timer == 0) {
 8015352:	683b      	ldr	r3, [r7, #0]
 8015354:	895b      	ldrh	r3, [r3, #10]
 8015356:	2b00      	cmp	r3, #0
 8015358:	d103      	bne.n	8015362 <igmp_tmr+0x3a>
          igmp_timeout(netif, group);
 801535a:	6839      	ldr	r1, [r7, #0]
 801535c:	6878      	ldr	r0, [r7, #4]
 801535e:	f000 f813 	bl	8015388 <igmp_timeout>
        }
      }
      group = group->next;
 8015362:	683b      	ldr	r3, [r7, #0]
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	603b      	str	r3, [r7, #0]
    while (group != NULL) {
 8015368:	683b      	ldr	r3, [r7, #0]
 801536a:	2b00      	cmp	r3, #0
 801536c:	d1e7      	bne.n	801533e <igmp_tmr+0x16>
  NETIF_FOREACH(netif) {
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	681b      	ldr	r3, [r3, #0]
 8015372:	607b      	str	r3, [r7, #4]
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	2b00      	cmp	r3, #0
 8015378:	d1dd      	bne.n	8015336 <igmp_tmr+0xe>
    }
  }
}
 801537a:	bf00      	nop
 801537c:	bf00      	nop
 801537e:	3708      	adds	r7, #8
 8015380:	46bd      	mov	sp, r7
 8015382:	bd80      	pop	{r7, pc}
 8015384:	2000cab4 	.word	0x2000cab4

08015388 <igmp_timeout>:
 *
 * @param group an igmp_group for which a timeout is reached
 */
static void
igmp_timeout(struct netif *netif, struct igmp_group *group)
{
 8015388:	b580      	push	{r7, lr}
 801538a:	b082      	sub	sp, #8
 801538c:	af00      	add	r7, sp, #0
 801538e:	6078      	str	r0, [r7, #4]
 8015390:	6039      	str	r1, [r7, #0]
  /* If the state is IGMP_GROUP_DELAYING_MEMBER then we send a report for this group
     (unless it is the allsystems group) */
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 8015392:	683b      	ldr	r3, [r7, #0]
 8015394:	7a5b      	ldrb	r3, [r3, #9]
 8015396:	2b01      	cmp	r3, #1
 8015398:	d10d      	bne.n	80153b6 <igmp_timeout+0x2e>
      (!(ip4_addr_cmp(&(group->group_address), &allsystems)))) {
 801539a:	683b      	ldr	r3, [r7, #0]
 801539c:	685a      	ldr	r2, [r3, #4]
 801539e:	4b08      	ldr	r3, [pc, #32]	@ (80153c0 <igmp_timeout+0x38>)
 80153a0:	681b      	ldr	r3, [r3, #0]
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 80153a2:	429a      	cmp	r2, r3
 80153a4:	d007      	beq.n	80153b6 <igmp_timeout+0x2e>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_timeout: report membership for group with address "));
    ip4_addr_debug_print_val(IGMP_DEBUG, group->group_address);
    LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)netif));

    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 80153a6:	683b      	ldr	r3, [r7, #0]
 80153a8:	2202      	movs	r2, #2
 80153aa:	725a      	strb	r2, [r3, #9]

    IGMP_STATS_INC(igmp.tx_report);
    igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
 80153ac:	2216      	movs	r2, #22
 80153ae:	6839      	ldr	r1, [r7, #0]
 80153b0:	6878      	ldr	r0, [r7, #4]
 80153b2:	f000 f871 	bl	8015498 <igmp_send>
  }
}
 80153b6:	bf00      	nop
 80153b8:	3708      	adds	r7, #8
 80153ba:	46bd      	mov	sp, r7
 80153bc:	bd80      	pop	{r7, pc}
 80153be:	bf00      	nop
 80153c0:	2000cc48 	.word	0x2000cc48

080153c4 <igmp_start_timer>:
 * @param max_time the time in multiples of IGMP_TMR_INTERVAL (decrease with
 *        every call to igmp_tmr())
 */
static void
igmp_start_timer(struct igmp_group *group, u8_t max_time)
{
 80153c4:	b580      	push	{r7, lr}
 80153c6:	b082      	sub	sp, #8
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	6078      	str	r0, [r7, #4]
 80153cc:	460b      	mov	r3, r1
 80153ce:	70fb      	strb	r3, [r7, #3]
#ifdef LWIP_RAND
  group->timer = (u16_t)(max_time > 2 ? (LWIP_RAND() % max_time) : 1);
 80153d0:	78fb      	ldrb	r3, [r7, #3]
 80153d2:	2b02      	cmp	r3, #2
 80153d4:	d90b      	bls.n	80153ee <igmp_start_timer+0x2a>
 80153d6:	f001 fd3f 	bl	8016e58 <rand>
 80153da:	4603      	mov	r3, r0
 80153dc:	461a      	mov	r2, r3
 80153de:	78fb      	ldrb	r3, [r7, #3]
 80153e0:	fbb2 f1f3 	udiv	r1, r2, r3
 80153e4:	fb01 f303 	mul.w	r3, r1, r3
 80153e8:	1ad3      	subs	r3, r2, r3
 80153ea:	b29a      	uxth	r2, r3
 80153ec:	e000      	b.n	80153f0 <igmp_start_timer+0x2c>
 80153ee:	2201      	movs	r2, #1
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	815a      	strh	r2, [r3, #10]
#else /* LWIP_RAND */
  /* ATTENTION: use this only if absolutely necessary! */
  group->timer = max_time / 2;
#endif /* LWIP_RAND */

  if (group->timer == 0) {
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	895b      	ldrh	r3, [r3, #10]
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d102      	bne.n	8015402 <igmp_start_timer+0x3e>
    group->timer = 1;
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	2201      	movs	r2, #1
 8015400:	815a      	strh	r2, [r3, #10]
  }
}
 8015402:	bf00      	nop
 8015404:	3708      	adds	r7, #8
 8015406:	46bd      	mov	sp, r7
 8015408:	bd80      	pop	{r7, pc}

0801540a <igmp_delaying_member>:
 * @param group the igmp_group for which "delaying" membership report
 * @param maxresp query delay
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
 801540a:	b580      	push	{r7, lr}
 801540c:	b082      	sub	sp, #8
 801540e:	af00      	add	r7, sp, #0
 8015410:	6078      	str	r0, [r7, #4]
 8015412:	460b      	mov	r3, r1
 8015414:	70fb      	strb	r3, [r7, #3]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	7a5b      	ldrb	r3, [r3, #9]
 801541a:	2b02      	cmp	r3, #2
 801541c:	d00d      	beq.n	801543a <igmp_delaying_member+0x30>
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	7a5b      	ldrb	r3, [r3, #9]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 8015422:	2b01      	cmp	r3, #1
 8015424:	d111      	bne.n	801544a <igmp_delaying_member+0x40>
       ((group->timer == 0) || (maxresp < group->timer)))) {
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	895b      	ldrh	r3, [r3, #10]
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 801542a:	2b00      	cmp	r3, #0
 801542c:	d005      	beq.n	801543a <igmp_delaying_member+0x30>
       ((group->timer == 0) || (maxresp < group->timer)))) {
 801542e:	78fb      	ldrb	r3, [r7, #3]
 8015430:	b29a      	uxth	r2, r3
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	895b      	ldrh	r3, [r3, #10]
 8015436:	429a      	cmp	r2, r3
 8015438:	d207      	bcs.n	801544a <igmp_delaying_member+0x40>
    igmp_start_timer(group, maxresp);
 801543a:	78fb      	ldrb	r3, [r7, #3]
 801543c:	4619      	mov	r1, r3
 801543e:	6878      	ldr	r0, [r7, #4]
 8015440:	f7ff ffc0 	bl	80153c4 <igmp_start_timer>
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	2201      	movs	r2, #1
 8015448:	725a      	strb	r2, [r3, #9]
  }
}
 801544a:	bf00      	nop
 801544c:	3708      	adds	r7, #8
 801544e:	46bd      	mov	sp, r7
 8015450:	bd80      	pop	{r7, pc}

08015452 <igmp_ip_output_if>:
 *         ERR_BUF if p doesn't have enough space for IP/LINK headers
 *         returns errors returned by netif->output
 */
static err_t
igmp_ip_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest, struct netif *netif)
{
 8015452:	b580      	push	{r7, lr}
 8015454:	b08c      	sub	sp, #48	@ 0x30
 8015456:	af06      	add	r7, sp, #24
 8015458:	60f8      	str	r0, [r7, #12]
 801545a:	60b9      	str	r1, [r7, #8]
 801545c:	607a      	str	r2, [r7, #4]
 801545e:	603b      	str	r3, [r7, #0]
  /* This is the "router alert" option */
  u16_t ra[2];
  ra[0] = PP_HTONS(ROUTER_ALERT);
 8015460:	f240 4394 	movw	r3, #1172	@ 0x494
 8015464:	82bb      	strh	r3, [r7, #20]
  ra[1] = 0x0000; /* Router shall examine packet */
 8015466:	2300      	movs	r3, #0
 8015468:	82fb      	strh	r3, [r7, #22]
  IGMP_STATS_INC(igmp.xmit);
  return ip4_output_if_opt(p, src, dest, IGMP_TTL, 0, IP_PROTO_IGMP, netif, ra, ROUTER_ALERTLEN);
 801546a:	2304      	movs	r3, #4
 801546c:	9304      	str	r3, [sp, #16]
 801546e:	f107 0314 	add.w	r3, r7, #20
 8015472:	9303      	str	r3, [sp, #12]
 8015474:	683b      	ldr	r3, [r7, #0]
 8015476:	9302      	str	r3, [sp, #8]
 8015478:	2302      	movs	r3, #2
 801547a:	9301      	str	r3, [sp, #4]
 801547c:	2300      	movs	r3, #0
 801547e:	9300      	str	r3, [sp, #0]
 8015480:	2301      	movs	r3, #1
 8015482:	687a      	ldr	r2, [r7, #4]
 8015484:	68b9      	ldr	r1, [r7, #8]
 8015486:	68f8      	ldr	r0, [r7, #12]
 8015488:	f000 fab9 	bl	80159fe <ip4_output_if_opt>
 801548c:	4603      	mov	r3, r0
}
 801548e:	4618      	mov	r0, r3
 8015490:	3718      	adds	r7, #24
 8015492:	46bd      	mov	sp, r7
 8015494:	bd80      	pop	{r7, pc}
	...

08015498 <igmp_send>:
 * @param group the group to which to send the packet
 * @param type the type of igmp packet to send
 */
static void
igmp_send(struct netif *netif, struct igmp_group *group, u8_t type)
{
 8015498:	b580      	push	{r7, lr}
 801549a:	b088      	sub	sp, #32
 801549c:	af00      	add	r7, sp, #0
 801549e:	60f8      	str	r0, [r7, #12]
 80154a0:	60b9      	str	r1, [r7, #8]
 80154a2:	4613      	mov	r3, r2
 80154a4:	71fb      	strb	r3, [r7, #7]
  struct pbuf     *p    = NULL;
 80154a6:	2300      	movs	r3, #0
 80154a8:	61bb      	str	r3, [r7, #24]
  struct igmp_msg *igmp = NULL;
 80154aa:	2300      	movs	r3, #0
 80154ac:	617b      	str	r3, [r7, #20]
  ip4_addr_t   src  = *IP4_ADDR_ANY4;
 80154ae:	4b2f      	ldr	r3, [pc, #188]	@ (801556c <igmp_send+0xd4>)
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	613b      	str	r3, [r7, #16]
  ip4_addr_t  *dest = NULL;
 80154b4:	2300      	movs	r3, #0
 80154b6:	61fb      	str	r3, [r7, #28]

  /* IP header + "router alert" option + IGMP header */
  p = pbuf_alloc(PBUF_TRANSPORT, IGMP_MINLEN, PBUF_RAM);
 80154b8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80154bc:	2108      	movs	r1, #8
 80154be:	2036      	movs	r0, #54	@ 0x36
 80154c0:	f7f5 fffc 	bl	800b4bc <pbuf_alloc>
 80154c4:	61b8      	str	r0, [r7, #24]

  if (p) {
 80154c6:	69bb      	ldr	r3, [r7, #24]
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d04b      	beq.n	8015564 <igmp_send+0xcc>
    igmp = (struct igmp_msg *)p->payload;
 80154cc:	69bb      	ldr	r3, [r7, #24]
 80154ce:	685b      	ldr	r3, [r3, #4]
 80154d0:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
 80154d2:	69bb      	ldr	r3, [r7, #24]
 80154d4:	895b      	ldrh	r3, [r3, #10]
 80154d6:	2b07      	cmp	r3, #7
 80154d8:	d806      	bhi.n	80154e8 <igmp_send+0x50>
 80154da:	4b25      	ldr	r3, [pc, #148]	@ (8015570 <igmp_send+0xd8>)
 80154dc:	f240 3202 	movw	r2, #770	@ 0x302
 80154e0:	4924      	ldr	r1, [pc, #144]	@ (8015574 <igmp_send+0xdc>)
 80154e2:	4825      	ldr	r0, [pc, #148]	@ (8015578 <igmp_send+0xe0>)
 80154e4:	f001 fdb8 	bl	8017058 <iprintf>
                (p->len >= sizeof(struct igmp_msg)));
    ip4_addr_copy(src, *netif_ip4_addr(netif));
 80154e8:	68fb      	ldr	r3, [r7, #12]
 80154ea:	3304      	adds	r3, #4
 80154ec:	681b      	ldr	r3, [r3, #0]
 80154ee:	613b      	str	r3, [r7, #16]

    if (type == IGMP_V2_MEMB_REPORT) {
 80154f0:	79fb      	ldrb	r3, [r7, #7]
 80154f2:	2b16      	cmp	r3, #22
 80154f4:	d10a      	bne.n	801550c <igmp_send+0x74>
      dest = &(group->group_address);
 80154f6:	68bb      	ldr	r3, [r7, #8]
 80154f8:	3304      	adds	r3, #4
 80154fa:	61fb      	str	r3, [r7, #28]
      ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 80154fc:	68bb      	ldr	r3, [r7, #8]
 80154fe:	685a      	ldr	r2, [r3, #4]
 8015500:	697b      	ldr	r3, [r7, #20]
 8015502:	605a      	str	r2, [r3, #4]
      group->last_reporter_flag = 1; /* Remember we were the last to report */
 8015504:	68bb      	ldr	r3, [r7, #8]
 8015506:	2201      	movs	r2, #1
 8015508:	721a      	strb	r2, [r3, #8]
 801550a:	e008      	b.n	801551e <igmp_send+0x86>
    } else {
      if (type == IGMP_LEAVE_GROUP) {
 801550c:	79fb      	ldrb	r3, [r7, #7]
 801550e:	2b17      	cmp	r3, #23
 8015510:	d105      	bne.n	801551e <igmp_send+0x86>
        dest = &allrouters;
 8015512:	4b1a      	ldr	r3, [pc, #104]	@ (801557c <igmp_send+0xe4>)
 8015514:	61fb      	str	r3, [r7, #28]
        ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 8015516:	68bb      	ldr	r3, [r7, #8]
 8015518:	685a      	ldr	r2, [r3, #4]
 801551a:	697b      	ldr	r3, [r7, #20]
 801551c:	605a      	str	r2, [r3, #4]
      }
    }

    if ((type == IGMP_V2_MEMB_REPORT) || (type == IGMP_LEAVE_GROUP)) {
 801551e:	79fb      	ldrb	r3, [r7, #7]
 8015520:	2b16      	cmp	r3, #22
 8015522:	d002      	beq.n	801552a <igmp_send+0x92>
 8015524:	79fb      	ldrb	r3, [r7, #7]
 8015526:	2b17      	cmp	r3, #23
 8015528:	d119      	bne.n	801555e <igmp_send+0xc6>
      igmp->igmp_msgtype  = type;
 801552a:	697b      	ldr	r3, [r7, #20]
 801552c:	79fa      	ldrb	r2, [r7, #7]
 801552e:	701a      	strb	r2, [r3, #0]
      igmp->igmp_maxresp  = 0;
 8015530:	697b      	ldr	r3, [r7, #20]
 8015532:	2200      	movs	r2, #0
 8015534:	705a      	strb	r2, [r3, #1]
      igmp->igmp_checksum = 0;
 8015536:	697b      	ldr	r3, [r7, #20]
 8015538:	2200      	movs	r2, #0
 801553a:	709a      	strb	r2, [r3, #2]
 801553c:	2200      	movs	r2, #0
 801553e:	70da      	strb	r2, [r3, #3]
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
 8015540:	2108      	movs	r1, #8
 8015542:	6978      	ldr	r0, [r7, #20]
 8015544:	f7f4 fdd5 	bl	800a0f2 <inet_chksum>
 8015548:	4603      	mov	r3, r0
 801554a:	461a      	mov	r2, r3
 801554c:	697b      	ldr	r3, [r7, #20]
 801554e:	805a      	strh	r2, [r3, #2]

      igmp_ip_output_if(p, &src, dest, netif);
 8015550:	f107 0110 	add.w	r1, r7, #16
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	69fa      	ldr	r2, [r7, #28]
 8015558:	69b8      	ldr	r0, [r7, #24]
 801555a:	f7ff ff7a 	bl	8015452 <igmp_ip_output_if>
    }

    pbuf_free(p);
 801555e:	69b8      	ldr	r0, [r7, #24]
 8015560:	f7f6 fa90 	bl	800ba84 <pbuf_free>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_send: not enough memory for igmp_send\n"));
    IGMP_STATS_INC(igmp.memerr);
  }
}
 8015564:	bf00      	nop
 8015566:	3720      	adds	r7, #32
 8015568:	46bd      	mov	sp, r7
 801556a:	bd80      	pop	{r7, pc}
 801556c:	0801b8d4 	.word	0x0801b8d4
 8015570:	0801b0c4 	.word	0x0801b0c4
 8015574:	0801b3e0 	.word	0x0801b3e0
 8015578:	0801b130 	.word	0x0801b130
 801557c:	2000cc4c 	.word	0x2000cc4c

08015580 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015580:	b480      	push	{r7}
 8015582:	b085      	sub	sp, #20
 8015584:	af00      	add	r7, sp, #0
 8015586:	6078      	str	r0, [r7, #4]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_MULTICAST_TX_OPTIONS
  /* Use administratively selected interface for multicast by default */
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	681b      	ldr	r3, [r3, #0]
 801558c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015590:	2be0      	cmp	r3, #224	@ 0xe0
 8015592:	d106      	bne.n	80155a2 <ip4_route+0x22>
 8015594:	4b36      	ldr	r3, [pc, #216]	@ (8015670 <ip4_route+0xf0>)
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	2b00      	cmp	r3, #0
 801559a:	d002      	beq.n	80155a2 <ip4_route+0x22>
    return ip4_default_multicast_netif;
 801559c:	4b34      	ldr	r3, [pc, #208]	@ (8015670 <ip4_route+0xf0>)
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	e060      	b.n	8015664 <ip4_route+0xe4>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80155a2:	4b34      	ldr	r3, [pc, #208]	@ (8015674 <ip4_route+0xf4>)
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	60fb      	str	r3, [r7, #12]
 80155a8:	e036      	b.n	8015618 <ip4_route+0x98>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80155b0:	f003 0301 	and.w	r3, r3, #1
 80155b4:	b2db      	uxtb	r3, r3
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d02b      	beq.n	8015612 <ip4_route+0x92>
 80155ba:	68fb      	ldr	r3, [r7, #12]
 80155bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80155c0:	089b      	lsrs	r3, r3, #2
 80155c2:	f003 0301 	and.w	r3, r3, #1
 80155c6:	b2db      	uxtb	r3, r3
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d022      	beq.n	8015612 <ip4_route+0x92>
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	3304      	adds	r3, #4
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d01d      	beq.n	8015612 <ip4_route+0x92>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	681a      	ldr	r2, [r3, #0]
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	3304      	adds	r3, #4
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	405a      	eors	r2, r3
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	3308      	adds	r3, #8
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	4013      	ands	r3, r2
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d101      	bne.n	80155f2 <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	e038      	b.n	8015664 <ip4_route+0xe4>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80155f8:	f003 0302 	and.w	r3, r3, #2
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d108      	bne.n	8015612 <ip4_route+0x92>
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	681a      	ldr	r2, [r3, #0]
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	330c      	adds	r3, #12
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	429a      	cmp	r2, r3
 801560c:	d101      	bne.n	8015612 <ip4_route+0x92>
        /* return netif on which to forward IP packet */
        return netif;
 801560e:	68fb      	ldr	r3, [r7, #12]
 8015610:	e028      	b.n	8015664 <ip4_route+0xe4>
  NETIF_FOREACH(netif) {
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	60fb      	str	r3, [r7, #12]
 8015618:	68fb      	ldr	r3, [r7, #12]
 801561a:	2b00      	cmp	r3, #0
 801561c:	d1c5      	bne.n	80155aa <ip4_route+0x2a>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801561e:	4b16      	ldr	r3, [pc, #88]	@ (8015678 <ip4_route+0xf8>)
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	2b00      	cmp	r3, #0
 8015624:	d01a      	beq.n	801565c <ip4_route+0xdc>
 8015626:	4b14      	ldr	r3, [pc, #80]	@ (8015678 <ip4_route+0xf8>)
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801562e:	f003 0301 	and.w	r3, r3, #1
 8015632:	2b00      	cmp	r3, #0
 8015634:	d012      	beq.n	801565c <ip4_route+0xdc>
 8015636:	4b10      	ldr	r3, [pc, #64]	@ (8015678 <ip4_route+0xf8>)
 8015638:	681b      	ldr	r3, [r3, #0]
 801563a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801563e:	f003 0304 	and.w	r3, r3, #4
 8015642:	2b00      	cmp	r3, #0
 8015644:	d00a      	beq.n	801565c <ip4_route+0xdc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015646:	4b0c      	ldr	r3, [pc, #48]	@ (8015678 <ip4_route+0xf8>)
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	3304      	adds	r3, #4
 801564c:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801564e:	2b00      	cmp	r3, #0
 8015650:	d004      	beq.n	801565c <ip4_route+0xdc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	b2db      	uxtb	r3, r3
 8015658:	2b7f      	cmp	r3, #127	@ 0x7f
 801565a:	d101      	bne.n	8015660 <ip4_route+0xe0>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801565c:	2300      	movs	r3, #0
 801565e:	e001      	b.n	8015664 <ip4_route+0xe4>
  }

  return netif_default;
 8015660:	4b05      	ldr	r3, [pc, #20]	@ (8015678 <ip4_route+0xf8>)
 8015662:	681b      	ldr	r3, [r3, #0]
}
 8015664:	4618      	mov	r0, r3
 8015666:	3714      	adds	r7, #20
 8015668:	46bd      	mov	sp, r7
 801566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801566e:	4770      	bx	lr
 8015670:	2000cc54 	.word	0x2000cc54
 8015674:	2000cab4 	.word	0x2000cab4
 8015678:	2000cab8 	.word	0x2000cab8

0801567c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801567c:	b580      	push	{r7, lr}
 801567e:	b082      	sub	sp, #8
 8015680:	af00      	add	r7, sp, #0
 8015682:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801568a:	f003 0301 	and.w	r3, r3, #1
 801568e:	b2db      	uxtb	r3, r3
 8015690:	2b00      	cmp	r3, #0
 8015692:	d016      	beq.n	80156c2 <ip4_input_accept+0x46>
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	3304      	adds	r3, #4
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	2b00      	cmp	r3, #0
 801569c:	d011      	beq.n	80156c2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801569e:	4b0b      	ldr	r3, [pc, #44]	@ (80156cc <ip4_input_accept+0x50>)
 80156a0:	695a      	ldr	r2, [r3, #20]
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	3304      	adds	r3, #4
 80156a6:	681b      	ldr	r3, [r3, #0]
 80156a8:	429a      	cmp	r2, r3
 80156aa:	d008      	beq.n	80156be <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80156ac:	4b07      	ldr	r3, [pc, #28]	@ (80156cc <ip4_input_accept+0x50>)
 80156ae:	695b      	ldr	r3, [r3, #20]
 80156b0:	6879      	ldr	r1, [r7, #4]
 80156b2:	4618      	mov	r0, r3
 80156b4:	f000 fad4 	bl	8015c60 <ip4_addr_isbroadcast_u32>
 80156b8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d001      	beq.n	80156c2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80156be:	2301      	movs	r3, #1
 80156c0:	e000      	b.n	80156c4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80156c2:	2300      	movs	r3, #0
}
 80156c4:	4618      	mov	r0, r3
 80156c6:	3708      	adds	r7, #8
 80156c8:	46bd      	mov	sp, r7
 80156ca:	bd80      	pop	{r7, pc}
 80156cc:	20009290 	.word	0x20009290

080156d0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80156d0:	b580      	push	{r7, lr}
 80156d2:	b088      	sub	sp, #32
 80156d4:	af00      	add	r7, sp, #0
 80156d6:	6078      	str	r0, [r7, #4]
 80156d8:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80156da:	2301      	movs	r3, #1
 80156dc:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	685b      	ldr	r3, [r3, #4]
 80156e2:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80156e4:	69fb      	ldr	r3, [r7, #28]
 80156e6:	781b      	ldrb	r3, [r3, #0]
 80156e8:	091b      	lsrs	r3, r3, #4
 80156ea:	b2db      	uxtb	r3, r3
 80156ec:	2b04      	cmp	r3, #4
 80156ee:	d004      	beq.n	80156fa <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80156f0:	6878      	ldr	r0, [r7, #4]
 80156f2:	f7f6 f9c7 	bl	800ba84 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80156f6:	2300      	movs	r3, #0
 80156f8:	e157      	b.n	80159aa <ip4_input+0x2da>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80156fa:	69fb      	ldr	r3, [r7, #28]
 80156fc:	781b      	ldrb	r3, [r3, #0]
 80156fe:	f003 030f 	and.w	r3, r3, #15
 8015702:	b2db      	uxtb	r3, r3
 8015704:	009b      	lsls	r3, r3, #2
 8015706:	b2db      	uxtb	r3, r3
 8015708:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801570a:	69fb      	ldr	r3, [r7, #28]
 801570c:	885b      	ldrh	r3, [r3, #2]
 801570e:	b29b      	uxth	r3, r3
 8015710:	4618      	mov	r0, r3
 8015712:	f7f4 fc63 	bl	8009fdc <lwip_htons>
 8015716:	4603      	mov	r3, r0
 8015718:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	891b      	ldrh	r3, [r3, #8]
 801571e:	8a3a      	ldrh	r2, [r7, #16]
 8015720:	429a      	cmp	r2, r3
 8015722:	d204      	bcs.n	801572e <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8015724:	8a3b      	ldrh	r3, [r7, #16]
 8015726:	4619      	mov	r1, r3
 8015728:	6878      	ldr	r0, [r7, #4]
 801572a:	f7f6 f825 	bl	800b778 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	895b      	ldrh	r3, [r3, #10]
 8015732:	8a7a      	ldrh	r2, [r7, #18]
 8015734:	429a      	cmp	r2, r3
 8015736:	d807      	bhi.n	8015748 <ip4_input+0x78>
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	891b      	ldrh	r3, [r3, #8]
 801573c:	8a3a      	ldrh	r2, [r7, #16]
 801573e:	429a      	cmp	r2, r3
 8015740:	d802      	bhi.n	8015748 <ip4_input+0x78>
 8015742:	8a7b      	ldrh	r3, [r7, #18]
 8015744:	2b13      	cmp	r3, #19
 8015746:	d804      	bhi.n	8015752 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015748:	6878      	ldr	r0, [r7, #4]
 801574a:	f7f6 f99b 	bl	800ba84 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801574e:	2300      	movs	r3, #0
 8015750:	e12b      	b.n	80159aa <ip4_input+0x2da>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015752:	69fb      	ldr	r3, [r7, #28]
 8015754:	691b      	ldr	r3, [r3, #16]
 8015756:	4a97      	ldr	r2, [pc, #604]	@ (80159b4 <ip4_input+0x2e4>)
 8015758:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801575a:	69fb      	ldr	r3, [r7, #28]
 801575c:	68db      	ldr	r3, [r3, #12]
 801575e:	4a95      	ldr	r2, [pc, #596]	@ (80159b4 <ip4_input+0x2e4>)
 8015760:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015762:	4b94      	ldr	r3, [pc, #592]	@ (80159b4 <ip4_input+0x2e4>)
 8015764:	695b      	ldr	r3, [r3, #20]
 8015766:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801576a:	2be0      	cmp	r3, #224	@ 0xe0
 801576c:	d120      	bne.n	80157b0 <ip4_input+0xe0>
#if LWIP_IGMP
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 801576e:	683b      	ldr	r3, [r7, #0]
 8015770:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015774:	f003 0320 	and.w	r3, r3, #32
 8015778:	2b00      	cmp	r3, #0
 801577a:	d016      	beq.n	80157aa <ip4_input+0xda>
 801577c:	498e      	ldr	r1, [pc, #568]	@ (80159b8 <ip4_input+0x2e8>)
 801577e:	6838      	ldr	r0, [r7, #0]
 8015780:	f7ff fcb1 	bl	80150e6 <igmp_lookfor_group>
 8015784:	4603      	mov	r3, r0
 8015786:	2b00      	cmp	r3, #0
 8015788:	d00f      	beq.n	80157aa <ip4_input+0xda>
      /* IGMP snooping switches need 0.0.0.0 to be allowed as source address (RFC 4541) */
      ip4_addr_t allsystems;
      IP4_ADDR(&allsystems, 224, 0, 0, 1);
 801578a:	4b8c      	ldr	r3, [pc, #560]	@ (80159bc <ip4_input+0x2ec>)
 801578c:	60bb      	str	r3, [r7, #8]
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
 801578e:	4b89      	ldr	r3, [pc, #548]	@ (80159b4 <ip4_input+0x2e4>)
 8015790:	695a      	ldr	r2, [r3, #20]
 8015792:	68bb      	ldr	r3, [r7, #8]
 8015794:	429a      	cmp	r2, r3
 8015796:	d105      	bne.n	80157a4 <ip4_input+0xd4>
          ip4_addr_isany(ip4_current_src_addr())) {
 8015798:	4b86      	ldr	r3, [pc, #536]	@ (80159b4 <ip4_input+0x2e4>)
 801579a:	691b      	ldr	r3, [r3, #16]
 801579c:	2b00      	cmp	r3, #0
 801579e:	d101      	bne.n	80157a4 <ip4_input+0xd4>
        check_ip_src = 0;
 80157a0:	2300      	movs	r3, #0
 80157a2:	617b      	str	r3, [r7, #20]
      }
      netif = inp;
 80157a4:	683b      	ldr	r3, [r7, #0]
 80157a6:	61bb      	str	r3, [r7, #24]
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 80157a8:	e02a      	b.n	8015800 <ip4_input+0x130>
    } else {
      netif = NULL;
 80157aa:	2300      	movs	r3, #0
 80157ac:	61bb      	str	r3, [r7, #24]
 80157ae:	e027      	b.n	8015800 <ip4_input+0x130>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80157b0:	6838      	ldr	r0, [r7, #0]
 80157b2:	f7ff ff63 	bl	801567c <ip4_input_accept>
 80157b6:	4603      	mov	r3, r0
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d002      	beq.n	80157c2 <ip4_input+0xf2>
      netif = inp;
 80157bc:	683b      	ldr	r3, [r7, #0]
 80157be:	61bb      	str	r3, [r7, #24]
 80157c0:	e01e      	b.n	8015800 <ip4_input+0x130>
    } else {
      netif = NULL;
 80157c2:	2300      	movs	r3, #0
 80157c4:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80157c6:	4b7b      	ldr	r3, [pc, #492]	@ (80159b4 <ip4_input+0x2e4>)
 80157c8:	695b      	ldr	r3, [r3, #20]
 80157ca:	b2db      	uxtb	r3, r3
 80157cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80157ce:	d017      	beq.n	8015800 <ip4_input+0x130>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80157d0:	4b7b      	ldr	r3, [pc, #492]	@ (80159c0 <ip4_input+0x2f0>)
 80157d2:	681b      	ldr	r3, [r3, #0]
 80157d4:	61bb      	str	r3, [r7, #24]
 80157d6:	e00e      	b.n	80157f6 <ip4_input+0x126>
          if (netif == inp) {
 80157d8:	69ba      	ldr	r2, [r7, #24]
 80157da:	683b      	ldr	r3, [r7, #0]
 80157dc:	429a      	cmp	r2, r3
 80157de:	d006      	beq.n	80157ee <ip4_input+0x11e>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80157e0:	69b8      	ldr	r0, [r7, #24]
 80157e2:	f7ff ff4b 	bl	801567c <ip4_input_accept>
 80157e6:	4603      	mov	r3, r0
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d108      	bne.n	80157fe <ip4_input+0x12e>
 80157ec:	e000      	b.n	80157f0 <ip4_input+0x120>
            continue;
 80157ee:	bf00      	nop
        NETIF_FOREACH(netif) {
 80157f0:	69bb      	ldr	r3, [r7, #24]
 80157f2:	681b      	ldr	r3, [r3, #0]
 80157f4:	61bb      	str	r3, [r7, #24]
 80157f6:	69bb      	ldr	r3, [r7, #24]
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d1ed      	bne.n	80157d8 <ip4_input+0x108>
 80157fc:	e000      	b.n	8015800 <ip4_input+0x130>
            break;
 80157fe:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8015800:	69bb      	ldr	r3, [r7, #24]
 8015802:	2b00      	cmp	r3, #0
 8015804:	d111      	bne.n	801582a <ip4_input+0x15a>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8015806:	69fb      	ldr	r3, [r7, #28]
 8015808:	7a5b      	ldrb	r3, [r3, #9]
 801580a:	2b11      	cmp	r3, #17
 801580c:	d10d      	bne.n	801582a <ip4_input+0x15a>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801580e:	8a7b      	ldrh	r3, [r7, #18]
 8015810:	69fa      	ldr	r2, [r7, #28]
 8015812:	4413      	add	r3, r2
 8015814:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	885b      	ldrh	r3, [r3, #2]
 801581a:	b29b      	uxth	r3, r3
 801581c:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 8015820:	d103      	bne.n	801582a <ip4_input+0x15a>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8015822:	683b      	ldr	r3, [r7, #0]
 8015824:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8015826:	2300      	movs	r3, #0
 8015828:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801582a:	697b      	ldr	r3, [r7, #20]
 801582c:	2b00      	cmp	r3, #0
 801582e:	d017      	beq.n	8015860 <ip4_input+0x190>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8015830:	4b60      	ldr	r3, [pc, #384]	@ (80159b4 <ip4_input+0x2e4>)
 8015832:	691b      	ldr	r3, [r3, #16]
 8015834:	2b00      	cmp	r3, #0
 8015836:	d013      	beq.n	8015860 <ip4_input+0x190>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015838:	4b5e      	ldr	r3, [pc, #376]	@ (80159b4 <ip4_input+0x2e4>)
 801583a:	691b      	ldr	r3, [r3, #16]
 801583c:	6839      	ldr	r1, [r7, #0]
 801583e:	4618      	mov	r0, r3
 8015840:	f000 fa0e 	bl	8015c60 <ip4_addr_isbroadcast_u32>
 8015844:	4603      	mov	r3, r0
 8015846:	2b00      	cmp	r3, #0
 8015848:	d105      	bne.n	8015856 <ip4_input+0x186>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801584a:	4b5a      	ldr	r3, [pc, #360]	@ (80159b4 <ip4_input+0x2e4>)
 801584c:	691b      	ldr	r3, [r3, #16]
 801584e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015852:	2be0      	cmp	r3, #224	@ 0xe0
 8015854:	d104      	bne.n	8015860 <ip4_input+0x190>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015856:	6878      	ldr	r0, [r7, #4]
 8015858:	f7f6 f914 	bl	800ba84 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801585c:	2300      	movs	r3, #0
 801585e:	e0a4      	b.n	80159aa <ip4_input+0x2da>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015860:	69bb      	ldr	r3, [r7, #24]
 8015862:	2b00      	cmp	r3, #0
 8015864:	d104      	bne.n	8015870 <ip4_input+0x1a0>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015866:	6878      	ldr	r0, [r7, #4]
 8015868:	f7f6 f90c 	bl	800ba84 <pbuf_free>
    return ERR_OK;
 801586c:	2300      	movs	r3, #0
 801586e:	e09c      	b.n	80159aa <ip4_input+0x2da>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015870:	69fb      	ldr	r3, [r7, #28]
 8015872:	88db      	ldrh	r3, [r3, #6]
 8015874:	b29b      	uxth	r3, r3
 8015876:	461a      	mov	r2, r3
 8015878:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801587c:	4013      	ands	r3, r2
 801587e:	2b00      	cmp	r3, #0
 8015880:	d00b      	beq.n	801589a <ip4_input+0x1ca>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015882:	6878      	ldr	r0, [r7, #4]
 8015884:	f000 fdc2 	bl	801640c <ip4_reass>
 8015888:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	2b00      	cmp	r3, #0
 801588e:	d101      	bne.n	8015894 <ip4_input+0x1c4>
      return ERR_OK;
 8015890:	2300      	movs	r3, #0
 8015892:	e08a      	b.n	80159aa <ip4_input+0x2da>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	685b      	ldr	r3, [r3, #4]
 8015898:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801589a:	4a46      	ldr	r2, [pc, #280]	@ (80159b4 <ip4_input+0x2e4>)
 801589c:	69bb      	ldr	r3, [r7, #24]
 801589e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80158a0:	4a44      	ldr	r2, [pc, #272]	@ (80159b4 <ip4_input+0x2e4>)
 80158a2:	683b      	ldr	r3, [r7, #0]
 80158a4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80158a6:	4a43      	ldr	r2, [pc, #268]	@ (80159b4 <ip4_input+0x2e4>)
 80158a8:	69fb      	ldr	r3, [r7, #28]
 80158aa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80158ac:	69fb      	ldr	r3, [r7, #28]
 80158ae:	781b      	ldrb	r3, [r3, #0]
 80158b0:	f003 030f 	and.w	r3, r3, #15
 80158b4:	b2db      	uxtb	r3, r3
 80158b6:	009b      	lsls	r3, r3, #2
 80158b8:	b2db      	uxtb	r3, r3
 80158ba:	461a      	mov	r2, r3
 80158bc:	4b3d      	ldr	r3, [pc, #244]	@ (80159b4 <ip4_input+0x2e4>)
 80158be:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80158c0:	8a7b      	ldrh	r3, [r7, #18]
 80158c2:	4619      	mov	r1, r3
 80158c4:	6878      	ldr	r0, [r7, #4]
 80158c6:	f7f6 f857 	bl	800b978 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80158ca:	69fb      	ldr	r3, [r7, #28]
 80158cc:	7a5b      	ldrb	r3, [r3, #9]
 80158ce:	3b01      	subs	r3, #1
 80158d0:	2b10      	cmp	r3, #16
 80158d2:	d83a      	bhi.n	801594a <ip4_input+0x27a>
 80158d4:	a201      	add	r2, pc, #4	@ (adr r2, 80158dc <ip4_input+0x20c>)
 80158d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158da:	bf00      	nop
 80158dc:	08015935 	.word	0x08015935
 80158e0:	0801593f 	.word	0x0801593f
 80158e4:	0801594b 	.word	0x0801594b
 80158e8:	0801594b 	.word	0x0801594b
 80158ec:	0801594b 	.word	0x0801594b
 80158f0:	0801592b 	.word	0x0801592b
 80158f4:	0801594b 	.word	0x0801594b
 80158f8:	0801594b 	.word	0x0801594b
 80158fc:	0801594b 	.word	0x0801594b
 8015900:	0801594b 	.word	0x0801594b
 8015904:	0801594b 	.word	0x0801594b
 8015908:	0801594b 	.word	0x0801594b
 801590c:	0801594b 	.word	0x0801594b
 8015910:	0801594b 	.word	0x0801594b
 8015914:	0801594b 	.word	0x0801594b
 8015918:	0801594b 	.word	0x0801594b
 801591c:	08015921 	.word	0x08015921
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015920:	6839      	ldr	r1, [r7, #0]
 8015922:	6878      	ldr	r0, [r7, #4]
 8015924:	f7fb fed8 	bl	80116d8 <udp_input>
        break;
 8015928:	e02c      	b.n	8015984 <ip4_input+0x2b4>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801592a:	6839      	ldr	r1, [r7, #0]
 801592c:	6878      	ldr	r0, [r7, #4]
 801592e:	f7f7 feef 	bl	800d710 <tcp_input>
        break;
 8015932:	e027      	b.n	8015984 <ip4_input+0x2b4>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015934:	6839      	ldr	r1, [r7, #0]
 8015936:	6878      	ldr	r0, [r7, #4]
 8015938:	f7ff f9ea 	bl	8014d10 <icmp_input>
        break;
 801593c:	e022      	b.n	8015984 <ip4_input+0x2b4>
#endif /* LWIP_ICMP */
#if LWIP_IGMP
      case IP_PROTO_IGMP:
        igmp_input(p, inp, ip4_current_dest_addr());
 801593e:	4a1e      	ldr	r2, [pc, #120]	@ (80159b8 <ip4_input+0x2e8>)
 8015940:	6839      	ldr	r1, [r7, #0]
 8015942:	6878      	ldr	r0, [r7, #4]
 8015944:	f7ff fc56 	bl	80151f4 <igmp_input>
        break;
 8015948:	e01c      	b.n	8015984 <ip4_input+0x2b4>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801594a:	4b1a      	ldr	r3, [pc, #104]	@ (80159b4 <ip4_input+0x2e4>)
 801594c:	695b      	ldr	r3, [r3, #20]
 801594e:	69b9      	ldr	r1, [r7, #24]
 8015950:	4618      	mov	r0, r3
 8015952:	f000 f985 	bl	8015c60 <ip4_addr_isbroadcast_u32>
 8015956:	4603      	mov	r3, r0
 8015958:	2b00      	cmp	r3, #0
 801595a:	d10f      	bne.n	801597c <ip4_input+0x2ac>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801595c:	4b15      	ldr	r3, [pc, #84]	@ (80159b4 <ip4_input+0x2e4>)
 801595e:	695b      	ldr	r3, [r3, #20]
 8015960:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015964:	2be0      	cmp	r3, #224	@ 0xe0
 8015966:	d009      	beq.n	801597c <ip4_input+0x2ac>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015968:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801596c:	4619      	mov	r1, r3
 801596e:	6878      	ldr	r0, [r7, #4]
 8015970:	f7f6 f875 	bl	800ba5e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015974:	2102      	movs	r1, #2
 8015976:	6878      	ldr	r0, [r7, #4]
 8015978:	f7ff face 	bl	8014f18 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801597c:	6878      	ldr	r0, [r7, #4]
 801597e:	f7f6 f881 	bl	800ba84 <pbuf_free>
        break;
 8015982:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015984:	4b0b      	ldr	r3, [pc, #44]	@ (80159b4 <ip4_input+0x2e4>)
 8015986:	2200      	movs	r2, #0
 8015988:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801598a:	4b0a      	ldr	r3, [pc, #40]	@ (80159b4 <ip4_input+0x2e4>)
 801598c:	2200      	movs	r2, #0
 801598e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015990:	4b08      	ldr	r3, [pc, #32]	@ (80159b4 <ip4_input+0x2e4>)
 8015992:	2200      	movs	r2, #0
 8015994:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015996:	4b07      	ldr	r3, [pc, #28]	@ (80159b4 <ip4_input+0x2e4>)
 8015998:	2200      	movs	r2, #0
 801599a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801599c:	4b05      	ldr	r3, [pc, #20]	@ (80159b4 <ip4_input+0x2e4>)
 801599e:	2200      	movs	r2, #0
 80159a0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80159a2:	4b04      	ldr	r3, [pc, #16]	@ (80159b4 <ip4_input+0x2e4>)
 80159a4:	2200      	movs	r2, #0
 80159a6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80159a8:	2300      	movs	r3, #0
}
 80159aa:	4618      	mov	r0, r3
 80159ac:	3720      	adds	r7, #32
 80159ae:	46bd      	mov	sp, r7
 80159b0:	bd80      	pop	{r7, pc}
 80159b2:	bf00      	nop
 80159b4:	20009290 	.word	0x20009290
 80159b8:	200092a4 	.word	0x200092a4
 80159bc:	010000e0 	.word	0x010000e0
 80159c0:	2000cab4 	.word	0x2000cab4

080159c4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80159c4:	b580      	push	{r7, lr}
 80159c6:	b08a      	sub	sp, #40	@ 0x28
 80159c8:	af06      	add	r7, sp, #24
 80159ca:	60f8      	str	r0, [r7, #12]
 80159cc:	60b9      	str	r1, [r7, #8]
 80159ce:	607a      	str	r2, [r7, #4]
 80159d0:	70fb      	strb	r3, [r7, #3]
#if IP_OPTIONS_SEND
  return ip4_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 80159d2:	78fa      	ldrb	r2, [r7, #3]
 80159d4:	2300      	movs	r3, #0
 80159d6:	9304      	str	r3, [sp, #16]
 80159d8:	2300      	movs	r3, #0
 80159da:	9303      	str	r3, [sp, #12]
 80159dc:	6a3b      	ldr	r3, [r7, #32]
 80159de:	9302      	str	r3, [sp, #8]
 80159e0:	7f3b      	ldrb	r3, [r7, #28]
 80159e2:	9301      	str	r3, [sp, #4]
 80159e4:	7e3b      	ldrb	r3, [r7, #24]
 80159e6:	9300      	str	r3, [sp, #0]
 80159e8:	4613      	mov	r3, r2
 80159ea:	687a      	ldr	r2, [r7, #4]
 80159ec:	68b9      	ldr	r1, [r7, #8]
 80159ee:	68f8      	ldr	r0, [r7, #12]
 80159f0:	f000 f805 	bl	80159fe <ip4_output_if_opt>
 80159f4:	4603      	mov	r3, r0
}
 80159f6:	4618      	mov	r0, r3
 80159f8:	3710      	adds	r7, #16
 80159fa:	46bd      	mov	sp, r7
 80159fc:	bd80      	pop	{r7, pc}

080159fe <ip4_output_if_opt>:
 */
err_t
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
 80159fe:	b580      	push	{r7, lr}
 8015a00:	b08c      	sub	sp, #48	@ 0x30
 8015a02:	af06      	add	r7, sp, #24
 8015a04:	60f8      	str	r0, [r7, #12]
 8015a06:	60b9      	str	r1, [r7, #8]
 8015a08:	607a      	str	r2, [r7, #4]
 8015a0a:	70fb      	strb	r3, [r7, #3]
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015a0c:	68bb      	ldr	r3, [r7, #8]
 8015a0e:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d009      	beq.n	8015a2a <ip4_output_if_opt+0x2c>
    if (ip4_addr_isany(src)) {
 8015a16:	68bb      	ldr	r3, [r7, #8]
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d003      	beq.n	8015a24 <ip4_output_if_opt+0x26>
 8015a1c:	68bb      	ldr	r3, [r7, #8]
 8015a1e:	681b      	ldr	r3, [r3, #0]
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d102      	bne.n	8015a2a <ip4_output_if_opt+0x2c>
      src_used = netif_ip4_addr(netif);
 8015a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a26:	3304      	adds	r3, #4
 8015a28:	617b      	str	r3, [r7, #20]
    }
  }

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
 8015a2a:	78fa      	ldrb	r2, [r7, #3]
 8015a2c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8015a2e:	9304      	str	r3, [sp, #16]
 8015a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a32:	9303      	str	r3, [sp, #12]
 8015a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a36:	9302      	str	r3, [sp, #8]
 8015a38:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015a3c:	9301      	str	r3, [sp, #4]
 8015a3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015a42:	9300      	str	r3, [sp, #0]
 8015a44:	4613      	mov	r3, r2
 8015a46:	687a      	ldr	r2, [r7, #4]
 8015a48:	6979      	ldr	r1, [r7, #20]
 8015a4a:	68f8      	ldr	r0, [r7, #12]
 8015a4c:	f000 f822 	bl	8015a94 <ip4_output_if_opt_src>
 8015a50:	4603      	mov	r3, r0
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
#endif /* IP_OPTIONS_SEND */
}
 8015a52:	4618      	mov	r0, r3
 8015a54:	3718      	adds	r7, #24
 8015a56:	46bd      	mov	sp, r7
 8015a58:	bd80      	pop	{r7, pc}

08015a5a <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015a5a:	b580      	push	{r7, lr}
 8015a5c:	b08a      	sub	sp, #40	@ 0x28
 8015a5e:	af06      	add	r7, sp, #24
 8015a60:	60f8      	str	r0, [r7, #12]
 8015a62:	60b9      	str	r1, [r7, #8]
 8015a64:	607a      	str	r2, [r7, #4]
 8015a66:	70fb      	strb	r3, [r7, #3]
#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 8015a68:	78fa      	ldrb	r2, [r7, #3]
 8015a6a:	2300      	movs	r3, #0
 8015a6c:	9304      	str	r3, [sp, #16]
 8015a6e:	2300      	movs	r3, #0
 8015a70:	9303      	str	r3, [sp, #12]
 8015a72:	6a3b      	ldr	r3, [r7, #32]
 8015a74:	9302      	str	r3, [sp, #8]
 8015a76:	7f3b      	ldrb	r3, [r7, #28]
 8015a78:	9301      	str	r3, [sp, #4]
 8015a7a:	7e3b      	ldrb	r3, [r7, #24]
 8015a7c:	9300      	str	r3, [sp, #0]
 8015a7e:	4613      	mov	r3, r2
 8015a80:	687a      	ldr	r2, [r7, #4]
 8015a82:	68b9      	ldr	r1, [r7, #8]
 8015a84:	68f8      	ldr	r0, [r7, #12]
 8015a86:	f000 f805 	bl	8015a94 <ip4_output_if_opt_src>
 8015a8a:	4603      	mov	r3, r0
}
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	3710      	adds	r7, #16
 8015a90:	46bd      	mov	sp, r7
 8015a92:	bd80      	pop	{r7, pc}

08015a94 <ip4_output_if_opt_src>:
 */
err_t
ip4_output_if_opt_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                      u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                      u16_t optlen)
{
 8015a94:	b580      	push	{r7, lr}
 8015a96:	b088      	sub	sp, #32
 8015a98:	af00      	add	r7, sp, #0
 8015a9a:	60f8      	str	r0, [r7, #12]
 8015a9c:	60b9      	str	r1, [r7, #8]
 8015a9e:	607a      	str	r2, [r7, #4]
 8015aa0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015aa2:	68fb      	ldr	r3, [r7, #12]
 8015aa4:	7b9b      	ldrb	r3, [r3, #14]
 8015aa6:	2b01      	cmp	r3, #1
 8015aa8:	d006      	beq.n	8015ab8 <ip4_output_if_opt_src+0x24>
 8015aaa:	4b67      	ldr	r3, [pc, #412]	@ (8015c48 <ip4_output_if_opt_src+0x1b4>)
 8015aac:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8015ab0:	4966      	ldr	r1, [pc, #408]	@ (8015c4c <ip4_output_if_opt_src+0x1b8>)
 8015ab2:	4867      	ldr	r0, [pc, #412]	@ (8015c50 <ip4_output_if_opt_src+0x1bc>)
 8015ab4:	f001 fad0 	bl	8017058 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	f000 8097 	beq.w	8015bee <ip4_output_if_opt_src+0x15a>
    u16_t ip_hlen = IP_HLEN;
 8015ac0:	2314      	movs	r3, #20
 8015ac2:	83fb      	strh	r3, [r7, #30]
#if IP_OPTIONS_SEND
    u16_t optlen_aligned = 0;
 8015ac4:	2300      	movs	r3, #0
 8015ac6:	82fb      	strh	r3, [r7, #22]
    if (optlen != 0) {
 8015ac8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d030      	beq.n	8015b30 <ip4_output_if_opt_src+0x9c>
#if CHECKSUM_GEN_IP_INLINE
      int i;
#endif /* CHECKSUM_GEN_IP_INLINE */
      if (optlen > (IP_HLEN_MAX - IP_HLEN)) {
 8015ace:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8015ad0:	2b28      	cmp	r3, #40	@ 0x28
 8015ad2:	d902      	bls.n	8015ada <ip4_output_if_opt_src+0x46>
        /* optlen too long */
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: optlen too long\n"));
        IP_STATS_INC(ip.err);
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_VAL;
 8015ad4:	f06f 0305 	mvn.w	r3, #5
 8015ad8:	e0b1      	b.n	8015c3e <ip4_output_if_opt_src+0x1aa>
      }
      /* round up to a multiple of 4 */
      optlen_aligned = (u16_t)((optlen + 3) & ~3);
 8015ada:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8015adc:	3303      	adds	r3, #3
 8015ade:	b29b      	uxth	r3, r3
 8015ae0:	f023 0303 	bic.w	r3, r3, #3
 8015ae4:	82fb      	strh	r3, [r7, #22]
      ip_hlen = (u16_t)(ip_hlen + optlen_aligned);
 8015ae6:	8bfa      	ldrh	r2, [r7, #30]
 8015ae8:	8afb      	ldrh	r3, [r7, #22]
 8015aea:	4413      	add	r3, r2
 8015aec:	83fb      	strh	r3, [r7, #30]
      /* First write in the IP options */
      if (pbuf_add_header(p, optlen_aligned)) {
 8015aee:	8afb      	ldrh	r3, [r7, #22]
 8015af0:	4619      	mov	r1, r3
 8015af2:	68f8      	ldr	r0, [r7, #12]
 8015af4:	f7f5 ff30 	bl	800b958 <pbuf_add_header>
 8015af8:	4603      	mov	r3, r0
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d002      	beq.n	8015b04 <ip4_output_if_opt_src+0x70>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: not enough room for IP options in pbuf\n"));
        IP_STATS_INC(ip.err);
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_BUF;
 8015afe:	f06f 0301 	mvn.w	r3, #1
 8015b02:	e09c      	b.n	8015c3e <ip4_output_if_opt_src+0x1aa>
      }
      MEMCPY(p->payload, ip_options, optlen);
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	685b      	ldr	r3, [r3, #4]
 8015b08:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8015b0a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8015b0c:	4618      	mov	r0, r3
 8015b0e:	f001 fd00 	bl	8017512 <memcpy>
      if (optlen < optlen_aligned) {
 8015b12:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8015b14:	8afb      	ldrh	r3, [r7, #22]
 8015b16:	429a      	cmp	r2, r3
 8015b18:	d20a      	bcs.n	8015b30 <ip4_output_if_opt_src+0x9c>
        /* zero the remaining bytes */
        memset(((char *)p->payload) + optlen, 0, (size_t)(optlen_aligned - optlen));
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	685a      	ldr	r2, [r3, #4]
 8015b1e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8015b20:	18d0      	adds	r0, r2, r3
 8015b22:	8afa      	ldrh	r2, [r7, #22]
 8015b24:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8015b26:	1ad3      	subs	r3, r2, r3
 8015b28:	461a      	mov	r2, r3
 8015b2a:	2100      	movs	r1, #0
 8015b2c:	f001 fc26 	bl	801737c <memset>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015b30:	2114      	movs	r1, #20
 8015b32:	68f8      	ldr	r0, [r7, #12]
 8015b34:	f7f5 ff10 	bl	800b958 <pbuf_add_header>
 8015b38:	4603      	mov	r3, r0
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d002      	beq.n	8015b44 <ip4_output_if_opt_src+0xb0>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015b3e:	f06f 0301 	mvn.w	r3, #1
 8015b42:	e07c      	b.n	8015c3e <ip4_output_if_opt_src+0x1aa>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	685b      	ldr	r3, [r3, #4]
 8015b48:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015b4a:	68fb      	ldr	r3, [r7, #12]
 8015b4c:	895b      	ldrh	r3, [r3, #10]
 8015b4e:	2b13      	cmp	r3, #19
 8015b50:	d806      	bhi.n	8015b60 <ip4_output_if_opt_src+0xcc>
 8015b52:	4b3d      	ldr	r3, [pc, #244]	@ (8015c48 <ip4_output_if_opt_src+0x1b4>)
 8015b54:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8015b58:	493e      	ldr	r1, [pc, #248]	@ (8015c54 <ip4_output_if_opt_src+0x1c0>)
 8015b5a:	483d      	ldr	r0, [pc, #244]	@ (8015c50 <ip4_output_if_opt_src+0x1bc>)
 8015b5c:	f001 fa7c 	bl	8017058 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015b60:	69bb      	ldr	r3, [r7, #24]
 8015b62:	78fa      	ldrb	r2, [r7, #3]
 8015b64:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015b66:	69bb      	ldr	r3, [r7, #24]
 8015b68:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8015b6c:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	681a      	ldr	r2, [r3, #0]
 8015b72:	69bb      	ldr	r3, [r7, #24]
 8015b74:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015b76:	8bfb      	ldrh	r3, [r7, #30]
 8015b78:	089b      	lsrs	r3, r3, #2
 8015b7a:	b29b      	uxth	r3, r3
 8015b7c:	b2db      	uxtb	r3, r3
 8015b7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015b82:	b2da      	uxtb	r2, r3
 8015b84:	69bb      	ldr	r3, [r7, #24]
 8015b86:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015b88:	69bb      	ldr	r3, [r7, #24]
 8015b8a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8015b8e:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	891b      	ldrh	r3, [r3, #8]
 8015b94:	4618      	mov	r0, r3
 8015b96:	f7f4 fa21 	bl	8009fdc <lwip_htons>
 8015b9a:	4603      	mov	r3, r0
 8015b9c:	461a      	mov	r2, r3
 8015b9e:	69bb      	ldr	r3, [r7, #24]
 8015ba0:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015ba2:	69bb      	ldr	r3, [r7, #24]
 8015ba4:	2200      	movs	r2, #0
 8015ba6:	719a      	strb	r2, [r3, #6]
 8015ba8:	2200      	movs	r2, #0
 8015baa:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015bac:	4b2a      	ldr	r3, [pc, #168]	@ (8015c58 <ip4_output_if_opt_src+0x1c4>)
 8015bae:	881b      	ldrh	r3, [r3, #0]
 8015bb0:	4618      	mov	r0, r3
 8015bb2:	f7f4 fa13 	bl	8009fdc <lwip_htons>
 8015bb6:	4603      	mov	r3, r0
 8015bb8:	461a      	mov	r2, r3
 8015bba:	69bb      	ldr	r3, [r7, #24]
 8015bbc:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015bbe:	4b26      	ldr	r3, [pc, #152]	@ (8015c58 <ip4_output_if_opt_src+0x1c4>)
 8015bc0:	881b      	ldrh	r3, [r3, #0]
 8015bc2:	3301      	adds	r3, #1
 8015bc4:	b29a      	uxth	r2, r3
 8015bc6:	4b24      	ldr	r3, [pc, #144]	@ (8015c58 <ip4_output_if_opt_src+0x1c4>)
 8015bc8:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015bca:	68bb      	ldr	r3, [r7, #8]
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d104      	bne.n	8015bda <ip4_output_if_opt_src+0x146>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015bd0:	4b22      	ldr	r3, [pc, #136]	@ (8015c5c <ip4_output_if_opt_src+0x1c8>)
 8015bd2:	681a      	ldr	r2, [r3, #0]
 8015bd4:	69bb      	ldr	r3, [r7, #24]
 8015bd6:	60da      	str	r2, [r3, #12]
 8015bd8:	e003      	b.n	8015be2 <ip4_output_if_opt_src+0x14e>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015bda:	68bb      	ldr	r3, [r7, #8]
 8015bdc:	681a      	ldr	r2, [r3, #0]
 8015bde:	69bb      	ldr	r3, [r7, #24]
 8015be0:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015be2:	69bb      	ldr	r3, [r7, #24]
 8015be4:	2200      	movs	r2, #0
 8015be6:	729a      	strb	r2, [r3, #10]
 8015be8:	2200      	movs	r2, #0
 8015bea:	72da      	strb	r2, [r3, #11]
 8015bec:	e00f      	b.n	8015c0e <ip4_output_if_opt_src+0x17a>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015bee:	68fb      	ldr	r3, [r7, #12]
 8015bf0:	895b      	ldrh	r3, [r3, #10]
 8015bf2:	2b13      	cmp	r3, #19
 8015bf4:	d802      	bhi.n	8015bfc <ip4_output_if_opt_src+0x168>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015bf6:	f06f 0301 	mvn.w	r3, #1
 8015bfa:	e020      	b.n	8015c3e <ip4_output_if_opt_src+0x1aa>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	685b      	ldr	r3, [r3, #4]
 8015c00:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015c02:	69bb      	ldr	r3, [r7, #24]
 8015c04:	691b      	ldr	r3, [r3, #16]
 8015c06:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 8015c08:	f107 0310 	add.w	r3, r7, #16
 8015c0c:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c10:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d00c      	beq.n	8015c30 <ip4_output_if_opt_src+0x19c>
 8015c16:	68fb      	ldr	r3, [r7, #12]
 8015c18:	891a      	ldrh	r2, [r3, #8]
 8015c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c1c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8015c1e:	429a      	cmp	r2, r3
 8015c20:	d906      	bls.n	8015c30 <ip4_output_if_opt_src+0x19c>
    return ip4_frag(p, netif, dest);
 8015c22:	687a      	ldr	r2, [r7, #4]
 8015c24:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015c26:	68f8      	ldr	r0, [r7, #12]
 8015c28:	f000 fde4 	bl	80167f4 <ip4_frag>
 8015c2c:	4603      	mov	r3, r0
 8015c2e:	e006      	b.n	8015c3e <ip4_output_if_opt_src+0x1aa>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c32:	695b      	ldr	r3, [r3, #20]
 8015c34:	687a      	ldr	r2, [r7, #4]
 8015c36:	68f9      	ldr	r1, [r7, #12]
 8015c38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015c3a:	4798      	blx	r3
 8015c3c:	4603      	mov	r3, r0
}
 8015c3e:	4618      	mov	r0, r3
 8015c40:	3720      	adds	r7, #32
 8015c42:	46bd      	mov	sp, r7
 8015c44:	bd80      	pop	{r7, pc}
 8015c46:	bf00      	nop
 8015c48:	0801b41c 	.word	0x0801b41c
 8015c4c:	0801b450 	.word	0x0801b450
 8015c50:	0801b45c 	.word	0x0801b45c
 8015c54:	0801b484 	.word	0x0801b484
 8015c58:	2000cc50 	.word	0x2000cc50
 8015c5c:	0801b8d4 	.word	0x0801b8d4

08015c60 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015c60:	b480      	push	{r7}
 8015c62:	b085      	sub	sp, #20
 8015c64:	af00      	add	r7, sp, #0
 8015c66:	6078      	str	r0, [r7, #4]
 8015c68:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c74:	d002      	beq.n	8015c7c <ip4_addr_isbroadcast_u32+0x1c>
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d101      	bne.n	8015c80 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015c7c:	2301      	movs	r3, #1
 8015c7e:	e02a      	b.n	8015cd6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015c80:	683b      	ldr	r3, [r7, #0]
 8015c82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015c86:	f003 0302 	and.w	r3, r3, #2
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d101      	bne.n	8015c92 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015c8e:	2300      	movs	r3, #0
 8015c90:	e021      	b.n	8015cd6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015c92:	683b      	ldr	r3, [r7, #0]
 8015c94:	3304      	adds	r3, #4
 8015c96:	681b      	ldr	r3, [r3, #0]
 8015c98:	687a      	ldr	r2, [r7, #4]
 8015c9a:	429a      	cmp	r2, r3
 8015c9c:	d101      	bne.n	8015ca2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015c9e:	2300      	movs	r3, #0
 8015ca0:	e019      	b.n	8015cd6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015ca2:	68fa      	ldr	r2, [r7, #12]
 8015ca4:	683b      	ldr	r3, [r7, #0]
 8015ca6:	3304      	adds	r3, #4
 8015ca8:	681b      	ldr	r3, [r3, #0]
 8015caa:	405a      	eors	r2, r3
 8015cac:	683b      	ldr	r3, [r7, #0]
 8015cae:	3308      	adds	r3, #8
 8015cb0:	681b      	ldr	r3, [r3, #0]
 8015cb2:	4013      	ands	r3, r2
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d10d      	bne.n	8015cd4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015cb8:	683b      	ldr	r3, [r7, #0]
 8015cba:	3308      	adds	r3, #8
 8015cbc:	681b      	ldr	r3, [r3, #0]
 8015cbe:	43da      	mvns	r2, r3
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015cc4:	683b      	ldr	r3, [r7, #0]
 8015cc6:	3308      	adds	r3, #8
 8015cc8:	681b      	ldr	r3, [r3, #0]
 8015cca:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015ccc:	429a      	cmp	r2, r3
 8015cce:	d101      	bne.n	8015cd4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015cd0:	2301      	movs	r3, #1
 8015cd2:	e000      	b.n	8015cd6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015cd4:	2300      	movs	r3, #0
  }
}
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	3714      	adds	r7, #20
 8015cda:	46bd      	mov	sp, r7
 8015cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ce0:	4770      	bx	lr
	...

08015ce4 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8015ce4:	b580      	push	{r7, lr}
 8015ce6:	b082      	sub	sp, #8
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8015cec:	2210      	movs	r2, #16
 8015cee:	4904      	ldr	r1, [pc, #16]	@ (8015d00 <ip4addr_ntoa+0x1c>)
 8015cf0:	6878      	ldr	r0, [r7, #4]
 8015cf2:	f000 f807 	bl	8015d04 <ip4addr_ntoa_r>
 8015cf6:	4603      	mov	r3, r0
}
 8015cf8:	4618      	mov	r0, r3
 8015cfa:	3708      	adds	r7, #8
 8015cfc:	46bd      	mov	sp, r7
 8015cfe:	bd80      	pop	{r7, pc}
 8015d00:	2000cc58 	.word	0x2000cc58

08015d04 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8015d04:	b480      	push	{r7}
 8015d06:	b08d      	sub	sp, #52	@ 0x34
 8015d08:	af00      	add	r7, sp, #0
 8015d0a:	60f8      	str	r0, [r7, #12]
 8015d0c:	60b9      	str	r1, [r7, #8]
 8015d0e:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8015d10:	2300      	movs	r3, #0
 8015d12:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	681b      	ldr	r3, [r3, #0]
 8015d18:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8015d1a:	68bb      	ldr	r3, [r7, #8]
 8015d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 8015d1e:	f107 0318 	add.w	r3, r7, #24
 8015d22:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8015d24:	2300      	movs	r3, #0
 8015d26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015d2a:	e058      	b.n	8015dde <ip4addr_ntoa_r+0xda>
    i = 0;
 8015d2c:	2300      	movs	r3, #0
 8015d2e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 8015d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d34:	781a      	ldrb	r2, [r3, #0]
 8015d36:	4b32      	ldr	r3, [pc, #200]	@ (8015e00 <ip4addr_ntoa_r+0xfc>)
 8015d38:	fba3 1302 	umull	r1, r3, r3, r2
 8015d3c:	08d9      	lsrs	r1, r3, #3
 8015d3e:	460b      	mov	r3, r1
 8015d40:	009b      	lsls	r3, r3, #2
 8015d42:	440b      	add	r3, r1
 8015d44:	005b      	lsls	r3, r3, #1
 8015d46:	1ad3      	subs	r3, r2, r3
 8015d48:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8015d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d4c:	781b      	ldrb	r3, [r3, #0]
 8015d4e:	4a2c      	ldr	r2, [pc, #176]	@ (8015e00 <ip4addr_ntoa_r+0xfc>)
 8015d50:	fba2 2303 	umull	r2, r3, r2, r3
 8015d54:	08db      	lsrs	r3, r3, #3
 8015d56:	b2da      	uxtb	r2, r3
 8015d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d5a:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8015d5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015d60:	1c5a      	adds	r2, r3, #1
 8015d62:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8015d66:	4619      	mov	r1, r3
 8015d68:	7ffb      	ldrb	r3, [r7, #31]
 8015d6a:	3330      	adds	r3, #48	@ 0x30
 8015d6c:	b2da      	uxtb	r2, r3
 8015d6e:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 8015d72:	443b      	add	r3, r7
 8015d74:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8015d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d7a:	781b      	ldrb	r3, [r3, #0]
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d1d8      	bne.n	8015d32 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8015d80:	e011      	b.n	8015da6 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8015d82:	6a3b      	ldr	r3, [r7, #32]
 8015d84:	1c5a      	adds	r2, r3, #1
 8015d86:	623a      	str	r2, [r7, #32]
 8015d88:	687a      	ldr	r2, [r7, #4]
 8015d8a:	429a      	cmp	r2, r3
 8015d8c:	dc01      	bgt.n	8015d92 <ip4addr_ntoa_r+0x8e>
        return NULL;
 8015d8e:	2300      	movs	r3, #0
 8015d90:	e030      	b.n	8015df4 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8015d92:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8015d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d98:	1c59      	adds	r1, r3, #1
 8015d9a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8015d9c:	3230      	adds	r2, #48	@ 0x30
 8015d9e:	443a      	add	r2, r7
 8015da0:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8015da4:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8015da6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015daa:	1e5a      	subs	r2, r3, #1
 8015dac:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d1e6      	bne.n	8015d82 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8015db4:	6a3b      	ldr	r3, [r7, #32]
 8015db6:	1c5a      	adds	r2, r3, #1
 8015db8:	623a      	str	r2, [r7, #32]
 8015dba:	687a      	ldr	r2, [r7, #4]
 8015dbc:	429a      	cmp	r2, r3
 8015dbe:	dc01      	bgt.n	8015dc4 <ip4addr_ntoa_r+0xc0>
      return NULL;
 8015dc0:	2300      	movs	r3, #0
 8015dc2:	e017      	b.n	8015df4 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8015dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dc6:	1c5a      	adds	r2, r3, #1
 8015dc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8015dca:	222e      	movs	r2, #46	@ 0x2e
 8015dcc:	701a      	strb	r2, [r3, #0]
    ap++;
 8015dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015dd0:	3301      	adds	r3, #1
 8015dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8015dd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015dd8:	3301      	adds	r3, #1
 8015dda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015dde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015de2:	2b03      	cmp	r3, #3
 8015de4:	d9a2      	bls.n	8015d2c <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8015de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015de8:	3b01      	subs	r3, #1
 8015dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dee:	2200      	movs	r2, #0
 8015df0:	701a      	strb	r2, [r3, #0]
  return buf;
 8015df2:	68bb      	ldr	r3, [r7, #8]
}
 8015df4:	4618      	mov	r0, r3
 8015df6:	3734      	adds	r7, #52	@ 0x34
 8015df8:	46bd      	mov	sp, r7
 8015dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dfe:	4770      	bx	lr
 8015e00:	cccccccd 	.word	0xcccccccd

08015e04 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015e04:	b580      	push	{r7, lr}
 8015e06:	b084      	sub	sp, #16
 8015e08:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015e0a:	2300      	movs	r3, #0
 8015e0c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015e0e:	4b12      	ldr	r3, [pc, #72]	@ (8015e58 <ip_reass_tmr+0x54>)
 8015e10:	681b      	ldr	r3, [r3, #0]
 8015e12:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015e14:	e018      	b.n	8015e48 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015e16:	68fb      	ldr	r3, [r7, #12]
 8015e18:	7fdb      	ldrb	r3, [r3, #31]
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d00b      	beq.n	8015e36 <ip_reass_tmr+0x32>
      r->timer--;
 8015e1e:	68fb      	ldr	r3, [r7, #12]
 8015e20:	7fdb      	ldrb	r3, [r3, #31]
 8015e22:	3b01      	subs	r3, #1
 8015e24:	b2da      	uxtb	r2, r3
 8015e26:	68fb      	ldr	r3, [r7, #12]
 8015e28:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015e2a:	68fb      	ldr	r3, [r7, #12]
 8015e2c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015e2e:	68fb      	ldr	r3, [r7, #12]
 8015e30:	681b      	ldr	r3, [r3, #0]
 8015e32:	60fb      	str	r3, [r7, #12]
 8015e34:	e008      	b.n	8015e48 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015e36:	68fb      	ldr	r3, [r7, #12]
 8015e38:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015e40:	68b9      	ldr	r1, [r7, #8]
 8015e42:	6878      	ldr	r0, [r7, #4]
 8015e44:	f000 f80a 	bl	8015e5c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015e48:	68fb      	ldr	r3, [r7, #12]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d1e3      	bne.n	8015e16 <ip_reass_tmr+0x12>
    }
  }
}
 8015e4e:	bf00      	nop
 8015e50:	bf00      	nop
 8015e52:	3710      	adds	r7, #16
 8015e54:	46bd      	mov	sp, r7
 8015e56:	bd80      	pop	{r7, pc}
 8015e58:	2000cc68 	.word	0x2000cc68

08015e5c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015e5c:	b580      	push	{r7, lr}
 8015e5e:	b088      	sub	sp, #32
 8015e60:	af00      	add	r7, sp, #0
 8015e62:	6078      	str	r0, [r7, #4]
 8015e64:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015e66:	2300      	movs	r3, #0
 8015e68:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015e6a:	683a      	ldr	r2, [r7, #0]
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	429a      	cmp	r2, r3
 8015e70:	d105      	bne.n	8015e7e <ip_reass_free_complete_datagram+0x22>
 8015e72:	4b45      	ldr	r3, [pc, #276]	@ (8015f88 <ip_reass_free_complete_datagram+0x12c>)
 8015e74:	22ab      	movs	r2, #171	@ 0xab
 8015e76:	4945      	ldr	r1, [pc, #276]	@ (8015f8c <ip_reass_free_complete_datagram+0x130>)
 8015e78:	4845      	ldr	r0, [pc, #276]	@ (8015f90 <ip_reass_free_complete_datagram+0x134>)
 8015e7a:	f001 f8ed 	bl	8017058 <iprintf>
  if (prev != NULL) {
 8015e7e:	683b      	ldr	r3, [r7, #0]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d00a      	beq.n	8015e9a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015e84:	683b      	ldr	r3, [r7, #0]
 8015e86:	681b      	ldr	r3, [r3, #0]
 8015e88:	687a      	ldr	r2, [r7, #4]
 8015e8a:	429a      	cmp	r2, r3
 8015e8c:	d005      	beq.n	8015e9a <ip_reass_free_complete_datagram+0x3e>
 8015e8e:	4b3e      	ldr	r3, [pc, #248]	@ (8015f88 <ip_reass_free_complete_datagram+0x12c>)
 8015e90:	22ad      	movs	r2, #173	@ 0xad
 8015e92:	4940      	ldr	r1, [pc, #256]	@ (8015f94 <ip_reass_free_complete_datagram+0x138>)
 8015e94:	483e      	ldr	r0, [pc, #248]	@ (8015f90 <ip_reass_free_complete_datagram+0x134>)
 8015e96:	f001 f8df 	bl	8017058 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	685b      	ldr	r3, [r3, #4]
 8015e9e:	685b      	ldr	r3, [r3, #4]
 8015ea0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015ea2:	697b      	ldr	r3, [r7, #20]
 8015ea4:	889b      	ldrh	r3, [r3, #4]
 8015ea6:	b29b      	uxth	r3, r3
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d12a      	bne.n	8015f02 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	685b      	ldr	r3, [r3, #4]
 8015eb0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015eb2:	697b      	ldr	r3, [r7, #20]
 8015eb4:	681a      	ldr	r2, [r3, #0]
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015eba:	69bb      	ldr	r3, [r7, #24]
 8015ebc:	6858      	ldr	r0, [r3, #4]
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	3308      	adds	r3, #8
 8015ec2:	2214      	movs	r2, #20
 8015ec4:	4619      	mov	r1, r3
 8015ec6:	f001 fb24 	bl	8017512 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015eca:	2101      	movs	r1, #1
 8015ecc:	69b8      	ldr	r0, [r7, #24]
 8015ece:	f7ff f833 	bl	8014f38 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015ed2:	69b8      	ldr	r0, [r7, #24]
 8015ed4:	f7f5 fe64 	bl	800bba0 <pbuf_clen>
 8015ed8:	4603      	mov	r3, r0
 8015eda:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015edc:	8bfa      	ldrh	r2, [r7, #30]
 8015ede:	8a7b      	ldrh	r3, [r7, #18]
 8015ee0:	4413      	add	r3, r2
 8015ee2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015ee6:	db05      	blt.n	8015ef4 <ip_reass_free_complete_datagram+0x98>
 8015ee8:	4b27      	ldr	r3, [pc, #156]	@ (8015f88 <ip_reass_free_complete_datagram+0x12c>)
 8015eea:	22bc      	movs	r2, #188	@ 0xbc
 8015eec:	492a      	ldr	r1, [pc, #168]	@ (8015f98 <ip_reass_free_complete_datagram+0x13c>)
 8015eee:	4828      	ldr	r0, [pc, #160]	@ (8015f90 <ip_reass_free_complete_datagram+0x134>)
 8015ef0:	f001 f8b2 	bl	8017058 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015ef4:	8bfa      	ldrh	r2, [r7, #30]
 8015ef6:	8a7b      	ldrh	r3, [r7, #18]
 8015ef8:	4413      	add	r3, r2
 8015efa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015efc:	69b8      	ldr	r0, [r7, #24]
 8015efe:	f7f5 fdc1 	bl	800ba84 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	685b      	ldr	r3, [r3, #4]
 8015f06:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015f08:	e01f      	b.n	8015f4a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015f0a:	69bb      	ldr	r3, [r7, #24]
 8015f0c:	685b      	ldr	r3, [r3, #4]
 8015f0e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015f10:	69bb      	ldr	r3, [r7, #24]
 8015f12:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015f14:	697b      	ldr	r3, [r7, #20]
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015f1a:	68f8      	ldr	r0, [r7, #12]
 8015f1c:	f7f5 fe40 	bl	800bba0 <pbuf_clen>
 8015f20:	4603      	mov	r3, r0
 8015f22:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015f24:	8bfa      	ldrh	r2, [r7, #30]
 8015f26:	8a7b      	ldrh	r3, [r7, #18]
 8015f28:	4413      	add	r3, r2
 8015f2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015f2e:	db05      	blt.n	8015f3c <ip_reass_free_complete_datagram+0xe0>
 8015f30:	4b15      	ldr	r3, [pc, #84]	@ (8015f88 <ip_reass_free_complete_datagram+0x12c>)
 8015f32:	22cc      	movs	r2, #204	@ 0xcc
 8015f34:	4918      	ldr	r1, [pc, #96]	@ (8015f98 <ip_reass_free_complete_datagram+0x13c>)
 8015f36:	4816      	ldr	r0, [pc, #88]	@ (8015f90 <ip_reass_free_complete_datagram+0x134>)
 8015f38:	f001 f88e 	bl	8017058 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015f3c:	8bfa      	ldrh	r2, [r7, #30]
 8015f3e:	8a7b      	ldrh	r3, [r7, #18]
 8015f40:	4413      	add	r3, r2
 8015f42:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015f44:	68f8      	ldr	r0, [r7, #12]
 8015f46:	f7f5 fd9d 	bl	800ba84 <pbuf_free>
  while (p != NULL) {
 8015f4a:	69bb      	ldr	r3, [r7, #24]
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d1dc      	bne.n	8015f0a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015f50:	6839      	ldr	r1, [r7, #0]
 8015f52:	6878      	ldr	r0, [r7, #4]
 8015f54:	f000 f8c2 	bl	80160dc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015f58:	4b10      	ldr	r3, [pc, #64]	@ (8015f9c <ip_reass_free_complete_datagram+0x140>)
 8015f5a:	881b      	ldrh	r3, [r3, #0]
 8015f5c:	8bfa      	ldrh	r2, [r7, #30]
 8015f5e:	429a      	cmp	r2, r3
 8015f60:	d905      	bls.n	8015f6e <ip_reass_free_complete_datagram+0x112>
 8015f62:	4b09      	ldr	r3, [pc, #36]	@ (8015f88 <ip_reass_free_complete_datagram+0x12c>)
 8015f64:	22d2      	movs	r2, #210	@ 0xd2
 8015f66:	490e      	ldr	r1, [pc, #56]	@ (8015fa0 <ip_reass_free_complete_datagram+0x144>)
 8015f68:	4809      	ldr	r0, [pc, #36]	@ (8015f90 <ip_reass_free_complete_datagram+0x134>)
 8015f6a:	f001 f875 	bl	8017058 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8015f9c <ip_reass_free_complete_datagram+0x140>)
 8015f70:	881a      	ldrh	r2, [r3, #0]
 8015f72:	8bfb      	ldrh	r3, [r7, #30]
 8015f74:	1ad3      	subs	r3, r2, r3
 8015f76:	b29a      	uxth	r2, r3
 8015f78:	4b08      	ldr	r3, [pc, #32]	@ (8015f9c <ip_reass_free_complete_datagram+0x140>)
 8015f7a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015f7c:	8bfb      	ldrh	r3, [r7, #30]
}
 8015f7e:	4618      	mov	r0, r3
 8015f80:	3720      	adds	r7, #32
 8015f82:	46bd      	mov	sp, r7
 8015f84:	bd80      	pop	{r7, pc}
 8015f86:	bf00      	nop
 8015f88:	0801b4b4 	.word	0x0801b4b4
 8015f8c:	0801b4f0 	.word	0x0801b4f0
 8015f90:	0801b4fc 	.word	0x0801b4fc
 8015f94:	0801b524 	.word	0x0801b524
 8015f98:	0801b538 	.word	0x0801b538
 8015f9c:	2000cc6c 	.word	0x2000cc6c
 8015fa0:	0801b558 	.word	0x0801b558

08015fa4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015fa4:	b580      	push	{r7, lr}
 8015fa6:	b08a      	sub	sp, #40	@ 0x28
 8015fa8:	af00      	add	r7, sp, #0
 8015faa:	6078      	str	r0, [r7, #4]
 8015fac:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015fae:	2300      	movs	r3, #0
 8015fb0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015fb2:	2300      	movs	r3, #0
 8015fb4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015fb6:	2300      	movs	r3, #0
 8015fb8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015fba:	2300      	movs	r3, #0
 8015fbc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015fbe:	2300      	movs	r3, #0
 8015fc0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015fc2:	4b28      	ldr	r3, [pc, #160]	@ (8016064 <ip_reass_remove_oldest_datagram+0xc0>)
 8015fc4:	681b      	ldr	r3, [r3, #0]
 8015fc6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8015fc8:	e030      	b.n	801602c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fcc:	695a      	ldr	r2, [r3, #20]
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	68db      	ldr	r3, [r3, #12]
 8015fd2:	429a      	cmp	r2, r3
 8015fd4:	d10c      	bne.n	8015ff0 <ip_reass_remove_oldest_datagram+0x4c>
 8015fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fd8:	699a      	ldr	r2, [r3, #24]
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	691b      	ldr	r3, [r3, #16]
 8015fde:	429a      	cmp	r2, r3
 8015fe0:	d106      	bne.n	8015ff0 <ip_reass_remove_oldest_datagram+0x4c>
 8015fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fe4:	899a      	ldrh	r2, [r3, #12]
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	889b      	ldrh	r3, [r3, #4]
 8015fea:	b29b      	uxth	r3, r3
 8015fec:	429a      	cmp	r2, r3
 8015fee:	d014      	beq.n	801601a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015ff0:	693b      	ldr	r3, [r7, #16]
 8015ff2:	3301      	adds	r3, #1
 8015ff4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015ff6:	6a3b      	ldr	r3, [r7, #32]
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d104      	bne.n	8016006 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ffe:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016000:	69fb      	ldr	r3, [r7, #28]
 8016002:	61bb      	str	r3, [r7, #24]
 8016004:	e009      	b.n	801601a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8016006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016008:	7fda      	ldrb	r2, [r3, #31]
 801600a:	6a3b      	ldr	r3, [r7, #32]
 801600c:	7fdb      	ldrb	r3, [r3, #31]
 801600e:	429a      	cmp	r2, r3
 8016010:	d803      	bhi.n	801601a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016014:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016016:	69fb      	ldr	r3, [r7, #28]
 8016018:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801601a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	2b00      	cmp	r3, #0
 8016020:	d001      	beq.n	8016026 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016024:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801602c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801602e:	2b00      	cmp	r3, #0
 8016030:	d1cb      	bne.n	8015fca <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016032:	6a3b      	ldr	r3, [r7, #32]
 8016034:	2b00      	cmp	r3, #0
 8016036:	d008      	beq.n	801604a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016038:	69b9      	ldr	r1, [r7, #24]
 801603a:	6a38      	ldr	r0, [r7, #32]
 801603c:	f7ff ff0e 	bl	8015e5c <ip_reass_free_complete_datagram>
 8016040:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016042:	697a      	ldr	r2, [r7, #20]
 8016044:	68fb      	ldr	r3, [r7, #12]
 8016046:	4413      	add	r3, r2
 8016048:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801604a:	697a      	ldr	r2, [r7, #20]
 801604c:	683b      	ldr	r3, [r7, #0]
 801604e:	429a      	cmp	r2, r3
 8016050:	da02      	bge.n	8016058 <ip_reass_remove_oldest_datagram+0xb4>
 8016052:	693b      	ldr	r3, [r7, #16]
 8016054:	2b01      	cmp	r3, #1
 8016056:	dcac      	bgt.n	8015fb2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016058:	697b      	ldr	r3, [r7, #20]
}
 801605a:	4618      	mov	r0, r3
 801605c:	3728      	adds	r7, #40	@ 0x28
 801605e:	46bd      	mov	sp, r7
 8016060:	bd80      	pop	{r7, pc}
 8016062:	bf00      	nop
 8016064:	2000cc68 	.word	0x2000cc68

08016068 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016068:	b580      	push	{r7, lr}
 801606a:	b084      	sub	sp, #16
 801606c:	af00      	add	r7, sp, #0
 801606e:	6078      	str	r0, [r7, #4]
 8016070:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016072:	2004      	movs	r0, #4
 8016074:	f7f4 fcfa 	bl	800aa6c <memp_malloc>
 8016078:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	2b00      	cmp	r3, #0
 801607e:	d110      	bne.n	80160a2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016080:	6839      	ldr	r1, [r7, #0]
 8016082:	6878      	ldr	r0, [r7, #4]
 8016084:	f7ff ff8e 	bl	8015fa4 <ip_reass_remove_oldest_datagram>
 8016088:	4602      	mov	r2, r0
 801608a:	683b      	ldr	r3, [r7, #0]
 801608c:	4293      	cmp	r3, r2
 801608e:	dc03      	bgt.n	8016098 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016090:	2004      	movs	r0, #4
 8016092:	f7f4 fceb 	bl	800aa6c <memp_malloc>
 8016096:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	2b00      	cmp	r3, #0
 801609c:	d101      	bne.n	80160a2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801609e:	2300      	movs	r3, #0
 80160a0:	e016      	b.n	80160d0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80160a2:	2220      	movs	r2, #32
 80160a4:	2100      	movs	r1, #0
 80160a6:	68f8      	ldr	r0, [r7, #12]
 80160a8:	f001 f968 	bl	801737c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80160ac:	68fb      	ldr	r3, [r7, #12]
 80160ae:	220f      	movs	r2, #15
 80160b0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80160b2:	4b09      	ldr	r3, [pc, #36]	@ (80160d8 <ip_reass_enqueue_new_datagram+0x70>)
 80160b4:	681a      	ldr	r2, [r3, #0]
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80160ba:	4a07      	ldr	r2, [pc, #28]	@ (80160d8 <ip_reass_enqueue_new_datagram+0x70>)
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80160c0:	68fb      	ldr	r3, [r7, #12]
 80160c2:	3308      	adds	r3, #8
 80160c4:	2214      	movs	r2, #20
 80160c6:	6879      	ldr	r1, [r7, #4]
 80160c8:	4618      	mov	r0, r3
 80160ca:	f001 fa22 	bl	8017512 <memcpy>
  return ipr;
 80160ce:	68fb      	ldr	r3, [r7, #12]
}
 80160d0:	4618      	mov	r0, r3
 80160d2:	3710      	adds	r7, #16
 80160d4:	46bd      	mov	sp, r7
 80160d6:	bd80      	pop	{r7, pc}
 80160d8:	2000cc68 	.word	0x2000cc68

080160dc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80160dc:	b580      	push	{r7, lr}
 80160de:	b082      	sub	sp, #8
 80160e0:	af00      	add	r7, sp, #0
 80160e2:	6078      	str	r0, [r7, #4]
 80160e4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80160e6:	4b10      	ldr	r3, [pc, #64]	@ (8016128 <ip_reass_dequeue_datagram+0x4c>)
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	687a      	ldr	r2, [r7, #4]
 80160ec:	429a      	cmp	r2, r3
 80160ee:	d104      	bne.n	80160fa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	681b      	ldr	r3, [r3, #0]
 80160f4:	4a0c      	ldr	r2, [pc, #48]	@ (8016128 <ip_reass_dequeue_datagram+0x4c>)
 80160f6:	6013      	str	r3, [r2, #0]
 80160f8:	e00d      	b.n	8016116 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80160fa:	683b      	ldr	r3, [r7, #0]
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d106      	bne.n	801610e <ip_reass_dequeue_datagram+0x32>
 8016100:	4b0a      	ldr	r3, [pc, #40]	@ (801612c <ip_reass_dequeue_datagram+0x50>)
 8016102:	f240 1245 	movw	r2, #325	@ 0x145
 8016106:	490a      	ldr	r1, [pc, #40]	@ (8016130 <ip_reass_dequeue_datagram+0x54>)
 8016108:	480a      	ldr	r0, [pc, #40]	@ (8016134 <ip_reass_dequeue_datagram+0x58>)
 801610a:	f000 ffa5 	bl	8017058 <iprintf>
    prev->next = ipr->next;
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	681a      	ldr	r2, [r3, #0]
 8016112:	683b      	ldr	r3, [r7, #0]
 8016114:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016116:	6879      	ldr	r1, [r7, #4]
 8016118:	2004      	movs	r0, #4
 801611a:	f7f4 fd1d 	bl	800ab58 <memp_free>
}
 801611e:	bf00      	nop
 8016120:	3708      	adds	r7, #8
 8016122:	46bd      	mov	sp, r7
 8016124:	bd80      	pop	{r7, pc}
 8016126:	bf00      	nop
 8016128:	2000cc68 	.word	0x2000cc68
 801612c:	0801b4b4 	.word	0x0801b4b4
 8016130:	0801b57c 	.word	0x0801b57c
 8016134:	0801b4fc 	.word	0x0801b4fc

08016138 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016138:	b580      	push	{r7, lr}
 801613a:	b08c      	sub	sp, #48	@ 0x30
 801613c:	af00      	add	r7, sp, #0
 801613e:	60f8      	str	r0, [r7, #12]
 8016140:	60b9      	str	r1, [r7, #8]
 8016142:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016144:	2300      	movs	r3, #0
 8016146:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016148:	2301      	movs	r3, #1
 801614a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801614c:	68bb      	ldr	r3, [r7, #8]
 801614e:	685b      	ldr	r3, [r3, #4]
 8016150:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016152:	69fb      	ldr	r3, [r7, #28]
 8016154:	885b      	ldrh	r3, [r3, #2]
 8016156:	b29b      	uxth	r3, r3
 8016158:	4618      	mov	r0, r3
 801615a:	f7f3 ff3f 	bl	8009fdc <lwip_htons>
 801615e:	4603      	mov	r3, r0
 8016160:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8016162:	69fb      	ldr	r3, [r7, #28]
 8016164:	781b      	ldrb	r3, [r3, #0]
 8016166:	f003 030f 	and.w	r3, r3, #15
 801616a:	b2db      	uxtb	r3, r3
 801616c:	009b      	lsls	r3, r3, #2
 801616e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016170:	7e7b      	ldrb	r3, [r7, #25]
 8016172:	b29b      	uxth	r3, r3
 8016174:	8b7a      	ldrh	r2, [r7, #26]
 8016176:	429a      	cmp	r2, r3
 8016178:	d202      	bcs.n	8016180 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801617a:	f04f 33ff 	mov.w	r3, #4294967295
 801617e:	e135      	b.n	80163ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8016180:	7e7b      	ldrb	r3, [r7, #25]
 8016182:	b29b      	uxth	r3, r3
 8016184:	8b7a      	ldrh	r2, [r7, #26]
 8016186:	1ad3      	subs	r3, r2, r3
 8016188:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801618a:	69fb      	ldr	r3, [r7, #28]
 801618c:	88db      	ldrh	r3, [r3, #6]
 801618e:	b29b      	uxth	r3, r3
 8016190:	4618      	mov	r0, r3
 8016192:	f7f3 ff23 	bl	8009fdc <lwip_htons>
 8016196:	4603      	mov	r3, r0
 8016198:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801619c:	b29b      	uxth	r3, r3
 801619e:	00db      	lsls	r3, r3, #3
 80161a0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80161a2:	68bb      	ldr	r3, [r7, #8]
 80161a4:	685b      	ldr	r3, [r3, #4]
 80161a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 80161a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161aa:	2200      	movs	r2, #0
 80161ac:	701a      	strb	r2, [r3, #0]
 80161ae:	2200      	movs	r2, #0
 80161b0:	705a      	strb	r2, [r3, #1]
 80161b2:	2200      	movs	r2, #0
 80161b4:	709a      	strb	r2, [r3, #2]
 80161b6:	2200      	movs	r2, #0
 80161b8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80161ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161bc:	8afa      	ldrh	r2, [r7, #22]
 80161be:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80161c0:	8afa      	ldrh	r2, [r7, #22]
 80161c2:	8b7b      	ldrh	r3, [r7, #26]
 80161c4:	4413      	add	r3, r2
 80161c6:	b29a      	uxth	r2, r3
 80161c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161ca:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80161cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161ce:	88db      	ldrh	r3, [r3, #6]
 80161d0:	b29b      	uxth	r3, r3
 80161d2:	8afa      	ldrh	r2, [r7, #22]
 80161d4:	429a      	cmp	r2, r3
 80161d6:	d902      	bls.n	80161de <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80161d8:	f04f 33ff 	mov.w	r3, #4294967295
 80161dc:	e106      	b.n	80163ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80161de:	68fb      	ldr	r3, [r7, #12]
 80161e0:	685b      	ldr	r3, [r3, #4]
 80161e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80161e4:	e068      	b.n	80162b8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80161e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161e8:	685b      	ldr	r3, [r3, #4]
 80161ea:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80161ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161ee:	889b      	ldrh	r3, [r3, #4]
 80161f0:	b29a      	uxth	r2, r3
 80161f2:	693b      	ldr	r3, [r7, #16]
 80161f4:	889b      	ldrh	r3, [r3, #4]
 80161f6:	b29b      	uxth	r3, r3
 80161f8:	429a      	cmp	r2, r3
 80161fa:	d235      	bcs.n	8016268 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80161fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016200:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016204:	2b00      	cmp	r3, #0
 8016206:	d020      	beq.n	801624a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801620a:	889b      	ldrh	r3, [r3, #4]
 801620c:	b29a      	uxth	r2, r3
 801620e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016210:	88db      	ldrh	r3, [r3, #6]
 8016212:	b29b      	uxth	r3, r3
 8016214:	429a      	cmp	r2, r3
 8016216:	d307      	bcc.n	8016228 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801621a:	88db      	ldrh	r3, [r3, #6]
 801621c:	b29a      	uxth	r2, r3
 801621e:	693b      	ldr	r3, [r7, #16]
 8016220:	889b      	ldrh	r3, [r3, #4]
 8016222:	b29b      	uxth	r3, r3
 8016224:	429a      	cmp	r2, r3
 8016226:	d902      	bls.n	801622e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016228:	f04f 33ff 	mov.w	r3, #4294967295
 801622c:	e0de      	b.n	80163ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801622e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016230:	68ba      	ldr	r2, [r7, #8]
 8016232:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016236:	88db      	ldrh	r3, [r3, #6]
 8016238:	b29a      	uxth	r2, r3
 801623a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801623c:	889b      	ldrh	r3, [r3, #4]
 801623e:	b29b      	uxth	r3, r3
 8016240:	429a      	cmp	r2, r3
 8016242:	d03d      	beq.n	80162c0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016244:	2300      	movs	r3, #0
 8016246:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016248:	e03a      	b.n	80162c0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801624a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801624c:	88db      	ldrh	r3, [r3, #6]
 801624e:	b29a      	uxth	r2, r3
 8016250:	693b      	ldr	r3, [r7, #16]
 8016252:	889b      	ldrh	r3, [r3, #4]
 8016254:	b29b      	uxth	r3, r3
 8016256:	429a      	cmp	r2, r3
 8016258:	d902      	bls.n	8016260 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801625a:	f04f 33ff 	mov.w	r3, #4294967295
 801625e:	e0c5      	b.n	80163ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	68ba      	ldr	r2, [r7, #8]
 8016264:	605a      	str	r2, [r3, #4]
      break;
 8016266:	e02b      	b.n	80162c0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801626a:	889b      	ldrh	r3, [r3, #4]
 801626c:	b29a      	uxth	r2, r3
 801626e:	693b      	ldr	r3, [r7, #16]
 8016270:	889b      	ldrh	r3, [r3, #4]
 8016272:	b29b      	uxth	r3, r3
 8016274:	429a      	cmp	r2, r3
 8016276:	d102      	bne.n	801627e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016278:	f04f 33ff 	mov.w	r3, #4294967295
 801627c:	e0b6      	b.n	80163ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801627e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016280:	889b      	ldrh	r3, [r3, #4]
 8016282:	b29a      	uxth	r2, r3
 8016284:	693b      	ldr	r3, [r7, #16]
 8016286:	88db      	ldrh	r3, [r3, #6]
 8016288:	b29b      	uxth	r3, r3
 801628a:	429a      	cmp	r2, r3
 801628c:	d202      	bcs.n	8016294 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801628e:	f04f 33ff 	mov.w	r3, #4294967295
 8016292:	e0ab      	b.n	80163ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016296:	2b00      	cmp	r3, #0
 8016298:	d009      	beq.n	80162ae <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801629a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801629c:	88db      	ldrh	r3, [r3, #6]
 801629e:	b29a      	uxth	r2, r3
 80162a0:	693b      	ldr	r3, [r7, #16]
 80162a2:	889b      	ldrh	r3, [r3, #4]
 80162a4:	b29b      	uxth	r3, r3
 80162a6:	429a      	cmp	r2, r3
 80162a8:	d001      	beq.n	80162ae <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80162aa:	2300      	movs	r3, #0
 80162ac:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80162ae:	693b      	ldr	r3, [r7, #16]
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 80162b4:	693b      	ldr	r3, [r7, #16]
 80162b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 80162b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d193      	bne.n	80161e6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80162be:	e000      	b.n	80162c2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80162c0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80162c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d12d      	bne.n	8016324 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80162c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d01c      	beq.n	8016308 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80162ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162d0:	88db      	ldrh	r3, [r3, #6]
 80162d2:	b29a      	uxth	r2, r3
 80162d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162d6:	889b      	ldrh	r3, [r3, #4]
 80162d8:	b29b      	uxth	r3, r3
 80162da:	429a      	cmp	r2, r3
 80162dc:	d906      	bls.n	80162ec <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80162de:	4b45      	ldr	r3, [pc, #276]	@ (80163f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80162e0:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 80162e4:	4944      	ldr	r1, [pc, #272]	@ (80163f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80162e6:	4845      	ldr	r0, [pc, #276]	@ (80163fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80162e8:	f000 feb6 	bl	8017058 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80162ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162ee:	68ba      	ldr	r2, [r7, #8]
 80162f0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80162f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162f4:	88db      	ldrh	r3, [r3, #6]
 80162f6:	b29a      	uxth	r2, r3
 80162f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162fa:	889b      	ldrh	r3, [r3, #4]
 80162fc:	b29b      	uxth	r3, r3
 80162fe:	429a      	cmp	r2, r3
 8016300:	d010      	beq.n	8016324 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016302:	2300      	movs	r3, #0
 8016304:	623b      	str	r3, [r7, #32]
 8016306:	e00d      	b.n	8016324 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016308:	68fb      	ldr	r3, [r7, #12]
 801630a:	685b      	ldr	r3, [r3, #4]
 801630c:	2b00      	cmp	r3, #0
 801630e:	d006      	beq.n	801631e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016310:	4b38      	ldr	r3, [pc, #224]	@ (80163f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016312:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8016316:	493a      	ldr	r1, [pc, #232]	@ (8016400 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016318:	4838      	ldr	r0, [pc, #224]	@ (80163fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801631a:	f000 fe9d 	bl	8017058 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801631e:	68fb      	ldr	r3, [r7, #12]
 8016320:	68ba      	ldr	r2, [r7, #8]
 8016322:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	2b00      	cmp	r3, #0
 8016328:	d105      	bne.n	8016336 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	7f9b      	ldrb	r3, [r3, #30]
 801632e:	f003 0301 	and.w	r3, r3, #1
 8016332:	2b00      	cmp	r3, #0
 8016334:	d059      	beq.n	80163ea <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016336:	6a3b      	ldr	r3, [r7, #32]
 8016338:	2b00      	cmp	r3, #0
 801633a:	d04f      	beq.n	80163dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801633c:	68fb      	ldr	r3, [r7, #12]
 801633e:	685b      	ldr	r3, [r3, #4]
 8016340:	2b00      	cmp	r3, #0
 8016342:	d006      	beq.n	8016352 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016344:	68fb      	ldr	r3, [r7, #12]
 8016346:	685b      	ldr	r3, [r3, #4]
 8016348:	685b      	ldr	r3, [r3, #4]
 801634a:	889b      	ldrh	r3, [r3, #4]
 801634c:	b29b      	uxth	r3, r3
 801634e:	2b00      	cmp	r3, #0
 8016350:	d002      	beq.n	8016358 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8016352:	2300      	movs	r3, #0
 8016354:	623b      	str	r3, [r7, #32]
 8016356:	e041      	b.n	80163dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801635a:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801635c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801635e:	681b      	ldr	r3, [r3, #0]
 8016360:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8016362:	e012      	b.n	801638a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016366:	685b      	ldr	r3, [r3, #4]
 8016368:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801636a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801636c:	88db      	ldrh	r3, [r3, #6]
 801636e:	b29a      	uxth	r2, r3
 8016370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016372:	889b      	ldrh	r3, [r3, #4]
 8016374:	b29b      	uxth	r3, r3
 8016376:	429a      	cmp	r2, r3
 8016378:	d002      	beq.n	8016380 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801637a:	2300      	movs	r3, #0
 801637c:	623b      	str	r3, [r7, #32]
            break;
 801637e:	e007      	b.n	8016390 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016382:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8016384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016386:	681b      	ldr	r3, [r3, #0]
 8016388:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801638a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801638c:	2b00      	cmp	r3, #0
 801638e:	d1e9      	bne.n	8016364 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016390:	6a3b      	ldr	r3, [r7, #32]
 8016392:	2b00      	cmp	r3, #0
 8016394:	d022      	beq.n	80163dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016396:	68fb      	ldr	r3, [r7, #12]
 8016398:	685b      	ldr	r3, [r3, #4]
 801639a:	2b00      	cmp	r3, #0
 801639c:	d106      	bne.n	80163ac <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801639e:	4b15      	ldr	r3, [pc, #84]	@ (80163f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80163a0:	f240 12df 	movw	r2, #479	@ 0x1df
 80163a4:	4917      	ldr	r1, [pc, #92]	@ (8016404 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80163a6:	4815      	ldr	r0, [pc, #84]	@ (80163fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80163a8:	f000 fe56 	bl	8017058 <iprintf>
          LWIP_ASSERT("sanity check",
 80163ac:	68fb      	ldr	r3, [r7, #12]
 80163ae:	685b      	ldr	r3, [r3, #4]
 80163b0:	685b      	ldr	r3, [r3, #4]
 80163b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80163b4:	429a      	cmp	r2, r3
 80163b6:	d106      	bne.n	80163c6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80163b8:	4b0e      	ldr	r3, [pc, #56]	@ (80163f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80163ba:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80163be:	4911      	ldr	r1, [pc, #68]	@ (8016404 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80163c0:	480e      	ldr	r0, [pc, #56]	@ (80163fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80163c2:	f000 fe49 	bl	8017058 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80163c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d006      	beq.n	80163dc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80163ce:	4b09      	ldr	r3, [pc, #36]	@ (80163f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80163d0:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80163d4:	490c      	ldr	r1, [pc, #48]	@ (8016408 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80163d6:	4809      	ldr	r0, [pc, #36]	@ (80163fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80163d8:	f000 fe3e 	bl	8017058 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80163dc:	6a3b      	ldr	r3, [r7, #32]
 80163de:	2b00      	cmp	r3, #0
 80163e0:	bf14      	ite	ne
 80163e2:	2301      	movne	r3, #1
 80163e4:	2300      	moveq	r3, #0
 80163e6:	b2db      	uxtb	r3, r3
 80163e8:	e000      	b.n	80163ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80163ea:	2300      	movs	r3, #0
}
 80163ec:	4618      	mov	r0, r3
 80163ee:	3730      	adds	r7, #48	@ 0x30
 80163f0:	46bd      	mov	sp, r7
 80163f2:	bd80      	pop	{r7, pc}
 80163f4:	0801b4b4 	.word	0x0801b4b4
 80163f8:	0801b598 	.word	0x0801b598
 80163fc:	0801b4fc 	.word	0x0801b4fc
 8016400:	0801b5b8 	.word	0x0801b5b8
 8016404:	0801b5f0 	.word	0x0801b5f0
 8016408:	0801b600 	.word	0x0801b600

0801640c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801640c:	b580      	push	{r7, lr}
 801640e:	b08e      	sub	sp, #56	@ 0x38
 8016410:	af00      	add	r7, sp, #0
 8016412:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	685b      	ldr	r3, [r3, #4]
 8016418:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801641a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801641c:	781b      	ldrb	r3, [r3, #0]
 801641e:	f003 030f 	and.w	r3, r3, #15
 8016422:	b2db      	uxtb	r3, r3
 8016424:	009b      	lsls	r3, r3, #2
 8016426:	b2db      	uxtb	r3, r3
 8016428:	2b14      	cmp	r3, #20
 801642a:	f040 8171 	bne.w	8016710 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801642e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016430:	88db      	ldrh	r3, [r3, #6]
 8016432:	b29b      	uxth	r3, r3
 8016434:	4618      	mov	r0, r3
 8016436:	f7f3 fdd1 	bl	8009fdc <lwip_htons>
 801643a:	4603      	mov	r3, r0
 801643c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016440:	b29b      	uxth	r3, r3
 8016442:	00db      	lsls	r3, r3, #3
 8016444:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016448:	885b      	ldrh	r3, [r3, #2]
 801644a:	b29b      	uxth	r3, r3
 801644c:	4618      	mov	r0, r3
 801644e:	f7f3 fdc5 	bl	8009fdc <lwip_htons>
 8016452:	4603      	mov	r3, r0
 8016454:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016458:	781b      	ldrb	r3, [r3, #0]
 801645a:	f003 030f 	and.w	r3, r3, #15
 801645e:	b2db      	uxtb	r3, r3
 8016460:	009b      	lsls	r3, r3, #2
 8016462:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8016466:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801646a:	b29b      	uxth	r3, r3
 801646c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801646e:	429a      	cmp	r2, r3
 8016470:	f0c0 8150 	bcc.w	8016714 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016474:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016478:	b29b      	uxth	r3, r3
 801647a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801647c:	1ad3      	subs	r3, r2, r3
 801647e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016480:	6878      	ldr	r0, [r7, #4]
 8016482:	f7f5 fb8d 	bl	800bba0 <pbuf_clen>
 8016486:	4603      	mov	r3, r0
 8016488:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801648a:	4b8c      	ldr	r3, [pc, #560]	@ (80166bc <ip4_reass+0x2b0>)
 801648c:	881b      	ldrh	r3, [r3, #0]
 801648e:	461a      	mov	r2, r3
 8016490:	8c3b      	ldrh	r3, [r7, #32]
 8016492:	4413      	add	r3, r2
 8016494:	2b0a      	cmp	r3, #10
 8016496:	dd10      	ble.n	80164ba <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016498:	8c3b      	ldrh	r3, [r7, #32]
 801649a:	4619      	mov	r1, r3
 801649c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801649e:	f7ff fd81 	bl	8015fa4 <ip_reass_remove_oldest_datagram>
 80164a2:	4603      	mov	r3, r0
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	f000 8137 	beq.w	8016718 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80164aa:	4b84      	ldr	r3, [pc, #528]	@ (80166bc <ip4_reass+0x2b0>)
 80164ac:	881b      	ldrh	r3, [r3, #0]
 80164ae:	461a      	mov	r2, r3
 80164b0:	8c3b      	ldrh	r3, [r7, #32]
 80164b2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80164b4:	2b0a      	cmp	r3, #10
 80164b6:	f300 812f 	bgt.w	8016718 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80164ba:	4b81      	ldr	r3, [pc, #516]	@ (80166c0 <ip4_reass+0x2b4>)
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	633b      	str	r3, [r7, #48]	@ 0x30
 80164c0:	e015      	b.n	80164ee <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80164c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164c4:	695a      	ldr	r2, [r3, #20]
 80164c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80164c8:	68db      	ldr	r3, [r3, #12]
 80164ca:	429a      	cmp	r2, r3
 80164cc:	d10c      	bne.n	80164e8 <ip4_reass+0xdc>
 80164ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164d0:	699a      	ldr	r2, [r3, #24]
 80164d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80164d4:	691b      	ldr	r3, [r3, #16]
 80164d6:	429a      	cmp	r2, r3
 80164d8:	d106      	bne.n	80164e8 <ip4_reass+0xdc>
 80164da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164dc:	899a      	ldrh	r2, [r3, #12]
 80164de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80164e0:	889b      	ldrh	r3, [r3, #4]
 80164e2:	b29b      	uxth	r3, r3
 80164e4:	429a      	cmp	r2, r3
 80164e6:	d006      	beq.n	80164f6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80164e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80164ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d1e6      	bne.n	80164c2 <ip4_reass+0xb6>
 80164f4:	e000      	b.n	80164f8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80164f6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80164f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d109      	bne.n	8016512 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80164fe:	8c3b      	ldrh	r3, [r7, #32]
 8016500:	4619      	mov	r1, r3
 8016502:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016504:	f7ff fdb0 	bl	8016068 <ip_reass_enqueue_new_datagram>
 8016508:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801650a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801650c:	2b00      	cmp	r3, #0
 801650e:	d11c      	bne.n	801654a <ip4_reass+0x13e>
      goto nullreturn;
 8016510:	e105      	b.n	801671e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016514:	88db      	ldrh	r3, [r3, #6]
 8016516:	b29b      	uxth	r3, r3
 8016518:	4618      	mov	r0, r3
 801651a:	f7f3 fd5f 	bl	8009fdc <lwip_htons>
 801651e:	4603      	mov	r3, r0
 8016520:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016524:	2b00      	cmp	r3, #0
 8016526:	d110      	bne.n	801654a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801652a:	89db      	ldrh	r3, [r3, #14]
 801652c:	4618      	mov	r0, r3
 801652e:	f7f3 fd55 	bl	8009fdc <lwip_htons>
 8016532:	4603      	mov	r3, r0
 8016534:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016538:	2b00      	cmp	r3, #0
 801653a:	d006      	beq.n	801654a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801653c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801653e:	3308      	adds	r3, #8
 8016540:	2214      	movs	r2, #20
 8016542:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016544:	4618      	mov	r0, r3
 8016546:	f000 ffe4 	bl	8017512 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801654a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801654c:	88db      	ldrh	r3, [r3, #6]
 801654e:	b29b      	uxth	r3, r3
 8016550:	f003 0320 	and.w	r3, r3, #32
 8016554:	2b00      	cmp	r3, #0
 8016556:	bf0c      	ite	eq
 8016558:	2301      	moveq	r3, #1
 801655a:	2300      	movne	r3, #0
 801655c:	b2db      	uxtb	r3, r3
 801655e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016560:	69fb      	ldr	r3, [r7, #28]
 8016562:	2b00      	cmp	r3, #0
 8016564:	d00e      	beq.n	8016584 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8016566:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8016568:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801656a:	4413      	add	r3, r2
 801656c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801656e:	8b7a      	ldrh	r2, [r7, #26]
 8016570:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8016572:	429a      	cmp	r2, r3
 8016574:	f0c0 80a0 	bcc.w	80166b8 <ip4_reass+0x2ac>
 8016578:	8b7b      	ldrh	r3, [r7, #26]
 801657a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801657e:	4293      	cmp	r3, r2
 8016580:	f200 809a 	bhi.w	80166b8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016584:	69fa      	ldr	r2, [r7, #28]
 8016586:	6879      	ldr	r1, [r7, #4]
 8016588:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801658a:	f7ff fdd5 	bl	8016138 <ip_reass_chain_frag_into_datagram_and_validate>
 801658e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016590:	697b      	ldr	r3, [r7, #20]
 8016592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016596:	f000 809b 	beq.w	80166d0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801659a:	4b48      	ldr	r3, [pc, #288]	@ (80166bc <ip4_reass+0x2b0>)
 801659c:	881a      	ldrh	r2, [r3, #0]
 801659e:	8c3b      	ldrh	r3, [r7, #32]
 80165a0:	4413      	add	r3, r2
 80165a2:	b29a      	uxth	r2, r3
 80165a4:	4b45      	ldr	r3, [pc, #276]	@ (80166bc <ip4_reass+0x2b0>)
 80165a6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80165a8:	69fb      	ldr	r3, [r7, #28]
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	d00d      	beq.n	80165ca <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80165ae:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80165b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80165b2:	4413      	add	r3, r2
 80165b4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80165b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80165b8:	8a7a      	ldrh	r2, [r7, #18]
 80165ba:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80165bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80165be:	7f9b      	ldrb	r3, [r3, #30]
 80165c0:	f043 0301 	orr.w	r3, r3, #1
 80165c4:	b2da      	uxtb	r2, r3
 80165c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80165c8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80165ca:	697b      	ldr	r3, [r7, #20]
 80165cc:	2b01      	cmp	r3, #1
 80165ce:	d171      	bne.n	80166b4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80165d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80165d2:	8b9b      	ldrh	r3, [r3, #28]
 80165d4:	3314      	adds	r3, #20
 80165d6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80165d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80165da:	685b      	ldr	r3, [r3, #4]
 80165dc:	685b      	ldr	r3, [r3, #4]
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80165e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80165e4:	685b      	ldr	r3, [r3, #4]
 80165e6:	685b      	ldr	r3, [r3, #4]
 80165e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80165ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80165ec:	3308      	adds	r3, #8
 80165ee:	2214      	movs	r2, #20
 80165f0:	4619      	mov	r1, r3
 80165f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80165f4:	f000 ff8d 	bl	8017512 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80165f8:	8a3b      	ldrh	r3, [r7, #16]
 80165fa:	4618      	mov	r0, r3
 80165fc:	f7f3 fcee 	bl	8009fdc <lwip_htons>
 8016600:	4603      	mov	r3, r0
 8016602:	461a      	mov	r2, r3
 8016604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016606:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801660a:	2200      	movs	r2, #0
 801660c:	719a      	strb	r2, [r3, #6]
 801660e:	2200      	movs	r2, #0
 8016610:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016614:	2200      	movs	r2, #0
 8016616:	729a      	strb	r2, [r3, #10]
 8016618:	2200      	movs	r2, #0
 801661a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801661c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801661e:	685b      	ldr	r3, [r3, #4]
 8016620:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016622:	e00d      	b.n	8016640 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016626:	685b      	ldr	r3, [r3, #4]
 8016628:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801662a:	2114      	movs	r1, #20
 801662c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801662e:	f7f5 f9a3 	bl	800b978 <pbuf_remove_header>
      pbuf_cat(p, r);
 8016632:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8016634:	6878      	ldr	r0, [r7, #4]
 8016636:	f7f5 faf3 	bl	800bc20 <pbuf_cat>
      r = iprh->next_pbuf;
 801663a:	68fb      	ldr	r3, [r7, #12]
 801663c:	681b      	ldr	r3, [r3, #0]
 801663e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8016640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016642:	2b00      	cmp	r3, #0
 8016644:	d1ee      	bne.n	8016624 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016646:	4b1e      	ldr	r3, [pc, #120]	@ (80166c0 <ip4_reass+0x2b4>)
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801664c:	429a      	cmp	r2, r3
 801664e:	d102      	bne.n	8016656 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016650:	2300      	movs	r3, #0
 8016652:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016654:	e010      	b.n	8016678 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016656:	4b1a      	ldr	r3, [pc, #104]	@ (80166c0 <ip4_reass+0x2b4>)
 8016658:	681b      	ldr	r3, [r3, #0]
 801665a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801665c:	e007      	b.n	801666e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801665e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016660:	681b      	ldr	r3, [r3, #0]
 8016662:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016664:	429a      	cmp	r2, r3
 8016666:	d006      	beq.n	8016676 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801666e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016670:	2b00      	cmp	r3, #0
 8016672:	d1f4      	bne.n	801665e <ip4_reass+0x252>
 8016674:	e000      	b.n	8016678 <ip4_reass+0x26c>
          break;
 8016676:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016678:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801667a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801667c:	f7ff fd2e 	bl	80160dc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016680:	6878      	ldr	r0, [r7, #4]
 8016682:	f7f5 fa8d 	bl	800bba0 <pbuf_clen>
 8016686:	4603      	mov	r3, r0
 8016688:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801668a:	4b0c      	ldr	r3, [pc, #48]	@ (80166bc <ip4_reass+0x2b0>)
 801668c:	881b      	ldrh	r3, [r3, #0]
 801668e:	8c3a      	ldrh	r2, [r7, #32]
 8016690:	429a      	cmp	r2, r3
 8016692:	d906      	bls.n	80166a2 <ip4_reass+0x296>
 8016694:	4b0b      	ldr	r3, [pc, #44]	@ (80166c4 <ip4_reass+0x2b8>)
 8016696:	f240 229b 	movw	r2, #667	@ 0x29b
 801669a:	490b      	ldr	r1, [pc, #44]	@ (80166c8 <ip4_reass+0x2bc>)
 801669c:	480b      	ldr	r0, [pc, #44]	@ (80166cc <ip4_reass+0x2c0>)
 801669e:	f000 fcdb 	bl	8017058 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80166a2:	4b06      	ldr	r3, [pc, #24]	@ (80166bc <ip4_reass+0x2b0>)
 80166a4:	881a      	ldrh	r2, [r3, #0]
 80166a6:	8c3b      	ldrh	r3, [r7, #32]
 80166a8:	1ad3      	subs	r3, r2, r3
 80166aa:	b29a      	uxth	r2, r3
 80166ac:	4b03      	ldr	r3, [pc, #12]	@ (80166bc <ip4_reass+0x2b0>)
 80166ae:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	e038      	b.n	8016726 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80166b4:	2300      	movs	r3, #0
 80166b6:	e036      	b.n	8016726 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80166b8:	bf00      	nop
 80166ba:	e00a      	b.n	80166d2 <ip4_reass+0x2c6>
 80166bc:	2000cc6c 	.word	0x2000cc6c
 80166c0:	2000cc68 	.word	0x2000cc68
 80166c4:	0801b4b4 	.word	0x0801b4b4
 80166c8:	0801b624 	.word	0x0801b624
 80166cc:	0801b4fc 	.word	0x0801b4fc
    goto nullreturn_ipr;
 80166d0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80166d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d106      	bne.n	80166e6 <ip4_reass+0x2da>
 80166d8:	4b15      	ldr	r3, [pc, #84]	@ (8016730 <ip4_reass+0x324>)
 80166da:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80166de:	4915      	ldr	r1, [pc, #84]	@ (8016734 <ip4_reass+0x328>)
 80166e0:	4815      	ldr	r0, [pc, #84]	@ (8016738 <ip4_reass+0x32c>)
 80166e2:	f000 fcb9 	bl	8017058 <iprintf>
  if (ipr->p == NULL) {
 80166e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80166e8:	685b      	ldr	r3, [r3, #4]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d116      	bne.n	801671c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80166ee:	4b13      	ldr	r3, [pc, #76]	@ (801673c <ip4_reass+0x330>)
 80166f0:	681b      	ldr	r3, [r3, #0]
 80166f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80166f4:	429a      	cmp	r2, r3
 80166f6:	d006      	beq.n	8016706 <ip4_reass+0x2fa>
 80166f8:	4b0d      	ldr	r3, [pc, #52]	@ (8016730 <ip4_reass+0x324>)
 80166fa:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80166fe:	4910      	ldr	r1, [pc, #64]	@ (8016740 <ip4_reass+0x334>)
 8016700:	480d      	ldr	r0, [pc, #52]	@ (8016738 <ip4_reass+0x32c>)
 8016702:	f000 fca9 	bl	8017058 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016706:	2100      	movs	r1, #0
 8016708:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801670a:	f7ff fce7 	bl	80160dc <ip_reass_dequeue_datagram>
 801670e:	e006      	b.n	801671e <ip4_reass+0x312>
    goto nullreturn;
 8016710:	bf00      	nop
 8016712:	e004      	b.n	801671e <ip4_reass+0x312>
    goto nullreturn;
 8016714:	bf00      	nop
 8016716:	e002      	b.n	801671e <ip4_reass+0x312>
      goto nullreturn;
 8016718:	bf00      	nop
 801671a:	e000      	b.n	801671e <ip4_reass+0x312>
  }

nullreturn:
 801671c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801671e:	6878      	ldr	r0, [r7, #4]
 8016720:	f7f5 f9b0 	bl	800ba84 <pbuf_free>
  return NULL;
 8016724:	2300      	movs	r3, #0
}
 8016726:	4618      	mov	r0, r3
 8016728:	3738      	adds	r7, #56	@ 0x38
 801672a:	46bd      	mov	sp, r7
 801672c:	bd80      	pop	{r7, pc}
 801672e:	bf00      	nop
 8016730:	0801b4b4 	.word	0x0801b4b4
 8016734:	0801b640 	.word	0x0801b640
 8016738:	0801b4fc 	.word	0x0801b4fc
 801673c:	2000cc68 	.word	0x2000cc68
 8016740:	0801b64c 	.word	0x0801b64c

08016744 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016744:	b580      	push	{r7, lr}
 8016746:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016748:	2005      	movs	r0, #5
 801674a:	f7f4 f98f 	bl	800aa6c <memp_malloc>
 801674e:	4603      	mov	r3, r0
}
 8016750:	4618      	mov	r0, r3
 8016752:	bd80      	pop	{r7, pc}

08016754 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016754:	b580      	push	{r7, lr}
 8016756:	b082      	sub	sp, #8
 8016758:	af00      	add	r7, sp, #0
 801675a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	2b00      	cmp	r3, #0
 8016760:	d106      	bne.n	8016770 <ip_frag_free_pbuf_custom_ref+0x1c>
 8016762:	4b07      	ldr	r3, [pc, #28]	@ (8016780 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016764:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8016768:	4906      	ldr	r1, [pc, #24]	@ (8016784 <ip_frag_free_pbuf_custom_ref+0x30>)
 801676a:	4807      	ldr	r0, [pc, #28]	@ (8016788 <ip_frag_free_pbuf_custom_ref+0x34>)
 801676c:	f000 fc74 	bl	8017058 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016770:	6879      	ldr	r1, [r7, #4]
 8016772:	2005      	movs	r0, #5
 8016774:	f7f4 f9f0 	bl	800ab58 <memp_free>
}
 8016778:	bf00      	nop
 801677a:	3708      	adds	r7, #8
 801677c:	46bd      	mov	sp, r7
 801677e:	bd80      	pop	{r7, pc}
 8016780:	0801b4b4 	.word	0x0801b4b4
 8016784:	0801b66c 	.word	0x0801b66c
 8016788:	0801b4fc 	.word	0x0801b4fc

0801678c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801678c:	b580      	push	{r7, lr}
 801678e:	b084      	sub	sp, #16
 8016790:	af00      	add	r7, sp, #0
 8016792:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	2b00      	cmp	r3, #0
 801679c:	d106      	bne.n	80167ac <ipfrag_free_pbuf_custom+0x20>
 801679e:	4b11      	ldr	r3, [pc, #68]	@ (80167e4 <ipfrag_free_pbuf_custom+0x58>)
 80167a0:	f240 22ce 	movw	r2, #718	@ 0x2ce
 80167a4:	4910      	ldr	r1, [pc, #64]	@ (80167e8 <ipfrag_free_pbuf_custom+0x5c>)
 80167a6:	4811      	ldr	r0, [pc, #68]	@ (80167ec <ipfrag_free_pbuf_custom+0x60>)
 80167a8:	f000 fc56 	bl	8017058 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80167ac:	68fa      	ldr	r2, [r7, #12]
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	429a      	cmp	r2, r3
 80167b2:	d006      	beq.n	80167c2 <ipfrag_free_pbuf_custom+0x36>
 80167b4:	4b0b      	ldr	r3, [pc, #44]	@ (80167e4 <ipfrag_free_pbuf_custom+0x58>)
 80167b6:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80167ba:	490d      	ldr	r1, [pc, #52]	@ (80167f0 <ipfrag_free_pbuf_custom+0x64>)
 80167bc:	480b      	ldr	r0, [pc, #44]	@ (80167ec <ipfrag_free_pbuf_custom+0x60>)
 80167be:	f000 fc4b 	bl	8017058 <iprintf>
  if (pcr->original != NULL) {
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	695b      	ldr	r3, [r3, #20]
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d004      	beq.n	80167d4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80167ca:	68fb      	ldr	r3, [r7, #12]
 80167cc:	695b      	ldr	r3, [r3, #20]
 80167ce:	4618      	mov	r0, r3
 80167d0:	f7f5 f958 	bl	800ba84 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80167d4:	68f8      	ldr	r0, [r7, #12]
 80167d6:	f7ff ffbd 	bl	8016754 <ip_frag_free_pbuf_custom_ref>
}
 80167da:	bf00      	nop
 80167dc:	3710      	adds	r7, #16
 80167de:	46bd      	mov	sp, r7
 80167e0:	bd80      	pop	{r7, pc}
 80167e2:	bf00      	nop
 80167e4:	0801b4b4 	.word	0x0801b4b4
 80167e8:	0801b678 	.word	0x0801b678
 80167ec:	0801b4fc 	.word	0x0801b4fc
 80167f0:	0801b684 	.word	0x0801b684

080167f4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80167f4:	b580      	push	{r7, lr}
 80167f6:	b094      	sub	sp, #80	@ 0x50
 80167f8:	af02      	add	r7, sp, #8
 80167fa:	60f8      	str	r0, [r7, #12]
 80167fc:	60b9      	str	r1, [r7, #8]
 80167fe:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016800:	2300      	movs	r3, #0
 8016802:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016806:	68bb      	ldr	r3, [r7, #8]
 8016808:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 801680a:	3b14      	subs	r3, #20
 801680c:	2b00      	cmp	r3, #0
 801680e:	da00      	bge.n	8016812 <ip4_frag+0x1e>
 8016810:	3307      	adds	r3, #7
 8016812:	10db      	asrs	r3, r3, #3
 8016814:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016816:	2314      	movs	r3, #20
 8016818:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801681a:	68fb      	ldr	r3, [r7, #12]
 801681c:	685b      	ldr	r3, [r3, #4]
 801681e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8016820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016822:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016826:	781b      	ldrb	r3, [r3, #0]
 8016828:	f003 030f 	and.w	r3, r3, #15
 801682c:	b2db      	uxtb	r3, r3
 801682e:	009b      	lsls	r3, r3, #2
 8016830:	b2db      	uxtb	r3, r3
 8016832:	2b14      	cmp	r3, #20
 8016834:	d002      	beq.n	801683c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016836:	f06f 0305 	mvn.w	r3, #5
 801683a:	e110      	b.n	8016a5e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801683c:	68fb      	ldr	r3, [r7, #12]
 801683e:	895b      	ldrh	r3, [r3, #10]
 8016840:	2b13      	cmp	r3, #19
 8016842:	d809      	bhi.n	8016858 <ip4_frag+0x64>
 8016844:	4b88      	ldr	r3, [pc, #544]	@ (8016a68 <ip4_frag+0x274>)
 8016846:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801684a:	4988      	ldr	r1, [pc, #544]	@ (8016a6c <ip4_frag+0x278>)
 801684c:	4888      	ldr	r0, [pc, #544]	@ (8016a70 <ip4_frag+0x27c>)
 801684e:	f000 fc03 	bl	8017058 <iprintf>
 8016852:	f06f 0305 	mvn.w	r3, #5
 8016856:	e102      	b.n	8016a5e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801685a:	88db      	ldrh	r3, [r3, #6]
 801685c:	b29b      	uxth	r3, r3
 801685e:	4618      	mov	r0, r3
 8016860:	f7f3 fbbc 	bl	8009fdc <lwip_htons>
 8016864:	4603      	mov	r3, r0
 8016866:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8016868:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801686a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801686e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8016872:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016874:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8016878:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801687a:	68fb      	ldr	r3, [r7, #12]
 801687c:	891b      	ldrh	r3, [r3, #8]
 801687e:	3b14      	subs	r3, #20
 8016880:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8016884:	e0e1      	b.n	8016a4a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8016886:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016888:	00db      	lsls	r3, r3, #3
 801688a:	b29b      	uxth	r3, r3
 801688c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016890:	4293      	cmp	r3, r2
 8016892:	bf28      	it	cs
 8016894:	4613      	movcs	r3, r2
 8016896:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016898:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801689c:	2114      	movs	r1, #20
 801689e:	200e      	movs	r0, #14
 80168a0:	f7f4 fe0c 	bl	800b4bc <pbuf_alloc>
 80168a4:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 80168a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	f000 80d5 	beq.w	8016a58 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80168ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168b0:	895b      	ldrh	r3, [r3, #10]
 80168b2:	2b13      	cmp	r3, #19
 80168b4:	d806      	bhi.n	80168c4 <ip4_frag+0xd0>
 80168b6:	4b6c      	ldr	r3, [pc, #432]	@ (8016a68 <ip4_frag+0x274>)
 80168b8:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80168bc:	496d      	ldr	r1, [pc, #436]	@ (8016a74 <ip4_frag+0x280>)
 80168be:	486c      	ldr	r0, [pc, #432]	@ (8016a70 <ip4_frag+0x27c>)
 80168c0:	f000 fbca 	bl	8017058 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80168c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168c6:	685b      	ldr	r3, [r3, #4]
 80168c8:	2214      	movs	r2, #20
 80168ca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80168cc:	4618      	mov	r0, r3
 80168ce:	f000 fe20 	bl	8017512 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80168d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168d4:	685b      	ldr	r3, [r3, #4]
 80168d6:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80168d8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80168da:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80168de:	e064      	b.n	80169aa <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	895a      	ldrh	r2, [r3, #10]
 80168e4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80168e6:	1ad3      	subs	r3, r2, r3
 80168e8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80168ea:	68fb      	ldr	r3, [r7, #12]
 80168ec:	895b      	ldrh	r3, [r3, #10]
 80168ee:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80168f0:	429a      	cmp	r2, r3
 80168f2:	d906      	bls.n	8016902 <ip4_frag+0x10e>
 80168f4:	4b5c      	ldr	r3, [pc, #368]	@ (8016a68 <ip4_frag+0x274>)
 80168f6:	f240 322d 	movw	r2, #813	@ 0x32d
 80168fa:	495f      	ldr	r1, [pc, #380]	@ (8016a78 <ip4_frag+0x284>)
 80168fc:	485c      	ldr	r0, [pc, #368]	@ (8016a70 <ip4_frag+0x27c>)
 80168fe:	f000 fbab 	bl	8017058 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016902:	8bfa      	ldrh	r2, [r7, #30]
 8016904:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016908:	4293      	cmp	r3, r2
 801690a:	bf28      	it	cs
 801690c:	4613      	movcs	r3, r2
 801690e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016912:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016916:	2b00      	cmp	r3, #0
 8016918:	d105      	bne.n	8016926 <ip4_frag+0x132>
        poff = 0;
 801691a:	2300      	movs	r3, #0
 801691c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	681b      	ldr	r3, [r3, #0]
 8016922:	60fb      	str	r3, [r7, #12]
        continue;
 8016924:	e041      	b.n	80169aa <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016926:	f7ff ff0d 	bl	8016744 <ip_frag_alloc_pbuf_custom_ref>
 801692a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801692c:	69bb      	ldr	r3, [r7, #24]
 801692e:	2b00      	cmp	r3, #0
 8016930:	d103      	bne.n	801693a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8016932:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016934:	f7f5 f8a6 	bl	800ba84 <pbuf_free>
        goto memerr;
 8016938:	e08f      	b.n	8016a5a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801693a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801693c:	68fb      	ldr	r3, [r7, #12]
 801693e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016940:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016942:	4413      	add	r3, r2
 8016944:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8016948:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801694c:	9201      	str	r2, [sp, #4]
 801694e:	9300      	str	r3, [sp, #0]
 8016950:	4603      	mov	r3, r0
 8016952:	2241      	movs	r2, #65	@ 0x41
 8016954:	2000      	movs	r0, #0
 8016956:	f7f4 fedb 	bl	800b710 <pbuf_alloced_custom>
 801695a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801695c:	697b      	ldr	r3, [r7, #20]
 801695e:	2b00      	cmp	r3, #0
 8016960:	d106      	bne.n	8016970 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8016962:	69b8      	ldr	r0, [r7, #24]
 8016964:	f7ff fef6 	bl	8016754 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016968:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801696a:	f7f5 f88b 	bl	800ba84 <pbuf_free>
        goto memerr;
 801696e:	e074      	b.n	8016a5a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016970:	68f8      	ldr	r0, [r7, #12]
 8016972:	f7f5 f92d 	bl	800bbd0 <pbuf_ref>
      pcr->original = p;
 8016976:	69bb      	ldr	r3, [r7, #24]
 8016978:	68fa      	ldr	r2, [r7, #12]
 801697a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801697c:	69bb      	ldr	r3, [r7, #24]
 801697e:	4a3f      	ldr	r2, [pc, #252]	@ (8016a7c <ip4_frag+0x288>)
 8016980:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016982:	6979      	ldr	r1, [r7, #20]
 8016984:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016986:	f7f5 f94b 	bl	800bc20 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801698a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801698e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016992:	1ad3      	subs	r3, r2, r3
 8016994:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8016998:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801699c:	2b00      	cmp	r3, #0
 801699e:	d004      	beq.n	80169aa <ip4_frag+0x1b6>
        poff = 0;
 80169a0:	2300      	movs	r3, #0
 80169a2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80169aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d196      	bne.n	80168e0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80169b2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80169b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80169b8:	4413      	add	r3, r2
 80169ba:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80169bc:	68bb      	ldr	r3, [r7, #8]
 80169be:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80169c0:	f1a3 0213 	sub.w	r2, r3, #19
 80169c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80169c8:	429a      	cmp	r2, r3
 80169ca:	bfcc      	ite	gt
 80169cc:	2301      	movgt	r3, #1
 80169ce:	2300      	movle	r3, #0
 80169d0:	b2db      	uxtb	r3, r3
 80169d2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80169d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80169d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80169dc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 80169de:	6a3b      	ldr	r3, [r7, #32]
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d002      	beq.n	80169ea <ip4_frag+0x1f6>
 80169e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169e6:	2b00      	cmp	r3, #0
 80169e8:	d003      	beq.n	80169f2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80169ea:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80169ec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80169f0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80169f2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80169f4:	4618      	mov	r0, r3
 80169f6:	f7f3 faf1 	bl	8009fdc <lwip_htons>
 80169fa:	4603      	mov	r3, r0
 80169fc:	461a      	mov	r2, r3
 80169fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a00:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016a02:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016a04:	3314      	adds	r3, #20
 8016a06:	b29b      	uxth	r3, r3
 8016a08:	4618      	mov	r0, r3
 8016a0a:	f7f3 fae7 	bl	8009fdc <lwip_htons>
 8016a0e:	4603      	mov	r3, r0
 8016a10:	461a      	mov	r2, r3
 8016a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a14:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a18:	2200      	movs	r2, #0
 8016a1a:	729a      	strb	r2, [r3, #10]
 8016a1c:	2200      	movs	r2, #0
 8016a1e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016a20:	68bb      	ldr	r3, [r7, #8]
 8016a22:	695b      	ldr	r3, [r3, #20]
 8016a24:	687a      	ldr	r2, [r7, #4]
 8016a26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016a28:	68b8      	ldr	r0, [r7, #8]
 8016a2a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016a2c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016a2e:	f7f5 f829 	bl	800ba84 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8016a32:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016a36:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016a38:	1ad3      	subs	r3, r2, r3
 8016a3a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8016a3e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8016a42:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016a44:	4413      	add	r3, r2
 8016a46:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8016a4a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	f47f af19 	bne.w	8016886 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016a54:	2300      	movs	r3, #0
 8016a56:	e002      	b.n	8016a5e <ip4_frag+0x26a>
      goto memerr;
 8016a58:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016a5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016a5e:	4618      	mov	r0, r3
 8016a60:	3748      	adds	r7, #72	@ 0x48
 8016a62:	46bd      	mov	sp, r7
 8016a64:	bd80      	pop	{r7, pc}
 8016a66:	bf00      	nop
 8016a68:	0801b4b4 	.word	0x0801b4b4
 8016a6c:	0801b690 	.word	0x0801b690
 8016a70:	0801b4fc 	.word	0x0801b4fc
 8016a74:	0801b6ac 	.word	0x0801b6ac
 8016a78:	0801b6cc 	.word	0x0801b6cc
 8016a7c:	0801678d 	.word	0x0801678d

08016a80 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016a80:	b580      	push	{r7, lr}
 8016a82:	b086      	sub	sp, #24
 8016a84:	af00      	add	r7, sp, #0
 8016a86:	6078      	str	r0, [r7, #4]
 8016a88:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016a8a:	230e      	movs	r3, #14
 8016a8c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	895b      	ldrh	r3, [r3, #10]
 8016a92:	2b0e      	cmp	r3, #14
 8016a94:	d96e      	bls.n	8016b74 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	7bdb      	ldrb	r3, [r3, #15]
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d106      	bne.n	8016aac <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016a9e:	683b      	ldr	r3, [r7, #0]
 8016aa0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8016aa4:	3301      	adds	r3, #1
 8016aa6:	b2da      	uxtb	r2, r3
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	685b      	ldr	r3, [r3, #4]
 8016ab0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016ab2:	693b      	ldr	r3, [r7, #16]
 8016ab4:	7b1a      	ldrb	r2, [r3, #12]
 8016ab6:	7b5b      	ldrb	r3, [r3, #13]
 8016ab8:	021b      	lsls	r3, r3, #8
 8016aba:	4313      	orrs	r3, r2
 8016abc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016abe:	693b      	ldr	r3, [r7, #16]
 8016ac0:	781b      	ldrb	r3, [r3, #0]
 8016ac2:	f003 0301 	and.w	r3, r3, #1
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d023      	beq.n	8016b12 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016aca:	693b      	ldr	r3, [r7, #16]
 8016acc:	781b      	ldrb	r3, [r3, #0]
 8016ace:	2b01      	cmp	r3, #1
 8016ad0:	d10f      	bne.n	8016af2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016ad2:	693b      	ldr	r3, [r7, #16]
 8016ad4:	785b      	ldrb	r3, [r3, #1]
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d11b      	bne.n	8016b12 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016ada:	693b      	ldr	r3, [r7, #16]
 8016adc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016ade:	2b5e      	cmp	r3, #94	@ 0x5e
 8016ae0:	d117      	bne.n	8016b12 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	7b5b      	ldrb	r3, [r3, #13]
 8016ae6:	f043 0310 	orr.w	r3, r3, #16
 8016aea:	b2da      	uxtb	r2, r3
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	735a      	strb	r2, [r3, #13]
 8016af0:	e00f      	b.n	8016b12 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016af2:	693b      	ldr	r3, [r7, #16]
 8016af4:	2206      	movs	r2, #6
 8016af6:	4928      	ldr	r1, [pc, #160]	@ (8016b98 <ethernet_input+0x118>)
 8016af8:	4618      	mov	r0, r3
 8016afa:	f000 fc15 	bl	8017328 <memcmp>
 8016afe:	4603      	mov	r3, r0
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	d106      	bne.n	8016b12 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	7b5b      	ldrb	r3, [r3, #13]
 8016b08:	f043 0308 	orr.w	r3, r3, #8
 8016b0c:	b2da      	uxtb	r2, r3
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016b12:	89fb      	ldrh	r3, [r7, #14]
 8016b14:	2b08      	cmp	r3, #8
 8016b16:	d003      	beq.n	8016b20 <ethernet_input+0xa0>
 8016b18:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8016b1c:	d014      	beq.n	8016b48 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016b1e:	e032      	b.n	8016b86 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016b20:	683b      	ldr	r3, [r7, #0]
 8016b22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8016b26:	f003 0308 	and.w	r3, r3, #8
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d024      	beq.n	8016b78 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016b2e:	8afb      	ldrh	r3, [r7, #22]
 8016b30:	4619      	mov	r1, r3
 8016b32:	6878      	ldr	r0, [r7, #4]
 8016b34:	f7f4 ff20 	bl	800b978 <pbuf_remove_header>
 8016b38:	4603      	mov	r3, r0
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d11e      	bne.n	8016b7c <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016b3e:	6839      	ldr	r1, [r7, #0]
 8016b40:	6878      	ldr	r0, [r7, #4]
 8016b42:	f7fe fdc5 	bl	80156d0 <ip4_input>
      break;
 8016b46:	e013      	b.n	8016b70 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016b48:	683b      	ldr	r3, [r7, #0]
 8016b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8016b4e:	f003 0308 	and.w	r3, r3, #8
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d014      	beq.n	8016b80 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016b56:	8afb      	ldrh	r3, [r7, #22]
 8016b58:	4619      	mov	r1, r3
 8016b5a:	6878      	ldr	r0, [r7, #4]
 8016b5c:	f7f4 ff0c 	bl	800b978 <pbuf_remove_header>
 8016b60:	4603      	mov	r3, r0
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d10e      	bne.n	8016b84 <ethernet_input+0x104>
        etharp_input(p, netif);
 8016b66:	6839      	ldr	r1, [r7, #0]
 8016b68:	6878      	ldr	r0, [r7, #4]
 8016b6a:	f7fd fca9 	bl	80144c0 <etharp_input>
      break;
 8016b6e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016b70:	2300      	movs	r3, #0
 8016b72:	e00c      	b.n	8016b8e <ethernet_input+0x10e>
    goto free_and_return;
 8016b74:	bf00      	nop
 8016b76:	e006      	b.n	8016b86 <ethernet_input+0x106>
        goto free_and_return;
 8016b78:	bf00      	nop
 8016b7a:	e004      	b.n	8016b86 <ethernet_input+0x106>
        goto free_and_return;
 8016b7c:	bf00      	nop
 8016b7e:	e002      	b.n	8016b86 <ethernet_input+0x106>
        goto free_and_return;
 8016b80:	bf00      	nop
 8016b82:	e000      	b.n	8016b86 <ethernet_input+0x106>
        goto free_and_return;
 8016b84:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016b86:	6878      	ldr	r0, [r7, #4]
 8016b88:	f7f4 ff7c 	bl	800ba84 <pbuf_free>
  return ERR_OK;
 8016b8c:	2300      	movs	r3, #0
}
 8016b8e:	4618      	mov	r0, r3
 8016b90:	3718      	adds	r7, #24
 8016b92:	46bd      	mov	sp, r7
 8016b94:	bd80      	pop	{r7, pc}
 8016b96:	bf00      	nop
 8016b98:	0801b8dc 	.word	0x0801b8dc

08016b9c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016b9c:	b580      	push	{r7, lr}
 8016b9e:	b086      	sub	sp, #24
 8016ba0:	af00      	add	r7, sp, #0
 8016ba2:	60f8      	str	r0, [r7, #12]
 8016ba4:	60b9      	str	r1, [r7, #8]
 8016ba6:	607a      	str	r2, [r7, #4]
 8016ba8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016baa:	8c3b      	ldrh	r3, [r7, #32]
 8016bac:	4618      	mov	r0, r3
 8016bae:	f7f3 fa15 	bl	8009fdc <lwip_htons>
 8016bb2:	4603      	mov	r3, r0
 8016bb4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016bb6:	210e      	movs	r1, #14
 8016bb8:	68b8      	ldr	r0, [r7, #8]
 8016bba:	f7f4 fecd 	bl	800b958 <pbuf_add_header>
 8016bbe:	4603      	mov	r3, r0
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d125      	bne.n	8016c10 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016bc4:	68bb      	ldr	r3, [r7, #8]
 8016bc6:	685b      	ldr	r3, [r3, #4]
 8016bc8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016bca:	693b      	ldr	r3, [r7, #16]
 8016bcc:	8afa      	ldrh	r2, [r7, #22]
 8016bce:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016bd0:	693b      	ldr	r3, [r7, #16]
 8016bd2:	2206      	movs	r2, #6
 8016bd4:	6839      	ldr	r1, [r7, #0]
 8016bd6:	4618      	mov	r0, r3
 8016bd8:	f000 fc9b 	bl	8017512 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016bdc:	693b      	ldr	r3, [r7, #16]
 8016bde:	3306      	adds	r3, #6
 8016be0:	2206      	movs	r2, #6
 8016be2:	6879      	ldr	r1, [r7, #4]
 8016be4:	4618      	mov	r0, r3
 8016be6:	f000 fc94 	bl	8017512 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016bf0:	2b06      	cmp	r3, #6
 8016bf2:	d006      	beq.n	8016c02 <ethernet_output+0x66>
 8016bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8016c20 <ethernet_output+0x84>)
 8016bf6:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8016bfa:	490a      	ldr	r1, [pc, #40]	@ (8016c24 <ethernet_output+0x88>)
 8016bfc:	480a      	ldr	r0, [pc, #40]	@ (8016c28 <ethernet_output+0x8c>)
 8016bfe:	f000 fa2b 	bl	8017058 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	699b      	ldr	r3, [r3, #24]
 8016c06:	68b9      	ldr	r1, [r7, #8]
 8016c08:	68f8      	ldr	r0, [r7, #12]
 8016c0a:	4798      	blx	r3
 8016c0c:	4603      	mov	r3, r0
 8016c0e:	e002      	b.n	8016c16 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016c10:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016c12:	f06f 0301 	mvn.w	r3, #1
}
 8016c16:	4618      	mov	r0, r3
 8016c18:	3718      	adds	r7, #24
 8016c1a:	46bd      	mov	sp, r7
 8016c1c:	bd80      	pop	{r7, pc}
 8016c1e:	bf00      	nop
 8016c20:	0801b6dc 	.word	0x0801b6dc
 8016c24:	0801b714 	.word	0x0801b714
 8016c28:	0801b748 	.word	0x0801b748

08016c2c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016c2c:	b580      	push	{r7, lr}
 8016c2e:	b086      	sub	sp, #24
 8016c30:	af00      	add	r7, sp, #0
 8016c32:	6078      	str	r0, [r7, #4]
 8016c34:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8016c36:	683b      	ldr	r3, [r7, #0]
 8016c38:	60bb      	str	r3, [r7, #8]
 8016c3a:	2304      	movs	r3, #4
 8016c3c:	60fb      	str	r3, [r7, #12]
 8016c3e:	2300      	movs	r3, #0
 8016c40:	613b      	str	r3, [r7, #16]
 8016c42:	2300      	movs	r3, #0
 8016c44:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8016c46:	f107 0308 	add.w	r3, r7, #8
 8016c4a:	2100      	movs	r1, #0
 8016c4c:	4618      	mov	r0, r3
 8016c4e:	f7f0 faa9 	bl	80071a4 <osMessageCreate>
 8016c52:	4602      	mov	r2, r0
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	d102      	bne.n	8016c66 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8016c60:	f04f 33ff 	mov.w	r3, #4294967295
 8016c64:	e000      	b.n	8016c68 <sys_mbox_new+0x3c>

  return ERR_OK;
 8016c66:	2300      	movs	r3, #0
}
 8016c68:	4618      	mov	r0, r3
 8016c6a:	3718      	adds	r7, #24
 8016c6c:	46bd      	mov	sp, r7
 8016c6e:	bd80      	pop	{r7, pc}

08016c70 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016c70:	b580      	push	{r7, lr}
 8016c72:	b084      	sub	sp, #16
 8016c74:	af00      	add	r7, sp, #0
 8016c76:	6078      	str	r0, [r7, #4]
 8016c78:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	681b      	ldr	r3, [r3, #0]
 8016c7e:	6839      	ldr	r1, [r7, #0]
 8016c80:	2200      	movs	r2, #0
 8016c82:	4618      	mov	r0, r3
 8016c84:	f7f0 fab6 	bl	80071f4 <osMessagePut>
 8016c88:	4603      	mov	r3, r0
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d102      	bne.n	8016c94 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8016c8e:	2300      	movs	r3, #0
 8016c90:	73fb      	strb	r3, [r7, #15]
 8016c92:	e001      	b.n	8016c98 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8016c94:	23ff      	movs	r3, #255	@ 0xff
 8016c96:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016c98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016c9c:	4618      	mov	r0, r3
 8016c9e:	3710      	adds	r7, #16
 8016ca0:	46bd      	mov	sp, r7
 8016ca2:	bd80      	pop	{r7, pc}

08016ca4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016ca4:	b580      	push	{r7, lr}
 8016ca6:	b08c      	sub	sp, #48	@ 0x30
 8016ca8:	af00      	add	r7, sp, #0
 8016caa:	61f8      	str	r0, [r7, #28]
 8016cac:	61b9      	str	r1, [r7, #24]
 8016cae:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8016cb0:	f7f0 f8b6 	bl	8006e20 <osKernelSysTick>
 8016cb4:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8016cb6:	697b      	ldr	r3, [r7, #20]
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d017      	beq.n	8016cec <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8016cbc:	69fb      	ldr	r3, [r7, #28]
 8016cbe:	6819      	ldr	r1, [r3, #0]
 8016cc0:	f107 0320 	add.w	r3, r7, #32
 8016cc4:	697a      	ldr	r2, [r7, #20]
 8016cc6:	4618      	mov	r0, r3
 8016cc8:	f7f0 fad4 	bl	8007274 <osMessageGet>

    if(event.status == osEventMessage)
 8016ccc:	6a3b      	ldr	r3, [r7, #32]
 8016cce:	2b10      	cmp	r3, #16
 8016cd0:	d109      	bne.n	8016ce6 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8016cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016cd4:	461a      	mov	r2, r3
 8016cd6:	69bb      	ldr	r3, [r7, #24]
 8016cd8:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8016cda:	f7f0 f8a1 	bl	8006e20 <osKernelSysTick>
 8016cde:	4602      	mov	r2, r0
 8016ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ce2:	1ad3      	subs	r3, r2, r3
 8016ce4:	e019      	b.n	8016d1a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8016cea:	e016      	b.n	8016d1a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8016cec:	69fb      	ldr	r3, [r7, #28]
 8016cee:	6819      	ldr	r1, [r3, #0]
 8016cf0:	463b      	mov	r3, r7
 8016cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8016cf6:	4618      	mov	r0, r3
 8016cf8:	f7f0 fabc 	bl	8007274 <osMessageGet>
 8016cfc:	f107 0320 	add.w	r3, r7, #32
 8016d00:	463a      	mov	r2, r7
 8016d02:	ca07      	ldmia	r2, {r0, r1, r2}
 8016d04:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8016d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d0a:	461a      	mov	r2, r3
 8016d0c:	69bb      	ldr	r3, [r7, #24]
 8016d0e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8016d10:	f7f0 f886 	bl	8006e20 <osKernelSysTick>
 8016d14:	4602      	mov	r2, r0
 8016d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d18:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8016d1a:	4618      	mov	r0, r3
 8016d1c:	3730      	adds	r7, #48	@ 0x30
 8016d1e:	46bd      	mov	sp, r7
 8016d20:	bd80      	pop	{r7, pc}

08016d22 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8016d22:	b480      	push	{r7}
 8016d24:	b083      	sub	sp, #12
 8016d26:	af00      	add	r7, sp, #0
 8016d28:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	681b      	ldr	r3, [r3, #0]
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d101      	bne.n	8016d36 <sys_mbox_valid+0x14>
    return 0;
 8016d32:	2300      	movs	r3, #0
 8016d34:	e000      	b.n	8016d38 <sys_mbox_valid+0x16>
  else
    return 1;
 8016d36:	2301      	movs	r3, #1
}
 8016d38:	4618      	mov	r0, r3
 8016d3a:	370c      	adds	r7, #12
 8016d3c:	46bd      	mov	sp, r7
 8016d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d42:	4770      	bx	lr

08016d44 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8016d44:	b580      	push	{r7, lr}
 8016d46:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8016d48:	4803      	ldr	r0, [pc, #12]	@ (8016d58 <sys_init+0x14>)
 8016d4a:	f7f0 f8d9 	bl	8006f00 <osMutexCreate>
 8016d4e:	4603      	mov	r3, r0
 8016d50:	4a02      	ldr	r2, [pc, #8]	@ (8016d5c <sys_init+0x18>)
 8016d52:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8016d54:	bf00      	nop
 8016d56:	bd80      	pop	{r7, pc}
 8016d58:	0801b8ec 	.word	0x0801b8ec
 8016d5c:	2000cc70 	.word	0x2000cc70

08016d60 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016d60:	b580      	push	{r7, lr}
 8016d62:	b084      	sub	sp, #16
 8016d64:	af00      	add	r7, sp, #0
 8016d66:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8016d68:	2300      	movs	r3, #0
 8016d6a:	60bb      	str	r3, [r7, #8]
 8016d6c:	2300      	movs	r3, #0
 8016d6e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8016d70:	f107 0308 	add.w	r3, r7, #8
 8016d74:	4618      	mov	r0, r3
 8016d76:	f7f0 f8c3 	bl	8006f00 <osMutexCreate>
 8016d7a:	4602      	mov	r2, r0
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d102      	bne.n	8016d8e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016d88:	f04f 33ff 	mov.w	r3, #4294967295
 8016d8c:	e000      	b.n	8016d90 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8016d8e:	2300      	movs	r3, #0
}
 8016d90:	4618      	mov	r0, r3
 8016d92:	3710      	adds	r7, #16
 8016d94:	46bd      	mov	sp, r7
 8016d96:	bd80      	pop	{r7, pc}

08016d98 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016d98:	b580      	push	{r7, lr}
 8016d9a:	b082      	sub	sp, #8
 8016d9c:	af00      	add	r7, sp, #0
 8016d9e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	f04f 31ff 	mov.w	r1, #4294967295
 8016da8:	4618      	mov	r0, r3
 8016daa:	f7f0 f8c1 	bl	8006f30 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8016dae:	bf00      	nop
 8016db0:	3708      	adds	r7, #8
 8016db2:	46bd      	mov	sp, r7
 8016db4:	bd80      	pop	{r7, pc}

08016db6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8016db6:	b580      	push	{r7, lr}
 8016db8:	b082      	sub	sp, #8
 8016dba:	af00      	add	r7, sp, #0
 8016dbc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	681b      	ldr	r3, [r3, #0]
 8016dc2:	4618      	mov	r0, r3
 8016dc4:	f7f0 f902 	bl	8006fcc <osMutexRelease>
}
 8016dc8:	bf00      	nop
 8016dca:	3708      	adds	r7, #8
 8016dcc:	46bd      	mov	sp, r7
 8016dce:	bd80      	pop	{r7, pc}

08016dd0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016dd0:	b580      	push	{r7, lr}
 8016dd2:	b08c      	sub	sp, #48	@ 0x30
 8016dd4:	af00      	add	r7, sp, #0
 8016dd6:	60f8      	str	r0, [r7, #12]
 8016dd8:	60b9      	str	r1, [r7, #8]
 8016dda:	607a      	str	r2, [r7, #4]
 8016ddc:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8016dde:	f107 0314 	add.w	r3, r7, #20
 8016de2:	2200      	movs	r2, #0
 8016de4:	601a      	str	r2, [r3, #0]
 8016de6:	605a      	str	r2, [r3, #4]
 8016de8:	609a      	str	r2, [r3, #8]
 8016dea:	60da      	str	r2, [r3, #12]
 8016dec:	611a      	str	r2, [r3, #16]
 8016dee:	615a      	str	r2, [r3, #20]
 8016df0:	619a      	str	r2, [r3, #24]
 8016df2:	68fb      	ldr	r3, [r7, #12]
 8016df4:	617b      	str	r3, [r7, #20]
 8016df6:	68bb      	ldr	r3, [r7, #8]
 8016df8:	61bb      	str	r3, [r7, #24]
 8016dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016dfc:	b21b      	sxth	r3, r3
 8016dfe:	83bb      	strh	r3, [r7, #28]
 8016e00:	683b      	ldr	r3, [r7, #0]
 8016e02:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 8016e04:	f107 0314 	add.w	r3, r7, #20
 8016e08:	6879      	ldr	r1, [r7, #4]
 8016e0a:	4618      	mov	r0, r3
 8016e0c:	f7f0 f818 	bl	8006e40 <osThreadCreate>
 8016e10:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8016e12:	4618      	mov	r0, r3
 8016e14:	3730      	adds	r7, #48	@ 0x30
 8016e16:	46bd      	mov	sp, r7
 8016e18:	bd80      	pop	{r7, pc}
	...

08016e1c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016e1c:	b580      	push	{r7, lr}
 8016e1e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8016e20:	4b04      	ldr	r3, [pc, #16]	@ (8016e34 <sys_arch_protect+0x18>)
 8016e22:	681b      	ldr	r3, [r3, #0]
 8016e24:	f04f 31ff 	mov.w	r1, #4294967295
 8016e28:	4618      	mov	r0, r3
 8016e2a:	f7f0 f881 	bl	8006f30 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8016e2e:	2301      	movs	r3, #1
}
 8016e30:	4618      	mov	r0, r3
 8016e32:	bd80      	pop	{r7, pc}
 8016e34:	2000cc70 	.word	0x2000cc70

08016e38 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016e38:	b580      	push	{r7, lr}
 8016e3a:	b082      	sub	sp, #8
 8016e3c:	af00      	add	r7, sp, #0
 8016e3e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016e40:	4b04      	ldr	r3, [pc, #16]	@ (8016e54 <sys_arch_unprotect+0x1c>)
 8016e42:	681b      	ldr	r3, [r3, #0]
 8016e44:	4618      	mov	r0, r3
 8016e46:	f7f0 f8c1 	bl	8006fcc <osMutexRelease>
}
 8016e4a:	bf00      	nop
 8016e4c:	3708      	adds	r7, #8
 8016e4e:	46bd      	mov	sp, r7
 8016e50:	bd80      	pop	{r7, pc}
 8016e52:	bf00      	nop
 8016e54:	2000cc70 	.word	0x2000cc70

08016e58 <rand>:
 8016e58:	4b16      	ldr	r3, [pc, #88]	@ (8016eb4 <rand+0x5c>)
 8016e5a:	b510      	push	{r4, lr}
 8016e5c:	681c      	ldr	r4, [r3, #0]
 8016e5e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016e60:	b9b3      	cbnz	r3, 8016e90 <rand+0x38>
 8016e62:	2018      	movs	r0, #24
 8016e64:	f000 fbcc 	bl	8017600 <malloc>
 8016e68:	4602      	mov	r2, r0
 8016e6a:	6320      	str	r0, [r4, #48]	@ 0x30
 8016e6c:	b920      	cbnz	r0, 8016e78 <rand+0x20>
 8016e6e:	4b12      	ldr	r3, [pc, #72]	@ (8016eb8 <rand+0x60>)
 8016e70:	4812      	ldr	r0, [pc, #72]	@ (8016ebc <rand+0x64>)
 8016e72:	2152      	movs	r1, #82	@ 0x52
 8016e74:	f000 fb5c 	bl	8017530 <__assert_func>
 8016e78:	4911      	ldr	r1, [pc, #68]	@ (8016ec0 <rand+0x68>)
 8016e7a:	4b12      	ldr	r3, [pc, #72]	@ (8016ec4 <rand+0x6c>)
 8016e7c:	e9c0 1300 	strd	r1, r3, [r0]
 8016e80:	4b11      	ldr	r3, [pc, #68]	@ (8016ec8 <rand+0x70>)
 8016e82:	6083      	str	r3, [r0, #8]
 8016e84:	230b      	movs	r3, #11
 8016e86:	8183      	strh	r3, [r0, #12]
 8016e88:	2100      	movs	r1, #0
 8016e8a:	2001      	movs	r0, #1
 8016e8c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016e90:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016e92:	480e      	ldr	r0, [pc, #56]	@ (8016ecc <rand+0x74>)
 8016e94:	690b      	ldr	r3, [r1, #16]
 8016e96:	694c      	ldr	r4, [r1, #20]
 8016e98:	4a0d      	ldr	r2, [pc, #52]	@ (8016ed0 <rand+0x78>)
 8016e9a:	4358      	muls	r0, r3
 8016e9c:	fb02 0004 	mla	r0, r2, r4, r0
 8016ea0:	fba3 3202 	umull	r3, r2, r3, r2
 8016ea4:	3301      	adds	r3, #1
 8016ea6:	eb40 0002 	adc.w	r0, r0, r2
 8016eaa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016eae:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8016eb2:	bd10      	pop	{r4, pc}
 8016eb4:	20000044 	.word	0x20000044
 8016eb8:	0801b8f4 	.word	0x0801b8f4
 8016ebc:	0801b90b 	.word	0x0801b90b
 8016ec0:	abcd330e 	.word	0xabcd330e
 8016ec4:	e66d1234 	.word	0xe66d1234
 8016ec8:	0005deec 	.word	0x0005deec
 8016ecc:	5851f42d 	.word	0x5851f42d
 8016ed0:	4c957f2d 	.word	0x4c957f2d

08016ed4 <std>:
 8016ed4:	2300      	movs	r3, #0
 8016ed6:	b510      	push	{r4, lr}
 8016ed8:	4604      	mov	r4, r0
 8016eda:	e9c0 3300 	strd	r3, r3, [r0]
 8016ede:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016ee2:	6083      	str	r3, [r0, #8]
 8016ee4:	8181      	strh	r1, [r0, #12]
 8016ee6:	6643      	str	r3, [r0, #100]	@ 0x64
 8016ee8:	81c2      	strh	r2, [r0, #14]
 8016eea:	6183      	str	r3, [r0, #24]
 8016eec:	4619      	mov	r1, r3
 8016eee:	2208      	movs	r2, #8
 8016ef0:	305c      	adds	r0, #92	@ 0x5c
 8016ef2:	f000 fa43 	bl	801737c <memset>
 8016ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8016f2c <std+0x58>)
 8016ef8:	6263      	str	r3, [r4, #36]	@ 0x24
 8016efa:	4b0d      	ldr	r3, [pc, #52]	@ (8016f30 <std+0x5c>)
 8016efc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016efe:	4b0d      	ldr	r3, [pc, #52]	@ (8016f34 <std+0x60>)
 8016f00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016f02:	4b0d      	ldr	r3, [pc, #52]	@ (8016f38 <std+0x64>)
 8016f04:	6323      	str	r3, [r4, #48]	@ 0x30
 8016f06:	4b0d      	ldr	r3, [pc, #52]	@ (8016f3c <std+0x68>)
 8016f08:	6224      	str	r4, [r4, #32]
 8016f0a:	429c      	cmp	r4, r3
 8016f0c:	d006      	beq.n	8016f1c <std+0x48>
 8016f0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016f12:	4294      	cmp	r4, r2
 8016f14:	d002      	beq.n	8016f1c <std+0x48>
 8016f16:	33d0      	adds	r3, #208	@ 0xd0
 8016f18:	429c      	cmp	r4, r3
 8016f1a:	d105      	bne.n	8016f28 <std+0x54>
 8016f1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f24:	f000 baf2 	b.w	801750c <__retarget_lock_init_recursive>
 8016f28:	bd10      	pop	{r4, pc}
 8016f2a:	bf00      	nop
 8016f2c:	08017179 	.word	0x08017179
 8016f30:	0801719b 	.word	0x0801719b
 8016f34:	080171d3 	.word	0x080171d3
 8016f38:	080171f7 	.word	0x080171f7
 8016f3c:	2000cc74 	.word	0x2000cc74

08016f40 <stdio_exit_handler>:
 8016f40:	4a02      	ldr	r2, [pc, #8]	@ (8016f4c <stdio_exit_handler+0xc>)
 8016f42:	4903      	ldr	r1, [pc, #12]	@ (8016f50 <stdio_exit_handler+0x10>)
 8016f44:	4803      	ldr	r0, [pc, #12]	@ (8016f54 <stdio_exit_handler+0x14>)
 8016f46:	f000 b869 	b.w	801701c <_fwalk_sglue>
 8016f4a:	bf00      	nop
 8016f4c:	20000038 	.word	0x20000038
 8016f50:	080180c5 	.word	0x080180c5
 8016f54:	20000048 	.word	0x20000048

08016f58 <cleanup_stdio>:
 8016f58:	6841      	ldr	r1, [r0, #4]
 8016f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8016f8c <cleanup_stdio+0x34>)
 8016f5c:	4299      	cmp	r1, r3
 8016f5e:	b510      	push	{r4, lr}
 8016f60:	4604      	mov	r4, r0
 8016f62:	d001      	beq.n	8016f68 <cleanup_stdio+0x10>
 8016f64:	f001 f8ae 	bl	80180c4 <_fflush_r>
 8016f68:	68a1      	ldr	r1, [r4, #8]
 8016f6a:	4b09      	ldr	r3, [pc, #36]	@ (8016f90 <cleanup_stdio+0x38>)
 8016f6c:	4299      	cmp	r1, r3
 8016f6e:	d002      	beq.n	8016f76 <cleanup_stdio+0x1e>
 8016f70:	4620      	mov	r0, r4
 8016f72:	f001 f8a7 	bl	80180c4 <_fflush_r>
 8016f76:	68e1      	ldr	r1, [r4, #12]
 8016f78:	4b06      	ldr	r3, [pc, #24]	@ (8016f94 <cleanup_stdio+0x3c>)
 8016f7a:	4299      	cmp	r1, r3
 8016f7c:	d004      	beq.n	8016f88 <cleanup_stdio+0x30>
 8016f7e:	4620      	mov	r0, r4
 8016f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f84:	f001 b89e 	b.w	80180c4 <_fflush_r>
 8016f88:	bd10      	pop	{r4, pc}
 8016f8a:	bf00      	nop
 8016f8c:	2000cc74 	.word	0x2000cc74
 8016f90:	2000ccdc 	.word	0x2000ccdc
 8016f94:	2000cd44 	.word	0x2000cd44

08016f98 <global_stdio_init.part.0>:
 8016f98:	b510      	push	{r4, lr}
 8016f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8016fc8 <global_stdio_init.part.0+0x30>)
 8016f9c:	4c0b      	ldr	r4, [pc, #44]	@ (8016fcc <global_stdio_init.part.0+0x34>)
 8016f9e:	4a0c      	ldr	r2, [pc, #48]	@ (8016fd0 <global_stdio_init.part.0+0x38>)
 8016fa0:	601a      	str	r2, [r3, #0]
 8016fa2:	4620      	mov	r0, r4
 8016fa4:	2200      	movs	r2, #0
 8016fa6:	2104      	movs	r1, #4
 8016fa8:	f7ff ff94 	bl	8016ed4 <std>
 8016fac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016fb0:	2201      	movs	r2, #1
 8016fb2:	2109      	movs	r1, #9
 8016fb4:	f7ff ff8e 	bl	8016ed4 <std>
 8016fb8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016fbc:	2202      	movs	r2, #2
 8016fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016fc2:	2112      	movs	r1, #18
 8016fc4:	f7ff bf86 	b.w	8016ed4 <std>
 8016fc8:	2000cdac 	.word	0x2000cdac
 8016fcc:	2000cc74 	.word	0x2000cc74
 8016fd0:	08016f41 	.word	0x08016f41

08016fd4 <__sfp_lock_acquire>:
 8016fd4:	4801      	ldr	r0, [pc, #4]	@ (8016fdc <__sfp_lock_acquire+0x8>)
 8016fd6:	f000 ba9a 	b.w	801750e <__retarget_lock_acquire_recursive>
 8016fda:	bf00      	nop
 8016fdc:	2000cdb5 	.word	0x2000cdb5

08016fe0 <__sfp_lock_release>:
 8016fe0:	4801      	ldr	r0, [pc, #4]	@ (8016fe8 <__sfp_lock_release+0x8>)
 8016fe2:	f000 ba95 	b.w	8017510 <__retarget_lock_release_recursive>
 8016fe6:	bf00      	nop
 8016fe8:	2000cdb5 	.word	0x2000cdb5

08016fec <__sinit>:
 8016fec:	b510      	push	{r4, lr}
 8016fee:	4604      	mov	r4, r0
 8016ff0:	f7ff fff0 	bl	8016fd4 <__sfp_lock_acquire>
 8016ff4:	6a23      	ldr	r3, [r4, #32]
 8016ff6:	b11b      	cbz	r3, 8017000 <__sinit+0x14>
 8016ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ffc:	f7ff bff0 	b.w	8016fe0 <__sfp_lock_release>
 8017000:	4b04      	ldr	r3, [pc, #16]	@ (8017014 <__sinit+0x28>)
 8017002:	6223      	str	r3, [r4, #32]
 8017004:	4b04      	ldr	r3, [pc, #16]	@ (8017018 <__sinit+0x2c>)
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	2b00      	cmp	r3, #0
 801700a:	d1f5      	bne.n	8016ff8 <__sinit+0xc>
 801700c:	f7ff ffc4 	bl	8016f98 <global_stdio_init.part.0>
 8017010:	e7f2      	b.n	8016ff8 <__sinit+0xc>
 8017012:	bf00      	nop
 8017014:	08016f59 	.word	0x08016f59
 8017018:	2000cdac 	.word	0x2000cdac

0801701c <_fwalk_sglue>:
 801701c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017020:	4607      	mov	r7, r0
 8017022:	4688      	mov	r8, r1
 8017024:	4614      	mov	r4, r2
 8017026:	2600      	movs	r6, #0
 8017028:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801702c:	f1b9 0901 	subs.w	r9, r9, #1
 8017030:	d505      	bpl.n	801703e <_fwalk_sglue+0x22>
 8017032:	6824      	ldr	r4, [r4, #0]
 8017034:	2c00      	cmp	r4, #0
 8017036:	d1f7      	bne.n	8017028 <_fwalk_sglue+0xc>
 8017038:	4630      	mov	r0, r6
 801703a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801703e:	89ab      	ldrh	r3, [r5, #12]
 8017040:	2b01      	cmp	r3, #1
 8017042:	d907      	bls.n	8017054 <_fwalk_sglue+0x38>
 8017044:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017048:	3301      	adds	r3, #1
 801704a:	d003      	beq.n	8017054 <_fwalk_sglue+0x38>
 801704c:	4629      	mov	r1, r5
 801704e:	4638      	mov	r0, r7
 8017050:	47c0      	blx	r8
 8017052:	4306      	orrs	r6, r0
 8017054:	3568      	adds	r5, #104	@ 0x68
 8017056:	e7e9      	b.n	801702c <_fwalk_sglue+0x10>

08017058 <iprintf>:
 8017058:	b40f      	push	{r0, r1, r2, r3}
 801705a:	b507      	push	{r0, r1, r2, lr}
 801705c:	4906      	ldr	r1, [pc, #24]	@ (8017078 <iprintf+0x20>)
 801705e:	ab04      	add	r3, sp, #16
 8017060:	6808      	ldr	r0, [r1, #0]
 8017062:	f853 2b04 	ldr.w	r2, [r3], #4
 8017066:	6881      	ldr	r1, [r0, #8]
 8017068:	9301      	str	r3, [sp, #4]
 801706a:	f000 fd01 	bl	8017a70 <_vfiprintf_r>
 801706e:	b003      	add	sp, #12
 8017070:	f85d eb04 	ldr.w	lr, [sp], #4
 8017074:	b004      	add	sp, #16
 8017076:	4770      	bx	lr
 8017078:	20000044 	.word	0x20000044

0801707c <_puts_r>:
 801707c:	6a03      	ldr	r3, [r0, #32]
 801707e:	b570      	push	{r4, r5, r6, lr}
 8017080:	6884      	ldr	r4, [r0, #8]
 8017082:	4605      	mov	r5, r0
 8017084:	460e      	mov	r6, r1
 8017086:	b90b      	cbnz	r3, 801708c <_puts_r+0x10>
 8017088:	f7ff ffb0 	bl	8016fec <__sinit>
 801708c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801708e:	07db      	lsls	r3, r3, #31
 8017090:	d405      	bmi.n	801709e <_puts_r+0x22>
 8017092:	89a3      	ldrh	r3, [r4, #12]
 8017094:	0598      	lsls	r0, r3, #22
 8017096:	d402      	bmi.n	801709e <_puts_r+0x22>
 8017098:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801709a:	f000 fa38 	bl	801750e <__retarget_lock_acquire_recursive>
 801709e:	89a3      	ldrh	r3, [r4, #12]
 80170a0:	0719      	lsls	r1, r3, #28
 80170a2:	d502      	bpl.n	80170aa <_puts_r+0x2e>
 80170a4:	6923      	ldr	r3, [r4, #16]
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d135      	bne.n	8017116 <_puts_r+0x9a>
 80170aa:	4621      	mov	r1, r4
 80170ac:	4628      	mov	r0, r5
 80170ae:	f000 f8e5 	bl	801727c <__swsetup_r>
 80170b2:	b380      	cbz	r0, 8017116 <_puts_r+0x9a>
 80170b4:	f04f 35ff 	mov.w	r5, #4294967295
 80170b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80170ba:	07da      	lsls	r2, r3, #31
 80170bc:	d405      	bmi.n	80170ca <_puts_r+0x4e>
 80170be:	89a3      	ldrh	r3, [r4, #12]
 80170c0:	059b      	lsls	r3, r3, #22
 80170c2:	d402      	bmi.n	80170ca <_puts_r+0x4e>
 80170c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80170c6:	f000 fa23 	bl	8017510 <__retarget_lock_release_recursive>
 80170ca:	4628      	mov	r0, r5
 80170cc:	bd70      	pop	{r4, r5, r6, pc}
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	da04      	bge.n	80170dc <_puts_r+0x60>
 80170d2:	69a2      	ldr	r2, [r4, #24]
 80170d4:	429a      	cmp	r2, r3
 80170d6:	dc17      	bgt.n	8017108 <_puts_r+0x8c>
 80170d8:	290a      	cmp	r1, #10
 80170da:	d015      	beq.n	8017108 <_puts_r+0x8c>
 80170dc:	6823      	ldr	r3, [r4, #0]
 80170de:	1c5a      	adds	r2, r3, #1
 80170e0:	6022      	str	r2, [r4, #0]
 80170e2:	7019      	strb	r1, [r3, #0]
 80170e4:	68a3      	ldr	r3, [r4, #8]
 80170e6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80170ea:	3b01      	subs	r3, #1
 80170ec:	60a3      	str	r3, [r4, #8]
 80170ee:	2900      	cmp	r1, #0
 80170f0:	d1ed      	bne.n	80170ce <_puts_r+0x52>
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	da11      	bge.n	801711a <_puts_r+0x9e>
 80170f6:	4622      	mov	r2, r4
 80170f8:	210a      	movs	r1, #10
 80170fa:	4628      	mov	r0, r5
 80170fc:	f000 f87f 	bl	80171fe <__swbuf_r>
 8017100:	3001      	adds	r0, #1
 8017102:	d0d7      	beq.n	80170b4 <_puts_r+0x38>
 8017104:	250a      	movs	r5, #10
 8017106:	e7d7      	b.n	80170b8 <_puts_r+0x3c>
 8017108:	4622      	mov	r2, r4
 801710a:	4628      	mov	r0, r5
 801710c:	f000 f877 	bl	80171fe <__swbuf_r>
 8017110:	3001      	adds	r0, #1
 8017112:	d1e7      	bne.n	80170e4 <_puts_r+0x68>
 8017114:	e7ce      	b.n	80170b4 <_puts_r+0x38>
 8017116:	3e01      	subs	r6, #1
 8017118:	e7e4      	b.n	80170e4 <_puts_r+0x68>
 801711a:	6823      	ldr	r3, [r4, #0]
 801711c:	1c5a      	adds	r2, r3, #1
 801711e:	6022      	str	r2, [r4, #0]
 8017120:	220a      	movs	r2, #10
 8017122:	701a      	strb	r2, [r3, #0]
 8017124:	e7ee      	b.n	8017104 <_puts_r+0x88>
	...

08017128 <puts>:
 8017128:	4b02      	ldr	r3, [pc, #8]	@ (8017134 <puts+0xc>)
 801712a:	4601      	mov	r1, r0
 801712c:	6818      	ldr	r0, [r3, #0]
 801712e:	f7ff bfa5 	b.w	801707c <_puts_r>
 8017132:	bf00      	nop
 8017134:	20000044 	.word	0x20000044

08017138 <siprintf>:
 8017138:	b40e      	push	{r1, r2, r3}
 801713a:	b500      	push	{lr}
 801713c:	b09c      	sub	sp, #112	@ 0x70
 801713e:	ab1d      	add	r3, sp, #116	@ 0x74
 8017140:	9002      	str	r0, [sp, #8]
 8017142:	9006      	str	r0, [sp, #24]
 8017144:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017148:	4809      	ldr	r0, [pc, #36]	@ (8017170 <siprintf+0x38>)
 801714a:	9107      	str	r1, [sp, #28]
 801714c:	9104      	str	r1, [sp, #16]
 801714e:	4909      	ldr	r1, [pc, #36]	@ (8017174 <siprintf+0x3c>)
 8017150:	f853 2b04 	ldr.w	r2, [r3], #4
 8017154:	9105      	str	r1, [sp, #20]
 8017156:	6800      	ldr	r0, [r0, #0]
 8017158:	9301      	str	r3, [sp, #4]
 801715a:	a902      	add	r1, sp, #8
 801715c:	f000 fb62 	bl	8017824 <_svfiprintf_r>
 8017160:	9b02      	ldr	r3, [sp, #8]
 8017162:	2200      	movs	r2, #0
 8017164:	701a      	strb	r2, [r3, #0]
 8017166:	b01c      	add	sp, #112	@ 0x70
 8017168:	f85d eb04 	ldr.w	lr, [sp], #4
 801716c:	b003      	add	sp, #12
 801716e:	4770      	bx	lr
 8017170:	20000044 	.word	0x20000044
 8017174:	ffff0208 	.word	0xffff0208

08017178 <__sread>:
 8017178:	b510      	push	{r4, lr}
 801717a:	460c      	mov	r4, r1
 801717c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017180:	f000 f97c 	bl	801747c <_read_r>
 8017184:	2800      	cmp	r0, #0
 8017186:	bfab      	itete	ge
 8017188:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801718a:	89a3      	ldrhlt	r3, [r4, #12]
 801718c:	181b      	addge	r3, r3, r0
 801718e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017192:	bfac      	ite	ge
 8017194:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017196:	81a3      	strhlt	r3, [r4, #12]
 8017198:	bd10      	pop	{r4, pc}

0801719a <__swrite>:
 801719a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801719e:	461f      	mov	r7, r3
 80171a0:	898b      	ldrh	r3, [r1, #12]
 80171a2:	05db      	lsls	r3, r3, #23
 80171a4:	4605      	mov	r5, r0
 80171a6:	460c      	mov	r4, r1
 80171a8:	4616      	mov	r6, r2
 80171aa:	d505      	bpl.n	80171b8 <__swrite+0x1e>
 80171ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80171b0:	2302      	movs	r3, #2
 80171b2:	2200      	movs	r2, #0
 80171b4:	f000 f950 	bl	8017458 <_lseek_r>
 80171b8:	89a3      	ldrh	r3, [r4, #12]
 80171ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80171be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80171c2:	81a3      	strh	r3, [r4, #12]
 80171c4:	4632      	mov	r2, r6
 80171c6:	463b      	mov	r3, r7
 80171c8:	4628      	mov	r0, r5
 80171ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80171ce:	f000 b967 	b.w	80174a0 <_write_r>

080171d2 <__sseek>:
 80171d2:	b510      	push	{r4, lr}
 80171d4:	460c      	mov	r4, r1
 80171d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80171da:	f000 f93d 	bl	8017458 <_lseek_r>
 80171de:	1c43      	adds	r3, r0, #1
 80171e0:	89a3      	ldrh	r3, [r4, #12]
 80171e2:	bf15      	itete	ne
 80171e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80171e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80171ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80171ee:	81a3      	strheq	r3, [r4, #12]
 80171f0:	bf18      	it	ne
 80171f2:	81a3      	strhne	r3, [r4, #12]
 80171f4:	bd10      	pop	{r4, pc}

080171f6 <__sclose>:
 80171f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80171fa:	f000 b8c7 	b.w	801738c <_close_r>

080171fe <__swbuf_r>:
 80171fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017200:	460e      	mov	r6, r1
 8017202:	4614      	mov	r4, r2
 8017204:	4605      	mov	r5, r0
 8017206:	b118      	cbz	r0, 8017210 <__swbuf_r+0x12>
 8017208:	6a03      	ldr	r3, [r0, #32]
 801720a:	b90b      	cbnz	r3, 8017210 <__swbuf_r+0x12>
 801720c:	f7ff feee 	bl	8016fec <__sinit>
 8017210:	69a3      	ldr	r3, [r4, #24]
 8017212:	60a3      	str	r3, [r4, #8]
 8017214:	89a3      	ldrh	r3, [r4, #12]
 8017216:	071a      	lsls	r2, r3, #28
 8017218:	d501      	bpl.n	801721e <__swbuf_r+0x20>
 801721a:	6923      	ldr	r3, [r4, #16]
 801721c:	b943      	cbnz	r3, 8017230 <__swbuf_r+0x32>
 801721e:	4621      	mov	r1, r4
 8017220:	4628      	mov	r0, r5
 8017222:	f000 f82b 	bl	801727c <__swsetup_r>
 8017226:	b118      	cbz	r0, 8017230 <__swbuf_r+0x32>
 8017228:	f04f 37ff 	mov.w	r7, #4294967295
 801722c:	4638      	mov	r0, r7
 801722e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017230:	6823      	ldr	r3, [r4, #0]
 8017232:	6922      	ldr	r2, [r4, #16]
 8017234:	1a98      	subs	r0, r3, r2
 8017236:	6963      	ldr	r3, [r4, #20]
 8017238:	b2f6      	uxtb	r6, r6
 801723a:	4283      	cmp	r3, r0
 801723c:	4637      	mov	r7, r6
 801723e:	dc05      	bgt.n	801724c <__swbuf_r+0x4e>
 8017240:	4621      	mov	r1, r4
 8017242:	4628      	mov	r0, r5
 8017244:	f000 ff3e 	bl	80180c4 <_fflush_r>
 8017248:	2800      	cmp	r0, #0
 801724a:	d1ed      	bne.n	8017228 <__swbuf_r+0x2a>
 801724c:	68a3      	ldr	r3, [r4, #8]
 801724e:	3b01      	subs	r3, #1
 8017250:	60a3      	str	r3, [r4, #8]
 8017252:	6823      	ldr	r3, [r4, #0]
 8017254:	1c5a      	adds	r2, r3, #1
 8017256:	6022      	str	r2, [r4, #0]
 8017258:	701e      	strb	r6, [r3, #0]
 801725a:	6962      	ldr	r2, [r4, #20]
 801725c:	1c43      	adds	r3, r0, #1
 801725e:	429a      	cmp	r2, r3
 8017260:	d004      	beq.n	801726c <__swbuf_r+0x6e>
 8017262:	89a3      	ldrh	r3, [r4, #12]
 8017264:	07db      	lsls	r3, r3, #31
 8017266:	d5e1      	bpl.n	801722c <__swbuf_r+0x2e>
 8017268:	2e0a      	cmp	r6, #10
 801726a:	d1df      	bne.n	801722c <__swbuf_r+0x2e>
 801726c:	4621      	mov	r1, r4
 801726e:	4628      	mov	r0, r5
 8017270:	f000 ff28 	bl	80180c4 <_fflush_r>
 8017274:	2800      	cmp	r0, #0
 8017276:	d0d9      	beq.n	801722c <__swbuf_r+0x2e>
 8017278:	e7d6      	b.n	8017228 <__swbuf_r+0x2a>
	...

0801727c <__swsetup_r>:
 801727c:	b538      	push	{r3, r4, r5, lr}
 801727e:	4b29      	ldr	r3, [pc, #164]	@ (8017324 <__swsetup_r+0xa8>)
 8017280:	4605      	mov	r5, r0
 8017282:	6818      	ldr	r0, [r3, #0]
 8017284:	460c      	mov	r4, r1
 8017286:	b118      	cbz	r0, 8017290 <__swsetup_r+0x14>
 8017288:	6a03      	ldr	r3, [r0, #32]
 801728a:	b90b      	cbnz	r3, 8017290 <__swsetup_r+0x14>
 801728c:	f7ff feae 	bl	8016fec <__sinit>
 8017290:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017294:	0719      	lsls	r1, r3, #28
 8017296:	d422      	bmi.n	80172de <__swsetup_r+0x62>
 8017298:	06da      	lsls	r2, r3, #27
 801729a:	d407      	bmi.n	80172ac <__swsetup_r+0x30>
 801729c:	2209      	movs	r2, #9
 801729e:	602a      	str	r2, [r5, #0]
 80172a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80172a4:	81a3      	strh	r3, [r4, #12]
 80172a6:	f04f 30ff 	mov.w	r0, #4294967295
 80172aa:	e033      	b.n	8017314 <__swsetup_r+0x98>
 80172ac:	0758      	lsls	r0, r3, #29
 80172ae:	d512      	bpl.n	80172d6 <__swsetup_r+0x5a>
 80172b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80172b2:	b141      	cbz	r1, 80172c6 <__swsetup_r+0x4a>
 80172b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80172b8:	4299      	cmp	r1, r3
 80172ba:	d002      	beq.n	80172c2 <__swsetup_r+0x46>
 80172bc:	4628      	mov	r0, r5
 80172be:	f000 f955 	bl	801756c <_free_r>
 80172c2:	2300      	movs	r3, #0
 80172c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80172c6:	89a3      	ldrh	r3, [r4, #12]
 80172c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80172cc:	81a3      	strh	r3, [r4, #12]
 80172ce:	2300      	movs	r3, #0
 80172d0:	6063      	str	r3, [r4, #4]
 80172d2:	6923      	ldr	r3, [r4, #16]
 80172d4:	6023      	str	r3, [r4, #0]
 80172d6:	89a3      	ldrh	r3, [r4, #12]
 80172d8:	f043 0308 	orr.w	r3, r3, #8
 80172dc:	81a3      	strh	r3, [r4, #12]
 80172de:	6923      	ldr	r3, [r4, #16]
 80172e0:	b94b      	cbnz	r3, 80172f6 <__swsetup_r+0x7a>
 80172e2:	89a3      	ldrh	r3, [r4, #12]
 80172e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80172e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80172ec:	d003      	beq.n	80172f6 <__swsetup_r+0x7a>
 80172ee:	4621      	mov	r1, r4
 80172f0:	4628      	mov	r0, r5
 80172f2:	f000 ff47 	bl	8018184 <__smakebuf_r>
 80172f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80172fa:	f013 0201 	ands.w	r2, r3, #1
 80172fe:	d00a      	beq.n	8017316 <__swsetup_r+0x9a>
 8017300:	2200      	movs	r2, #0
 8017302:	60a2      	str	r2, [r4, #8]
 8017304:	6962      	ldr	r2, [r4, #20]
 8017306:	4252      	negs	r2, r2
 8017308:	61a2      	str	r2, [r4, #24]
 801730a:	6922      	ldr	r2, [r4, #16]
 801730c:	b942      	cbnz	r2, 8017320 <__swsetup_r+0xa4>
 801730e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017312:	d1c5      	bne.n	80172a0 <__swsetup_r+0x24>
 8017314:	bd38      	pop	{r3, r4, r5, pc}
 8017316:	0799      	lsls	r1, r3, #30
 8017318:	bf58      	it	pl
 801731a:	6962      	ldrpl	r2, [r4, #20]
 801731c:	60a2      	str	r2, [r4, #8]
 801731e:	e7f4      	b.n	801730a <__swsetup_r+0x8e>
 8017320:	2000      	movs	r0, #0
 8017322:	e7f7      	b.n	8017314 <__swsetup_r+0x98>
 8017324:	20000044 	.word	0x20000044

08017328 <memcmp>:
 8017328:	b510      	push	{r4, lr}
 801732a:	3901      	subs	r1, #1
 801732c:	4402      	add	r2, r0
 801732e:	4290      	cmp	r0, r2
 8017330:	d101      	bne.n	8017336 <memcmp+0xe>
 8017332:	2000      	movs	r0, #0
 8017334:	e005      	b.n	8017342 <memcmp+0x1a>
 8017336:	7803      	ldrb	r3, [r0, #0]
 8017338:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801733c:	42a3      	cmp	r3, r4
 801733e:	d001      	beq.n	8017344 <memcmp+0x1c>
 8017340:	1b18      	subs	r0, r3, r4
 8017342:	bd10      	pop	{r4, pc}
 8017344:	3001      	adds	r0, #1
 8017346:	e7f2      	b.n	801732e <memcmp+0x6>

08017348 <memmove>:
 8017348:	4288      	cmp	r0, r1
 801734a:	b510      	push	{r4, lr}
 801734c:	eb01 0402 	add.w	r4, r1, r2
 8017350:	d902      	bls.n	8017358 <memmove+0x10>
 8017352:	4284      	cmp	r4, r0
 8017354:	4623      	mov	r3, r4
 8017356:	d807      	bhi.n	8017368 <memmove+0x20>
 8017358:	1e43      	subs	r3, r0, #1
 801735a:	42a1      	cmp	r1, r4
 801735c:	d008      	beq.n	8017370 <memmove+0x28>
 801735e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017362:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017366:	e7f8      	b.n	801735a <memmove+0x12>
 8017368:	4402      	add	r2, r0
 801736a:	4601      	mov	r1, r0
 801736c:	428a      	cmp	r2, r1
 801736e:	d100      	bne.n	8017372 <memmove+0x2a>
 8017370:	bd10      	pop	{r4, pc}
 8017372:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017376:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801737a:	e7f7      	b.n	801736c <memmove+0x24>

0801737c <memset>:
 801737c:	4402      	add	r2, r0
 801737e:	4603      	mov	r3, r0
 8017380:	4293      	cmp	r3, r2
 8017382:	d100      	bne.n	8017386 <memset+0xa>
 8017384:	4770      	bx	lr
 8017386:	f803 1b01 	strb.w	r1, [r3], #1
 801738a:	e7f9      	b.n	8017380 <memset+0x4>

0801738c <_close_r>:
 801738c:	b538      	push	{r3, r4, r5, lr}
 801738e:	4d06      	ldr	r5, [pc, #24]	@ (80173a8 <_close_r+0x1c>)
 8017390:	2300      	movs	r3, #0
 8017392:	4604      	mov	r4, r0
 8017394:	4608      	mov	r0, r1
 8017396:	602b      	str	r3, [r5, #0]
 8017398:	f7ea f82c 	bl	80013f4 <_close>
 801739c:	1c43      	adds	r3, r0, #1
 801739e:	d102      	bne.n	80173a6 <_close_r+0x1a>
 80173a0:	682b      	ldr	r3, [r5, #0]
 80173a2:	b103      	cbz	r3, 80173a6 <_close_r+0x1a>
 80173a4:	6023      	str	r3, [r4, #0]
 80173a6:	bd38      	pop	{r3, r4, r5, pc}
 80173a8:	2000cdb0 	.word	0x2000cdb0

080173ac <_reclaim_reent>:
 80173ac:	4b29      	ldr	r3, [pc, #164]	@ (8017454 <_reclaim_reent+0xa8>)
 80173ae:	681b      	ldr	r3, [r3, #0]
 80173b0:	4283      	cmp	r3, r0
 80173b2:	b570      	push	{r4, r5, r6, lr}
 80173b4:	4604      	mov	r4, r0
 80173b6:	d04b      	beq.n	8017450 <_reclaim_reent+0xa4>
 80173b8:	69c3      	ldr	r3, [r0, #28]
 80173ba:	b1ab      	cbz	r3, 80173e8 <_reclaim_reent+0x3c>
 80173bc:	68db      	ldr	r3, [r3, #12]
 80173be:	b16b      	cbz	r3, 80173dc <_reclaim_reent+0x30>
 80173c0:	2500      	movs	r5, #0
 80173c2:	69e3      	ldr	r3, [r4, #28]
 80173c4:	68db      	ldr	r3, [r3, #12]
 80173c6:	5959      	ldr	r1, [r3, r5]
 80173c8:	2900      	cmp	r1, #0
 80173ca:	d13b      	bne.n	8017444 <_reclaim_reent+0x98>
 80173cc:	3504      	adds	r5, #4
 80173ce:	2d80      	cmp	r5, #128	@ 0x80
 80173d0:	d1f7      	bne.n	80173c2 <_reclaim_reent+0x16>
 80173d2:	69e3      	ldr	r3, [r4, #28]
 80173d4:	4620      	mov	r0, r4
 80173d6:	68d9      	ldr	r1, [r3, #12]
 80173d8:	f000 f8c8 	bl	801756c <_free_r>
 80173dc:	69e3      	ldr	r3, [r4, #28]
 80173de:	6819      	ldr	r1, [r3, #0]
 80173e0:	b111      	cbz	r1, 80173e8 <_reclaim_reent+0x3c>
 80173e2:	4620      	mov	r0, r4
 80173e4:	f000 f8c2 	bl	801756c <_free_r>
 80173e8:	6961      	ldr	r1, [r4, #20]
 80173ea:	b111      	cbz	r1, 80173f2 <_reclaim_reent+0x46>
 80173ec:	4620      	mov	r0, r4
 80173ee:	f000 f8bd 	bl	801756c <_free_r>
 80173f2:	69e1      	ldr	r1, [r4, #28]
 80173f4:	b111      	cbz	r1, 80173fc <_reclaim_reent+0x50>
 80173f6:	4620      	mov	r0, r4
 80173f8:	f000 f8b8 	bl	801756c <_free_r>
 80173fc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80173fe:	b111      	cbz	r1, 8017406 <_reclaim_reent+0x5a>
 8017400:	4620      	mov	r0, r4
 8017402:	f000 f8b3 	bl	801756c <_free_r>
 8017406:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017408:	b111      	cbz	r1, 8017410 <_reclaim_reent+0x64>
 801740a:	4620      	mov	r0, r4
 801740c:	f000 f8ae 	bl	801756c <_free_r>
 8017410:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8017412:	b111      	cbz	r1, 801741a <_reclaim_reent+0x6e>
 8017414:	4620      	mov	r0, r4
 8017416:	f000 f8a9 	bl	801756c <_free_r>
 801741a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801741c:	b111      	cbz	r1, 8017424 <_reclaim_reent+0x78>
 801741e:	4620      	mov	r0, r4
 8017420:	f000 f8a4 	bl	801756c <_free_r>
 8017424:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8017426:	b111      	cbz	r1, 801742e <_reclaim_reent+0x82>
 8017428:	4620      	mov	r0, r4
 801742a:	f000 f89f 	bl	801756c <_free_r>
 801742e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8017430:	b111      	cbz	r1, 8017438 <_reclaim_reent+0x8c>
 8017432:	4620      	mov	r0, r4
 8017434:	f000 f89a 	bl	801756c <_free_r>
 8017438:	6a23      	ldr	r3, [r4, #32]
 801743a:	b14b      	cbz	r3, 8017450 <_reclaim_reent+0xa4>
 801743c:	4620      	mov	r0, r4
 801743e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017442:	4718      	bx	r3
 8017444:	680e      	ldr	r6, [r1, #0]
 8017446:	4620      	mov	r0, r4
 8017448:	f000 f890 	bl	801756c <_free_r>
 801744c:	4631      	mov	r1, r6
 801744e:	e7bb      	b.n	80173c8 <_reclaim_reent+0x1c>
 8017450:	bd70      	pop	{r4, r5, r6, pc}
 8017452:	bf00      	nop
 8017454:	20000044 	.word	0x20000044

08017458 <_lseek_r>:
 8017458:	b538      	push	{r3, r4, r5, lr}
 801745a:	4d07      	ldr	r5, [pc, #28]	@ (8017478 <_lseek_r+0x20>)
 801745c:	4604      	mov	r4, r0
 801745e:	4608      	mov	r0, r1
 8017460:	4611      	mov	r1, r2
 8017462:	2200      	movs	r2, #0
 8017464:	602a      	str	r2, [r5, #0]
 8017466:	461a      	mov	r2, r3
 8017468:	f7e9 ffeb 	bl	8001442 <_lseek>
 801746c:	1c43      	adds	r3, r0, #1
 801746e:	d102      	bne.n	8017476 <_lseek_r+0x1e>
 8017470:	682b      	ldr	r3, [r5, #0]
 8017472:	b103      	cbz	r3, 8017476 <_lseek_r+0x1e>
 8017474:	6023      	str	r3, [r4, #0]
 8017476:	bd38      	pop	{r3, r4, r5, pc}
 8017478:	2000cdb0 	.word	0x2000cdb0

0801747c <_read_r>:
 801747c:	b538      	push	{r3, r4, r5, lr}
 801747e:	4d07      	ldr	r5, [pc, #28]	@ (801749c <_read_r+0x20>)
 8017480:	4604      	mov	r4, r0
 8017482:	4608      	mov	r0, r1
 8017484:	4611      	mov	r1, r2
 8017486:	2200      	movs	r2, #0
 8017488:	602a      	str	r2, [r5, #0]
 801748a:	461a      	mov	r2, r3
 801748c:	f7e9 ff95 	bl	80013ba <_read>
 8017490:	1c43      	adds	r3, r0, #1
 8017492:	d102      	bne.n	801749a <_read_r+0x1e>
 8017494:	682b      	ldr	r3, [r5, #0]
 8017496:	b103      	cbz	r3, 801749a <_read_r+0x1e>
 8017498:	6023      	str	r3, [r4, #0]
 801749a:	bd38      	pop	{r3, r4, r5, pc}
 801749c:	2000cdb0 	.word	0x2000cdb0

080174a0 <_write_r>:
 80174a0:	b538      	push	{r3, r4, r5, lr}
 80174a2:	4d07      	ldr	r5, [pc, #28]	@ (80174c0 <_write_r+0x20>)
 80174a4:	4604      	mov	r4, r0
 80174a6:	4608      	mov	r0, r1
 80174a8:	4611      	mov	r1, r2
 80174aa:	2200      	movs	r2, #0
 80174ac:	602a      	str	r2, [r5, #0]
 80174ae:	461a      	mov	r2, r3
 80174b0:	f7e9 f888 	bl	80005c4 <_write>
 80174b4:	1c43      	adds	r3, r0, #1
 80174b6:	d102      	bne.n	80174be <_write_r+0x1e>
 80174b8:	682b      	ldr	r3, [r5, #0]
 80174ba:	b103      	cbz	r3, 80174be <_write_r+0x1e>
 80174bc:	6023      	str	r3, [r4, #0]
 80174be:	bd38      	pop	{r3, r4, r5, pc}
 80174c0:	2000cdb0 	.word	0x2000cdb0

080174c4 <__libc_init_array>:
 80174c4:	b570      	push	{r4, r5, r6, lr}
 80174c6:	4d0d      	ldr	r5, [pc, #52]	@ (80174fc <__libc_init_array+0x38>)
 80174c8:	4c0d      	ldr	r4, [pc, #52]	@ (8017500 <__libc_init_array+0x3c>)
 80174ca:	1b64      	subs	r4, r4, r5
 80174cc:	10a4      	asrs	r4, r4, #2
 80174ce:	2600      	movs	r6, #0
 80174d0:	42a6      	cmp	r6, r4
 80174d2:	d109      	bne.n	80174e8 <__libc_init_array+0x24>
 80174d4:	4d0b      	ldr	r5, [pc, #44]	@ (8017504 <__libc_init_array+0x40>)
 80174d6:	4c0c      	ldr	r4, [pc, #48]	@ (8017508 <__libc_init_array+0x44>)
 80174d8:	f000 ff44 	bl	8018364 <_init>
 80174dc:	1b64      	subs	r4, r4, r5
 80174de:	10a4      	asrs	r4, r4, #2
 80174e0:	2600      	movs	r6, #0
 80174e2:	42a6      	cmp	r6, r4
 80174e4:	d105      	bne.n	80174f2 <__libc_init_array+0x2e>
 80174e6:	bd70      	pop	{r4, r5, r6, pc}
 80174e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80174ec:	4798      	blx	r3
 80174ee:	3601      	adds	r6, #1
 80174f0:	e7ee      	b.n	80174d0 <__libc_init_array+0xc>
 80174f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80174f6:	4798      	blx	r3
 80174f8:	3601      	adds	r6, #1
 80174fa:	e7f2      	b.n	80174e2 <__libc_init_array+0x1e>
 80174fc:	0801b9dc 	.word	0x0801b9dc
 8017500:	0801b9dc 	.word	0x0801b9dc
 8017504:	0801b9dc 	.word	0x0801b9dc
 8017508:	0801b9e0 	.word	0x0801b9e0

0801750c <__retarget_lock_init_recursive>:
 801750c:	4770      	bx	lr

0801750e <__retarget_lock_acquire_recursive>:
 801750e:	4770      	bx	lr

08017510 <__retarget_lock_release_recursive>:
 8017510:	4770      	bx	lr

08017512 <memcpy>:
 8017512:	440a      	add	r2, r1
 8017514:	4291      	cmp	r1, r2
 8017516:	f100 33ff 	add.w	r3, r0, #4294967295
 801751a:	d100      	bne.n	801751e <memcpy+0xc>
 801751c:	4770      	bx	lr
 801751e:	b510      	push	{r4, lr}
 8017520:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017524:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017528:	4291      	cmp	r1, r2
 801752a:	d1f9      	bne.n	8017520 <memcpy+0xe>
 801752c:	bd10      	pop	{r4, pc}
	...

08017530 <__assert_func>:
 8017530:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017532:	4614      	mov	r4, r2
 8017534:	461a      	mov	r2, r3
 8017536:	4b09      	ldr	r3, [pc, #36]	@ (801755c <__assert_func+0x2c>)
 8017538:	681b      	ldr	r3, [r3, #0]
 801753a:	4605      	mov	r5, r0
 801753c:	68d8      	ldr	r0, [r3, #12]
 801753e:	b954      	cbnz	r4, 8017556 <__assert_func+0x26>
 8017540:	4b07      	ldr	r3, [pc, #28]	@ (8017560 <__assert_func+0x30>)
 8017542:	461c      	mov	r4, r3
 8017544:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017548:	9100      	str	r1, [sp, #0]
 801754a:	462b      	mov	r3, r5
 801754c:	4905      	ldr	r1, [pc, #20]	@ (8017564 <__assert_func+0x34>)
 801754e:	f000 fde1 	bl	8018114 <fiprintf>
 8017552:	f000 fe85 	bl	8018260 <abort>
 8017556:	4b04      	ldr	r3, [pc, #16]	@ (8017568 <__assert_func+0x38>)
 8017558:	e7f4      	b.n	8017544 <__assert_func+0x14>
 801755a:	bf00      	nop
 801755c:	20000044 	.word	0x20000044
 8017560:	0801b99e 	.word	0x0801b99e
 8017564:	0801b970 	.word	0x0801b970
 8017568:	0801b963 	.word	0x0801b963

0801756c <_free_r>:
 801756c:	b538      	push	{r3, r4, r5, lr}
 801756e:	4605      	mov	r5, r0
 8017570:	2900      	cmp	r1, #0
 8017572:	d041      	beq.n	80175f8 <_free_r+0x8c>
 8017574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017578:	1f0c      	subs	r4, r1, #4
 801757a:	2b00      	cmp	r3, #0
 801757c:	bfb8      	it	lt
 801757e:	18e4      	addlt	r4, r4, r3
 8017580:	f000 f8e8 	bl	8017754 <__malloc_lock>
 8017584:	4a1d      	ldr	r2, [pc, #116]	@ (80175fc <_free_r+0x90>)
 8017586:	6813      	ldr	r3, [r2, #0]
 8017588:	b933      	cbnz	r3, 8017598 <_free_r+0x2c>
 801758a:	6063      	str	r3, [r4, #4]
 801758c:	6014      	str	r4, [r2, #0]
 801758e:	4628      	mov	r0, r5
 8017590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017594:	f000 b8e4 	b.w	8017760 <__malloc_unlock>
 8017598:	42a3      	cmp	r3, r4
 801759a:	d908      	bls.n	80175ae <_free_r+0x42>
 801759c:	6820      	ldr	r0, [r4, #0]
 801759e:	1821      	adds	r1, r4, r0
 80175a0:	428b      	cmp	r3, r1
 80175a2:	bf01      	itttt	eq
 80175a4:	6819      	ldreq	r1, [r3, #0]
 80175a6:	685b      	ldreq	r3, [r3, #4]
 80175a8:	1809      	addeq	r1, r1, r0
 80175aa:	6021      	streq	r1, [r4, #0]
 80175ac:	e7ed      	b.n	801758a <_free_r+0x1e>
 80175ae:	461a      	mov	r2, r3
 80175b0:	685b      	ldr	r3, [r3, #4]
 80175b2:	b10b      	cbz	r3, 80175b8 <_free_r+0x4c>
 80175b4:	42a3      	cmp	r3, r4
 80175b6:	d9fa      	bls.n	80175ae <_free_r+0x42>
 80175b8:	6811      	ldr	r1, [r2, #0]
 80175ba:	1850      	adds	r0, r2, r1
 80175bc:	42a0      	cmp	r0, r4
 80175be:	d10b      	bne.n	80175d8 <_free_r+0x6c>
 80175c0:	6820      	ldr	r0, [r4, #0]
 80175c2:	4401      	add	r1, r0
 80175c4:	1850      	adds	r0, r2, r1
 80175c6:	4283      	cmp	r3, r0
 80175c8:	6011      	str	r1, [r2, #0]
 80175ca:	d1e0      	bne.n	801758e <_free_r+0x22>
 80175cc:	6818      	ldr	r0, [r3, #0]
 80175ce:	685b      	ldr	r3, [r3, #4]
 80175d0:	6053      	str	r3, [r2, #4]
 80175d2:	4408      	add	r0, r1
 80175d4:	6010      	str	r0, [r2, #0]
 80175d6:	e7da      	b.n	801758e <_free_r+0x22>
 80175d8:	d902      	bls.n	80175e0 <_free_r+0x74>
 80175da:	230c      	movs	r3, #12
 80175dc:	602b      	str	r3, [r5, #0]
 80175de:	e7d6      	b.n	801758e <_free_r+0x22>
 80175e0:	6820      	ldr	r0, [r4, #0]
 80175e2:	1821      	adds	r1, r4, r0
 80175e4:	428b      	cmp	r3, r1
 80175e6:	bf04      	itt	eq
 80175e8:	6819      	ldreq	r1, [r3, #0]
 80175ea:	685b      	ldreq	r3, [r3, #4]
 80175ec:	6063      	str	r3, [r4, #4]
 80175ee:	bf04      	itt	eq
 80175f0:	1809      	addeq	r1, r1, r0
 80175f2:	6021      	streq	r1, [r4, #0]
 80175f4:	6054      	str	r4, [r2, #4]
 80175f6:	e7ca      	b.n	801758e <_free_r+0x22>
 80175f8:	bd38      	pop	{r3, r4, r5, pc}
 80175fa:	bf00      	nop
 80175fc:	2000cdbc 	.word	0x2000cdbc

08017600 <malloc>:
 8017600:	4b02      	ldr	r3, [pc, #8]	@ (801760c <malloc+0xc>)
 8017602:	4601      	mov	r1, r0
 8017604:	6818      	ldr	r0, [r3, #0]
 8017606:	f000 b825 	b.w	8017654 <_malloc_r>
 801760a:	bf00      	nop
 801760c:	20000044 	.word	0x20000044

08017610 <sbrk_aligned>:
 8017610:	b570      	push	{r4, r5, r6, lr}
 8017612:	4e0f      	ldr	r6, [pc, #60]	@ (8017650 <sbrk_aligned+0x40>)
 8017614:	460c      	mov	r4, r1
 8017616:	6831      	ldr	r1, [r6, #0]
 8017618:	4605      	mov	r5, r0
 801761a:	b911      	cbnz	r1, 8017622 <sbrk_aligned+0x12>
 801761c:	f000 fe10 	bl	8018240 <_sbrk_r>
 8017620:	6030      	str	r0, [r6, #0]
 8017622:	4621      	mov	r1, r4
 8017624:	4628      	mov	r0, r5
 8017626:	f000 fe0b 	bl	8018240 <_sbrk_r>
 801762a:	1c43      	adds	r3, r0, #1
 801762c:	d103      	bne.n	8017636 <sbrk_aligned+0x26>
 801762e:	f04f 34ff 	mov.w	r4, #4294967295
 8017632:	4620      	mov	r0, r4
 8017634:	bd70      	pop	{r4, r5, r6, pc}
 8017636:	1cc4      	adds	r4, r0, #3
 8017638:	f024 0403 	bic.w	r4, r4, #3
 801763c:	42a0      	cmp	r0, r4
 801763e:	d0f8      	beq.n	8017632 <sbrk_aligned+0x22>
 8017640:	1a21      	subs	r1, r4, r0
 8017642:	4628      	mov	r0, r5
 8017644:	f000 fdfc 	bl	8018240 <_sbrk_r>
 8017648:	3001      	adds	r0, #1
 801764a:	d1f2      	bne.n	8017632 <sbrk_aligned+0x22>
 801764c:	e7ef      	b.n	801762e <sbrk_aligned+0x1e>
 801764e:	bf00      	nop
 8017650:	2000cdb8 	.word	0x2000cdb8

08017654 <_malloc_r>:
 8017654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017658:	1ccd      	adds	r5, r1, #3
 801765a:	f025 0503 	bic.w	r5, r5, #3
 801765e:	3508      	adds	r5, #8
 8017660:	2d0c      	cmp	r5, #12
 8017662:	bf38      	it	cc
 8017664:	250c      	movcc	r5, #12
 8017666:	2d00      	cmp	r5, #0
 8017668:	4606      	mov	r6, r0
 801766a:	db01      	blt.n	8017670 <_malloc_r+0x1c>
 801766c:	42a9      	cmp	r1, r5
 801766e:	d904      	bls.n	801767a <_malloc_r+0x26>
 8017670:	230c      	movs	r3, #12
 8017672:	6033      	str	r3, [r6, #0]
 8017674:	2000      	movs	r0, #0
 8017676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801767a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017750 <_malloc_r+0xfc>
 801767e:	f000 f869 	bl	8017754 <__malloc_lock>
 8017682:	f8d8 3000 	ldr.w	r3, [r8]
 8017686:	461c      	mov	r4, r3
 8017688:	bb44      	cbnz	r4, 80176dc <_malloc_r+0x88>
 801768a:	4629      	mov	r1, r5
 801768c:	4630      	mov	r0, r6
 801768e:	f7ff ffbf 	bl	8017610 <sbrk_aligned>
 8017692:	1c43      	adds	r3, r0, #1
 8017694:	4604      	mov	r4, r0
 8017696:	d158      	bne.n	801774a <_malloc_r+0xf6>
 8017698:	f8d8 4000 	ldr.w	r4, [r8]
 801769c:	4627      	mov	r7, r4
 801769e:	2f00      	cmp	r7, #0
 80176a0:	d143      	bne.n	801772a <_malloc_r+0xd6>
 80176a2:	2c00      	cmp	r4, #0
 80176a4:	d04b      	beq.n	801773e <_malloc_r+0xea>
 80176a6:	6823      	ldr	r3, [r4, #0]
 80176a8:	4639      	mov	r1, r7
 80176aa:	4630      	mov	r0, r6
 80176ac:	eb04 0903 	add.w	r9, r4, r3
 80176b0:	f000 fdc6 	bl	8018240 <_sbrk_r>
 80176b4:	4581      	cmp	r9, r0
 80176b6:	d142      	bne.n	801773e <_malloc_r+0xea>
 80176b8:	6821      	ldr	r1, [r4, #0]
 80176ba:	1a6d      	subs	r5, r5, r1
 80176bc:	4629      	mov	r1, r5
 80176be:	4630      	mov	r0, r6
 80176c0:	f7ff ffa6 	bl	8017610 <sbrk_aligned>
 80176c4:	3001      	adds	r0, #1
 80176c6:	d03a      	beq.n	801773e <_malloc_r+0xea>
 80176c8:	6823      	ldr	r3, [r4, #0]
 80176ca:	442b      	add	r3, r5
 80176cc:	6023      	str	r3, [r4, #0]
 80176ce:	f8d8 3000 	ldr.w	r3, [r8]
 80176d2:	685a      	ldr	r2, [r3, #4]
 80176d4:	bb62      	cbnz	r2, 8017730 <_malloc_r+0xdc>
 80176d6:	f8c8 7000 	str.w	r7, [r8]
 80176da:	e00f      	b.n	80176fc <_malloc_r+0xa8>
 80176dc:	6822      	ldr	r2, [r4, #0]
 80176de:	1b52      	subs	r2, r2, r5
 80176e0:	d420      	bmi.n	8017724 <_malloc_r+0xd0>
 80176e2:	2a0b      	cmp	r2, #11
 80176e4:	d917      	bls.n	8017716 <_malloc_r+0xc2>
 80176e6:	1961      	adds	r1, r4, r5
 80176e8:	42a3      	cmp	r3, r4
 80176ea:	6025      	str	r5, [r4, #0]
 80176ec:	bf18      	it	ne
 80176ee:	6059      	strne	r1, [r3, #4]
 80176f0:	6863      	ldr	r3, [r4, #4]
 80176f2:	bf08      	it	eq
 80176f4:	f8c8 1000 	streq.w	r1, [r8]
 80176f8:	5162      	str	r2, [r4, r5]
 80176fa:	604b      	str	r3, [r1, #4]
 80176fc:	4630      	mov	r0, r6
 80176fe:	f000 f82f 	bl	8017760 <__malloc_unlock>
 8017702:	f104 000b 	add.w	r0, r4, #11
 8017706:	1d23      	adds	r3, r4, #4
 8017708:	f020 0007 	bic.w	r0, r0, #7
 801770c:	1ac2      	subs	r2, r0, r3
 801770e:	bf1c      	itt	ne
 8017710:	1a1b      	subne	r3, r3, r0
 8017712:	50a3      	strne	r3, [r4, r2]
 8017714:	e7af      	b.n	8017676 <_malloc_r+0x22>
 8017716:	6862      	ldr	r2, [r4, #4]
 8017718:	42a3      	cmp	r3, r4
 801771a:	bf0c      	ite	eq
 801771c:	f8c8 2000 	streq.w	r2, [r8]
 8017720:	605a      	strne	r2, [r3, #4]
 8017722:	e7eb      	b.n	80176fc <_malloc_r+0xa8>
 8017724:	4623      	mov	r3, r4
 8017726:	6864      	ldr	r4, [r4, #4]
 8017728:	e7ae      	b.n	8017688 <_malloc_r+0x34>
 801772a:	463c      	mov	r4, r7
 801772c:	687f      	ldr	r7, [r7, #4]
 801772e:	e7b6      	b.n	801769e <_malloc_r+0x4a>
 8017730:	461a      	mov	r2, r3
 8017732:	685b      	ldr	r3, [r3, #4]
 8017734:	42a3      	cmp	r3, r4
 8017736:	d1fb      	bne.n	8017730 <_malloc_r+0xdc>
 8017738:	2300      	movs	r3, #0
 801773a:	6053      	str	r3, [r2, #4]
 801773c:	e7de      	b.n	80176fc <_malloc_r+0xa8>
 801773e:	230c      	movs	r3, #12
 8017740:	6033      	str	r3, [r6, #0]
 8017742:	4630      	mov	r0, r6
 8017744:	f000 f80c 	bl	8017760 <__malloc_unlock>
 8017748:	e794      	b.n	8017674 <_malloc_r+0x20>
 801774a:	6005      	str	r5, [r0, #0]
 801774c:	e7d6      	b.n	80176fc <_malloc_r+0xa8>
 801774e:	bf00      	nop
 8017750:	2000cdbc 	.word	0x2000cdbc

08017754 <__malloc_lock>:
 8017754:	4801      	ldr	r0, [pc, #4]	@ (801775c <__malloc_lock+0x8>)
 8017756:	f7ff beda 	b.w	801750e <__retarget_lock_acquire_recursive>
 801775a:	bf00      	nop
 801775c:	2000cdb4 	.word	0x2000cdb4

08017760 <__malloc_unlock>:
 8017760:	4801      	ldr	r0, [pc, #4]	@ (8017768 <__malloc_unlock+0x8>)
 8017762:	f7ff bed5 	b.w	8017510 <__retarget_lock_release_recursive>
 8017766:	bf00      	nop
 8017768:	2000cdb4 	.word	0x2000cdb4

0801776c <__ssputs_r>:
 801776c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017770:	688e      	ldr	r6, [r1, #8]
 8017772:	461f      	mov	r7, r3
 8017774:	42be      	cmp	r6, r7
 8017776:	680b      	ldr	r3, [r1, #0]
 8017778:	4682      	mov	sl, r0
 801777a:	460c      	mov	r4, r1
 801777c:	4690      	mov	r8, r2
 801777e:	d82d      	bhi.n	80177dc <__ssputs_r+0x70>
 8017780:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017784:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017788:	d026      	beq.n	80177d8 <__ssputs_r+0x6c>
 801778a:	6965      	ldr	r5, [r4, #20]
 801778c:	6909      	ldr	r1, [r1, #16]
 801778e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017792:	eba3 0901 	sub.w	r9, r3, r1
 8017796:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801779a:	1c7b      	adds	r3, r7, #1
 801779c:	444b      	add	r3, r9
 801779e:	106d      	asrs	r5, r5, #1
 80177a0:	429d      	cmp	r5, r3
 80177a2:	bf38      	it	cc
 80177a4:	461d      	movcc	r5, r3
 80177a6:	0553      	lsls	r3, r2, #21
 80177a8:	d527      	bpl.n	80177fa <__ssputs_r+0x8e>
 80177aa:	4629      	mov	r1, r5
 80177ac:	f7ff ff52 	bl	8017654 <_malloc_r>
 80177b0:	4606      	mov	r6, r0
 80177b2:	b360      	cbz	r0, 801780e <__ssputs_r+0xa2>
 80177b4:	6921      	ldr	r1, [r4, #16]
 80177b6:	464a      	mov	r2, r9
 80177b8:	f7ff feab 	bl	8017512 <memcpy>
 80177bc:	89a3      	ldrh	r3, [r4, #12]
 80177be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80177c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80177c6:	81a3      	strh	r3, [r4, #12]
 80177c8:	6126      	str	r6, [r4, #16]
 80177ca:	6165      	str	r5, [r4, #20]
 80177cc:	444e      	add	r6, r9
 80177ce:	eba5 0509 	sub.w	r5, r5, r9
 80177d2:	6026      	str	r6, [r4, #0]
 80177d4:	60a5      	str	r5, [r4, #8]
 80177d6:	463e      	mov	r6, r7
 80177d8:	42be      	cmp	r6, r7
 80177da:	d900      	bls.n	80177de <__ssputs_r+0x72>
 80177dc:	463e      	mov	r6, r7
 80177de:	6820      	ldr	r0, [r4, #0]
 80177e0:	4632      	mov	r2, r6
 80177e2:	4641      	mov	r1, r8
 80177e4:	f7ff fdb0 	bl	8017348 <memmove>
 80177e8:	68a3      	ldr	r3, [r4, #8]
 80177ea:	1b9b      	subs	r3, r3, r6
 80177ec:	60a3      	str	r3, [r4, #8]
 80177ee:	6823      	ldr	r3, [r4, #0]
 80177f0:	4433      	add	r3, r6
 80177f2:	6023      	str	r3, [r4, #0]
 80177f4:	2000      	movs	r0, #0
 80177f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80177fa:	462a      	mov	r2, r5
 80177fc:	f000 fd37 	bl	801826e <_realloc_r>
 8017800:	4606      	mov	r6, r0
 8017802:	2800      	cmp	r0, #0
 8017804:	d1e0      	bne.n	80177c8 <__ssputs_r+0x5c>
 8017806:	6921      	ldr	r1, [r4, #16]
 8017808:	4650      	mov	r0, sl
 801780a:	f7ff feaf 	bl	801756c <_free_r>
 801780e:	230c      	movs	r3, #12
 8017810:	f8ca 3000 	str.w	r3, [sl]
 8017814:	89a3      	ldrh	r3, [r4, #12]
 8017816:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801781a:	81a3      	strh	r3, [r4, #12]
 801781c:	f04f 30ff 	mov.w	r0, #4294967295
 8017820:	e7e9      	b.n	80177f6 <__ssputs_r+0x8a>
	...

08017824 <_svfiprintf_r>:
 8017824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017828:	4698      	mov	r8, r3
 801782a:	898b      	ldrh	r3, [r1, #12]
 801782c:	061b      	lsls	r3, r3, #24
 801782e:	b09d      	sub	sp, #116	@ 0x74
 8017830:	4607      	mov	r7, r0
 8017832:	460d      	mov	r5, r1
 8017834:	4614      	mov	r4, r2
 8017836:	d510      	bpl.n	801785a <_svfiprintf_r+0x36>
 8017838:	690b      	ldr	r3, [r1, #16]
 801783a:	b973      	cbnz	r3, 801785a <_svfiprintf_r+0x36>
 801783c:	2140      	movs	r1, #64	@ 0x40
 801783e:	f7ff ff09 	bl	8017654 <_malloc_r>
 8017842:	6028      	str	r0, [r5, #0]
 8017844:	6128      	str	r0, [r5, #16]
 8017846:	b930      	cbnz	r0, 8017856 <_svfiprintf_r+0x32>
 8017848:	230c      	movs	r3, #12
 801784a:	603b      	str	r3, [r7, #0]
 801784c:	f04f 30ff 	mov.w	r0, #4294967295
 8017850:	b01d      	add	sp, #116	@ 0x74
 8017852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017856:	2340      	movs	r3, #64	@ 0x40
 8017858:	616b      	str	r3, [r5, #20]
 801785a:	2300      	movs	r3, #0
 801785c:	9309      	str	r3, [sp, #36]	@ 0x24
 801785e:	2320      	movs	r3, #32
 8017860:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017864:	f8cd 800c 	str.w	r8, [sp, #12]
 8017868:	2330      	movs	r3, #48	@ 0x30
 801786a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017a08 <_svfiprintf_r+0x1e4>
 801786e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017872:	f04f 0901 	mov.w	r9, #1
 8017876:	4623      	mov	r3, r4
 8017878:	469a      	mov	sl, r3
 801787a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801787e:	b10a      	cbz	r2, 8017884 <_svfiprintf_r+0x60>
 8017880:	2a25      	cmp	r2, #37	@ 0x25
 8017882:	d1f9      	bne.n	8017878 <_svfiprintf_r+0x54>
 8017884:	ebba 0b04 	subs.w	fp, sl, r4
 8017888:	d00b      	beq.n	80178a2 <_svfiprintf_r+0x7e>
 801788a:	465b      	mov	r3, fp
 801788c:	4622      	mov	r2, r4
 801788e:	4629      	mov	r1, r5
 8017890:	4638      	mov	r0, r7
 8017892:	f7ff ff6b 	bl	801776c <__ssputs_r>
 8017896:	3001      	adds	r0, #1
 8017898:	f000 80a7 	beq.w	80179ea <_svfiprintf_r+0x1c6>
 801789c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801789e:	445a      	add	r2, fp
 80178a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80178a2:	f89a 3000 	ldrb.w	r3, [sl]
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	f000 809f 	beq.w	80179ea <_svfiprintf_r+0x1c6>
 80178ac:	2300      	movs	r3, #0
 80178ae:	f04f 32ff 	mov.w	r2, #4294967295
 80178b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80178b6:	f10a 0a01 	add.w	sl, sl, #1
 80178ba:	9304      	str	r3, [sp, #16]
 80178bc:	9307      	str	r3, [sp, #28]
 80178be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80178c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80178c4:	4654      	mov	r4, sl
 80178c6:	2205      	movs	r2, #5
 80178c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80178cc:	484e      	ldr	r0, [pc, #312]	@ (8017a08 <_svfiprintf_r+0x1e4>)
 80178ce:	f7e8 fc97 	bl	8000200 <memchr>
 80178d2:	9a04      	ldr	r2, [sp, #16]
 80178d4:	b9d8      	cbnz	r0, 801790e <_svfiprintf_r+0xea>
 80178d6:	06d0      	lsls	r0, r2, #27
 80178d8:	bf44      	itt	mi
 80178da:	2320      	movmi	r3, #32
 80178dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80178e0:	0711      	lsls	r1, r2, #28
 80178e2:	bf44      	itt	mi
 80178e4:	232b      	movmi	r3, #43	@ 0x2b
 80178e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80178ea:	f89a 3000 	ldrb.w	r3, [sl]
 80178ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80178f0:	d015      	beq.n	801791e <_svfiprintf_r+0xfa>
 80178f2:	9a07      	ldr	r2, [sp, #28]
 80178f4:	4654      	mov	r4, sl
 80178f6:	2000      	movs	r0, #0
 80178f8:	f04f 0c0a 	mov.w	ip, #10
 80178fc:	4621      	mov	r1, r4
 80178fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017902:	3b30      	subs	r3, #48	@ 0x30
 8017904:	2b09      	cmp	r3, #9
 8017906:	d94b      	bls.n	80179a0 <_svfiprintf_r+0x17c>
 8017908:	b1b0      	cbz	r0, 8017938 <_svfiprintf_r+0x114>
 801790a:	9207      	str	r2, [sp, #28]
 801790c:	e014      	b.n	8017938 <_svfiprintf_r+0x114>
 801790e:	eba0 0308 	sub.w	r3, r0, r8
 8017912:	fa09 f303 	lsl.w	r3, r9, r3
 8017916:	4313      	orrs	r3, r2
 8017918:	9304      	str	r3, [sp, #16]
 801791a:	46a2      	mov	sl, r4
 801791c:	e7d2      	b.n	80178c4 <_svfiprintf_r+0xa0>
 801791e:	9b03      	ldr	r3, [sp, #12]
 8017920:	1d19      	adds	r1, r3, #4
 8017922:	681b      	ldr	r3, [r3, #0]
 8017924:	9103      	str	r1, [sp, #12]
 8017926:	2b00      	cmp	r3, #0
 8017928:	bfbb      	ittet	lt
 801792a:	425b      	neglt	r3, r3
 801792c:	f042 0202 	orrlt.w	r2, r2, #2
 8017930:	9307      	strge	r3, [sp, #28]
 8017932:	9307      	strlt	r3, [sp, #28]
 8017934:	bfb8      	it	lt
 8017936:	9204      	strlt	r2, [sp, #16]
 8017938:	7823      	ldrb	r3, [r4, #0]
 801793a:	2b2e      	cmp	r3, #46	@ 0x2e
 801793c:	d10a      	bne.n	8017954 <_svfiprintf_r+0x130>
 801793e:	7863      	ldrb	r3, [r4, #1]
 8017940:	2b2a      	cmp	r3, #42	@ 0x2a
 8017942:	d132      	bne.n	80179aa <_svfiprintf_r+0x186>
 8017944:	9b03      	ldr	r3, [sp, #12]
 8017946:	1d1a      	adds	r2, r3, #4
 8017948:	681b      	ldr	r3, [r3, #0]
 801794a:	9203      	str	r2, [sp, #12]
 801794c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017950:	3402      	adds	r4, #2
 8017952:	9305      	str	r3, [sp, #20]
 8017954:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017a18 <_svfiprintf_r+0x1f4>
 8017958:	7821      	ldrb	r1, [r4, #0]
 801795a:	2203      	movs	r2, #3
 801795c:	4650      	mov	r0, sl
 801795e:	f7e8 fc4f 	bl	8000200 <memchr>
 8017962:	b138      	cbz	r0, 8017974 <_svfiprintf_r+0x150>
 8017964:	9b04      	ldr	r3, [sp, #16]
 8017966:	eba0 000a 	sub.w	r0, r0, sl
 801796a:	2240      	movs	r2, #64	@ 0x40
 801796c:	4082      	lsls	r2, r0
 801796e:	4313      	orrs	r3, r2
 8017970:	3401      	adds	r4, #1
 8017972:	9304      	str	r3, [sp, #16]
 8017974:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017978:	4824      	ldr	r0, [pc, #144]	@ (8017a0c <_svfiprintf_r+0x1e8>)
 801797a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801797e:	2206      	movs	r2, #6
 8017980:	f7e8 fc3e 	bl	8000200 <memchr>
 8017984:	2800      	cmp	r0, #0
 8017986:	d036      	beq.n	80179f6 <_svfiprintf_r+0x1d2>
 8017988:	4b21      	ldr	r3, [pc, #132]	@ (8017a10 <_svfiprintf_r+0x1ec>)
 801798a:	bb1b      	cbnz	r3, 80179d4 <_svfiprintf_r+0x1b0>
 801798c:	9b03      	ldr	r3, [sp, #12]
 801798e:	3307      	adds	r3, #7
 8017990:	f023 0307 	bic.w	r3, r3, #7
 8017994:	3308      	adds	r3, #8
 8017996:	9303      	str	r3, [sp, #12]
 8017998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801799a:	4433      	add	r3, r6
 801799c:	9309      	str	r3, [sp, #36]	@ 0x24
 801799e:	e76a      	b.n	8017876 <_svfiprintf_r+0x52>
 80179a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80179a4:	460c      	mov	r4, r1
 80179a6:	2001      	movs	r0, #1
 80179a8:	e7a8      	b.n	80178fc <_svfiprintf_r+0xd8>
 80179aa:	2300      	movs	r3, #0
 80179ac:	3401      	adds	r4, #1
 80179ae:	9305      	str	r3, [sp, #20]
 80179b0:	4619      	mov	r1, r3
 80179b2:	f04f 0c0a 	mov.w	ip, #10
 80179b6:	4620      	mov	r0, r4
 80179b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80179bc:	3a30      	subs	r2, #48	@ 0x30
 80179be:	2a09      	cmp	r2, #9
 80179c0:	d903      	bls.n	80179ca <_svfiprintf_r+0x1a6>
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d0c6      	beq.n	8017954 <_svfiprintf_r+0x130>
 80179c6:	9105      	str	r1, [sp, #20]
 80179c8:	e7c4      	b.n	8017954 <_svfiprintf_r+0x130>
 80179ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80179ce:	4604      	mov	r4, r0
 80179d0:	2301      	movs	r3, #1
 80179d2:	e7f0      	b.n	80179b6 <_svfiprintf_r+0x192>
 80179d4:	ab03      	add	r3, sp, #12
 80179d6:	9300      	str	r3, [sp, #0]
 80179d8:	462a      	mov	r2, r5
 80179da:	4b0e      	ldr	r3, [pc, #56]	@ (8017a14 <_svfiprintf_r+0x1f0>)
 80179dc:	a904      	add	r1, sp, #16
 80179de:	4638      	mov	r0, r7
 80179e0:	f3af 8000 	nop.w
 80179e4:	1c42      	adds	r2, r0, #1
 80179e6:	4606      	mov	r6, r0
 80179e8:	d1d6      	bne.n	8017998 <_svfiprintf_r+0x174>
 80179ea:	89ab      	ldrh	r3, [r5, #12]
 80179ec:	065b      	lsls	r3, r3, #25
 80179ee:	f53f af2d 	bmi.w	801784c <_svfiprintf_r+0x28>
 80179f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80179f4:	e72c      	b.n	8017850 <_svfiprintf_r+0x2c>
 80179f6:	ab03      	add	r3, sp, #12
 80179f8:	9300      	str	r3, [sp, #0]
 80179fa:	462a      	mov	r2, r5
 80179fc:	4b05      	ldr	r3, [pc, #20]	@ (8017a14 <_svfiprintf_r+0x1f0>)
 80179fe:	a904      	add	r1, sp, #16
 8017a00:	4638      	mov	r0, r7
 8017a02:	f000 f9bb 	bl	8017d7c <_printf_i>
 8017a06:	e7ed      	b.n	80179e4 <_svfiprintf_r+0x1c0>
 8017a08:	0801b99f 	.word	0x0801b99f
 8017a0c:	0801b9a9 	.word	0x0801b9a9
 8017a10:	00000000 	.word	0x00000000
 8017a14:	0801776d 	.word	0x0801776d
 8017a18:	0801b9a5 	.word	0x0801b9a5

08017a1c <__sfputc_r>:
 8017a1c:	6893      	ldr	r3, [r2, #8]
 8017a1e:	3b01      	subs	r3, #1
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	b410      	push	{r4}
 8017a24:	6093      	str	r3, [r2, #8]
 8017a26:	da08      	bge.n	8017a3a <__sfputc_r+0x1e>
 8017a28:	6994      	ldr	r4, [r2, #24]
 8017a2a:	42a3      	cmp	r3, r4
 8017a2c:	db01      	blt.n	8017a32 <__sfputc_r+0x16>
 8017a2e:	290a      	cmp	r1, #10
 8017a30:	d103      	bne.n	8017a3a <__sfputc_r+0x1e>
 8017a32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017a36:	f7ff bbe2 	b.w	80171fe <__swbuf_r>
 8017a3a:	6813      	ldr	r3, [r2, #0]
 8017a3c:	1c58      	adds	r0, r3, #1
 8017a3e:	6010      	str	r0, [r2, #0]
 8017a40:	7019      	strb	r1, [r3, #0]
 8017a42:	4608      	mov	r0, r1
 8017a44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017a48:	4770      	bx	lr

08017a4a <__sfputs_r>:
 8017a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a4c:	4606      	mov	r6, r0
 8017a4e:	460f      	mov	r7, r1
 8017a50:	4614      	mov	r4, r2
 8017a52:	18d5      	adds	r5, r2, r3
 8017a54:	42ac      	cmp	r4, r5
 8017a56:	d101      	bne.n	8017a5c <__sfputs_r+0x12>
 8017a58:	2000      	movs	r0, #0
 8017a5a:	e007      	b.n	8017a6c <__sfputs_r+0x22>
 8017a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a60:	463a      	mov	r2, r7
 8017a62:	4630      	mov	r0, r6
 8017a64:	f7ff ffda 	bl	8017a1c <__sfputc_r>
 8017a68:	1c43      	adds	r3, r0, #1
 8017a6a:	d1f3      	bne.n	8017a54 <__sfputs_r+0xa>
 8017a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017a70 <_vfiprintf_r>:
 8017a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a74:	460d      	mov	r5, r1
 8017a76:	b09d      	sub	sp, #116	@ 0x74
 8017a78:	4614      	mov	r4, r2
 8017a7a:	4698      	mov	r8, r3
 8017a7c:	4606      	mov	r6, r0
 8017a7e:	b118      	cbz	r0, 8017a88 <_vfiprintf_r+0x18>
 8017a80:	6a03      	ldr	r3, [r0, #32]
 8017a82:	b90b      	cbnz	r3, 8017a88 <_vfiprintf_r+0x18>
 8017a84:	f7ff fab2 	bl	8016fec <__sinit>
 8017a88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017a8a:	07d9      	lsls	r1, r3, #31
 8017a8c:	d405      	bmi.n	8017a9a <_vfiprintf_r+0x2a>
 8017a8e:	89ab      	ldrh	r3, [r5, #12]
 8017a90:	059a      	lsls	r2, r3, #22
 8017a92:	d402      	bmi.n	8017a9a <_vfiprintf_r+0x2a>
 8017a94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017a96:	f7ff fd3a 	bl	801750e <__retarget_lock_acquire_recursive>
 8017a9a:	89ab      	ldrh	r3, [r5, #12]
 8017a9c:	071b      	lsls	r3, r3, #28
 8017a9e:	d501      	bpl.n	8017aa4 <_vfiprintf_r+0x34>
 8017aa0:	692b      	ldr	r3, [r5, #16]
 8017aa2:	b99b      	cbnz	r3, 8017acc <_vfiprintf_r+0x5c>
 8017aa4:	4629      	mov	r1, r5
 8017aa6:	4630      	mov	r0, r6
 8017aa8:	f7ff fbe8 	bl	801727c <__swsetup_r>
 8017aac:	b170      	cbz	r0, 8017acc <_vfiprintf_r+0x5c>
 8017aae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017ab0:	07dc      	lsls	r4, r3, #31
 8017ab2:	d504      	bpl.n	8017abe <_vfiprintf_r+0x4e>
 8017ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8017ab8:	b01d      	add	sp, #116	@ 0x74
 8017aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017abe:	89ab      	ldrh	r3, [r5, #12]
 8017ac0:	0598      	lsls	r0, r3, #22
 8017ac2:	d4f7      	bmi.n	8017ab4 <_vfiprintf_r+0x44>
 8017ac4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017ac6:	f7ff fd23 	bl	8017510 <__retarget_lock_release_recursive>
 8017aca:	e7f3      	b.n	8017ab4 <_vfiprintf_r+0x44>
 8017acc:	2300      	movs	r3, #0
 8017ace:	9309      	str	r3, [sp, #36]	@ 0x24
 8017ad0:	2320      	movs	r3, #32
 8017ad2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017ad6:	f8cd 800c 	str.w	r8, [sp, #12]
 8017ada:	2330      	movs	r3, #48	@ 0x30
 8017adc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017c8c <_vfiprintf_r+0x21c>
 8017ae0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017ae4:	f04f 0901 	mov.w	r9, #1
 8017ae8:	4623      	mov	r3, r4
 8017aea:	469a      	mov	sl, r3
 8017aec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017af0:	b10a      	cbz	r2, 8017af6 <_vfiprintf_r+0x86>
 8017af2:	2a25      	cmp	r2, #37	@ 0x25
 8017af4:	d1f9      	bne.n	8017aea <_vfiprintf_r+0x7a>
 8017af6:	ebba 0b04 	subs.w	fp, sl, r4
 8017afa:	d00b      	beq.n	8017b14 <_vfiprintf_r+0xa4>
 8017afc:	465b      	mov	r3, fp
 8017afe:	4622      	mov	r2, r4
 8017b00:	4629      	mov	r1, r5
 8017b02:	4630      	mov	r0, r6
 8017b04:	f7ff ffa1 	bl	8017a4a <__sfputs_r>
 8017b08:	3001      	adds	r0, #1
 8017b0a:	f000 80a7 	beq.w	8017c5c <_vfiprintf_r+0x1ec>
 8017b0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017b10:	445a      	add	r2, fp
 8017b12:	9209      	str	r2, [sp, #36]	@ 0x24
 8017b14:	f89a 3000 	ldrb.w	r3, [sl]
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	f000 809f 	beq.w	8017c5c <_vfiprintf_r+0x1ec>
 8017b1e:	2300      	movs	r3, #0
 8017b20:	f04f 32ff 	mov.w	r2, #4294967295
 8017b24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017b28:	f10a 0a01 	add.w	sl, sl, #1
 8017b2c:	9304      	str	r3, [sp, #16]
 8017b2e:	9307      	str	r3, [sp, #28]
 8017b30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017b34:	931a      	str	r3, [sp, #104]	@ 0x68
 8017b36:	4654      	mov	r4, sl
 8017b38:	2205      	movs	r2, #5
 8017b3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b3e:	4853      	ldr	r0, [pc, #332]	@ (8017c8c <_vfiprintf_r+0x21c>)
 8017b40:	f7e8 fb5e 	bl	8000200 <memchr>
 8017b44:	9a04      	ldr	r2, [sp, #16]
 8017b46:	b9d8      	cbnz	r0, 8017b80 <_vfiprintf_r+0x110>
 8017b48:	06d1      	lsls	r1, r2, #27
 8017b4a:	bf44      	itt	mi
 8017b4c:	2320      	movmi	r3, #32
 8017b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017b52:	0713      	lsls	r3, r2, #28
 8017b54:	bf44      	itt	mi
 8017b56:	232b      	movmi	r3, #43	@ 0x2b
 8017b58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017b5c:	f89a 3000 	ldrb.w	r3, [sl]
 8017b60:	2b2a      	cmp	r3, #42	@ 0x2a
 8017b62:	d015      	beq.n	8017b90 <_vfiprintf_r+0x120>
 8017b64:	9a07      	ldr	r2, [sp, #28]
 8017b66:	4654      	mov	r4, sl
 8017b68:	2000      	movs	r0, #0
 8017b6a:	f04f 0c0a 	mov.w	ip, #10
 8017b6e:	4621      	mov	r1, r4
 8017b70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017b74:	3b30      	subs	r3, #48	@ 0x30
 8017b76:	2b09      	cmp	r3, #9
 8017b78:	d94b      	bls.n	8017c12 <_vfiprintf_r+0x1a2>
 8017b7a:	b1b0      	cbz	r0, 8017baa <_vfiprintf_r+0x13a>
 8017b7c:	9207      	str	r2, [sp, #28]
 8017b7e:	e014      	b.n	8017baa <_vfiprintf_r+0x13a>
 8017b80:	eba0 0308 	sub.w	r3, r0, r8
 8017b84:	fa09 f303 	lsl.w	r3, r9, r3
 8017b88:	4313      	orrs	r3, r2
 8017b8a:	9304      	str	r3, [sp, #16]
 8017b8c:	46a2      	mov	sl, r4
 8017b8e:	e7d2      	b.n	8017b36 <_vfiprintf_r+0xc6>
 8017b90:	9b03      	ldr	r3, [sp, #12]
 8017b92:	1d19      	adds	r1, r3, #4
 8017b94:	681b      	ldr	r3, [r3, #0]
 8017b96:	9103      	str	r1, [sp, #12]
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	bfbb      	ittet	lt
 8017b9c:	425b      	neglt	r3, r3
 8017b9e:	f042 0202 	orrlt.w	r2, r2, #2
 8017ba2:	9307      	strge	r3, [sp, #28]
 8017ba4:	9307      	strlt	r3, [sp, #28]
 8017ba6:	bfb8      	it	lt
 8017ba8:	9204      	strlt	r2, [sp, #16]
 8017baa:	7823      	ldrb	r3, [r4, #0]
 8017bac:	2b2e      	cmp	r3, #46	@ 0x2e
 8017bae:	d10a      	bne.n	8017bc6 <_vfiprintf_r+0x156>
 8017bb0:	7863      	ldrb	r3, [r4, #1]
 8017bb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8017bb4:	d132      	bne.n	8017c1c <_vfiprintf_r+0x1ac>
 8017bb6:	9b03      	ldr	r3, [sp, #12]
 8017bb8:	1d1a      	adds	r2, r3, #4
 8017bba:	681b      	ldr	r3, [r3, #0]
 8017bbc:	9203      	str	r2, [sp, #12]
 8017bbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017bc2:	3402      	adds	r4, #2
 8017bc4:	9305      	str	r3, [sp, #20]
 8017bc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017c9c <_vfiprintf_r+0x22c>
 8017bca:	7821      	ldrb	r1, [r4, #0]
 8017bcc:	2203      	movs	r2, #3
 8017bce:	4650      	mov	r0, sl
 8017bd0:	f7e8 fb16 	bl	8000200 <memchr>
 8017bd4:	b138      	cbz	r0, 8017be6 <_vfiprintf_r+0x176>
 8017bd6:	9b04      	ldr	r3, [sp, #16]
 8017bd8:	eba0 000a 	sub.w	r0, r0, sl
 8017bdc:	2240      	movs	r2, #64	@ 0x40
 8017bde:	4082      	lsls	r2, r0
 8017be0:	4313      	orrs	r3, r2
 8017be2:	3401      	adds	r4, #1
 8017be4:	9304      	str	r3, [sp, #16]
 8017be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017bea:	4829      	ldr	r0, [pc, #164]	@ (8017c90 <_vfiprintf_r+0x220>)
 8017bec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017bf0:	2206      	movs	r2, #6
 8017bf2:	f7e8 fb05 	bl	8000200 <memchr>
 8017bf6:	2800      	cmp	r0, #0
 8017bf8:	d03f      	beq.n	8017c7a <_vfiprintf_r+0x20a>
 8017bfa:	4b26      	ldr	r3, [pc, #152]	@ (8017c94 <_vfiprintf_r+0x224>)
 8017bfc:	bb1b      	cbnz	r3, 8017c46 <_vfiprintf_r+0x1d6>
 8017bfe:	9b03      	ldr	r3, [sp, #12]
 8017c00:	3307      	adds	r3, #7
 8017c02:	f023 0307 	bic.w	r3, r3, #7
 8017c06:	3308      	adds	r3, #8
 8017c08:	9303      	str	r3, [sp, #12]
 8017c0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017c0c:	443b      	add	r3, r7
 8017c0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8017c10:	e76a      	b.n	8017ae8 <_vfiprintf_r+0x78>
 8017c12:	fb0c 3202 	mla	r2, ip, r2, r3
 8017c16:	460c      	mov	r4, r1
 8017c18:	2001      	movs	r0, #1
 8017c1a:	e7a8      	b.n	8017b6e <_vfiprintf_r+0xfe>
 8017c1c:	2300      	movs	r3, #0
 8017c1e:	3401      	adds	r4, #1
 8017c20:	9305      	str	r3, [sp, #20]
 8017c22:	4619      	mov	r1, r3
 8017c24:	f04f 0c0a 	mov.w	ip, #10
 8017c28:	4620      	mov	r0, r4
 8017c2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017c2e:	3a30      	subs	r2, #48	@ 0x30
 8017c30:	2a09      	cmp	r2, #9
 8017c32:	d903      	bls.n	8017c3c <_vfiprintf_r+0x1cc>
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d0c6      	beq.n	8017bc6 <_vfiprintf_r+0x156>
 8017c38:	9105      	str	r1, [sp, #20]
 8017c3a:	e7c4      	b.n	8017bc6 <_vfiprintf_r+0x156>
 8017c3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8017c40:	4604      	mov	r4, r0
 8017c42:	2301      	movs	r3, #1
 8017c44:	e7f0      	b.n	8017c28 <_vfiprintf_r+0x1b8>
 8017c46:	ab03      	add	r3, sp, #12
 8017c48:	9300      	str	r3, [sp, #0]
 8017c4a:	462a      	mov	r2, r5
 8017c4c:	4b12      	ldr	r3, [pc, #72]	@ (8017c98 <_vfiprintf_r+0x228>)
 8017c4e:	a904      	add	r1, sp, #16
 8017c50:	4630      	mov	r0, r6
 8017c52:	f3af 8000 	nop.w
 8017c56:	4607      	mov	r7, r0
 8017c58:	1c78      	adds	r0, r7, #1
 8017c5a:	d1d6      	bne.n	8017c0a <_vfiprintf_r+0x19a>
 8017c5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017c5e:	07d9      	lsls	r1, r3, #31
 8017c60:	d405      	bmi.n	8017c6e <_vfiprintf_r+0x1fe>
 8017c62:	89ab      	ldrh	r3, [r5, #12]
 8017c64:	059a      	lsls	r2, r3, #22
 8017c66:	d402      	bmi.n	8017c6e <_vfiprintf_r+0x1fe>
 8017c68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017c6a:	f7ff fc51 	bl	8017510 <__retarget_lock_release_recursive>
 8017c6e:	89ab      	ldrh	r3, [r5, #12]
 8017c70:	065b      	lsls	r3, r3, #25
 8017c72:	f53f af1f 	bmi.w	8017ab4 <_vfiprintf_r+0x44>
 8017c76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017c78:	e71e      	b.n	8017ab8 <_vfiprintf_r+0x48>
 8017c7a:	ab03      	add	r3, sp, #12
 8017c7c:	9300      	str	r3, [sp, #0]
 8017c7e:	462a      	mov	r2, r5
 8017c80:	4b05      	ldr	r3, [pc, #20]	@ (8017c98 <_vfiprintf_r+0x228>)
 8017c82:	a904      	add	r1, sp, #16
 8017c84:	4630      	mov	r0, r6
 8017c86:	f000 f879 	bl	8017d7c <_printf_i>
 8017c8a:	e7e4      	b.n	8017c56 <_vfiprintf_r+0x1e6>
 8017c8c:	0801b99f 	.word	0x0801b99f
 8017c90:	0801b9a9 	.word	0x0801b9a9
 8017c94:	00000000 	.word	0x00000000
 8017c98:	08017a4b 	.word	0x08017a4b
 8017c9c:	0801b9a5 	.word	0x0801b9a5

08017ca0 <_printf_common>:
 8017ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ca4:	4616      	mov	r6, r2
 8017ca6:	4698      	mov	r8, r3
 8017ca8:	688a      	ldr	r2, [r1, #8]
 8017caa:	690b      	ldr	r3, [r1, #16]
 8017cac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017cb0:	4293      	cmp	r3, r2
 8017cb2:	bfb8      	it	lt
 8017cb4:	4613      	movlt	r3, r2
 8017cb6:	6033      	str	r3, [r6, #0]
 8017cb8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017cbc:	4607      	mov	r7, r0
 8017cbe:	460c      	mov	r4, r1
 8017cc0:	b10a      	cbz	r2, 8017cc6 <_printf_common+0x26>
 8017cc2:	3301      	adds	r3, #1
 8017cc4:	6033      	str	r3, [r6, #0]
 8017cc6:	6823      	ldr	r3, [r4, #0]
 8017cc8:	0699      	lsls	r1, r3, #26
 8017cca:	bf42      	ittt	mi
 8017ccc:	6833      	ldrmi	r3, [r6, #0]
 8017cce:	3302      	addmi	r3, #2
 8017cd0:	6033      	strmi	r3, [r6, #0]
 8017cd2:	6825      	ldr	r5, [r4, #0]
 8017cd4:	f015 0506 	ands.w	r5, r5, #6
 8017cd8:	d106      	bne.n	8017ce8 <_printf_common+0x48>
 8017cda:	f104 0a19 	add.w	sl, r4, #25
 8017cde:	68e3      	ldr	r3, [r4, #12]
 8017ce0:	6832      	ldr	r2, [r6, #0]
 8017ce2:	1a9b      	subs	r3, r3, r2
 8017ce4:	42ab      	cmp	r3, r5
 8017ce6:	dc26      	bgt.n	8017d36 <_printf_common+0x96>
 8017ce8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017cec:	6822      	ldr	r2, [r4, #0]
 8017cee:	3b00      	subs	r3, #0
 8017cf0:	bf18      	it	ne
 8017cf2:	2301      	movne	r3, #1
 8017cf4:	0692      	lsls	r2, r2, #26
 8017cf6:	d42b      	bmi.n	8017d50 <_printf_common+0xb0>
 8017cf8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017cfc:	4641      	mov	r1, r8
 8017cfe:	4638      	mov	r0, r7
 8017d00:	47c8      	blx	r9
 8017d02:	3001      	adds	r0, #1
 8017d04:	d01e      	beq.n	8017d44 <_printf_common+0xa4>
 8017d06:	6823      	ldr	r3, [r4, #0]
 8017d08:	6922      	ldr	r2, [r4, #16]
 8017d0a:	f003 0306 	and.w	r3, r3, #6
 8017d0e:	2b04      	cmp	r3, #4
 8017d10:	bf02      	ittt	eq
 8017d12:	68e5      	ldreq	r5, [r4, #12]
 8017d14:	6833      	ldreq	r3, [r6, #0]
 8017d16:	1aed      	subeq	r5, r5, r3
 8017d18:	68a3      	ldr	r3, [r4, #8]
 8017d1a:	bf0c      	ite	eq
 8017d1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017d20:	2500      	movne	r5, #0
 8017d22:	4293      	cmp	r3, r2
 8017d24:	bfc4      	itt	gt
 8017d26:	1a9b      	subgt	r3, r3, r2
 8017d28:	18ed      	addgt	r5, r5, r3
 8017d2a:	2600      	movs	r6, #0
 8017d2c:	341a      	adds	r4, #26
 8017d2e:	42b5      	cmp	r5, r6
 8017d30:	d11a      	bne.n	8017d68 <_printf_common+0xc8>
 8017d32:	2000      	movs	r0, #0
 8017d34:	e008      	b.n	8017d48 <_printf_common+0xa8>
 8017d36:	2301      	movs	r3, #1
 8017d38:	4652      	mov	r2, sl
 8017d3a:	4641      	mov	r1, r8
 8017d3c:	4638      	mov	r0, r7
 8017d3e:	47c8      	blx	r9
 8017d40:	3001      	adds	r0, #1
 8017d42:	d103      	bne.n	8017d4c <_printf_common+0xac>
 8017d44:	f04f 30ff 	mov.w	r0, #4294967295
 8017d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d4c:	3501      	adds	r5, #1
 8017d4e:	e7c6      	b.n	8017cde <_printf_common+0x3e>
 8017d50:	18e1      	adds	r1, r4, r3
 8017d52:	1c5a      	adds	r2, r3, #1
 8017d54:	2030      	movs	r0, #48	@ 0x30
 8017d56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017d5a:	4422      	add	r2, r4
 8017d5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017d60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017d64:	3302      	adds	r3, #2
 8017d66:	e7c7      	b.n	8017cf8 <_printf_common+0x58>
 8017d68:	2301      	movs	r3, #1
 8017d6a:	4622      	mov	r2, r4
 8017d6c:	4641      	mov	r1, r8
 8017d6e:	4638      	mov	r0, r7
 8017d70:	47c8      	blx	r9
 8017d72:	3001      	adds	r0, #1
 8017d74:	d0e6      	beq.n	8017d44 <_printf_common+0xa4>
 8017d76:	3601      	adds	r6, #1
 8017d78:	e7d9      	b.n	8017d2e <_printf_common+0x8e>
	...

08017d7c <_printf_i>:
 8017d7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017d80:	7e0f      	ldrb	r7, [r1, #24]
 8017d82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017d84:	2f78      	cmp	r7, #120	@ 0x78
 8017d86:	4691      	mov	r9, r2
 8017d88:	4680      	mov	r8, r0
 8017d8a:	460c      	mov	r4, r1
 8017d8c:	469a      	mov	sl, r3
 8017d8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017d92:	d807      	bhi.n	8017da4 <_printf_i+0x28>
 8017d94:	2f62      	cmp	r7, #98	@ 0x62
 8017d96:	d80a      	bhi.n	8017dae <_printf_i+0x32>
 8017d98:	2f00      	cmp	r7, #0
 8017d9a:	f000 80d2 	beq.w	8017f42 <_printf_i+0x1c6>
 8017d9e:	2f58      	cmp	r7, #88	@ 0x58
 8017da0:	f000 80b9 	beq.w	8017f16 <_printf_i+0x19a>
 8017da4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017da8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017dac:	e03a      	b.n	8017e24 <_printf_i+0xa8>
 8017dae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017db2:	2b15      	cmp	r3, #21
 8017db4:	d8f6      	bhi.n	8017da4 <_printf_i+0x28>
 8017db6:	a101      	add	r1, pc, #4	@ (adr r1, 8017dbc <_printf_i+0x40>)
 8017db8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017dbc:	08017e15 	.word	0x08017e15
 8017dc0:	08017e29 	.word	0x08017e29
 8017dc4:	08017da5 	.word	0x08017da5
 8017dc8:	08017da5 	.word	0x08017da5
 8017dcc:	08017da5 	.word	0x08017da5
 8017dd0:	08017da5 	.word	0x08017da5
 8017dd4:	08017e29 	.word	0x08017e29
 8017dd8:	08017da5 	.word	0x08017da5
 8017ddc:	08017da5 	.word	0x08017da5
 8017de0:	08017da5 	.word	0x08017da5
 8017de4:	08017da5 	.word	0x08017da5
 8017de8:	08017f29 	.word	0x08017f29
 8017dec:	08017e53 	.word	0x08017e53
 8017df0:	08017ee3 	.word	0x08017ee3
 8017df4:	08017da5 	.word	0x08017da5
 8017df8:	08017da5 	.word	0x08017da5
 8017dfc:	08017f4b 	.word	0x08017f4b
 8017e00:	08017da5 	.word	0x08017da5
 8017e04:	08017e53 	.word	0x08017e53
 8017e08:	08017da5 	.word	0x08017da5
 8017e0c:	08017da5 	.word	0x08017da5
 8017e10:	08017eeb 	.word	0x08017eeb
 8017e14:	6833      	ldr	r3, [r6, #0]
 8017e16:	1d1a      	adds	r2, r3, #4
 8017e18:	681b      	ldr	r3, [r3, #0]
 8017e1a:	6032      	str	r2, [r6, #0]
 8017e1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017e20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017e24:	2301      	movs	r3, #1
 8017e26:	e09d      	b.n	8017f64 <_printf_i+0x1e8>
 8017e28:	6833      	ldr	r3, [r6, #0]
 8017e2a:	6820      	ldr	r0, [r4, #0]
 8017e2c:	1d19      	adds	r1, r3, #4
 8017e2e:	6031      	str	r1, [r6, #0]
 8017e30:	0606      	lsls	r6, r0, #24
 8017e32:	d501      	bpl.n	8017e38 <_printf_i+0xbc>
 8017e34:	681d      	ldr	r5, [r3, #0]
 8017e36:	e003      	b.n	8017e40 <_printf_i+0xc4>
 8017e38:	0645      	lsls	r5, r0, #25
 8017e3a:	d5fb      	bpl.n	8017e34 <_printf_i+0xb8>
 8017e3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017e40:	2d00      	cmp	r5, #0
 8017e42:	da03      	bge.n	8017e4c <_printf_i+0xd0>
 8017e44:	232d      	movs	r3, #45	@ 0x2d
 8017e46:	426d      	negs	r5, r5
 8017e48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017e4c:	4859      	ldr	r0, [pc, #356]	@ (8017fb4 <_printf_i+0x238>)
 8017e4e:	230a      	movs	r3, #10
 8017e50:	e011      	b.n	8017e76 <_printf_i+0xfa>
 8017e52:	6821      	ldr	r1, [r4, #0]
 8017e54:	6833      	ldr	r3, [r6, #0]
 8017e56:	0608      	lsls	r0, r1, #24
 8017e58:	f853 5b04 	ldr.w	r5, [r3], #4
 8017e5c:	d402      	bmi.n	8017e64 <_printf_i+0xe8>
 8017e5e:	0649      	lsls	r1, r1, #25
 8017e60:	bf48      	it	mi
 8017e62:	b2ad      	uxthmi	r5, r5
 8017e64:	2f6f      	cmp	r7, #111	@ 0x6f
 8017e66:	4853      	ldr	r0, [pc, #332]	@ (8017fb4 <_printf_i+0x238>)
 8017e68:	6033      	str	r3, [r6, #0]
 8017e6a:	bf14      	ite	ne
 8017e6c:	230a      	movne	r3, #10
 8017e6e:	2308      	moveq	r3, #8
 8017e70:	2100      	movs	r1, #0
 8017e72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017e76:	6866      	ldr	r6, [r4, #4]
 8017e78:	60a6      	str	r6, [r4, #8]
 8017e7a:	2e00      	cmp	r6, #0
 8017e7c:	bfa2      	ittt	ge
 8017e7e:	6821      	ldrge	r1, [r4, #0]
 8017e80:	f021 0104 	bicge.w	r1, r1, #4
 8017e84:	6021      	strge	r1, [r4, #0]
 8017e86:	b90d      	cbnz	r5, 8017e8c <_printf_i+0x110>
 8017e88:	2e00      	cmp	r6, #0
 8017e8a:	d04b      	beq.n	8017f24 <_printf_i+0x1a8>
 8017e8c:	4616      	mov	r6, r2
 8017e8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8017e92:	fb03 5711 	mls	r7, r3, r1, r5
 8017e96:	5dc7      	ldrb	r7, [r0, r7]
 8017e98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017e9c:	462f      	mov	r7, r5
 8017e9e:	42bb      	cmp	r3, r7
 8017ea0:	460d      	mov	r5, r1
 8017ea2:	d9f4      	bls.n	8017e8e <_printf_i+0x112>
 8017ea4:	2b08      	cmp	r3, #8
 8017ea6:	d10b      	bne.n	8017ec0 <_printf_i+0x144>
 8017ea8:	6823      	ldr	r3, [r4, #0]
 8017eaa:	07df      	lsls	r7, r3, #31
 8017eac:	d508      	bpl.n	8017ec0 <_printf_i+0x144>
 8017eae:	6923      	ldr	r3, [r4, #16]
 8017eb0:	6861      	ldr	r1, [r4, #4]
 8017eb2:	4299      	cmp	r1, r3
 8017eb4:	bfde      	ittt	le
 8017eb6:	2330      	movle	r3, #48	@ 0x30
 8017eb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017ebc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017ec0:	1b92      	subs	r2, r2, r6
 8017ec2:	6122      	str	r2, [r4, #16]
 8017ec4:	f8cd a000 	str.w	sl, [sp]
 8017ec8:	464b      	mov	r3, r9
 8017eca:	aa03      	add	r2, sp, #12
 8017ecc:	4621      	mov	r1, r4
 8017ece:	4640      	mov	r0, r8
 8017ed0:	f7ff fee6 	bl	8017ca0 <_printf_common>
 8017ed4:	3001      	adds	r0, #1
 8017ed6:	d14a      	bne.n	8017f6e <_printf_i+0x1f2>
 8017ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8017edc:	b004      	add	sp, #16
 8017ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ee2:	6823      	ldr	r3, [r4, #0]
 8017ee4:	f043 0320 	orr.w	r3, r3, #32
 8017ee8:	6023      	str	r3, [r4, #0]
 8017eea:	4833      	ldr	r0, [pc, #204]	@ (8017fb8 <_printf_i+0x23c>)
 8017eec:	2778      	movs	r7, #120	@ 0x78
 8017eee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017ef2:	6823      	ldr	r3, [r4, #0]
 8017ef4:	6831      	ldr	r1, [r6, #0]
 8017ef6:	061f      	lsls	r7, r3, #24
 8017ef8:	f851 5b04 	ldr.w	r5, [r1], #4
 8017efc:	d402      	bmi.n	8017f04 <_printf_i+0x188>
 8017efe:	065f      	lsls	r7, r3, #25
 8017f00:	bf48      	it	mi
 8017f02:	b2ad      	uxthmi	r5, r5
 8017f04:	6031      	str	r1, [r6, #0]
 8017f06:	07d9      	lsls	r1, r3, #31
 8017f08:	bf44      	itt	mi
 8017f0a:	f043 0320 	orrmi.w	r3, r3, #32
 8017f0e:	6023      	strmi	r3, [r4, #0]
 8017f10:	b11d      	cbz	r5, 8017f1a <_printf_i+0x19e>
 8017f12:	2310      	movs	r3, #16
 8017f14:	e7ac      	b.n	8017e70 <_printf_i+0xf4>
 8017f16:	4827      	ldr	r0, [pc, #156]	@ (8017fb4 <_printf_i+0x238>)
 8017f18:	e7e9      	b.n	8017eee <_printf_i+0x172>
 8017f1a:	6823      	ldr	r3, [r4, #0]
 8017f1c:	f023 0320 	bic.w	r3, r3, #32
 8017f20:	6023      	str	r3, [r4, #0]
 8017f22:	e7f6      	b.n	8017f12 <_printf_i+0x196>
 8017f24:	4616      	mov	r6, r2
 8017f26:	e7bd      	b.n	8017ea4 <_printf_i+0x128>
 8017f28:	6833      	ldr	r3, [r6, #0]
 8017f2a:	6825      	ldr	r5, [r4, #0]
 8017f2c:	6961      	ldr	r1, [r4, #20]
 8017f2e:	1d18      	adds	r0, r3, #4
 8017f30:	6030      	str	r0, [r6, #0]
 8017f32:	062e      	lsls	r6, r5, #24
 8017f34:	681b      	ldr	r3, [r3, #0]
 8017f36:	d501      	bpl.n	8017f3c <_printf_i+0x1c0>
 8017f38:	6019      	str	r1, [r3, #0]
 8017f3a:	e002      	b.n	8017f42 <_printf_i+0x1c6>
 8017f3c:	0668      	lsls	r0, r5, #25
 8017f3e:	d5fb      	bpl.n	8017f38 <_printf_i+0x1bc>
 8017f40:	8019      	strh	r1, [r3, #0]
 8017f42:	2300      	movs	r3, #0
 8017f44:	6123      	str	r3, [r4, #16]
 8017f46:	4616      	mov	r6, r2
 8017f48:	e7bc      	b.n	8017ec4 <_printf_i+0x148>
 8017f4a:	6833      	ldr	r3, [r6, #0]
 8017f4c:	1d1a      	adds	r2, r3, #4
 8017f4e:	6032      	str	r2, [r6, #0]
 8017f50:	681e      	ldr	r6, [r3, #0]
 8017f52:	6862      	ldr	r2, [r4, #4]
 8017f54:	2100      	movs	r1, #0
 8017f56:	4630      	mov	r0, r6
 8017f58:	f7e8 f952 	bl	8000200 <memchr>
 8017f5c:	b108      	cbz	r0, 8017f62 <_printf_i+0x1e6>
 8017f5e:	1b80      	subs	r0, r0, r6
 8017f60:	6060      	str	r0, [r4, #4]
 8017f62:	6863      	ldr	r3, [r4, #4]
 8017f64:	6123      	str	r3, [r4, #16]
 8017f66:	2300      	movs	r3, #0
 8017f68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017f6c:	e7aa      	b.n	8017ec4 <_printf_i+0x148>
 8017f6e:	6923      	ldr	r3, [r4, #16]
 8017f70:	4632      	mov	r2, r6
 8017f72:	4649      	mov	r1, r9
 8017f74:	4640      	mov	r0, r8
 8017f76:	47d0      	blx	sl
 8017f78:	3001      	adds	r0, #1
 8017f7a:	d0ad      	beq.n	8017ed8 <_printf_i+0x15c>
 8017f7c:	6823      	ldr	r3, [r4, #0]
 8017f7e:	079b      	lsls	r3, r3, #30
 8017f80:	d413      	bmi.n	8017faa <_printf_i+0x22e>
 8017f82:	68e0      	ldr	r0, [r4, #12]
 8017f84:	9b03      	ldr	r3, [sp, #12]
 8017f86:	4298      	cmp	r0, r3
 8017f88:	bfb8      	it	lt
 8017f8a:	4618      	movlt	r0, r3
 8017f8c:	e7a6      	b.n	8017edc <_printf_i+0x160>
 8017f8e:	2301      	movs	r3, #1
 8017f90:	4632      	mov	r2, r6
 8017f92:	4649      	mov	r1, r9
 8017f94:	4640      	mov	r0, r8
 8017f96:	47d0      	blx	sl
 8017f98:	3001      	adds	r0, #1
 8017f9a:	d09d      	beq.n	8017ed8 <_printf_i+0x15c>
 8017f9c:	3501      	adds	r5, #1
 8017f9e:	68e3      	ldr	r3, [r4, #12]
 8017fa0:	9903      	ldr	r1, [sp, #12]
 8017fa2:	1a5b      	subs	r3, r3, r1
 8017fa4:	42ab      	cmp	r3, r5
 8017fa6:	dcf2      	bgt.n	8017f8e <_printf_i+0x212>
 8017fa8:	e7eb      	b.n	8017f82 <_printf_i+0x206>
 8017faa:	2500      	movs	r5, #0
 8017fac:	f104 0619 	add.w	r6, r4, #25
 8017fb0:	e7f5      	b.n	8017f9e <_printf_i+0x222>
 8017fb2:	bf00      	nop
 8017fb4:	0801b9b0 	.word	0x0801b9b0
 8017fb8:	0801b9c1 	.word	0x0801b9c1

08017fbc <__sflush_r>:
 8017fbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fc4:	0716      	lsls	r6, r2, #28
 8017fc6:	4605      	mov	r5, r0
 8017fc8:	460c      	mov	r4, r1
 8017fca:	d454      	bmi.n	8018076 <__sflush_r+0xba>
 8017fcc:	684b      	ldr	r3, [r1, #4]
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	dc02      	bgt.n	8017fd8 <__sflush_r+0x1c>
 8017fd2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	dd48      	ble.n	801806a <__sflush_r+0xae>
 8017fd8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017fda:	2e00      	cmp	r6, #0
 8017fdc:	d045      	beq.n	801806a <__sflush_r+0xae>
 8017fde:	2300      	movs	r3, #0
 8017fe0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017fe4:	682f      	ldr	r7, [r5, #0]
 8017fe6:	6a21      	ldr	r1, [r4, #32]
 8017fe8:	602b      	str	r3, [r5, #0]
 8017fea:	d030      	beq.n	801804e <__sflush_r+0x92>
 8017fec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017fee:	89a3      	ldrh	r3, [r4, #12]
 8017ff0:	0759      	lsls	r1, r3, #29
 8017ff2:	d505      	bpl.n	8018000 <__sflush_r+0x44>
 8017ff4:	6863      	ldr	r3, [r4, #4]
 8017ff6:	1ad2      	subs	r2, r2, r3
 8017ff8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017ffa:	b10b      	cbz	r3, 8018000 <__sflush_r+0x44>
 8017ffc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017ffe:	1ad2      	subs	r2, r2, r3
 8018000:	2300      	movs	r3, #0
 8018002:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018004:	6a21      	ldr	r1, [r4, #32]
 8018006:	4628      	mov	r0, r5
 8018008:	47b0      	blx	r6
 801800a:	1c43      	adds	r3, r0, #1
 801800c:	89a3      	ldrh	r3, [r4, #12]
 801800e:	d106      	bne.n	801801e <__sflush_r+0x62>
 8018010:	6829      	ldr	r1, [r5, #0]
 8018012:	291d      	cmp	r1, #29
 8018014:	d82b      	bhi.n	801806e <__sflush_r+0xb2>
 8018016:	4a2a      	ldr	r2, [pc, #168]	@ (80180c0 <__sflush_r+0x104>)
 8018018:	410a      	asrs	r2, r1
 801801a:	07d6      	lsls	r6, r2, #31
 801801c:	d427      	bmi.n	801806e <__sflush_r+0xb2>
 801801e:	2200      	movs	r2, #0
 8018020:	6062      	str	r2, [r4, #4]
 8018022:	04d9      	lsls	r1, r3, #19
 8018024:	6922      	ldr	r2, [r4, #16]
 8018026:	6022      	str	r2, [r4, #0]
 8018028:	d504      	bpl.n	8018034 <__sflush_r+0x78>
 801802a:	1c42      	adds	r2, r0, #1
 801802c:	d101      	bne.n	8018032 <__sflush_r+0x76>
 801802e:	682b      	ldr	r3, [r5, #0]
 8018030:	b903      	cbnz	r3, 8018034 <__sflush_r+0x78>
 8018032:	6560      	str	r0, [r4, #84]	@ 0x54
 8018034:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018036:	602f      	str	r7, [r5, #0]
 8018038:	b1b9      	cbz	r1, 801806a <__sflush_r+0xae>
 801803a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801803e:	4299      	cmp	r1, r3
 8018040:	d002      	beq.n	8018048 <__sflush_r+0x8c>
 8018042:	4628      	mov	r0, r5
 8018044:	f7ff fa92 	bl	801756c <_free_r>
 8018048:	2300      	movs	r3, #0
 801804a:	6363      	str	r3, [r4, #52]	@ 0x34
 801804c:	e00d      	b.n	801806a <__sflush_r+0xae>
 801804e:	2301      	movs	r3, #1
 8018050:	4628      	mov	r0, r5
 8018052:	47b0      	blx	r6
 8018054:	4602      	mov	r2, r0
 8018056:	1c50      	adds	r0, r2, #1
 8018058:	d1c9      	bne.n	8017fee <__sflush_r+0x32>
 801805a:	682b      	ldr	r3, [r5, #0]
 801805c:	2b00      	cmp	r3, #0
 801805e:	d0c6      	beq.n	8017fee <__sflush_r+0x32>
 8018060:	2b1d      	cmp	r3, #29
 8018062:	d001      	beq.n	8018068 <__sflush_r+0xac>
 8018064:	2b16      	cmp	r3, #22
 8018066:	d11e      	bne.n	80180a6 <__sflush_r+0xea>
 8018068:	602f      	str	r7, [r5, #0]
 801806a:	2000      	movs	r0, #0
 801806c:	e022      	b.n	80180b4 <__sflush_r+0xf8>
 801806e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018072:	b21b      	sxth	r3, r3
 8018074:	e01b      	b.n	80180ae <__sflush_r+0xf2>
 8018076:	690f      	ldr	r7, [r1, #16]
 8018078:	2f00      	cmp	r7, #0
 801807a:	d0f6      	beq.n	801806a <__sflush_r+0xae>
 801807c:	0793      	lsls	r3, r2, #30
 801807e:	680e      	ldr	r6, [r1, #0]
 8018080:	bf08      	it	eq
 8018082:	694b      	ldreq	r3, [r1, #20]
 8018084:	600f      	str	r7, [r1, #0]
 8018086:	bf18      	it	ne
 8018088:	2300      	movne	r3, #0
 801808a:	eba6 0807 	sub.w	r8, r6, r7
 801808e:	608b      	str	r3, [r1, #8]
 8018090:	f1b8 0f00 	cmp.w	r8, #0
 8018094:	dde9      	ble.n	801806a <__sflush_r+0xae>
 8018096:	6a21      	ldr	r1, [r4, #32]
 8018098:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801809a:	4643      	mov	r3, r8
 801809c:	463a      	mov	r2, r7
 801809e:	4628      	mov	r0, r5
 80180a0:	47b0      	blx	r6
 80180a2:	2800      	cmp	r0, #0
 80180a4:	dc08      	bgt.n	80180b8 <__sflush_r+0xfc>
 80180a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80180aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80180ae:	81a3      	strh	r3, [r4, #12]
 80180b0:	f04f 30ff 	mov.w	r0, #4294967295
 80180b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180b8:	4407      	add	r7, r0
 80180ba:	eba8 0800 	sub.w	r8, r8, r0
 80180be:	e7e7      	b.n	8018090 <__sflush_r+0xd4>
 80180c0:	dfbffffe 	.word	0xdfbffffe

080180c4 <_fflush_r>:
 80180c4:	b538      	push	{r3, r4, r5, lr}
 80180c6:	690b      	ldr	r3, [r1, #16]
 80180c8:	4605      	mov	r5, r0
 80180ca:	460c      	mov	r4, r1
 80180cc:	b913      	cbnz	r3, 80180d4 <_fflush_r+0x10>
 80180ce:	2500      	movs	r5, #0
 80180d0:	4628      	mov	r0, r5
 80180d2:	bd38      	pop	{r3, r4, r5, pc}
 80180d4:	b118      	cbz	r0, 80180de <_fflush_r+0x1a>
 80180d6:	6a03      	ldr	r3, [r0, #32]
 80180d8:	b90b      	cbnz	r3, 80180de <_fflush_r+0x1a>
 80180da:	f7fe ff87 	bl	8016fec <__sinit>
 80180de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	d0f3      	beq.n	80180ce <_fflush_r+0xa>
 80180e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80180e8:	07d0      	lsls	r0, r2, #31
 80180ea:	d404      	bmi.n	80180f6 <_fflush_r+0x32>
 80180ec:	0599      	lsls	r1, r3, #22
 80180ee:	d402      	bmi.n	80180f6 <_fflush_r+0x32>
 80180f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80180f2:	f7ff fa0c 	bl	801750e <__retarget_lock_acquire_recursive>
 80180f6:	4628      	mov	r0, r5
 80180f8:	4621      	mov	r1, r4
 80180fa:	f7ff ff5f 	bl	8017fbc <__sflush_r>
 80180fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018100:	07da      	lsls	r2, r3, #31
 8018102:	4605      	mov	r5, r0
 8018104:	d4e4      	bmi.n	80180d0 <_fflush_r+0xc>
 8018106:	89a3      	ldrh	r3, [r4, #12]
 8018108:	059b      	lsls	r3, r3, #22
 801810a:	d4e1      	bmi.n	80180d0 <_fflush_r+0xc>
 801810c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801810e:	f7ff f9ff 	bl	8017510 <__retarget_lock_release_recursive>
 8018112:	e7dd      	b.n	80180d0 <_fflush_r+0xc>

08018114 <fiprintf>:
 8018114:	b40e      	push	{r1, r2, r3}
 8018116:	b503      	push	{r0, r1, lr}
 8018118:	4601      	mov	r1, r0
 801811a:	ab03      	add	r3, sp, #12
 801811c:	4805      	ldr	r0, [pc, #20]	@ (8018134 <fiprintf+0x20>)
 801811e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018122:	6800      	ldr	r0, [r0, #0]
 8018124:	9301      	str	r3, [sp, #4]
 8018126:	f7ff fca3 	bl	8017a70 <_vfiprintf_r>
 801812a:	b002      	add	sp, #8
 801812c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018130:	b003      	add	sp, #12
 8018132:	4770      	bx	lr
 8018134:	20000044 	.word	0x20000044

08018138 <__swhatbuf_r>:
 8018138:	b570      	push	{r4, r5, r6, lr}
 801813a:	460c      	mov	r4, r1
 801813c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018140:	2900      	cmp	r1, #0
 8018142:	b096      	sub	sp, #88	@ 0x58
 8018144:	4615      	mov	r5, r2
 8018146:	461e      	mov	r6, r3
 8018148:	da0d      	bge.n	8018166 <__swhatbuf_r+0x2e>
 801814a:	89a3      	ldrh	r3, [r4, #12]
 801814c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018150:	f04f 0100 	mov.w	r1, #0
 8018154:	bf14      	ite	ne
 8018156:	2340      	movne	r3, #64	@ 0x40
 8018158:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801815c:	2000      	movs	r0, #0
 801815e:	6031      	str	r1, [r6, #0]
 8018160:	602b      	str	r3, [r5, #0]
 8018162:	b016      	add	sp, #88	@ 0x58
 8018164:	bd70      	pop	{r4, r5, r6, pc}
 8018166:	466a      	mov	r2, sp
 8018168:	f000 f848 	bl	80181fc <_fstat_r>
 801816c:	2800      	cmp	r0, #0
 801816e:	dbec      	blt.n	801814a <__swhatbuf_r+0x12>
 8018170:	9901      	ldr	r1, [sp, #4]
 8018172:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018176:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801817a:	4259      	negs	r1, r3
 801817c:	4159      	adcs	r1, r3
 801817e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018182:	e7eb      	b.n	801815c <__swhatbuf_r+0x24>

08018184 <__smakebuf_r>:
 8018184:	898b      	ldrh	r3, [r1, #12]
 8018186:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018188:	079d      	lsls	r5, r3, #30
 801818a:	4606      	mov	r6, r0
 801818c:	460c      	mov	r4, r1
 801818e:	d507      	bpl.n	80181a0 <__smakebuf_r+0x1c>
 8018190:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018194:	6023      	str	r3, [r4, #0]
 8018196:	6123      	str	r3, [r4, #16]
 8018198:	2301      	movs	r3, #1
 801819a:	6163      	str	r3, [r4, #20]
 801819c:	b003      	add	sp, #12
 801819e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80181a0:	ab01      	add	r3, sp, #4
 80181a2:	466a      	mov	r2, sp
 80181a4:	f7ff ffc8 	bl	8018138 <__swhatbuf_r>
 80181a8:	9f00      	ldr	r7, [sp, #0]
 80181aa:	4605      	mov	r5, r0
 80181ac:	4639      	mov	r1, r7
 80181ae:	4630      	mov	r0, r6
 80181b0:	f7ff fa50 	bl	8017654 <_malloc_r>
 80181b4:	b948      	cbnz	r0, 80181ca <__smakebuf_r+0x46>
 80181b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80181ba:	059a      	lsls	r2, r3, #22
 80181bc:	d4ee      	bmi.n	801819c <__smakebuf_r+0x18>
 80181be:	f023 0303 	bic.w	r3, r3, #3
 80181c2:	f043 0302 	orr.w	r3, r3, #2
 80181c6:	81a3      	strh	r3, [r4, #12]
 80181c8:	e7e2      	b.n	8018190 <__smakebuf_r+0xc>
 80181ca:	89a3      	ldrh	r3, [r4, #12]
 80181cc:	6020      	str	r0, [r4, #0]
 80181ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80181d2:	81a3      	strh	r3, [r4, #12]
 80181d4:	9b01      	ldr	r3, [sp, #4]
 80181d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80181da:	b15b      	cbz	r3, 80181f4 <__smakebuf_r+0x70>
 80181dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80181e0:	4630      	mov	r0, r6
 80181e2:	f000 f81d 	bl	8018220 <_isatty_r>
 80181e6:	b128      	cbz	r0, 80181f4 <__smakebuf_r+0x70>
 80181e8:	89a3      	ldrh	r3, [r4, #12]
 80181ea:	f023 0303 	bic.w	r3, r3, #3
 80181ee:	f043 0301 	orr.w	r3, r3, #1
 80181f2:	81a3      	strh	r3, [r4, #12]
 80181f4:	89a3      	ldrh	r3, [r4, #12]
 80181f6:	431d      	orrs	r5, r3
 80181f8:	81a5      	strh	r5, [r4, #12]
 80181fa:	e7cf      	b.n	801819c <__smakebuf_r+0x18>

080181fc <_fstat_r>:
 80181fc:	b538      	push	{r3, r4, r5, lr}
 80181fe:	4d07      	ldr	r5, [pc, #28]	@ (801821c <_fstat_r+0x20>)
 8018200:	2300      	movs	r3, #0
 8018202:	4604      	mov	r4, r0
 8018204:	4608      	mov	r0, r1
 8018206:	4611      	mov	r1, r2
 8018208:	602b      	str	r3, [r5, #0]
 801820a:	f7e9 f8ff 	bl	800140c <_fstat>
 801820e:	1c43      	adds	r3, r0, #1
 8018210:	d102      	bne.n	8018218 <_fstat_r+0x1c>
 8018212:	682b      	ldr	r3, [r5, #0]
 8018214:	b103      	cbz	r3, 8018218 <_fstat_r+0x1c>
 8018216:	6023      	str	r3, [r4, #0]
 8018218:	bd38      	pop	{r3, r4, r5, pc}
 801821a:	bf00      	nop
 801821c:	2000cdb0 	.word	0x2000cdb0

08018220 <_isatty_r>:
 8018220:	b538      	push	{r3, r4, r5, lr}
 8018222:	4d06      	ldr	r5, [pc, #24]	@ (801823c <_isatty_r+0x1c>)
 8018224:	2300      	movs	r3, #0
 8018226:	4604      	mov	r4, r0
 8018228:	4608      	mov	r0, r1
 801822a:	602b      	str	r3, [r5, #0]
 801822c:	f7e9 f8fe 	bl	800142c <_isatty>
 8018230:	1c43      	adds	r3, r0, #1
 8018232:	d102      	bne.n	801823a <_isatty_r+0x1a>
 8018234:	682b      	ldr	r3, [r5, #0]
 8018236:	b103      	cbz	r3, 801823a <_isatty_r+0x1a>
 8018238:	6023      	str	r3, [r4, #0]
 801823a:	bd38      	pop	{r3, r4, r5, pc}
 801823c:	2000cdb0 	.word	0x2000cdb0

08018240 <_sbrk_r>:
 8018240:	b538      	push	{r3, r4, r5, lr}
 8018242:	4d06      	ldr	r5, [pc, #24]	@ (801825c <_sbrk_r+0x1c>)
 8018244:	2300      	movs	r3, #0
 8018246:	4604      	mov	r4, r0
 8018248:	4608      	mov	r0, r1
 801824a:	602b      	str	r3, [r5, #0]
 801824c:	f7e9 f906 	bl	800145c <_sbrk>
 8018250:	1c43      	adds	r3, r0, #1
 8018252:	d102      	bne.n	801825a <_sbrk_r+0x1a>
 8018254:	682b      	ldr	r3, [r5, #0]
 8018256:	b103      	cbz	r3, 801825a <_sbrk_r+0x1a>
 8018258:	6023      	str	r3, [r4, #0]
 801825a:	bd38      	pop	{r3, r4, r5, pc}
 801825c:	2000cdb0 	.word	0x2000cdb0

08018260 <abort>:
 8018260:	b508      	push	{r3, lr}
 8018262:	2006      	movs	r0, #6
 8018264:	f000 f85a 	bl	801831c <raise>
 8018268:	2001      	movs	r0, #1
 801826a:	f7e9 f89b 	bl	80013a4 <_exit>

0801826e <_realloc_r>:
 801826e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018272:	4680      	mov	r8, r0
 8018274:	4615      	mov	r5, r2
 8018276:	460c      	mov	r4, r1
 8018278:	b921      	cbnz	r1, 8018284 <_realloc_r+0x16>
 801827a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801827e:	4611      	mov	r1, r2
 8018280:	f7ff b9e8 	b.w	8017654 <_malloc_r>
 8018284:	b92a      	cbnz	r2, 8018292 <_realloc_r+0x24>
 8018286:	f7ff f971 	bl	801756c <_free_r>
 801828a:	2400      	movs	r4, #0
 801828c:	4620      	mov	r0, r4
 801828e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018292:	f000 f85f 	bl	8018354 <_malloc_usable_size_r>
 8018296:	4285      	cmp	r5, r0
 8018298:	4606      	mov	r6, r0
 801829a:	d802      	bhi.n	80182a2 <_realloc_r+0x34>
 801829c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80182a0:	d8f4      	bhi.n	801828c <_realloc_r+0x1e>
 80182a2:	4629      	mov	r1, r5
 80182a4:	4640      	mov	r0, r8
 80182a6:	f7ff f9d5 	bl	8017654 <_malloc_r>
 80182aa:	4607      	mov	r7, r0
 80182ac:	2800      	cmp	r0, #0
 80182ae:	d0ec      	beq.n	801828a <_realloc_r+0x1c>
 80182b0:	42b5      	cmp	r5, r6
 80182b2:	462a      	mov	r2, r5
 80182b4:	4621      	mov	r1, r4
 80182b6:	bf28      	it	cs
 80182b8:	4632      	movcs	r2, r6
 80182ba:	f7ff f92a 	bl	8017512 <memcpy>
 80182be:	4621      	mov	r1, r4
 80182c0:	4640      	mov	r0, r8
 80182c2:	f7ff f953 	bl	801756c <_free_r>
 80182c6:	463c      	mov	r4, r7
 80182c8:	e7e0      	b.n	801828c <_realloc_r+0x1e>

080182ca <_raise_r>:
 80182ca:	291f      	cmp	r1, #31
 80182cc:	b538      	push	{r3, r4, r5, lr}
 80182ce:	4605      	mov	r5, r0
 80182d0:	460c      	mov	r4, r1
 80182d2:	d904      	bls.n	80182de <_raise_r+0x14>
 80182d4:	2316      	movs	r3, #22
 80182d6:	6003      	str	r3, [r0, #0]
 80182d8:	f04f 30ff 	mov.w	r0, #4294967295
 80182dc:	bd38      	pop	{r3, r4, r5, pc}
 80182de:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80182e0:	b112      	cbz	r2, 80182e8 <_raise_r+0x1e>
 80182e2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80182e6:	b94b      	cbnz	r3, 80182fc <_raise_r+0x32>
 80182e8:	4628      	mov	r0, r5
 80182ea:	f000 f831 	bl	8018350 <_getpid_r>
 80182ee:	4622      	mov	r2, r4
 80182f0:	4601      	mov	r1, r0
 80182f2:	4628      	mov	r0, r5
 80182f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80182f8:	f000 b818 	b.w	801832c <_kill_r>
 80182fc:	2b01      	cmp	r3, #1
 80182fe:	d00a      	beq.n	8018316 <_raise_r+0x4c>
 8018300:	1c59      	adds	r1, r3, #1
 8018302:	d103      	bne.n	801830c <_raise_r+0x42>
 8018304:	2316      	movs	r3, #22
 8018306:	6003      	str	r3, [r0, #0]
 8018308:	2001      	movs	r0, #1
 801830a:	e7e7      	b.n	80182dc <_raise_r+0x12>
 801830c:	2100      	movs	r1, #0
 801830e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018312:	4620      	mov	r0, r4
 8018314:	4798      	blx	r3
 8018316:	2000      	movs	r0, #0
 8018318:	e7e0      	b.n	80182dc <_raise_r+0x12>
	...

0801831c <raise>:
 801831c:	4b02      	ldr	r3, [pc, #8]	@ (8018328 <raise+0xc>)
 801831e:	4601      	mov	r1, r0
 8018320:	6818      	ldr	r0, [r3, #0]
 8018322:	f7ff bfd2 	b.w	80182ca <_raise_r>
 8018326:	bf00      	nop
 8018328:	20000044 	.word	0x20000044

0801832c <_kill_r>:
 801832c:	b538      	push	{r3, r4, r5, lr}
 801832e:	4d07      	ldr	r5, [pc, #28]	@ (801834c <_kill_r+0x20>)
 8018330:	2300      	movs	r3, #0
 8018332:	4604      	mov	r4, r0
 8018334:	4608      	mov	r0, r1
 8018336:	4611      	mov	r1, r2
 8018338:	602b      	str	r3, [r5, #0]
 801833a:	f7e9 f821 	bl	8001380 <_kill>
 801833e:	1c43      	adds	r3, r0, #1
 8018340:	d102      	bne.n	8018348 <_kill_r+0x1c>
 8018342:	682b      	ldr	r3, [r5, #0]
 8018344:	b103      	cbz	r3, 8018348 <_kill_r+0x1c>
 8018346:	6023      	str	r3, [r4, #0]
 8018348:	bd38      	pop	{r3, r4, r5, pc}
 801834a:	bf00      	nop
 801834c:	2000cdb0 	.word	0x2000cdb0

08018350 <_getpid_r>:
 8018350:	f7e9 b80e 	b.w	8001370 <_getpid>

08018354 <_malloc_usable_size_r>:
 8018354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018358:	1f18      	subs	r0, r3, #4
 801835a:	2b00      	cmp	r3, #0
 801835c:	bfbc      	itt	lt
 801835e:	580b      	ldrlt	r3, [r1, r0]
 8018360:	18c0      	addlt	r0, r0, r3
 8018362:	4770      	bx	lr

08018364 <_init>:
 8018364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018366:	bf00      	nop
 8018368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801836a:	bc08      	pop	{r3}
 801836c:	469e      	mov	lr, r3
 801836e:	4770      	bx	lr

08018370 <_fini>:
 8018370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018372:	bf00      	nop
 8018374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018376:	bc08      	pop	{r3}
 8018378:	469e      	mov	lr, r3
 801837a:	4770      	bx	lr
