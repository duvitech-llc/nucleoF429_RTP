
nucleoF429_RTP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017ff8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003604  080181a8  080181a8  000191a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b7ac  0801b7ac  0001d094  2**0
                  CONTENTS
  4 .ARM          00000008  0801b7ac  0801b7ac  0001c7ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b7b4  0801b7b4  0001d094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b7b4  0801b7b4  0001c7b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b7b8  0801b7b8  0001c7b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  0801b7bc  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001d094  2**0
                  CONTENTS
 10 .bss          0000cd28  20000094  20000094  0001d094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000cdbc  2000cdbc  0001d094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001d094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00034110  00000000  00000000  0001d0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008656  00000000  00000000  000511d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002610  00000000  00000000  00059830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001e07  00000000  00000000  0005be40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000365f1  00000000  00000000  0005dc47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003c508  00000000  00000000  00094238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001082a1  00000000  00000000  000d0740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001d89e1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a700  00000000  00000000  001d8a24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  001e3124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08018190 	.word	0x08018190

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	08018190 	.word	0x08018190

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	4a07      	ldr	r2, [pc, #28]	@ (80005bc <vApplicationGetIdleTaskMemory+0x2c>)
 80005a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	4a06      	ldr	r2, [pc, #24]	@ (80005c0 <vApplicationGetIdleTaskMemory+0x30>)
 80005a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2280      	movs	r2, #128	@ 0x80
 80005ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	200000b0 	.word	0x200000b0
 80005c0:	20000150 	.word	0x20000150

080005c4 <_write>:
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


#ifdef __GNUC__
int _write(int fd, const void *buf, size_t count){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
	UNUSED(fd);
	uint8_t * src = (uint8_t *)buf;
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	617b      	str	r3, [r7, #20]
	if(bInit_dma)
 80005d4:	4b12      	ldr	r3, [pc, #72]	@ (8000620 <_write+0x5c>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d00e      	beq.n	80005fa <_write+0x36>
	{
	    if (lwrb_get_free(&usart_tx_buff) >= count) {
 80005dc:	4811      	ldr	r0, [pc, #68]	@ (8000624 <_write+0x60>)
 80005de:	f000 f945 	bl	800086c <lwrb_get_free>
 80005e2:	4602      	mov	r2, r0
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d815      	bhi.n	8000616 <_write+0x52>
	        lwrb_write(&usart_tx_buff, buf, count);
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	68b9      	ldr	r1, [r7, #8]
 80005ee:	480d      	ldr	r0, [pc, #52]	@ (8000624 <_write+0x60>)
 80005f0:	f000 f8ba 	bl	8000768 <lwrb_write>
	        usart_start_tx_dma_transfer();
 80005f4:	f000 f832 	bl	800065c <usart_start_tx_dma_transfer>
 80005f8:	e00d      	b.n	8000616 <_write+0x52>
	    }
	}
	else
	{
		HAL_StatusTypeDef com_tx_status = HAL_UART_Transmit(&huart3, src, count, 10);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	230a      	movs	r3, #10
 8000600:	6979      	ldr	r1, [r7, #20]
 8000602:	4809      	ldr	r0, [pc, #36]	@ (8000628 <_write+0x64>)
 8000604:	f004 fd20 	bl	8005048 <HAL_UART_Transmit>
 8000608:	4603      	mov	r3, r0
 800060a:	74fb      	strb	r3, [r7, #19]
		if(com_tx_status != HAL_OK)
 800060c:	7cfb      	ldrb	r3, [r7, #19]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <_write+0x52>
		{
			Error_Handler();
 8000612:	f000 fc9b 	bl	8000f4c <Error_Handler>
		}
	}

	return count;
 8000616:	687b      	ldr	r3, [r7, #4]
}
 8000618:	4618      	mov	r0, r3
 800061a:	3718      	adds	r7, #24
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000350 	.word	0x20000350
 8000624:	20000354 	.word	0x20000354
 8000628:	2000079c 	.word	0x2000079c

0800062c <init_dma_logging>:
  return ch;
}
#endif

void init_dma_logging()
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
    /* Initialize ringbuff */
    lwrb_init(&usart_tx_buff, usart_tx_buff_data, sizeof(usart_tx_buff_data));
 8000630:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000634:	4905      	ldr	r1, [pc, #20]	@ (800064c <init_dma_logging+0x20>)
 8000636:	4806      	ldr	r0, [pc, #24]	@ (8000650 <init_dma_logging+0x24>)
 8000638:	f000 f86a 	bl	8000710 <lwrb_init>

    bInit_dma = true;
 800063c:	4b05      	ldr	r3, [pc, #20]	@ (8000654 <init_dma_logging+0x28>)
 800063e:	2201      	movs	r2, #1
 8000640:	701a      	strb	r2, [r3, #0]
	bPrintfTransferComplete = true;
 8000642:	4b05      	ldr	r3, [pc, #20]	@ (8000658 <init_dma_logging+0x2c>)
 8000644:	2201      	movs	r2, #1
 8000646:	701a      	strb	r2, [r3, #0]
}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000370 	.word	0x20000370
 8000650:	20000354 	.word	0x20000354
 8000654:	20000350 	.word	0x20000350
 8000658:	20000351 	.word	0x20000351

0800065c <usart_start_tx_dma_transfer>:

bool is_using_dma(){
	return bInit_dma;
}

static uint8_t usart_start_tx_dma_transfer(void) {
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
    if (usart_tx_dma_current_len == 0 && (usart_tx_dma_current_len = lwrb_get_linear_block_read_length(&usart_tx_buff)) > 0) {
 8000660:	4b14      	ldr	r3, [pc, #80]	@ (80006b4 <usart_start_tx_dma_transfer+0x58>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d121      	bne.n	80006ac <usart_start_tx_dma_transfer+0x50>
 8000668:	4813      	ldr	r0, [pc, #76]	@ (80006b8 <usart_start_tx_dma_transfer+0x5c>)
 800066a:	f000 f9b3 	bl	80009d4 <lwrb_get_linear_block_read_length>
 800066e:	4603      	mov	r3, r0
 8000670:	4a10      	ldr	r2, [pc, #64]	@ (80006b4 <usart_start_tx_dma_transfer+0x58>)
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d019      	beq.n	80006ac <usart_start_tx_dma_transfer+0x50>

        /* Limit maximal size to transmit at a time */
        if (usart_tx_dma_current_len > 32) {
 8000678:	4b0e      	ldr	r3, [pc, #56]	@ (80006b4 <usart_start_tx_dma_transfer+0x58>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2b20      	cmp	r3, #32
 800067e:	d902      	bls.n	8000686 <usart_start_tx_dma_transfer+0x2a>
            usart_tx_dma_current_len = 32;
 8000680:	4b0c      	ldr	r3, [pc, #48]	@ (80006b4 <usart_start_tx_dma_transfer+0x58>)
 8000682:	2220      	movs	r2, #32
 8000684:	601a      	str	r2, [r3, #0]
        }
    	bPrintfTransferComplete = false;
 8000686:	4b0d      	ldr	r3, [pc, #52]	@ (80006bc <usart_start_tx_dma_transfer+0x60>)
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
		if(HAL_UART_Transmit_DMA(&huart3, (uint8_t*)lwrb_get_linear_block_read_address(&usart_tx_buff), usart_tx_dma_current_len)!= HAL_OK)
 800068c:	480a      	ldr	r0, [pc, #40]	@ (80006b8 <usart_start_tx_dma_transfer+0x5c>)
 800068e:	f000 f977 	bl	8000980 <lwrb_get_linear_block_read_address>
 8000692:	4601      	mov	r1, r0
 8000694:	4b07      	ldr	r3, [pc, #28]	@ (80006b4 <usart_start_tx_dma_transfer+0x58>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	b29b      	uxth	r3, r3
 800069a:	461a      	mov	r2, r3
 800069c:	4808      	ldr	r0, [pc, #32]	@ (80006c0 <usart_start_tx_dma_transfer+0x64>)
 800069e:	f004 fd5f 	bl	8005160 <HAL_UART_Transmit_DMA>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <usart_start_tx_dma_transfer+0x50>
		{
			Error_Handler();
 80006a8:	f000 fc50 	bl	8000f4c <Error_Handler>
		}
    }
    return 1;
 80006ac:	2301      	movs	r3, #1
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000770 	.word	0x20000770
 80006b8:	20000354 	.word	0x20000354
 80006bc:	20000351 	.word	0x20000351
 80006c0:	2000079c 	.word	0x2000079c

080006c4 <HAL_UART_TxHalfCpltCallback>:

void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]

}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	bPrintfTransferComplete = true;
 80006e0:	4b08      	ldr	r3, [pc, #32]	@ (8000704 <HAL_UART_TxCpltCallback+0x2c>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	701a      	strb	r2, [r3, #0]
    lwrb_skip(&usart_tx_buff, usart_tx_dma_current_len);/* Data sent, ignore these */
 80006e6:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <HAL_UART_TxCpltCallback+0x30>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4619      	mov	r1, r3
 80006ec:	4807      	ldr	r0, [pc, #28]	@ (800070c <HAL_UART_TxCpltCallback+0x34>)
 80006ee:	f000 f9b3 	bl	8000a58 <lwrb_skip>
    usart_tx_dma_current_len = 0;
 80006f2:	4b05      	ldr	r3, [pc, #20]	@ (8000708 <HAL_UART_TxCpltCallback+0x30>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
    usart_start_tx_dma_transfer();          /* Try to send more data */
 80006f8:	f7ff ffb0 	bl	800065c <usart_start_tx_dma_transfer>
}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000351 	.word	0x20000351
 8000708:	20000770 	.word	0x20000770
 800070c:	20000354 	.word	0x20000354

08000710 <lwrb_init>:
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwrb_init(LWRB_VOLATILE lwrb_t* buff, void* buffdata, size_t size) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d005      	beq.n	800072e <lwrb_init+0x1e>
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d002      	beq.n	800072e <lwrb_init+0x1e>
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d101      	bne.n	8000732 <lwrb_init+0x22>
        return 0;
 800072e:	2300      	movs	r3, #0
 8000730:	e011      	b.n	8000756 <lwrb_init+0x46>
    }

    BUF_MEMSET((void*)buff, 0x00, sizeof(*buff));
 8000732:	221c      	movs	r2, #28
 8000734:	2100      	movs	r1, #0
 8000736:	68f8      	ldr	r0, [r7, #12]
 8000738:	f016 fd36 	bl	80171a8 <memset>

    buff->size = size;
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	609a      	str	r2, [r3, #8]
    buff->buff = buffdata;
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	68ba      	ldr	r2, [r7, #8]
 8000746:	605a      	str	r2, [r3, #4]

#if LWRB_USE_MAGIC
    buff->magic1 = 0xDEADBEEF;
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	4a05      	ldr	r2, [pc, #20]	@ (8000760 <lwrb_init+0x50>)
 800074c:	601a      	str	r2, [r3, #0]
    buff->magic2 = ~0xDEADBEEF;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	4a04      	ldr	r2, [pc, #16]	@ (8000764 <lwrb_init+0x54>)
 8000752:	619a      	str	r2, [r3, #24]
#endif /* LWRB_USE_MAGIC */

    return 1;
 8000754:	2301      	movs	r3, #1
}
 8000756:	4618      	mov	r0, r3
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	deadbeef 	.word	0xdeadbeef
 8000764:	21524110 	.word	0x21524110

08000768 <lwrb_write>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
lwrb_write(LWRB_VOLATILE lwrb_t* buff, const void* data, size_t btw) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d017      	beq.n	80007ae <lwrb_write+0x46>
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a38      	ldr	r2, [pc, #224]	@ (8000864 <lwrb_write+0xfc>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d112      	bne.n	80007ae <lwrb_write+0x46>
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	4a36      	ldr	r2, [pc, #216]	@ (8000868 <lwrb_write+0x100>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d10d      	bne.n	80007ae <lwrb_write+0x46>
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d009      	beq.n	80007ae <lwrb_write+0x46>
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	689b      	ldr	r3, [r3, #8]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d005      	beq.n	80007ae <lwrb_write+0x46>
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d002      	beq.n	80007ae <lwrb_write+0x46>
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d101      	bne.n	80007b2 <lwrb_write+0x4a>
        return 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	e053      	b.n	800085a <lwrb_write+0xf2>
    }

    /* Calculate maximum number of bytes available to write */
    free = lwrb_get_free(buff);
 80007b2:	68f8      	ldr	r0, [r7, #12]
 80007b4:	f000 f85a 	bl	800086c <lwrb_get_free>
 80007b8:	61b8      	str	r0, [r7, #24]
    btw = BUF_MIN(free, btw);
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	69bb      	ldr	r3, [r7, #24]
 80007be:	4293      	cmp	r3, r2
 80007c0:	bf28      	it	cs
 80007c2:	4613      	movcs	r3, r2
 80007c4:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d101      	bne.n	80007d0 <lwrb_write+0x68>
        return 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	e044      	b.n	800085a <lwrb_write+0xf2>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	689a      	ldr	r2, [r3, #8]
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	691b      	ldr	r3, [r3, #16]
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	4293      	cmp	r3, r2
 80007de:	bf28      	it	cs
 80007e0:	4613      	movcs	r3, r2
 80007e2:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	685a      	ldr	r2, [r3, #4]
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	691b      	ldr	r3, [r3, #16]
 80007ec:	4413      	add	r3, r2
 80007ee:	697a      	ldr	r2, [r7, #20]
 80007f0:	69f9      	ldr	r1, [r7, #28]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f016 fda3 	bl	801733e <memcpy>
    buff->w += tocopy;
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	691a      	ldr	r2, [r3, #16]
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	441a      	add	r2, r3
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	611a      	str	r2, [r3, #16]
    btw -= tocopy;
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	1ad3      	subs	r3, r2, r3
 800080a:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d00b      	beq.n	800082a <lwrb_write+0xc2>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	6858      	ldr	r0, [r3, #4]
 8000816:	69fa      	ldr	r2, [r7, #28]
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	4413      	add	r3, r2
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	4619      	mov	r1, r3
 8000820:	f016 fd8d 	bl	801733e <memcpy>
        buff->w = btw;
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	611a      	str	r2, [r3, #16]
    }

    /* Step 3: Check end of buffer */
    if (buff->w >= buff->size) {
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	691a      	ldr	r2, [r3, #16]
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	429a      	cmp	r2, r3
 8000834:	d302      	bcc.n	800083c <lwrb_write+0xd4>
        buff->w = 0;
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
    }
    BUF_SEND_EVT(buff, LWRB_EVT_WRITE, tocopy + btw);
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	695b      	ldr	r3, [r3, #20]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d007      	beq.n	8000854 <lwrb_write+0xec>
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	695b      	ldr	r3, [r3, #20]
 8000848:	6979      	ldr	r1, [r7, #20]
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	440a      	add	r2, r1
 800084e:	2101      	movs	r1, #1
 8000850:	68f8      	ldr	r0, [r7, #12]
 8000852:	4798      	blx	r3
    return tocopy + btw;
 8000854:	697a      	ldr	r2, [r7, #20]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4413      	add	r3, r2
}
 800085a:	4618      	mov	r0, r3
 800085c:	3720      	adds	r7, #32
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	deadbeef 	.word	0xdeadbeef
 8000868:	21524110 	.word	0x21524110

0800086c <lwrb_get_free>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
lwrb_get_free(LWRB_VOLATILE lwrb_t* buff) {
 800086c:	b480      	push	{r7}
 800086e:	b087      	sub	sp, #28
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d011      	beq.n	800089e <lwrb_get_free+0x32>
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a1c      	ldr	r2, [pc, #112]	@ (80008f0 <lwrb_get_free+0x84>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d10c      	bne.n	800089e <lwrb_get_free+0x32>
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a1a      	ldr	r2, [pc, #104]	@ (80008f4 <lwrb_get_free+0x88>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d107      	bne.n	800089e <lwrb_get_free+0x32>
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d003      	beq.n	800089e <lwrb_get_free+0x32>
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	689b      	ldr	r3, [r3, #8]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d101      	bne.n	80008a2 <lwrb_get_free+0x36>
        return 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	e01f      	b.n	80008e2 <lwrb_get_free+0x76>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	691b      	ldr	r3, [r3, #16]
 80008a6:	613b      	str	r3, [r7, #16]
    r = buff->r;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d103      	bne.n	80008be <lwrb_get_free+0x52>
        size = buff->size;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	e00f      	b.n	80008de <lwrb_get_free+0x72>
    } else if (r > w) {
 80008be:	68fa      	ldr	r2, [r7, #12]
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d904      	bls.n	80008d0 <lwrb_get_free+0x64>
        size = r - w;
 80008c6:	68fa      	ldr	r2, [r7, #12]
 80008c8:	693b      	ldr	r3, [r7, #16]
 80008ca:	1ad3      	subs	r3, r2, r3
 80008cc:	617b      	str	r3, [r7, #20]
 80008ce:	e006      	b.n	80008de <lwrb_get_free+0x72>
    } else {
        size = buff->size - (w - r);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	689a      	ldr	r2, [r3, #8]
 80008d4:	68f9      	ldr	r1, [r7, #12]
 80008d6:	693b      	ldr	r3, [r7, #16]
 80008d8:	1acb      	subs	r3, r1, r3
 80008da:	4413      	add	r3, r2
 80008dc:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	3b01      	subs	r3, #1
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	371c      	adds	r7, #28
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	deadbeef 	.word	0xdeadbeef
 80008f4:	21524110 	.word	0x21524110

080008f8 <lwrb_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
lwrb_get_full(LWRB_VOLATILE lwrb_t* buff) {
 80008f8:	b480      	push	{r7}
 80008fa:	b087      	sub	sp, #28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d011      	beq.n	800092a <lwrb_get_full+0x32>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a1b      	ldr	r2, [pc, #108]	@ (8000978 <lwrb_get_full+0x80>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d10c      	bne.n	800092a <lwrb_get_full+0x32>
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	4a19      	ldr	r2, [pc, #100]	@ (800097c <lwrb_get_full+0x84>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d107      	bne.n	800092a <lwrb_get_full+0x32>
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d003      	beq.n	800092a <lwrb_get_full+0x32>
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d101      	bne.n	800092e <lwrb_get_full+0x36>
        return 0;
 800092a:	2300      	movs	r3, #0
 800092c:	e01d      	b.n	800096a <lwrb_get_full+0x72>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	691b      	ldr	r3, [r3, #16]
 8000932:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	429a      	cmp	r2, r3
 8000940:	d102      	bne.n	8000948 <lwrb_get_full+0x50>
        size = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
 8000946:	e00f      	b.n	8000968 <lwrb_get_full+0x70>
    } else if (w > r) {
 8000948:	693a      	ldr	r2, [r7, #16]
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	429a      	cmp	r2, r3
 800094e:	d904      	bls.n	800095a <lwrb_get_full+0x62>
        size = w - r;
 8000950:	693a      	ldr	r2, [r7, #16]
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	e006      	b.n	8000968 <lwrb_get_full+0x70>
    } else {
        size = buff->size - (r - w);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	689a      	ldr	r2, [r3, #8]
 800095e:	6939      	ldr	r1, [r7, #16]
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	1acb      	subs	r3, r1, r3
 8000964:	4413      	add	r3, r2
 8000966:	617b      	str	r3, [r7, #20]
    }
    return size;
 8000968:	697b      	ldr	r3, [r7, #20]
}
 800096a:	4618      	mov	r0, r3
 800096c:	371c      	adds	r7, #28
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	deadbeef 	.word	0xdeadbeef
 800097c:	21524110 	.word	0x21524110

08000980 <lwrb_get_linear_block_read_address>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void*
lwrb_get_linear_block_read_address(LWRB_VOLATILE lwrb_t* buff) {
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d011      	beq.n	80009b2 <lwrb_get_linear_block_read_address+0x32>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a0e      	ldr	r2, [pc, #56]	@ (80009cc <lwrb_get_linear_block_read_address+0x4c>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d10c      	bne.n	80009b2 <lwrb_get_linear_block_read_address+0x32>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	4a0c      	ldr	r2, [pc, #48]	@ (80009d0 <lwrb_get_linear_block_read_address+0x50>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d107      	bne.n	80009b2 <lwrb_get_linear_block_read_address+0x32>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d003      	beq.n	80009b2 <lwrb_get_linear_block_read_address+0x32>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d101      	bne.n	80009b6 <lwrb_get_linear_block_read_address+0x36>
        return NULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	e004      	b.n	80009c0 <lwrb_get_linear_block_read_address+0x40>
    }
    return &buff->buff[buff->r];
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	685a      	ldr	r2, [r3, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	68db      	ldr	r3, [r3, #12]
 80009be:	4413      	add	r3, r2
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	deadbeef 	.word	0xdeadbeef
 80009d0:	21524110 	.word	0x21524110

080009d4 <lwrb_get_linear_block_read_length>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
lwrb_get_linear_block_read_length(LWRB_VOLATILE lwrb_t* buff) {
 80009d4:	b480      	push	{r7}
 80009d6:	b087      	sub	sp, #28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d011      	beq.n	8000a06 <lwrb_get_linear_block_read_length+0x32>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a1a      	ldr	r2, [pc, #104]	@ (8000a50 <lwrb_get_linear_block_read_length+0x7c>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d10c      	bne.n	8000a06 <lwrb_get_linear_block_read_length+0x32>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	4a18      	ldr	r2, [pc, #96]	@ (8000a54 <lwrb_get_linear_block_read_length+0x80>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d107      	bne.n	8000a06 <lwrb_get_linear_block_read_length+0x32>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d003      	beq.n	8000a06 <lwrb_get_linear_block_read_length+0x32>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	689b      	ldr	r3, [r3, #8]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d101      	bne.n	8000a0a <lwrb_get_linear_block_read_length+0x36>
        return 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	e01b      	b.n	8000a42 <lwrb_get_linear_block_read_length+0x6e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	691b      	ldr	r3, [r3, #16]
 8000a0e:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d904      	bls.n	8000a28 <lwrb_get_linear_block_read_length+0x54>
        len = w - r;
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	e00b      	b.n	8000a40 <lwrb_get_linear_block_read_length+0x6c>
    } else if (r > w) {
 8000a28:	68fa      	ldr	r2, [r7, #12]
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d905      	bls.n	8000a3c <lwrb_get_linear_block_read_length+0x68>
        len = buff->size - r;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	689a      	ldr	r2, [r3, #8]
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	617b      	str	r3, [r7, #20]
 8000a3a:	e001      	b.n	8000a40 <lwrb_get_linear_block_read_length+0x6c>
    } else {
        len = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
    }
    return len;
 8000a40:	697b      	ldr	r3, [r7, #20]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	371c      	adds	r7, #28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	deadbeef 	.word	0xdeadbeef
 8000a54:	21524110 	.word	0x21524110

08000a58 <lwrb_skip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
lwrb_skip(LWRB_VOLATILE lwrb_t* buff, size_t len) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d014      	beq.n	8000a92 <lwrb_skip+0x3a>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a20      	ldr	r2, [pc, #128]	@ (8000af0 <lwrb_skip+0x98>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d10f      	bne.n	8000a92 <lwrb_skip+0x3a>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	4a1f      	ldr	r2, [pc, #124]	@ (8000af4 <lwrb_skip+0x9c>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d10a      	bne.n	8000a92 <lwrb_skip+0x3a>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d006      	beq.n	8000a92 <lwrb_skip+0x3a>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d002      	beq.n	8000a92 <lwrb_skip+0x3a>
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d101      	bne.n	8000a96 <lwrb_skip+0x3e>
        return 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	e027      	b.n	8000ae6 <lwrb_skip+0x8e>
    }

    full = lwrb_get_full(buff);
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f7ff ff2e 	bl	80008f8 <lwrb_get_full>
 8000a9c:	60f8      	str	r0, [r7, #12]
    len = BUF_MIN(len, full);
 8000a9e:	683a      	ldr	r2, [r7, #0]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	bf28      	it	cs
 8000aa6:	4613      	movcs	r3, r2
 8000aa8:	603b      	str	r3, [r7, #0]
    buff->r += len;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	68da      	ldr	r2, [r3, #12]
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	441a      	add	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	60da      	str	r2, [r3, #12]
    if (buff->r >= buff->size) {
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	68da      	ldr	r2, [r3, #12]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d306      	bcc.n	8000ad0 <lwrb_skip+0x78>
        buff->r -= buff->size;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	68da      	ldr	r2, [r3, #12]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	1ad2      	subs	r2, r2, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	60da      	str	r2, [r3, #12]
    }
    BUF_SEND_EVT(buff, LWRB_EVT_READ, len);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	695b      	ldr	r3, [r3, #20]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d005      	beq.n	8000ae4 <lwrb_skip+0x8c>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	695b      	ldr	r3, [r3, #20]
 8000adc:	683a      	ldr	r2, [r7, #0]
 8000ade:	2100      	movs	r1, #0
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	4798      	blx	r3
    return len;
 8000ae4:	683b      	ldr	r3, [r7, #0]
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	deadbeef 	.word	0xdeadbeef
 8000af4:	21524110 	.word	0x21524110

08000af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af8:	b5b0      	push	{r4, r5, r7, lr}
 8000afa:	b088      	sub	sp, #32
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000afe:	f000 fe7f 	bl	8001800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b02:	f000 f839 	bl	8000b78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b06:	f000 f92f 	bl	8000d68 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b0a:	f000 f905 	bl	8000d18 <MX_DMA_Init>
  MX_RTC_Init();
 8000b0e:	f000 f8b3 	bl	8000c78 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8000b12:	f000 f8d7 	bl	8000cc4 <MX_USART3_UART_Init>
  MX_CRC_Init();
 8000b16:	f000 f89b 	bl	8000c50 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  printf("\033c");
 8000b1a:	4812      	ldr	r0, [pc, #72]	@ (8000b64 <main+0x6c>)
 8000b1c:	f016 f9b2 	bl	8016e84 <iprintf>

  init_dma_logging();
 8000b20:	f7ff fd84 	bl	800062c <init_dma_logging>
  printf("Duvitech Ethernet FW v%d.%d.%d\r\n\r\n",FIRMWARE_VERSION_DATA[0], FIRMWARE_VERSION_DATA[1], FIRMWARE_VERSION_DATA[2]);
 8000b24:	4b10      	ldr	r3, [pc, #64]	@ (8000b68 <main+0x70>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b68 <main+0x70>)
 8000b2c:	785b      	ldrb	r3, [r3, #1]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b0d      	ldr	r3, [pc, #52]	@ (8000b68 <main+0x70>)
 8000b32:	789b      	ldrb	r3, [r3, #2]
 8000b34:	480d      	ldr	r0, [pc, #52]	@ (8000b6c <main+0x74>)
 8000b36:	f016 f9a5 	bl	8016e84 <iprintf>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b70 <main+0x78>)
 8000b3c:	1d3c      	adds	r4, r7, #4
 8000b3e:	461d      	mov	r5, r3
 8000b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f006 f91b 	bl	8006d8c <osThreadCreate>
 8000b56:	4603      	mov	r3, r0
 8000b58:	4a06      	ldr	r2, [pc, #24]	@ (8000b74 <main+0x7c>)
 8000b5a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b5c:	f006 f8ff 	bl	8006d5e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <main+0x68>
 8000b64:	080181a8 	.word	0x080181a8
 8000b68:	20000000 	.word	0x20000000
 8000b6c:	080181ac 	.word	0x080181ac
 8000b70:	080181dc 	.word	0x080181dc
 8000b74:	200008a4 	.word	0x200008a4

08000b78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b094      	sub	sp, #80	@ 0x50
 8000b7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7e:	f107 0320 	add.w	r3, r7, #32
 8000b82:	2230      	movs	r2, #48	@ 0x30
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f016 fb0e 	bl	80171a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b8c:	f107 030c 	add.w	r3, r7, #12
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	4b29      	ldr	r3, [pc, #164]	@ (8000c48 <SystemClock_Config+0xd0>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba4:	4a28      	ldr	r2, [pc, #160]	@ (8000c48 <SystemClock_Config+0xd0>)
 8000ba6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000baa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bac:	4b26      	ldr	r3, [pc, #152]	@ (8000c48 <SystemClock_Config+0xd0>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bb8:	2300      	movs	r3, #0
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	4b23      	ldr	r3, [pc, #140]	@ (8000c4c <SystemClock_Config+0xd4>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a22      	ldr	r2, [pc, #136]	@ (8000c4c <SystemClock_Config+0xd4>)
 8000bc2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	4b20      	ldr	r3, [pc, #128]	@ (8000c4c <SystemClock_Config+0xd4>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000bd4:	2309      	movs	r3, #9
 8000bd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bd8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000bde:	2301      	movs	r3, #1
 8000be0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be2:	2302      	movs	r3, #2
 8000be4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000be6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bec:	2304      	movs	r3, #4
 8000bee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000bf0:	23a8      	movs	r3, #168	@ 0xa8
 8000bf2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bf8:	2307      	movs	r3, #7
 8000bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bfc:	f107 0320 	add.w	r3, r7, #32
 8000c00:	4618      	mov	r0, r3
 8000c02:	f002 ff9f 	bl	8003b44 <HAL_RCC_OscConfig>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c0c:	f000 f99e 	bl	8000f4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c10:	230f      	movs	r3, #15
 8000c12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c14:	2302      	movs	r3, #2
 8000c16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c1c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c28:	f107 030c 	add.w	r3, r7, #12
 8000c2c:	2105      	movs	r1, #5
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f003 fa00 	bl	8004034 <HAL_RCC_ClockConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c3a:	f000 f987 	bl	8000f4c <Error_Handler>
  }
}
 8000c3e:	bf00      	nop
 8000c40:	3750      	adds	r7, #80	@ 0x50
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40007000 	.word	0x40007000

08000c50 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c54:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <MX_CRC_Init+0x20>)
 8000c56:	4a07      	ldr	r2, [pc, #28]	@ (8000c74 <MX_CRC_Init+0x24>)
 8000c58:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c5a:	4805      	ldr	r0, [pc, #20]	@ (8000c70 <MX_CRC_Init+0x20>)
 8000c5c:	f000 ff18 	bl	8001a90 <HAL_CRC_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000c66:	f000 f971 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000774 	.word	0x20000774
 8000c74:	40023000 	.word	0x40023000

08000c78 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cbc <MX_RTC_Init+0x44>)
 8000c7e:	4a10      	ldr	r2, [pc, #64]	@ (8000cc0 <MX_RTC_Init+0x48>)
 8000c80:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	@ (8000cbc <MX_RTC_Init+0x44>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c88:	4b0c      	ldr	r3, [pc, #48]	@ (8000cbc <MX_RTC_Init+0x44>)
 8000c8a:	227f      	movs	r2, #127	@ 0x7f
 8000c8c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000cbc <MX_RTC_Init+0x44>)
 8000c90:	22ff      	movs	r2, #255	@ 0xff
 8000c92:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c94:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <MX_RTC_Init+0x44>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c9a:	4b08      	ldr	r3, [pc, #32]	@ (8000cbc <MX_RTC_Init+0x44>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <MX_RTC_Init+0x44>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ca6:	4805      	ldr	r0, [pc, #20]	@ (8000cbc <MX_RTC_Init+0x44>)
 8000ca8:	f003 fdd6 	bl	8004858 <HAL_RTC_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000cb2:	f000 f94b 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	2000077c 	.word	0x2000077c
 8000cc0:	40002800 	.word	0x40002800

08000cc4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <MX_USART3_UART_Init+0x4c>)
 8000cca:	4a12      	ldr	r2, [pc, #72]	@ (8000d14 <MX_USART3_UART_Init+0x50>)
 8000ccc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cce:	4b10      	ldr	r3, [pc, #64]	@ (8000d10 <MX_USART3_UART_Init+0x4c>)
 8000cd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cd4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <MX_USART3_UART_Init+0x4c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <MX_USART3_UART_Init+0x4c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d10 <MX_USART3_UART_Init+0x4c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ce8:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <MX_USART3_UART_Init+0x4c>)
 8000cea:	220c      	movs	r2, #12
 8000cec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cee:	4b08      	ldr	r3, [pc, #32]	@ (8000d10 <MX_USART3_UART_Init+0x4c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <MX_USART3_UART_Init+0x4c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cfa:	4805      	ldr	r0, [pc, #20]	@ (8000d10 <MX_USART3_UART_Init+0x4c>)
 8000cfc:	f004 f954 	bl	8004fa8 <HAL_UART_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d06:	f000 f921 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	2000079c 	.word	0x2000079c
 8000d14:	40004800 	.word	0x40004800

08000d18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	4b10      	ldr	r3, [pc, #64]	@ (8000d64 <MX_DMA_Init+0x4c>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	4a0f      	ldr	r2, [pc, #60]	@ (8000d64 <MX_DMA_Init+0x4c>)
 8000d28:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d64 <MX_DMA_Init+0x4c>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2105      	movs	r1, #5
 8000d3e:	200c      	movs	r0, #12
 8000d40:	f000 fe7c 	bl	8001a3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d44:	200c      	movs	r0, #12
 8000d46:	f000 fe95 	bl	8001a74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2105      	movs	r1, #5
 8000d4e:	200e      	movs	r0, #14
 8000d50:	f000 fe74 	bl	8001a3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d54:	200e      	movs	r0, #14
 8000d56:	f000 fe8d 	bl	8001a74 <HAL_NVIC_EnableIRQ>

}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40023800 	.word	0x40023800

08000d68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08c      	sub	sp, #48	@ 0x30
 8000d6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
 8000d7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61bb      	str	r3, [r7, #24]
 8000d82:	4b5b      	ldr	r3, [pc, #364]	@ (8000ef0 <MX_GPIO_Init+0x188>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	4a5a      	ldr	r2, [pc, #360]	@ (8000ef0 <MX_GPIO_Init+0x188>)
 8000d88:	f043 0304 	orr.w	r3, r3, #4
 8000d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8e:	4b58      	ldr	r3, [pc, #352]	@ (8000ef0 <MX_GPIO_Init+0x188>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	f003 0304 	and.w	r3, r3, #4
 8000d96:	61bb      	str	r3, [r7, #24]
 8000d98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
 8000d9e:	4b54      	ldr	r3, [pc, #336]	@ (8000ef0 <MX_GPIO_Init+0x188>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	4a53      	ldr	r2, [pc, #332]	@ (8000ef0 <MX_GPIO_Init+0x188>)
 8000da4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000daa:	4b51      	ldr	r3, [pc, #324]	@ (8000ef0 <MX_GPIO_Init+0x188>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	4b4d      	ldr	r3, [pc, #308]	@ (8000ef0 <MX_GPIO_Init+0x188>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	4a4c      	ldr	r2, [pc, #304]	@ (8000ef0 <MX_GPIO_Init+0x188>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc6:	4b4a      	ldr	r3, [pc, #296]	@ (8000ef0 <MX_GPIO_Init+0x188>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	4b46      	ldr	r3, [pc, #280]	@ (8000ef0 <MX_GPIO_Init+0x188>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	4a45      	ldr	r2, [pc, #276]	@ (8000ef0 <MX_GPIO_Init+0x188>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de2:	4b43      	ldr	r3, [pc, #268]	@ (8000ef0 <MX_GPIO_Init+0x188>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ef0 <MX_GPIO_Init+0x188>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	4a3e      	ldr	r2, [pc, #248]	@ (8000ef0 <MX_GPIO_Init+0x188>)
 8000df8:	f043 0308 	orr.w	r3, r3, #8
 8000dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfe:	4b3c      	ldr	r3, [pc, #240]	@ (8000ef0 <MX_GPIO_Init+0x188>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e02:	f003 0308 	and.w	r3, r3, #8
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	4b38      	ldr	r3, [pc, #224]	@ (8000ef0 <MX_GPIO_Init+0x188>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	4a37      	ldr	r2, [pc, #220]	@ (8000ef0 <MX_GPIO_Init+0x188>)
 8000e14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1a:	4b35      	ldr	r3, [pc, #212]	@ (8000ef0 <MX_GPIO_Init+0x188>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000e2c:	4831      	ldr	r0, [pc, #196]	@ (8000ef4 <MX_GPIO_Init+0x18c>)
 8000e2e:	f002 fe55 	bl	8003adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2140      	movs	r1, #64	@ 0x40
 8000e36:	4830      	ldr	r0, [pc, #192]	@ (8000ef8 <MX_GPIO_Init+0x190>)
 8000e38:	f002 fe50 	bl	8003adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e42:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	f107 031c 	add.w	r3, r7, #28
 8000e50:	4619      	mov	r1, r3
 8000e52:	482a      	ldr	r0, [pc, #168]	@ (8000efc <MX_GPIO_Init+0x194>)
 8000e54:	f002 fc96 	bl	8003784 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000e58:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000e5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4820      	ldr	r0, [pc, #128]	@ (8000ef4 <MX_GPIO_Init+0x18c>)
 8000e72:	f002 fc87 	bl	8003784 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e76:	2340      	movs	r3, #64	@ 0x40
 8000e78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e86:	f107 031c 	add.w	r3, r7, #28
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	481a      	ldr	r0, [pc, #104]	@ (8000ef8 <MX_GPIO_Init+0x190>)
 8000e8e:	f002 fc79 	bl	8003784 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e92:	2380      	movs	r3, #128	@ 0x80
 8000e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e96:	2300      	movs	r3, #0
 8000e98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4814      	ldr	r0, [pc, #80]	@ (8000ef8 <MX_GPIO_Init+0x190>)
 8000ea6:	f002 fc6d 	bl	8003784 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000eaa:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000eae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ebc:	230a      	movs	r3, #10
 8000ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec0:	f107 031c 	add.w	r3, r7, #28
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	480e      	ldr	r0, [pc, #56]	@ (8000f00 <MX_GPIO_Init+0x198>)
 8000ec8:	f002 fc5c 	bl	8003784 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ecc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ed0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000eda:	f107 031c 	add.w	r3, r7, #28
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4807      	ldr	r0, [pc, #28]	@ (8000f00 <MX_GPIO_Init+0x198>)
 8000ee2:	f002 fc4f 	bl	8003784 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ee6:	bf00      	nop
 8000ee8:	3730      	adds	r7, #48	@ 0x30
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020400 	.word	0x40020400
 8000ef8:	40021800 	.word	0x40021800
 8000efc:	40020800 	.word	0x40020800
 8000f00:	40020000 	.word	0x40020000

08000f04 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000f0c:	f005 f982 	bl	8006214 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(500);
 8000f10:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f14:	f005 ff86 	bl	8006e24 <osDelay>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000f18:	2180      	movs	r1, #128	@ 0x80
 8000f1a:	4802      	ldr	r0, [pc, #8]	@ (8000f24 <StartDefaultTask+0x20>)
 8000f1c:	f002 fdf7 	bl	8003b0e <HAL_GPIO_TogglePin>
    osDelay(500);
 8000f20:	bf00      	nop
 8000f22:	e7f5      	b.n	8000f10 <StartDefaultTask+0xc>
 8000f24:	40020400 	.word	0x40020400

08000f28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a04      	ldr	r2, [pc, #16]	@ (8000f48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d101      	bne.n	8000f3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f3a:	f000 fc83 	bl	8001844 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40010000 	.word	0x40010000

08000f4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000f50:	2201      	movs	r2, #1
 8000f52:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f56:	4803      	ldr	r0, [pc, #12]	@ (8000f64 <Error_Handler+0x18>)
 8000f58:	f002 fdc0 	bl	8003adc <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f5c:	b672      	cpsid	i
}
 8000f5e:	bf00      	nop
  __disable_irq();
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <Error_Handler+0x14>
 8000f64:	40020400 	.word	0x40020400

08000f68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <HAL_MspInit+0x54>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f76:	4a11      	ldr	r2, [pc, #68]	@ (8000fbc <HAL_MspInit+0x54>)
 8000f78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <HAL_MspInit+0x54>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	603b      	str	r3, [r7, #0]
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fbc <HAL_MspInit+0x54>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f92:	4a0a      	ldr	r2, [pc, #40]	@ (8000fbc <HAL_MspInit+0x54>)
 8000f94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f9a:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <HAL_MspInit+0x54>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	210f      	movs	r1, #15
 8000faa:	f06f 0001 	mvn.w	r0, #1
 8000fae:	f000 fd45 	bl	8001a3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40023800 	.word	0x40023800

08000fc0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0b      	ldr	r2, [pc, #44]	@ (8000ffc <HAL_CRC_MspInit+0x3c>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d10d      	bne.n	8000fee <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001000 <HAL_CRC_MspInit+0x40>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	4a09      	ldr	r2, [pc, #36]	@ (8001000 <HAL_CRC_MspInit+0x40>)
 8000fdc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fe0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe2:	4b07      	ldr	r3, [pc, #28]	@ (8001000 <HAL_CRC_MspInit+0x40>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000fee:	bf00      	nop
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	40023000 	.word	0x40023000
 8001000:	40023800 	.word	0x40023800

08001004 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08e      	sub	sp, #56	@ 0x38
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800100c:	f107 0308 	add.w	r3, r7, #8
 8001010:	2230      	movs	r2, #48	@ 0x30
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f016 f8c7 	bl	80171a8 <memset>
  if(hrtc->Instance==RTC)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a0c      	ldr	r2, [pc, #48]	@ (8001050 <HAL_RTC_MspInit+0x4c>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d111      	bne.n	8001048 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001024:	2320      	movs	r3, #32
 8001026:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001028:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800102c:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800102e:	f107 0308 	add.w	r3, r7, #8
 8001032:	4618      	mov	r0, r3
 8001034:	f003 fa50 	bl	80044d8 <HAL_RCCEx_PeriphCLKConfig>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800103e:	f7ff ff85 	bl	8000f4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001042:	4b04      	ldr	r3, [pc, #16]	@ (8001054 <HAL_RTC_MspInit+0x50>)
 8001044:	2201      	movs	r2, #1
 8001046:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001048:	bf00      	nop
 800104a:	3738      	adds	r7, #56	@ 0x38
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40002800 	.word	0x40002800
 8001054:	42470e3c 	.word	0x42470e3c

08001058 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	@ 0x28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a55      	ldr	r2, [pc, #340]	@ (80011cc <HAL_UART_MspInit+0x174>)
 8001076:	4293      	cmp	r3, r2
 8001078:	f040 80a3 	bne.w	80011c2 <HAL_UART_MspInit+0x16a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800107c:	2300      	movs	r3, #0
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	4b53      	ldr	r3, [pc, #332]	@ (80011d0 <HAL_UART_MspInit+0x178>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001084:	4a52      	ldr	r2, [pc, #328]	@ (80011d0 <HAL_UART_MspInit+0x178>)
 8001086:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800108a:	6413      	str	r3, [r2, #64]	@ 0x40
 800108c:	4b50      	ldr	r3, [pc, #320]	@ (80011d0 <HAL_UART_MspInit+0x178>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001090:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	4b4c      	ldr	r3, [pc, #304]	@ (80011d0 <HAL_UART_MspInit+0x178>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a0:	4a4b      	ldr	r2, [pc, #300]	@ (80011d0 <HAL_UART_MspInit+0x178>)
 80010a2:	f043 0308 	orr.w	r3, r3, #8
 80010a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a8:	4b49      	ldr	r3, [pc, #292]	@ (80011d0 <HAL_UART_MspInit+0x178>)
 80010aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ac:	f003 0308 	and.w	r3, r3, #8
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80010b4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c2:	2303      	movs	r3, #3
 80010c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010c6:	2307      	movs	r3, #7
 80010c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4619      	mov	r1, r3
 80010d0:	4840      	ldr	r0, [pc, #256]	@ (80011d4 <HAL_UART_MspInit+0x17c>)
 80010d2:	f002 fb57 	bl	8003784 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80010d6:	4b40      	ldr	r3, [pc, #256]	@ (80011d8 <HAL_UART_MspInit+0x180>)
 80010d8:	4a40      	ldr	r2, [pc, #256]	@ (80011dc <HAL_UART_MspInit+0x184>)
 80010da:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80010dc:	4b3e      	ldr	r3, [pc, #248]	@ (80011d8 <HAL_UART_MspInit+0x180>)
 80010de:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010e2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010e4:	4b3c      	ldr	r3, [pc, #240]	@ (80011d8 <HAL_UART_MspInit+0x180>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ea:	4b3b      	ldr	r3, [pc, #236]	@ (80011d8 <HAL_UART_MspInit+0x180>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010f0:	4b39      	ldr	r3, [pc, #228]	@ (80011d8 <HAL_UART_MspInit+0x180>)
 80010f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010f6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010f8:	4b37      	ldr	r3, [pc, #220]	@ (80011d8 <HAL_UART_MspInit+0x180>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010fe:	4b36      	ldr	r3, [pc, #216]	@ (80011d8 <HAL_UART_MspInit+0x180>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001104:	4b34      	ldr	r3, [pc, #208]	@ (80011d8 <HAL_UART_MspInit+0x180>)
 8001106:	2200      	movs	r2, #0
 8001108:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800110a:	4b33      	ldr	r3, [pc, #204]	@ (80011d8 <HAL_UART_MspInit+0x180>)
 800110c:	2200      	movs	r2, #0
 800110e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001110:	4b31      	ldr	r3, [pc, #196]	@ (80011d8 <HAL_UART_MspInit+0x180>)
 8001112:	2204      	movs	r2, #4
 8001114:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_usart3_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8001116:	4b30      	ldr	r3, [pc, #192]	@ (80011d8 <HAL_UART_MspInit+0x180>)
 8001118:	2201      	movs	r2, #1
 800111a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart3_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800111c:	4b2e      	ldr	r3, [pc, #184]	@ (80011d8 <HAL_UART_MspInit+0x180>)
 800111e:	2200      	movs	r2, #0
 8001120:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_usart3_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001122:	4b2d      	ldr	r3, [pc, #180]	@ (80011d8 <HAL_UART_MspInit+0x180>)
 8001124:	2200      	movs	r2, #0
 8001126:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001128:	482b      	ldr	r0, [pc, #172]	@ (80011d8 <HAL_UART_MspInit+0x180>)
 800112a:	f000 fccd 	bl	8001ac8 <HAL_DMA_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <HAL_UART_MspInit+0xe0>
    {
      Error_Handler();
 8001134:	f7ff ff0a 	bl	8000f4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a27      	ldr	r2, [pc, #156]	@ (80011d8 <HAL_UART_MspInit+0x180>)
 800113c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800113e:	4a26      	ldr	r2, [pc, #152]	@ (80011d8 <HAL_UART_MspInit+0x180>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001144:	4b26      	ldr	r3, [pc, #152]	@ (80011e0 <HAL_UART_MspInit+0x188>)
 8001146:	4a27      	ldr	r2, [pc, #156]	@ (80011e4 <HAL_UART_MspInit+0x18c>)
 8001148:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800114a:	4b25      	ldr	r3, [pc, #148]	@ (80011e0 <HAL_UART_MspInit+0x188>)
 800114c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001150:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001152:	4b23      	ldr	r3, [pc, #140]	@ (80011e0 <HAL_UART_MspInit+0x188>)
 8001154:	2240      	movs	r2, #64	@ 0x40
 8001156:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001158:	4b21      	ldr	r3, [pc, #132]	@ (80011e0 <HAL_UART_MspInit+0x188>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800115e:	4b20      	ldr	r3, [pc, #128]	@ (80011e0 <HAL_UART_MspInit+0x188>)
 8001160:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001164:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001166:	4b1e      	ldr	r3, [pc, #120]	@ (80011e0 <HAL_UART_MspInit+0x188>)
 8001168:	2200      	movs	r2, #0
 800116a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800116c:	4b1c      	ldr	r3, [pc, #112]	@ (80011e0 <HAL_UART_MspInit+0x188>)
 800116e:	2200      	movs	r2, #0
 8001170:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001172:	4b1b      	ldr	r3, [pc, #108]	@ (80011e0 <HAL_UART_MspInit+0x188>)
 8001174:	2200      	movs	r2, #0
 8001176:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001178:	4b19      	ldr	r3, [pc, #100]	@ (80011e0 <HAL_UART_MspInit+0x188>)
 800117a:	2200      	movs	r2, #0
 800117c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800117e:	4b18      	ldr	r3, [pc, #96]	@ (80011e0 <HAL_UART_MspInit+0x188>)
 8001180:	2204      	movs	r2, #4
 8001182:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8001184:	4b16      	ldr	r3, [pc, #88]	@ (80011e0 <HAL_UART_MspInit+0x188>)
 8001186:	2201      	movs	r2, #1
 8001188:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800118a:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <HAL_UART_MspInit+0x188>)
 800118c:	2200      	movs	r2, #0
 800118e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001190:	4b13      	ldr	r3, [pc, #76]	@ (80011e0 <HAL_UART_MspInit+0x188>)
 8001192:	2200      	movs	r2, #0
 8001194:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001196:	4812      	ldr	r0, [pc, #72]	@ (80011e0 <HAL_UART_MspInit+0x188>)
 8001198:	f000 fc96 	bl	8001ac8 <HAL_DMA_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_UART_MspInit+0x14e>
    {
      Error_Handler();
 80011a2:	f7ff fed3 	bl	8000f4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a0d      	ldr	r2, [pc, #52]	@ (80011e0 <HAL_UART_MspInit+0x188>)
 80011aa:	639a      	str	r2, [r3, #56]	@ 0x38
 80011ac:	4a0c      	ldr	r2, [pc, #48]	@ (80011e0 <HAL_UART_MspInit+0x188>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2105      	movs	r1, #5
 80011b6:	2027      	movs	r0, #39	@ 0x27
 80011b8:	f000 fc40 	bl	8001a3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011bc:	2027      	movs	r0, #39	@ 0x27
 80011be:	f000 fc59 	bl	8001a74 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80011c2:	bf00      	nop
 80011c4:	3728      	adds	r7, #40	@ 0x28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40004800 	.word	0x40004800
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40020c00 	.word	0x40020c00
 80011d8:	200007e4 	.word	0x200007e4
 80011dc:	40026028 	.word	0x40026028
 80011e0:	20000844 	.word	0x20000844
 80011e4:	40026058 	.word	0x40026058

080011e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08c      	sub	sp, #48	@ 0x30
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80011f8:	2300      	movs	r3, #0
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	4b2f      	ldr	r3, [pc, #188]	@ (80012bc <HAL_InitTick+0xd4>)
 80011fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001200:	4a2e      	ldr	r2, [pc, #184]	@ (80012bc <HAL_InitTick+0xd4>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	6453      	str	r3, [r2, #68]	@ 0x44
 8001208:	4b2c      	ldr	r3, [pc, #176]	@ (80012bc <HAL_InitTick+0xd4>)
 800120a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001214:	f107 020c 	add.w	r2, r7, #12
 8001218:	f107 0310 	add.w	r3, r7, #16
 800121c:	4611      	mov	r1, r2
 800121e:	4618      	mov	r0, r3
 8001220:	f003 f928 	bl	8004474 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001224:	f003 f912 	bl	800444c <HAL_RCC_GetPCLK2Freq>
 8001228:	4603      	mov	r3, r0
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800122e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001230:	4a23      	ldr	r2, [pc, #140]	@ (80012c0 <HAL_InitTick+0xd8>)
 8001232:	fba2 2303 	umull	r2, r3, r2, r3
 8001236:	0c9b      	lsrs	r3, r3, #18
 8001238:	3b01      	subs	r3, #1
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800123c:	4b21      	ldr	r3, [pc, #132]	@ (80012c4 <HAL_InitTick+0xdc>)
 800123e:	4a22      	ldr	r2, [pc, #136]	@ (80012c8 <HAL_InitTick+0xe0>)
 8001240:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001242:	4b20      	ldr	r3, [pc, #128]	@ (80012c4 <HAL_InitTick+0xdc>)
 8001244:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001248:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800124a:	4a1e      	ldr	r2, [pc, #120]	@ (80012c4 <HAL_InitTick+0xdc>)
 800124c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001250:	4b1c      	ldr	r3, [pc, #112]	@ (80012c4 <HAL_InitTick+0xdc>)
 8001252:	2200      	movs	r2, #0
 8001254:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001256:	4b1b      	ldr	r3, [pc, #108]	@ (80012c4 <HAL_InitTick+0xdc>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125c:	4b19      	ldr	r3, [pc, #100]	@ (80012c4 <HAL_InitTick+0xdc>)
 800125e:	2200      	movs	r2, #0
 8001260:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001262:	4818      	ldr	r0, [pc, #96]	@ (80012c4 <HAL_InitTick+0xdc>)
 8001264:	f003 fbfe 	bl	8004a64 <HAL_TIM_Base_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800126e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001272:	2b00      	cmp	r3, #0
 8001274:	d11b      	bne.n	80012ae <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001276:	4813      	ldr	r0, [pc, #76]	@ (80012c4 <HAL_InitTick+0xdc>)
 8001278:	f003 fc4e 	bl	8004b18 <HAL_TIM_Base_Start_IT>
 800127c:	4603      	mov	r3, r0
 800127e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001282:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001286:	2b00      	cmp	r3, #0
 8001288:	d111      	bne.n	80012ae <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800128a:	2019      	movs	r0, #25
 800128c:	f000 fbf2 	bl	8001a74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b0f      	cmp	r3, #15
 8001294:	d808      	bhi.n	80012a8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001296:	2200      	movs	r2, #0
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	2019      	movs	r0, #25
 800129c:	f000 fbce 	bl	8001a3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012a0:	4a0a      	ldr	r2, [pc, #40]	@ (80012cc <HAL_InitTick+0xe4>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	e002      	b.n	80012ae <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80012ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3730      	adds	r7, #48	@ 0x30
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	431bde83 	.word	0x431bde83
 80012c4:	200008fc 	.word	0x200008fc
 80012c8:	40010000 	.word	0x40010000
 80012cc:	20000008 	.word	0x20000008

080012d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <NMI_Handler+0x4>

080012d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <HardFault_Handler+0x4>

080012e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <MemManage_Handler+0x4>

080012e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <BusFault_Handler+0x4>

080012f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <UsageFault_Handler+0x4>

080012f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800130c:	4802      	ldr	r0, [pc, #8]	@ (8001318 <DMA1_Stream1_IRQHandler+0x10>)
 800130e:	f000 fd73 	bl	8001df8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200007e4 	.word	0x200007e4

0800131c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001320:	4802      	ldr	r0, [pc, #8]	@ (800132c <DMA1_Stream3_IRQHandler+0x10>)
 8001322:	f000 fd69 	bl	8001df8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000844 	.word	0x20000844

08001330 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001334:	4802      	ldr	r0, [pc, #8]	@ (8001340 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001336:	f003 fc5f 	bl	8004bf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200008fc 	.word	0x200008fc

08001344 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001348:	4802      	ldr	r0, [pc, #8]	@ (8001354 <USART3_IRQHandler+0x10>)
 800134a:	f003 ff79 	bl	8005240 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	2000079c 	.word	0x2000079c

08001358 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800135c:	4802      	ldr	r0, [pc, #8]	@ (8001368 <ETH_IRQHandler+0x10>)
 800135e:	f001 fb3b 	bl	80029d8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20005420 	.word	0x20005420

0800136c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return 1;
 8001370:	2301      	movs	r3, #1
}
 8001372:	4618      	mov	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <_kill>:

int _kill(int pid, int sig)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001386:	4b05      	ldr	r3, [pc, #20]	@ (800139c <_kill+0x20>)
 8001388:	2216      	movs	r2, #22
 800138a:	601a      	str	r2, [r3, #0]
  return -1;
 800138c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	2000cdac 	.word	0x2000cdac

080013a0 <_exit>:

void _exit (int status)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013a8:	f04f 31ff 	mov.w	r1, #4294967295
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff ffe5 	bl	800137c <_kill>
  while (1) {}    /* Make sure we hang here */
 80013b2:	bf00      	nop
 80013b4:	e7fd      	b.n	80013b2 <_exit+0x12>

080013b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b086      	sub	sp, #24
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	60f8      	str	r0, [r7, #12]
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	e00a      	b.n	80013de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013c8:	f3af 8000 	nop.w
 80013cc:	4601      	mov	r1, r0
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	1c5a      	adds	r2, r3, #1
 80013d2:	60ba      	str	r2, [r7, #8]
 80013d4:	b2ca      	uxtb	r2, r1
 80013d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	3301      	adds	r3, #1
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	dbf0      	blt.n	80013c8 <_read+0x12>
  }

  return len;
 80013e6:	687b      	ldr	r3, [r7, #4]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001418:	605a      	str	r2, [r3, #4]
  return 0;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <_isatty>:

int _isatty(int file)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001430:	2301      	movs	r3, #1
}
 8001432:	4618      	mov	r0, r3
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800143e:	b480      	push	{r7}
 8001440:	b085      	sub	sp, #20
 8001442:	af00      	add	r7, sp, #0
 8001444:	60f8      	str	r0, [r7, #12]
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001458:	b480      	push	{r7}
 800145a:	b087      	sub	sp, #28
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001460:	4a14      	ldr	r2, [pc, #80]	@ (80014b4 <_sbrk+0x5c>)
 8001462:	4b15      	ldr	r3, [pc, #84]	@ (80014b8 <_sbrk+0x60>)
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800146c:	4b13      	ldr	r3, [pc, #76]	@ (80014bc <_sbrk+0x64>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d102      	bne.n	800147a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001474:	4b11      	ldr	r3, [pc, #68]	@ (80014bc <_sbrk+0x64>)
 8001476:	4a12      	ldr	r2, [pc, #72]	@ (80014c0 <_sbrk+0x68>)
 8001478:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800147a:	4b10      	ldr	r3, [pc, #64]	@ (80014bc <_sbrk+0x64>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	429a      	cmp	r2, r3
 8001486:	d205      	bcs.n	8001494 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001488:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <_sbrk+0x6c>)
 800148a:	220c      	movs	r2, #12
 800148c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800148e:	f04f 33ff 	mov.w	r3, #4294967295
 8001492:	e009      	b.n	80014a8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001494:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <_sbrk+0x64>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800149a:	4b08      	ldr	r3, [pc, #32]	@ (80014bc <_sbrk+0x64>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	4a06      	ldr	r2, [pc, #24]	@ (80014bc <_sbrk+0x64>)
 80014a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014a6:	68fb      	ldr	r3, [r7, #12]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	371c      	adds	r7, #28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	20030000 	.word	0x20030000
 80014b8:	00000400 	.word	0x00000400
 80014bc:	20000944 	.word	0x20000944
 80014c0:	2000cdc0 	.word	0x2000cdc0
 80014c4:	2000cdac 	.word	0x2000cdac

080014c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <SystemInit+0x20>)
 80014ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014d2:	4a05      	ldr	r2, [pc, #20]	@ (80014e8 <SystemInit+0x20>)
 80014d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80014ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001524 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014f0:	f7ff ffea 	bl	80014c8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014f4:	480c      	ldr	r0, [pc, #48]	@ (8001528 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014f6:	490d      	ldr	r1, [pc, #52]	@ (800152c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001530 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014fc:	e002      	b.n	8001504 <LoopCopyDataInit>

080014fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001502:	3304      	adds	r3, #4

08001504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001508:	d3f9      	bcc.n	80014fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150a:	4a0a      	ldr	r2, [pc, #40]	@ (8001534 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800150c:	4c0a      	ldr	r4, [pc, #40]	@ (8001538 <LoopFillZerobss+0x22>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001510:	e001      	b.n	8001516 <LoopFillZerobss>

08001512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001514:	3204      	adds	r2, #4

08001516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001518:	d3fb      	bcc.n	8001512 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800151a:	f015 fee9 	bl	80172f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800151e:	f7ff faeb 	bl	8000af8 <main>
  bx  lr    
 8001522:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001524:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800152c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001530:	0801b7bc 	.word	0x0801b7bc
  ldr r2, =_sbss
 8001534:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001538:	2000cdbc 	.word	0x2000cdbc

0800153c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800153c:	e7fe      	b.n	800153c <ADC_IRQHandler>

0800153e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
 8001546:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00b      	beq.n	8001566 <LAN8742_RegisterBusIO+0x28>
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d007      	beq.n	8001566 <LAN8742_RegisterBusIO+0x28>
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <LAN8742_RegisterBusIO+0x28>
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d102      	bne.n	800156c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001566:	f04f 33ff 	mov.w	r3, #4294967295
 800156a:	e014      	b.n	8001596 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	68da      	ldr	r2, [r3, #12]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	691a      	ldr	r2, [r3, #16]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b086      	sub	sp, #24
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d17c      	bne.n	80016bc <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d002      	beq.n	80015d0 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2220      	movs	r2, #32
 80015d4:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	e01c      	b.n	8001616 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	695b      	ldr	r3, [r3, #20]
 80015e0:	f107 0208 	add.w	r2, r7, #8
 80015e4:	2112      	movs	r1, #18
 80015e6:	6978      	ldr	r0, [r7, #20]
 80015e8:	4798      	blx	r3
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	da03      	bge.n	80015f8 <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80015f0:	f06f 0304 	mvn.w	r3, #4
 80015f4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80015f6:	e00b      	b.n	8001610 <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	f003 031f 	and.w	r3, r3, #31
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	429a      	cmp	r2, r3
 8001602:	d105      	bne.n	8001610 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
         break;
 800160e:	e005      	b.n	800161c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	3301      	adds	r3, #1
 8001614:	617b      	str	r3, [r7, #20]
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	2b1f      	cmp	r3, #31
 800161a:	d9df      	bls.n	80015dc <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b1f      	cmp	r3, #31
 8001622:	d902      	bls.n	800162a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001624:	f06f 0302 	mvn.w	r3, #2
 8001628:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d145      	bne.n	80016bc <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	6810      	ldr	r0, [r2, #0]
 8001638:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800163c:	2100      	movs	r1, #0
 800163e:	4798      	blx	r3
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	db37      	blt.n	80016b6 <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	6810      	ldr	r0, [r2, #0]
 800164e:	f107 0208 	add.w	r2, r7, #8
 8001652:	2100      	movs	r1, #0
 8001654:	4798      	blx	r3
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	db28      	blt.n	80016ae <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	4798      	blx	r3
 8001662:	4603      	mov	r3, r0
 8001664:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001666:	e01c      	b.n	80016a2 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	4798      	blx	r3
 800166e:	4603      	mov	r3, r0
 8001670:	461a      	mov	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800167a:	d80e      	bhi.n	800169a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	6810      	ldr	r0, [r2, #0]
 8001684:	f107 0208 	add.w	r2, r7, #8
 8001688:	2100      	movs	r1, #0
 800168a:	4798      	blx	r3
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	da07      	bge.n	80016a2 <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 8001692:	f06f 0304 	mvn.w	r3, #4
 8001696:	613b      	str	r3, [r7, #16]
                 break;
 8001698:	e010      	b.n	80016bc <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800169a:	f06f 0301 	mvn.w	r3, #1
 800169e:	613b      	str	r3, [r7, #16]
               break;
 80016a0:	e00c      	b.n	80016bc <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1dd      	bne.n	8001668 <LAN8742_Init+0xc6>
 80016ac:	e006      	b.n	80016bc <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80016ae:	f06f 0304 	mvn.w	r3, #4
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	e002      	b.n	80016bc <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80016b6:	f06f 0303 	mvn.w	r3, #3
 80016ba:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d112      	bne.n	80016e8 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	4798      	blx	r3
 80016c8:	4603      	mov	r3, r0
 80016ca:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80016cc:	bf00      	nop
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	4798      	blx	r3
 80016d4:	4603      	mov	r3, r0
 80016d6:	461a      	mov	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80016e0:	d9f5      	bls.n	80016ce <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2201      	movs	r2, #1
 80016e6:	605a      	str	r2, [r3, #4]
   }

   return status;
 80016e8:	693b      	ldr	r3, [r7, #16]
 }
 80016ea:	4618      	mov	r0, r3
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b084      	sub	sp, #16
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	6810      	ldr	r0, [r2, #0]
 8001706:	f107 020c 	add.w	r2, r7, #12
 800170a:	2101      	movs	r1, #1
 800170c:	4798      	blx	r3
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	da02      	bge.n	800171a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001714:	f06f 0304 	mvn.w	r3, #4
 8001718:	e06e      	b.n	80017f8 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6810      	ldr	r0, [r2, #0]
 8001722:	f107 020c 	add.w	r2, r7, #12
 8001726:	2101      	movs	r1, #1
 8001728:	4798      	blx	r3
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	da02      	bge.n	8001736 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001730:	f06f 0304 	mvn.w	r3, #4
 8001734:	e060      	b.n	80017f8 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001740:	2301      	movs	r3, #1
 8001742:	e059      	b.n	80017f8 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	695b      	ldr	r3, [r3, #20]
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	6810      	ldr	r0, [r2, #0]
 800174c:	f107 020c 	add.w	r2, r7, #12
 8001750:	2100      	movs	r1, #0
 8001752:	4798      	blx	r3
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	da02      	bge.n	8001760 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800175a:	f06f 0304 	mvn.w	r3, #4
 800175e:	e04b      	b.n	80017f8 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d11b      	bne.n	80017a2 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d006      	beq.n	8001782 <LAN8742_GetLinkState+0x90>
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800177e:	2302      	movs	r3, #2
 8001780:	e03a      	b.n	80017f8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800178c:	2303      	movs	r3, #3
 800178e:	e033      	b.n	80017f8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800179a:	2304      	movs	r3, #4
 800179c:	e02c      	b.n	80017f8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800179e:	2305      	movs	r3, #5
 80017a0:	e02a      	b.n	80017f8 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6810      	ldr	r0, [r2, #0]
 80017aa:	f107 020c 	add.w	r2, r7, #12
 80017ae:	211f      	movs	r1, #31
 80017b0:	4798      	blx	r3
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	da02      	bge.n	80017be <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80017b8:	f06f 0304 	mvn.w	r3, #4
 80017bc:	e01c      	b.n	80017f8 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d101      	bne.n	80017cc <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80017c8:	2306      	movs	r3, #6
 80017ca:	e015      	b.n	80017f8 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f003 031c 	and.w	r3, r3, #28
 80017d2:	2b18      	cmp	r3, #24
 80017d4:	d101      	bne.n	80017da <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80017d6:	2302      	movs	r3, #2
 80017d8:	e00e      	b.n	80017f8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f003 031c 	and.w	r3, r3, #28
 80017e0:	2b08      	cmp	r3, #8
 80017e2:	d101      	bne.n	80017e8 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e007      	b.n	80017f8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f003 031c 	and.w	r3, r3, #28
 80017ee:	2b14      	cmp	r3, #20
 80017f0:	d101      	bne.n	80017f6 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80017f2:	2304      	movs	r3, #4
 80017f4:	e000      	b.n	80017f8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80017f6:	2305      	movs	r3, #5
    }
  }
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001804:	4b0e      	ldr	r3, [pc, #56]	@ (8001840 <HAL_Init+0x40>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a0d      	ldr	r2, [pc, #52]	@ (8001840 <HAL_Init+0x40>)
 800180a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800180e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001810:	4b0b      	ldr	r3, [pc, #44]	@ (8001840 <HAL_Init+0x40>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a0a      	ldr	r2, [pc, #40]	@ (8001840 <HAL_Init+0x40>)
 8001816:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800181a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800181c:	4b08      	ldr	r3, [pc, #32]	@ (8001840 <HAL_Init+0x40>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a07      	ldr	r2, [pc, #28]	@ (8001840 <HAL_Init+0x40>)
 8001822:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001826:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001828:	2003      	movs	r0, #3
 800182a:	f000 f8fc 	bl	8001a26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800182e:	200f      	movs	r0, #15
 8001830:	f7ff fcda 	bl	80011e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001834:	f7ff fb98 	bl	8000f68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40023c00 	.word	0x40023c00

08001844 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001848:	4b06      	ldr	r3, [pc, #24]	@ (8001864 <HAL_IncTick+0x20>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <HAL_IncTick+0x24>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4413      	add	r3, r2
 8001854:	4a04      	ldr	r2, [pc, #16]	@ (8001868 <HAL_IncTick+0x24>)
 8001856:	6013      	str	r3, [r2, #0]
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	2000000c 	.word	0x2000000c
 8001868:	20000948 	.word	0x20000948

0800186c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return uwTick;
 8001870:	4b03      	ldr	r3, [pc, #12]	@ (8001880 <HAL_GetTick+0x14>)
 8001872:	681b      	ldr	r3, [r3, #0]
}
 8001874:	4618      	mov	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	20000948 	.word	0x20000948

08001884 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800188c:	f7ff ffee 	bl	800186c <HAL_GetTick>
 8001890:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800189c:	d005      	beq.n	80018aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800189e:	4b0a      	ldr	r3, [pc, #40]	@ (80018c8 <HAL_Delay+0x44>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	461a      	mov	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4413      	add	r3, r2
 80018a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018aa:	bf00      	nop
 80018ac:	f7ff ffde 	bl	800186c <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d8f7      	bhi.n	80018ac <HAL_Delay+0x28>
  {
  }
}
 80018bc:	bf00      	nop
 80018be:	bf00      	nop
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	2000000c 	.word	0x2000000c

080018cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001910 <__NVIC_SetPriorityGrouping+0x44>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018e8:	4013      	ands	r3, r2
 80018ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018fe:	4a04      	ldr	r2, [pc, #16]	@ (8001910 <__NVIC_SetPriorityGrouping+0x44>)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	60d3      	str	r3, [r2, #12]
}
 8001904:	bf00      	nop
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001918:	4b04      	ldr	r3, [pc, #16]	@ (800192c <__NVIC_GetPriorityGrouping+0x18>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	0a1b      	lsrs	r3, r3, #8
 800191e:	f003 0307 	and.w	r3, r3, #7
}
 8001922:	4618      	mov	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	2b00      	cmp	r3, #0
 8001940:	db0b      	blt.n	800195a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	f003 021f 	and.w	r2, r3, #31
 8001948:	4907      	ldr	r1, [pc, #28]	@ (8001968 <__NVIC_EnableIRQ+0x38>)
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	095b      	lsrs	r3, r3, #5
 8001950:	2001      	movs	r0, #1
 8001952:	fa00 f202 	lsl.w	r2, r0, r2
 8001956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000e100 	.word	0xe000e100

0800196c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	6039      	str	r1, [r7, #0]
 8001976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197c:	2b00      	cmp	r3, #0
 800197e:	db0a      	blt.n	8001996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	b2da      	uxtb	r2, r3
 8001984:	490c      	ldr	r1, [pc, #48]	@ (80019b8 <__NVIC_SetPriority+0x4c>)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	0112      	lsls	r2, r2, #4
 800198c:	b2d2      	uxtb	r2, r2
 800198e:	440b      	add	r3, r1
 8001990:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001994:	e00a      	b.n	80019ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4908      	ldr	r1, [pc, #32]	@ (80019bc <__NVIC_SetPriority+0x50>)
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	3b04      	subs	r3, #4
 80019a4:	0112      	lsls	r2, r2, #4
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	440b      	add	r3, r1
 80019aa:	761a      	strb	r2, [r3, #24]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000e100 	.word	0xe000e100
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b089      	sub	sp, #36	@ 0x24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f1c3 0307 	rsb	r3, r3, #7
 80019da:	2b04      	cmp	r3, #4
 80019dc:	bf28      	it	cs
 80019de:	2304      	movcs	r3, #4
 80019e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3304      	adds	r3, #4
 80019e6:	2b06      	cmp	r3, #6
 80019e8:	d902      	bls.n	80019f0 <NVIC_EncodePriority+0x30>
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3b03      	subs	r3, #3
 80019ee:	e000      	b.n	80019f2 <NVIC_EncodePriority+0x32>
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	f04f 32ff 	mov.w	r2, #4294967295
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43da      	mvns	r2, r3
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	401a      	ands	r2, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a08:	f04f 31ff 	mov.w	r1, #4294967295
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a12:	43d9      	mvns	r1, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a18:	4313      	orrs	r3, r2
         );
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3724      	adds	r7, #36	@ 0x24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff ff4c 	bl	80018cc <__NVIC_SetPriorityGrouping>
}
 8001a34:	bf00      	nop
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
 8001a48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a4e:	f7ff ff61 	bl	8001914 <__NVIC_GetPriorityGrouping>
 8001a52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	68b9      	ldr	r1, [r7, #8]
 8001a58:	6978      	ldr	r0, [r7, #20]
 8001a5a:	f7ff ffb1 	bl	80019c0 <NVIC_EncodePriority>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a64:	4611      	mov	r1, r2
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff ff80 	bl	800196c <__NVIC_SetPriority>
}
 8001a6c:	bf00      	nop
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff ff54 	bl	8001930 <__NVIC_EnableIRQ>
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e00e      	b.n	8001ac0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	795b      	ldrb	r3, [r3, #5]
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d105      	bne.n	8001ab8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff fa84 	bl	8000fc0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ad4:	f7ff feca 	bl	800186c <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e099      	b.n	8001c18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 0201 	bic.w	r2, r2, #1
 8001b02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b04:	e00f      	b.n	8001b26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b06:	f7ff feb1 	bl	800186c <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b05      	cmp	r3, #5
 8001b12:	d908      	bls.n	8001b26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2220      	movs	r2, #32
 8001b18:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2203      	movs	r2, #3
 8001b1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e078      	b.n	8001c18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1e8      	bne.n	8001b06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	4b38      	ldr	r3, [pc, #224]	@ (8001c20 <HAL_DMA_Init+0x158>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7c:	2b04      	cmp	r3, #4
 8001b7e:	d107      	bne.n	8001b90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	f023 0307 	bic.w	r3, r3, #7
 8001ba6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d117      	bne.n	8001bea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d00e      	beq.n	8001bea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 fb01 	bl	80021d4 <DMA_CheckFifoParam>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d008      	beq.n	8001bea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2240      	movs	r2, #64	@ 0x40
 8001bdc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001be6:	2301      	movs	r3, #1
 8001be8:	e016      	b.n	8001c18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 fab8 	bl	8002168 <DMA_CalcBaseAndBitshift>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c00:	223f      	movs	r2, #63	@ 0x3f
 8001c02:	409a      	lsls	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	f010803f 	.word	0xf010803f

08001c24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
 8001c30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d101      	bne.n	8001c4a <HAL_DMA_Start_IT+0x26>
 8001c46:	2302      	movs	r3, #2
 8001c48:	e040      	b.n	8001ccc <HAL_DMA_Start_IT+0xa8>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d12f      	bne.n	8001cbe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2202      	movs	r2, #2
 8001c62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	68b9      	ldr	r1, [r7, #8]
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f000 fa4a 	bl	800210c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c7c:	223f      	movs	r2, #63	@ 0x3f
 8001c7e:	409a      	lsls	r2, r3
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f042 0216 	orr.w	r2, r2, #22
 8001c92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d007      	beq.n	8001cac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0208 	orr.w	r2, r2, #8
 8001caa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 0201 	orr.w	r2, r2, #1
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	e005      	b.n	8001cca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ce2:	f7ff fdc3 	bl	800186c <HAL_GetTick>
 8001ce6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d008      	beq.n	8001d06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2280      	movs	r2, #128	@ 0x80
 8001cf8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e052      	b.n	8001dac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 0216 	bic.w	r2, r2, #22
 8001d14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	695a      	ldr	r2, [r3, #20]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d103      	bne.n	8001d36 <HAL_DMA_Abort+0x62>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d007      	beq.n	8001d46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 0208 	bic.w	r2, r2, #8
 8001d44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0201 	bic.w	r2, r2, #1
 8001d54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d56:	e013      	b.n	8001d80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d58:	f7ff fd88 	bl	800186c <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b05      	cmp	r3, #5
 8001d64:	d90c      	bls.n	8001d80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2220      	movs	r2, #32
 8001d6a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2203      	movs	r2, #3
 8001d70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e015      	b.n	8001dac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1e4      	bne.n	8001d58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d92:	223f      	movs	r2, #63	@ 0x3f
 8001d94:	409a      	lsls	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d004      	beq.n	8001dd2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2280      	movs	r2, #128	@ 0x80
 8001dcc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e00c      	b.n	8001dec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2205      	movs	r2, #5
 8001dd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0201 	bic.w	r2, r2, #1
 8001de8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e04:	4b8e      	ldr	r3, [pc, #568]	@ (8002040 <HAL_DMA_IRQHandler+0x248>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a8e      	ldr	r2, [pc, #568]	@ (8002044 <HAL_DMA_IRQHandler+0x24c>)
 8001e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0e:	0a9b      	lsrs	r3, r3, #10
 8001e10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e22:	2208      	movs	r2, #8
 8001e24:	409a      	lsls	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d01a      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d013      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0204 	bic.w	r2, r2, #4
 8001e4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e50:	2208      	movs	r2, #8
 8001e52:	409a      	lsls	r2, r3
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e5c:	f043 0201 	orr.w	r2, r3, #1
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e68:	2201      	movs	r2, #1
 8001e6a:	409a      	lsls	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d012      	beq.n	8001e9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00b      	beq.n	8001e9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e86:	2201      	movs	r2, #1
 8001e88:	409a      	lsls	r2, r3
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e92:	f043 0202 	orr.w	r2, r3, #2
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e9e:	2204      	movs	r2, #4
 8001ea0:	409a      	lsls	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d012      	beq.n	8001ed0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00b      	beq.n	8001ed0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ebc:	2204      	movs	r2, #4
 8001ebe:	409a      	lsls	r2, r3
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ec8:	f043 0204 	orr.w	r2, r3, #4
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ed4:	2210      	movs	r2, #16
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d043      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d03c      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ef2:	2210      	movs	r2, #16
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d018      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d108      	bne.n	8001f28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d024      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	4798      	blx	r3
 8001f26:	e01f      	b.n	8001f68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d01b      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	4798      	blx	r3
 8001f38:	e016      	b.n	8001f68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d107      	bne.n	8001f58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0208 	bic.w	r2, r2, #8
 8001f56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	409a      	lsls	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 808f 	beq.w	8002098 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0310 	and.w	r3, r3, #16
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f000 8087 	beq.w	8002098 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f8e:	2220      	movs	r2, #32
 8001f90:	409a      	lsls	r2, r3
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b05      	cmp	r3, #5
 8001fa0:	d136      	bne.n	8002010 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0216 	bic.w	r2, r2, #22
 8001fb0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	695a      	ldr	r2, [r3, #20]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fc0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d103      	bne.n	8001fd2 <HAL_DMA_IRQHandler+0x1da>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d007      	beq.n	8001fe2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0208 	bic.w	r2, r2, #8
 8001fe0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fe6:	223f      	movs	r2, #63	@ 0x3f
 8001fe8:	409a      	lsls	r2, r3
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002002:	2b00      	cmp	r3, #0
 8002004:	d07e      	beq.n	8002104 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	4798      	blx	r3
        }
        return;
 800200e:	e079      	b.n	8002104 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d01d      	beq.n	800205a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10d      	bne.n	8002048 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002030:	2b00      	cmp	r3, #0
 8002032:	d031      	beq.n	8002098 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	4798      	blx	r3
 800203c:	e02c      	b.n	8002098 <HAL_DMA_IRQHandler+0x2a0>
 800203e:	bf00      	nop
 8002040:	20000004 	.word	0x20000004
 8002044:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800204c:	2b00      	cmp	r3, #0
 800204e:	d023      	beq.n	8002098 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	4798      	blx	r3
 8002058:	e01e      	b.n	8002098 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10f      	bne.n	8002088 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0210 	bic.w	r2, r2, #16
 8002076:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800209c:	2b00      	cmp	r3, #0
 800209e:	d032      	beq.n	8002106 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d022      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2205      	movs	r2, #5
 80020b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0201 	bic.w	r2, r2, #1
 80020c2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	3301      	adds	r3, #1
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d307      	bcc.n	80020e0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f2      	bne.n	80020c4 <HAL_DMA_IRQHandler+0x2cc>
 80020de:	e000      	b.n	80020e2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020e0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d005      	beq.n	8002106 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	4798      	blx	r3
 8002102:	e000      	b.n	8002106 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002104:	bf00      	nop
    }
  }
}
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
 8002118:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002128:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	2b40      	cmp	r3, #64	@ 0x40
 8002138:	d108      	bne.n	800214c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800214a:	e007      	b.n	800215c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	60da      	str	r2, [r3, #12]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	b2db      	uxtb	r3, r3
 8002176:	3b10      	subs	r3, #16
 8002178:	4a14      	ldr	r2, [pc, #80]	@ (80021cc <DMA_CalcBaseAndBitshift+0x64>)
 800217a:	fba2 2303 	umull	r2, r3, r2, r3
 800217e:	091b      	lsrs	r3, r3, #4
 8002180:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002182:	4a13      	ldr	r2, [pc, #76]	@ (80021d0 <DMA_CalcBaseAndBitshift+0x68>)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4413      	add	r3, r2
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2b03      	cmp	r3, #3
 8002194:	d909      	bls.n	80021aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800219e:	f023 0303 	bic.w	r3, r3, #3
 80021a2:	1d1a      	adds	r2, r3, #4
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	659a      	str	r2, [r3, #88]	@ 0x58
 80021a8:	e007      	b.n	80021ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80021b2:	f023 0303 	bic.w	r3, r3, #3
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	aaaaaaab 	.word	0xaaaaaaab
 80021d0:	0801b560 	.word	0x0801b560

080021d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021dc:	2300      	movs	r3, #0
 80021de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d11f      	bne.n	800222e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d856      	bhi.n	80022a2 <DMA_CheckFifoParam+0xce>
 80021f4:	a201      	add	r2, pc, #4	@ (adr r2, 80021fc <DMA_CheckFifoParam+0x28>)
 80021f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021fa:	bf00      	nop
 80021fc:	0800220d 	.word	0x0800220d
 8002200:	0800221f 	.word	0x0800221f
 8002204:	0800220d 	.word	0x0800220d
 8002208:	080022a3 	.word	0x080022a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002210:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d046      	beq.n	80022a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800221c:	e043      	b.n	80022a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002222:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002226:	d140      	bne.n	80022aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800222c:	e03d      	b.n	80022aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002236:	d121      	bne.n	800227c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2b03      	cmp	r3, #3
 800223c:	d837      	bhi.n	80022ae <DMA_CheckFifoParam+0xda>
 800223e:	a201      	add	r2, pc, #4	@ (adr r2, 8002244 <DMA_CheckFifoParam+0x70>)
 8002240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002244:	08002255 	.word	0x08002255
 8002248:	0800225b 	.word	0x0800225b
 800224c:	08002255 	.word	0x08002255
 8002250:	0800226d 	.word	0x0800226d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	73fb      	strb	r3, [r7, #15]
      break;
 8002258:	e030      	b.n	80022bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800225e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d025      	beq.n	80022b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800226a:	e022      	b.n	80022b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002270:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002274:	d11f      	bne.n	80022b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800227a:	e01c      	b.n	80022b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	2b02      	cmp	r3, #2
 8002280:	d903      	bls.n	800228a <DMA_CheckFifoParam+0xb6>
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	2b03      	cmp	r3, #3
 8002286:	d003      	beq.n	8002290 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002288:	e018      	b.n	80022bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	73fb      	strb	r3, [r7, #15]
      break;
 800228e:	e015      	b.n	80022bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002294:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00e      	beq.n	80022ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	73fb      	strb	r3, [r7, #15]
      break;
 80022a0:	e00b      	b.n	80022ba <DMA_CheckFifoParam+0xe6>
      break;
 80022a2:	bf00      	nop
 80022a4:	e00a      	b.n	80022bc <DMA_CheckFifoParam+0xe8>
      break;
 80022a6:	bf00      	nop
 80022a8:	e008      	b.n	80022bc <DMA_CheckFifoParam+0xe8>
      break;
 80022aa:	bf00      	nop
 80022ac:	e006      	b.n	80022bc <DMA_CheckFifoParam+0xe8>
      break;
 80022ae:	bf00      	nop
 80022b0:	e004      	b.n	80022bc <DMA_CheckFifoParam+0xe8>
      break;
 80022b2:	bf00      	nop
 80022b4:	e002      	b.n	80022bc <DMA_CheckFifoParam+0xe8>
      break;   
 80022b6:	bf00      	nop
 80022b8:	e000      	b.n	80022bc <DMA_CheckFifoParam+0xe8>
      break;
 80022ba:	bf00      	nop
    }
  } 
  
  return status; 
 80022bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop

080022cc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e06c      	b.n	80023b8 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d106      	bne.n	80022f6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2223      	movs	r2, #35	@ 0x23
 80022ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f004 fae5 	bl	80068c0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	60bb      	str	r3, [r7, #8]
 80022fa:	4b31      	ldr	r3, [pc, #196]	@ (80023c0 <HAL_ETH_Init+0xf4>)
 80022fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fe:	4a30      	ldr	r2, [pc, #192]	@ (80023c0 <HAL_ETH_Init+0xf4>)
 8002300:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002304:	6453      	str	r3, [r2, #68]	@ 0x44
 8002306:	4b2e      	ldr	r3, [pc, #184]	@ (80023c0 <HAL_ETH_Init+0xf4>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800230e:	60bb      	str	r3, [r7, #8]
 8002310:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002312:	4b2c      	ldr	r3, [pc, #176]	@ (80023c4 <HAL_ETH_Init+0xf8>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	4a2b      	ldr	r2, [pc, #172]	@ (80023c4 <HAL_ETH_Init+0xf8>)
 8002318:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800231c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800231e:	4b29      	ldr	r3, [pc, #164]	@ (80023c4 <HAL_ETH_Init+0xf8>)
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	4927      	ldr	r1, [pc, #156]	@ (80023c4 <HAL_ETH_Init+0xf8>)
 8002328:	4313      	orrs	r3, r2
 800232a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800232c:	4b25      	ldr	r3, [pc, #148]	@ (80023c4 <HAL_ETH_Init+0xf8>)
 800232e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6812      	ldr	r2, [r2, #0]
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002346:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002348:	f7ff fa90 	bl	800186c <HAL_GetTick>
 800234c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800234e:	e011      	b.n	8002374 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002350:	f7ff fa8c 	bl	800186c <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800235e:	d909      	bls.n	8002374 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2204      	movs	r2, #4
 8002364:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	22e0      	movs	r2, #224	@ 0xe0
 800236c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e021      	b.n	80023b8 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1e4      	bne.n	8002350 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 ff56 	bl	8003238 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 fffd 	bl	800338c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f001 f853 	bl	800343e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	461a      	mov	r2, r3
 800239e:	2100      	movs	r1, #0
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 ffbb 	bl	800331c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2210      	movs	r2, #16
 80023b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40013800 	.word	0x40013800

080023c8 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023d6:	2b10      	cmp	r3, #16
 80023d8:	d17f      	bne.n	80024da <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2223      	movs	r2, #35	@ 0x23
 80023de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80023f6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6812      	ldr	r2, [r2, #0]
 8002404:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002408:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800240c:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002420:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2204      	movs	r2, #4
 8002428:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f9f8 	bl	8002820 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0208 	orr.w	r2, r2, #8
 800243e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002448:	2001      	movs	r0, #1
 800244a:	f7ff fa1b 	bl	8001884 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f042 0204 	orr.w	r2, r2, #4
 8002464:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800246e:	2001      	movs	r0, #1
 8002470:	f7ff fa08 	bl	8001884 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 fd7c 	bl	8002f7a <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002494:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002498:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	f043 0302 	orr.w	r3, r3, #2
 80024ac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024b0:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6812      	ldr	r2, [r2, #0]
 80024c0:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 80024c4:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 80024c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024cc:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2223      	movs	r2, #35	@ 0x23
 80024d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	e000      	b.n	80024dc <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
  }
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024f2:	2b23      	cmp	r3, #35	@ 0x23
 80024f4:	d170      	bne.n	80025d8 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2223      	movs	r2, #35	@ 0x23
 80024fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6812      	ldr	r2, [r2, #0]
 800250c:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 8002510:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8002514:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002518:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6812      	ldr	r2, [r2, #0]
 8002528:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800252c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002530:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6812      	ldr	r2, [r2, #0]
 8002540:	f023 0302 	bic.w	r3, r3, #2
 8002544:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002548:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0204 	bic.w	r2, r2, #4
 8002558:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002562:	2001      	movs	r0, #1
 8002564:	f7ff f98e 	bl	8001884 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 fd02 	bl	8002f7a <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 0208 	bic.w	r2, r2, #8
 8002584:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800258e:	2001      	movs	r0, #1
 8002590:	f7ff f978 	bl	8001884 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	e00e      	b.n	80025c0 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	3212      	adds	r2, #18
 80025a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ac:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	3301      	adds	r3, #1
 80025be:	617b      	str	r3, [r7, #20]
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	2b03      	cmp	r3, #3
 80025c4:	d9ed      	bls.n	80025a2 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2210      	movs	r2, #16
 80025d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80025d4:	2300      	movs	r3, #0
 80025d6:	e000      	b.n	80025da <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
  }
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d109      	bne.n	8002606 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025f8:	f043 0201 	orr.w	r2, r3, #1
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e045      	b.n	8002692 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800260c:	2b23      	cmp	r3, #35	@ 0x23
 800260e:	d13f      	bne.n	8002690 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002618:	2201      	movs	r2, #1
 800261a:	6839      	ldr	r1, [r7, #0]
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 ff7b 	bl	8003518 <ETH_Prepare_Tx_Descriptors>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d009      	beq.n	800263c <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800262e:	f043 0202 	orr.w	r2, r3, #2
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e02a      	b.n	8002692 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 800263c:	f3bf 8f4f 	dsb	sy
}
 8002640:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002646:	1c5a      	adds	r2, r3, #1
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	629a      	str	r2, [r3, #40]	@ 0x28
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002650:	2b03      	cmp	r3, #3
 8002652:	d904      	bls.n	800265e <HAL_ETH_Transmit_IT+0x7c>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002658:	1f1a      	subs	r2, r3, #4
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00d      	beq.n	800268c <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002678:	461a      	mov	r2, r3
 800267a:	2304      	movs	r3, #4
 800267c:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002686:	461a      	mov	r2, r3
 8002688:	2300      	movs	r3, #0
 800268a:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800268c:	2300      	movs	r3, #0
 800268e:	e000      	b.n	8002692 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
  }
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b088      	sub	sp, #32
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
 80026a2:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d109      	bne.n	80026c6 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026b8:	f043 0201 	orr.w	r2, r3, #1
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e0a8      	b.n	8002818 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026cc:	2b23      	cmp	r3, #35	@ 0x23
 80026ce:	d001      	beq.n	80026d4 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e0a1      	b.n	8002818 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69fa      	ldr	r2, [r7, #28]
 80026de:	3212      	adds	r2, #18
 80026e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e4:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026ea:	f1c3 0304 	rsb	r3, r3, #4
 80026ee:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80026f0:	e06a      	b.n	80027c8 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d007      	beq.n	800270e <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	69da      	ldr	r2, [r3, #28]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	699a      	ldr	r2, [r3, #24]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002716:	2b00      	cmp	r3, #0
 8002718:	d103      	bne.n	8002722 <HAL_ETH_ReadData+0x88>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800271e:	2b00      	cmp	r3, #0
 8002720:	d040      	beq.n	80027a4 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800272a:	2b00      	cmp	r3, #0
 800272c:	d005      	beq.n	800273a <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00c      	beq.n	8002766 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	0c1b      	lsrs	r3, r3, #16
 8002752:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002756:	3b04      	subs	r3, #4
 8002758:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8002762:	2301      	movs	r3, #1
 8002764:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800277e:	461a      	mov	r2, r3
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	b29b      	uxth	r3, r3
 8002784:	f004 fa76 	bl	8006c74 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800278c:	1c5a      	adds	r2, r3, #1
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	441a      	add	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	2200      	movs	r2, #0
 80027a2:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	3301      	adds	r3, #1
 80027a8:	61fb      	str	r3, [r7, #28]
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d902      	bls.n	80027b6 <HAL_ETH_ReadData+0x11c>
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	3b04      	subs	r3, #4
 80027b4:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69fa      	ldr	r2, [r7, #28]
 80027ba:	3212      	adds	r2, #18
 80027bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c0:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	3301      	adds	r3, #1
 80027c6:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	db06      	blt.n	80027de <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d202      	bcs.n	80027de <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d089      	beq.n	80026f2 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	441a      	add	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d002      	beq.n	80027f8 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f814 	bl	8002820 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69fa      	ldr	r2, [r7, #28]
 80027fc:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d108      	bne.n	8002816 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002812:	2300      	movs	r3, #0
 8002814:	e000      	b.n	8002818 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
}
 8002818:	4618      	mov	r0, r3
 800281a:	3720      	adds	r7, #32
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b088      	sub	sp, #32
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002828:	2300      	movs	r3, #0
 800282a:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 800282c:	2301      	movs	r3, #1
 800282e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002834:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69fa      	ldr	r2, [r7, #28]
 800283a:	3212      	adds	r2, #18
 800283c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002840:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002846:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002848:	e03d      	b.n	80028c6 <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d112      	bne.n	8002878 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002852:	f107 0308 	add.w	r3, r7, #8
 8002856:	4618      	mov	r0, r3
 8002858:	f004 f9dc 	bl	8006c14 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d102      	bne.n	8002868 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002862:	2300      	movs	r3, #0
 8002864:	74fb      	strb	r3, [r7, #19]
 8002866:	e007      	b.n	8002878 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	461a      	mov	r2, r3
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	461a      	mov	r2, r3
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002878:	7cfb      	ldrb	r3, [r7, #19]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d023      	beq.n	80028c6 <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002882:	2b00      	cmp	r3, #0
 8002884:	d103      	bne.n	800288e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	4a24      	ldr	r2, [pc, #144]	@ (800291c <ETH_UpdateDescriptor+0xfc>)
 800288a:	605a      	str	r2, [r3, #4]
 800288c:	e003      	b.n	8002896 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8002894:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	3301      	adds	r3, #1
 80028a6:	61fb      	str	r3, [r7, #28]
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d902      	bls.n	80028b4 <ETH_UpdateDescriptor+0x94>
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	3b04      	subs	r3, #4
 80028b2:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69fa      	ldr	r2, [r7, #28]
 80028b8:	3212      	adds	r2, #18
 80028ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028be:	617b      	str	r3, [r7, #20]
      desccount--;
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d002      	beq.n	80028d2 <ETH_UpdateDescriptor+0xb2>
 80028cc:	7cfb      	ldrb	r3, [r7, #19]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1bb      	bne.n	800284a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d01a      	beq.n	8002912 <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	3301      	adds	r3, #1
 80028e0:	f003 0303 	and.w	r3, r3, #3
 80028e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80028e6:	f3bf 8f5f 	dmb	sy
}
 80028ea:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6919      	ldr	r1, [r3, #16]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	18ca      	adds	r2, r1, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002904:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69fa      	ldr	r2, [r7, #28]
 800290a:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002912:	bf00      	nop
 8002914:	3720      	adds	r7, #32
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	80004600 	.word	0x80004600

08002920 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3318      	adds	r3, #24
 800292c:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002932:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002938:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800293a:	2301      	movs	r3, #1
 800293c:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800293e:	e03f      	b.n	80029c0 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8002940:	2301      	movs	r3, #1
 8002942:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	3b01      	subs	r3, #1
 8002948:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	3304      	adds	r3, #4
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	3301      	adds	r3, #1
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002968:	7bbb      	ldrb	r3, [r7, #14]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d028      	beq.n	80029c0 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68d9      	ldr	r1, [r3, #12]
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4613      	mov	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	440b      	add	r3, r1
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	db1b      	blt.n	80029bc <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	3304      	adds	r3, #4
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	4618      	mov	r0, r3
 8002992:	f004 f9af 	bl	8006cf4 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	3304      	adds	r3, #4
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	2200      	movs	r2, #0
 80029a2:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	3301      	adds	r3, #1
 80029a8:	f003 0303 	and.w	r3, r3, #3
 80029ac:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80029ba:	e001      	b.n	80029c0 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <HAL_ETH_ReleaseTxPacket+0xac>
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1b9      	bne.n	8002940 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ee:	2b40      	cmp	r3, #64	@ 0x40
 80029f0:	d112      	bne.n	8002a18 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a00:	2b40      	cmp	r3, #64	@ 0x40
 8002a02:	d109      	bne.n	8002a18 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4b50      	ldr	r3, [pc, #320]	@ (8002b50 <HAL_ETH_IRQHandler+0x178>)
 8002a10:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f003 fc76 	bl	8006304 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d113      	bne.n	8002a52 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d10a      	bne.n	8002a52 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a44:	461a      	mov	r2, r3
 8002a46:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8002a4a:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f003 fc69 	bl	8006324 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a64:	d14c      	bne.n	8002b00 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a78:	d142      	bne.n	8002b00 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a80:	f043 0208 	orr.w	r2, r3, #8
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a9c:	d11a      	bne.n	8002ad4 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002aa6:	695a      	ldr	r2, [r3, #20]
 8002aa8:	4b2a      	ldr	r3, [pc, #168]	@ (8002b54 <HAL_ETH_IRQHandler+0x17c>)
 8002aaa:	4013      	ands	r3, r2
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6812      	ldr	r2, [r2, #0]
 8002ac0:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8002ac4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ac8:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	22e0      	movs	r2, #224	@ 0xe0
 8002ace:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002ad2:	e012      	b.n	8002afa <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002adc:	695a      	ldr	r2, [r3, #20]
 8002ade:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002af2:	461a      	mov	r2, r3
 8002af4:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002af8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f003 fc22 	bl	8006344 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b08      	cmp	r3, #8
 8002b0c:	d10e      	bne.n	8002b2c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b14:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f81c 	bl	8002b5c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b58 <HAL_ETH_IRQHandler+0x180>)
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d006      	beq.n	8002b46 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002b38:	4b07      	ldr	r3, [pc, #28]	@ (8002b58 <HAL_ETH_IRQHandler+0x180>)
 8002b3a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002b3e:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f815 	bl	8002b70 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002b46:	bf00      	nop
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	00010040 	.word	0x00010040
 8002b54:	007e2000 	.word	0x007e2000
 8002b58:	40013c00 	.word	0x40013c00

08002b5c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
 8002b90:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	f003 031c 	and.w	r3, r3, #28
 8002ba0:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	02db      	lsls	r3, r3, #11
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	019b      	lsls	r3, r3, #6
 8002bb2:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f023 0302 	bic.w	r3, r3, #2
 8002bc2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002bd4:	f7fe fe4a 	bl	800186c <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002bda:	e00d      	b.n	8002bf8 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002bdc:	f7fe fe46 	bl	800186c <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bea:	d301      	bcc.n	8002bf0 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e010      	b.n	8002c12 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1ec      	bne.n	8002bdc <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b086      	sub	sp, #24
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	60f8      	str	r0, [r7, #12]
 8002c22:	60b9      	str	r1, [r7, #8]
 8002c24:	607a      	str	r2, [r7, #4]
 8002c26:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	f003 031c 	and.w	r3, r3, #28
 8002c36:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	02db      	lsls	r3, r3, #11
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	019b      	lsls	r3, r3, #6
 8002c48:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f043 0302 	orr.w	r3, r3, #2
 8002c58:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f043 0301 	orr.w	r3, r3, #1
 8002c60:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c74:	f7fe fdfa 	bl	800186c <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002c7a:	e00d      	b.n	8002c98 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002c7c:	f7fe fdf6 	bl	800186c <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c8a:	d301      	bcc.n	8002c90 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e009      	b.n	8002ca4 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1ec      	bne.n	8002c7c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3718      	adds	r7, #24
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0d9      	b.n	8002e74 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0310 	and.w	r3, r3, #16
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	bf14      	ite	ne
 8002cce:	2301      	movne	r3, #1
 8002cd0:	2300      	moveq	r3, #0
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	bf0c      	ite	eq
 8002cf8:	2301      	moveq	r3, #1
 8002cfa:	2300      	movne	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	461a      	mov	r2, r3
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	bf14      	ite	ne
 8002d14:	2301      	movne	r3, #1
 8002d16:	2300      	moveq	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	bf0c      	ite	eq
 8002d2e:	2301      	moveq	r3, #1
 8002d30:	2300      	movne	r3, #0
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	461a      	mov	r2, r3
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	bf14      	ite	ne
 8002d48:	2301      	movne	r3, #1
 8002d4a:	2300      	moveq	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	461a      	mov	r2, r3
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	bf0c      	ite	eq
 8002d7e:	2301      	moveq	r3, #1
 8002d80:	2300      	movne	r3, #0
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	461a      	mov	r2, r3
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	bf0c      	ite	eq
 8002d98:	2301      	moveq	r3, #1
 8002d9a:	2300      	movne	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	461a      	mov	r2, r3
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	bf14      	ite	ne
 8002db2:	2301      	movne	r3, #1
 8002db4:	2300      	moveq	r3, #0
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	461a      	mov	r2, r3
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	bf14      	ite	ne
 8002dda:	2301      	movne	r3, #1
 8002ddc:	2300      	moveq	r3, #0
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	461a      	mov	r2, r3
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	bf14      	ite	ne
 8002df4:	2301      	movne	r3, #1
 8002df6:	2300      	moveq	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	bf0c      	ite	eq
 8002e10:	2301      	moveq	r3, #1
 8002e12:	2300      	movne	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	461a      	mov	r2, r3
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	0c1b      	lsrs	r3, r3, #16
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	bf14      	ite	ne
 8002e48:	2301      	movne	r3, #1
 8002e4a:	2300      	moveq	r3, #0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	461a      	mov	r2, r3
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	bf14      	ite	ne
 8002e64:	2301      	movne	r3, #1
 8002e66:	2300      	moveq	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e00b      	b.n	8002eac <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e9a:	2b10      	cmp	r3, #16
 8002e9c:	d105      	bne.n	8002eaa <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002e9e:	6839      	ldr	r1, [r7, #0]
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f88f 	bl	8002fc4 <ETH_SetMACConfig>

    return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	e000      	b.n	8002eac <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
  }
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f023 031c 	bic.w	r3, r3, #28
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002ecc:	f001 fa9e 	bl	800440c <HAL_RCC_GetHCLKFreq>
 8002ed0:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8002f4c <HAL_ETH_SetMDIOClockRange+0x98>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d908      	bls.n	8002eec <HAL_ETH_SetMDIOClockRange+0x38>
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	4a1c      	ldr	r2, [pc, #112]	@ (8002f50 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d804      	bhi.n	8002eec <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f043 0308 	orr.w	r3, r3, #8
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	e027      	b.n	8002f3c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	4a18      	ldr	r2, [pc, #96]	@ (8002f50 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d908      	bls.n	8002f06 <HAL_ETH_SetMDIOClockRange+0x52>
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	4a17      	ldr	r2, [pc, #92]	@ (8002f54 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d204      	bcs.n	8002f06 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f043 030c 	orr.w	r3, r3, #12
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	e01a      	b.n	8002f3c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	4a12      	ldr	r2, [pc, #72]	@ (8002f54 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d303      	bcc.n	8002f16 <HAL_ETH_SetMDIOClockRange+0x62>
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	4a11      	ldr	r2, [pc, #68]	@ (8002f58 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d911      	bls.n	8002f3a <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	4a0f      	ldr	r2, [pc, #60]	@ (8002f58 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d908      	bls.n	8002f30 <HAL_ETH_SetMDIOClockRange+0x7c>
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	4a0e      	ldr	r2, [pc, #56]	@ (8002f5c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d804      	bhi.n	8002f30 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f043 0304 	orr.w	r3, r3, #4
 8002f2c:	60fb      	str	r3, [r7, #12]
 8002f2e:	e005      	b.n	8002f3c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f043 0310 	orr.w	r3, r3, #16
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	e000      	b.n	8002f3c <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002f3a:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	611a      	str	r2, [r3, #16]
}
 8002f44:	bf00      	nop
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	01312cff 	.word	0x01312cff
 8002f50:	02160ebf 	.word	0x02160ebf
 8002f54:	03938700 	.word	0x03938700
 8002f58:	05f5e0ff 	.word	0x05f5e0ff
 8002f5c:	08f0d17f 	.word	0x08f0d17f

08002f60 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b084      	sub	sp, #16
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6812      	ldr	r2, [r2, #0]
 8002f94:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f98:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f9c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002faa:	2001      	movs	r0, #1
 8002fac:	f7fe fc6a 	bl	8001884 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002fba:	6193      	str	r3, [r2, #24]
}
 8002fbc:	bf00      	nop
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	4b51      	ldr	r3, [pc, #324]	@ (8003120 <ETH_SetMACConfig+0x15c>)
 8002fda:	4013      	ands	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	7c1b      	ldrb	r3, [r3, #16]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d102      	bne.n	8002fec <ETH_SetMACConfig+0x28>
 8002fe6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002fea:	e000      	b.n	8002fee <ETH_SetMACConfig+0x2a>
 8002fec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	7c5b      	ldrb	r3, [r3, #17]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d102      	bne.n	8002ffc <ETH_SetMACConfig+0x38>
 8002ff6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002ffa:	e000      	b.n	8002ffe <ETH_SetMACConfig+0x3a>
 8002ffc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002ffe:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003004:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	7fdb      	ldrb	r3, [r3, #31]
 800300a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800300c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003012:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	7f92      	ldrb	r2, [r2, #30]
 8003018:	2a00      	cmp	r2, #0
 800301a:	d102      	bne.n	8003022 <ETH_SetMACConfig+0x5e>
 800301c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003020:	e000      	b.n	8003024 <ETH_SetMACConfig+0x60>
 8003022:	2200      	movs	r2, #0
                        macconf->Speed |
 8003024:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	7f1b      	ldrb	r3, [r3, #28]
 800302a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800302c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003032:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	791b      	ldrb	r3, [r3, #4]
 8003038:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800303a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003042:	2a00      	cmp	r2, #0
 8003044:	d102      	bne.n	800304c <ETH_SetMACConfig+0x88>
 8003046:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800304a:	e000      	b.n	800304e <ETH_SetMACConfig+0x8a>
 800304c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800304e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	7bdb      	ldrb	r3, [r3, #15]
 8003054:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003056:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800305c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003064:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003066:	4313      	orrs	r3, r2
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	4313      	orrs	r3, r2
 800306c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800307e:	2001      	movs	r0, #1
 8003080:	f7fe fc00 	bl	8001884 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800309a:	4013      	ands	r3, r2
 800309c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030a2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80030aa:	2a00      	cmp	r2, #0
 80030ac:	d101      	bne.n	80030b2 <ETH_SetMACConfig+0xee>
 80030ae:	2280      	movs	r2, #128	@ 0x80
 80030b0:	e000      	b.n	80030b4 <ETH_SetMACConfig+0xf0>
 80030b2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80030b4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80030ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80030c2:	2a01      	cmp	r2, #1
 80030c4:	d101      	bne.n	80030ca <ETH_SetMACConfig+0x106>
 80030c6:	2208      	movs	r2, #8
 80030c8:	e000      	b.n	80030cc <ETH_SetMACConfig+0x108>
 80030ca:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80030cc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80030d4:	2a01      	cmp	r2, #1
 80030d6:	d101      	bne.n	80030dc <ETH_SetMACConfig+0x118>
 80030d8:	2204      	movs	r2, #4
 80030da:	e000      	b.n	80030de <ETH_SetMACConfig+0x11a>
 80030dc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80030de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80030e6:	2a01      	cmp	r2, #1
 80030e8:	d101      	bne.n	80030ee <ETH_SetMACConfig+0x12a>
 80030ea:	2202      	movs	r2, #2
 80030ec:	e000      	b.n	80030f0 <ETH_SetMACConfig+0x12c>
 80030ee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80030f0:	4313      	orrs	r3, r2
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003108:	2001      	movs	r0, #1
 800310a:	f7fe fbbb 	bl	8001884 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	619a      	str	r2, [r3, #24]
}
 8003116:	bf00      	nop
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	ff20810f 	.word	0xff20810f

08003124 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4b3d      	ldr	r3, [pc, #244]	@ (8003234 <ETH_SetDMAConfig+0x110>)
 800313e:	4013      	ands	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	7b1b      	ldrb	r3, [r3, #12]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d102      	bne.n	8003150 <ETH_SetDMAConfig+0x2c>
 800314a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800314e:	e000      	b.n	8003152 <ETH_SetDMAConfig+0x2e>
 8003150:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	7b5b      	ldrb	r3, [r3, #13]
 8003156:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003158:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	7f52      	ldrb	r2, [r2, #29]
 800315e:	2a00      	cmp	r2, #0
 8003160:	d102      	bne.n	8003168 <ETH_SetDMAConfig+0x44>
 8003162:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003166:	e000      	b.n	800316a <ETH_SetDMAConfig+0x46>
 8003168:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800316a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	7b9b      	ldrb	r3, [r3, #14]
 8003170:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003172:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003178:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	7f1b      	ldrb	r3, [r3, #28]
 800317e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003180:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	7f9b      	ldrb	r3, [r3, #30]
 8003186:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003188:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800318e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003196:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003198:	4313      	orrs	r3, r2
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4313      	orrs	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031a8:	461a      	mov	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80031ba:	2001      	movs	r0, #1
 80031bc:	f7fe fb62 	bl	8001884 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031c8:	461a      	mov	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	791b      	ldrb	r3, [r3, #4]
 80031d2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80031d8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80031de:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80031e4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80031ec:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80031ee:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80031f6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80031fc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6812      	ldr	r2, [r2, #0]
 8003202:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003206:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800320a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003218:	2001      	movs	r0, #1
 800321a:	f7fe fb33 	bl	8001884 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003226:	461a      	mov	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6013      	str	r3, [r2, #0]
}
 800322c:	bf00      	nop
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	f8de3f23 	.word	0xf8de3f23

08003238 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b0a6      	sub	sp, #152	@ 0x98
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003240:	2301      	movs	r3, #1
 8003242:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8003246:	2301      	movs	r3, #1
 8003248:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800324c:	2300      	movs	r3, #0
 800324e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003250:	2300      	movs	r3, #0
 8003252:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003256:	2301      	movs	r3, #1
 8003258:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800325c:	2300      	movs	r3, #0
 800325e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003262:	2301      	movs	r3, #1
 8003264:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003268:	2300      	movs	r3, #0
 800326a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800326e:	2300      	movs	r3, #0
 8003270:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003274:	2300      	movs	r3, #0
 8003276:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003278:	2300      	movs	r3, #0
 800327a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800327e:	2300      	movs	r3, #0
 8003280:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003282:	2300      	movs	r3, #0
 8003284:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003288:	2300      	movs	r3, #0
 800328a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800328e:	2300      	movs	r3, #0
 8003290:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003294:	2300      	movs	r3, #0
 8003296:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800329a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800329e:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80032a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80032a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80032a6:	2300      	movs	r3, #0
 80032a8:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80032ac:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80032b0:	4619      	mov	r1, r3
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff fe86 	bl	8002fc4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80032b8:	2301      	movs	r3, #1
 80032ba:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80032bc:	2301      	movs	r3, #1
 80032be:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80032c0:	2301      	movs	r3, #1
 80032c2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80032c6:	2301      	movs	r3, #1
 80032c8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80032ca:	2300      	movs	r3, #0
 80032cc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80032ce:	2300      	movs	r3, #0
 80032d0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80032d4:	2300      	movs	r3, #0
 80032d6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80032da:	2300      	movs	r3, #0
 80032dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80032de:	2301      	movs	r3, #1
 80032e0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80032e4:	2301      	movs	r3, #1
 80032e6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80032e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80032ec:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80032ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80032f2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80032f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80032f8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80032fa:	2301      	movs	r3, #1
 80032fc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003300:	2300      	movs	r3, #0
 8003302:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003304:	2300      	movs	r3, #0
 8003306:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003308:	f107 0308 	add.w	r3, r7, #8
 800330c:	4619      	mov	r1, r3
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff ff08 	bl	8003124 <ETH_SetDMAConfig>
}
 8003314:	bf00      	nop
 8003316:	3798      	adds	r7, #152	@ 0x98
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800331c:	b480      	push	{r7}
 800331e:	b087      	sub	sp, #28
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3305      	adds	r3, #5
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	021b      	lsls	r3, r3, #8
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	3204      	adds	r2, #4
 8003334:	7812      	ldrb	r2, [r2, #0]
 8003336:	4313      	orrs	r3, r2
 8003338:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	4b11      	ldr	r3, [pc, #68]	@ (8003384 <ETH_MACAddressConfig+0x68>)
 800333e:	4413      	add	r3, r2
 8003340:	461a      	mov	r2, r3
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	3303      	adds	r3, #3
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	061a      	lsls	r2, r3, #24
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	3302      	adds	r3, #2
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	041b      	lsls	r3, r3, #16
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3301      	adds	r3, #1
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	021b      	lsls	r3, r3, #8
 8003360:	4313      	orrs	r3, r2
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	7812      	ldrb	r2, [r2, #0]
 8003366:	4313      	orrs	r3, r2
 8003368:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	4b06      	ldr	r3, [pc, #24]	@ (8003388 <ETH_MACAddressConfig+0x6c>)
 800336e:	4413      	add	r3, r2
 8003370:	461a      	mov	r2, r3
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	6013      	str	r3, [r2, #0]
}
 8003376:	bf00      	nop
 8003378:	371c      	adds	r7, #28
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	40028040 	.word	0x40028040
 8003388:	40028044 	.word	0x40028044

0800338c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003394:	2300      	movs	r3, #0
 8003396:	60fb      	str	r3, [r7, #12]
 8003398:	e03e      	b.n	8003418 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68d9      	ldr	r1, [r3, #12]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	4613      	mov	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	440b      	add	r3, r1
 80033aa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2200      	movs	r2, #0
 80033b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2200      	movs	r2, #0
 80033bc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2200      	movs	r2, #0
 80033c2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80033c4:	68b9      	ldr	r1, [r7, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	3206      	adds	r2, #6
 80033cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d80c      	bhi.n	80033fc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68d9      	ldr	r1, [r3, #12]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	1c5a      	adds	r2, r3, #1
 80033ea:	4613      	mov	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	440b      	add	r3, r1
 80033f4:	461a      	mov	r2, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	60da      	str	r2, [r3, #12]
 80033fa:	e004      	b.n	8003406 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	461a      	mov	r2, r3
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	3301      	adds	r3, #1
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2b03      	cmp	r3, #3
 800341c:	d9bd      	bls.n	800339a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68da      	ldr	r2, [r3, #12]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003430:	611a      	str	r2, [r3, #16]
}
 8003432:	bf00      	nop
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800343e:	b480      	push	{r7}
 8003440:	b085      	sub	sp, #20
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003446:	2300      	movs	r3, #0
 8003448:	60fb      	str	r3, [r7, #12]
 800344a:	e046      	b.n	80034da <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6919      	ldr	r1, [r3, #16]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	4613      	mov	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	440b      	add	r3, r1
 800345c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	2200      	movs	r2, #0
 8003468:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	2200      	movs	r2, #0
 800346e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2200      	movs	r2, #0
 8003474:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	2200      	movs	r2, #0
 800347a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2200      	movs	r2, #0
 8003480:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003488:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8003490:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800349e:	68b9      	ldr	r1, [r7, #8]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	3212      	adds	r2, #18
 80034a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d80c      	bhi.n	80034ca <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6919      	ldr	r1, [r3, #16]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	1c5a      	adds	r2, r3, #1
 80034b8:	4613      	mov	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	440b      	add	r3, r1
 80034c2:	461a      	mov	r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	60da      	str	r2, [r3, #12]
 80034c8:	e004      	b.n	80034d4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	461a      	mov	r2, r3
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	3301      	adds	r3, #1
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d9b5      	bls.n	800344c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691a      	ldr	r2, [r3, #16]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800350a:	60da      	str	r2, [r3, #12]
}
 800350c:	bf00      	nop
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003518:	b480      	push	{r7}
 800351a:	b08d      	sub	sp, #52	@ 0x34
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	3318      	adds	r3, #24
 8003528:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003536:	2300      	movs	r3, #0
 8003538:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800353e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003542:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800354a:	2300      	movs	r3, #0
 800354c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003556:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800355a:	d007      	beq.n	800356c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003560:	3304      	adds	r3, #4
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800356c:	2302      	movs	r3, #2
 800356e:	e103      	b.n	8003778 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8003570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003572:	3301      	adds	r3, #1
 8003574:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	461a      	mov	r2, r3
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8003588:	f023 031f 	bic.w	r3, r3, #31
 800358c:	69fa      	ldr	r2, [r7, #28]
 800358e:	6852      	ldr	r2, [r2, #4]
 8003590:	431a      	orrs	r2, r3
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d008      	beq.n	80035b4 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	431a      	orrs	r2, r3
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0320 	and.w	r3, r3, #32
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d008      	beq.n	80035d2 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80035c0:	6a3b      	ldr	r3, [r7, #32]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	431a      	orrs	r2, r3
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0304 	and.w	r3, r3, #4
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d005      	beq.n	80035ea <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80035ea:	6a3b      	ldr	r3, [r7, #32]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80035f6:	f3bf 8f5f 	dmb	sy
}
 80035fa:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80035fc:	6a3b      	ldr	r3, [r7, #32]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003608:	e084      	b.n	8003714 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d006      	beq.n	800362a <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800361c:	6a3b      	ldr	r3, [r7, #32]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	e005      	b.n	8003636 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003638:	3301      	adds	r3, #1
 800363a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800363c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800363e:	2b03      	cmp	r3, #3
 8003640:	d902      	bls.n	8003648 <ETH_Prepare_Tx_Descriptors+0x130>
 8003642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003644:	3b04      	subs	r3, #4
 8003646:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800364c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003650:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003666:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800366a:	d007      	beq.n	800367c <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003670:	3304      	adds	r3, #4
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d029      	beq.n	80036d0 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003688:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800368a:	2300      	movs	r3, #0
 800368c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800368e:	e019      	b.n	80036c4 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8003690:	f3bf 8f5f 	dmb	sy
}
 8003694:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80036a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036a4:	3301      	adds	r3, #1
 80036a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036aa:	2b03      	cmp	r3, #3
 80036ac:	d902      	bls.n	80036b4 <ETH_Prepare_Tx_Descriptors+0x19c>
 80036ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036b0:	3b04      	subs	r3, #4
 80036b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036bc:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80036be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c0:	3301      	adds	r3, #1
 80036c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d3e1      	bcc.n	8003690 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 80036cc:	2302      	movs	r3, #2
 80036ce:	e053      	b.n	8003778 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 80036d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d2:	3301      	adds	r3, #1
 80036d4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	461a      	mov	r2, r3
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80036ee:	f023 031f 	bic.w	r3, r3, #31
 80036f2:	69fa      	ldr	r2, [r7, #28]
 80036f4:	6852      	ldr	r2, [r2, #4]
 80036f6:	431a      	orrs	r2, r3
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	3301      	adds	r3, #1
 8003700:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8003702:	f3bf 8f5f 	dmb	sy
}
 8003706:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	2b00      	cmp	r3, #0
 800371a:	f47f af76 	bne.w	800360a <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d006      	beq.n	8003732 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	e005      	b.n	800373e <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800373a:	6a3b      	ldr	r3, [r7, #32]
 800373c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800373e:	6a3b      	ldr	r3, [r7, #32]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800374e:	6979      	ldr	r1, [r7, #20]
 8003750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003752:	3304      	adds	r3, #4
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	440b      	add	r3, r1
 8003758:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800375e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003760:	b672      	cpsid	i
}
 8003762:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	4413      	add	r3, r2
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003772:	b662      	cpsie	i
}
 8003774:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3734      	adds	r7, #52	@ 0x34
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003784:	b480      	push	{r7}
 8003786:	b089      	sub	sp, #36	@ 0x24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800378e:	2300      	movs	r3, #0
 8003790:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003792:	2300      	movs	r3, #0
 8003794:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003796:	2300      	movs	r3, #0
 8003798:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800379a:	2300      	movs	r3, #0
 800379c:	61fb      	str	r3, [r7, #28]
 800379e:	e177      	b.n	8003a90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037a0:	2201      	movs	r2, #1
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	4013      	ands	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	f040 8166 	bne.w	8003a8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d005      	beq.n	80037d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d130      	bne.n	8003838 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	2203      	movs	r2, #3
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	43db      	mvns	r3, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4013      	ands	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800380c:	2201      	movs	r2, #1
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	43db      	mvns	r3, r3
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	4013      	ands	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	091b      	lsrs	r3, r3, #4
 8003822:	f003 0201 	and.w	r2, r3, #1
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4313      	orrs	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f003 0303 	and.w	r3, r3, #3
 8003840:	2b03      	cmp	r3, #3
 8003842:	d017      	beq.n	8003874 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	2203      	movs	r2, #3
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	43db      	mvns	r3, r3
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4013      	ands	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4313      	orrs	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f003 0303 	and.w	r3, r3, #3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d123      	bne.n	80038c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	08da      	lsrs	r2, r3, #3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3208      	adds	r2, #8
 8003888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800388c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	220f      	movs	r2, #15
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	43db      	mvns	r3, r3
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4013      	ands	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	691a      	ldr	r2, [r3, #16]
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	08da      	lsrs	r2, r3, #3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	3208      	adds	r2, #8
 80038c2:	69b9      	ldr	r1, [r7, #24]
 80038c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	2203      	movs	r2, #3
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	43db      	mvns	r3, r3
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4013      	ands	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f003 0203 	and.w	r2, r3, #3
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 80c0 	beq.w	8003a8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800390a:	2300      	movs	r3, #0
 800390c:	60fb      	str	r3, [r7, #12]
 800390e:	4b66      	ldr	r3, [pc, #408]	@ (8003aa8 <HAL_GPIO_Init+0x324>)
 8003910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003912:	4a65      	ldr	r2, [pc, #404]	@ (8003aa8 <HAL_GPIO_Init+0x324>)
 8003914:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003918:	6453      	str	r3, [r2, #68]	@ 0x44
 800391a:	4b63      	ldr	r3, [pc, #396]	@ (8003aa8 <HAL_GPIO_Init+0x324>)
 800391c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800391e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003926:	4a61      	ldr	r2, [pc, #388]	@ (8003aac <HAL_GPIO_Init+0x328>)
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	089b      	lsrs	r3, r3, #2
 800392c:	3302      	adds	r3, #2
 800392e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003932:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	f003 0303 	and.w	r3, r3, #3
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	220f      	movs	r2, #15
 800393e:	fa02 f303 	lsl.w	r3, r2, r3
 8003942:	43db      	mvns	r3, r3
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	4013      	ands	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a58      	ldr	r2, [pc, #352]	@ (8003ab0 <HAL_GPIO_Init+0x32c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d037      	beq.n	80039c2 <HAL_GPIO_Init+0x23e>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a57      	ldr	r2, [pc, #348]	@ (8003ab4 <HAL_GPIO_Init+0x330>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d031      	beq.n	80039be <HAL_GPIO_Init+0x23a>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a56      	ldr	r2, [pc, #344]	@ (8003ab8 <HAL_GPIO_Init+0x334>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d02b      	beq.n	80039ba <HAL_GPIO_Init+0x236>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a55      	ldr	r2, [pc, #340]	@ (8003abc <HAL_GPIO_Init+0x338>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d025      	beq.n	80039b6 <HAL_GPIO_Init+0x232>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a54      	ldr	r2, [pc, #336]	@ (8003ac0 <HAL_GPIO_Init+0x33c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d01f      	beq.n	80039b2 <HAL_GPIO_Init+0x22e>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a53      	ldr	r2, [pc, #332]	@ (8003ac4 <HAL_GPIO_Init+0x340>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d019      	beq.n	80039ae <HAL_GPIO_Init+0x22a>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a52      	ldr	r2, [pc, #328]	@ (8003ac8 <HAL_GPIO_Init+0x344>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d013      	beq.n	80039aa <HAL_GPIO_Init+0x226>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a51      	ldr	r2, [pc, #324]	@ (8003acc <HAL_GPIO_Init+0x348>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d00d      	beq.n	80039a6 <HAL_GPIO_Init+0x222>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a50      	ldr	r2, [pc, #320]	@ (8003ad0 <HAL_GPIO_Init+0x34c>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d007      	beq.n	80039a2 <HAL_GPIO_Init+0x21e>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a4f      	ldr	r2, [pc, #316]	@ (8003ad4 <HAL_GPIO_Init+0x350>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d101      	bne.n	800399e <HAL_GPIO_Init+0x21a>
 800399a:	2309      	movs	r3, #9
 800399c:	e012      	b.n	80039c4 <HAL_GPIO_Init+0x240>
 800399e:	230a      	movs	r3, #10
 80039a0:	e010      	b.n	80039c4 <HAL_GPIO_Init+0x240>
 80039a2:	2308      	movs	r3, #8
 80039a4:	e00e      	b.n	80039c4 <HAL_GPIO_Init+0x240>
 80039a6:	2307      	movs	r3, #7
 80039a8:	e00c      	b.n	80039c4 <HAL_GPIO_Init+0x240>
 80039aa:	2306      	movs	r3, #6
 80039ac:	e00a      	b.n	80039c4 <HAL_GPIO_Init+0x240>
 80039ae:	2305      	movs	r3, #5
 80039b0:	e008      	b.n	80039c4 <HAL_GPIO_Init+0x240>
 80039b2:	2304      	movs	r3, #4
 80039b4:	e006      	b.n	80039c4 <HAL_GPIO_Init+0x240>
 80039b6:	2303      	movs	r3, #3
 80039b8:	e004      	b.n	80039c4 <HAL_GPIO_Init+0x240>
 80039ba:	2302      	movs	r3, #2
 80039bc:	e002      	b.n	80039c4 <HAL_GPIO_Init+0x240>
 80039be:	2301      	movs	r3, #1
 80039c0:	e000      	b.n	80039c4 <HAL_GPIO_Init+0x240>
 80039c2:	2300      	movs	r3, #0
 80039c4:	69fa      	ldr	r2, [r7, #28]
 80039c6:	f002 0203 	and.w	r2, r2, #3
 80039ca:	0092      	lsls	r2, r2, #2
 80039cc:	4093      	lsls	r3, r2
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039d4:	4935      	ldr	r1, [pc, #212]	@ (8003aac <HAL_GPIO_Init+0x328>)
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	089b      	lsrs	r3, r3, #2
 80039da:	3302      	adds	r3, #2
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039e2:	4b3d      	ldr	r3, [pc, #244]	@ (8003ad8 <HAL_GPIO_Init+0x354>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	43db      	mvns	r3, r3
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	4013      	ands	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a06:	4a34      	ldr	r2, [pc, #208]	@ (8003ad8 <HAL_GPIO_Init+0x354>)
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a0c:	4b32      	ldr	r3, [pc, #200]	@ (8003ad8 <HAL_GPIO_Init+0x354>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	43db      	mvns	r3, r3
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a30:	4a29      	ldr	r2, [pc, #164]	@ (8003ad8 <HAL_GPIO_Init+0x354>)
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a36:	4b28      	ldr	r3, [pc, #160]	@ (8003ad8 <HAL_GPIO_Init+0x354>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	43db      	mvns	r3, r3
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	4013      	ands	r3, r2
 8003a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a5a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ad8 <HAL_GPIO_Init+0x354>)
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a60:	4b1d      	ldr	r3, [pc, #116]	@ (8003ad8 <HAL_GPIO_Init+0x354>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a84:	4a14      	ldr	r2, [pc, #80]	@ (8003ad8 <HAL_GPIO_Init+0x354>)
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	61fb      	str	r3, [r7, #28]
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	2b0f      	cmp	r3, #15
 8003a94:	f67f ae84 	bls.w	80037a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a98:	bf00      	nop
 8003a9a:	bf00      	nop
 8003a9c:	3724      	adds	r7, #36	@ 0x24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	40013800 	.word	0x40013800
 8003ab0:	40020000 	.word	0x40020000
 8003ab4:	40020400 	.word	0x40020400
 8003ab8:	40020800 	.word	0x40020800
 8003abc:	40020c00 	.word	0x40020c00
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	40021400 	.word	0x40021400
 8003ac8:	40021800 	.word	0x40021800
 8003acc:	40021c00 	.word	0x40021c00
 8003ad0:	40022000 	.word	0x40022000
 8003ad4:	40022400 	.word	0x40022400
 8003ad8:	40013c00 	.word	0x40013c00

08003adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	807b      	strh	r3, [r7, #2]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003aec:	787b      	ldrb	r3, [r7, #1]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003af2:	887a      	ldrh	r2, [r7, #2]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003af8:	e003      	b.n	8003b02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003afa:	887b      	ldrh	r3, [r7, #2]
 8003afc:	041a      	lsls	r2, r3, #16
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	619a      	str	r2, [r3, #24]
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b085      	sub	sp, #20
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	460b      	mov	r3, r1
 8003b18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b20:	887a      	ldrh	r2, [r7, #2]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	4013      	ands	r3, r2
 8003b26:	041a      	lsls	r2, r3, #16
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	43d9      	mvns	r1, r3
 8003b2c:	887b      	ldrh	r3, [r7, #2]
 8003b2e:	400b      	ands	r3, r1
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	619a      	str	r2, [r3, #24]
}
 8003b36:	bf00      	nop
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
	...

08003b44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e267      	b.n	8004026 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d075      	beq.n	8003c4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b62:	4b88      	ldr	r3, [pc, #544]	@ (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 030c 	and.w	r3, r3, #12
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	d00c      	beq.n	8003b88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b6e:	4b85      	ldr	r3, [pc, #532]	@ (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b76:	2b08      	cmp	r3, #8
 8003b78:	d112      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b7a:	4b82      	ldr	r3, [pc, #520]	@ (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b86:	d10b      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b88:	4b7e      	ldr	r3, [pc, #504]	@ (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d05b      	beq.n	8003c4c <HAL_RCC_OscConfig+0x108>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d157      	bne.n	8003c4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e242      	b.n	8004026 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ba8:	d106      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x74>
 8003baa:	4b76      	ldr	r3, [pc, #472]	@ (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a75      	ldr	r2, [pc, #468]	@ (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003bb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bb4:	6013      	str	r3, [r2, #0]
 8003bb6:	e01d      	b.n	8003bf4 <HAL_RCC_OscConfig+0xb0>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bc0:	d10c      	bne.n	8003bdc <HAL_RCC_OscConfig+0x98>
 8003bc2:	4b70      	ldr	r3, [pc, #448]	@ (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a6f      	ldr	r2, [pc, #444]	@ (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003bc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bcc:	6013      	str	r3, [r2, #0]
 8003bce:	4b6d      	ldr	r3, [pc, #436]	@ (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a6c      	ldr	r2, [pc, #432]	@ (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003bd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	e00b      	b.n	8003bf4 <HAL_RCC_OscConfig+0xb0>
 8003bdc:	4b69      	ldr	r3, [pc, #420]	@ (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a68      	ldr	r2, [pc, #416]	@ (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003be2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	4b66      	ldr	r3, [pc, #408]	@ (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a65      	ldr	r2, [pc, #404]	@ (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003bee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d013      	beq.n	8003c24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfc:	f7fd fe36 	bl	800186c <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c04:	f7fd fe32 	bl	800186c <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b64      	cmp	r3, #100	@ 0x64
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e207      	b.n	8004026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c16:	4b5b      	ldr	r3, [pc, #364]	@ (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0f0      	beq.n	8003c04 <HAL_RCC_OscConfig+0xc0>
 8003c22:	e014      	b.n	8003c4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c24:	f7fd fe22 	bl	800186c <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c2c:	f7fd fe1e 	bl	800186c <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b64      	cmp	r3, #100	@ 0x64
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e1f3      	b.n	8004026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c3e:	4b51      	ldr	r3, [pc, #324]	@ (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1f0      	bne.n	8003c2c <HAL_RCC_OscConfig+0xe8>
 8003c4a:	e000      	b.n	8003c4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d063      	beq.n	8003d22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c5a:	4b4a      	ldr	r3, [pc, #296]	@ (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 030c 	and.w	r3, r3, #12
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00b      	beq.n	8003c7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c66:	4b47      	ldr	r3, [pc, #284]	@ (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	d11c      	bne.n	8003cac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c72:	4b44      	ldr	r3, [pc, #272]	@ (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d116      	bne.n	8003cac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c7e:	4b41      	ldr	r3, [pc, #260]	@ (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d005      	beq.n	8003c96 <HAL_RCC_OscConfig+0x152>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d001      	beq.n	8003c96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e1c7      	b.n	8004026 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c96:	4b3b      	ldr	r3, [pc, #236]	@ (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	4937      	ldr	r1, [pc, #220]	@ (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003caa:	e03a      	b.n	8003d22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d020      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cb4:	4b34      	ldr	r3, [pc, #208]	@ (8003d88 <HAL_RCC_OscConfig+0x244>)
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cba:	f7fd fdd7 	bl	800186c <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cc2:	f7fd fdd3 	bl	800186c <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e1a8      	b.n	8004026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0f0      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce0:	4b28      	ldr	r3, [pc, #160]	@ (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	4925      	ldr	r1, [pc, #148]	@ (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	600b      	str	r3, [r1, #0]
 8003cf4:	e015      	b.n	8003d22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cf6:	4b24      	ldr	r3, [pc, #144]	@ (8003d88 <HAL_RCC_OscConfig+0x244>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfc:	f7fd fdb6 	bl	800186c <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d04:	f7fd fdb2 	bl	800186c <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e187      	b.n	8004026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d16:	4b1b      	ldr	r3, [pc, #108]	@ (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1f0      	bne.n	8003d04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0308 	and.w	r3, r3, #8
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d036      	beq.n	8003d9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d016      	beq.n	8003d64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d36:	4b15      	ldr	r3, [pc, #84]	@ (8003d8c <HAL_RCC_OscConfig+0x248>)
 8003d38:	2201      	movs	r2, #1
 8003d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d3c:	f7fd fd96 	bl	800186c <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d44:	f7fd fd92 	bl	800186c <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e167      	b.n	8004026 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d56:	4b0b      	ldr	r3, [pc, #44]	@ (8003d84 <HAL_RCC_OscConfig+0x240>)
 8003d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0f0      	beq.n	8003d44 <HAL_RCC_OscConfig+0x200>
 8003d62:	e01b      	b.n	8003d9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d64:	4b09      	ldr	r3, [pc, #36]	@ (8003d8c <HAL_RCC_OscConfig+0x248>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d6a:	f7fd fd7f 	bl	800186c <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d70:	e00e      	b.n	8003d90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d72:	f7fd fd7b 	bl	800186c <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d907      	bls.n	8003d90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e150      	b.n	8004026 <HAL_RCC_OscConfig+0x4e2>
 8003d84:	40023800 	.word	0x40023800
 8003d88:	42470000 	.word	0x42470000
 8003d8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d90:	4b88      	ldr	r3, [pc, #544]	@ (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003d92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1ea      	bne.n	8003d72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f000 8097 	beq.w	8003ed8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003daa:	2300      	movs	r3, #0
 8003dac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dae:	4b81      	ldr	r3, [pc, #516]	@ (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10f      	bne.n	8003dda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60bb      	str	r3, [r7, #8]
 8003dbe:	4b7d      	ldr	r3, [pc, #500]	@ (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc2:	4a7c      	ldr	r2, [pc, #496]	@ (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003dc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dca:	4b7a      	ldr	r3, [pc, #488]	@ (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dd2:	60bb      	str	r3, [r7, #8]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dda:	4b77      	ldr	r3, [pc, #476]	@ (8003fb8 <HAL_RCC_OscConfig+0x474>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d118      	bne.n	8003e18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003de6:	4b74      	ldr	r3, [pc, #464]	@ (8003fb8 <HAL_RCC_OscConfig+0x474>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a73      	ldr	r2, [pc, #460]	@ (8003fb8 <HAL_RCC_OscConfig+0x474>)
 8003dec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003df2:	f7fd fd3b 	bl	800186c <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dfa:	f7fd fd37 	bl	800186c <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e10c      	b.n	8004026 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0c:	4b6a      	ldr	r3, [pc, #424]	@ (8003fb8 <HAL_RCC_OscConfig+0x474>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0f0      	beq.n	8003dfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d106      	bne.n	8003e2e <HAL_RCC_OscConfig+0x2ea>
 8003e20:	4b64      	ldr	r3, [pc, #400]	@ (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e24:	4a63      	ldr	r2, [pc, #396]	@ (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003e26:	f043 0301 	orr.w	r3, r3, #1
 8003e2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e2c:	e01c      	b.n	8003e68 <HAL_RCC_OscConfig+0x324>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	2b05      	cmp	r3, #5
 8003e34:	d10c      	bne.n	8003e50 <HAL_RCC_OscConfig+0x30c>
 8003e36:	4b5f      	ldr	r3, [pc, #380]	@ (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e3a:	4a5e      	ldr	r2, [pc, #376]	@ (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003e3c:	f043 0304 	orr.w	r3, r3, #4
 8003e40:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e42:	4b5c      	ldr	r3, [pc, #368]	@ (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e46:	4a5b      	ldr	r2, [pc, #364]	@ (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003e48:	f043 0301 	orr.w	r3, r3, #1
 8003e4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e4e:	e00b      	b.n	8003e68 <HAL_RCC_OscConfig+0x324>
 8003e50:	4b58      	ldr	r3, [pc, #352]	@ (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e54:	4a57      	ldr	r2, [pc, #348]	@ (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003e56:	f023 0301 	bic.w	r3, r3, #1
 8003e5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e5c:	4b55      	ldr	r3, [pc, #340]	@ (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003e5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e60:	4a54      	ldr	r2, [pc, #336]	@ (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003e62:	f023 0304 	bic.w	r3, r3, #4
 8003e66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d015      	beq.n	8003e9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e70:	f7fd fcfc 	bl	800186c <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e76:	e00a      	b.n	8003e8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e78:	f7fd fcf8 	bl	800186c <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e0cb      	b.n	8004026 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e8e:	4b49      	ldr	r3, [pc, #292]	@ (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0ee      	beq.n	8003e78 <HAL_RCC_OscConfig+0x334>
 8003e9a:	e014      	b.n	8003ec6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e9c:	f7fd fce6 	bl	800186c <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ea2:	e00a      	b.n	8003eba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ea4:	f7fd fce2 	bl	800186c <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e0b5      	b.n	8004026 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eba:	4b3e      	ldr	r3, [pc, #248]	@ (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1ee      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ec6:	7dfb      	ldrb	r3, [r7, #23]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d105      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ecc:	4b39      	ldr	r3, [pc, #228]	@ (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed0:	4a38      	ldr	r2, [pc, #224]	@ (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003ed2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ed6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 80a1 	beq.w	8004024 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ee2:	4b34      	ldr	r3, [pc, #208]	@ (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 030c 	and.w	r3, r3, #12
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d05c      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d141      	bne.n	8003f7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef6:	4b31      	ldr	r3, [pc, #196]	@ (8003fbc <HAL_RCC_OscConfig+0x478>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003efc:	f7fd fcb6 	bl	800186c <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f04:	f7fd fcb2 	bl	800186c <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e087      	b.n	8004026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f16:	4b27      	ldr	r3, [pc, #156]	@ (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1f0      	bne.n	8003f04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69da      	ldr	r2, [r3, #28]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f30:	019b      	lsls	r3, r3, #6
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f38:	085b      	lsrs	r3, r3, #1
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	041b      	lsls	r3, r3, #16
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f44:	061b      	lsls	r3, r3, #24
 8003f46:	491b      	ldr	r1, [pc, #108]	@ (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8003fbc <HAL_RCC_OscConfig+0x478>)
 8003f4e:	2201      	movs	r2, #1
 8003f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f52:	f7fd fc8b 	bl	800186c <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f5a:	f7fd fc87 	bl	800186c <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e05c      	b.n	8004026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f6c:	4b11      	ldr	r3, [pc, #68]	@ (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0f0      	beq.n	8003f5a <HAL_RCC_OscConfig+0x416>
 8003f78:	e054      	b.n	8004024 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f7a:	4b10      	ldr	r3, [pc, #64]	@ (8003fbc <HAL_RCC_OscConfig+0x478>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f80:	f7fd fc74 	bl	800186c <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f88:	f7fd fc70 	bl	800186c <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e045      	b.n	8004026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f9a:	4b06      	ldr	r3, [pc, #24]	@ (8003fb4 <HAL_RCC_OscConfig+0x470>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f0      	bne.n	8003f88 <HAL_RCC_OscConfig+0x444>
 8003fa6:	e03d      	b.n	8004024 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d107      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e038      	b.n	8004026 <HAL_RCC_OscConfig+0x4e2>
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	40007000 	.word	0x40007000
 8003fbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8004030 <HAL_RCC_OscConfig+0x4ec>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d028      	beq.n	8004020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d121      	bne.n	8004020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d11a      	bne.n	8004020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ff6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d111      	bne.n	8004020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004006:	085b      	lsrs	r3, r3, #1
 8004008:	3b01      	subs	r3, #1
 800400a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800400c:	429a      	cmp	r2, r3
 800400e:	d107      	bne.n	8004020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800401a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800401c:	429a      	cmp	r2, r3
 800401e:	d001      	beq.n	8004024 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e000      	b.n	8004026 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	40023800 	.word	0x40023800

08004034 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e0cc      	b.n	80041e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004048:	4b68      	ldr	r3, [pc, #416]	@ (80041ec <HAL_RCC_ClockConfig+0x1b8>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 030f 	and.w	r3, r3, #15
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	429a      	cmp	r2, r3
 8004054:	d90c      	bls.n	8004070 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004056:	4b65      	ldr	r3, [pc, #404]	@ (80041ec <HAL_RCC_ClockConfig+0x1b8>)
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	b2d2      	uxtb	r2, r2
 800405c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800405e:	4b63      	ldr	r3, [pc, #396]	@ (80041ec <HAL_RCC_ClockConfig+0x1b8>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	429a      	cmp	r2, r3
 800406a:	d001      	beq.n	8004070 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e0b8      	b.n	80041e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d020      	beq.n	80040be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	2b00      	cmp	r3, #0
 8004086:	d005      	beq.n	8004094 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004088:	4b59      	ldr	r3, [pc, #356]	@ (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	4a58      	ldr	r2, [pc, #352]	@ (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004092:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0308 	and.w	r3, r3, #8
 800409c:	2b00      	cmp	r3, #0
 800409e:	d005      	beq.n	80040ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040a0:	4b53      	ldr	r3, [pc, #332]	@ (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	4a52      	ldr	r2, [pc, #328]	@ (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80040aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040ac:	4b50      	ldr	r3, [pc, #320]	@ (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	494d      	ldr	r1, [pc, #308]	@ (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d044      	beq.n	8004154 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d107      	bne.n	80040e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040d2:	4b47      	ldr	r3, [pc, #284]	@ (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d119      	bne.n	8004112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e07f      	b.n	80041e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d003      	beq.n	80040f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ee:	2b03      	cmp	r3, #3
 80040f0:	d107      	bne.n	8004102 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040f2:	4b3f      	ldr	r3, [pc, #252]	@ (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d109      	bne.n	8004112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e06f      	b.n	80041e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004102:	4b3b      	ldr	r3, [pc, #236]	@ (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e067      	b.n	80041e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004112:	4b37      	ldr	r3, [pc, #220]	@ (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f023 0203 	bic.w	r2, r3, #3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	4934      	ldr	r1, [pc, #208]	@ (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004120:	4313      	orrs	r3, r2
 8004122:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004124:	f7fd fba2 	bl	800186c <HAL_GetTick>
 8004128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800412a:	e00a      	b.n	8004142 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800412c:	f7fd fb9e 	bl	800186c <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800413a:	4293      	cmp	r3, r2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e04f      	b.n	80041e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004142:	4b2b      	ldr	r3, [pc, #172]	@ (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 020c 	and.w	r2, r3, #12
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	429a      	cmp	r2, r3
 8004152:	d1eb      	bne.n	800412c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004154:	4b25      	ldr	r3, [pc, #148]	@ (80041ec <HAL_RCC_ClockConfig+0x1b8>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 030f 	and.w	r3, r3, #15
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	429a      	cmp	r2, r3
 8004160:	d20c      	bcs.n	800417c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004162:	4b22      	ldr	r3, [pc, #136]	@ (80041ec <HAL_RCC_ClockConfig+0x1b8>)
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800416a:	4b20      	ldr	r3, [pc, #128]	@ (80041ec <HAL_RCC_ClockConfig+0x1b8>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	429a      	cmp	r2, r3
 8004176:	d001      	beq.n	800417c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e032      	b.n	80041e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b00      	cmp	r3, #0
 8004186:	d008      	beq.n	800419a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004188:	4b19      	ldr	r3, [pc, #100]	@ (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	4916      	ldr	r1, [pc, #88]	@ (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004196:	4313      	orrs	r3, r2
 8004198:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d009      	beq.n	80041ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041a6:	4b12      	ldr	r3, [pc, #72]	@ (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	490e      	ldr	r1, [pc, #56]	@ (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041ba:	f000 f821 	bl	8004200 <HAL_RCC_GetSysClockFreq>
 80041be:	4602      	mov	r2, r0
 80041c0:	4b0b      	ldr	r3, [pc, #44]	@ (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	091b      	lsrs	r3, r3, #4
 80041c6:	f003 030f 	and.w	r3, r3, #15
 80041ca:	490a      	ldr	r1, [pc, #40]	@ (80041f4 <HAL_RCC_ClockConfig+0x1c0>)
 80041cc:	5ccb      	ldrb	r3, [r1, r3]
 80041ce:	fa22 f303 	lsr.w	r3, r2, r3
 80041d2:	4a09      	ldr	r2, [pc, #36]	@ (80041f8 <HAL_RCC_ClockConfig+0x1c4>)
 80041d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041d6:	4b09      	ldr	r3, [pc, #36]	@ (80041fc <HAL_RCC_ClockConfig+0x1c8>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f7fd f804 	bl	80011e8 <HAL_InitTick>

  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	40023c00 	.word	0x40023c00
 80041f0:	40023800 	.word	0x40023800
 80041f4:	0801b548 	.word	0x0801b548
 80041f8:	20000004 	.word	0x20000004
 80041fc:	20000008 	.word	0x20000008

08004200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004204:	b094      	sub	sp, #80	@ 0x50
 8004206:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	647b      	str	r3, [r7, #68]	@ 0x44
 800420c:	2300      	movs	r3, #0
 800420e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004210:	2300      	movs	r3, #0
 8004212:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004214:	2300      	movs	r3, #0
 8004216:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004218:	4b79      	ldr	r3, [pc, #484]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x200>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f003 030c 	and.w	r3, r3, #12
 8004220:	2b08      	cmp	r3, #8
 8004222:	d00d      	beq.n	8004240 <HAL_RCC_GetSysClockFreq+0x40>
 8004224:	2b08      	cmp	r3, #8
 8004226:	f200 80e1 	bhi.w	80043ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800422a:	2b00      	cmp	r3, #0
 800422c:	d002      	beq.n	8004234 <HAL_RCC_GetSysClockFreq+0x34>
 800422e:	2b04      	cmp	r3, #4
 8004230:	d003      	beq.n	800423a <HAL_RCC_GetSysClockFreq+0x3a>
 8004232:	e0db      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004234:	4b73      	ldr	r3, [pc, #460]	@ (8004404 <HAL_RCC_GetSysClockFreq+0x204>)
 8004236:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004238:	e0db      	b.n	80043f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800423a:	4b73      	ldr	r3, [pc, #460]	@ (8004408 <HAL_RCC_GetSysClockFreq+0x208>)
 800423c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800423e:	e0d8      	b.n	80043f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004240:	4b6f      	ldr	r3, [pc, #444]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x200>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004248:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800424a:	4b6d      	ldr	r3, [pc, #436]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x200>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d063      	beq.n	800431e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004256:	4b6a      	ldr	r3, [pc, #424]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x200>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	099b      	lsrs	r3, r3, #6
 800425c:	2200      	movs	r2, #0
 800425e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004260:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004268:	633b      	str	r3, [r7, #48]	@ 0x30
 800426a:	2300      	movs	r3, #0
 800426c:	637b      	str	r3, [r7, #52]	@ 0x34
 800426e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004272:	4622      	mov	r2, r4
 8004274:	462b      	mov	r3, r5
 8004276:	f04f 0000 	mov.w	r0, #0
 800427a:	f04f 0100 	mov.w	r1, #0
 800427e:	0159      	lsls	r1, r3, #5
 8004280:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004284:	0150      	lsls	r0, r2, #5
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	4621      	mov	r1, r4
 800428c:	1a51      	subs	r1, r2, r1
 800428e:	6139      	str	r1, [r7, #16]
 8004290:	4629      	mov	r1, r5
 8004292:	eb63 0301 	sbc.w	r3, r3, r1
 8004296:	617b      	str	r3, [r7, #20]
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	f04f 0300 	mov.w	r3, #0
 80042a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042a4:	4659      	mov	r1, fp
 80042a6:	018b      	lsls	r3, r1, #6
 80042a8:	4651      	mov	r1, sl
 80042aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042ae:	4651      	mov	r1, sl
 80042b0:	018a      	lsls	r2, r1, #6
 80042b2:	4651      	mov	r1, sl
 80042b4:	ebb2 0801 	subs.w	r8, r2, r1
 80042b8:	4659      	mov	r1, fp
 80042ba:	eb63 0901 	sbc.w	r9, r3, r1
 80042be:	f04f 0200 	mov.w	r2, #0
 80042c2:	f04f 0300 	mov.w	r3, #0
 80042c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042d2:	4690      	mov	r8, r2
 80042d4:	4699      	mov	r9, r3
 80042d6:	4623      	mov	r3, r4
 80042d8:	eb18 0303 	adds.w	r3, r8, r3
 80042dc:	60bb      	str	r3, [r7, #8]
 80042de:	462b      	mov	r3, r5
 80042e0:	eb49 0303 	adc.w	r3, r9, r3
 80042e4:	60fb      	str	r3, [r7, #12]
 80042e6:	f04f 0200 	mov.w	r2, #0
 80042ea:	f04f 0300 	mov.w	r3, #0
 80042ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042f2:	4629      	mov	r1, r5
 80042f4:	024b      	lsls	r3, r1, #9
 80042f6:	4621      	mov	r1, r4
 80042f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042fc:	4621      	mov	r1, r4
 80042fe:	024a      	lsls	r2, r1, #9
 8004300:	4610      	mov	r0, r2
 8004302:	4619      	mov	r1, r3
 8004304:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004306:	2200      	movs	r2, #0
 8004308:	62bb      	str	r3, [r7, #40]	@ 0x28
 800430a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800430c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004310:	f7fb ffc6 	bl	80002a0 <__aeabi_uldivmod>
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	4613      	mov	r3, r2
 800431a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800431c:	e058      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800431e:	4b38      	ldr	r3, [pc, #224]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x200>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	099b      	lsrs	r3, r3, #6
 8004324:	2200      	movs	r2, #0
 8004326:	4618      	mov	r0, r3
 8004328:	4611      	mov	r1, r2
 800432a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800432e:	623b      	str	r3, [r7, #32]
 8004330:	2300      	movs	r3, #0
 8004332:	627b      	str	r3, [r7, #36]	@ 0x24
 8004334:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004338:	4642      	mov	r2, r8
 800433a:	464b      	mov	r3, r9
 800433c:	f04f 0000 	mov.w	r0, #0
 8004340:	f04f 0100 	mov.w	r1, #0
 8004344:	0159      	lsls	r1, r3, #5
 8004346:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800434a:	0150      	lsls	r0, r2, #5
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	4641      	mov	r1, r8
 8004352:	ebb2 0a01 	subs.w	sl, r2, r1
 8004356:	4649      	mov	r1, r9
 8004358:	eb63 0b01 	sbc.w	fp, r3, r1
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004368:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800436c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004370:	ebb2 040a 	subs.w	r4, r2, sl
 8004374:	eb63 050b 	sbc.w	r5, r3, fp
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	00eb      	lsls	r3, r5, #3
 8004382:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004386:	00e2      	lsls	r2, r4, #3
 8004388:	4614      	mov	r4, r2
 800438a:	461d      	mov	r5, r3
 800438c:	4643      	mov	r3, r8
 800438e:	18e3      	adds	r3, r4, r3
 8004390:	603b      	str	r3, [r7, #0]
 8004392:	464b      	mov	r3, r9
 8004394:	eb45 0303 	adc.w	r3, r5, r3
 8004398:	607b      	str	r3, [r7, #4]
 800439a:	f04f 0200 	mov.w	r2, #0
 800439e:	f04f 0300 	mov.w	r3, #0
 80043a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043a6:	4629      	mov	r1, r5
 80043a8:	028b      	lsls	r3, r1, #10
 80043aa:	4621      	mov	r1, r4
 80043ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043b0:	4621      	mov	r1, r4
 80043b2:	028a      	lsls	r2, r1, #10
 80043b4:	4610      	mov	r0, r2
 80043b6:	4619      	mov	r1, r3
 80043b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043ba:	2200      	movs	r2, #0
 80043bc:	61bb      	str	r3, [r7, #24]
 80043be:	61fa      	str	r2, [r7, #28]
 80043c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043c4:	f7fb ff6c 	bl	80002a0 <__aeabi_uldivmod>
 80043c8:	4602      	mov	r2, r0
 80043ca:	460b      	mov	r3, r1
 80043cc:	4613      	mov	r3, r2
 80043ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x200>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	0c1b      	lsrs	r3, r3, #16
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	3301      	adds	r3, #1
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80043e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80043e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043ea:	e002      	b.n	80043f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043ec:	4b05      	ldr	r3, [pc, #20]	@ (8004404 <HAL_RCC_GetSysClockFreq+0x204>)
 80043ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3750      	adds	r7, #80	@ 0x50
 80043f8:	46bd      	mov	sp, r7
 80043fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043fe:	bf00      	nop
 8004400:	40023800 	.word	0x40023800
 8004404:	00f42400 	.word	0x00f42400
 8004408:	007a1200 	.word	0x007a1200

0800440c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004410:	4b03      	ldr	r3, [pc, #12]	@ (8004420 <HAL_RCC_GetHCLKFreq+0x14>)
 8004412:	681b      	ldr	r3, [r3, #0]
}
 8004414:	4618      	mov	r0, r3
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	20000004 	.word	0x20000004

08004424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004428:	f7ff fff0 	bl	800440c <HAL_RCC_GetHCLKFreq>
 800442c:	4602      	mov	r2, r0
 800442e:	4b05      	ldr	r3, [pc, #20]	@ (8004444 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	0a9b      	lsrs	r3, r3, #10
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	4903      	ldr	r1, [pc, #12]	@ (8004448 <HAL_RCC_GetPCLK1Freq+0x24>)
 800443a:	5ccb      	ldrb	r3, [r1, r3]
 800443c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004440:	4618      	mov	r0, r3
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40023800 	.word	0x40023800
 8004448:	0801b558 	.word	0x0801b558

0800444c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004450:	f7ff ffdc 	bl	800440c <HAL_RCC_GetHCLKFreq>
 8004454:	4602      	mov	r2, r0
 8004456:	4b05      	ldr	r3, [pc, #20]	@ (800446c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	0b5b      	lsrs	r3, r3, #13
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	4903      	ldr	r1, [pc, #12]	@ (8004470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004462:	5ccb      	ldrb	r3, [r1, r3]
 8004464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004468:	4618      	mov	r0, r3
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40023800 	.word	0x40023800
 8004470:	0801b558 	.word	0x0801b558

08004474 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	220f      	movs	r2, #15
 8004482:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004484:	4b12      	ldr	r3, [pc, #72]	@ (80044d0 <HAL_RCC_GetClockConfig+0x5c>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f003 0203 	and.w	r2, r3, #3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004490:	4b0f      	ldr	r3, [pc, #60]	@ (80044d0 <HAL_RCC_GetClockConfig+0x5c>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800449c:	4b0c      	ldr	r3, [pc, #48]	@ (80044d0 <HAL_RCC_GetClockConfig+0x5c>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80044a8:	4b09      	ldr	r3, [pc, #36]	@ (80044d0 <HAL_RCC_GetClockConfig+0x5c>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	08db      	lsrs	r3, r3, #3
 80044ae:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80044b6:	4b07      	ldr	r3, [pc, #28]	@ (80044d4 <HAL_RCC_GetClockConfig+0x60>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 020f 	and.w	r2, r3, #15
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	601a      	str	r2, [r3, #0]
}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	40023800 	.word	0x40023800
 80044d4:	40023c00 	.word	0x40023c00

080044d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80044e4:	2300      	movs	r3, #0
 80044e6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10b      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d105      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004508:	2b00      	cmp	r3, #0
 800450a:	d075      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800450c:	4b91      	ldr	r3, [pc, #580]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800450e:	2200      	movs	r2, #0
 8004510:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004512:	f7fd f9ab 	bl	800186c <HAL_GetTick>
 8004516:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004518:	e008      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800451a:	f7fd f9a7 	bl	800186c <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d901      	bls.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e189      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800452c:	4b8a      	ldr	r3, [pc, #552]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1f0      	bne.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b00      	cmp	r3, #0
 8004542:	d009      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	019a      	lsls	r2, r3, #6
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	071b      	lsls	r3, r3, #28
 8004550:	4981      	ldr	r1, [pc, #516]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004552:	4313      	orrs	r3, r2
 8004554:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d01f      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004564:	4b7c      	ldr	r3, [pc, #496]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004566:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800456a:	0f1b      	lsrs	r3, r3, #28
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	019a      	lsls	r2, r3, #6
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	061b      	lsls	r3, r3, #24
 800457e:	431a      	orrs	r2, r3
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	071b      	lsls	r3, r3, #28
 8004584:	4974      	ldr	r1, [pc, #464]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004586:	4313      	orrs	r3, r2
 8004588:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800458c:	4b72      	ldr	r3, [pc, #456]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800458e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004592:	f023 021f 	bic.w	r2, r3, #31
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	3b01      	subs	r3, #1
 800459c:	496e      	ldr	r1, [pc, #440]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00d      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	019a      	lsls	r2, r3, #6
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	061b      	lsls	r3, r3, #24
 80045bc:	431a      	orrs	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	071b      	lsls	r3, r3, #28
 80045c4:	4964      	ldr	r1, [pc, #400]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80045cc:	4b61      	ldr	r3, [pc, #388]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80045ce:	2201      	movs	r2, #1
 80045d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045d2:	f7fd f94b 	bl	800186c <HAL_GetTick>
 80045d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045d8:	e008      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045da:	f7fd f947 	bl	800186c <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d901      	bls.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e129      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045ec:	4b5a      	ldr	r3, [pc, #360]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0f0      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b00      	cmp	r3, #0
 8004602:	d105      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800460c:	2b00      	cmp	r3, #0
 800460e:	d079      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004610:	4b52      	ldr	r3, [pc, #328]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004616:	f7fd f929 	bl	800186c <HAL_GetTick>
 800461a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800461c:	e008      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800461e:	f7fd f925 	bl	800186c <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e107      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004630:	4b49      	ldr	r3, [pc, #292]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004638:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800463c:	d0ef      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0304 	and.w	r3, r3, #4
 8004646:	2b00      	cmp	r3, #0
 8004648:	d020      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800464a:	4b43      	ldr	r3, [pc, #268]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800464c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004650:	0f1b      	lsrs	r3, r3, #28
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	019a      	lsls	r2, r3, #6
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	061b      	lsls	r3, r3, #24
 8004664:	431a      	orrs	r2, r3
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	071b      	lsls	r3, r3, #28
 800466a:	493b      	ldr	r1, [pc, #236]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800466c:	4313      	orrs	r3, r2
 800466e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004672:	4b39      	ldr	r3, [pc, #228]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004674:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004678:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	3b01      	subs	r3, #1
 8004682:	021b      	lsls	r3, r3, #8
 8004684:	4934      	ldr	r1, [pc, #208]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004686:	4313      	orrs	r3, r2
 8004688:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0308 	and.w	r3, r3, #8
 8004694:	2b00      	cmp	r3, #0
 8004696:	d01e      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004698:	4b2f      	ldr	r3, [pc, #188]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800469a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800469e:	0e1b      	lsrs	r3, r3, #24
 80046a0:	f003 030f 	and.w	r3, r3, #15
 80046a4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	019a      	lsls	r2, r3, #6
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	061b      	lsls	r3, r3, #24
 80046b0:	431a      	orrs	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	071b      	lsls	r3, r3, #28
 80046b8:	4927      	ldr	r1, [pc, #156]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80046c0:	4b25      	ldr	r3, [pc, #148]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046c6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ce:	4922      	ldr	r1, [pc, #136]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80046d6:	4b21      	ldr	r3, [pc, #132]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80046d8:	2201      	movs	r2, #1
 80046da:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046dc:	f7fd f8c6 	bl	800186c <HAL_GetTick>
 80046e0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046e2:	e008      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80046e4:	f7fd f8c2 	bl	800186c <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e0a4      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046f6:	4b18      	ldr	r3, [pc, #96]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004702:	d1ef      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0320 	and.w	r3, r3, #32
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 808b 	beq.w	8004828 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004712:	2300      	movs	r3, #0
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	4b10      	ldr	r3, [pc, #64]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471a:	4a0f      	ldr	r2, [pc, #60]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800471c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004720:	6413      	str	r3, [r2, #64]	@ 0x40
 8004722:	4b0d      	ldr	r3, [pc, #52]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800472e:	4b0c      	ldr	r3, [pc, #48]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a0b      	ldr	r2, [pc, #44]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004734:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004738:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800473a:	f7fd f897 	bl	800186c <HAL_GetTick>
 800473e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004740:	e010      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004742:	f7fd f893 	bl	800186c <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d909      	bls.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e075      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004754:	42470068 	.word	0x42470068
 8004758:	40023800 	.word	0x40023800
 800475c:	42470070 	.word	0x42470070
 8004760:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004764:	4b38      	ldr	r3, [pc, #224]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0e8      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004770:	4b36      	ldr	r3, [pc, #216]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004774:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004778:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d02f      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004784:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	429a      	cmp	r2, r3
 800478c:	d028      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800478e:	4b2f      	ldr	r3, [pc, #188]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004792:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004796:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004798:	4b2d      	ldr	r3, [pc, #180]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800479a:	2201      	movs	r2, #1
 800479c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800479e:	4b2c      	ldr	r3, [pc, #176]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80047a4:	4a29      	ldr	r2, [pc, #164]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80047aa:	4b28      	ldr	r3, [pc, #160]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80047ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d114      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80047b6:	f7fd f859 	bl	800186c <HAL_GetTick>
 80047ba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047bc:	e00a      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047be:	f7fd f855 	bl	800186c <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d901      	bls.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e035      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d4:	4b1d      	ldr	r3, [pc, #116]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80047d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d0ee      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047ec:	d10d      	bne.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x332>
 80047ee:	4b17      	ldr	r3, [pc, #92]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047fa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80047fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004802:	4912      	ldr	r1, [pc, #72]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004804:	4313      	orrs	r3, r2
 8004806:	608b      	str	r3, [r1, #8]
 8004808:	e005      	b.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800480a:	4b10      	ldr	r3, [pc, #64]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	4a0f      	ldr	r2, [pc, #60]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004810:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004814:	6093      	str	r3, [r2, #8]
 8004816:	4b0d      	ldr	r3, [pc, #52]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004818:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800481e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004822:	490a      	ldr	r1, [pc, #40]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004824:	4313      	orrs	r3, r2
 8004826:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0310 	and.w	r3, r3, #16
 8004830:	2b00      	cmp	r3, #0
 8004832:	d004      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800483a:	4b06      	ldr	r3, [pc, #24]	@ (8004854 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800483c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	40007000 	.word	0x40007000
 800484c:	40023800 	.word	0x40023800
 8004850:	42470e40 	.word	0x42470e40
 8004854:	424711e0 	.word	0x424711e0

08004858 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e073      	b.n	8004956 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	7f5b      	ldrb	r3, [r3, #29]
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b00      	cmp	r3, #0
 8004876:	d105      	bne.n	8004884 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7fc fbc0 	bl	8001004 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f003 0310 	and.w	r3, r3, #16
 8004894:	2b10      	cmp	r3, #16
 8004896:	d055      	beq.n	8004944 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	22ca      	movs	r2, #202	@ 0xca
 800489e:	625a      	str	r2, [r3, #36]	@ 0x24
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2253      	movs	r2, #83	@ 0x53
 80048a6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 f87f 	bl	80049ac <RTC_EnterInitMode>
 80048ae:	4603      	mov	r3, r0
 80048b0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80048b2:	7bfb      	ldrb	r3, [r7, #15]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d12c      	bne.n	8004912 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	6812      	ldr	r2, [r2, #0]
 80048c2:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80048c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048ca:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6899      	ldr	r1, [r3, #8]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	431a      	orrs	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	68d2      	ldr	r2, [r2, #12]
 80048f2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6919      	ldr	r1, [r3, #16]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	041a      	lsls	r2, r3, #16
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 f886 	bl	8004a1a <RTC_ExitInitMode>
 800490e:	4603      	mov	r3, r0
 8004910:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004912:	7bfb      	ldrb	r3, [r7, #15]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d110      	bne.n	800493a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004926:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	699a      	ldr	r2, [r3, #24]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	430a      	orrs	r2, r1
 8004938:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	22ff      	movs	r2, #255	@ 0xff
 8004940:	625a      	str	r2, [r3, #36]	@ 0x24
 8004942:	e001      	b.n	8004948 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004944:	2300      	movs	r3, #0
 8004946:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004948:	7bfb      	ldrb	r3, [r7, #15]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d102      	bne.n	8004954 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004954:	7bfb      	ldrb	r3, [r7, #15]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
	...

08004960 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004968:	2300      	movs	r3, #0
 800496a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a0d      	ldr	r2, [pc, #52]	@ (80049a8 <HAL_RTC_WaitForSynchro+0x48>)
 8004972:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004974:	f7fc ff7a 	bl	800186c <HAL_GetTick>
 8004978:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800497a:	e009      	b.n	8004990 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800497c:	f7fc ff76 	bl	800186c <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800498a:	d901      	bls.n	8004990 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e007      	b.n	80049a0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	f003 0320 	and.w	r3, r3, #32
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0ee      	beq.n	800497c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	00017f5f 	.word	0x00017f5f

080049ac <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80049b8:	2300      	movs	r3, #0
 80049ba:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d122      	bne.n	8004a10 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68da      	ldr	r2, [r3, #12]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80049d8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80049da:	f7fc ff47 	bl	800186c <HAL_GetTick>
 80049de:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80049e0:	e00c      	b.n	80049fc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80049e2:	f7fc ff43 	bl	800186c <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80049f0:	d904      	bls.n	80049fc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2204      	movs	r2, #4
 80049f6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d102      	bne.n	8004a10 <RTC_EnterInitMode+0x64>
 8004a0a:	7bfb      	ldrb	r3, [r7, #15]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d1e8      	bne.n	80049e2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b084      	sub	sp, #16
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a22:	2300      	movs	r3, #0
 8004a24:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68da      	ldr	r2, [r3, #12]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a34:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f003 0320 	and.w	r3, r3, #32
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10a      	bne.n	8004a5a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f7ff ff8b 	bl	8004960 <HAL_RTC_WaitForSynchro>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d004      	beq.n	8004a5a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2204      	movs	r2, #4
 8004a54:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e041      	b.n	8004afa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d106      	bne.n	8004a90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f839 	bl	8004b02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4610      	mov	r0, r2
 8004aa4:	f000 f9c0 	bl	8004e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
	...

08004b18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d001      	beq.n	8004b30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e04e      	b.n	8004bce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68da      	ldr	r2, [r3, #12]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0201 	orr.w	r2, r2, #1
 8004b46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a23      	ldr	r2, [pc, #140]	@ (8004bdc <HAL_TIM_Base_Start_IT+0xc4>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d022      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x80>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b5a:	d01d      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x80>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a1f      	ldr	r2, [pc, #124]	@ (8004be0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d018      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x80>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a1e      	ldr	r2, [pc, #120]	@ (8004be4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d013      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x80>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a1c      	ldr	r2, [pc, #112]	@ (8004be8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d00e      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x80>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a1b      	ldr	r2, [pc, #108]	@ (8004bec <HAL_TIM_Base_Start_IT+0xd4>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d009      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x80>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a19      	ldr	r2, [pc, #100]	@ (8004bf0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d004      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x80>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a18      	ldr	r2, [pc, #96]	@ (8004bf4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d111      	bne.n	8004bbc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b06      	cmp	r3, #6
 8004ba8:	d010      	beq.n	8004bcc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f042 0201 	orr.w	r2, r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bba:	e007      	b.n	8004bcc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0201 	orr.w	r2, r2, #1
 8004bca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	40010000 	.word	0x40010000
 8004be0:	40000400 	.word	0x40000400
 8004be4:	40000800 	.word	0x40000800
 8004be8:	40000c00 	.word	0x40000c00
 8004bec:	40010400 	.word	0x40010400
 8004bf0:	40014000 	.word	0x40014000
 8004bf4:	40001800 	.word	0x40001800

08004bf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d020      	beq.n	8004c5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d01b      	beq.n	8004c5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f06f 0202 	mvn.w	r2, #2
 8004c2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	f003 0303 	and.w	r3, r3, #3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f8d2 	bl	8004dec <HAL_TIM_IC_CaptureCallback>
 8004c48:	e005      	b.n	8004c56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f8c4 	bl	8004dd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f8d5 	bl	8004e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f003 0304 	and.w	r3, r3, #4
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d020      	beq.n	8004ca8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d01b      	beq.n	8004ca8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f06f 0204 	mvn.w	r2, #4
 8004c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f8ac 	bl	8004dec <HAL_TIM_IC_CaptureCallback>
 8004c94:	e005      	b.n	8004ca2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f89e 	bl	8004dd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f8af 	bl	8004e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	f003 0308 	and.w	r3, r3, #8
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d020      	beq.n	8004cf4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f003 0308 	and.w	r3, r3, #8
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d01b      	beq.n	8004cf4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f06f 0208 	mvn.w	r2, #8
 8004cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2204      	movs	r2, #4
 8004cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f886 	bl	8004dec <HAL_TIM_IC_CaptureCallback>
 8004ce0:	e005      	b.n	8004cee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f878 	bl	8004dd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f889 	bl	8004e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f003 0310 	and.w	r3, r3, #16
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d020      	beq.n	8004d40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f003 0310 	and.w	r3, r3, #16
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d01b      	beq.n	8004d40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f06f 0210 	mvn.w	r2, #16
 8004d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2208      	movs	r2, #8
 8004d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	69db      	ldr	r3, [r3, #28]
 8004d1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f860 	bl	8004dec <HAL_TIM_IC_CaptureCallback>
 8004d2c:	e005      	b.n	8004d3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f852 	bl	8004dd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f863 	bl	8004e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00c      	beq.n	8004d64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d007      	beq.n	8004d64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f06f 0201 	mvn.w	r2, #1
 8004d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7fc f8e2 	bl	8000f28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00c      	beq.n	8004d88 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d007      	beq.n	8004d88 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f906 	bl	8004f94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00c      	beq.n	8004dac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d007      	beq.n	8004dac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f834 	bl	8004e14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	f003 0320 	and.w	r3, r3, #32
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00c      	beq.n	8004dd0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f003 0320 	and.w	r3, r3, #32
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d007      	beq.n	8004dd0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f06f 0220 	mvn.w	r2, #32
 8004dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f8d8 	bl	8004f80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dd0:	bf00      	nop
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a46      	ldr	r2, [pc, #280]	@ (8004f54 <TIM_Base_SetConfig+0x12c>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d013      	beq.n	8004e68 <TIM_Base_SetConfig+0x40>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e46:	d00f      	beq.n	8004e68 <TIM_Base_SetConfig+0x40>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a43      	ldr	r2, [pc, #268]	@ (8004f58 <TIM_Base_SetConfig+0x130>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d00b      	beq.n	8004e68 <TIM_Base_SetConfig+0x40>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a42      	ldr	r2, [pc, #264]	@ (8004f5c <TIM_Base_SetConfig+0x134>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d007      	beq.n	8004e68 <TIM_Base_SetConfig+0x40>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a41      	ldr	r2, [pc, #260]	@ (8004f60 <TIM_Base_SetConfig+0x138>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d003      	beq.n	8004e68 <TIM_Base_SetConfig+0x40>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a40      	ldr	r2, [pc, #256]	@ (8004f64 <TIM_Base_SetConfig+0x13c>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d108      	bne.n	8004e7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a35      	ldr	r2, [pc, #212]	@ (8004f54 <TIM_Base_SetConfig+0x12c>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d02b      	beq.n	8004eda <TIM_Base_SetConfig+0xb2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e88:	d027      	beq.n	8004eda <TIM_Base_SetConfig+0xb2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a32      	ldr	r2, [pc, #200]	@ (8004f58 <TIM_Base_SetConfig+0x130>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d023      	beq.n	8004eda <TIM_Base_SetConfig+0xb2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a31      	ldr	r2, [pc, #196]	@ (8004f5c <TIM_Base_SetConfig+0x134>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d01f      	beq.n	8004eda <TIM_Base_SetConfig+0xb2>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a30      	ldr	r2, [pc, #192]	@ (8004f60 <TIM_Base_SetConfig+0x138>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d01b      	beq.n	8004eda <TIM_Base_SetConfig+0xb2>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a2f      	ldr	r2, [pc, #188]	@ (8004f64 <TIM_Base_SetConfig+0x13c>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d017      	beq.n	8004eda <TIM_Base_SetConfig+0xb2>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a2e      	ldr	r2, [pc, #184]	@ (8004f68 <TIM_Base_SetConfig+0x140>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d013      	beq.n	8004eda <TIM_Base_SetConfig+0xb2>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a2d      	ldr	r2, [pc, #180]	@ (8004f6c <TIM_Base_SetConfig+0x144>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d00f      	beq.n	8004eda <TIM_Base_SetConfig+0xb2>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a2c      	ldr	r2, [pc, #176]	@ (8004f70 <TIM_Base_SetConfig+0x148>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d00b      	beq.n	8004eda <TIM_Base_SetConfig+0xb2>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a2b      	ldr	r2, [pc, #172]	@ (8004f74 <TIM_Base_SetConfig+0x14c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d007      	beq.n	8004eda <TIM_Base_SetConfig+0xb2>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a2a      	ldr	r2, [pc, #168]	@ (8004f78 <TIM_Base_SetConfig+0x150>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d003      	beq.n	8004eda <TIM_Base_SetConfig+0xb2>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a29      	ldr	r2, [pc, #164]	@ (8004f7c <TIM_Base_SetConfig+0x154>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d108      	bne.n	8004eec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ee0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a10      	ldr	r2, [pc, #64]	@ (8004f54 <TIM_Base_SetConfig+0x12c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d003      	beq.n	8004f20 <TIM_Base_SetConfig+0xf8>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a12      	ldr	r2, [pc, #72]	@ (8004f64 <TIM_Base_SetConfig+0x13c>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d103      	bne.n	8004f28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	691a      	ldr	r2, [r3, #16]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d105      	bne.n	8004f46 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	f023 0201 	bic.w	r2, r3, #1
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	611a      	str	r2, [r3, #16]
  }
}
 8004f46:	bf00      	nop
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	40010000 	.word	0x40010000
 8004f58:	40000400 	.word	0x40000400
 8004f5c:	40000800 	.word	0x40000800
 8004f60:	40000c00 	.word	0x40000c00
 8004f64:	40010400 	.word	0x40010400
 8004f68:	40014000 	.word	0x40014000
 8004f6c:	40014400 	.word	0x40014400
 8004f70:	40014800 	.word	0x40014800
 8004f74:	40001800 	.word	0x40001800
 8004f78:	40001c00 	.word	0x40001c00
 8004f7c:	40002000 	.word	0x40002000

08004f80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e042      	b.n	8005040 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d106      	bne.n	8004fd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f7fc f842 	bl	8001058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2224      	movs	r2, #36	@ 0x24
 8004fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68da      	ldr	r2, [r3, #12]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004fea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 fe9d 	bl	8005d2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	691a      	ldr	r2, [r3, #16]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005000:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	695a      	ldr	r2, [r3, #20]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005010:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68da      	ldr	r2, [r3, #12]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005020:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2220      	movs	r2, #32
 800502c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2220      	movs	r2, #32
 8005034:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b08a      	sub	sp, #40	@ 0x28
 800504c:	af02      	add	r7, sp, #8
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	603b      	str	r3, [r7, #0]
 8005054:	4613      	mov	r3, r2
 8005056:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005058:	2300      	movs	r3, #0
 800505a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b20      	cmp	r3, #32
 8005066:	d175      	bne.n	8005154 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <HAL_UART_Transmit+0x2c>
 800506e:	88fb      	ldrh	r3, [r7, #6]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e06e      	b.n	8005156 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2221      	movs	r2, #33	@ 0x21
 8005082:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005086:	f7fc fbf1 	bl	800186c <HAL_GetTick>
 800508a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	88fa      	ldrh	r2, [r7, #6]
 8005090:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	88fa      	ldrh	r2, [r7, #6]
 8005096:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050a0:	d108      	bne.n	80050b4 <HAL_UART_Transmit+0x6c>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d104      	bne.n	80050b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050aa:	2300      	movs	r3, #0
 80050ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	61bb      	str	r3, [r7, #24]
 80050b2:	e003      	b.n	80050bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050b8:	2300      	movs	r3, #0
 80050ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050bc:	e02e      	b.n	800511c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	2200      	movs	r2, #0
 80050c6:	2180      	movs	r1, #128	@ 0x80
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f000 fc10 	bl	80058ee <UART_WaitOnFlagUntilTimeout>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d005      	beq.n	80050e0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2220      	movs	r2, #32
 80050d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e03a      	b.n	8005156 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10b      	bne.n	80050fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	881b      	ldrh	r3, [r3, #0]
 80050ea:	461a      	mov	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	3302      	adds	r3, #2
 80050fa:	61bb      	str	r3, [r7, #24]
 80050fc:	e007      	b.n	800510e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	781a      	ldrb	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	3301      	adds	r3, #1
 800510c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005112:	b29b      	uxth	r3, r3
 8005114:	3b01      	subs	r3, #1
 8005116:	b29a      	uxth	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005120:	b29b      	uxth	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1cb      	bne.n	80050be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	2200      	movs	r2, #0
 800512e:	2140      	movs	r1, #64	@ 0x40
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f000 fbdc 	bl	80058ee <UART_WaitOnFlagUntilTimeout>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d005      	beq.n	8005148 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2220      	movs	r2, #32
 8005140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e006      	b.n	8005156 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2220      	movs	r2, #32
 800514c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005150:	2300      	movs	r3, #0
 8005152:	e000      	b.n	8005156 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005154:	2302      	movs	r3, #2
  }
}
 8005156:	4618      	mov	r0, r3
 8005158:	3720      	adds	r7, #32
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
	...

08005160 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b08c      	sub	sp, #48	@ 0x30
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	4613      	mov	r3, r2
 800516c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b20      	cmp	r3, #32
 8005178:	d156      	bne.n	8005228 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d002      	beq.n	8005186 <HAL_UART_Transmit_DMA+0x26>
 8005180:	88fb      	ldrh	r3, [r7, #6]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e04f      	b.n	800522a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	88fa      	ldrh	r2, [r7, #6]
 8005194:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	88fa      	ldrh	r2, [r7, #6]
 800519a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2221      	movs	r2, #33	@ 0x21
 80051a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ae:	4a21      	ldr	r2, [pc, #132]	@ (8005234 <HAL_UART_Transmit_DMA+0xd4>)
 80051b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051b6:	4a20      	ldr	r2, [pc, #128]	@ (8005238 <HAL_UART_Transmit_DMA+0xd8>)
 80051b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051be:	4a1f      	ldr	r2, [pc, #124]	@ (800523c <HAL_UART_Transmit_DMA+0xdc>)
 80051c0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c6:	2200      	movs	r2, #0
 80051c8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80051ca:	f107 0308 	add.w	r3, r7, #8
 80051ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80051d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051d6:	6819      	ldr	r1, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	3304      	adds	r3, #4
 80051de:	461a      	mov	r2, r3
 80051e0:	88fb      	ldrh	r3, [r7, #6]
 80051e2:	f7fc fd1f 	bl	8001c24 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80051ee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	3314      	adds	r3, #20
 80051f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	e853 3f00 	ldrex	r3, [r3]
 80051fe:	617b      	str	r3, [r7, #20]
   return(result);
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005206:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	3314      	adds	r3, #20
 800520e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005210:	627a      	str	r2, [r7, #36]	@ 0x24
 8005212:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005214:	6a39      	ldr	r1, [r7, #32]
 8005216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005218:	e841 2300 	strex	r3, r2, [r1]
 800521c:	61fb      	str	r3, [r7, #28]
   return(result);
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1e5      	bne.n	80051f0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8005224:	2300      	movs	r3, #0
 8005226:	e000      	b.n	800522a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005228:	2302      	movs	r3, #2
  }
}
 800522a:	4618      	mov	r0, r3
 800522c:	3730      	adds	r7, #48	@ 0x30
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	080057a5 	.word	0x080057a5
 8005238:	0800583f 	.word	0x0800583f
 800523c:	0800585b 	.word	0x0800585b

08005240 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b0ba      	sub	sp, #232	@ 0xe8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005266:	2300      	movs	r3, #0
 8005268:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800526c:	2300      	movs	r3, #0
 800526e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005276:	f003 030f 	and.w	r3, r3, #15
 800527a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800527e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10f      	bne.n	80052a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800528a:	f003 0320 	and.w	r3, r3, #32
 800528e:	2b00      	cmp	r3, #0
 8005290:	d009      	beq.n	80052a6 <HAL_UART_IRQHandler+0x66>
 8005292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005296:	f003 0320 	and.w	r3, r3, #32
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 fc85 	bl	8005bae <UART_Receive_IT>
      return;
 80052a4:	e25b      	b.n	800575e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80052a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f000 80de 	beq.w	800546c <HAL_UART_IRQHandler+0x22c>
 80052b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d106      	bne.n	80052ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80052bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052c0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 80d1 	beq.w	800546c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00b      	beq.n	80052ee <HAL_UART_IRQHandler+0xae>
 80052d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d005      	beq.n	80052ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052e6:	f043 0201 	orr.w	r2, r3, #1
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052f2:	f003 0304 	and.w	r3, r3, #4
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00b      	beq.n	8005312 <HAL_UART_IRQHandler+0xd2>
 80052fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b00      	cmp	r3, #0
 8005304:	d005      	beq.n	8005312 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800530a:	f043 0202 	orr.w	r2, r3, #2
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005316:	f003 0302 	and.w	r3, r3, #2
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00b      	beq.n	8005336 <HAL_UART_IRQHandler+0xf6>
 800531e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b00      	cmp	r3, #0
 8005328:	d005      	beq.n	8005336 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800532e:	f043 0204 	orr.w	r2, r3, #4
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800533a:	f003 0308 	and.w	r3, r3, #8
 800533e:	2b00      	cmp	r3, #0
 8005340:	d011      	beq.n	8005366 <HAL_UART_IRQHandler+0x126>
 8005342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005346:	f003 0320 	and.w	r3, r3, #32
 800534a:	2b00      	cmp	r3, #0
 800534c:	d105      	bne.n	800535a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800534e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b00      	cmp	r3, #0
 8005358:	d005      	beq.n	8005366 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800535e:	f043 0208 	orr.w	r2, r3, #8
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800536a:	2b00      	cmp	r3, #0
 800536c:	f000 81f2 	beq.w	8005754 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005374:	f003 0320 	and.w	r3, r3, #32
 8005378:	2b00      	cmp	r3, #0
 800537a:	d008      	beq.n	800538e <HAL_UART_IRQHandler+0x14e>
 800537c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005380:	f003 0320 	and.w	r3, r3, #32
 8005384:	2b00      	cmp	r3, #0
 8005386:	d002      	beq.n	800538e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 fc10 	bl	8005bae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	695b      	ldr	r3, [r3, #20]
 8005394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005398:	2b40      	cmp	r3, #64	@ 0x40
 800539a:	bf0c      	ite	eq
 800539c:	2301      	moveq	r3, #1
 800539e:	2300      	movne	r3, #0
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053aa:	f003 0308 	and.w	r3, r3, #8
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d103      	bne.n	80053ba <HAL_UART_IRQHandler+0x17a>
 80053b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d04f      	beq.n	800545a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 fb18 	bl	80059f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ca:	2b40      	cmp	r3, #64	@ 0x40
 80053cc:	d141      	bne.n	8005452 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	3314      	adds	r3, #20
 80053d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80053dc:	e853 3f00 	ldrex	r3, [r3]
 80053e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80053e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80053e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	3314      	adds	r3, #20
 80053f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80053fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80053fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005402:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005406:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800540a:	e841 2300 	strex	r3, r2, [r1]
 800540e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005412:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1d9      	bne.n	80053ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800541e:	2b00      	cmp	r3, #0
 8005420:	d013      	beq.n	800544a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005426:	4a7e      	ldr	r2, [pc, #504]	@ (8005620 <HAL_UART_IRQHandler+0x3e0>)
 8005428:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800542e:	4618      	mov	r0, r3
 8005430:	f7fc fcc0 	bl	8001db4 <HAL_DMA_Abort_IT>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d016      	beq.n	8005468 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800543e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005444:	4610      	mov	r0, r2
 8005446:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005448:	e00e      	b.n	8005468 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f994 	bl	8005778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005450:	e00a      	b.n	8005468 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f990 	bl	8005778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005458:	e006      	b.n	8005468 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f98c 	bl	8005778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005466:	e175      	b.n	8005754 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005468:	bf00      	nop
    return;
 800546a:	e173      	b.n	8005754 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005470:	2b01      	cmp	r3, #1
 8005472:	f040 814f 	bne.w	8005714 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800547a:	f003 0310 	and.w	r3, r3, #16
 800547e:	2b00      	cmp	r3, #0
 8005480:	f000 8148 	beq.w	8005714 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005488:	f003 0310 	and.w	r3, r3, #16
 800548c:	2b00      	cmp	r3, #0
 800548e:	f000 8141 	beq.w	8005714 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005492:	2300      	movs	r3, #0
 8005494:	60bb      	str	r3, [r7, #8]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	60bb      	str	r3, [r7, #8]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	60bb      	str	r3, [r7, #8]
 80054a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b2:	2b40      	cmp	r3, #64	@ 0x40
 80054b4:	f040 80b6 	bne.w	8005624 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 8145 	beq.w	8005758 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80054d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054d6:	429a      	cmp	r2, r3
 80054d8:	f080 813e 	bcs.w	8005758 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054ee:	f000 8088 	beq.w	8005602 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	330c      	adds	r3, #12
 80054f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005500:	e853 3f00 	ldrex	r3, [r3]
 8005504:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005508:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800550c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005510:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	330c      	adds	r3, #12
 800551a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800551e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005522:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005526:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800552a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800552e:	e841 2300 	strex	r3, r2, [r1]
 8005532:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005536:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1d9      	bne.n	80054f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	3314      	adds	r3, #20
 8005544:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005546:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005548:	e853 3f00 	ldrex	r3, [r3]
 800554c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800554e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005550:	f023 0301 	bic.w	r3, r3, #1
 8005554:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3314      	adds	r3, #20
 800555e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005562:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005566:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005568:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800556a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800556e:	e841 2300 	strex	r3, r2, [r1]
 8005572:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005574:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1e1      	bne.n	800553e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3314      	adds	r3, #20
 8005580:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005582:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005584:	e853 3f00 	ldrex	r3, [r3]
 8005588:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800558a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800558c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005590:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	3314      	adds	r3, #20
 800559a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800559e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80055a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80055a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80055a6:	e841 2300 	strex	r3, r2, [r1]
 80055aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80055ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1e3      	bne.n	800557a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	330c      	adds	r3, #12
 80055c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055ca:	e853 3f00 	ldrex	r3, [r3]
 80055ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80055d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055d2:	f023 0310 	bic.w	r3, r3, #16
 80055d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	330c      	adds	r3, #12
 80055e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80055e4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80055e6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80055ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80055ec:	e841 2300 	strex	r3, r2, [r1]
 80055f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80055f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1e3      	bne.n	80055c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7fc fb69 	bl	8001cd4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2202      	movs	r2, #2
 8005606:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005610:	b29b      	uxth	r3, r3
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	b29b      	uxth	r3, r3
 8005616:	4619      	mov	r1, r3
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f8b7 	bl	800578c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800561e:	e09b      	b.n	8005758 <HAL_UART_IRQHandler+0x518>
 8005620:	08005ab7 	.word	0x08005ab7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800562c:	b29b      	uxth	r3, r3
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	f000 808e 	beq.w	800575c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005640:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 8089 	beq.w	800575c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	330c      	adds	r3, #12
 8005650:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005654:	e853 3f00 	ldrex	r3, [r3]
 8005658:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800565a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800565c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005660:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	330c      	adds	r3, #12
 800566a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800566e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005670:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005672:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005674:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005676:	e841 2300 	strex	r3, r2, [r1]
 800567a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800567c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1e3      	bne.n	800564a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	3314      	adds	r3, #20
 8005688:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568c:	e853 3f00 	ldrex	r3, [r3]
 8005690:	623b      	str	r3, [r7, #32]
   return(result);
 8005692:	6a3b      	ldr	r3, [r7, #32]
 8005694:	f023 0301 	bic.w	r3, r3, #1
 8005698:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3314      	adds	r3, #20
 80056a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80056a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80056a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056ae:	e841 2300 	strex	r3, r2, [r1]
 80056b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1e3      	bne.n	8005682 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2220      	movs	r2, #32
 80056be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	330c      	adds	r3, #12
 80056ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	e853 3f00 	ldrex	r3, [r3]
 80056d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 0310 	bic.w	r3, r3, #16
 80056de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	330c      	adds	r3, #12
 80056e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80056ec:	61fa      	str	r2, [r7, #28]
 80056ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f0:	69b9      	ldr	r1, [r7, #24]
 80056f2:	69fa      	ldr	r2, [r7, #28]
 80056f4:	e841 2300 	strex	r3, r2, [r1]
 80056f8:	617b      	str	r3, [r7, #20]
   return(result);
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1e3      	bne.n	80056c8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2202      	movs	r2, #2
 8005704:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005706:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800570a:	4619      	mov	r1, r3
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f83d 	bl	800578c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005712:	e023      	b.n	800575c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005718:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800571c:	2b00      	cmp	r3, #0
 800571e:	d009      	beq.n	8005734 <HAL_UART_IRQHandler+0x4f4>
 8005720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005728:	2b00      	cmp	r3, #0
 800572a:	d003      	beq.n	8005734 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f9d6 	bl	8005ade <UART_Transmit_IT>
    return;
 8005732:	e014      	b.n	800575e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00e      	beq.n	800575e <HAL_UART_IRQHandler+0x51e>
 8005740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005748:	2b00      	cmp	r3, #0
 800574a:	d008      	beq.n	800575e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 fa16 	bl	8005b7e <UART_EndTransmit_IT>
    return;
 8005752:	e004      	b.n	800575e <HAL_UART_IRQHandler+0x51e>
    return;
 8005754:	bf00      	nop
 8005756:	e002      	b.n	800575e <HAL_UART_IRQHandler+0x51e>
      return;
 8005758:	bf00      	nop
 800575a:	e000      	b.n	800575e <HAL_UART_IRQHandler+0x51e>
      return;
 800575c:	bf00      	nop
  }
}
 800575e:	37e8      	adds	r7, #232	@ 0xe8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	460b      	mov	r3, r1
 8005796:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b090      	sub	sp, #64	@ 0x40
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d137      	bne.n	8005830 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80057c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057c2:	2200      	movs	r2, #0
 80057c4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80057c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3314      	adds	r3, #20
 80057cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d0:	e853 3f00 	ldrex	r3, [r3]
 80057d4:	623b      	str	r3, [r7, #32]
   return(result);
 80057d6:	6a3b      	ldr	r3, [r7, #32]
 80057d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	3314      	adds	r3, #20
 80057e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80057e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80057e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057ee:	e841 2300 	strex	r3, r2, [r1]
 80057f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1e5      	bne.n	80057c6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	330c      	adds	r3, #12
 8005800:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	e853 3f00 	ldrex	r3, [r3]
 8005808:	60fb      	str	r3, [r7, #12]
   return(result);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005810:	637b      	str	r3, [r7, #52]	@ 0x34
 8005812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	330c      	adds	r3, #12
 8005818:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800581a:	61fa      	str	r2, [r7, #28]
 800581c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581e:	69b9      	ldr	r1, [r7, #24]
 8005820:	69fa      	ldr	r2, [r7, #28]
 8005822:	e841 2300 	strex	r3, r2, [r1]
 8005826:	617b      	str	r3, [r7, #20]
   return(result);
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1e5      	bne.n	80057fa <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800582e:	e002      	b.n	8005836 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005830:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005832:	f7fa ff51 	bl	80006d8 <HAL_UART_TxCpltCallback>
}
 8005836:	bf00      	nop
 8005838:	3740      	adds	r7, #64	@ 0x40
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b084      	sub	sp, #16
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800584a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f7fa ff39 	bl	80006c4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005852:	bf00      	nop
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b084      	sub	sp, #16
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005862:	2300      	movs	r3, #0
 8005864:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800586a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005876:	2b80      	cmp	r3, #128	@ 0x80
 8005878:	bf0c      	ite	eq
 800587a:	2301      	moveq	r3, #1
 800587c:	2300      	movne	r3, #0
 800587e:	b2db      	uxtb	r3, r3
 8005880:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b21      	cmp	r3, #33	@ 0x21
 800588c:	d108      	bne.n	80058a0 <UART_DMAError+0x46>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d005      	beq.n	80058a0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	2200      	movs	r2, #0
 8005898:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800589a:	68b8      	ldr	r0, [r7, #8]
 800589c:	f000 f880 	bl	80059a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058aa:	2b40      	cmp	r3, #64	@ 0x40
 80058ac:	bf0c      	ite	eq
 80058ae:	2301      	moveq	r3, #1
 80058b0:	2300      	movne	r3, #0
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b22      	cmp	r3, #34	@ 0x22
 80058c0:	d108      	bne.n	80058d4 <UART_DMAError+0x7a>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d005      	beq.n	80058d4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	2200      	movs	r2, #0
 80058cc:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80058ce:	68b8      	ldr	r0, [r7, #8]
 80058d0:	f000 f88e 	bl	80059f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058d8:	f043 0210 	orr.w	r2, r3, #16
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058e0:	68b8      	ldr	r0, [r7, #8]
 80058e2:	f7ff ff49 	bl	8005778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058e6:	bf00      	nop
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b086      	sub	sp, #24
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	60f8      	str	r0, [r7, #12]
 80058f6:	60b9      	str	r1, [r7, #8]
 80058f8:	603b      	str	r3, [r7, #0]
 80058fa:	4613      	mov	r3, r2
 80058fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058fe:	e03b      	b.n	8005978 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005906:	d037      	beq.n	8005978 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005908:	f7fb ffb0 	bl	800186c <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	6a3a      	ldr	r2, [r7, #32]
 8005914:	429a      	cmp	r2, r3
 8005916:	d302      	bcc.n	800591e <UART_WaitOnFlagUntilTimeout+0x30>
 8005918:	6a3b      	ldr	r3, [r7, #32]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e03a      	b.n	8005998 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	f003 0304 	and.w	r3, r3, #4
 800592c:	2b00      	cmp	r3, #0
 800592e:	d023      	beq.n	8005978 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	2b80      	cmp	r3, #128	@ 0x80
 8005934:	d020      	beq.n	8005978 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	2b40      	cmp	r3, #64	@ 0x40
 800593a:	d01d      	beq.n	8005978 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0308 	and.w	r3, r3, #8
 8005946:	2b08      	cmp	r3, #8
 8005948:	d116      	bne.n	8005978 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800594a:	2300      	movs	r3, #0
 800594c:	617b      	str	r3, [r7, #20]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	617b      	str	r3, [r7, #20]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	617b      	str	r3, [r7, #20]
 800595e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 f845 	bl	80059f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2208      	movs	r2, #8
 800596a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e00f      	b.n	8005998 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	4013      	ands	r3, r2
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	429a      	cmp	r2, r3
 8005986:	bf0c      	ite	eq
 8005988:	2301      	moveq	r3, #1
 800598a:	2300      	movne	r3, #0
 800598c:	b2db      	uxtb	r3, r3
 800598e:	461a      	mov	r2, r3
 8005990:	79fb      	ldrb	r3, [r7, #7]
 8005992:	429a      	cmp	r2, r3
 8005994:	d0b4      	beq.n	8005900 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3718      	adds	r7, #24
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b089      	sub	sp, #36	@ 0x24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	330c      	adds	r3, #12
 80059ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	e853 3f00 	ldrex	r3, [r3]
 80059b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80059be:	61fb      	str	r3, [r7, #28]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	330c      	adds	r3, #12
 80059c6:	69fa      	ldr	r2, [r7, #28]
 80059c8:	61ba      	str	r2, [r7, #24]
 80059ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059cc:	6979      	ldr	r1, [r7, #20]
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	e841 2300 	strex	r3, r2, [r1]
 80059d4:	613b      	str	r3, [r7, #16]
   return(result);
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1e5      	bne.n	80059a8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2220      	movs	r2, #32
 80059e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80059e4:	bf00      	nop
 80059e6:	3724      	adds	r7, #36	@ 0x24
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b095      	sub	sp, #84	@ 0x54
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	330c      	adds	r3, #12
 80059fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a02:	e853 3f00 	ldrex	r3, [r3]
 8005a06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	330c      	adds	r3, #12
 8005a16:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a18:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a20:	e841 2300 	strex	r3, r2, [r1]
 8005a24:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1e5      	bne.n	80059f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	3314      	adds	r3, #20
 8005a32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a34:	6a3b      	ldr	r3, [r7, #32]
 8005a36:	e853 3f00 	ldrex	r3, [r3]
 8005a3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	f023 0301 	bic.w	r3, r3, #1
 8005a42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	3314      	adds	r3, #20
 8005a4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a54:	e841 2300 	strex	r3, r2, [r1]
 8005a58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1e5      	bne.n	8005a2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d119      	bne.n	8005a9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	330c      	adds	r3, #12
 8005a6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	e853 3f00 	ldrex	r3, [r3]
 8005a76:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	f023 0310 	bic.w	r3, r3, #16
 8005a7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	330c      	adds	r3, #12
 8005a86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a88:	61ba      	str	r2, [r7, #24]
 8005a8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8c:	6979      	ldr	r1, [r7, #20]
 8005a8e:	69ba      	ldr	r2, [r7, #24]
 8005a90:	e841 2300 	strex	r3, r2, [r1]
 8005a94:	613b      	str	r3, [r7, #16]
   return(result);
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1e5      	bne.n	8005a68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005aaa:	bf00      	nop
 8005aac:	3754      	adds	r7, #84	@ 0x54
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b084      	sub	sp, #16
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f7ff fe51 	bl	8005778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ad6:	bf00      	nop
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b085      	sub	sp, #20
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b21      	cmp	r3, #33	@ 0x21
 8005af0:	d13e      	bne.n	8005b70 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005afa:	d114      	bne.n	8005b26 <UART_Transmit_IT+0x48>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d110      	bne.n	8005b26 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a1b      	ldr	r3, [r3, #32]
 8005b08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	881b      	ldrh	r3, [r3, #0]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b18:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	1c9a      	adds	r2, r3, #2
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	621a      	str	r2, [r3, #32]
 8005b24:	e008      	b.n	8005b38 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	1c59      	adds	r1, r3, #1
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	6211      	str	r1, [r2, #32]
 8005b30:	781a      	ldrb	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	4619      	mov	r1, r3
 8005b46:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10f      	bne.n	8005b6c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68da      	ldr	r2, [r3, #12]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b5a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68da      	ldr	r2, [r3, #12]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b6a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	e000      	b.n	8005b72 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b70:	2302      	movs	r3, #2
  }
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b082      	sub	sp, #8
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68da      	ldr	r2, [r3, #12]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7fa fd9a 	bl	80006d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b08c      	sub	sp, #48	@ 0x30
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b22      	cmp	r3, #34	@ 0x22
 8005bc0:	f040 80ae 	bne.w	8005d20 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bcc:	d117      	bne.n	8005bfe <UART_Receive_IT+0x50>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d113      	bne.n	8005bfe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bde:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bf0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf6:	1c9a      	adds	r2, r3, #2
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	629a      	str	r2, [r3, #40]	@ 0x28
 8005bfc:	e026      	b.n	8005c4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005c04:	2300      	movs	r3, #0
 8005c06:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c10:	d007      	beq.n	8005c22 <UART_Receive_IT+0x74>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10a      	bne.n	8005c30 <UART_Receive_IT+0x82>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d106      	bne.n	8005c30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c2c:	701a      	strb	r2, [r3, #0]
 8005c2e:	e008      	b.n	8005c42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c46:	1c5a      	adds	r2, r3, #1
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	3b01      	subs	r3, #1
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	4619      	mov	r1, r3
 8005c5a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d15d      	bne.n	8005d1c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68da      	ldr	r2, [r3, #12]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f022 0220 	bic.w	r2, r2, #32
 8005c6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68da      	ldr	r2, [r3, #12]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	695a      	ldr	r2, [r3, #20]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f022 0201 	bic.w	r2, r2, #1
 8005c8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2220      	movs	r2, #32
 8005c94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d135      	bne.n	8005d12 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	330c      	adds	r3, #12
 8005cb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	e853 3f00 	ldrex	r3, [r3]
 8005cba:	613b      	str	r3, [r7, #16]
   return(result);
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	f023 0310 	bic.w	r3, r3, #16
 8005cc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	330c      	adds	r3, #12
 8005cca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ccc:	623a      	str	r2, [r7, #32]
 8005cce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd0:	69f9      	ldr	r1, [r7, #28]
 8005cd2:	6a3a      	ldr	r2, [r7, #32]
 8005cd4:	e841 2300 	strex	r3, r2, [r1]
 8005cd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1e5      	bne.n	8005cac <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0310 	and.w	r3, r3, #16
 8005cea:	2b10      	cmp	r3, #16
 8005cec:	d10a      	bne.n	8005d04 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cee:	2300      	movs	r3, #0
 8005cf0:	60fb      	str	r3, [r7, #12]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	60fb      	str	r3, [r7, #12]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	60fb      	str	r3, [r7, #12]
 8005d02:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d08:	4619      	mov	r1, r3
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f7ff fd3e 	bl	800578c <HAL_UARTEx_RxEventCallback>
 8005d10:	e002      	b.n	8005d18 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7ff fd26 	bl	8005764 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	e002      	b.n	8005d22 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	e000      	b.n	8005d22 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005d20:	2302      	movs	r3, #2
  }
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3730      	adds	r7, #48	@ 0x30
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
	...

08005d2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d30:	b0c0      	sub	sp, #256	@ 0x100
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d48:	68d9      	ldr	r1, [r3, #12]
 8005d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	ea40 0301 	orr.w	r3, r0, r1
 8005d54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d5a:	689a      	ldr	r2, [r3, #8]
 8005d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	431a      	orrs	r2, r3
 8005d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d70:	69db      	ldr	r3, [r3, #28]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005d84:	f021 010c 	bic.w	r1, r1, #12
 8005d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005d92:	430b      	orrs	r3, r1
 8005d94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da6:	6999      	ldr	r1, [r3, #24]
 8005da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	ea40 0301 	orr.w	r3, r0, r1
 8005db2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	4b8f      	ldr	r3, [pc, #572]	@ (8005ff8 <UART_SetConfig+0x2cc>)
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d005      	beq.n	8005dcc <UART_SetConfig+0xa0>
 8005dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	4b8d      	ldr	r3, [pc, #564]	@ (8005ffc <UART_SetConfig+0x2d0>)
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d104      	bne.n	8005dd6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005dcc:	f7fe fb3e 	bl	800444c <HAL_RCC_GetPCLK2Freq>
 8005dd0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005dd4:	e003      	b.n	8005dde <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005dd6:	f7fe fb25 	bl	8004424 <HAL_RCC_GetPCLK1Freq>
 8005dda:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005de8:	f040 810c 	bne.w	8006004 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005dec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005df0:	2200      	movs	r2, #0
 8005df2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005df6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005dfa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005dfe:	4622      	mov	r2, r4
 8005e00:	462b      	mov	r3, r5
 8005e02:	1891      	adds	r1, r2, r2
 8005e04:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005e06:	415b      	adcs	r3, r3
 8005e08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005e0e:	4621      	mov	r1, r4
 8005e10:	eb12 0801 	adds.w	r8, r2, r1
 8005e14:	4629      	mov	r1, r5
 8005e16:	eb43 0901 	adc.w	r9, r3, r1
 8005e1a:	f04f 0200 	mov.w	r2, #0
 8005e1e:	f04f 0300 	mov.w	r3, #0
 8005e22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e2e:	4690      	mov	r8, r2
 8005e30:	4699      	mov	r9, r3
 8005e32:	4623      	mov	r3, r4
 8005e34:	eb18 0303 	adds.w	r3, r8, r3
 8005e38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e3c:	462b      	mov	r3, r5
 8005e3e:	eb49 0303 	adc.w	r3, r9, r3
 8005e42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e52:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005e56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	18db      	adds	r3, r3, r3
 8005e5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e60:	4613      	mov	r3, r2
 8005e62:	eb42 0303 	adc.w	r3, r2, r3
 8005e66:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005e6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005e70:	f7fa fa16 	bl	80002a0 <__aeabi_uldivmod>
 8005e74:	4602      	mov	r2, r0
 8005e76:	460b      	mov	r3, r1
 8005e78:	4b61      	ldr	r3, [pc, #388]	@ (8006000 <UART_SetConfig+0x2d4>)
 8005e7a:	fba3 2302 	umull	r2, r3, r3, r2
 8005e7e:	095b      	lsrs	r3, r3, #5
 8005e80:	011c      	lsls	r4, r3, #4
 8005e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e86:	2200      	movs	r2, #0
 8005e88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e8c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005e90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005e94:	4642      	mov	r2, r8
 8005e96:	464b      	mov	r3, r9
 8005e98:	1891      	adds	r1, r2, r2
 8005e9a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005e9c:	415b      	adcs	r3, r3
 8005e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ea0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005ea4:	4641      	mov	r1, r8
 8005ea6:	eb12 0a01 	adds.w	sl, r2, r1
 8005eaa:	4649      	mov	r1, r9
 8005eac:	eb43 0b01 	adc.w	fp, r3, r1
 8005eb0:	f04f 0200 	mov.w	r2, #0
 8005eb4:	f04f 0300 	mov.w	r3, #0
 8005eb8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ebc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ec0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ec4:	4692      	mov	sl, r2
 8005ec6:	469b      	mov	fp, r3
 8005ec8:	4643      	mov	r3, r8
 8005eca:	eb1a 0303 	adds.w	r3, sl, r3
 8005ece:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ed2:	464b      	mov	r3, r9
 8005ed4:	eb4b 0303 	adc.w	r3, fp, r3
 8005ed8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ee8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005eec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	18db      	adds	r3, r3, r3
 8005ef4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	eb42 0303 	adc.w	r3, r2, r3
 8005efc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005efe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005f02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005f06:	f7fa f9cb 	bl	80002a0 <__aeabi_uldivmod>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	4611      	mov	r1, r2
 8005f10:	4b3b      	ldr	r3, [pc, #236]	@ (8006000 <UART_SetConfig+0x2d4>)
 8005f12:	fba3 2301 	umull	r2, r3, r3, r1
 8005f16:	095b      	lsrs	r3, r3, #5
 8005f18:	2264      	movs	r2, #100	@ 0x64
 8005f1a:	fb02 f303 	mul.w	r3, r2, r3
 8005f1e:	1acb      	subs	r3, r1, r3
 8005f20:	00db      	lsls	r3, r3, #3
 8005f22:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005f26:	4b36      	ldr	r3, [pc, #216]	@ (8006000 <UART_SetConfig+0x2d4>)
 8005f28:	fba3 2302 	umull	r2, r3, r3, r2
 8005f2c:	095b      	lsrs	r3, r3, #5
 8005f2e:	005b      	lsls	r3, r3, #1
 8005f30:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005f34:	441c      	add	r4, r3
 8005f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f40:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005f44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005f48:	4642      	mov	r2, r8
 8005f4a:	464b      	mov	r3, r9
 8005f4c:	1891      	adds	r1, r2, r2
 8005f4e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005f50:	415b      	adcs	r3, r3
 8005f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005f58:	4641      	mov	r1, r8
 8005f5a:	1851      	adds	r1, r2, r1
 8005f5c:	6339      	str	r1, [r7, #48]	@ 0x30
 8005f5e:	4649      	mov	r1, r9
 8005f60:	414b      	adcs	r3, r1
 8005f62:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f64:	f04f 0200 	mov.w	r2, #0
 8005f68:	f04f 0300 	mov.w	r3, #0
 8005f6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005f70:	4659      	mov	r1, fp
 8005f72:	00cb      	lsls	r3, r1, #3
 8005f74:	4651      	mov	r1, sl
 8005f76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f7a:	4651      	mov	r1, sl
 8005f7c:	00ca      	lsls	r2, r1, #3
 8005f7e:	4610      	mov	r0, r2
 8005f80:	4619      	mov	r1, r3
 8005f82:	4603      	mov	r3, r0
 8005f84:	4642      	mov	r2, r8
 8005f86:	189b      	adds	r3, r3, r2
 8005f88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f8c:	464b      	mov	r3, r9
 8005f8e:	460a      	mov	r2, r1
 8005f90:	eb42 0303 	adc.w	r3, r2, r3
 8005f94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005fa4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005fa8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005fac:	460b      	mov	r3, r1
 8005fae:	18db      	adds	r3, r3, r3
 8005fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	eb42 0303 	adc.w	r3, r2, r3
 8005fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005fbe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005fc2:	f7fa f96d 	bl	80002a0 <__aeabi_uldivmod>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	460b      	mov	r3, r1
 8005fca:	4b0d      	ldr	r3, [pc, #52]	@ (8006000 <UART_SetConfig+0x2d4>)
 8005fcc:	fba3 1302 	umull	r1, r3, r3, r2
 8005fd0:	095b      	lsrs	r3, r3, #5
 8005fd2:	2164      	movs	r1, #100	@ 0x64
 8005fd4:	fb01 f303 	mul.w	r3, r1, r3
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	00db      	lsls	r3, r3, #3
 8005fdc:	3332      	adds	r3, #50	@ 0x32
 8005fde:	4a08      	ldr	r2, [pc, #32]	@ (8006000 <UART_SetConfig+0x2d4>)
 8005fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe4:	095b      	lsrs	r3, r3, #5
 8005fe6:	f003 0207 	and.w	r2, r3, #7
 8005fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4422      	add	r2, r4
 8005ff2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ff4:	e106      	b.n	8006204 <UART_SetConfig+0x4d8>
 8005ff6:	bf00      	nop
 8005ff8:	40011000 	.word	0x40011000
 8005ffc:	40011400 	.word	0x40011400
 8006000:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006004:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006008:	2200      	movs	r2, #0
 800600a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800600e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006012:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006016:	4642      	mov	r2, r8
 8006018:	464b      	mov	r3, r9
 800601a:	1891      	adds	r1, r2, r2
 800601c:	6239      	str	r1, [r7, #32]
 800601e:	415b      	adcs	r3, r3
 8006020:	627b      	str	r3, [r7, #36]	@ 0x24
 8006022:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006026:	4641      	mov	r1, r8
 8006028:	1854      	adds	r4, r2, r1
 800602a:	4649      	mov	r1, r9
 800602c:	eb43 0501 	adc.w	r5, r3, r1
 8006030:	f04f 0200 	mov.w	r2, #0
 8006034:	f04f 0300 	mov.w	r3, #0
 8006038:	00eb      	lsls	r3, r5, #3
 800603a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800603e:	00e2      	lsls	r2, r4, #3
 8006040:	4614      	mov	r4, r2
 8006042:	461d      	mov	r5, r3
 8006044:	4643      	mov	r3, r8
 8006046:	18e3      	adds	r3, r4, r3
 8006048:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800604c:	464b      	mov	r3, r9
 800604e:	eb45 0303 	adc.w	r3, r5, r3
 8006052:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006062:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006066:	f04f 0200 	mov.w	r2, #0
 800606a:	f04f 0300 	mov.w	r3, #0
 800606e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006072:	4629      	mov	r1, r5
 8006074:	008b      	lsls	r3, r1, #2
 8006076:	4621      	mov	r1, r4
 8006078:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800607c:	4621      	mov	r1, r4
 800607e:	008a      	lsls	r2, r1, #2
 8006080:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006084:	f7fa f90c 	bl	80002a0 <__aeabi_uldivmod>
 8006088:	4602      	mov	r2, r0
 800608a:	460b      	mov	r3, r1
 800608c:	4b60      	ldr	r3, [pc, #384]	@ (8006210 <UART_SetConfig+0x4e4>)
 800608e:	fba3 2302 	umull	r2, r3, r3, r2
 8006092:	095b      	lsrs	r3, r3, #5
 8006094:	011c      	lsls	r4, r3, #4
 8006096:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800609a:	2200      	movs	r2, #0
 800609c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80060a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80060a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80060a8:	4642      	mov	r2, r8
 80060aa:	464b      	mov	r3, r9
 80060ac:	1891      	adds	r1, r2, r2
 80060ae:	61b9      	str	r1, [r7, #24]
 80060b0:	415b      	adcs	r3, r3
 80060b2:	61fb      	str	r3, [r7, #28]
 80060b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060b8:	4641      	mov	r1, r8
 80060ba:	1851      	adds	r1, r2, r1
 80060bc:	6139      	str	r1, [r7, #16]
 80060be:	4649      	mov	r1, r9
 80060c0:	414b      	adcs	r3, r1
 80060c2:	617b      	str	r3, [r7, #20]
 80060c4:	f04f 0200 	mov.w	r2, #0
 80060c8:	f04f 0300 	mov.w	r3, #0
 80060cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060d0:	4659      	mov	r1, fp
 80060d2:	00cb      	lsls	r3, r1, #3
 80060d4:	4651      	mov	r1, sl
 80060d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060da:	4651      	mov	r1, sl
 80060dc:	00ca      	lsls	r2, r1, #3
 80060de:	4610      	mov	r0, r2
 80060e0:	4619      	mov	r1, r3
 80060e2:	4603      	mov	r3, r0
 80060e4:	4642      	mov	r2, r8
 80060e6:	189b      	adds	r3, r3, r2
 80060e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80060ec:	464b      	mov	r3, r9
 80060ee:	460a      	mov	r2, r1
 80060f0:	eb42 0303 	adc.w	r3, r2, r3
 80060f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80060f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006102:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006104:	f04f 0200 	mov.w	r2, #0
 8006108:	f04f 0300 	mov.w	r3, #0
 800610c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006110:	4649      	mov	r1, r9
 8006112:	008b      	lsls	r3, r1, #2
 8006114:	4641      	mov	r1, r8
 8006116:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800611a:	4641      	mov	r1, r8
 800611c:	008a      	lsls	r2, r1, #2
 800611e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006122:	f7fa f8bd 	bl	80002a0 <__aeabi_uldivmod>
 8006126:	4602      	mov	r2, r0
 8006128:	460b      	mov	r3, r1
 800612a:	4611      	mov	r1, r2
 800612c:	4b38      	ldr	r3, [pc, #224]	@ (8006210 <UART_SetConfig+0x4e4>)
 800612e:	fba3 2301 	umull	r2, r3, r3, r1
 8006132:	095b      	lsrs	r3, r3, #5
 8006134:	2264      	movs	r2, #100	@ 0x64
 8006136:	fb02 f303 	mul.w	r3, r2, r3
 800613a:	1acb      	subs	r3, r1, r3
 800613c:	011b      	lsls	r3, r3, #4
 800613e:	3332      	adds	r3, #50	@ 0x32
 8006140:	4a33      	ldr	r2, [pc, #204]	@ (8006210 <UART_SetConfig+0x4e4>)
 8006142:	fba2 2303 	umull	r2, r3, r2, r3
 8006146:	095b      	lsrs	r3, r3, #5
 8006148:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800614c:	441c      	add	r4, r3
 800614e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006152:	2200      	movs	r2, #0
 8006154:	673b      	str	r3, [r7, #112]	@ 0x70
 8006156:	677a      	str	r2, [r7, #116]	@ 0x74
 8006158:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800615c:	4642      	mov	r2, r8
 800615e:	464b      	mov	r3, r9
 8006160:	1891      	adds	r1, r2, r2
 8006162:	60b9      	str	r1, [r7, #8]
 8006164:	415b      	adcs	r3, r3
 8006166:	60fb      	str	r3, [r7, #12]
 8006168:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800616c:	4641      	mov	r1, r8
 800616e:	1851      	adds	r1, r2, r1
 8006170:	6039      	str	r1, [r7, #0]
 8006172:	4649      	mov	r1, r9
 8006174:	414b      	adcs	r3, r1
 8006176:	607b      	str	r3, [r7, #4]
 8006178:	f04f 0200 	mov.w	r2, #0
 800617c:	f04f 0300 	mov.w	r3, #0
 8006180:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006184:	4659      	mov	r1, fp
 8006186:	00cb      	lsls	r3, r1, #3
 8006188:	4651      	mov	r1, sl
 800618a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800618e:	4651      	mov	r1, sl
 8006190:	00ca      	lsls	r2, r1, #3
 8006192:	4610      	mov	r0, r2
 8006194:	4619      	mov	r1, r3
 8006196:	4603      	mov	r3, r0
 8006198:	4642      	mov	r2, r8
 800619a:	189b      	adds	r3, r3, r2
 800619c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800619e:	464b      	mov	r3, r9
 80061a0:	460a      	mov	r2, r1
 80061a2:	eb42 0303 	adc.w	r3, r2, r3
 80061a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80061a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80061b2:	667a      	str	r2, [r7, #100]	@ 0x64
 80061b4:	f04f 0200 	mov.w	r2, #0
 80061b8:	f04f 0300 	mov.w	r3, #0
 80061bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80061c0:	4649      	mov	r1, r9
 80061c2:	008b      	lsls	r3, r1, #2
 80061c4:	4641      	mov	r1, r8
 80061c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061ca:	4641      	mov	r1, r8
 80061cc:	008a      	lsls	r2, r1, #2
 80061ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80061d2:	f7fa f865 	bl	80002a0 <__aeabi_uldivmod>
 80061d6:	4602      	mov	r2, r0
 80061d8:	460b      	mov	r3, r1
 80061da:	4b0d      	ldr	r3, [pc, #52]	@ (8006210 <UART_SetConfig+0x4e4>)
 80061dc:	fba3 1302 	umull	r1, r3, r3, r2
 80061e0:	095b      	lsrs	r3, r3, #5
 80061e2:	2164      	movs	r1, #100	@ 0x64
 80061e4:	fb01 f303 	mul.w	r3, r1, r3
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	011b      	lsls	r3, r3, #4
 80061ec:	3332      	adds	r3, #50	@ 0x32
 80061ee:	4a08      	ldr	r2, [pc, #32]	@ (8006210 <UART_SetConfig+0x4e4>)
 80061f0:	fba2 2303 	umull	r2, r3, r2, r3
 80061f4:	095b      	lsrs	r3, r3, #5
 80061f6:	f003 020f 	and.w	r2, r3, #15
 80061fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4422      	add	r2, r4
 8006202:	609a      	str	r2, [r3, #8]
}
 8006204:	bf00      	nop
 8006206:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800620a:	46bd      	mov	sp, r7
 800620c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006210:	51eb851f 	.word	0x51eb851f

08006214 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006214:	b5b0      	push	{r4, r5, r7, lr}
 8006216:	b08c      	sub	sp, #48	@ 0x30
 8006218:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800621a:	2100      	movs	r1, #0
 800621c:	2000      	movs	r0, #0
 800621e:	f003 fe3b 	bl	8009e98 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8006222:	4b1a      	ldr	r3, [pc, #104]	@ (800628c <MX_LWIP_Init+0x78>)
 8006224:	2200      	movs	r2, #0
 8006226:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8006228:	4b19      	ldr	r3, [pc, #100]	@ (8006290 <MX_LWIP_Init+0x7c>)
 800622a:	2200      	movs	r2, #0
 800622c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800622e:	4b19      	ldr	r3, [pc, #100]	@ (8006294 <MX_LWIP_Init+0x80>)
 8006230:	2200      	movs	r2, #0
 8006232:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8006234:	4b18      	ldr	r3, [pc, #96]	@ (8006298 <MX_LWIP_Init+0x84>)
 8006236:	9302      	str	r3, [sp, #8]
 8006238:	4b18      	ldr	r3, [pc, #96]	@ (800629c <MX_LWIP_Init+0x88>)
 800623a:	9301      	str	r3, [sp, #4]
 800623c:	2300      	movs	r3, #0
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	4b14      	ldr	r3, [pc, #80]	@ (8006294 <MX_LWIP_Init+0x80>)
 8006242:	4a13      	ldr	r2, [pc, #76]	@ (8006290 <MX_LWIP_Init+0x7c>)
 8006244:	4911      	ldr	r1, [pc, #68]	@ (800628c <MX_LWIP_Init+0x78>)
 8006246:	4816      	ldr	r0, [pc, #88]	@ (80062a0 <MX_LWIP_Init+0x8c>)
 8006248:	f004 fc60 	bl	800ab0c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800624c:	4814      	ldr	r0, [pc, #80]	@ (80062a0 <MX_LWIP_Init+0x8c>)
 800624e:	f004 fe8f 	bl	800af70 <netif_set_default>

  /* Set the link callback function, this function is called on change of link status*/
  // netif_set_link_callback(&gnetif, ---);
  netif_set_status_callback(&gnetif, ethernet_link_status_updated);
 8006252:	4914      	ldr	r1, [pc, #80]	@ (80062a4 <MX_LWIP_Init+0x90>)
 8006254:	4812      	ldr	r0, [pc, #72]	@ (80062a0 <MX_LWIP_Init+0x8c>)
 8006256:	f004 ff67 	bl	800b128 <netif_set_status_callback>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800625a:	4811      	ldr	r0, [pc, #68]	@ (80062a0 <MX_LWIP_Init+0x8c>)
 800625c:	f004 fe98 	bl	800af90 <netif_set_up>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8006260:	4b11      	ldr	r3, [pc, #68]	@ (80062a8 <MX_LWIP_Init+0x94>)
 8006262:	1d3c      	adds	r4, r7, #4
 8006264:	461d      	mov	r5, r3
 8006266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800626a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800626e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8006272:	1d3b      	adds	r3, r7, #4
 8006274:	490a      	ldr	r1, [pc, #40]	@ (80062a0 <MX_LWIP_Init+0x8c>)
 8006276:	4618      	mov	r0, r3
 8006278:	f000 fd88 	bl	8006d8c <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800627c:	4808      	ldr	r0, [pc, #32]	@ (80062a0 <MX_LWIP_Init+0x8c>)
 800627e:	f00c f983 	bl	8012588 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006282:	bf00      	nop
 8006284:	3720      	adds	r7, #32
 8006286:	46bd      	mov	sp, r7
 8006288:	bdb0      	pop	{r4, r5, r7, pc}
 800628a:	bf00      	nop
 800628c:	200008f0 	.word	0x200008f0
 8006290:	200008f4 	.word	0x200008f4
 8006294:	200008f8 	.word	0x200008f8
 8006298:	08009dd5 	.word	0x08009dd5
 800629c:	08006809 	.word	0x08006809
 80062a0:	200008a8 	.word	0x200008a8
 80062a4:	080062ad 	.word	0x080062ad
 80062a8:	08018200 	.word	0x08018200

080062ac <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b088      	sub	sp, #32
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d012      	beq.n	80062ea <ethernet_link_status_updated+0x3e>
  {
/* USER CODE BEGIN 5 */
    uint8_t iptxt[20];
    sprintf((char *)iptxt, "%s", ip4addr_ntoa(netif_ip4_addr(netif)));
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	3304      	adds	r3, #4
 80062c8:	4618      	mov	r0, r3
 80062ca:	f00f fc21 	bl	8015b10 <ip4addr_ntoa>
 80062ce:	4602      	mov	r2, r0
 80062d0:	f107 030c 	add.w	r3, r7, #12
 80062d4:	4908      	ldr	r1, [pc, #32]	@ (80062f8 <ethernet_link_status_updated+0x4c>)
 80062d6:	4618      	mov	r0, r3
 80062d8:	f010 fe44 	bl	8016f64 <siprintf>
    printf("IP address: %s\r\n", iptxt);
 80062dc:	f107 030c 	add.w	r3, r7, #12
 80062e0:	4619      	mov	r1, r3
 80062e2:	4806      	ldr	r0, [pc, #24]	@ (80062fc <ethernet_link_status_updated+0x50>)
 80062e4:	f010 fdce 	bl	8016e84 <iprintf>
  {
/* USER CODE BEGIN 6 */
    printf("The network cable is not connected \r\n");
/* USER CODE END 6 */
  }
}
 80062e8:	e002      	b.n	80062f0 <ethernet_link_status_updated+0x44>
    printf("The network cable is not connected \r\n");
 80062ea:	4805      	ldr	r0, [pc, #20]	@ (8006300 <ethernet_link_status_updated+0x54>)
 80062ec:	f010 fe32 	bl	8016f54 <puts>
}
 80062f0:	bf00      	nop
 80062f2:	3720      	adds	r7, #32
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	0801821c 	.word	0x0801821c
 80062fc:	08018220 	.word	0x08018220
 8006300:	08018234 	.word	0x08018234

08006304 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800630c:	4b04      	ldr	r3, [pc, #16]	@ (8006320 <HAL_ETH_RxCpltCallback+0x1c>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4618      	mov	r0, r3
 8006312:	f000 feb7 	bl	8007084 <osSemaphoreRelease>
}
 8006316:	bf00      	nop
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	20005418 	.word	0x20005418

08006324 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800632c:	4b04      	ldr	r3, [pc, #16]	@ (8006340 <HAL_ETH_TxCpltCallback+0x1c>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4618      	mov	r0, r3
 8006332:	f000 fea7 	bl	8007084 <osSemaphoreRelease>
}
 8006336:	bf00      	nop
 8006338:	3708      	adds	r7, #8
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	2000541c 	.word	0x2000541c

08006344 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f7fc fe07 	bl	8002f60 <HAL_ETH_GetDMAError>
 8006352:	4603      	mov	r3, r0
 8006354:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006358:	2b80      	cmp	r3, #128	@ 0x80
 800635a:	d104      	bne.n	8006366 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800635c:	4b04      	ldr	r3, [pc, #16]	@ (8006370 <HAL_ETH_ErrorCallback+0x2c>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4618      	mov	r0, r3
 8006362:	f000 fe8f 	bl	8007084 <osSemaphoreRelease>
  }
}
 8006366:	bf00      	nop
 8006368:	3708      	adds	r7, #8
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	20005418 	.word	0x20005418

08006374 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006374:	b5b0      	push	{r4, r5, r7, lr}
 8006376:	b0ac      	sub	sp, #176	@ 0xb0
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800637c:	2300      	movs	r3, #0
 800637e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
  uint32_t duplex, speed = 0;
 8006382:	2300      	movs	r3, #0
 8006384:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  int32_t PHYLinkState = 0;
 8006388:	2300      	movs	r3, #0
 800638a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  ETH_MACConfigTypeDef MACConf = {0};
 800638e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006392:	2264      	movs	r2, #100	@ 0x64
 8006394:	2100      	movs	r1, #0
 8006396:	4618      	mov	r0, r3
 8006398:	f010 ff06 	bl	80171a8 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800639c:	4b9c      	ldr	r3, [pc, #624]	@ (8006610 <low_level_init+0x29c>)
 800639e:	4a9d      	ldr	r2, [pc, #628]	@ (8006614 <low_level_init+0x2a0>)
 80063a0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80063a2:	2300      	movs	r3, #0
 80063a4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  MACAddr[1] = 0x80;
 80063a8:	2380      	movs	r3, #128	@ 0x80
 80063aa:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  MACAddr[2] = 0xE1;
 80063ae:	23e1      	movs	r3, #225	@ 0xe1
 80063b0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  MACAddr[3] = 0x00;
 80063b4:	2300      	movs	r3, #0
 80063b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  MACAddr[4] = 0x00;
 80063ba:	2300      	movs	r3, #0
 80063bc:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  MACAddr[5] = 0x00;
 80063c0:	2300      	movs	r3, #0
 80063c2:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  heth.Init.MACAddr = &MACAddr[0];
 80063c6:	4a92      	ldr	r2, [pc, #584]	@ (8006610 <low_level_init+0x29c>)
 80063c8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80063cc:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80063ce:	4b90      	ldr	r3, [pc, #576]	@ (8006610 <low_level_init+0x29c>)
 80063d0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80063d4:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80063d6:	4b8e      	ldr	r3, [pc, #568]	@ (8006610 <low_level_init+0x29c>)
 80063d8:	4a8f      	ldr	r2, [pc, #572]	@ (8006618 <low_level_init+0x2a4>)
 80063da:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80063dc:	4b8c      	ldr	r3, [pc, #560]	@ (8006610 <low_level_init+0x29c>)
 80063de:	4a8f      	ldr	r2, [pc, #572]	@ (800661c <low_level_init+0x2a8>)
 80063e0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80063e2:	4b8b      	ldr	r3, [pc, #556]	@ (8006610 <low_level_init+0x29c>)
 80063e4:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80063e8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80063ea:	4889      	ldr	r0, [pc, #548]	@ (8006610 <low_level_init+0x29c>)
 80063ec:	f7fb ff6e 	bl	80022cc <HAL_ETH_Init>
 80063f0:	4603      	mov	r3, r0
 80063f2:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80063f6:	2238      	movs	r2, #56	@ 0x38
 80063f8:	2100      	movs	r1, #0
 80063fa:	4889      	ldr	r0, [pc, #548]	@ (8006620 <low_level_init+0x2ac>)
 80063fc:	f010 fed4 	bl	80171a8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006400:	4b87      	ldr	r3, [pc, #540]	@ (8006620 <low_level_init+0x2ac>)
 8006402:	2221      	movs	r2, #33	@ 0x21
 8006404:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8006406:	4b86      	ldr	r3, [pc, #536]	@ (8006620 <low_level_init+0x2ac>)
 8006408:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800640c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800640e:	4b84      	ldr	r3, [pc, #528]	@ (8006620 <low_level_init+0x2ac>)
 8006410:	2200      	movs	r2, #0
 8006412:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8006414:	4883      	ldr	r0, [pc, #524]	@ (8006624 <low_level_init+0x2b0>)
 8006416:	f004 fa33 	bl	800a880 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2206      	movs	r2, #6
 800641e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006422:	4b7b      	ldr	r3, [pc, #492]	@ (8006610 <low_level_init+0x29c>)
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	781a      	ldrb	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800642e:	4b78      	ldr	r3, [pc, #480]	@ (8006610 <low_level_init+0x29c>)
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	785a      	ldrb	r2, [r3, #1]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800643a:	4b75      	ldr	r3, [pc, #468]	@ (8006610 <low_level_init+0x29c>)
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	789a      	ldrb	r2, [r3, #2]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006446:	4b72      	ldr	r3, [pc, #456]	@ (8006610 <low_level_init+0x29c>)
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	78da      	ldrb	r2, [r3, #3]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006452:	4b6f      	ldr	r3, [pc, #444]	@ (8006610 <low_level_init+0x29c>)
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	791a      	ldrb	r2, [r3, #4]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800645e:	4b6c      	ldr	r3, [pc, #432]	@ (8006610 <low_level_init+0x29c>)
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	795a      	ldrb	r2, [r3, #5]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8006470:	869a      	strh	r2, [r3, #52]	@ 0x34

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006478:	f043 030a 	orr.w	r3, r3, #10
 800647c:	b2da      	uxtb	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 8006484:	2300      	movs	r3, #0
 8006486:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006488:	2300      	movs	r3, #0
 800648a:	633b      	str	r3, [r7, #48]	@ 0x30
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 800648c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006490:	2101      	movs	r1, #1
 8006492:	4618      	mov	r0, r3
 8006494:	f000 fd76 	bl	8006f84 <osSemaphoreCreate>
 8006498:	4603      	mov	r3, r0
 800649a:	4a63      	ldr	r2, [pc, #396]	@ (8006628 <low_level_init+0x2b4>)
 800649c:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 800649e:	2300      	movs	r3, #0
 80064a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80064a2:	2300      	movs	r3, #0
 80064a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 80064a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80064aa:	2101      	movs	r1, #1
 80064ac:	4618      	mov	r0, r3
 80064ae:	f000 fd69 	bl	8006f84 <osSemaphoreCreate>
 80064b2:	4603      	mov	r3, r0
 80064b4:	4a5d      	ldr	r2, [pc, #372]	@ (800662c <low_level_init+0x2b8>)
 80064b6:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 80064b8:	4b5b      	ldr	r3, [pc, #364]	@ (8006628 <low_level_init+0x2b4>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2100      	movs	r1, #0
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 fd92 	bl	8006fe8 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 80064c4:	4b59      	ldr	r3, [pc, #356]	@ (800662c <low_level_init+0x2b8>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2100      	movs	r1, #0
 80064ca:	4618      	mov	r0, r3
 80064cc:	f000 fd8c 	bl	8006fe8 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80064d0:	4b57      	ldr	r3, [pc, #348]	@ (8006630 <low_level_init+0x2bc>)
 80064d2:	f107 0408 	add.w	r4, r7, #8
 80064d6:	461d      	mov	r5, r3
 80064d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80064e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80064e4:	f107 0308 	add.w	r3, r7, #8
 80064e8:	6879      	ldr	r1, [r7, #4]
 80064ea:	4618      	mov	r0, r3
 80064ec:	f000 fc4e 	bl	8006d8c <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80064f0:	4950      	ldr	r1, [pc, #320]	@ (8006634 <low_level_init+0x2c0>)
 80064f2:	4851      	ldr	r0, [pc, #324]	@ (8006638 <low_level_init+0x2c4>)
 80064f4:	f7fb f823 	bl	800153e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 80064f8:	484f      	ldr	r0, [pc, #316]	@ (8006638 <low_level_init+0x2c4>)
 80064fa:	f7fb f852 	bl	80015a2 <LAN8742_Init>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d006      	beq.n	8006512 <low_level_init+0x19e>
  {
    netif_set_link_down(netif);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f004 fe61 	bl	800b1cc <netif_set_link_down>
    netif_set_down(netif);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f004 fdc8 	bl	800b0a0 <netif_set_down>
 8006510:	e07a      	b.n	8006608 <low_level_init+0x294>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8006512:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8006516:	2b00      	cmp	r3, #0
 8006518:	d174      	bne.n	8006604 <low_level_init+0x290>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800651a:	4847      	ldr	r0, [pc, #284]	@ (8006638 <low_level_init+0x2c4>)
 800651c:	f7fb f8e9 	bl	80016f2 <LAN8742_GetLinkState>
 8006520:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8006524:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006528:	2b01      	cmp	r3, #1
 800652a:	dc06      	bgt.n	800653a <low_level_init+0x1c6>
    {
      netif_set_link_down(netif);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f004 fe4d 	bl	800b1cc <netif_set_link_down>
      netif_set_down(netif);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f004 fdb4 	bl	800b0a0 <netif_set_down>
 8006538:	e066      	b.n	8006608 <low_level_init+0x294>
    }
    else
    {
      switch (PHYLinkState)
 800653a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800653e:	3b02      	subs	r3, #2
 8006540:	2b03      	cmp	r3, #3
 8006542:	d837      	bhi.n	80065b4 <low_level_init+0x240>
 8006544:	a201      	add	r2, pc, #4	@ (adr r2, 800654c <low_level_init+0x1d8>)
 8006546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654a:	bf00      	nop
 800654c:	0800655d 	.word	0x0800655d
 8006550:	08006575 	.word	0x08006575
 8006554:	0800658b 	.word	0x0800658b
 8006558:	080065a1 	.word	0x080065a1
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800655c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006560:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 8006564:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006568:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        printf("ETH 100 MBITS FULL DUPLEX\r\n");
 800656c:	4833      	ldr	r0, [pc, #204]	@ (800663c <low_level_init+0x2c8>)
 800656e:	f010 fcf1 	bl	8016f54 <puts>
        break;
 8006572:	e02b      	b.n	80065cc <low_level_init+0x258>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8006574:	2300      	movs	r3, #0
 8006576:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 800657a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800657e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        printf("ETH 100 MBITS HALF DUPLEX\r\n");
 8006582:	482f      	ldr	r0, [pc, #188]	@ (8006640 <low_level_init+0x2cc>)
 8006584:	f010 fce6 	bl	8016f54 <puts>
        break;
 8006588:	e020      	b.n	80065cc <low_level_init+0x258>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800658a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800658e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_10M;
 8006592:	2300      	movs	r3, #0
 8006594:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        printf("ETH 10 MBITS FULL DUPLEX\r\n");
 8006598:	482a      	ldr	r0, [pc, #168]	@ (8006644 <low_level_init+0x2d0>)
 800659a:	f010 fcdb 	bl	8016f54 <puts>
        break;
 800659e:	e015      	b.n	80065cc <low_level_init+0x258>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 80065a0:	2300      	movs	r3, #0
 80065a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_10M;
 80065a6:	2300      	movs	r3, #0
 80065a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        printf("ETH 10 MBITS HALF DUPLEX\r\n");
 80065ac:	4826      	ldr	r0, [pc, #152]	@ (8006648 <low_level_init+0x2d4>)
 80065ae:	f010 fcd1 	bl	8016f54 <puts>
        break;
 80065b2:	e00b      	b.n	80065cc <low_level_init+0x258>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 80065b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80065b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 80065bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80065c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        printf("ETH 100 MBITS FULL DUPLEX\r\n");
 80065c4:	481d      	ldr	r0, [pc, #116]	@ (800663c <low_level_init+0x2c8>)
 80065c6:	f010 fcc5 	bl	8016f54 <puts>
        break;
 80065ca:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80065cc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80065d0:	4619      	mov	r1, r3
 80065d2:	480f      	ldr	r0, [pc, #60]	@ (8006610 <low_level_init+0x29c>)
 80065d4:	f7fc fb6a 	bl	8002cac <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80065d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80065dc:	657b      	str	r3, [r7, #84]	@ 0x54
    MACConf.Speed = speed;
 80065de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80065e2:	653b      	str	r3, [r7, #80]	@ 0x50
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80065e4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80065e8:	4619      	mov	r1, r3
 80065ea:	4809      	ldr	r0, [pc, #36]	@ (8006610 <low_level_init+0x29c>)
 80065ec:	f7fc fc48 	bl	8002e80 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 80065f0:	4807      	ldr	r0, [pc, #28]	@ (8006610 <low_level_init+0x29c>)
 80065f2:	f7fb fee9 	bl	80023c8 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f004 fcca 	bl	800af90 <netif_set_up>
    netif_set_link_up(netif);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f004 fda5 	bl	800b14c <netif_set_link_up>
 8006602:	e001      	b.n	8006608 <low_level_init+0x294>
    }

  }
  else
  {
    Error_Handler();
 8006604:	f7fa fca2 	bl	8000f4c <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8006608:	37b0      	adds	r7, #176	@ 0xb0
 800660a:	46bd      	mov	sp, r7
 800660c:	bdb0      	pop	{r4, r5, r7, pc}
 800660e:	bf00      	nop
 8006610:	20005420 	.word	0x20005420
 8006614:	40028000 	.word	0x40028000
 8006618:	20005378 	.word	0x20005378
 800661c:	200052d8 	.word	0x200052d8
 8006620:	200054d0 	.word	0x200054d0
 8006624:	0801b568 	.word	0x0801b568
 8006628:	20005418 	.word	0x20005418
 800662c:	2000541c 	.word	0x2000541c
 8006630:	080182d4 	.word	0x080182d4
 8006634:	20000010 	.word	0x20000010
 8006638:	20005508 	.word	0x20005508
 800663c:	0801825c 	.word	0x0801825c
 8006640:	08018278 	.word	0x08018278
 8006644:	08018294 	.word	0x08018294
 8006648:	080182b0 	.word	0x080182b0

0800664c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b092      	sub	sp, #72	@ 0x48
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8006656:	2300      	movs	r3, #0
 8006658:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800665a:	2300      	movs	r3, #0
 800665c:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800665e:	2300      	movs	r3, #0
 8006660:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8006664:	f107 030c 	add.w	r3, r7, #12
 8006668:	2230      	movs	r2, #48	@ 0x30
 800666a:	2100      	movs	r1, #0
 800666c:	4618      	mov	r0, r3
 800666e:	f010 fd9b 	bl	80171a8 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8006672:	f107 030c 	add.w	r3, r7, #12
 8006676:	2230      	movs	r2, #48	@ 0x30
 8006678:	2100      	movs	r1, #0
 800667a:	4618      	mov	r0, r3
 800667c:	f010 fd94 	bl	80171a8 <memset>

  for(q = p; q != NULL; q = q->next)
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	643b      	str	r3, [r7, #64]	@ 0x40
 8006684:	e045      	b.n	8006712 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8006686:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006688:	2b03      	cmp	r3, #3
 800668a:	d902      	bls.n	8006692 <low_level_output+0x46>
      return ERR_IF;
 800668c:	f06f 030b 	mvn.w	r3, #11
 8006690:	e06c      	b.n	800676c <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 8006692:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006694:	6859      	ldr	r1, [r3, #4]
 8006696:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006698:	4613      	mov	r3, r2
 800669a:	005b      	lsls	r3, r3, #1
 800669c:	4413      	add	r3, r2
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	3348      	adds	r3, #72	@ 0x48
 80066a2:	443b      	add	r3, r7
 80066a4:	3b3c      	subs	r3, #60	@ 0x3c
 80066a6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80066a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066aa:	895b      	ldrh	r3, [r3, #10]
 80066ac:	4619      	mov	r1, r3
 80066ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066b0:	4613      	mov	r3, r2
 80066b2:	005b      	lsls	r3, r3, #1
 80066b4:	4413      	add	r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	3348      	adds	r3, #72	@ 0x48
 80066ba:	443b      	add	r3, r7
 80066bc:	3b38      	subs	r3, #56	@ 0x38
 80066be:	6019      	str	r1, [r3, #0]

    if(i>0)
 80066c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d011      	beq.n	80066ea <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80066c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066c8:	1e5a      	subs	r2, r3, #1
 80066ca:	f107 000c 	add.w	r0, r7, #12
 80066ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80066d0:	460b      	mov	r3, r1
 80066d2:	005b      	lsls	r3, r3, #1
 80066d4:	440b      	add	r3, r1
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	18c1      	adds	r1, r0, r3
 80066da:	4613      	mov	r3, r2
 80066dc:	005b      	lsls	r3, r3, #1
 80066de:	4413      	add	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	3348      	adds	r3, #72	@ 0x48
 80066e4:	443b      	add	r3, r7
 80066e6:	3b34      	subs	r3, #52	@ 0x34
 80066e8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80066ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d109      	bne.n	8006706 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80066f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066f4:	4613      	mov	r3, r2
 80066f6:	005b      	lsls	r3, r3, #1
 80066f8:	4413      	add	r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	3348      	adds	r3, #72	@ 0x48
 80066fe:	443b      	add	r3, r7
 8006700:	3b34      	subs	r3, #52	@ 0x34
 8006702:	2200      	movs	r2, #0
 8006704:	601a      	str	r2, [r3, #0]
    }

    i++;
 8006706:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006708:	3301      	adds	r3, #1
 800670a:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800670c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	643b      	str	r3, [r7, #64]	@ 0x40
 8006712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1b6      	bne.n	8006686 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	891b      	ldrh	r3, [r3, #8]
 800671c:	461a      	mov	r2, r3
 800671e:	4b15      	ldr	r3, [pc, #84]	@ (8006774 <low_level_output+0x128>)
 8006720:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8006722:	4a14      	ldr	r2, [pc, #80]	@ (8006774 <low_level_output+0x128>)
 8006724:	f107 030c 	add.w	r3, r7, #12
 8006728:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800672a:	4a12      	ldr	r2, [pc, #72]	@ (8006774 <low_level_output+0x128>)
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8006730:	6838      	ldr	r0, [r7, #0]
 8006732:	f005 f9f5 	bl	800bb20 <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 8006736:	490f      	ldr	r1, [pc, #60]	@ (8006774 <low_level_output+0x128>)
 8006738:	480f      	ldr	r0, [pc, #60]	@ (8006778 <low_level_output+0x12c>)
 800673a:	f7fb ff52 	bl	80025e2 <HAL_ETH_Transmit_IT>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d10e      	bne.n	8006762 <low_level_output+0x116>
    while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8006744:	bf00      	nop
 8006746:	4b0d      	ldr	r3, [pc, #52]	@ (800677c <low_level_output+0x130>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f04f 31ff 	mov.w	r1, #4294967295
 800674e:	4618      	mov	r0, r3
 8006750:	f000 fc4a 	bl	8006fe8 <osSemaphoreWait>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1f5      	bne.n	8006746 <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 800675a:	4807      	ldr	r0, [pc, #28]	@ (8006778 <low_level_output+0x12c>)
 800675c:	f7fc f8e0 	bl	8002920 <HAL_ETH_ReleaseTxPacket>
 8006760:	e002      	b.n	8006768 <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 8006762:	6838      	ldr	r0, [r7, #0]
 8006764:	f005 f936 	bl	800b9d4 <pbuf_free>
  }

  return errval;
 8006768:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800676c:	4618      	mov	r0, r3
 800676e:	3748      	adds	r7, #72	@ 0x48
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	200054d0 	.word	0x200054d0
 8006778:	20005420 	.word	0x20005420
 800677c:	2000541c 	.word	0x2000541c

08006780 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006788:	2300      	movs	r3, #0
 800678a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800678c:	4b07      	ldr	r3, [pc, #28]	@ (80067ac <low_level_input+0x2c>)
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d105      	bne.n	80067a0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8006794:	f107 030c 	add.w	r3, r7, #12
 8006798:	4619      	mov	r1, r3
 800679a:	4805      	ldr	r0, [pc, #20]	@ (80067b0 <low_level_input+0x30>)
 800679c:	f7fb ff7d 	bl	800269a <HAL_ETH_ReadData>
  }

  return p;
 80067a0:	68fb      	ldr	r3, [r7, #12]
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3710      	adds	r7, #16
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	200052d4 	.word	0x200052d4
 80067b0:	20005420 	.word	0x20005420

080067b4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80067bc:	2300      	movs	r3, #0
 80067be:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80067c4:	4b0f      	ldr	r3, [pc, #60]	@ (8006804 <ethernetif_input+0x50>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f04f 31ff 	mov.w	r1, #4294967295
 80067cc:	4618      	mov	r0, r3
 80067ce:	f000 fc0b 	bl	8006fe8 <osSemaphoreWait>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1f5      	bne.n	80067c4 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80067d8:	68b8      	ldr	r0, [r7, #8]
 80067da:	f7ff ffd1 	bl	8006780 <low_level_input>
 80067de:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00a      	beq.n	80067fc <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	68b9      	ldr	r1, [r7, #8]
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	4798      	blx	r3
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d002      	beq.n	80067fc <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	f005 f8ec 	bl	800b9d4 <pbuf_free>
          }
        }
      } while(p!=NULL);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1ea      	bne.n	80067d8 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006802:	e7df      	b.n	80067c4 <ethernetif_input+0x10>
 8006804:	20005418 	.word	0x20005418

08006808 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d106      	bne.n	8006824 <ethernetif_init+0x1c>
 8006816:	4b10      	ldr	r3, [pc, #64]	@ (8006858 <ethernetif_init+0x50>)
 8006818:	f44f 72f9 	mov.w	r2, #498	@ 0x1f2
 800681c:	490f      	ldr	r1, [pc, #60]	@ (800685c <ethernetif_init+0x54>)
 800681e:	4810      	ldr	r0, [pc, #64]	@ (8006860 <ethernetif_init+0x58>)
 8006820:	f010 fb30 	bl	8016e84 <iprintf>

#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a0f      	ldr	r2, [pc, #60]	@ (8006864 <ethernetif_init+0x5c>)
 8006828:	631a      	str	r2, [r3, #48]	@ 0x30
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2273      	movs	r2, #115	@ 0x73
 800682e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  netif->name[1] = IFNAME1;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2274      	movs	r2, #116	@ 0x74
 8006836:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a0a      	ldr	r2, [pc, #40]	@ (8006868 <ethernetif_init+0x60>)
 800683e:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a0a      	ldr	r2, [pc, #40]	@ (800686c <ethernetif_init+0x64>)
 8006844:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7ff fd94 	bl	8006374 <low_level_init>

  return ERR_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3708      	adds	r7, #8
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	080182f0 	.word	0x080182f0
 800685c:	0801830c 	.word	0x0801830c
 8006860:	0801831c 	.word	0x0801831c
 8006864:	08018344 	.word	0x08018344
 8006868:	0801453d 	.word	0x0801453d
 800686c:	0800664d 	.word	0x0800664d

08006870 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800687c:	68f9      	ldr	r1, [r7, #12]
 800687e:	4809      	ldr	r0, [pc, #36]	@ (80068a4 <pbuf_free_custom+0x34>)
 8006880:	f004 f8ee 	bl	800aa60 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8006884:	4b08      	ldr	r3, [pc, #32]	@ (80068a8 <pbuf_free_custom+0x38>)
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d107      	bne.n	800689c <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800688c:	4b06      	ldr	r3, [pc, #24]	@ (80068a8 <pbuf_free_custom+0x38>)
 800688e:	2200      	movs	r2, #0
 8006890:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8006892:	4b06      	ldr	r3, [pc, #24]	@ (80068ac <pbuf_free_custom+0x3c>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4618      	mov	r0, r3
 8006898:	f000 fbf4 	bl	8007084 <osSemaphoreRelease>
  }
}
 800689c:	bf00      	nop
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	0801b568 	.word	0x0801b568
 80068a8:	200052d4 	.word	0x200052d4
 80068ac:	20005418 	.word	0x20005418

080068b0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80068b4:	f7fa ffda 	bl	800186c <HAL_GetTick>
 80068b8:	4603      	mov	r3, r0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	bd80      	pop	{r7, pc}
	...

080068c0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b08e      	sub	sp, #56	@ 0x38
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80068cc:	2200      	movs	r2, #0
 80068ce:	601a      	str	r2, [r3, #0]
 80068d0:	605a      	str	r2, [r3, #4]
 80068d2:	609a      	str	r2, [r3, #8]
 80068d4:	60da      	str	r2, [r3, #12]
 80068d6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a59      	ldr	r2, [pc, #356]	@ (8006a44 <HAL_ETH_MspInit+0x184>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	f040 80ac 	bne.w	8006a3c <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80068e4:	2300      	movs	r3, #0
 80068e6:	623b      	str	r3, [r7, #32]
 80068e8:	4b57      	ldr	r3, [pc, #348]	@ (8006a48 <HAL_ETH_MspInit+0x188>)
 80068ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ec:	4a56      	ldr	r2, [pc, #344]	@ (8006a48 <HAL_ETH_MspInit+0x188>)
 80068ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80068f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80068f4:	4b54      	ldr	r3, [pc, #336]	@ (8006a48 <HAL_ETH_MspInit+0x188>)
 80068f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068fc:	623b      	str	r3, [r7, #32]
 80068fe:	6a3b      	ldr	r3, [r7, #32]
 8006900:	2300      	movs	r3, #0
 8006902:	61fb      	str	r3, [r7, #28]
 8006904:	4b50      	ldr	r3, [pc, #320]	@ (8006a48 <HAL_ETH_MspInit+0x188>)
 8006906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006908:	4a4f      	ldr	r2, [pc, #316]	@ (8006a48 <HAL_ETH_MspInit+0x188>)
 800690a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800690e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006910:	4b4d      	ldr	r3, [pc, #308]	@ (8006a48 <HAL_ETH_MspInit+0x188>)
 8006912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006914:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006918:	61fb      	str	r3, [r7, #28]
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	2300      	movs	r3, #0
 800691e:	61bb      	str	r3, [r7, #24]
 8006920:	4b49      	ldr	r3, [pc, #292]	@ (8006a48 <HAL_ETH_MspInit+0x188>)
 8006922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006924:	4a48      	ldr	r2, [pc, #288]	@ (8006a48 <HAL_ETH_MspInit+0x188>)
 8006926:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800692a:	6313      	str	r3, [r2, #48]	@ 0x30
 800692c:	4b46      	ldr	r3, [pc, #280]	@ (8006a48 <HAL_ETH_MspInit+0x188>)
 800692e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006930:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006934:	61bb      	str	r3, [r7, #24]
 8006936:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006938:	2300      	movs	r3, #0
 800693a:	617b      	str	r3, [r7, #20]
 800693c:	4b42      	ldr	r3, [pc, #264]	@ (8006a48 <HAL_ETH_MspInit+0x188>)
 800693e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006940:	4a41      	ldr	r2, [pc, #260]	@ (8006a48 <HAL_ETH_MspInit+0x188>)
 8006942:	f043 0304 	orr.w	r3, r3, #4
 8006946:	6313      	str	r3, [r2, #48]	@ 0x30
 8006948:	4b3f      	ldr	r3, [pc, #252]	@ (8006a48 <HAL_ETH_MspInit+0x188>)
 800694a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800694c:	f003 0304 	and.w	r3, r3, #4
 8006950:	617b      	str	r3, [r7, #20]
 8006952:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006954:	2300      	movs	r3, #0
 8006956:	613b      	str	r3, [r7, #16]
 8006958:	4b3b      	ldr	r3, [pc, #236]	@ (8006a48 <HAL_ETH_MspInit+0x188>)
 800695a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800695c:	4a3a      	ldr	r2, [pc, #232]	@ (8006a48 <HAL_ETH_MspInit+0x188>)
 800695e:	f043 0301 	orr.w	r3, r3, #1
 8006962:	6313      	str	r3, [r2, #48]	@ 0x30
 8006964:	4b38      	ldr	r3, [pc, #224]	@ (8006a48 <HAL_ETH_MspInit+0x188>)
 8006966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006968:	f003 0301 	and.w	r3, r3, #1
 800696c:	613b      	str	r3, [r7, #16]
 800696e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006970:	2300      	movs	r3, #0
 8006972:	60fb      	str	r3, [r7, #12]
 8006974:	4b34      	ldr	r3, [pc, #208]	@ (8006a48 <HAL_ETH_MspInit+0x188>)
 8006976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006978:	4a33      	ldr	r2, [pc, #204]	@ (8006a48 <HAL_ETH_MspInit+0x188>)
 800697a:	f043 0302 	orr.w	r3, r3, #2
 800697e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006980:	4b31      	ldr	r3, [pc, #196]	@ (8006a48 <HAL_ETH_MspInit+0x188>)
 8006982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006984:	f003 0302 	and.w	r3, r3, #2
 8006988:	60fb      	str	r3, [r7, #12]
 800698a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800698c:	2300      	movs	r3, #0
 800698e:	60bb      	str	r3, [r7, #8]
 8006990:	4b2d      	ldr	r3, [pc, #180]	@ (8006a48 <HAL_ETH_MspInit+0x188>)
 8006992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006994:	4a2c      	ldr	r2, [pc, #176]	@ (8006a48 <HAL_ETH_MspInit+0x188>)
 8006996:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800699a:	6313      	str	r3, [r2, #48]	@ 0x30
 800699c:	4b2a      	ldr	r3, [pc, #168]	@ (8006a48 <HAL_ETH_MspInit+0x188>)
 800699e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069a4:	60bb      	str	r3, [r7, #8]
 80069a6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80069a8:	2332      	movs	r3, #50	@ 0x32
 80069aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069ac:	2302      	movs	r3, #2
 80069ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069b0:	2300      	movs	r3, #0
 80069b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069b4:	2303      	movs	r3, #3
 80069b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80069b8:	230b      	movs	r3, #11
 80069ba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80069bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069c0:	4619      	mov	r1, r3
 80069c2:	4822      	ldr	r0, [pc, #136]	@ (8006a4c <HAL_ETH_MspInit+0x18c>)
 80069c4:	f7fc fede 	bl	8003784 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80069c8:	2386      	movs	r3, #134	@ 0x86
 80069ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069cc:	2302      	movs	r3, #2
 80069ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069d0:	2300      	movs	r3, #0
 80069d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069d4:	2303      	movs	r3, #3
 80069d6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80069d8:	230b      	movs	r3, #11
 80069da:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069e0:	4619      	mov	r1, r3
 80069e2:	481b      	ldr	r0, [pc, #108]	@ (8006a50 <HAL_ETH_MspInit+0x190>)
 80069e4:	f7fc fece 	bl	8003784 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80069e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80069ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069ee:	2302      	movs	r3, #2
 80069f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069f2:	2300      	movs	r3, #0
 80069f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069f6:	2303      	movs	r3, #3
 80069f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80069fa:	230b      	movs	r3, #11
 80069fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80069fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a02:	4619      	mov	r1, r3
 8006a04:	4813      	ldr	r0, [pc, #76]	@ (8006a54 <HAL_ETH_MspInit+0x194>)
 8006a06:	f7fc febd 	bl	8003784 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006a0a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8006a0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a10:	2302      	movs	r3, #2
 8006a12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a14:	2300      	movs	r3, #0
 8006a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006a1c:	230b      	movs	r3, #11
 8006a1e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006a20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a24:	4619      	mov	r1, r3
 8006a26:	480c      	ldr	r0, [pc, #48]	@ (8006a58 <HAL_ETH_MspInit+0x198>)
 8006a28:	f7fc feac 	bl	8003784 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	2105      	movs	r1, #5
 8006a30:	203d      	movs	r0, #61	@ 0x3d
 8006a32:	f7fb f803 	bl	8001a3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006a36:	203d      	movs	r0, #61	@ 0x3d
 8006a38:	f7fb f81c 	bl	8001a74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006a3c:	bf00      	nop
 8006a3e:	3738      	adds	r7, #56	@ 0x38
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	40028000 	.word	0x40028000
 8006a48:	40023800 	.word	0x40023800
 8006a4c:	40020800 	.word	0x40020800
 8006a50:	40020000 	.word	0x40020000
 8006a54:	40020400 	.word	0x40020400
 8006a58:	40021800 	.word	0x40021800

08006a5c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006a60:	4802      	ldr	r0, [pc, #8]	@ (8006a6c <ETH_PHY_IO_Init+0x10>)
 8006a62:	f7fc fa27 	bl	8002eb4 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	20005420 	.word	0x20005420

08006a70 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006a70:	b480      	push	{r7}
 8006a72:	af00      	add	r7, sp, #0
  return 0;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	68f9      	ldr	r1, [r7, #12]
 8006a92:	4807      	ldr	r0, [pc, #28]	@ (8006ab0 <ETH_PHY_IO_ReadReg+0x30>)
 8006a94:	f7fc f876 	bl	8002b84 <HAL_ETH_ReadPHYRegister>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d002      	beq.n	8006aa4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8006a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8006aa2:	e000      	b.n	8006aa6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	20005420 	.word	0x20005420

08006ab4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	68f9      	ldr	r1, [r7, #12]
 8006ac6:	4807      	ldr	r0, [pc, #28]	@ (8006ae4 <ETH_PHY_IO_WriteReg+0x30>)
 8006ac8:	f7fc f8a7 	bl	8002c1a <HAL_ETH_WritePHYRegister>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d002      	beq.n	8006ad8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8006ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ad6:	e000      	b.n	8006ada <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	20005420 	.word	0x20005420

08006ae8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006aec:	f7fa febe 	bl	800186c <HAL_GetTick>
 8006af0:	4603      	mov	r3, r0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	bd80      	pop	{r7, pc}
	...

08006af8 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b0a0      	sub	sp, #128	@ 0x80
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006b00:	f107 0308 	add.w	r3, r7, #8
 8006b04:	2264      	movs	r2, #100	@ 0x64
 8006b06:	2100      	movs	r1, #0
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f010 fb4d 	bl	80171a8 <memset>
  int32_t PHYLinkState = 0;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8006b12:	2300      	movs	r3, #0
 8006b14:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006b16:	2300      	movs	r3, #0
 8006b18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006b22:	483a      	ldr	r0, [pc, #232]	@ (8006c0c <ethernet_link_thread+0x114>)
 8006b24:	f7fa fde5 	bl	80016f2 <LAN8742_GetLinkState>
 8006b28:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8006b2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b30:	089b      	lsrs	r3, r3, #2
 8006b32:	f003 0301 	and.w	r3, r3, #1
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00c      	beq.n	8006b56 <ethernet_link_thread+0x5e>
 8006b3c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	dc09      	bgt.n	8006b56 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8006b42:	4833      	ldr	r0, [pc, #204]	@ (8006c10 <ethernet_link_thread+0x118>)
 8006b44:	f7fb fcce 	bl	80024e4 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8006b48:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006b4a:	f004 faa9 	bl	800b0a0 <netif_set_down>
    netif_set_link_down(netif);
 8006b4e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006b50:	f004 fb3c 	bl	800b1cc <netif_set_link_down>
 8006b54:	e055      	b.n	8006c02 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8006b56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b5c:	f003 0304 	and.w	r3, r3, #4
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d14e      	bne.n	8006c02 <ethernet_link_thread+0x10a>
 8006b64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	dd4b      	ble.n	8006c02 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8006b6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b6c:	3b02      	subs	r3, #2
 8006b6e:	2b03      	cmp	r3, #3
 8006b70:	d82a      	bhi.n	8006bc8 <ethernet_link_thread+0xd0>
 8006b72:	a201      	add	r2, pc, #4	@ (adr r2, 8006b78 <ethernet_link_thread+0x80>)
 8006b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b78:	08006b89 	.word	0x08006b89
 8006b7c:	08006b9b 	.word	0x08006b9b
 8006b80:	08006bab 	.word	0x08006bab
 8006b84:	08006bbb 	.word	0x08006bbb
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8006b88:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006b8c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8006b8e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006b92:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006b94:	2301      	movs	r3, #1
 8006b96:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006b98:	e017      	b.n	8006bca <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8006b9e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006ba2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006ba8:	e00f      	b.n	8006bca <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8006baa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006bae:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006bb8:	e007      	b.n	8006bca <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006bc6:	e000      	b.n	8006bca <ethernet_link_thread+0xd2>
    default:
      break;
 8006bc8:	bf00      	nop
    }

    if(linkchanged)
 8006bca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d018      	beq.n	8006c02 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006bd0:	f107 0308 	add.w	r3, r7, #8
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	480e      	ldr	r0, [pc, #56]	@ (8006c10 <ethernet_link_thread+0x118>)
 8006bd8:	f7fc f868 	bl	8002cac <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8006bdc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006bde:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8006be0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006be2:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006be4:	f107 0308 	add.w	r3, r7, #8
 8006be8:	4619      	mov	r1, r3
 8006bea:	4809      	ldr	r0, [pc, #36]	@ (8006c10 <ethernet_link_thread+0x118>)
 8006bec:	f7fc f948 	bl	8002e80 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8006bf0:	4807      	ldr	r0, [pc, #28]	@ (8006c10 <ethernet_link_thread+0x118>)
 8006bf2:	f7fb fbe9 	bl	80023c8 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8006bf6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006bf8:	f004 f9ca 	bl	800af90 <netif_set_up>
      netif_set_link_up(netif);
 8006bfc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006bfe:	f004 faa5 	bl	800b14c <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8006c02:	2064      	movs	r0, #100	@ 0x64
 8006c04:	f000 f90e 	bl	8006e24 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006c08:	e78b      	b.n	8006b22 <ethernet_link_thread+0x2a>
 8006c0a:	bf00      	nop
 8006c0c:	20005508 	.word	0x20005508
 8006c10:	20005420 	.word	0x20005420

08006c14 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b086      	sub	sp, #24
 8006c18:	af02      	add	r7, sp, #8
 8006c1a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006c1c:	4812      	ldr	r0, [pc, #72]	@ (8006c68 <HAL_ETH_RxAllocateCallback+0x54>)
 8006c1e:	f003 feab 	bl	800a978 <memp_malloc_pool>
 8006c22:	60f8      	str	r0, [r7, #12]
  if (p)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d014      	beq.n	8006c54 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f103 0220 	add.w	r2, r3, #32
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	4a0d      	ldr	r2, [pc, #52]	@ (8006c6c <HAL_ETH_RxAllocateCallback+0x58>)
 8006c38:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8006c42:	9201      	str	r2, [sp, #4]
 8006c44:	9300      	str	r3, [sp, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2241      	movs	r2, #65	@ 0x41
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	2000      	movs	r0, #0
 8006c4e:	f004 fd07 	bl	800b660 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8006c52:	e005      	b.n	8006c60 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8006c54:	4b06      	ldr	r3, [pc, #24]	@ (8006c70 <HAL_ETH_RxAllocateCallback+0x5c>)
 8006c56:	2201      	movs	r2, #1
 8006c58:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	601a      	str	r2, [r3, #0]
}
 8006c60:	bf00      	nop
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	0801b568 	.word	0x0801b568
 8006c6c:	08006871 	.word	0x08006871
 8006c70:	200052d4 	.word	0x200052d4

08006c74 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b089      	sub	sp, #36	@ 0x24
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
 8006c80:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	3b20      	subs	r3, #32
 8006c92:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	2200      	movs	r2, #0
 8006c98:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	887a      	ldrh	r2, [r7, #2]
 8006ca4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d103      	bne.n	8006cb6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	69fa      	ldr	r2, [r7, #28]
 8006cb2:	601a      	str	r2, [r3, #0]
 8006cb4:	e003      	b.n	8006cbe <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	69fa      	ldr	r2, [r7, #28]
 8006cbc:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	69fa      	ldr	r2, [r7, #28]
 8006cc2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	61fb      	str	r3, [r7, #28]
 8006cca:	e009      	b.n	8006ce0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	891a      	ldrh	r2, [r3, #8]
 8006cd0:	887b      	ldrh	r3, [r7, #2]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	b29a      	uxth	r2, r3
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	61fb      	str	r3, [r7, #28]
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1f2      	bne.n	8006ccc <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006ce6:	bf00      	nop
 8006ce8:	bf00      	nop
 8006cea:	3724      	adds	r7, #36	@ 0x24
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f004 fe69 	bl	800b9d4 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8006d02:	bf00      	nop
 8006d04:	3708      	adds	r7, #8
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006d0a:	b480      	push	{r7}
 8006d0c:	b085      	sub	sp, #20
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	4603      	mov	r3, r0
 8006d12:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006d14:	2300      	movs	r3, #0
 8006d16:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006d18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d1c:	2b84      	cmp	r3, #132	@ 0x84
 8006d1e:	d005      	beq.n	8006d2c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006d20:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	4413      	add	r3, r2
 8006d28:	3303      	adds	r3, #3
 8006d2a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3714      	adds	r7, #20
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b083      	sub	sp, #12
 8006d3e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d40:	f3ef 8305 	mrs	r3, IPSR
 8006d44:	607b      	str	r3, [r7, #4]
  return(result);
 8006d46:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	bf14      	ite	ne
 8006d4c:	2301      	movne	r3, #1
 8006d4e:	2300      	moveq	r3, #0
 8006d50:	b2db      	uxtb	r3, r3
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006d62:	f001 fc95 	bl	8008690 <vTaskStartScheduler>
  
  return osOK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8006d70:	f7ff ffe3 	bl	8006d3a <inHandlerMode>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d003      	beq.n	8006d82 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8006d7a:	f001 fdaf 	bl	80088dc <xTaskGetTickCountFromISR>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	e002      	b.n	8006d88 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8006d82:	f001 fd9b 	bl	80088bc <xTaskGetTickCount>
 8006d86:	4603      	mov	r3, r0
  }
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d8e:	b089      	sub	sp, #36	@ 0x24
 8006d90:	af04      	add	r7, sp, #16
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d020      	beq.n	8006de0 <osThreadCreate+0x54>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	699b      	ldr	r3, [r3, #24]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d01c      	beq.n	8006de0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	685c      	ldr	r4, [r3, #4]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	691e      	ldr	r6, [r3, #16]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7ff ffa6 	bl	8006d0a <makeFreeRtosPriority>
 8006dbe:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	695b      	ldr	r3, [r3, #20]
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006dc8:	9202      	str	r2, [sp, #8]
 8006dca:	9301      	str	r3, [sp, #4]
 8006dcc:	9100      	str	r1, [sp, #0]
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	4632      	mov	r2, r6
 8006dd2:	4629      	mov	r1, r5
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	f001 fa75 	bl	80082c4 <xTaskCreateStatic>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	60fb      	str	r3, [r7, #12]
 8006dde:	e01c      	b.n	8006e1a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685c      	ldr	r4, [r3, #4]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006dec:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7ff ff88 	bl	8006d0a <makeFreeRtosPriority>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	f107 030c 	add.w	r3, r7, #12
 8006e00:	9301      	str	r3, [sp, #4]
 8006e02:	9200      	str	r2, [sp, #0]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	4632      	mov	r2, r6
 8006e08:	4629      	mov	r1, r5
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	f001 faba 	bl	8008384 <xTaskCreate>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d001      	beq.n	8006e1a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006e16:	2300      	movs	r3, #0
 8006e18:	e000      	b.n	8006e1c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3714      	adds	r7, #20
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006e24 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d001      	beq.n	8006e3a <osDelay+0x16>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	e000      	b.n	8006e3c <osDelay+0x18>
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f001 fbf1 	bl	8008624 <vTaskDelay>
  
  return osOK;
 8006e42:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d007      	beq.n	8006e6c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	4619      	mov	r1, r3
 8006e62:	2001      	movs	r0, #1
 8006e64:	f000 fc47 	bl	80076f6 <xQueueCreateMutexStatic>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	e003      	b.n	8006e74 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006e6c:	2001      	movs	r0, #1
 8006e6e:	f000 fc2a 	bl	80076c6 <xQueueCreateMutex>
 8006e72:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3708      	adds	r7, #8
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006e86:	2300      	movs	r3, #0
 8006e88:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d101      	bne.n	8006e94 <osMutexWait+0x18>
    return osErrorParameter;
 8006e90:	2380      	movs	r3, #128	@ 0x80
 8006e92:	e03a      	b.n	8006f0a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8006e94:	2300      	movs	r3, #0
 8006e96:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e9e:	d103      	bne.n	8006ea8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8006ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ea4:	60fb      	str	r3, [r7, #12]
 8006ea6:	e009      	b.n	8006ebc <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d006      	beq.n	8006ebc <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d101      	bne.n	8006ebc <osMutexWait+0x40>
      ticks = 1;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006ebc:	f7ff ff3d 	bl	8006d3a <inHandlerMode>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d017      	beq.n	8006ef6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006ec6:	f107 0308 	add.w	r3, r7, #8
 8006eca:	461a      	mov	r2, r3
 8006ecc:	2100      	movs	r1, #0
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f001 f84e 	bl	8007f70 <xQueueReceiveFromISR>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d001      	beq.n	8006ede <osMutexWait+0x62>
      return osErrorOS;
 8006eda:	23ff      	movs	r3, #255	@ 0xff
 8006edc:	e015      	b.n	8006f0a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d011      	beq.n	8006f08 <osMutexWait+0x8c>
 8006ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8006f14 <osMutexWait+0x98>)
 8006ee6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006eea:	601a      	str	r2, [r3, #0]
 8006eec:	f3bf 8f4f 	dsb	sy
 8006ef0:	f3bf 8f6f 	isb	sy
 8006ef4:	e008      	b.n	8006f08 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8006ef6:	68f9      	ldr	r1, [r7, #12]
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 ff29 	bl	8007d50 <xQueueSemaphoreTake>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d001      	beq.n	8006f08 <osMutexWait+0x8c>
    return osErrorOS;
 8006f04:	23ff      	movs	r3, #255	@ 0xff
 8006f06:	e000      	b.n	8006f0a <osMutexWait+0x8e>
  }
  
  return osOK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	e000ed04 	.word	0xe000ed04

08006f18 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006f20:	2300      	movs	r3, #0
 8006f22:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006f24:	2300      	movs	r3, #0
 8006f26:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006f28:	f7ff ff07 	bl	8006d3a <inHandlerMode>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d016      	beq.n	8006f60 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006f32:	f107 0308 	add.w	r3, r7, #8
 8006f36:	4619      	mov	r1, r3
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fd97 	bl	8007a6c <xQueueGiveFromISR>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d001      	beq.n	8006f48 <osMutexRelease+0x30>
      return osErrorOS;
 8006f44:	23ff      	movs	r3, #255	@ 0xff
 8006f46:	e017      	b.n	8006f78 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d013      	beq.n	8006f76 <osMutexRelease+0x5e>
 8006f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8006f80 <osMutexRelease+0x68>)
 8006f50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f54:	601a      	str	r2, [r3, #0]
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	f3bf 8f6f 	isb	sy
 8006f5e:	e00a      	b.n	8006f76 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006f60:	2300      	movs	r3, #0
 8006f62:	2200      	movs	r2, #0
 8006f64:	2100      	movs	r1, #0
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fbe0 	bl	800772c <xQueueGenericSend>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d001      	beq.n	8006f76 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8006f72:	23ff      	movs	r3, #255	@ 0xff
 8006f74:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8006f76:	68fb      	ldr	r3, [r7, #12]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	e000ed04 	.word	0xe000ed04

08006f84 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af02      	add	r7, sp, #8
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00f      	beq.n	8006fb6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d10a      	bne.n	8006fb2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	2203      	movs	r2, #3
 8006fa2:	9200      	str	r2, [sp, #0]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	2001      	movs	r0, #1
 8006faa:	f000 fa9b 	bl	80074e4 <xQueueGenericCreateStatic>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	e016      	b.n	8006fe0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	e014      	b.n	8006fe0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d110      	bne.n	8006fde <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006fbc:	2203      	movs	r2, #3
 8006fbe:	2100      	movs	r1, #0
 8006fc0:	2001      	movs	r0, #1
 8006fc2:	f000 fb0c 	bl	80075de <xQueueGenericCreate>
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d005      	beq.n	8006fda <osSemaphoreCreate+0x56>
 8006fce:	2300      	movs	r3, #0
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f000 fba9 	bl	800772c <xQueueGenericSend>
      return sema;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	e000      	b.n	8006fe0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006fde:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d101      	bne.n	8007000 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006ffc:	2380      	movs	r3, #128	@ 0x80
 8006ffe:	e03a      	b.n	8007076 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007000:	2300      	movs	r3, #0
 8007002:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700a:	d103      	bne.n	8007014 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800700c:	f04f 33ff 	mov.w	r3, #4294967295
 8007010:	60fb      	str	r3, [r7, #12]
 8007012:	e009      	b.n	8007028 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d006      	beq.n	8007028 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d101      	bne.n	8007028 <osSemaphoreWait+0x40>
      ticks = 1;
 8007024:	2301      	movs	r3, #1
 8007026:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007028:	f7ff fe87 	bl	8006d3a <inHandlerMode>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d017      	beq.n	8007062 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007032:	f107 0308 	add.w	r3, r7, #8
 8007036:	461a      	mov	r2, r3
 8007038:	2100      	movs	r1, #0
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 ff98 	bl	8007f70 <xQueueReceiveFromISR>
 8007040:	4603      	mov	r3, r0
 8007042:	2b01      	cmp	r3, #1
 8007044:	d001      	beq.n	800704a <osSemaphoreWait+0x62>
      return osErrorOS;
 8007046:	23ff      	movs	r3, #255	@ 0xff
 8007048:	e015      	b.n	8007076 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d011      	beq.n	8007074 <osSemaphoreWait+0x8c>
 8007050:	4b0b      	ldr	r3, [pc, #44]	@ (8007080 <osSemaphoreWait+0x98>)
 8007052:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007056:	601a      	str	r2, [r3, #0]
 8007058:	f3bf 8f4f 	dsb	sy
 800705c:	f3bf 8f6f 	isb	sy
 8007060:	e008      	b.n	8007074 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8007062:	68f9      	ldr	r1, [r7, #12]
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fe73 	bl	8007d50 <xQueueSemaphoreTake>
 800706a:	4603      	mov	r3, r0
 800706c:	2b01      	cmp	r3, #1
 800706e:	d001      	beq.n	8007074 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007070:	23ff      	movs	r3, #255	@ 0xff
 8007072:	e000      	b.n	8007076 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	e000ed04 	.word	0xe000ed04

08007084 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800708c:	2300      	movs	r3, #0
 800708e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007090:	2300      	movs	r3, #0
 8007092:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007094:	f7ff fe51 	bl	8006d3a <inHandlerMode>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d016      	beq.n	80070cc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800709e:	f107 0308 	add.w	r3, r7, #8
 80070a2:	4619      	mov	r1, r3
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 fce1 	bl	8007a6c <xQueueGiveFromISR>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d001      	beq.n	80070b4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80070b0:	23ff      	movs	r3, #255	@ 0xff
 80070b2:	e017      	b.n	80070e4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d013      	beq.n	80070e2 <osSemaphoreRelease+0x5e>
 80070ba:	4b0c      	ldr	r3, [pc, #48]	@ (80070ec <osSemaphoreRelease+0x68>)
 80070bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070c0:	601a      	str	r2, [r3, #0]
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	f3bf 8f6f 	isb	sy
 80070ca:	e00a      	b.n	80070e2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80070cc:	2300      	movs	r3, #0
 80070ce:	2200      	movs	r2, #0
 80070d0:	2100      	movs	r1, #0
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fb2a 	bl	800772c <xQueueGenericSend>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d001      	beq.n	80070e2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80070de:	23ff      	movs	r3, #255	@ 0xff
 80070e0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80070e2:	68fb      	ldr	r3, [r7, #12]
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	e000ed04 	.word	0xe000ed04

080070f0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80070f0:	b590      	push	{r4, r7, lr}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af02      	add	r7, sp, #8
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d011      	beq.n	8007126 <osMessageCreate+0x36>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00d      	beq.n	8007126 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6818      	ldr	r0, [r3, #0]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6859      	ldr	r1, [r3, #4]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	689a      	ldr	r2, [r3, #8]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	2400      	movs	r4, #0
 800711c:	9400      	str	r4, [sp, #0]
 800711e:	f000 f9e1 	bl	80074e4 <xQueueGenericCreateStatic>
 8007122:	4603      	mov	r3, r0
 8007124:	e008      	b.n	8007138 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6818      	ldr	r0, [r3, #0]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	4619      	mov	r1, r3
 8007132:	f000 fa54 	bl	80075de <xQueueGenericCreate>
 8007136:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007138:	4618      	mov	r0, r3
 800713a:	370c      	adds	r7, #12
 800713c:	46bd      	mov	sp, r7
 800713e:	bd90      	pop	{r4, r7, pc}

08007140 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800714c:	2300      	movs	r3, #0
 800714e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d101      	bne.n	800715e <osMessagePut+0x1e>
    ticks = 1;
 800715a:	2301      	movs	r3, #1
 800715c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800715e:	f7ff fdec 	bl	8006d3a <inHandlerMode>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d018      	beq.n	800719a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007168:	f107 0210 	add.w	r2, r7, #16
 800716c:	f107 0108 	add.w	r1, r7, #8
 8007170:	2300      	movs	r3, #0
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	f000 fbdc 	bl	8007930 <xQueueGenericSendFromISR>
 8007178:	4603      	mov	r3, r0
 800717a:	2b01      	cmp	r3, #1
 800717c:	d001      	beq.n	8007182 <osMessagePut+0x42>
      return osErrorOS;
 800717e:	23ff      	movs	r3, #255	@ 0xff
 8007180:	e018      	b.n	80071b4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d014      	beq.n	80071b2 <osMessagePut+0x72>
 8007188:	4b0c      	ldr	r3, [pc, #48]	@ (80071bc <osMessagePut+0x7c>)
 800718a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800718e:	601a      	str	r2, [r3, #0]
 8007190:	f3bf 8f4f 	dsb	sy
 8007194:	f3bf 8f6f 	isb	sy
 8007198:	e00b      	b.n	80071b2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800719a:	f107 0108 	add.w	r1, r7, #8
 800719e:	2300      	movs	r3, #0
 80071a0:	697a      	ldr	r2, [r7, #20]
 80071a2:	68f8      	ldr	r0, [r7, #12]
 80071a4:	f000 fac2 	bl	800772c <xQueueGenericSend>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d001      	beq.n	80071b2 <osMessagePut+0x72>
      return osErrorOS;
 80071ae:	23ff      	movs	r3, #255	@ 0xff
 80071b0:	e000      	b.n	80071b4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3718      	adds	r7, #24
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	e000ed04 	.word	0xe000ed04

080071c0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80071c0:	b590      	push	{r4, r7, lr}
 80071c2:	b08b      	sub	sp, #44	@ 0x2c
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80071d0:	2300      	movs	r3, #0
 80071d2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10a      	bne.n	80071f0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80071da:	2380      	movs	r3, #128	@ 0x80
 80071dc:	617b      	str	r3, [r7, #20]
    return event;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	461c      	mov	r4, r3
 80071e2:	f107 0314 	add.w	r3, r7, #20
 80071e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80071ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80071ee:	e054      	b.n	800729a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80071f0:	2300      	movs	r3, #0
 80071f2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80071f4:	2300      	movs	r3, #0
 80071f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071fe:	d103      	bne.n	8007208 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007200:	f04f 33ff 	mov.w	r3, #4294967295
 8007204:	627b      	str	r3, [r7, #36]	@ 0x24
 8007206:	e009      	b.n	800721c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d006      	beq.n	800721c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8007212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007214:	2b00      	cmp	r3, #0
 8007216:	d101      	bne.n	800721c <osMessageGet+0x5c>
      ticks = 1;
 8007218:	2301      	movs	r3, #1
 800721a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800721c:	f7ff fd8d 	bl	8006d3a <inHandlerMode>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d01c      	beq.n	8007260 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007226:	f107 0220 	add.w	r2, r7, #32
 800722a:	f107 0314 	add.w	r3, r7, #20
 800722e:	3304      	adds	r3, #4
 8007230:	4619      	mov	r1, r3
 8007232:	68b8      	ldr	r0, [r7, #8]
 8007234:	f000 fe9c 	bl	8007f70 <xQueueReceiveFromISR>
 8007238:	4603      	mov	r3, r0
 800723a:	2b01      	cmp	r3, #1
 800723c:	d102      	bne.n	8007244 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800723e:	2310      	movs	r3, #16
 8007240:	617b      	str	r3, [r7, #20]
 8007242:	e001      	b.n	8007248 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8007244:	2300      	movs	r3, #0
 8007246:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007248:	6a3b      	ldr	r3, [r7, #32]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d01d      	beq.n	800728a <osMessageGet+0xca>
 800724e:	4b15      	ldr	r3, [pc, #84]	@ (80072a4 <osMessageGet+0xe4>)
 8007250:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007254:	601a      	str	r2, [r3, #0]
 8007256:	f3bf 8f4f 	dsb	sy
 800725a:	f3bf 8f6f 	isb	sy
 800725e:	e014      	b.n	800728a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007260:	f107 0314 	add.w	r3, r7, #20
 8007264:	3304      	adds	r3, #4
 8007266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007268:	4619      	mov	r1, r3
 800726a:	68b8      	ldr	r0, [r7, #8]
 800726c:	f000 fc8e 	bl	8007b8c <xQueueReceive>
 8007270:	4603      	mov	r3, r0
 8007272:	2b01      	cmp	r3, #1
 8007274:	d102      	bne.n	800727c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8007276:	2310      	movs	r3, #16
 8007278:	617b      	str	r3, [r7, #20]
 800727a:	e006      	b.n	800728a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800727c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727e:	2b00      	cmp	r3, #0
 8007280:	d101      	bne.n	8007286 <osMessageGet+0xc6>
 8007282:	2300      	movs	r3, #0
 8007284:	e000      	b.n	8007288 <osMessageGet+0xc8>
 8007286:	2340      	movs	r3, #64	@ 0x40
 8007288:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	461c      	mov	r4, r3
 800728e:	f107 0314 	add.w	r3, r7, #20
 8007292:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007296:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	372c      	adds	r7, #44	@ 0x2c
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd90      	pop	{r4, r7, pc}
 80072a2:	bf00      	nop
 80072a4:	e000ed04 	.word	0xe000ed04

080072a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f103 0208 	add.w	r2, r3, #8
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f04f 32ff 	mov.w	r2, #4294967295
 80072c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f103 0208 	add.w	r2, r3, #8
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f103 0208 	add.w	r2, r3, #8
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80072dc:	bf00      	nop
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80072f6:	bf00      	nop
 80072f8:	370c      	adds	r7, #12
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007302:	b480      	push	{r7}
 8007304:	b085      	sub	sp, #20
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
 800730a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	68fa      	ldr	r2, [r7, #12]
 8007316:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	689a      	ldr	r2, [r3, #8]
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	683a      	ldr	r2, [r7, #0]
 8007326:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	683a      	ldr	r2, [r7, #0]
 800732c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	1c5a      	adds	r2, r3, #1
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	601a      	str	r2, [r3, #0]
}
 800733e:	bf00      	nop
 8007340:	3714      	adds	r7, #20
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr

0800734a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800734a:	b480      	push	{r7}
 800734c:	b085      	sub	sp, #20
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
 8007352:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007360:	d103      	bne.n	800736a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	60fb      	str	r3, [r7, #12]
 8007368:	e00c      	b.n	8007384 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	3308      	adds	r3, #8
 800736e:	60fb      	str	r3, [r7, #12]
 8007370:	e002      	b.n	8007378 <vListInsert+0x2e>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	60fb      	str	r3, [r7, #12]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68ba      	ldr	r2, [r7, #8]
 8007380:	429a      	cmp	r2, r3
 8007382:	d2f6      	bcs.n	8007372 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	685a      	ldr	r2, [r3, #4]
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	683a      	ldr	r2, [r7, #0]
 8007392:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	683a      	ldr	r2, [r7, #0]
 800739e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	1c5a      	adds	r2, r3, #1
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	601a      	str	r2, [r3, #0]
}
 80073b0:	bf00      	nop
 80073b2:	3714      	adds	r7, #20
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80073bc:	b480      	push	{r7}
 80073be:	b085      	sub	sp, #20
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	6892      	ldr	r2, [r2, #8]
 80073d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	6852      	ldr	r2, [r2, #4]
 80073dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d103      	bne.n	80073f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	689a      	ldr	r2, [r3, #8]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	1e5a      	subs	r2, r3, #1
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
}
 8007404:	4618      	mov	r0, r3
 8007406:	3714      	adds	r7, #20
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d10b      	bne.n	800743c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007428:	f383 8811 	msr	BASEPRI, r3
 800742c:	f3bf 8f6f 	isb	sy
 8007430:	f3bf 8f4f 	dsb	sy
 8007434:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007436:	bf00      	nop
 8007438:	bf00      	nop
 800743a:	e7fd      	b.n	8007438 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800743c:	f002 f8c4 	bl	80095c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007448:	68f9      	ldr	r1, [r7, #12]
 800744a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800744c:	fb01 f303 	mul.w	r3, r1, r3
 8007450:	441a      	add	r2, r3
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800746c:	3b01      	subs	r3, #1
 800746e:	68f9      	ldr	r1, [r7, #12]
 8007470:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007472:	fb01 f303 	mul.w	r3, r1, r3
 8007476:	441a      	add	r2, r3
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	22ff      	movs	r2, #255	@ 0xff
 8007480:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	22ff      	movs	r2, #255	@ 0xff
 8007488:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d114      	bne.n	80074bc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d01a      	beq.n	80074d0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	3310      	adds	r3, #16
 800749e:	4618      	mov	r0, r3
 80074a0:	f001 fb72 	bl	8008b88 <xTaskRemoveFromEventList>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d012      	beq.n	80074d0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80074aa:	4b0d      	ldr	r3, [pc, #52]	@ (80074e0 <xQueueGenericReset+0xd0>)
 80074ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074b0:	601a      	str	r2, [r3, #0]
 80074b2:	f3bf 8f4f 	dsb	sy
 80074b6:	f3bf 8f6f 	isb	sy
 80074ba:	e009      	b.n	80074d0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	3310      	adds	r3, #16
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7ff fef1 	bl	80072a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	3324      	adds	r3, #36	@ 0x24
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7ff feec 	bl	80072a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80074d0:	f002 f8ac 	bl	800962c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80074d4:	2301      	movs	r3, #1
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	e000ed04 	.word	0xe000ed04

080074e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b08e      	sub	sp, #56	@ 0x38
 80074e8:	af02      	add	r7, sp, #8
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
 80074f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d10b      	bne.n	8007510 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80074f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074fc:	f383 8811 	msr	BASEPRI, r3
 8007500:	f3bf 8f6f 	isb	sy
 8007504:	f3bf 8f4f 	dsb	sy
 8007508:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800750a:	bf00      	nop
 800750c:	bf00      	nop
 800750e:	e7fd      	b.n	800750c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10b      	bne.n	800752e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800751a:	f383 8811 	msr	BASEPRI, r3
 800751e:	f3bf 8f6f 	isb	sy
 8007522:	f3bf 8f4f 	dsb	sy
 8007526:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007528:	bf00      	nop
 800752a:	bf00      	nop
 800752c:	e7fd      	b.n	800752a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d002      	beq.n	800753a <xQueueGenericCreateStatic+0x56>
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d001      	beq.n	800753e <xQueueGenericCreateStatic+0x5a>
 800753a:	2301      	movs	r3, #1
 800753c:	e000      	b.n	8007540 <xQueueGenericCreateStatic+0x5c>
 800753e:	2300      	movs	r3, #0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d10b      	bne.n	800755c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007548:	f383 8811 	msr	BASEPRI, r3
 800754c:	f3bf 8f6f 	isb	sy
 8007550:	f3bf 8f4f 	dsb	sy
 8007554:	623b      	str	r3, [r7, #32]
}
 8007556:	bf00      	nop
 8007558:	bf00      	nop
 800755a:	e7fd      	b.n	8007558 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d102      	bne.n	8007568 <xQueueGenericCreateStatic+0x84>
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d101      	bne.n	800756c <xQueueGenericCreateStatic+0x88>
 8007568:	2301      	movs	r3, #1
 800756a:	e000      	b.n	800756e <xQueueGenericCreateStatic+0x8a>
 800756c:	2300      	movs	r3, #0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10b      	bne.n	800758a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007576:	f383 8811 	msr	BASEPRI, r3
 800757a:	f3bf 8f6f 	isb	sy
 800757e:	f3bf 8f4f 	dsb	sy
 8007582:	61fb      	str	r3, [r7, #28]
}
 8007584:	bf00      	nop
 8007586:	bf00      	nop
 8007588:	e7fd      	b.n	8007586 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800758a:	2348      	movs	r3, #72	@ 0x48
 800758c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	2b48      	cmp	r3, #72	@ 0x48
 8007592:	d00b      	beq.n	80075ac <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007598:	f383 8811 	msr	BASEPRI, r3
 800759c:	f3bf 8f6f 	isb	sy
 80075a0:	f3bf 8f4f 	dsb	sy
 80075a4:	61bb      	str	r3, [r7, #24]
}
 80075a6:	bf00      	nop
 80075a8:	bf00      	nop
 80075aa:	e7fd      	b.n	80075a8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80075ac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80075b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00d      	beq.n	80075d4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80075b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80075c0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80075c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075c6:	9300      	str	r3, [sp, #0]
 80075c8:	4613      	mov	r3, r2
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	68b9      	ldr	r1, [r7, #8]
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f000 f840 	bl	8007654 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80075d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3730      	adds	r7, #48	@ 0x30
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b08a      	sub	sp, #40	@ 0x28
 80075e2:	af02      	add	r7, sp, #8
 80075e4:	60f8      	str	r0, [r7, #12]
 80075e6:	60b9      	str	r1, [r7, #8]
 80075e8:	4613      	mov	r3, r2
 80075ea:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d10b      	bne.n	800760a <xQueueGenericCreate+0x2c>
	__asm volatile
 80075f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f6:	f383 8811 	msr	BASEPRI, r3
 80075fa:	f3bf 8f6f 	isb	sy
 80075fe:	f3bf 8f4f 	dsb	sy
 8007602:	613b      	str	r3, [r7, #16]
}
 8007604:	bf00      	nop
 8007606:	bf00      	nop
 8007608:	e7fd      	b.n	8007606 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	68ba      	ldr	r2, [r7, #8]
 800760e:	fb02 f303 	mul.w	r3, r2, r3
 8007612:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	3348      	adds	r3, #72	@ 0x48
 8007618:	4618      	mov	r0, r3
 800761a:	f002 f8f7 	bl	800980c <pvPortMalloc>
 800761e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d011      	beq.n	800764a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	3348      	adds	r3, #72	@ 0x48
 800762e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	2200      	movs	r2, #0
 8007634:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007638:	79fa      	ldrb	r2, [r7, #7]
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	9300      	str	r3, [sp, #0]
 800763e:	4613      	mov	r3, r2
 8007640:	697a      	ldr	r2, [r7, #20]
 8007642:	68b9      	ldr	r1, [r7, #8]
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	f000 f805 	bl	8007654 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800764a:	69bb      	ldr	r3, [r7, #24]
	}
 800764c:	4618      	mov	r0, r3
 800764e:	3720      	adds	r7, #32
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]
 8007660:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d103      	bne.n	8007670 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	69ba      	ldr	r2, [r7, #24]
 800766c:	601a      	str	r2, [r3, #0]
 800766e:	e002      	b.n	8007676 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	68ba      	ldr	r2, [r7, #8]
 8007680:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007682:	2101      	movs	r1, #1
 8007684:	69b8      	ldr	r0, [r7, #24]
 8007686:	f7ff fec3 	bl	8007410 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800768a:	bf00      	nop
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007692:	b580      	push	{r7, lr}
 8007694:	b082      	sub	sp, #8
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00e      	beq.n	80076be <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80076b2:	2300      	movs	r3, #0
 80076b4:	2200      	movs	r2, #0
 80076b6:	2100      	movs	r1, #0
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 f837 	bl	800772c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80076be:	bf00      	nop
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b086      	sub	sp, #24
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	4603      	mov	r3, r0
 80076ce:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80076d0:	2301      	movs	r3, #1
 80076d2:	617b      	str	r3, [r7, #20]
 80076d4:	2300      	movs	r3, #0
 80076d6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80076d8:	79fb      	ldrb	r3, [r7, #7]
 80076da:	461a      	mov	r2, r3
 80076dc:	6939      	ldr	r1, [r7, #16]
 80076de:	6978      	ldr	r0, [r7, #20]
 80076e0:	f7ff ff7d 	bl	80075de <xQueueGenericCreate>
 80076e4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80076e6:	68f8      	ldr	r0, [r7, #12]
 80076e8:	f7ff ffd3 	bl	8007692 <prvInitialiseMutex>

		return xNewQueue;
 80076ec:	68fb      	ldr	r3, [r7, #12]
	}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3718      	adds	r7, #24
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b088      	sub	sp, #32
 80076fa:	af02      	add	r7, sp, #8
 80076fc:	4603      	mov	r3, r0
 80076fe:	6039      	str	r1, [r7, #0]
 8007700:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007702:	2301      	movs	r3, #1
 8007704:	617b      	str	r3, [r7, #20]
 8007706:	2300      	movs	r3, #0
 8007708:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800770a:	79fb      	ldrb	r3, [r7, #7]
 800770c:	9300      	str	r3, [sp, #0]
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	2200      	movs	r2, #0
 8007712:	6939      	ldr	r1, [r7, #16]
 8007714:	6978      	ldr	r0, [r7, #20]
 8007716:	f7ff fee5 	bl	80074e4 <xQueueGenericCreateStatic>
 800771a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f7ff ffb8 	bl	8007692 <prvInitialiseMutex>

		return xNewQueue;
 8007722:	68fb      	ldr	r3, [r7, #12]
	}
 8007724:	4618      	mov	r0, r3
 8007726:	3718      	adds	r7, #24
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b08e      	sub	sp, #56	@ 0x38
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
 8007738:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800773a:	2300      	movs	r3, #0
 800773c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007744:	2b00      	cmp	r3, #0
 8007746:	d10b      	bne.n	8007760 <xQueueGenericSend+0x34>
	__asm volatile
 8007748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800774c:	f383 8811 	msr	BASEPRI, r3
 8007750:	f3bf 8f6f 	isb	sy
 8007754:	f3bf 8f4f 	dsb	sy
 8007758:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800775a:	bf00      	nop
 800775c:	bf00      	nop
 800775e:	e7fd      	b.n	800775c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d103      	bne.n	800776e <xQueueGenericSend+0x42>
 8007766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800776a:	2b00      	cmp	r3, #0
 800776c:	d101      	bne.n	8007772 <xQueueGenericSend+0x46>
 800776e:	2301      	movs	r3, #1
 8007770:	e000      	b.n	8007774 <xQueueGenericSend+0x48>
 8007772:	2300      	movs	r3, #0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d10b      	bne.n	8007790 <xQueueGenericSend+0x64>
	__asm volatile
 8007778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800777c:	f383 8811 	msr	BASEPRI, r3
 8007780:	f3bf 8f6f 	isb	sy
 8007784:	f3bf 8f4f 	dsb	sy
 8007788:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800778a:	bf00      	nop
 800778c:	bf00      	nop
 800778e:	e7fd      	b.n	800778c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	2b02      	cmp	r3, #2
 8007794:	d103      	bne.n	800779e <xQueueGenericSend+0x72>
 8007796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800779a:	2b01      	cmp	r3, #1
 800779c:	d101      	bne.n	80077a2 <xQueueGenericSend+0x76>
 800779e:	2301      	movs	r3, #1
 80077a0:	e000      	b.n	80077a4 <xQueueGenericSend+0x78>
 80077a2:	2300      	movs	r3, #0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10b      	bne.n	80077c0 <xQueueGenericSend+0x94>
	__asm volatile
 80077a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ac:	f383 8811 	msr	BASEPRI, r3
 80077b0:	f3bf 8f6f 	isb	sy
 80077b4:	f3bf 8f4f 	dsb	sy
 80077b8:	623b      	str	r3, [r7, #32]
}
 80077ba:	bf00      	nop
 80077bc:	bf00      	nop
 80077be:	e7fd      	b.n	80077bc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077c0:	f001 fba8 	bl	8008f14 <xTaskGetSchedulerState>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d102      	bne.n	80077d0 <xQueueGenericSend+0xa4>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d101      	bne.n	80077d4 <xQueueGenericSend+0xa8>
 80077d0:	2301      	movs	r3, #1
 80077d2:	e000      	b.n	80077d6 <xQueueGenericSend+0xaa>
 80077d4:	2300      	movs	r3, #0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d10b      	bne.n	80077f2 <xQueueGenericSend+0xc6>
	__asm volatile
 80077da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077de:	f383 8811 	msr	BASEPRI, r3
 80077e2:	f3bf 8f6f 	isb	sy
 80077e6:	f3bf 8f4f 	dsb	sy
 80077ea:	61fb      	str	r3, [r7, #28]
}
 80077ec:	bf00      	nop
 80077ee:	bf00      	nop
 80077f0:	e7fd      	b.n	80077ee <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077f2:	f001 fee9 	bl	80095c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80077f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077fe:	429a      	cmp	r2, r3
 8007800:	d302      	bcc.n	8007808 <xQueueGenericSend+0xdc>
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	2b02      	cmp	r3, #2
 8007806:	d129      	bne.n	800785c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007808:	683a      	ldr	r2, [r7, #0]
 800780a:	68b9      	ldr	r1, [r7, #8]
 800780c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800780e:	f000 fc49 	bl	80080a4 <prvCopyDataToQueue>
 8007812:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007818:	2b00      	cmp	r3, #0
 800781a:	d010      	beq.n	800783e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800781c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781e:	3324      	adds	r3, #36	@ 0x24
 8007820:	4618      	mov	r0, r3
 8007822:	f001 f9b1 	bl	8008b88 <xTaskRemoveFromEventList>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d013      	beq.n	8007854 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800782c:	4b3f      	ldr	r3, [pc, #252]	@ (800792c <xQueueGenericSend+0x200>)
 800782e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007832:	601a      	str	r2, [r3, #0]
 8007834:	f3bf 8f4f 	dsb	sy
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	e00a      	b.n	8007854 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800783e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007840:	2b00      	cmp	r3, #0
 8007842:	d007      	beq.n	8007854 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007844:	4b39      	ldr	r3, [pc, #228]	@ (800792c <xQueueGenericSend+0x200>)
 8007846:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800784a:	601a      	str	r2, [r3, #0]
 800784c:	f3bf 8f4f 	dsb	sy
 8007850:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007854:	f001 feea 	bl	800962c <vPortExitCritical>
				return pdPASS;
 8007858:	2301      	movs	r3, #1
 800785a:	e063      	b.n	8007924 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d103      	bne.n	800786a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007862:	f001 fee3 	bl	800962c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007866:	2300      	movs	r3, #0
 8007868:	e05c      	b.n	8007924 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800786a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800786c:	2b00      	cmp	r3, #0
 800786e:	d106      	bne.n	800787e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007870:	f107 0314 	add.w	r3, r7, #20
 8007874:	4618      	mov	r0, r3
 8007876:	f001 f9eb 	bl	8008c50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800787a:	2301      	movs	r3, #1
 800787c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800787e:	f001 fed5 	bl	800962c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007882:	f000 ff6f 	bl	8008764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007886:	f001 fe9f 	bl	80095c8 <vPortEnterCritical>
 800788a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800788c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007890:	b25b      	sxtb	r3, r3
 8007892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007896:	d103      	bne.n	80078a0 <xQueueGenericSend+0x174>
 8007898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789a:	2200      	movs	r2, #0
 800789c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80078a6:	b25b      	sxtb	r3, r3
 80078a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ac:	d103      	bne.n	80078b6 <xQueueGenericSend+0x18a>
 80078ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80078b6:	f001 feb9 	bl	800962c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078ba:	1d3a      	adds	r2, r7, #4
 80078bc:	f107 0314 	add.w	r3, r7, #20
 80078c0:	4611      	mov	r1, r2
 80078c2:	4618      	mov	r0, r3
 80078c4:	f001 f9da 	bl	8008c7c <xTaskCheckForTimeOut>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d124      	bne.n	8007918 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80078ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078d0:	f000 fce0 	bl	8008294 <prvIsQueueFull>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d018      	beq.n	800790c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80078da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078dc:	3310      	adds	r3, #16
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	4611      	mov	r1, r2
 80078e2:	4618      	mov	r0, r3
 80078e4:	f001 f92a 	bl	8008b3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80078e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078ea:	f000 fc6b 	bl	80081c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80078ee:	f000 ff47 	bl	8008780 <xTaskResumeAll>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	f47f af7c 	bne.w	80077f2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80078fa:	4b0c      	ldr	r3, [pc, #48]	@ (800792c <xQueueGenericSend+0x200>)
 80078fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007900:	601a      	str	r2, [r3, #0]
 8007902:	f3bf 8f4f 	dsb	sy
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	e772      	b.n	80077f2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800790c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800790e:	f000 fc59 	bl	80081c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007912:	f000 ff35 	bl	8008780 <xTaskResumeAll>
 8007916:	e76c      	b.n	80077f2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007918:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800791a:	f000 fc53 	bl	80081c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800791e:	f000 ff2f 	bl	8008780 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007922:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007924:	4618      	mov	r0, r3
 8007926:	3738      	adds	r7, #56	@ 0x38
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	e000ed04 	.word	0xe000ed04

08007930 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b090      	sub	sp, #64	@ 0x40
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
 800793c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007944:	2b00      	cmp	r3, #0
 8007946:	d10b      	bne.n	8007960 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800794c:	f383 8811 	msr	BASEPRI, r3
 8007950:	f3bf 8f6f 	isb	sy
 8007954:	f3bf 8f4f 	dsb	sy
 8007958:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800795a:	bf00      	nop
 800795c:	bf00      	nop
 800795e:	e7fd      	b.n	800795c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d103      	bne.n	800796e <xQueueGenericSendFromISR+0x3e>
 8007966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800796a:	2b00      	cmp	r3, #0
 800796c:	d101      	bne.n	8007972 <xQueueGenericSendFromISR+0x42>
 800796e:	2301      	movs	r3, #1
 8007970:	e000      	b.n	8007974 <xQueueGenericSendFromISR+0x44>
 8007972:	2300      	movs	r3, #0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d10b      	bne.n	8007990 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800797c:	f383 8811 	msr	BASEPRI, r3
 8007980:	f3bf 8f6f 	isb	sy
 8007984:	f3bf 8f4f 	dsb	sy
 8007988:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800798a:	bf00      	nop
 800798c:	bf00      	nop
 800798e:	e7fd      	b.n	800798c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	2b02      	cmp	r3, #2
 8007994:	d103      	bne.n	800799e <xQueueGenericSendFromISR+0x6e>
 8007996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800799a:	2b01      	cmp	r3, #1
 800799c:	d101      	bne.n	80079a2 <xQueueGenericSendFromISR+0x72>
 800799e:	2301      	movs	r3, #1
 80079a0:	e000      	b.n	80079a4 <xQueueGenericSendFromISR+0x74>
 80079a2:	2300      	movs	r3, #0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10b      	bne.n	80079c0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80079a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ac:	f383 8811 	msr	BASEPRI, r3
 80079b0:	f3bf 8f6f 	isb	sy
 80079b4:	f3bf 8f4f 	dsb	sy
 80079b8:	623b      	str	r3, [r7, #32]
}
 80079ba:	bf00      	nop
 80079bc:	bf00      	nop
 80079be:	e7fd      	b.n	80079bc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079c0:	f001 fee2 	bl	8009788 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80079c4:	f3ef 8211 	mrs	r2, BASEPRI
 80079c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079cc:	f383 8811 	msr	BASEPRI, r3
 80079d0:	f3bf 8f6f 	isb	sy
 80079d4:	f3bf 8f4f 	dsb	sy
 80079d8:	61fa      	str	r2, [r7, #28]
 80079da:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80079dc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80079de:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80079e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d302      	bcc.n	80079f2 <xQueueGenericSendFromISR+0xc2>
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	d12f      	bne.n	8007a52 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80079f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80079f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a02:	683a      	ldr	r2, [r7, #0]
 8007a04:	68b9      	ldr	r1, [r7, #8]
 8007a06:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007a08:	f000 fb4c 	bl	80080a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007a0c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a14:	d112      	bne.n	8007a3c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d016      	beq.n	8007a4c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a20:	3324      	adds	r3, #36	@ 0x24
 8007a22:	4618      	mov	r0, r3
 8007a24:	f001 f8b0 	bl	8008b88 <xTaskRemoveFromEventList>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00e      	beq.n	8007a4c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00b      	beq.n	8007a4c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	601a      	str	r2, [r3, #0]
 8007a3a:	e007      	b.n	8007a4c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a3c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007a40:	3301      	adds	r3, #1
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	b25a      	sxtb	r2, r3
 8007a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007a50:	e001      	b.n	8007a56 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007a52:	2300      	movs	r3, #0
 8007a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a58:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007a60:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3740      	adds	r7, #64	@ 0x40
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b08e      	sub	sp, #56	@ 0x38
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d10b      	bne.n	8007a98 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8007a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a84:	f383 8811 	msr	BASEPRI, r3
 8007a88:	f3bf 8f6f 	isb	sy
 8007a8c:	f3bf 8f4f 	dsb	sy
 8007a90:	623b      	str	r3, [r7, #32]
}
 8007a92:	bf00      	nop
 8007a94:	bf00      	nop
 8007a96:	e7fd      	b.n	8007a94 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d00b      	beq.n	8007ab8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8007aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa4:	f383 8811 	msr	BASEPRI, r3
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	61fb      	str	r3, [r7, #28]
}
 8007ab2:	bf00      	nop
 8007ab4:	bf00      	nop
 8007ab6:	e7fd      	b.n	8007ab4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d103      	bne.n	8007ac8 <xQueueGiveFromISR+0x5c>
 8007ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d101      	bne.n	8007acc <xQueueGiveFromISR+0x60>
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e000      	b.n	8007ace <xQueueGiveFromISR+0x62>
 8007acc:	2300      	movs	r3, #0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10b      	bne.n	8007aea <xQueueGiveFromISR+0x7e>
	__asm volatile
 8007ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad6:	f383 8811 	msr	BASEPRI, r3
 8007ada:	f3bf 8f6f 	isb	sy
 8007ade:	f3bf 8f4f 	dsb	sy
 8007ae2:	61bb      	str	r3, [r7, #24]
}
 8007ae4:	bf00      	nop
 8007ae6:	bf00      	nop
 8007ae8:	e7fd      	b.n	8007ae6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007aea:	f001 fe4d 	bl	8009788 <vPortValidateInterruptPriority>
	__asm volatile
 8007aee:	f3ef 8211 	mrs	r2, BASEPRI
 8007af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af6:	f383 8811 	msr	BASEPRI, r3
 8007afa:	f3bf 8f6f 	isb	sy
 8007afe:	f3bf 8f4f 	dsb	sy
 8007b02:	617a      	str	r2, [r7, #20]
 8007b04:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007b06:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b0e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d22b      	bcs.n	8007b72 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b26:	1c5a      	adds	r2, r3, #1
 8007b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b2a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007b2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b34:	d112      	bne.n	8007b5c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d016      	beq.n	8007b6c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b40:	3324      	adds	r3, #36	@ 0x24
 8007b42:	4618      	mov	r0, r3
 8007b44:	f001 f820 	bl	8008b88 <xTaskRemoveFromEventList>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00e      	beq.n	8007b6c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00b      	beq.n	8007b6c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	2201      	movs	r2, #1
 8007b58:	601a      	str	r2, [r3, #0]
 8007b5a:	e007      	b.n	8007b6c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b60:	3301      	adds	r3, #1
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	b25a      	sxtb	r2, r3
 8007b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b70:	e001      	b.n	8007b76 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b72:	2300      	movs	r3, #0
 8007b74:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b78:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f383 8811 	msr	BASEPRI, r3
}
 8007b80:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3738      	adds	r7, #56	@ 0x38
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b08c      	sub	sp, #48	@ 0x30
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d10b      	bne.n	8007bbe <xQueueReceive+0x32>
	__asm volatile
 8007ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007baa:	f383 8811 	msr	BASEPRI, r3
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	623b      	str	r3, [r7, #32]
}
 8007bb8:	bf00      	nop
 8007bba:	bf00      	nop
 8007bbc:	e7fd      	b.n	8007bba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d103      	bne.n	8007bcc <xQueueReceive+0x40>
 8007bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d101      	bne.n	8007bd0 <xQueueReceive+0x44>
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e000      	b.n	8007bd2 <xQueueReceive+0x46>
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d10b      	bne.n	8007bee <xQueueReceive+0x62>
	__asm volatile
 8007bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bda:	f383 8811 	msr	BASEPRI, r3
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	f3bf 8f4f 	dsb	sy
 8007be6:	61fb      	str	r3, [r7, #28]
}
 8007be8:	bf00      	nop
 8007bea:	bf00      	nop
 8007bec:	e7fd      	b.n	8007bea <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007bee:	f001 f991 	bl	8008f14 <xTaskGetSchedulerState>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d102      	bne.n	8007bfe <xQueueReceive+0x72>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d101      	bne.n	8007c02 <xQueueReceive+0x76>
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e000      	b.n	8007c04 <xQueueReceive+0x78>
 8007c02:	2300      	movs	r3, #0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d10b      	bne.n	8007c20 <xQueueReceive+0x94>
	__asm volatile
 8007c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c0c:	f383 8811 	msr	BASEPRI, r3
 8007c10:	f3bf 8f6f 	isb	sy
 8007c14:	f3bf 8f4f 	dsb	sy
 8007c18:	61bb      	str	r3, [r7, #24]
}
 8007c1a:	bf00      	nop
 8007c1c:	bf00      	nop
 8007c1e:	e7fd      	b.n	8007c1c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c20:	f001 fcd2 	bl	80095c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c28:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d01f      	beq.n	8007c70 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c30:	68b9      	ldr	r1, [r7, #8]
 8007c32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c34:	f000 faa0 	bl	8008178 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c3a:	1e5a      	subs	r2, r3, #1
 8007c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c3e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c42:	691b      	ldr	r3, [r3, #16]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00f      	beq.n	8007c68 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c4a:	3310      	adds	r3, #16
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f000 ff9b 	bl	8008b88 <xTaskRemoveFromEventList>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d007      	beq.n	8007c68 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c58:	4b3c      	ldr	r3, [pc, #240]	@ (8007d4c <xQueueReceive+0x1c0>)
 8007c5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c5e:	601a      	str	r2, [r3, #0]
 8007c60:	f3bf 8f4f 	dsb	sy
 8007c64:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c68:	f001 fce0 	bl	800962c <vPortExitCritical>
				return pdPASS;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e069      	b.n	8007d44 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d103      	bne.n	8007c7e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c76:	f001 fcd9 	bl	800962c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	e062      	b.n	8007d44 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d106      	bne.n	8007c92 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c84:	f107 0310 	add.w	r3, r7, #16
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f000 ffe1 	bl	8008c50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c92:	f001 fccb 	bl	800962c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c96:	f000 fd65 	bl	8008764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c9a:	f001 fc95 	bl	80095c8 <vPortEnterCritical>
 8007c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ca4:	b25b      	sxtb	r3, r3
 8007ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007caa:	d103      	bne.n	8007cb4 <xQueueReceive+0x128>
 8007cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007cba:	b25b      	sxtb	r3, r3
 8007cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cc0:	d103      	bne.n	8007cca <xQueueReceive+0x13e>
 8007cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007cca:	f001 fcaf 	bl	800962c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007cce:	1d3a      	adds	r2, r7, #4
 8007cd0:	f107 0310 	add.w	r3, r7, #16
 8007cd4:	4611      	mov	r1, r2
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f000 ffd0 	bl	8008c7c <xTaskCheckForTimeOut>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d123      	bne.n	8007d2a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ce2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ce4:	f000 fac0 	bl	8008268 <prvIsQueueEmpty>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d017      	beq.n	8007d1e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf0:	3324      	adds	r3, #36	@ 0x24
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	4611      	mov	r1, r2
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f000 ff20 	bl	8008b3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007cfc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cfe:	f000 fa61 	bl	80081c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007d02:	f000 fd3d 	bl	8008780 <xTaskResumeAll>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d189      	bne.n	8007c20 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8007d4c <xQueueReceive+0x1c0>)
 8007d0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d12:	601a      	str	r2, [r3, #0]
 8007d14:	f3bf 8f4f 	dsb	sy
 8007d18:	f3bf 8f6f 	isb	sy
 8007d1c:	e780      	b.n	8007c20 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007d1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d20:	f000 fa50 	bl	80081c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d24:	f000 fd2c 	bl	8008780 <xTaskResumeAll>
 8007d28:	e77a      	b.n	8007c20 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007d2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d2c:	f000 fa4a 	bl	80081c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d30:	f000 fd26 	bl	8008780 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d36:	f000 fa97 	bl	8008268 <prvIsQueueEmpty>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f43f af6f 	beq.w	8007c20 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007d42:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3730      	adds	r7, #48	@ 0x30
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	e000ed04 	.word	0xe000ed04

08007d50 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b08e      	sub	sp, #56	@ 0x38
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007d62:	2300      	movs	r3, #0
 8007d64:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d10b      	bne.n	8007d84 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d70:	f383 8811 	msr	BASEPRI, r3
 8007d74:	f3bf 8f6f 	isb	sy
 8007d78:	f3bf 8f4f 	dsb	sy
 8007d7c:	623b      	str	r3, [r7, #32]
}
 8007d7e:	bf00      	nop
 8007d80:	bf00      	nop
 8007d82:	e7fd      	b.n	8007d80 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00b      	beq.n	8007da4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d90:	f383 8811 	msr	BASEPRI, r3
 8007d94:	f3bf 8f6f 	isb	sy
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	61fb      	str	r3, [r7, #28]
}
 8007d9e:	bf00      	nop
 8007da0:	bf00      	nop
 8007da2:	e7fd      	b.n	8007da0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007da4:	f001 f8b6 	bl	8008f14 <xTaskGetSchedulerState>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d102      	bne.n	8007db4 <xQueueSemaphoreTake+0x64>
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d101      	bne.n	8007db8 <xQueueSemaphoreTake+0x68>
 8007db4:	2301      	movs	r3, #1
 8007db6:	e000      	b.n	8007dba <xQueueSemaphoreTake+0x6a>
 8007db8:	2300      	movs	r3, #0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d10b      	bne.n	8007dd6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc2:	f383 8811 	msr	BASEPRI, r3
 8007dc6:	f3bf 8f6f 	isb	sy
 8007dca:	f3bf 8f4f 	dsb	sy
 8007dce:	61bb      	str	r3, [r7, #24]
}
 8007dd0:	bf00      	nop
 8007dd2:	bf00      	nop
 8007dd4:	e7fd      	b.n	8007dd2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007dd6:	f001 fbf7 	bl	80095c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dde:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d024      	beq.n	8007e30 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007de8:	1e5a      	subs	r2, r3, #1
 8007dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dec:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d104      	bne.n	8007e00 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007df6:	f001 fa39 	bl	800926c <pvTaskIncrementMutexHeldCount>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dfe:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e02:	691b      	ldr	r3, [r3, #16]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00f      	beq.n	8007e28 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e0a:	3310      	adds	r3, #16
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f000 febb 	bl	8008b88 <xTaskRemoveFromEventList>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d007      	beq.n	8007e28 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e18:	4b54      	ldr	r3, [pc, #336]	@ (8007f6c <xQueueSemaphoreTake+0x21c>)
 8007e1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e1e:	601a      	str	r2, [r3, #0]
 8007e20:	f3bf 8f4f 	dsb	sy
 8007e24:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e28:	f001 fc00 	bl	800962c <vPortExitCritical>
				return pdPASS;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e098      	b.n	8007f62 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d112      	bne.n	8007e5c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d00b      	beq.n	8007e54 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e40:	f383 8811 	msr	BASEPRI, r3
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	617b      	str	r3, [r7, #20]
}
 8007e4e:	bf00      	nop
 8007e50:	bf00      	nop
 8007e52:	e7fd      	b.n	8007e50 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007e54:	f001 fbea 	bl	800962c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	e082      	b.n	8007f62 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d106      	bne.n	8007e70 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e62:	f107 030c 	add.w	r3, r7, #12
 8007e66:	4618      	mov	r0, r3
 8007e68:	f000 fef2 	bl	8008c50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e70:	f001 fbdc 	bl	800962c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e74:	f000 fc76 	bl	8008764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e78:	f001 fba6 	bl	80095c8 <vPortEnterCritical>
 8007e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e7e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e82:	b25b      	sxtb	r3, r3
 8007e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e88:	d103      	bne.n	8007e92 <xQueueSemaphoreTake+0x142>
 8007e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e98:	b25b      	sxtb	r3, r3
 8007e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e9e:	d103      	bne.n	8007ea8 <xQueueSemaphoreTake+0x158>
 8007ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ea8:	f001 fbc0 	bl	800962c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007eac:	463a      	mov	r2, r7
 8007eae:	f107 030c 	add.w	r3, r7, #12
 8007eb2:	4611      	mov	r1, r2
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f000 fee1 	bl	8008c7c <xTaskCheckForTimeOut>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d132      	bne.n	8007f26 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ec0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007ec2:	f000 f9d1 	bl	8008268 <prvIsQueueEmpty>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d026      	beq.n	8007f1a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d109      	bne.n	8007ee8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007ed4:	f001 fb78 	bl	80095c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	4618      	mov	r0, r3
 8007ede:	f001 f837 	bl	8008f50 <xTaskPriorityInherit>
 8007ee2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007ee4:	f001 fba2 	bl	800962c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eea:	3324      	adds	r3, #36	@ 0x24
 8007eec:	683a      	ldr	r2, [r7, #0]
 8007eee:	4611      	mov	r1, r2
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f000 fe23 	bl	8008b3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007ef6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007ef8:	f000 f964 	bl	80081c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007efc:	f000 fc40 	bl	8008780 <xTaskResumeAll>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f47f af67 	bne.w	8007dd6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007f08:	4b18      	ldr	r3, [pc, #96]	@ (8007f6c <xQueueSemaphoreTake+0x21c>)
 8007f0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f0e:	601a      	str	r2, [r3, #0]
 8007f10:	f3bf 8f4f 	dsb	sy
 8007f14:	f3bf 8f6f 	isb	sy
 8007f18:	e75d      	b.n	8007dd6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007f1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007f1c:	f000 f952 	bl	80081c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f20:	f000 fc2e 	bl	8008780 <xTaskResumeAll>
 8007f24:	e757      	b.n	8007dd6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007f26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007f28:	f000 f94c 	bl	80081c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f2c:	f000 fc28 	bl	8008780 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f30:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007f32:	f000 f999 	bl	8008268 <prvIsQueueEmpty>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f43f af4c 	beq.w	8007dd6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00d      	beq.n	8007f60 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007f44:	f001 fb40 	bl	80095c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007f48:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007f4a:	f000 f893 	bl	8008074 <prvGetDisinheritPriorityAfterTimeout>
 8007f4e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f56:	4618      	mov	r0, r3
 8007f58:	f001 f8f8 	bl	800914c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007f5c:	f001 fb66 	bl	800962c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007f60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3738      	adds	r7, #56	@ 0x38
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	e000ed04 	.word	0xe000ed04

08007f70 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b08e      	sub	sp, #56	@ 0x38
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d10b      	bne.n	8007f9e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f8a:	f383 8811 	msr	BASEPRI, r3
 8007f8e:	f3bf 8f6f 	isb	sy
 8007f92:	f3bf 8f4f 	dsb	sy
 8007f96:	623b      	str	r3, [r7, #32]
}
 8007f98:	bf00      	nop
 8007f9a:	bf00      	nop
 8007f9c:	e7fd      	b.n	8007f9a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d103      	bne.n	8007fac <xQueueReceiveFromISR+0x3c>
 8007fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d101      	bne.n	8007fb0 <xQueueReceiveFromISR+0x40>
 8007fac:	2301      	movs	r3, #1
 8007fae:	e000      	b.n	8007fb2 <xQueueReceiveFromISR+0x42>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d10b      	bne.n	8007fce <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fba:	f383 8811 	msr	BASEPRI, r3
 8007fbe:	f3bf 8f6f 	isb	sy
 8007fc2:	f3bf 8f4f 	dsb	sy
 8007fc6:	61fb      	str	r3, [r7, #28]
}
 8007fc8:	bf00      	nop
 8007fca:	bf00      	nop
 8007fcc:	e7fd      	b.n	8007fca <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007fce:	f001 fbdb 	bl	8009788 <vPortValidateInterruptPriority>
	__asm volatile
 8007fd2:	f3ef 8211 	mrs	r2, BASEPRI
 8007fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fda:	f383 8811 	msr	BASEPRI, r3
 8007fde:	f3bf 8f6f 	isb	sy
 8007fe2:	f3bf 8f4f 	dsb	sy
 8007fe6:	61ba      	str	r2, [r7, #24]
 8007fe8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007fea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ff2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d02f      	beq.n	800805a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ffc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008000:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008004:	68b9      	ldr	r1, [r7, #8]
 8008006:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008008:	f000 f8b6 	bl	8008178 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800800c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800800e:	1e5a      	subs	r2, r3, #1
 8008010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008012:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008014:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800801c:	d112      	bne.n	8008044 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800801e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d016      	beq.n	8008054 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008028:	3310      	adds	r3, #16
 800802a:	4618      	mov	r0, r3
 800802c:	f000 fdac 	bl	8008b88 <xTaskRemoveFromEventList>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d00e      	beq.n	8008054 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00b      	beq.n	8008054 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	601a      	str	r2, [r3, #0]
 8008042:	e007      	b.n	8008054 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008044:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008048:	3301      	adds	r3, #1
 800804a:	b2db      	uxtb	r3, r3
 800804c:	b25a      	sxtb	r2, r3
 800804e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008050:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8008054:	2301      	movs	r3, #1
 8008056:	637b      	str	r3, [r7, #52]	@ 0x34
 8008058:	e001      	b.n	800805e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800805a:	2300      	movs	r3, #0
 800805c:	637b      	str	r3, [r7, #52]	@ 0x34
 800805e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008060:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	f383 8811 	msr	BASEPRI, r3
}
 8008068:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800806a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800806c:	4618      	mov	r0, r3
 800806e:	3738      	adds	r7, #56	@ 0x38
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008074:	b480      	push	{r7}
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008080:	2b00      	cmp	r3, #0
 8008082:	d006      	beq.n	8008092 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f1c3 0307 	rsb	r3, r3, #7
 800808e:	60fb      	str	r3, [r7, #12]
 8008090:	e001      	b.n	8008096 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008092:	2300      	movs	r3, #0
 8008094:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008096:	68fb      	ldr	r3, [r7, #12]
	}
 8008098:	4618      	mov	r0, r3
 800809a:	3714      	adds	r7, #20
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b086      	sub	sp, #24
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80080b0:	2300      	movs	r3, #0
 80080b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10d      	bne.n	80080de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d14d      	bne.n	8008166 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 ffb4 	bl	800903c <xTaskPriorityDisinherit>
 80080d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2200      	movs	r2, #0
 80080da:	609a      	str	r2, [r3, #8]
 80080dc:	e043      	b.n	8008166 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d119      	bne.n	8008118 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6858      	ldr	r0, [r3, #4]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ec:	461a      	mov	r2, r3
 80080ee:	68b9      	ldr	r1, [r7, #8]
 80080f0:	f00f f925 	bl	801733e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	685a      	ldr	r2, [r3, #4]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080fc:	441a      	add	r2, r3
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	685a      	ldr	r2, [r3, #4]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	429a      	cmp	r2, r3
 800810c:	d32b      	bcc.n	8008166 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	605a      	str	r2, [r3, #4]
 8008116:	e026      	b.n	8008166 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	68d8      	ldr	r0, [r3, #12]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008120:	461a      	mov	r2, r3
 8008122:	68b9      	ldr	r1, [r7, #8]
 8008124:	f00f f90b 	bl	801733e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	68da      	ldr	r2, [r3, #12]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008130:	425b      	negs	r3, r3
 8008132:	441a      	add	r2, r3
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	68da      	ldr	r2, [r3, #12]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	429a      	cmp	r2, r3
 8008142:	d207      	bcs.n	8008154 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	689a      	ldr	r2, [r3, #8]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800814c:	425b      	negs	r3, r3
 800814e:	441a      	add	r2, r3
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2b02      	cmp	r3, #2
 8008158:	d105      	bne.n	8008166 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d002      	beq.n	8008166 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	3b01      	subs	r3, #1
 8008164:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	1c5a      	adds	r2, r3, #1
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800816e:	697b      	ldr	r3, [r7, #20]
}
 8008170:	4618      	mov	r0, r3
 8008172:	3718      	adds	r7, #24
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008186:	2b00      	cmp	r3, #0
 8008188:	d018      	beq.n	80081bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	68da      	ldr	r2, [r3, #12]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008192:	441a      	add	r2, r3
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	68da      	ldr	r2, [r3, #12]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d303      	bcc.n	80081ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	68d9      	ldr	r1, [r3, #12]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081b4:	461a      	mov	r2, r3
 80081b6:	6838      	ldr	r0, [r7, #0]
 80081b8:	f00f f8c1 	bl	801733e <memcpy>
	}
}
 80081bc:	bf00      	nop
 80081be:	3708      	adds	r7, #8
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80081cc:	f001 f9fc 	bl	80095c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80081d8:	e011      	b.n	80081fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d012      	beq.n	8008208 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	3324      	adds	r3, #36	@ 0x24
 80081e6:	4618      	mov	r0, r3
 80081e8:	f000 fcce 	bl	8008b88 <xTaskRemoveFromEventList>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d001      	beq.n	80081f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80081f2:	f000 fda7 	bl	8008d44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80081f6:	7bfb      	ldrb	r3, [r7, #15]
 80081f8:	3b01      	subs	r3, #1
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80081fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008202:	2b00      	cmp	r3, #0
 8008204:	dce9      	bgt.n	80081da <prvUnlockQueue+0x16>
 8008206:	e000      	b.n	800820a <prvUnlockQueue+0x46>
					break;
 8008208:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	22ff      	movs	r2, #255	@ 0xff
 800820e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008212:	f001 fa0b 	bl	800962c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008216:	f001 f9d7 	bl	80095c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008220:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008222:	e011      	b.n	8008248 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d012      	beq.n	8008252 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	3310      	adds	r3, #16
 8008230:	4618      	mov	r0, r3
 8008232:	f000 fca9 	bl	8008b88 <xTaskRemoveFromEventList>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d001      	beq.n	8008240 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800823c:	f000 fd82 	bl	8008d44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008240:	7bbb      	ldrb	r3, [r7, #14]
 8008242:	3b01      	subs	r3, #1
 8008244:	b2db      	uxtb	r3, r3
 8008246:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008248:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800824c:	2b00      	cmp	r3, #0
 800824e:	dce9      	bgt.n	8008224 <prvUnlockQueue+0x60>
 8008250:	e000      	b.n	8008254 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008252:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	22ff      	movs	r2, #255	@ 0xff
 8008258:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800825c:	f001 f9e6 	bl	800962c <vPortExitCritical>
}
 8008260:	bf00      	nop
 8008262:	3710      	adds	r7, #16
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008270:	f001 f9aa 	bl	80095c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008278:	2b00      	cmp	r3, #0
 800827a:	d102      	bne.n	8008282 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800827c:	2301      	movs	r3, #1
 800827e:	60fb      	str	r3, [r7, #12]
 8008280:	e001      	b.n	8008286 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008282:	2300      	movs	r3, #0
 8008284:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008286:	f001 f9d1 	bl	800962c <vPortExitCritical>

	return xReturn;
 800828a:	68fb      	ldr	r3, [r7, #12]
}
 800828c:	4618      	mov	r0, r3
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800829c:	f001 f994 	bl	80095c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d102      	bne.n	80082b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80082ac:	2301      	movs	r3, #1
 80082ae:	60fb      	str	r3, [r7, #12]
 80082b0:	e001      	b.n	80082b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80082b2:	2300      	movs	r3, #0
 80082b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80082b6:	f001 f9b9 	bl	800962c <vPortExitCritical>

	return xReturn;
 80082ba:	68fb      	ldr	r3, [r7, #12]
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3710      	adds	r7, #16
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b08e      	sub	sp, #56	@ 0x38
 80082c8:	af04      	add	r7, sp, #16
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	607a      	str	r2, [r7, #4]
 80082d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80082d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d10b      	bne.n	80082f0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80082d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082dc:	f383 8811 	msr	BASEPRI, r3
 80082e0:	f3bf 8f6f 	isb	sy
 80082e4:	f3bf 8f4f 	dsb	sy
 80082e8:	623b      	str	r3, [r7, #32]
}
 80082ea:	bf00      	nop
 80082ec:	bf00      	nop
 80082ee:	e7fd      	b.n	80082ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80082f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d10b      	bne.n	800830e <xTaskCreateStatic+0x4a>
	__asm volatile
 80082f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082fa:	f383 8811 	msr	BASEPRI, r3
 80082fe:	f3bf 8f6f 	isb	sy
 8008302:	f3bf 8f4f 	dsb	sy
 8008306:	61fb      	str	r3, [r7, #28]
}
 8008308:	bf00      	nop
 800830a:	bf00      	nop
 800830c:	e7fd      	b.n	800830a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800830e:	23a0      	movs	r3, #160	@ 0xa0
 8008310:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	2ba0      	cmp	r3, #160	@ 0xa0
 8008316:	d00b      	beq.n	8008330 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800831c:	f383 8811 	msr	BASEPRI, r3
 8008320:	f3bf 8f6f 	isb	sy
 8008324:	f3bf 8f4f 	dsb	sy
 8008328:	61bb      	str	r3, [r7, #24]
}
 800832a:	bf00      	nop
 800832c:	bf00      	nop
 800832e:	e7fd      	b.n	800832c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008330:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008334:	2b00      	cmp	r3, #0
 8008336:	d01e      	beq.n	8008376 <xTaskCreateStatic+0xb2>
 8008338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800833a:	2b00      	cmp	r3, #0
 800833c:	d01b      	beq.n	8008376 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800833e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008340:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008344:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008346:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800834a:	2202      	movs	r2, #2
 800834c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008350:	2300      	movs	r3, #0
 8008352:	9303      	str	r3, [sp, #12]
 8008354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008356:	9302      	str	r3, [sp, #8]
 8008358:	f107 0314 	add.w	r3, r7, #20
 800835c:	9301      	str	r3, [sp, #4]
 800835e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008360:	9300      	str	r3, [sp, #0]
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	68b9      	ldr	r1, [r7, #8]
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f000 f851 	bl	8008410 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800836e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008370:	f000 f8ee 	bl	8008550 <prvAddNewTaskToReadyList>
 8008374:	e001      	b.n	800837a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008376:	2300      	movs	r3, #0
 8008378:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800837a:	697b      	ldr	r3, [r7, #20]
	}
 800837c:	4618      	mov	r0, r3
 800837e:	3728      	adds	r7, #40	@ 0x28
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008384:	b580      	push	{r7, lr}
 8008386:	b08c      	sub	sp, #48	@ 0x30
 8008388:	af04      	add	r7, sp, #16
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	603b      	str	r3, [r7, #0]
 8008390:	4613      	mov	r3, r2
 8008392:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008394:	88fb      	ldrh	r3, [r7, #6]
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	4618      	mov	r0, r3
 800839a:	f001 fa37 	bl	800980c <pvPortMalloc>
 800839e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00e      	beq.n	80083c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80083a6:	20a0      	movs	r0, #160	@ 0xa0
 80083a8:	f001 fa30 	bl	800980c <pvPortMalloc>
 80083ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d003      	beq.n	80083bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	697a      	ldr	r2, [r7, #20]
 80083b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80083ba:	e005      	b.n	80083c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80083bc:	6978      	ldr	r0, [r7, #20]
 80083be:	f001 faf3 	bl	80099a8 <vPortFree>
 80083c2:	e001      	b.n	80083c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80083c4:	2300      	movs	r3, #0
 80083c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80083c8:	69fb      	ldr	r3, [r7, #28]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d017      	beq.n	80083fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80083d6:	88fa      	ldrh	r2, [r7, #6]
 80083d8:	2300      	movs	r3, #0
 80083da:	9303      	str	r3, [sp, #12]
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	9302      	str	r3, [sp, #8]
 80083e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083e2:	9301      	str	r3, [sp, #4]
 80083e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e6:	9300      	str	r3, [sp, #0]
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	68b9      	ldr	r1, [r7, #8]
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	f000 f80f 	bl	8008410 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80083f2:	69f8      	ldr	r0, [r7, #28]
 80083f4:	f000 f8ac 	bl	8008550 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80083f8:	2301      	movs	r3, #1
 80083fa:	61bb      	str	r3, [r7, #24]
 80083fc:	e002      	b.n	8008404 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80083fe:	f04f 33ff 	mov.w	r3, #4294967295
 8008402:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008404:	69bb      	ldr	r3, [r7, #24]
	}
 8008406:	4618      	mov	r0, r3
 8008408:	3720      	adds	r7, #32
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
	...

08008410 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b088      	sub	sp, #32
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	607a      	str	r2, [r7, #4]
 800841c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800841e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008420:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008428:	3b01      	subs	r3, #1
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	4413      	add	r3, r2
 800842e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008430:	69bb      	ldr	r3, [r7, #24]
 8008432:	f023 0307 	bic.w	r3, r3, #7
 8008436:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	f003 0307 	and.w	r3, r3, #7
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00b      	beq.n	800845a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8008442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008446:	f383 8811 	msr	BASEPRI, r3
 800844a:	f3bf 8f6f 	isb	sy
 800844e:	f3bf 8f4f 	dsb	sy
 8008452:	617b      	str	r3, [r7, #20]
}
 8008454:	bf00      	nop
 8008456:	bf00      	nop
 8008458:	e7fd      	b.n	8008456 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d01f      	beq.n	80084a0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008460:	2300      	movs	r3, #0
 8008462:	61fb      	str	r3, [r7, #28]
 8008464:	e012      	b.n	800848c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008466:	68ba      	ldr	r2, [r7, #8]
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	4413      	add	r3, r2
 800846c:	7819      	ldrb	r1, [r3, #0]
 800846e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	4413      	add	r3, r2
 8008474:	3334      	adds	r3, #52	@ 0x34
 8008476:	460a      	mov	r2, r1
 8008478:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800847a:	68ba      	ldr	r2, [r7, #8]
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	4413      	add	r3, r2
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d006      	beq.n	8008494 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	3301      	adds	r3, #1
 800848a:	61fb      	str	r3, [r7, #28]
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	2b0f      	cmp	r3, #15
 8008490:	d9e9      	bls.n	8008466 <prvInitialiseNewTask+0x56>
 8008492:	e000      	b.n	8008496 <prvInitialiseNewTask+0x86>
			{
				break;
 8008494:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008498:	2200      	movs	r2, #0
 800849a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800849e:	e003      	b.n	80084a8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80084a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80084a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084aa:	2b06      	cmp	r3, #6
 80084ac:	d901      	bls.n	80084b2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80084ae:	2306      	movs	r3, #6
 80084b0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80084b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80084b6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80084b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80084bc:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80084be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c0:	2200      	movs	r2, #0
 80084c2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80084c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c6:	3304      	adds	r3, #4
 80084c8:	4618      	mov	r0, r3
 80084ca:	f7fe ff0d 	bl	80072e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80084ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d0:	3318      	adds	r3, #24
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7fe ff08 	bl	80072e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80084d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084dc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084e0:	f1c3 0207 	rsb	r2, r3, #7
 80084e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80084e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084ec:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80084ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f0:	2200      	movs	r2, #0
 80084f2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80084f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f8:	2200      	movs	r2, #0
 80084fa:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80084fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008500:	334c      	adds	r3, #76	@ 0x4c
 8008502:	224c      	movs	r2, #76	@ 0x4c
 8008504:	2100      	movs	r1, #0
 8008506:	4618      	mov	r0, r3
 8008508:	f00e fe4e 	bl	80171a8 <memset>
 800850c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800850e:	4a0d      	ldr	r2, [pc, #52]	@ (8008544 <prvInitialiseNewTask+0x134>)
 8008510:	651a      	str	r2, [r3, #80]	@ 0x50
 8008512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008514:	4a0c      	ldr	r2, [pc, #48]	@ (8008548 <prvInitialiseNewTask+0x138>)
 8008516:	655a      	str	r2, [r3, #84]	@ 0x54
 8008518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800851a:	4a0c      	ldr	r2, [pc, #48]	@ (800854c <prvInitialiseNewTask+0x13c>)
 800851c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800851e:	683a      	ldr	r2, [r7, #0]
 8008520:	68f9      	ldr	r1, [r7, #12]
 8008522:	69b8      	ldr	r0, [r7, #24]
 8008524:	f000 ff1c 	bl	8009360 <pxPortInitialiseStack>
 8008528:	4602      	mov	r2, r0
 800852a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800852c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800852e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008530:	2b00      	cmp	r3, #0
 8008532:	d002      	beq.n	800853a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008536:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008538:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800853a:	bf00      	nop
 800853c:	3720      	adds	r7, #32
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	2000cc70 	.word	0x2000cc70
 8008548:	2000ccd8 	.word	0x2000ccd8
 800854c:	2000cd40 	.word	0x2000cd40

08008550 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008558:	f001 f836 	bl	80095c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800855c:	4b2a      	ldr	r3, [pc, #168]	@ (8008608 <prvAddNewTaskToReadyList+0xb8>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	3301      	adds	r3, #1
 8008562:	4a29      	ldr	r2, [pc, #164]	@ (8008608 <prvAddNewTaskToReadyList+0xb8>)
 8008564:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008566:	4b29      	ldr	r3, [pc, #164]	@ (800860c <prvAddNewTaskToReadyList+0xbc>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d109      	bne.n	8008582 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800856e:	4a27      	ldr	r2, [pc, #156]	@ (800860c <prvAddNewTaskToReadyList+0xbc>)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008574:	4b24      	ldr	r3, [pc, #144]	@ (8008608 <prvAddNewTaskToReadyList+0xb8>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2b01      	cmp	r3, #1
 800857a:	d110      	bne.n	800859e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800857c:	f000 fc06 	bl	8008d8c <prvInitialiseTaskLists>
 8008580:	e00d      	b.n	800859e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008582:	4b23      	ldr	r3, [pc, #140]	@ (8008610 <prvAddNewTaskToReadyList+0xc0>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d109      	bne.n	800859e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800858a:	4b20      	ldr	r3, [pc, #128]	@ (800860c <prvAddNewTaskToReadyList+0xbc>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008594:	429a      	cmp	r2, r3
 8008596:	d802      	bhi.n	800859e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008598:	4a1c      	ldr	r2, [pc, #112]	@ (800860c <prvAddNewTaskToReadyList+0xbc>)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800859e:	4b1d      	ldr	r3, [pc, #116]	@ (8008614 <prvAddNewTaskToReadyList+0xc4>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	3301      	adds	r3, #1
 80085a4:	4a1b      	ldr	r2, [pc, #108]	@ (8008614 <prvAddNewTaskToReadyList+0xc4>)
 80085a6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ac:	2201      	movs	r2, #1
 80085ae:	409a      	lsls	r2, r3
 80085b0:	4b19      	ldr	r3, [pc, #100]	@ (8008618 <prvAddNewTaskToReadyList+0xc8>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4313      	orrs	r3, r2
 80085b6:	4a18      	ldr	r2, [pc, #96]	@ (8008618 <prvAddNewTaskToReadyList+0xc8>)
 80085b8:	6013      	str	r3, [r2, #0]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085be:	4613      	mov	r3, r2
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	4413      	add	r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	4a15      	ldr	r2, [pc, #84]	@ (800861c <prvAddNewTaskToReadyList+0xcc>)
 80085c8:	441a      	add	r2, r3
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	3304      	adds	r3, #4
 80085ce:	4619      	mov	r1, r3
 80085d0:	4610      	mov	r0, r2
 80085d2:	f7fe fe96 	bl	8007302 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80085d6:	f001 f829 	bl	800962c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80085da:	4b0d      	ldr	r3, [pc, #52]	@ (8008610 <prvAddNewTaskToReadyList+0xc0>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00e      	beq.n	8008600 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80085e2:	4b0a      	ldr	r3, [pc, #40]	@ (800860c <prvAddNewTaskToReadyList+0xbc>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d207      	bcs.n	8008600 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80085f0:	4b0b      	ldr	r3, [pc, #44]	@ (8008620 <prvAddNewTaskToReadyList+0xd0>)
 80085f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085f6:	601a      	str	r2, [r3, #0]
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008600:	bf00      	nop
 8008602:	3708      	adds	r7, #8
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}
 8008608:	20005628 	.word	0x20005628
 800860c:	20005528 	.word	0x20005528
 8008610:	20005634 	.word	0x20005634
 8008614:	20005644 	.word	0x20005644
 8008618:	20005630 	.word	0x20005630
 800861c:	2000552c 	.word	0x2000552c
 8008620:	e000ed04 	.word	0xe000ed04

08008624 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800862c:	2300      	movs	r3, #0
 800862e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d018      	beq.n	8008668 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008636:	4b14      	ldr	r3, [pc, #80]	@ (8008688 <vTaskDelay+0x64>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d00b      	beq.n	8008656 <vTaskDelay+0x32>
	__asm volatile
 800863e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008642:	f383 8811 	msr	BASEPRI, r3
 8008646:	f3bf 8f6f 	isb	sy
 800864a:	f3bf 8f4f 	dsb	sy
 800864e:	60bb      	str	r3, [r7, #8]
}
 8008650:	bf00      	nop
 8008652:	bf00      	nop
 8008654:	e7fd      	b.n	8008652 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008656:	f000 f885 	bl	8008764 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800865a:	2100      	movs	r1, #0
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 fe19 	bl	8009294 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008662:	f000 f88d 	bl	8008780 <xTaskResumeAll>
 8008666:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d107      	bne.n	800867e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800866e:	4b07      	ldr	r3, [pc, #28]	@ (800868c <vTaskDelay+0x68>)
 8008670:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008674:	601a      	str	r2, [r3, #0]
 8008676:	f3bf 8f4f 	dsb	sy
 800867a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800867e:	bf00      	nop
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	20005650 	.word	0x20005650
 800868c:	e000ed04 	.word	0xe000ed04

08008690 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b08a      	sub	sp, #40	@ 0x28
 8008694:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008696:	2300      	movs	r3, #0
 8008698:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800869a:	2300      	movs	r3, #0
 800869c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800869e:	463a      	mov	r2, r7
 80086a0:	1d39      	adds	r1, r7, #4
 80086a2:	f107 0308 	add.w	r3, r7, #8
 80086a6:	4618      	mov	r0, r3
 80086a8:	f7f7 ff72 	bl	8000590 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80086ac:	6839      	ldr	r1, [r7, #0]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	68ba      	ldr	r2, [r7, #8]
 80086b2:	9202      	str	r2, [sp, #8]
 80086b4:	9301      	str	r3, [sp, #4]
 80086b6:	2300      	movs	r3, #0
 80086b8:	9300      	str	r3, [sp, #0]
 80086ba:	2300      	movs	r3, #0
 80086bc:	460a      	mov	r2, r1
 80086be:	4921      	ldr	r1, [pc, #132]	@ (8008744 <vTaskStartScheduler+0xb4>)
 80086c0:	4821      	ldr	r0, [pc, #132]	@ (8008748 <vTaskStartScheduler+0xb8>)
 80086c2:	f7ff fdff 	bl	80082c4 <xTaskCreateStatic>
 80086c6:	4603      	mov	r3, r0
 80086c8:	4a20      	ldr	r2, [pc, #128]	@ (800874c <vTaskStartScheduler+0xbc>)
 80086ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80086cc:	4b1f      	ldr	r3, [pc, #124]	@ (800874c <vTaskStartScheduler+0xbc>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d002      	beq.n	80086da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80086d4:	2301      	movs	r3, #1
 80086d6:	617b      	str	r3, [r7, #20]
 80086d8:	e001      	b.n	80086de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80086da:	2300      	movs	r3, #0
 80086dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d11b      	bne.n	800871c <vTaskStartScheduler+0x8c>
	__asm volatile
 80086e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086e8:	f383 8811 	msr	BASEPRI, r3
 80086ec:	f3bf 8f6f 	isb	sy
 80086f0:	f3bf 8f4f 	dsb	sy
 80086f4:	613b      	str	r3, [r7, #16]
}
 80086f6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80086f8:	4b15      	ldr	r3, [pc, #84]	@ (8008750 <vTaskStartScheduler+0xc0>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	334c      	adds	r3, #76	@ 0x4c
 80086fe:	4a15      	ldr	r2, [pc, #84]	@ (8008754 <vTaskStartScheduler+0xc4>)
 8008700:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008702:	4b15      	ldr	r3, [pc, #84]	@ (8008758 <vTaskStartScheduler+0xc8>)
 8008704:	f04f 32ff 	mov.w	r2, #4294967295
 8008708:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800870a:	4b14      	ldr	r3, [pc, #80]	@ (800875c <vTaskStartScheduler+0xcc>)
 800870c:	2201      	movs	r2, #1
 800870e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008710:	4b13      	ldr	r3, [pc, #76]	@ (8008760 <vTaskStartScheduler+0xd0>)
 8008712:	2200      	movs	r2, #0
 8008714:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008716:	f000 feb3 	bl	8009480 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800871a:	e00f      	b.n	800873c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008722:	d10b      	bne.n	800873c <vTaskStartScheduler+0xac>
	__asm volatile
 8008724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008728:	f383 8811 	msr	BASEPRI, r3
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	60fb      	str	r3, [r7, #12]
}
 8008736:	bf00      	nop
 8008738:	bf00      	nop
 800873a:	e7fd      	b.n	8008738 <vTaskStartScheduler+0xa8>
}
 800873c:	bf00      	nop
 800873e:	3718      	adds	r7, #24
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	0801834c 	.word	0x0801834c
 8008748:	08008d5d 	.word	0x08008d5d
 800874c:	2000564c 	.word	0x2000564c
 8008750:	20005528 	.word	0x20005528
 8008754:	20000044 	.word	0x20000044
 8008758:	20005648 	.word	0x20005648
 800875c:	20005634 	.word	0x20005634
 8008760:	2000562c 	.word	0x2000562c

08008764 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008764:	b480      	push	{r7}
 8008766:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008768:	4b04      	ldr	r3, [pc, #16]	@ (800877c <vTaskSuspendAll+0x18>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	3301      	adds	r3, #1
 800876e:	4a03      	ldr	r2, [pc, #12]	@ (800877c <vTaskSuspendAll+0x18>)
 8008770:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008772:	bf00      	nop
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr
 800877c:	20005650 	.word	0x20005650

08008780 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008786:	2300      	movs	r3, #0
 8008788:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800878a:	2300      	movs	r3, #0
 800878c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800878e:	4b42      	ldr	r3, [pc, #264]	@ (8008898 <xTaskResumeAll+0x118>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d10b      	bne.n	80087ae <xTaskResumeAll+0x2e>
	__asm volatile
 8008796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800879a:	f383 8811 	msr	BASEPRI, r3
 800879e:	f3bf 8f6f 	isb	sy
 80087a2:	f3bf 8f4f 	dsb	sy
 80087a6:	603b      	str	r3, [r7, #0]
}
 80087a8:	bf00      	nop
 80087aa:	bf00      	nop
 80087ac:	e7fd      	b.n	80087aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80087ae:	f000 ff0b 	bl	80095c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80087b2:	4b39      	ldr	r3, [pc, #228]	@ (8008898 <xTaskResumeAll+0x118>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	3b01      	subs	r3, #1
 80087b8:	4a37      	ldr	r2, [pc, #220]	@ (8008898 <xTaskResumeAll+0x118>)
 80087ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087bc:	4b36      	ldr	r3, [pc, #216]	@ (8008898 <xTaskResumeAll+0x118>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d161      	bne.n	8008888 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80087c4:	4b35      	ldr	r3, [pc, #212]	@ (800889c <xTaskResumeAll+0x11c>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d05d      	beq.n	8008888 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087cc:	e02e      	b.n	800882c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087ce:	4b34      	ldr	r3, [pc, #208]	@ (80088a0 <xTaskResumeAll+0x120>)
 80087d0:	68db      	ldr	r3, [r3, #12]
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	3318      	adds	r3, #24
 80087da:	4618      	mov	r0, r3
 80087dc:	f7fe fdee 	bl	80073bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	3304      	adds	r3, #4
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7fe fde9 	bl	80073bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ee:	2201      	movs	r2, #1
 80087f0:	409a      	lsls	r2, r3
 80087f2:	4b2c      	ldr	r3, [pc, #176]	@ (80088a4 <xTaskResumeAll+0x124>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	4a2a      	ldr	r2, [pc, #168]	@ (80088a4 <xTaskResumeAll+0x124>)
 80087fa:	6013      	str	r3, [r2, #0]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008800:	4613      	mov	r3, r2
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	4413      	add	r3, r2
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	4a27      	ldr	r2, [pc, #156]	@ (80088a8 <xTaskResumeAll+0x128>)
 800880a:	441a      	add	r2, r3
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	3304      	adds	r3, #4
 8008810:	4619      	mov	r1, r3
 8008812:	4610      	mov	r0, r2
 8008814:	f7fe fd75 	bl	8007302 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800881c:	4b23      	ldr	r3, [pc, #140]	@ (80088ac <xTaskResumeAll+0x12c>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008822:	429a      	cmp	r2, r3
 8008824:	d302      	bcc.n	800882c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008826:	4b22      	ldr	r3, [pc, #136]	@ (80088b0 <xTaskResumeAll+0x130>)
 8008828:	2201      	movs	r2, #1
 800882a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800882c:	4b1c      	ldr	r3, [pc, #112]	@ (80088a0 <xTaskResumeAll+0x120>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d1cc      	bne.n	80087ce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d001      	beq.n	800883e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800883a:	f000 fb4b 	bl	8008ed4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800883e:	4b1d      	ldr	r3, [pc, #116]	@ (80088b4 <xTaskResumeAll+0x134>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d010      	beq.n	800886c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800884a:	f000 f859 	bl	8008900 <xTaskIncrementTick>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d002      	beq.n	800885a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008854:	4b16      	ldr	r3, [pc, #88]	@ (80088b0 <xTaskResumeAll+0x130>)
 8008856:	2201      	movs	r2, #1
 8008858:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	3b01      	subs	r3, #1
 800885e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d1f1      	bne.n	800884a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008866:	4b13      	ldr	r3, [pc, #76]	@ (80088b4 <xTaskResumeAll+0x134>)
 8008868:	2200      	movs	r2, #0
 800886a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800886c:	4b10      	ldr	r3, [pc, #64]	@ (80088b0 <xTaskResumeAll+0x130>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d009      	beq.n	8008888 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008874:	2301      	movs	r3, #1
 8008876:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008878:	4b0f      	ldr	r3, [pc, #60]	@ (80088b8 <xTaskResumeAll+0x138>)
 800887a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800887e:	601a      	str	r2, [r3, #0]
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008888:	f000 fed0 	bl	800962c <vPortExitCritical>

	return xAlreadyYielded;
 800888c:	68bb      	ldr	r3, [r7, #8]
}
 800888e:	4618      	mov	r0, r3
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	20005650 	.word	0x20005650
 800889c:	20005628 	.word	0x20005628
 80088a0:	200055e8 	.word	0x200055e8
 80088a4:	20005630 	.word	0x20005630
 80088a8:	2000552c 	.word	0x2000552c
 80088ac:	20005528 	.word	0x20005528
 80088b0:	2000563c 	.word	0x2000563c
 80088b4:	20005638 	.word	0x20005638
 80088b8:	e000ed04 	.word	0xe000ed04

080088bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80088c2:	4b05      	ldr	r3, [pc, #20]	@ (80088d8 <xTaskGetTickCount+0x1c>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80088c8:	687b      	ldr	r3, [r7, #4]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	370c      	adds	r7, #12
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop
 80088d8:	2000562c 	.word	0x2000562c

080088dc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80088e2:	f000 ff51 	bl	8009788 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80088e6:	2300      	movs	r3, #0
 80088e8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80088ea:	4b04      	ldr	r3, [pc, #16]	@ (80088fc <xTaskGetTickCountFromISR+0x20>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80088f0:	683b      	ldr	r3, [r7, #0]
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3708      	adds	r7, #8
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	2000562c 	.word	0x2000562c

08008900 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b086      	sub	sp, #24
 8008904:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008906:	2300      	movs	r3, #0
 8008908:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800890a:	4b4f      	ldr	r3, [pc, #316]	@ (8008a48 <xTaskIncrementTick+0x148>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	f040 808f 	bne.w	8008a32 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008914:	4b4d      	ldr	r3, [pc, #308]	@ (8008a4c <xTaskIncrementTick+0x14c>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	3301      	adds	r3, #1
 800891a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800891c:	4a4b      	ldr	r2, [pc, #300]	@ (8008a4c <xTaskIncrementTick+0x14c>)
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d121      	bne.n	800896c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008928:	4b49      	ldr	r3, [pc, #292]	@ (8008a50 <xTaskIncrementTick+0x150>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d00b      	beq.n	800894a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008936:	f383 8811 	msr	BASEPRI, r3
 800893a:	f3bf 8f6f 	isb	sy
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	603b      	str	r3, [r7, #0]
}
 8008944:	bf00      	nop
 8008946:	bf00      	nop
 8008948:	e7fd      	b.n	8008946 <xTaskIncrementTick+0x46>
 800894a:	4b41      	ldr	r3, [pc, #260]	@ (8008a50 <xTaskIncrementTick+0x150>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	60fb      	str	r3, [r7, #12]
 8008950:	4b40      	ldr	r3, [pc, #256]	@ (8008a54 <xTaskIncrementTick+0x154>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a3e      	ldr	r2, [pc, #248]	@ (8008a50 <xTaskIncrementTick+0x150>)
 8008956:	6013      	str	r3, [r2, #0]
 8008958:	4a3e      	ldr	r2, [pc, #248]	@ (8008a54 <xTaskIncrementTick+0x154>)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6013      	str	r3, [r2, #0]
 800895e:	4b3e      	ldr	r3, [pc, #248]	@ (8008a58 <xTaskIncrementTick+0x158>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	3301      	adds	r3, #1
 8008964:	4a3c      	ldr	r2, [pc, #240]	@ (8008a58 <xTaskIncrementTick+0x158>)
 8008966:	6013      	str	r3, [r2, #0]
 8008968:	f000 fab4 	bl	8008ed4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800896c:	4b3b      	ldr	r3, [pc, #236]	@ (8008a5c <xTaskIncrementTick+0x15c>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	693a      	ldr	r2, [r7, #16]
 8008972:	429a      	cmp	r2, r3
 8008974:	d348      	bcc.n	8008a08 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008976:	4b36      	ldr	r3, [pc, #216]	@ (8008a50 <xTaskIncrementTick+0x150>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d104      	bne.n	800898a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008980:	4b36      	ldr	r3, [pc, #216]	@ (8008a5c <xTaskIncrementTick+0x15c>)
 8008982:	f04f 32ff 	mov.w	r2, #4294967295
 8008986:	601a      	str	r2, [r3, #0]
					break;
 8008988:	e03e      	b.n	8008a08 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800898a:	4b31      	ldr	r3, [pc, #196]	@ (8008a50 <xTaskIncrementTick+0x150>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800899a:	693a      	ldr	r2, [r7, #16]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	429a      	cmp	r2, r3
 80089a0:	d203      	bcs.n	80089aa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80089a2:	4a2e      	ldr	r2, [pc, #184]	@ (8008a5c <xTaskIncrementTick+0x15c>)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80089a8:	e02e      	b.n	8008a08 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	3304      	adds	r3, #4
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7fe fd04 	bl	80073bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d004      	beq.n	80089c6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	3318      	adds	r3, #24
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7fe fcfb 	bl	80073bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ca:	2201      	movs	r2, #1
 80089cc:	409a      	lsls	r2, r3
 80089ce:	4b24      	ldr	r3, [pc, #144]	@ (8008a60 <xTaskIncrementTick+0x160>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	4a22      	ldr	r2, [pc, #136]	@ (8008a60 <xTaskIncrementTick+0x160>)
 80089d6:	6013      	str	r3, [r2, #0]
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089dc:	4613      	mov	r3, r2
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	4413      	add	r3, r2
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	4a1f      	ldr	r2, [pc, #124]	@ (8008a64 <xTaskIncrementTick+0x164>)
 80089e6:	441a      	add	r2, r3
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	3304      	adds	r3, #4
 80089ec:	4619      	mov	r1, r3
 80089ee:	4610      	mov	r0, r2
 80089f0:	f7fe fc87 	bl	8007302 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089f8:	4b1b      	ldr	r3, [pc, #108]	@ (8008a68 <xTaskIncrementTick+0x168>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d3b9      	bcc.n	8008976 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008a02:	2301      	movs	r3, #1
 8008a04:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a06:	e7b6      	b.n	8008976 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008a08:	4b17      	ldr	r3, [pc, #92]	@ (8008a68 <xTaskIncrementTick+0x168>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a0e:	4915      	ldr	r1, [pc, #84]	@ (8008a64 <xTaskIncrementTick+0x164>)
 8008a10:	4613      	mov	r3, r2
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	4413      	add	r3, r2
 8008a16:	009b      	lsls	r3, r3, #2
 8008a18:	440b      	add	r3, r1
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d901      	bls.n	8008a24 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008a20:	2301      	movs	r3, #1
 8008a22:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008a24:	4b11      	ldr	r3, [pc, #68]	@ (8008a6c <xTaskIncrementTick+0x16c>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d007      	beq.n	8008a3c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	617b      	str	r3, [r7, #20]
 8008a30:	e004      	b.n	8008a3c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008a32:	4b0f      	ldr	r3, [pc, #60]	@ (8008a70 <xTaskIncrementTick+0x170>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	3301      	adds	r3, #1
 8008a38:	4a0d      	ldr	r2, [pc, #52]	@ (8008a70 <xTaskIncrementTick+0x170>)
 8008a3a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008a3c:	697b      	ldr	r3, [r7, #20]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3718      	adds	r7, #24
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	20005650 	.word	0x20005650
 8008a4c:	2000562c 	.word	0x2000562c
 8008a50:	200055e0 	.word	0x200055e0
 8008a54:	200055e4 	.word	0x200055e4
 8008a58:	20005640 	.word	0x20005640
 8008a5c:	20005648 	.word	0x20005648
 8008a60:	20005630 	.word	0x20005630
 8008a64:	2000552c 	.word	0x2000552c
 8008a68:	20005528 	.word	0x20005528
 8008a6c:	2000563c 	.word	0x2000563c
 8008a70:	20005638 	.word	0x20005638

08008a74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008a74:	b480      	push	{r7}
 8008a76:	b087      	sub	sp, #28
 8008a78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008a7a:	4b2a      	ldr	r3, [pc, #168]	@ (8008b24 <vTaskSwitchContext+0xb0>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d003      	beq.n	8008a8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008a82:	4b29      	ldr	r3, [pc, #164]	@ (8008b28 <vTaskSwitchContext+0xb4>)
 8008a84:	2201      	movs	r2, #1
 8008a86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a88:	e045      	b.n	8008b16 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8008a8a:	4b27      	ldr	r3, [pc, #156]	@ (8008b28 <vTaskSwitchContext+0xb4>)
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a90:	4b26      	ldr	r3, [pc, #152]	@ (8008b2c <vTaskSwitchContext+0xb8>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	fab3 f383 	clz	r3, r3
 8008a9c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008a9e:	7afb      	ldrb	r3, [r7, #11]
 8008aa0:	f1c3 031f 	rsb	r3, r3, #31
 8008aa4:	617b      	str	r3, [r7, #20]
 8008aa6:	4922      	ldr	r1, [pc, #136]	@ (8008b30 <vTaskSwitchContext+0xbc>)
 8008aa8:	697a      	ldr	r2, [r7, #20]
 8008aaa:	4613      	mov	r3, r2
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	4413      	add	r3, r2
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	440b      	add	r3, r1
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d10b      	bne.n	8008ad2 <vTaskSwitchContext+0x5e>
	__asm volatile
 8008aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008abe:	f383 8811 	msr	BASEPRI, r3
 8008ac2:	f3bf 8f6f 	isb	sy
 8008ac6:	f3bf 8f4f 	dsb	sy
 8008aca:	607b      	str	r3, [r7, #4]
}
 8008acc:	bf00      	nop
 8008ace:	bf00      	nop
 8008ad0:	e7fd      	b.n	8008ace <vTaskSwitchContext+0x5a>
 8008ad2:	697a      	ldr	r2, [r7, #20]
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	4413      	add	r3, r2
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	4a14      	ldr	r2, [pc, #80]	@ (8008b30 <vTaskSwitchContext+0xbc>)
 8008ade:	4413      	add	r3, r2
 8008ae0:	613b      	str	r3, [r7, #16]
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	685a      	ldr	r2, [r3, #4]
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	605a      	str	r2, [r3, #4]
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	685a      	ldr	r2, [r3, #4]
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	3308      	adds	r3, #8
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d104      	bne.n	8008b02 <vTaskSwitchContext+0x8e>
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	685a      	ldr	r2, [r3, #4]
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	605a      	str	r2, [r3, #4]
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	4a0a      	ldr	r2, [pc, #40]	@ (8008b34 <vTaskSwitchContext+0xc0>)
 8008b0a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008b0c:	4b09      	ldr	r3, [pc, #36]	@ (8008b34 <vTaskSwitchContext+0xc0>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	334c      	adds	r3, #76	@ 0x4c
 8008b12:	4a09      	ldr	r2, [pc, #36]	@ (8008b38 <vTaskSwitchContext+0xc4>)
 8008b14:	6013      	str	r3, [r2, #0]
}
 8008b16:	bf00      	nop
 8008b18:	371c      	adds	r7, #28
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr
 8008b22:	bf00      	nop
 8008b24:	20005650 	.word	0x20005650
 8008b28:	2000563c 	.word	0x2000563c
 8008b2c:	20005630 	.word	0x20005630
 8008b30:	2000552c 	.word	0x2000552c
 8008b34:	20005528 	.word	0x20005528
 8008b38:	20000044 	.word	0x20000044

08008b3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d10b      	bne.n	8008b64 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b50:	f383 8811 	msr	BASEPRI, r3
 8008b54:	f3bf 8f6f 	isb	sy
 8008b58:	f3bf 8f4f 	dsb	sy
 8008b5c:	60fb      	str	r3, [r7, #12]
}
 8008b5e:	bf00      	nop
 8008b60:	bf00      	nop
 8008b62:	e7fd      	b.n	8008b60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b64:	4b07      	ldr	r3, [pc, #28]	@ (8008b84 <vTaskPlaceOnEventList+0x48>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	3318      	adds	r3, #24
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f7fe fbec 	bl	800734a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b72:	2101      	movs	r1, #1
 8008b74:	6838      	ldr	r0, [r7, #0]
 8008b76:	f000 fb8d 	bl	8009294 <prvAddCurrentTaskToDelayedList>
}
 8008b7a:	bf00      	nop
 8008b7c:	3710      	adds	r7, #16
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	20005528 	.word	0x20005528

08008b88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d10b      	bne.n	8008bb6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba2:	f383 8811 	msr	BASEPRI, r3
 8008ba6:	f3bf 8f6f 	isb	sy
 8008baa:	f3bf 8f4f 	dsb	sy
 8008bae:	60fb      	str	r3, [r7, #12]
}
 8008bb0:	bf00      	nop
 8008bb2:	bf00      	nop
 8008bb4:	e7fd      	b.n	8008bb2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	3318      	adds	r3, #24
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7fe fbfe 	bl	80073bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8008c38 <xTaskRemoveFromEventList+0xb0>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d11c      	bne.n	8008c02 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	3304      	adds	r3, #4
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f7fe fbf5 	bl	80073bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	409a      	lsls	r2, r3
 8008bda:	4b18      	ldr	r3, [pc, #96]	@ (8008c3c <xTaskRemoveFromEventList+0xb4>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4313      	orrs	r3, r2
 8008be0:	4a16      	ldr	r2, [pc, #88]	@ (8008c3c <xTaskRemoveFromEventList+0xb4>)
 8008be2:	6013      	str	r3, [r2, #0]
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008be8:	4613      	mov	r3, r2
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	4413      	add	r3, r2
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	4a13      	ldr	r2, [pc, #76]	@ (8008c40 <xTaskRemoveFromEventList+0xb8>)
 8008bf2:	441a      	add	r2, r3
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	3304      	adds	r3, #4
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	4610      	mov	r0, r2
 8008bfc:	f7fe fb81 	bl	8007302 <vListInsertEnd>
 8008c00:	e005      	b.n	8008c0e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	3318      	adds	r3, #24
 8008c06:	4619      	mov	r1, r3
 8008c08:	480e      	ldr	r0, [pc, #56]	@ (8008c44 <xTaskRemoveFromEventList+0xbc>)
 8008c0a:	f7fe fb7a 	bl	8007302 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c12:	4b0d      	ldr	r3, [pc, #52]	@ (8008c48 <xTaskRemoveFromEventList+0xc0>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d905      	bls.n	8008c28 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008c20:	4b0a      	ldr	r3, [pc, #40]	@ (8008c4c <xTaskRemoveFromEventList+0xc4>)
 8008c22:	2201      	movs	r2, #1
 8008c24:	601a      	str	r2, [r3, #0]
 8008c26:	e001      	b.n	8008c2c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008c2c:	697b      	ldr	r3, [r7, #20]
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3718      	adds	r7, #24
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	20005650 	.word	0x20005650
 8008c3c:	20005630 	.word	0x20005630
 8008c40:	2000552c 	.word	0x2000552c
 8008c44:	200055e8 	.word	0x200055e8
 8008c48:	20005528 	.word	0x20005528
 8008c4c:	2000563c 	.word	0x2000563c

08008c50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008c58:	4b06      	ldr	r3, [pc, #24]	@ (8008c74 <vTaskInternalSetTimeOutState+0x24>)
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008c60:	4b05      	ldr	r3, [pc, #20]	@ (8008c78 <vTaskInternalSetTimeOutState+0x28>)
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	605a      	str	r2, [r3, #4]
}
 8008c68:	bf00      	nop
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr
 8008c74:	20005640 	.word	0x20005640
 8008c78:	2000562c 	.word	0x2000562c

08008c7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b088      	sub	sp, #32
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d10b      	bne.n	8008ca4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c90:	f383 8811 	msr	BASEPRI, r3
 8008c94:	f3bf 8f6f 	isb	sy
 8008c98:	f3bf 8f4f 	dsb	sy
 8008c9c:	613b      	str	r3, [r7, #16]
}
 8008c9e:	bf00      	nop
 8008ca0:	bf00      	nop
 8008ca2:	e7fd      	b.n	8008ca0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d10b      	bne.n	8008cc2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cae:	f383 8811 	msr	BASEPRI, r3
 8008cb2:	f3bf 8f6f 	isb	sy
 8008cb6:	f3bf 8f4f 	dsb	sy
 8008cba:	60fb      	str	r3, [r7, #12]
}
 8008cbc:	bf00      	nop
 8008cbe:	bf00      	nop
 8008cc0:	e7fd      	b.n	8008cbe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008cc2:	f000 fc81 	bl	80095c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8008d3c <xTaskCheckForTimeOut+0xc0>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	69ba      	ldr	r2, [r7, #24]
 8008cd2:	1ad3      	subs	r3, r2, r3
 8008cd4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cde:	d102      	bne.n	8008ce6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	61fb      	str	r3, [r7, #28]
 8008ce4:	e023      	b.n	8008d2e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	4b15      	ldr	r3, [pc, #84]	@ (8008d40 <xTaskCheckForTimeOut+0xc4>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d007      	beq.n	8008d02 <xTaskCheckForTimeOut+0x86>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	69ba      	ldr	r2, [r7, #24]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d302      	bcc.n	8008d02 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	61fb      	str	r3, [r7, #28]
 8008d00:	e015      	b.n	8008d2e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	697a      	ldr	r2, [r7, #20]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d20b      	bcs.n	8008d24 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	1ad2      	subs	r2, r2, r3
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f7ff ff99 	bl	8008c50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	61fb      	str	r3, [r7, #28]
 8008d22:	e004      	b.n	8008d2e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	2200      	movs	r2, #0
 8008d28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008d2e:	f000 fc7d 	bl	800962c <vPortExitCritical>

	return xReturn;
 8008d32:	69fb      	ldr	r3, [r7, #28]
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3720      	adds	r7, #32
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}
 8008d3c:	2000562c 	.word	0x2000562c
 8008d40:	20005640 	.word	0x20005640

08008d44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008d44:	b480      	push	{r7}
 8008d46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008d48:	4b03      	ldr	r3, [pc, #12]	@ (8008d58 <vTaskMissedYield+0x14>)
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	601a      	str	r2, [r3, #0]
}
 8008d4e:	bf00      	nop
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr
 8008d58:	2000563c 	.word	0x2000563c

08008d5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008d64:	f000 f852 	bl	8008e0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008d68:	4b06      	ldr	r3, [pc, #24]	@ (8008d84 <prvIdleTask+0x28>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d9f9      	bls.n	8008d64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008d70:	4b05      	ldr	r3, [pc, #20]	@ (8008d88 <prvIdleTask+0x2c>)
 8008d72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d76:	601a      	str	r2, [r3, #0]
 8008d78:	f3bf 8f4f 	dsb	sy
 8008d7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008d80:	e7f0      	b.n	8008d64 <prvIdleTask+0x8>
 8008d82:	bf00      	nop
 8008d84:	2000552c 	.word	0x2000552c
 8008d88:	e000ed04 	.word	0xe000ed04

08008d8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d92:	2300      	movs	r3, #0
 8008d94:	607b      	str	r3, [r7, #4]
 8008d96:	e00c      	b.n	8008db2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	4413      	add	r3, r2
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	4a12      	ldr	r2, [pc, #72]	@ (8008dec <prvInitialiseTaskLists+0x60>)
 8008da4:	4413      	add	r3, r2
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7fe fa7e 	bl	80072a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	3301      	adds	r3, #1
 8008db0:	607b      	str	r3, [r7, #4]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2b06      	cmp	r3, #6
 8008db6:	d9ef      	bls.n	8008d98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008db8:	480d      	ldr	r0, [pc, #52]	@ (8008df0 <prvInitialiseTaskLists+0x64>)
 8008dba:	f7fe fa75 	bl	80072a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008dbe:	480d      	ldr	r0, [pc, #52]	@ (8008df4 <prvInitialiseTaskLists+0x68>)
 8008dc0:	f7fe fa72 	bl	80072a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008dc4:	480c      	ldr	r0, [pc, #48]	@ (8008df8 <prvInitialiseTaskLists+0x6c>)
 8008dc6:	f7fe fa6f 	bl	80072a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008dca:	480c      	ldr	r0, [pc, #48]	@ (8008dfc <prvInitialiseTaskLists+0x70>)
 8008dcc:	f7fe fa6c 	bl	80072a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008dd0:	480b      	ldr	r0, [pc, #44]	@ (8008e00 <prvInitialiseTaskLists+0x74>)
 8008dd2:	f7fe fa69 	bl	80072a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8008e04 <prvInitialiseTaskLists+0x78>)
 8008dd8:	4a05      	ldr	r2, [pc, #20]	@ (8008df0 <prvInitialiseTaskLists+0x64>)
 8008dda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8008e08 <prvInitialiseTaskLists+0x7c>)
 8008dde:	4a05      	ldr	r2, [pc, #20]	@ (8008df4 <prvInitialiseTaskLists+0x68>)
 8008de0:	601a      	str	r2, [r3, #0]
}
 8008de2:	bf00      	nop
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	2000552c 	.word	0x2000552c
 8008df0:	200055b8 	.word	0x200055b8
 8008df4:	200055cc 	.word	0x200055cc
 8008df8:	200055e8 	.word	0x200055e8
 8008dfc:	200055fc 	.word	0x200055fc
 8008e00:	20005614 	.word	0x20005614
 8008e04:	200055e0 	.word	0x200055e0
 8008e08:	200055e4 	.word	0x200055e4

08008e0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e12:	e019      	b.n	8008e48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008e14:	f000 fbd8 	bl	80095c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e18:	4b10      	ldr	r3, [pc, #64]	@ (8008e5c <prvCheckTasksWaitingTermination+0x50>)
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	3304      	adds	r3, #4
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7fe fac9 	bl	80073bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8008e60 <prvCheckTasksWaitingTermination+0x54>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	4a0b      	ldr	r2, [pc, #44]	@ (8008e60 <prvCheckTasksWaitingTermination+0x54>)
 8008e32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008e34:	4b0b      	ldr	r3, [pc, #44]	@ (8008e64 <prvCheckTasksWaitingTermination+0x58>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8008e64 <prvCheckTasksWaitingTermination+0x58>)
 8008e3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008e3e:	f000 fbf5 	bl	800962c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 f810 	bl	8008e68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e48:	4b06      	ldr	r3, [pc, #24]	@ (8008e64 <prvCheckTasksWaitingTermination+0x58>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1e1      	bne.n	8008e14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008e50:	bf00      	nop
 8008e52:	bf00      	nop
 8008e54:	3708      	adds	r7, #8
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	200055fc 	.word	0x200055fc
 8008e60:	20005628 	.word	0x20005628
 8008e64:	20005610 	.word	0x20005610

08008e68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	334c      	adds	r3, #76	@ 0x4c
 8008e74:	4618      	mov	r0, r3
 8008e76:	f00e f9af 	bl	80171d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d108      	bne.n	8008e96 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f000 fd8d 	bl	80099a8 <vPortFree>
				vPortFree( pxTCB );
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 fd8a 	bl	80099a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008e94:	e019      	b.n	8008eca <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d103      	bne.n	8008ea8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 fd81 	bl	80099a8 <vPortFree>
	}
 8008ea6:	e010      	b.n	8008eca <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	d00b      	beq.n	8008eca <prvDeleteTCB+0x62>
	__asm volatile
 8008eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eb6:	f383 8811 	msr	BASEPRI, r3
 8008eba:	f3bf 8f6f 	isb	sy
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	60fb      	str	r3, [r7, #12]
}
 8008ec4:	bf00      	nop
 8008ec6:	bf00      	nop
 8008ec8:	e7fd      	b.n	8008ec6 <prvDeleteTCB+0x5e>
	}
 8008eca:	bf00      	nop
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
	...

08008ed4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008eda:	4b0c      	ldr	r3, [pc, #48]	@ (8008f0c <prvResetNextTaskUnblockTime+0x38>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d104      	bne.n	8008eee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8008f10 <prvResetNextTaskUnblockTime+0x3c>)
 8008ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8008eea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008eec:	e008      	b.n	8008f00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eee:	4b07      	ldr	r3, [pc, #28]	@ (8008f0c <prvResetNextTaskUnblockTime+0x38>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	4a04      	ldr	r2, [pc, #16]	@ (8008f10 <prvResetNextTaskUnblockTime+0x3c>)
 8008efe:	6013      	str	r3, [r2, #0]
}
 8008f00:	bf00      	nop
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr
 8008f0c:	200055e0 	.word	0x200055e0
 8008f10:	20005648 	.word	0x20005648

08008f14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8008f48 <xTaskGetSchedulerState+0x34>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d102      	bne.n	8008f28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008f22:	2301      	movs	r3, #1
 8008f24:	607b      	str	r3, [r7, #4]
 8008f26:	e008      	b.n	8008f3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f28:	4b08      	ldr	r3, [pc, #32]	@ (8008f4c <xTaskGetSchedulerState+0x38>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d102      	bne.n	8008f36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008f30:	2302      	movs	r3, #2
 8008f32:	607b      	str	r3, [r7, #4]
 8008f34:	e001      	b.n	8008f3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008f36:	2300      	movs	r3, #0
 8008f38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008f3a:	687b      	ldr	r3, [r7, #4]
	}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr
 8008f48:	20005634 	.word	0x20005634
 8008f4c:	20005650 	.word	0x20005650

08008f50 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d05e      	beq.n	8009024 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f6a:	4b31      	ldr	r3, [pc, #196]	@ (8009030 <xTaskPriorityInherit+0xe0>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d24e      	bcs.n	8009012 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	699b      	ldr	r3, [r3, #24]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	db06      	blt.n	8008f8a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f7c:	4b2c      	ldr	r3, [pc, #176]	@ (8009030 <xTaskPriorityInherit+0xe0>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f82:	f1c3 0207 	rsb	r2, r3, #7
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	6959      	ldr	r1, [r3, #20]
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f92:	4613      	mov	r3, r2
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	4413      	add	r3, r2
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	4a26      	ldr	r2, [pc, #152]	@ (8009034 <xTaskPriorityInherit+0xe4>)
 8008f9c:	4413      	add	r3, r2
 8008f9e:	4299      	cmp	r1, r3
 8008fa0:	d12f      	bne.n	8009002 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	3304      	adds	r3, #4
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7fe fa08 	bl	80073bc <uxListRemove>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d10a      	bne.n	8008fc8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8008fbc:	43da      	mvns	r2, r3
 8008fbe:	4b1e      	ldr	r3, [pc, #120]	@ (8009038 <xTaskPriorityInherit+0xe8>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4013      	ands	r3, r2
 8008fc4:	4a1c      	ldr	r2, [pc, #112]	@ (8009038 <xTaskPriorityInherit+0xe8>)
 8008fc6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008fc8:	4b19      	ldr	r3, [pc, #100]	@ (8009030 <xTaskPriorityInherit+0xe0>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	409a      	lsls	r2, r3
 8008fda:	4b17      	ldr	r3, [pc, #92]	@ (8009038 <xTaskPriorityInherit+0xe8>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	4a15      	ldr	r2, [pc, #84]	@ (8009038 <xTaskPriorityInherit+0xe8>)
 8008fe2:	6013      	str	r3, [r2, #0]
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fe8:	4613      	mov	r3, r2
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	4413      	add	r3, r2
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	4a10      	ldr	r2, [pc, #64]	@ (8009034 <xTaskPriorityInherit+0xe4>)
 8008ff2:	441a      	add	r2, r3
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	3304      	adds	r3, #4
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	4610      	mov	r0, r2
 8008ffc:	f7fe f981 	bl	8007302 <vListInsertEnd>
 8009000:	e004      	b.n	800900c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009002:	4b0b      	ldr	r3, [pc, #44]	@ (8009030 <xTaskPriorityInherit+0xe0>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800900c:	2301      	movs	r3, #1
 800900e:	60fb      	str	r3, [r7, #12]
 8009010:	e008      	b.n	8009024 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009016:	4b06      	ldr	r3, [pc, #24]	@ (8009030 <xTaskPriorityInherit+0xe0>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800901c:	429a      	cmp	r2, r3
 800901e:	d201      	bcs.n	8009024 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009020:	2301      	movs	r3, #1
 8009022:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009024:	68fb      	ldr	r3, [r7, #12]
	}
 8009026:	4618      	mov	r0, r3
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	20005528 	.word	0x20005528
 8009034:	2000552c 	.word	0x2000552c
 8009038:	20005630 	.word	0x20005630

0800903c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800903c:	b580      	push	{r7, lr}
 800903e:	b086      	sub	sp, #24
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009048:	2300      	movs	r3, #0
 800904a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d070      	beq.n	8009134 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009052:	4b3b      	ldr	r3, [pc, #236]	@ (8009140 <xTaskPriorityDisinherit+0x104>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	693a      	ldr	r2, [r7, #16]
 8009058:	429a      	cmp	r2, r3
 800905a:	d00b      	beq.n	8009074 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800905c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009060:	f383 8811 	msr	BASEPRI, r3
 8009064:	f3bf 8f6f 	isb	sy
 8009068:	f3bf 8f4f 	dsb	sy
 800906c:	60fb      	str	r3, [r7, #12]
}
 800906e:	bf00      	nop
 8009070:	bf00      	nop
 8009072:	e7fd      	b.n	8009070 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009078:	2b00      	cmp	r3, #0
 800907a:	d10b      	bne.n	8009094 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800907c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009080:	f383 8811 	msr	BASEPRI, r3
 8009084:	f3bf 8f6f 	isb	sy
 8009088:	f3bf 8f4f 	dsb	sy
 800908c:	60bb      	str	r3, [r7, #8]
}
 800908e:	bf00      	nop
 8009090:	bf00      	nop
 8009092:	e7fd      	b.n	8009090 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009098:	1e5a      	subs	r2, r3, #1
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d044      	beq.n	8009134 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d140      	bne.n	8009134 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	3304      	adds	r3, #4
 80090b6:	4618      	mov	r0, r3
 80090b8:	f7fe f980 	bl	80073bc <uxListRemove>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d115      	bne.n	80090ee <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090c6:	491f      	ldr	r1, [pc, #124]	@ (8009144 <xTaskPriorityDisinherit+0x108>)
 80090c8:	4613      	mov	r3, r2
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	4413      	add	r3, r2
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	440b      	add	r3, r1
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d10a      	bne.n	80090ee <xTaskPriorityDisinherit+0xb2>
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090dc:	2201      	movs	r2, #1
 80090de:	fa02 f303 	lsl.w	r3, r2, r3
 80090e2:	43da      	mvns	r2, r3
 80090e4:	4b18      	ldr	r3, [pc, #96]	@ (8009148 <xTaskPriorityDisinherit+0x10c>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4013      	ands	r3, r2
 80090ea:	4a17      	ldr	r2, [pc, #92]	@ (8009148 <xTaskPriorityDisinherit+0x10c>)
 80090ec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090fa:	f1c3 0207 	rsb	r2, r3, #7
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009106:	2201      	movs	r2, #1
 8009108:	409a      	lsls	r2, r3
 800910a:	4b0f      	ldr	r3, [pc, #60]	@ (8009148 <xTaskPriorityDisinherit+0x10c>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4313      	orrs	r3, r2
 8009110:	4a0d      	ldr	r2, [pc, #52]	@ (8009148 <xTaskPriorityDisinherit+0x10c>)
 8009112:	6013      	str	r3, [r2, #0]
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009118:	4613      	mov	r3, r2
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	4413      	add	r3, r2
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	4a08      	ldr	r2, [pc, #32]	@ (8009144 <xTaskPriorityDisinherit+0x108>)
 8009122:	441a      	add	r2, r3
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	3304      	adds	r3, #4
 8009128:	4619      	mov	r1, r3
 800912a:	4610      	mov	r0, r2
 800912c:	f7fe f8e9 	bl	8007302 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009130:	2301      	movs	r3, #1
 8009132:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009134:	697b      	ldr	r3, [r7, #20]
	}
 8009136:	4618      	mov	r0, r3
 8009138:	3718      	adds	r7, #24
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
 800913e:	bf00      	nop
 8009140:	20005528 	.word	0x20005528
 8009144:	2000552c 	.word	0x2000552c
 8009148:	20005630 	.word	0x20005630

0800914c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800914c:	b580      	push	{r7, lr}
 800914e:	b088      	sub	sp, #32
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800915a:	2301      	movs	r3, #1
 800915c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d079      	beq.n	8009258 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009164:	69bb      	ldr	r3, [r7, #24]
 8009166:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009168:	2b00      	cmp	r3, #0
 800916a:	d10b      	bne.n	8009184 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800916c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009170:	f383 8811 	msr	BASEPRI, r3
 8009174:	f3bf 8f6f 	isb	sy
 8009178:	f3bf 8f4f 	dsb	sy
 800917c:	60fb      	str	r3, [r7, #12]
}
 800917e:	bf00      	nop
 8009180:	bf00      	nop
 8009182:	e7fd      	b.n	8009180 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009184:	69bb      	ldr	r3, [r7, #24]
 8009186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009188:	683a      	ldr	r2, [r7, #0]
 800918a:	429a      	cmp	r2, r3
 800918c:	d902      	bls.n	8009194 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	61fb      	str	r3, [r7, #28]
 8009192:	e002      	b.n	800919a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009198:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800919e:	69fa      	ldr	r2, [r7, #28]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d059      	beq.n	8009258 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80091a8:	697a      	ldr	r2, [r7, #20]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d154      	bne.n	8009258 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80091ae:	4b2c      	ldr	r3, [pc, #176]	@ (8009260 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	69ba      	ldr	r2, [r7, #24]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d10b      	bne.n	80091d0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80091b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091bc:	f383 8811 	msr	BASEPRI, r3
 80091c0:	f3bf 8f6f 	isb	sy
 80091c4:	f3bf 8f4f 	dsb	sy
 80091c8:	60bb      	str	r3, [r7, #8]
}
 80091ca:	bf00      	nop
 80091cc:	bf00      	nop
 80091ce:	e7fd      	b.n	80091cc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091d4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	69fa      	ldr	r2, [r7, #28]
 80091da:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	699b      	ldr	r3, [r3, #24]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	db04      	blt.n	80091ee <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	f1c3 0207 	rsb	r2, r3, #7
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80091ee:	69bb      	ldr	r3, [r7, #24]
 80091f0:	6959      	ldr	r1, [r3, #20]
 80091f2:	693a      	ldr	r2, [r7, #16]
 80091f4:	4613      	mov	r3, r2
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	4413      	add	r3, r2
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	4a19      	ldr	r2, [pc, #100]	@ (8009264 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80091fe:	4413      	add	r3, r2
 8009200:	4299      	cmp	r1, r3
 8009202:	d129      	bne.n	8009258 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	3304      	adds	r3, #4
 8009208:	4618      	mov	r0, r3
 800920a:	f7fe f8d7 	bl	80073bc <uxListRemove>
 800920e:	4603      	mov	r3, r0
 8009210:	2b00      	cmp	r3, #0
 8009212:	d10a      	bne.n	800922a <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009214:	69bb      	ldr	r3, [r7, #24]
 8009216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009218:	2201      	movs	r2, #1
 800921a:	fa02 f303 	lsl.w	r3, r2, r3
 800921e:	43da      	mvns	r2, r3
 8009220:	4b11      	ldr	r3, [pc, #68]	@ (8009268 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4013      	ands	r3, r2
 8009226:	4a10      	ldr	r2, [pc, #64]	@ (8009268 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009228:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800922e:	2201      	movs	r2, #1
 8009230:	409a      	lsls	r2, r3
 8009232:	4b0d      	ldr	r3, [pc, #52]	@ (8009268 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4313      	orrs	r3, r2
 8009238:	4a0b      	ldr	r2, [pc, #44]	@ (8009268 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800923a:	6013      	str	r3, [r2, #0]
 800923c:	69bb      	ldr	r3, [r7, #24]
 800923e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009240:	4613      	mov	r3, r2
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	4413      	add	r3, r2
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	4a06      	ldr	r2, [pc, #24]	@ (8009264 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800924a:	441a      	add	r2, r3
 800924c:	69bb      	ldr	r3, [r7, #24]
 800924e:	3304      	adds	r3, #4
 8009250:	4619      	mov	r1, r3
 8009252:	4610      	mov	r0, r2
 8009254:	f7fe f855 	bl	8007302 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009258:	bf00      	nop
 800925a:	3720      	adds	r7, #32
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}
 8009260:	20005528 	.word	0x20005528
 8009264:	2000552c 	.word	0x2000552c
 8009268:	20005630 	.word	0x20005630

0800926c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800926c:	b480      	push	{r7}
 800926e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009270:	4b07      	ldr	r3, [pc, #28]	@ (8009290 <pvTaskIncrementMutexHeldCount+0x24>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d004      	beq.n	8009282 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009278:	4b05      	ldr	r3, [pc, #20]	@ (8009290 <pvTaskIncrementMutexHeldCount+0x24>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800927e:	3201      	adds	r2, #1
 8009280:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8009282:	4b03      	ldr	r3, [pc, #12]	@ (8009290 <pvTaskIncrementMutexHeldCount+0x24>)
 8009284:	681b      	ldr	r3, [r3, #0]
	}
 8009286:	4618      	mov	r0, r3
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr
 8009290:	20005528 	.word	0x20005528

08009294 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800929e:	4b29      	ldr	r3, [pc, #164]	@ (8009344 <prvAddCurrentTaskToDelayedList+0xb0>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092a4:	4b28      	ldr	r3, [pc, #160]	@ (8009348 <prvAddCurrentTaskToDelayedList+0xb4>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	3304      	adds	r3, #4
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7fe f886 	bl	80073bc <uxListRemove>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d10b      	bne.n	80092ce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80092b6:	4b24      	ldr	r3, [pc, #144]	@ (8009348 <prvAddCurrentTaskToDelayedList+0xb4>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092bc:	2201      	movs	r2, #1
 80092be:	fa02 f303 	lsl.w	r3, r2, r3
 80092c2:	43da      	mvns	r2, r3
 80092c4:	4b21      	ldr	r3, [pc, #132]	@ (800934c <prvAddCurrentTaskToDelayedList+0xb8>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4013      	ands	r3, r2
 80092ca:	4a20      	ldr	r2, [pc, #128]	@ (800934c <prvAddCurrentTaskToDelayedList+0xb8>)
 80092cc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d4:	d10a      	bne.n	80092ec <prvAddCurrentTaskToDelayedList+0x58>
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d007      	beq.n	80092ec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092dc:	4b1a      	ldr	r3, [pc, #104]	@ (8009348 <prvAddCurrentTaskToDelayedList+0xb4>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	3304      	adds	r3, #4
 80092e2:	4619      	mov	r1, r3
 80092e4:	481a      	ldr	r0, [pc, #104]	@ (8009350 <prvAddCurrentTaskToDelayedList+0xbc>)
 80092e6:	f7fe f80c 	bl	8007302 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80092ea:	e026      	b.n	800933a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	4413      	add	r3, r2
 80092f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80092f4:	4b14      	ldr	r3, [pc, #80]	@ (8009348 <prvAddCurrentTaskToDelayedList+0xb4>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	68ba      	ldr	r2, [r7, #8]
 80092fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80092fc:	68ba      	ldr	r2, [r7, #8]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	429a      	cmp	r2, r3
 8009302:	d209      	bcs.n	8009318 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009304:	4b13      	ldr	r3, [pc, #76]	@ (8009354 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	4b0f      	ldr	r3, [pc, #60]	@ (8009348 <prvAddCurrentTaskToDelayedList+0xb4>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	3304      	adds	r3, #4
 800930e:	4619      	mov	r1, r3
 8009310:	4610      	mov	r0, r2
 8009312:	f7fe f81a 	bl	800734a <vListInsert>
}
 8009316:	e010      	b.n	800933a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009318:	4b0f      	ldr	r3, [pc, #60]	@ (8009358 <prvAddCurrentTaskToDelayedList+0xc4>)
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	4b0a      	ldr	r3, [pc, #40]	@ (8009348 <prvAddCurrentTaskToDelayedList+0xb4>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	3304      	adds	r3, #4
 8009322:	4619      	mov	r1, r3
 8009324:	4610      	mov	r0, r2
 8009326:	f7fe f810 	bl	800734a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800932a:	4b0c      	ldr	r3, [pc, #48]	@ (800935c <prvAddCurrentTaskToDelayedList+0xc8>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	68ba      	ldr	r2, [r7, #8]
 8009330:	429a      	cmp	r2, r3
 8009332:	d202      	bcs.n	800933a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009334:	4a09      	ldr	r2, [pc, #36]	@ (800935c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	6013      	str	r3, [r2, #0]
}
 800933a:	bf00      	nop
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	2000562c 	.word	0x2000562c
 8009348:	20005528 	.word	0x20005528
 800934c:	20005630 	.word	0x20005630
 8009350:	20005614 	.word	0x20005614
 8009354:	200055e4 	.word	0x200055e4
 8009358:	200055e0 	.word	0x200055e0
 800935c:	20005648 	.word	0x20005648

08009360 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009360:	b480      	push	{r7}
 8009362:	b085      	sub	sp, #20
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	3b04      	subs	r3, #4
 8009370:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009378:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	3b04      	subs	r3, #4
 800937e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	f023 0201 	bic.w	r2, r3, #1
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	3b04      	subs	r3, #4
 800938e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009390:	4a0c      	ldr	r2, [pc, #48]	@ (80093c4 <pxPortInitialiseStack+0x64>)
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	3b14      	subs	r3, #20
 800939a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	3b04      	subs	r3, #4
 80093a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f06f 0202 	mvn.w	r2, #2
 80093ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	3b20      	subs	r3, #32
 80093b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80093b6:	68fb      	ldr	r3, [r7, #12]
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3714      	adds	r7, #20
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr
 80093c4:	080093c9 	.word	0x080093c9

080093c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80093c8:	b480      	push	{r7}
 80093ca:	b085      	sub	sp, #20
 80093cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80093ce:	2300      	movs	r3, #0
 80093d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80093d2:	4b13      	ldr	r3, [pc, #76]	@ (8009420 <prvTaskExitError+0x58>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093da:	d00b      	beq.n	80093f4 <prvTaskExitError+0x2c>
	__asm volatile
 80093dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093e0:	f383 8811 	msr	BASEPRI, r3
 80093e4:	f3bf 8f6f 	isb	sy
 80093e8:	f3bf 8f4f 	dsb	sy
 80093ec:	60fb      	str	r3, [r7, #12]
}
 80093ee:	bf00      	nop
 80093f0:	bf00      	nop
 80093f2:	e7fd      	b.n	80093f0 <prvTaskExitError+0x28>
	__asm volatile
 80093f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093f8:	f383 8811 	msr	BASEPRI, r3
 80093fc:	f3bf 8f6f 	isb	sy
 8009400:	f3bf 8f4f 	dsb	sy
 8009404:	60bb      	str	r3, [r7, #8]
}
 8009406:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009408:	bf00      	nop
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d0fc      	beq.n	800940a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009410:	bf00      	nop
 8009412:	bf00      	nop
 8009414:	3714      	adds	r7, #20
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr
 800941e:	bf00      	nop
 8009420:	20000024 	.word	0x20000024
	...

08009430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009430:	4b07      	ldr	r3, [pc, #28]	@ (8009450 <pxCurrentTCBConst2>)
 8009432:	6819      	ldr	r1, [r3, #0]
 8009434:	6808      	ldr	r0, [r1, #0]
 8009436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800943a:	f380 8809 	msr	PSP, r0
 800943e:	f3bf 8f6f 	isb	sy
 8009442:	f04f 0000 	mov.w	r0, #0
 8009446:	f380 8811 	msr	BASEPRI, r0
 800944a:	4770      	bx	lr
 800944c:	f3af 8000 	nop.w

08009450 <pxCurrentTCBConst2>:
 8009450:	20005528 	.word	0x20005528
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009454:	bf00      	nop
 8009456:	bf00      	nop

08009458 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009458:	4808      	ldr	r0, [pc, #32]	@ (800947c <prvPortStartFirstTask+0x24>)
 800945a:	6800      	ldr	r0, [r0, #0]
 800945c:	6800      	ldr	r0, [r0, #0]
 800945e:	f380 8808 	msr	MSP, r0
 8009462:	f04f 0000 	mov.w	r0, #0
 8009466:	f380 8814 	msr	CONTROL, r0
 800946a:	b662      	cpsie	i
 800946c:	b661      	cpsie	f
 800946e:	f3bf 8f4f 	dsb	sy
 8009472:	f3bf 8f6f 	isb	sy
 8009476:	df00      	svc	0
 8009478:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800947a:	bf00      	nop
 800947c:	e000ed08 	.word	0xe000ed08

08009480 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b086      	sub	sp, #24
 8009484:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009486:	4b47      	ldr	r3, [pc, #284]	@ (80095a4 <xPortStartScheduler+0x124>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a47      	ldr	r2, [pc, #284]	@ (80095a8 <xPortStartScheduler+0x128>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d10b      	bne.n	80094a8 <xPortStartScheduler+0x28>
	__asm volatile
 8009490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009494:	f383 8811 	msr	BASEPRI, r3
 8009498:	f3bf 8f6f 	isb	sy
 800949c:	f3bf 8f4f 	dsb	sy
 80094a0:	613b      	str	r3, [r7, #16]
}
 80094a2:	bf00      	nop
 80094a4:	bf00      	nop
 80094a6:	e7fd      	b.n	80094a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80094a8:	4b3e      	ldr	r3, [pc, #248]	@ (80095a4 <xPortStartScheduler+0x124>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a3f      	ldr	r2, [pc, #252]	@ (80095ac <xPortStartScheduler+0x12c>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d10b      	bne.n	80094ca <xPortStartScheduler+0x4a>
	__asm volatile
 80094b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094b6:	f383 8811 	msr	BASEPRI, r3
 80094ba:	f3bf 8f6f 	isb	sy
 80094be:	f3bf 8f4f 	dsb	sy
 80094c2:	60fb      	str	r3, [r7, #12]
}
 80094c4:	bf00      	nop
 80094c6:	bf00      	nop
 80094c8:	e7fd      	b.n	80094c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80094ca:	4b39      	ldr	r3, [pc, #228]	@ (80095b0 <xPortStartScheduler+0x130>)
 80094cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	22ff      	movs	r2, #255	@ 0xff
 80094da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80094e4:	78fb      	ldrb	r3, [r7, #3]
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80094ec:	b2da      	uxtb	r2, r3
 80094ee:	4b31      	ldr	r3, [pc, #196]	@ (80095b4 <xPortStartScheduler+0x134>)
 80094f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80094f2:	4b31      	ldr	r3, [pc, #196]	@ (80095b8 <xPortStartScheduler+0x138>)
 80094f4:	2207      	movs	r2, #7
 80094f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80094f8:	e009      	b.n	800950e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80094fa:	4b2f      	ldr	r3, [pc, #188]	@ (80095b8 <xPortStartScheduler+0x138>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	3b01      	subs	r3, #1
 8009500:	4a2d      	ldr	r2, [pc, #180]	@ (80095b8 <xPortStartScheduler+0x138>)
 8009502:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009504:	78fb      	ldrb	r3, [r7, #3]
 8009506:	b2db      	uxtb	r3, r3
 8009508:	005b      	lsls	r3, r3, #1
 800950a:	b2db      	uxtb	r3, r3
 800950c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800950e:	78fb      	ldrb	r3, [r7, #3]
 8009510:	b2db      	uxtb	r3, r3
 8009512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009516:	2b80      	cmp	r3, #128	@ 0x80
 8009518:	d0ef      	beq.n	80094fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800951a:	4b27      	ldr	r3, [pc, #156]	@ (80095b8 <xPortStartScheduler+0x138>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f1c3 0307 	rsb	r3, r3, #7
 8009522:	2b04      	cmp	r3, #4
 8009524:	d00b      	beq.n	800953e <xPortStartScheduler+0xbe>
	__asm volatile
 8009526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800952a:	f383 8811 	msr	BASEPRI, r3
 800952e:	f3bf 8f6f 	isb	sy
 8009532:	f3bf 8f4f 	dsb	sy
 8009536:	60bb      	str	r3, [r7, #8]
}
 8009538:	bf00      	nop
 800953a:	bf00      	nop
 800953c:	e7fd      	b.n	800953a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800953e:	4b1e      	ldr	r3, [pc, #120]	@ (80095b8 <xPortStartScheduler+0x138>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	021b      	lsls	r3, r3, #8
 8009544:	4a1c      	ldr	r2, [pc, #112]	@ (80095b8 <xPortStartScheduler+0x138>)
 8009546:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009548:	4b1b      	ldr	r3, [pc, #108]	@ (80095b8 <xPortStartScheduler+0x138>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009550:	4a19      	ldr	r2, [pc, #100]	@ (80095b8 <xPortStartScheduler+0x138>)
 8009552:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	b2da      	uxtb	r2, r3
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800955c:	4b17      	ldr	r3, [pc, #92]	@ (80095bc <xPortStartScheduler+0x13c>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a16      	ldr	r2, [pc, #88]	@ (80095bc <xPortStartScheduler+0x13c>)
 8009562:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009566:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009568:	4b14      	ldr	r3, [pc, #80]	@ (80095bc <xPortStartScheduler+0x13c>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a13      	ldr	r2, [pc, #76]	@ (80095bc <xPortStartScheduler+0x13c>)
 800956e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009572:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009574:	f000 f8da 	bl	800972c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009578:	4b11      	ldr	r3, [pc, #68]	@ (80095c0 <xPortStartScheduler+0x140>)
 800957a:	2200      	movs	r2, #0
 800957c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800957e:	f000 f8f9 	bl	8009774 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009582:	4b10      	ldr	r3, [pc, #64]	@ (80095c4 <xPortStartScheduler+0x144>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a0f      	ldr	r2, [pc, #60]	@ (80095c4 <xPortStartScheduler+0x144>)
 8009588:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800958c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800958e:	f7ff ff63 	bl	8009458 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009592:	f7ff fa6f 	bl	8008a74 <vTaskSwitchContext>
	prvTaskExitError();
 8009596:	f7ff ff17 	bl	80093c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800959a:	2300      	movs	r3, #0
}
 800959c:	4618      	mov	r0, r3
 800959e:	3718      	adds	r7, #24
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}
 80095a4:	e000ed00 	.word	0xe000ed00
 80095a8:	410fc271 	.word	0x410fc271
 80095ac:	410fc270 	.word	0x410fc270
 80095b0:	e000e400 	.word	0xe000e400
 80095b4:	20005654 	.word	0x20005654
 80095b8:	20005658 	.word	0x20005658
 80095bc:	e000ed20 	.word	0xe000ed20
 80095c0:	20000024 	.word	0x20000024
 80095c4:	e000ef34 	.word	0xe000ef34

080095c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
	__asm volatile
 80095ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095d2:	f383 8811 	msr	BASEPRI, r3
 80095d6:	f3bf 8f6f 	isb	sy
 80095da:	f3bf 8f4f 	dsb	sy
 80095de:	607b      	str	r3, [r7, #4]
}
 80095e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80095e2:	4b10      	ldr	r3, [pc, #64]	@ (8009624 <vPortEnterCritical+0x5c>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	3301      	adds	r3, #1
 80095e8:	4a0e      	ldr	r2, [pc, #56]	@ (8009624 <vPortEnterCritical+0x5c>)
 80095ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80095ec:	4b0d      	ldr	r3, [pc, #52]	@ (8009624 <vPortEnterCritical+0x5c>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d110      	bne.n	8009616 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80095f4:	4b0c      	ldr	r3, [pc, #48]	@ (8009628 <vPortEnterCritical+0x60>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d00b      	beq.n	8009616 <vPortEnterCritical+0x4e>
	__asm volatile
 80095fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009602:	f383 8811 	msr	BASEPRI, r3
 8009606:	f3bf 8f6f 	isb	sy
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	603b      	str	r3, [r7, #0]
}
 8009610:	bf00      	nop
 8009612:	bf00      	nop
 8009614:	e7fd      	b.n	8009612 <vPortEnterCritical+0x4a>
	}
}
 8009616:	bf00      	nop
 8009618:	370c      	adds	r7, #12
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr
 8009622:	bf00      	nop
 8009624:	20000024 	.word	0x20000024
 8009628:	e000ed04 	.word	0xe000ed04

0800962c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800962c:	b480      	push	{r7}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009632:	4b12      	ldr	r3, [pc, #72]	@ (800967c <vPortExitCritical+0x50>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d10b      	bne.n	8009652 <vPortExitCritical+0x26>
	__asm volatile
 800963a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800963e:	f383 8811 	msr	BASEPRI, r3
 8009642:	f3bf 8f6f 	isb	sy
 8009646:	f3bf 8f4f 	dsb	sy
 800964a:	607b      	str	r3, [r7, #4]
}
 800964c:	bf00      	nop
 800964e:	bf00      	nop
 8009650:	e7fd      	b.n	800964e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009652:	4b0a      	ldr	r3, [pc, #40]	@ (800967c <vPortExitCritical+0x50>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	3b01      	subs	r3, #1
 8009658:	4a08      	ldr	r2, [pc, #32]	@ (800967c <vPortExitCritical+0x50>)
 800965a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800965c:	4b07      	ldr	r3, [pc, #28]	@ (800967c <vPortExitCritical+0x50>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d105      	bne.n	8009670 <vPortExitCritical+0x44>
 8009664:	2300      	movs	r3, #0
 8009666:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	f383 8811 	msr	BASEPRI, r3
}
 800966e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009670:	bf00      	nop
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr
 800967c:	20000024 	.word	0x20000024

08009680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009680:	f3ef 8009 	mrs	r0, PSP
 8009684:	f3bf 8f6f 	isb	sy
 8009688:	4b15      	ldr	r3, [pc, #84]	@ (80096e0 <pxCurrentTCBConst>)
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	f01e 0f10 	tst.w	lr, #16
 8009690:	bf08      	it	eq
 8009692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800969a:	6010      	str	r0, [r2, #0]
 800969c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80096a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80096a4:	f380 8811 	msr	BASEPRI, r0
 80096a8:	f3bf 8f4f 	dsb	sy
 80096ac:	f3bf 8f6f 	isb	sy
 80096b0:	f7ff f9e0 	bl	8008a74 <vTaskSwitchContext>
 80096b4:	f04f 0000 	mov.w	r0, #0
 80096b8:	f380 8811 	msr	BASEPRI, r0
 80096bc:	bc09      	pop	{r0, r3}
 80096be:	6819      	ldr	r1, [r3, #0]
 80096c0:	6808      	ldr	r0, [r1, #0]
 80096c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c6:	f01e 0f10 	tst.w	lr, #16
 80096ca:	bf08      	it	eq
 80096cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80096d0:	f380 8809 	msr	PSP, r0
 80096d4:	f3bf 8f6f 	isb	sy
 80096d8:	4770      	bx	lr
 80096da:	bf00      	nop
 80096dc:	f3af 8000 	nop.w

080096e0 <pxCurrentTCBConst>:
 80096e0:	20005528 	.word	0x20005528
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80096e4:	bf00      	nop
 80096e6:	bf00      	nop

080096e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af00      	add	r7, sp, #0
	__asm volatile
 80096ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096f2:	f383 8811 	msr	BASEPRI, r3
 80096f6:	f3bf 8f6f 	isb	sy
 80096fa:	f3bf 8f4f 	dsb	sy
 80096fe:	607b      	str	r3, [r7, #4]
}
 8009700:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009702:	f7ff f8fd 	bl	8008900 <xTaskIncrementTick>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d003      	beq.n	8009714 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800970c:	4b06      	ldr	r3, [pc, #24]	@ (8009728 <SysTick_Handler+0x40>)
 800970e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009712:	601a      	str	r2, [r3, #0]
 8009714:	2300      	movs	r3, #0
 8009716:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	f383 8811 	msr	BASEPRI, r3
}
 800971e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009720:	bf00      	nop
 8009722:	3708      	adds	r7, #8
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}
 8009728:	e000ed04 	.word	0xe000ed04

0800972c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800972c:	b480      	push	{r7}
 800972e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009730:	4b0b      	ldr	r3, [pc, #44]	@ (8009760 <vPortSetupTimerInterrupt+0x34>)
 8009732:	2200      	movs	r2, #0
 8009734:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009736:	4b0b      	ldr	r3, [pc, #44]	@ (8009764 <vPortSetupTimerInterrupt+0x38>)
 8009738:	2200      	movs	r2, #0
 800973a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800973c:	4b0a      	ldr	r3, [pc, #40]	@ (8009768 <vPortSetupTimerInterrupt+0x3c>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a0a      	ldr	r2, [pc, #40]	@ (800976c <vPortSetupTimerInterrupt+0x40>)
 8009742:	fba2 2303 	umull	r2, r3, r2, r3
 8009746:	099b      	lsrs	r3, r3, #6
 8009748:	4a09      	ldr	r2, [pc, #36]	@ (8009770 <vPortSetupTimerInterrupt+0x44>)
 800974a:	3b01      	subs	r3, #1
 800974c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800974e:	4b04      	ldr	r3, [pc, #16]	@ (8009760 <vPortSetupTimerInterrupt+0x34>)
 8009750:	2207      	movs	r2, #7
 8009752:	601a      	str	r2, [r3, #0]
}
 8009754:	bf00      	nop
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	e000e010 	.word	0xe000e010
 8009764:	e000e018 	.word	0xe000e018
 8009768:	20000004 	.word	0x20000004
 800976c:	10624dd3 	.word	0x10624dd3
 8009770:	e000e014 	.word	0xe000e014

08009774 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009774:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009784 <vPortEnableVFP+0x10>
 8009778:	6801      	ldr	r1, [r0, #0]
 800977a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800977e:	6001      	str	r1, [r0, #0]
 8009780:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009782:	bf00      	nop
 8009784:	e000ed88 	.word	0xe000ed88

08009788 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009788:	b480      	push	{r7}
 800978a:	b085      	sub	sp, #20
 800978c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800978e:	f3ef 8305 	mrs	r3, IPSR
 8009792:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2b0f      	cmp	r3, #15
 8009798:	d915      	bls.n	80097c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800979a:	4a18      	ldr	r2, [pc, #96]	@ (80097fc <vPortValidateInterruptPriority+0x74>)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	4413      	add	r3, r2
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80097a4:	4b16      	ldr	r3, [pc, #88]	@ (8009800 <vPortValidateInterruptPriority+0x78>)
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	7afa      	ldrb	r2, [r7, #11]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d20b      	bcs.n	80097c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80097ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097b2:	f383 8811 	msr	BASEPRI, r3
 80097b6:	f3bf 8f6f 	isb	sy
 80097ba:	f3bf 8f4f 	dsb	sy
 80097be:	607b      	str	r3, [r7, #4]
}
 80097c0:	bf00      	nop
 80097c2:	bf00      	nop
 80097c4:	e7fd      	b.n	80097c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80097c6:	4b0f      	ldr	r3, [pc, #60]	@ (8009804 <vPortValidateInterruptPriority+0x7c>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80097ce:	4b0e      	ldr	r3, [pc, #56]	@ (8009808 <vPortValidateInterruptPriority+0x80>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d90b      	bls.n	80097ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80097d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097da:	f383 8811 	msr	BASEPRI, r3
 80097de:	f3bf 8f6f 	isb	sy
 80097e2:	f3bf 8f4f 	dsb	sy
 80097e6:	603b      	str	r3, [r7, #0]
}
 80097e8:	bf00      	nop
 80097ea:	bf00      	nop
 80097ec:	e7fd      	b.n	80097ea <vPortValidateInterruptPriority+0x62>
	}
 80097ee:	bf00      	nop
 80097f0:	3714      	adds	r7, #20
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr
 80097fa:	bf00      	nop
 80097fc:	e000e3f0 	.word	0xe000e3f0
 8009800:	20005654 	.word	0x20005654
 8009804:	e000ed0c 	.word	0xe000ed0c
 8009808:	20005658 	.word	0x20005658

0800980c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b08a      	sub	sp, #40	@ 0x28
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009814:	2300      	movs	r3, #0
 8009816:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009818:	f7fe ffa4 	bl	8008764 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800981c:	4b5c      	ldr	r3, [pc, #368]	@ (8009990 <pvPortMalloc+0x184>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d101      	bne.n	8009828 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009824:	f000 f924 	bl	8009a70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009828:	4b5a      	ldr	r3, [pc, #360]	@ (8009994 <pvPortMalloc+0x188>)
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	4013      	ands	r3, r2
 8009830:	2b00      	cmp	r3, #0
 8009832:	f040 8095 	bne.w	8009960 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d01e      	beq.n	800987a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800983c:	2208      	movs	r2, #8
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	4413      	add	r3, r2
 8009842:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f003 0307 	and.w	r3, r3, #7
 800984a:	2b00      	cmp	r3, #0
 800984c:	d015      	beq.n	800987a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f023 0307 	bic.w	r3, r3, #7
 8009854:	3308      	adds	r3, #8
 8009856:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f003 0307 	and.w	r3, r3, #7
 800985e:	2b00      	cmp	r3, #0
 8009860:	d00b      	beq.n	800987a <pvPortMalloc+0x6e>
	__asm volatile
 8009862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009866:	f383 8811 	msr	BASEPRI, r3
 800986a:	f3bf 8f6f 	isb	sy
 800986e:	f3bf 8f4f 	dsb	sy
 8009872:	617b      	str	r3, [r7, #20]
}
 8009874:	bf00      	nop
 8009876:	bf00      	nop
 8009878:	e7fd      	b.n	8009876 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d06f      	beq.n	8009960 <pvPortMalloc+0x154>
 8009880:	4b45      	ldr	r3, [pc, #276]	@ (8009998 <pvPortMalloc+0x18c>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	429a      	cmp	r2, r3
 8009888:	d86a      	bhi.n	8009960 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800988a:	4b44      	ldr	r3, [pc, #272]	@ (800999c <pvPortMalloc+0x190>)
 800988c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800988e:	4b43      	ldr	r3, [pc, #268]	@ (800999c <pvPortMalloc+0x190>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009894:	e004      	b.n	80098a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009898:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800989a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80098a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d903      	bls.n	80098b2 <pvPortMalloc+0xa6>
 80098aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d1f1      	bne.n	8009896 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80098b2:	4b37      	ldr	r3, [pc, #220]	@ (8009990 <pvPortMalloc+0x184>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d051      	beq.n	8009960 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80098bc:	6a3b      	ldr	r3, [r7, #32]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2208      	movs	r2, #8
 80098c2:	4413      	add	r3, r2
 80098c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80098c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	6a3b      	ldr	r3, [r7, #32]
 80098cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80098ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098d0:	685a      	ldr	r2, [r3, #4]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	1ad2      	subs	r2, r2, r3
 80098d6:	2308      	movs	r3, #8
 80098d8:	005b      	lsls	r3, r3, #1
 80098da:	429a      	cmp	r2, r3
 80098dc:	d920      	bls.n	8009920 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80098de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	4413      	add	r3, r2
 80098e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80098e6:	69bb      	ldr	r3, [r7, #24]
 80098e8:	f003 0307 	and.w	r3, r3, #7
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d00b      	beq.n	8009908 <pvPortMalloc+0xfc>
	__asm volatile
 80098f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098f4:	f383 8811 	msr	BASEPRI, r3
 80098f8:	f3bf 8f6f 	isb	sy
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	613b      	str	r3, [r7, #16]
}
 8009902:	bf00      	nop
 8009904:	bf00      	nop
 8009906:	e7fd      	b.n	8009904 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800990a:	685a      	ldr	r2, [r3, #4]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	1ad2      	subs	r2, r2, r3
 8009910:	69bb      	ldr	r3, [r7, #24]
 8009912:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800991a:	69b8      	ldr	r0, [r7, #24]
 800991c:	f000 f90a 	bl	8009b34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009920:	4b1d      	ldr	r3, [pc, #116]	@ (8009998 <pvPortMalloc+0x18c>)
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	1ad3      	subs	r3, r2, r3
 800992a:	4a1b      	ldr	r2, [pc, #108]	@ (8009998 <pvPortMalloc+0x18c>)
 800992c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800992e:	4b1a      	ldr	r3, [pc, #104]	@ (8009998 <pvPortMalloc+0x18c>)
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	4b1b      	ldr	r3, [pc, #108]	@ (80099a0 <pvPortMalloc+0x194>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	429a      	cmp	r2, r3
 8009938:	d203      	bcs.n	8009942 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800993a:	4b17      	ldr	r3, [pc, #92]	@ (8009998 <pvPortMalloc+0x18c>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a18      	ldr	r2, [pc, #96]	@ (80099a0 <pvPortMalloc+0x194>)
 8009940:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009944:	685a      	ldr	r2, [r3, #4]
 8009946:	4b13      	ldr	r3, [pc, #76]	@ (8009994 <pvPortMalloc+0x188>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	431a      	orrs	r2, r3
 800994c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800994e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009952:	2200      	movs	r2, #0
 8009954:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009956:	4b13      	ldr	r3, [pc, #76]	@ (80099a4 <pvPortMalloc+0x198>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	3301      	adds	r3, #1
 800995c:	4a11      	ldr	r2, [pc, #68]	@ (80099a4 <pvPortMalloc+0x198>)
 800995e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009960:	f7fe ff0e 	bl	8008780 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009964:	69fb      	ldr	r3, [r7, #28]
 8009966:	f003 0307 	and.w	r3, r3, #7
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00b      	beq.n	8009986 <pvPortMalloc+0x17a>
	__asm volatile
 800996e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009972:	f383 8811 	msr	BASEPRI, r3
 8009976:	f3bf 8f6f 	isb	sy
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	60fb      	str	r3, [r7, #12]
}
 8009980:	bf00      	nop
 8009982:	bf00      	nop
 8009984:	e7fd      	b.n	8009982 <pvPortMalloc+0x176>
	return pvReturn;
 8009986:	69fb      	ldr	r3, [r7, #28]
}
 8009988:	4618      	mov	r0, r3
 800998a:	3728      	adds	r7, #40	@ 0x28
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}
 8009990:	20009264 	.word	0x20009264
 8009994:	20009278 	.word	0x20009278
 8009998:	20009268 	.word	0x20009268
 800999c:	2000925c 	.word	0x2000925c
 80099a0:	2000926c 	.word	0x2000926c
 80099a4:	20009270 	.word	0x20009270

080099a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b086      	sub	sp, #24
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d04f      	beq.n	8009a5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80099ba:	2308      	movs	r3, #8
 80099bc:	425b      	negs	r3, r3
 80099be:	697a      	ldr	r2, [r7, #20]
 80099c0:	4413      	add	r3, r2
 80099c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	685a      	ldr	r2, [r3, #4]
 80099cc:	4b25      	ldr	r3, [pc, #148]	@ (8009a64 <vPortFree+0xbc>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4013      	ands	r3, r2
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d10b      	bne.n	80099ee <vPortFree+0x46>
	__asm volatile
 80099d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099da:	f383 8811 	msr	BASEPRI, r3
 80099de:	f3bf 8f6f 	isb	sy
 80099e2:	f3bf 8f4f 	dsb	sy
 80099e6:	60fb      	str	r3, [r7, #12]
}
 80099e8:	bf00      	nop
 80099ea:	bf00      	nop
 80099ec:	e7fd      	b.n	80099ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d00b      	beq.n	8009a0e <vPortFree+0x66>
	__asm volatile
 80099f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099fa:	f383 8811 	msr	BASEPRI, r3
 80099fe:	f3bf 8f6f 	isb	sy
 8009a02:	f3bf 8f4f 	dsb	sy
 8009a06:	60bb      	str	r3, [r7, #8]
}
 8009a08:	bf00      	nop
 8009a0a:	bf00      	nop
 8009a0c:	e7fd      	b.n	8009a0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	685a      	ldr	r2, [r3, #4]
 8009a12:	4b14      	ldr	r3, [pc, #80]	@ (8009a64 <vPortFree+0xbc>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4013      	ands	r3, r2
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d01e      	beq.n	8009a5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d11a      	bne.n	8009a5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	685a      	ldr	r2, [r3, #4]
 8009a28:	4b0e      	ldr	r3, [pc, #56]	@ (8009a64 <vPortFree+0xbc>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	43db      	mvns	r3, r3
 8009a2e:	401a      	ands	r2, r3
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009a34:	f7fe fe96 	bl	8008764 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	685a      	ldr	r2, [r3, #4]
 8009a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8009a68 <vPortFree+0xc0>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4413      	add	r3, r2
 8009a42:	4a09      	ldr	r2, [pc, #36]	@ (8009a68 <vPortFree+0xc0>)
 8009a44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009a46:	6938      	ldr	r0, [r7, #16]
 8009a48:	f000 f874 	bl	8009b34 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009a4c:	4b07      	ldr	r3, [pc, #28]	@ (8009a6c <vPortFree+0xc4>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	3301      	adds	r3, #1
 8009a52:	4a06      	ldr	r2, [pc, #24]	@ (8009a6c <vPortFree+0xc4>)
 8009a54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009a56:	f7fe fe93 	bl	8008780 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009a5a:	bf00      	nop
 8009a5c:	3718      	adds	r7, #24
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	20009278 	.word	0x20009278
 8009a68:	20009268 	.word	0x20009268
 8009a6c:	20009274 	.word	0x20009274

08009a70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009a70:	b480      	push	{r7}
 8009a72:	b085      	sub	sp, #20
 8009a74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009a76:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009a7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009a7c:	4b27      	ldr	r3, [pc, #156]	@ (8009b1c <prvHeapInit+0xac>)
 8009a7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f003 0307 	and.w	r3, r3, #7
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d00c      	beq.n	8009aa4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	3307      	adds	r3, #7
 8009a8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f023 0307 	bic.w	r3, r3, #7
 8009a96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009a98:	68ba      	ldr	r2, [r7, #8]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	1ad3      	subs	r3, r2, r3
 8009a9e:	4a1f      	ldr	r2, [pc, #124]	@ (8009b1c <prvHeapInit+0xac>)
 8009aa0:	4413      	add	r3, r2
 8009aa2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009aa8:	4a1d      	ldr	r2, [pc, #116]	@ (8009b20 <prvHeapInit+0xb0>)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009aae:	4b1c      	ldr	r3, [pc, #112]	@ (8009b20 <prvHeapInit+0xb0>)
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	68ba      	ldr	r2, [r7, #8]
 8009ab8:	4413      	add	r3, r2
 8009aba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009abc:	2208      	movs	r2, #8
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	1a9b      	subs	r3, r3, r2
 8009ac2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f023 0307 	bic.w	r3, r3, #7
 8009aca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	4a15      	ldr	r2, [pc, #84]	@ (8009b24 <prvHeapInit+0xb4>)
 8009ad0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009ad2:	4b14      	ldr	r3, [pc, #80]	@ (8009b24 <prvHeapInit+0xb4>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009ada:	4b12      	ldr	r3, [pc, #72]	@ (8009b24 <prvHeapInit+0xb4>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	1ad2      	subs	r2, r2, r3
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009af0:	4b0c      	ldr	r3, [pc, #48]	@ (8009b24 <prvHeapInit+0xb4>)
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	4a0a      	ldr	r2, [pc, #40]	@ (8009b28 <prvHeapInit+0xb8>)
 8009afe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	4a09      	ldr	r2, [pc, #36]	@ (8009b2c <prvHeapInit+0xbc>)
 8009b06:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009b08:	4b09      	ldr	r3, [pc, #36]	@ (8009b30 <prvHeapInit+0xc0>)
 8009b0a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009b0e:	601a      	str	r2, [r3, #0]
}
 8009b10:	bf00      	nop
 8009b12:	3714      	adds	r7, #20
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr
 8009b1c:	2000565c 	.word	0x2000565c
 8009b20:	2000925c 	.word	0x2000925c
 8009b24:	20009264 	.word	0x20009264
 8009b28:	2000926c 	.word	0x2000926c
 8009b2c:	20009268 	.word	0x20009268
 8009b30:	20009278 	.word	0x20009278

08009b34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009b34:	b480      	push	{r7}
 8009b36:	b085      	sub	sp, #20
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009b3c:	4b28      	ldr	r3, [pc, #160]	@ (8009be0 <prvInsertBlockIntoFreeList+0xac>)
 8009b3e:	60fb      	str	r3, [r7, #12]
 8009b40:	e002      	b.n	8009b48 <prvInsertBlockIntoFreeList+0x14>
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	60fb      	str	r3, [r7, #12]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d8f7      	bhi.n	8009b42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	68ba      	ldr	r2, [r7, #8]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d108      	bne.n	8009b76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	685a      	ldr	r2, [r3, #4]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	441a      	add	r2, r3
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	68ba      	ldr	r2, [r7, #8]
 8009b80:	441a      	add	r2, r3
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d118      	bne.n	8009bbc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	4b15      	ldr	r3, [pc, #84]	@ (8009be4 <prvInsertBlockIntoFreeList+0xb0>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d00d      	beq.n	8009bb2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	685a      	ldr	r2, [r3, #4]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	441a      	add	r2, r3
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	601a      	str	r2, [r3, #0]
 8009bb0:	e008      	b.n	8009bc4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8009be4 <prvInsertBlockIntoFreeList+0xb0>)
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	601a      	str	r2, [r3, #0]
 8009bba:	e003      	b.n	8009bc4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681a      	ldr	r2, [r3, #0]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009bc4:	68fa      	ldr	r2, [r7, #12]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d002      	beq.n	8009bd2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009bd2:	bf00      	nop
 8009bd4:	3714      	adds	r7, #20
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr
 8009bde:	bf00      	nop
 8009be0:	2000925c 	.word	0x2000925c
 8009be4:	20009264 	.word	0x20009264

08009be8 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009bf2:	f007 fc33 	bl	801145c <sys_timeouts_sleeptime>
 8009bf6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bfe:	d10b      	bne.n	8009c18 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009c00:	4813      	ldr	r0, [pc, #76]	@ (8009c50 <tcpip_timeouts_mbox_fetch+0x68>)
 8009c02:	f00c ffee 	bl	8016be2 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009c06:	2200      	movs	r2, #0
 8009c08:	6839      	ldr	r1, [r7, #0]
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f00c ff60 	bl	8016ad0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009c10:	480f      	ldr	r0, [pc, #60]	@ (8009c50 <tcpip_timeouts_mbox_fetch+0x68>)
 8009c12:	f00c ffd7 	bl	8016bc4 <sys_mutex_lock>
    return;
 8009c16:	e018      	b.n	8009c4a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d102      	bne.n	8009c24 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009c1e:	f007 fbe3 	bl	80113e8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009c22:	e7e6      	b.n	8009bf2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009c24:	480a      	ldr	r0, [pc, #40]	@ (8009c50 <tcpip_timeouts_mbox_fetch+0x68>)
 8009c26:	f00c ffdc 	bl	8016be2 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009c2a:	68fa      	ldr	r2, [r7, #12]
 8009c2c:	6839      	ldr	r1, [r7, #0]
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f00c ff4e 	bl	8016ad0 <sys_arch_mbox_fetch>
 8009c34:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8009c36:	4806      	ldr	r0, [pc, #24]	@ (8009c50 <tcpip_timeouts_mbox_fetch+0x68>)
 8009c38:	f00c ffc4 	bl	8016bc4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c42:	d102      	bne.n	8009c4a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009c44:	f007 fbd0 	bl	80113e8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009c48:	e7d3      	b.n	8009bf2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8009c4a:	3710      	adds	r7, #16
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	20009288 	.word	0x20009288

08009c54 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8009c5c:	4810      	ldr	r0, [pc, #64]	@ (8009ca0 <tcpip_thread+0x4c>)
 8009c5e:	f00c ffb1 	bl	8016bc4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8009c62:	4b10      	ldr	r3, [pc, #64]	@ (8009ca4 <tcpip_thread+0x50>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d005      	beq.n	8009c76 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8009c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8009ca4 <tcpip_thread+0x50>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4a0e      	ldr	r2, [pc, #56]	@ (8009ca8 <tcpip_thread+0x54>)
 8009c70:	6812      	ldr	r2, [r2, #0]
 8009c72:	4610      	mov	r0, r2
 8009c74:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009c76:	f107 030c 	add.w	r3, r7, #12
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	480b      	ldr	r0, [pc, #44]	@ (8009cac <tcpip_thread+0x58>)
 8009c7e:	f7ff ffb3 	bl	8009be8 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d106      	bne.n	8009c96 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009c88:	4b09      	ldr	r3, [pc, #36]	@ (8009cb0 <tcpip_thread+0x5c>)
 8009c8a:	2291      	movs	r2, #145	@ 0x91
 8009c8c:	4909      	ldr	r1, [pc, #36]	@ (8009cb4 <tcpip_thread+0x60>)
 8009c8e:	480a      	ldr	r0, [pc, #40]	@ (8009cb8 <tcpip_thread+0x64>)
 8009c90:	f00d f8f8 	bl	8016e84 <iprintf>
      continue;
 8009c94:	e003      	b.n	8009c9e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f000 f80f 	bl	8009cbc <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009c9e:	e7ea      	b.n	8009c76 <tcpip_thread+0x22>
 8009ca0:	20009288 	.word	0x20009288
 8009ca4:	2000927c 	.word	0x2000927c
 8009ca8:	20009280 	.word	0x20009280
 8009cac:	20009284 	.word	0x20009284
 8009cb0:	08018354 	.word	0x08018354
 8009cb4:	08018384 	.word	0x08018384
 8009cb8:	080183a4 	.word	0x080183a4

08009cbc <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	2b02      	cmp	r3, #2
 8009cca:	d026      	beq.n	8009d1a <tcpip_thread_handle_msg+0x5e>
 8009ccc:	2b02      	cmp	r3, #2
 8009cce:	dc2b      	bgt.n	8009d28 <tcpip_thread_handle_msg+0x6c>
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d002      	beq.n	8009cda <tcpip_thread_handle_msg+0x1e>
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d015      	beq.n	8009d04 <tcpip_thread_handle_msg+0x48>
 8009cd8:	e026      	b.n	8009d28 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	6850      	ldr	r0, [r2, #4]
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	6892      	ldr	r2, [r2, #8]
 8009ce6:	4611      	mov	r1, r2
 8009ce8:	4798      	blx	r3
 8009cea:	4603      	mov	r3, r0
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d004      	beq.n	8009cfa <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f001 fe6d 	bl	800b9d4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009cfa:	6879      	ldr	r1, [r7, #4]
 8009cfc:	2009      	movs	r0, #9
 8009cfe:	f000 fed3 	bl	800aaa8 <memp_free>
      break;
 8009d02:	e018      	b.n	8009d36 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	6892      	ldr	r2, [r2, #8]
 8009d0c:	4610      	mov	r0, r2
 8009d0e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009d10:	6879      	ldr	r1, [r7, #4]
 8009d12:	2008      	movs	r0, #8
 8009d14:	f000 fec8 	bl	800aaa8 <memp_free>
      break;
 8009d18:	e00d      	b.n	8009d36 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	6892      	ldr	r2, [r2, #8]
 8009d22:	4610      	mov	r0, r2
 8009d24:	4798      	blx	r3
      break;
 8009d26:	e006      	b.n	8009d36 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009d28:	4b05      	ldr	r3, [pc, #20]	@ (8009d40 <tcpip_thread_handle_msg+0x84>)
 8009d2a:	22cf      	movs	r2, #207	@ 0xcf
 8009d2c:	4905      	ldr	r1, [pc, #20]	@ (8009d44 <tcpip_thread_handle_msg+0x88>)
 8009d2e:	4806      	ldr	r0, [pc, #24]	@ (8009d48 <tcpip_thread_handle_msg+0x8c>)
 8009d30:	f00d f8a8 	bl	8016e84 <iprintf>
      break;
 8009d34:	bf00      	nop
  }
}
 8009d36:	bf00      	nop
 8009d38:	3708      	adds	r7, #8
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	08018354 	.word	0x08018354
 8009d44:	08018384 	.word	0x08018384
 8009d48:	080183a4 	.word	0x080183a4

08009d4c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b086      	sub	sp, #24
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009d58:	481a      	ldr	r0, [pc, #104]	@ (8009dc4 <tcpip_inpkt+0x78>)
 8009d5a:	f00c fef8 	bl	8016b4e <sys_mbox_valid>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d105      	bne.n	8009d70 <tcpip_inpkt+0x24>
 8009d64:	4b18      	ldr	r3, [pc, #96]	@ (8009dc8 <tcpip_inpkt+0x7c>)
 8009d66:	22fc      	movs	r2, #252	@ 0xfc
 8009d68:	4918      	ldr	r1, [pc, #96]	@ (8009dcc <tcpip_inpkt+0x80>)
 8009d6a:	4819      	ldr	r0, [pc, #100]	@ (8009dd0 <tcpip_inpkt+0x84>)
 8009d6c:	f00d f88a 	bl	8016e84 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009d70:	2009      	movs	r0, #9
 8009d72:	f000 fe23 	bl	800a9bc <memp_malloc>
 8009d76:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d102      	bne.n	8009d84 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d82:	e01a      	b.n	8009dba <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	2200      	movs	r2, #0
 8009d88:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	68fa      	ldr	r2, [r7, #12]
 8009d8e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	68ba      	ldr	r2, [r7, #8]
 8009d94:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009d9c:	6979      	ldr	r1, [r7, #20]
 8009d9e:	4809      	ldr	r0, [pc, #36]	@ (8009dc4 <tcpip_inpkt+0x78>)
 8009da0:	f00c fe7c 	bl	8016a9c <sys_mbox_trypost>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d006      	beq.n	8009db8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009daa:	6979      	ldr	r1, [r7, #20]
 8009dac:	2009      	movs	r0, #9
 8009dae:	f000 fe7b 	bl	800aaa8 <memp_free>
    return ERR_MEM;
 8009db2:	f04f 33ff 	mov.w	r3, #4294967295
 8009db6:	e000      	b.n	8009dba <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009db8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3718      	adds	r7, #24
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	20009284 	.word	0x20009284
 8009dc8:	08018354 	.word	0x08018354
 8009dcc:	080183cc 	.word	0x080183cc
 8009dd0:	080183a4 	.word	0x080183a4

08009dd4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009de4:	f003 0318 	and.w	r3, r3, #24
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d006      	beq.n	8009dfa <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009dec:	4a08      	ldr	r2, [pc, #32]	@ (8009e10 <tcpip_input+0x3c>)
 8009dee:	6839      	ldr	r1, [r7, #0]
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f7ff ffab 	bl	8009d4c <tcpip_inpkt>
 8009df6:	4603      	mov	r3, r0
 8009df8:	e005      	b.n	8009e06 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8009dfa:	4a06      	ldr	r2, [pc, #24]	@ (8009e14 <tcpip_input+0x40>)
 8009dfc:	6839      	ldr	r1, [r7, #0]
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f7ff ffa4 	bl	8009d4c <tcpip_inpkt>
 8009e04:	4603      	mov	r3, r0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3708      	adds	r7, #8
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	080168ad 	.word	0x080168ad
 8009e14:	080154fd 	.word	0x080154fd

08009e18 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009e22:	4819      	ldr	r0, [pc, #100]	@ (8009e88 <tcpip_try_callback+0x70>)
 8009e24:	f00c fe93 	bl	8016b4e <sys_mbox_valid>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d106      	bne.n	8009e3c <tcpip_try_callback+0x24>
 8009e2e:	4b17      	ldr	r3, [pc, #92]	@ (8009e8c <tcpip_try_callback+0x74>)
 8009e30:	f240 125d 	movw	r2, #349	@ 0x15d
 8009e34:	4916      	ldr	r1, [pc, #88]	@ (8009e90 <tcpip_try_callback+0x78>)
 8009e36:	4817      	ldr	r0, [pc, #92]	@ (8009e94 <tcpip_try_callback+0x7c>)
 8009e38:	f00d f824 	bl	8016e84 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009e3c:	2008      	movs	r0, #8
 8009e3e:	f000 fdbd 	bl	800a9bc <memp_malloc>
 8009e42:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d102      	bne.n	8009e50 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8009e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e4e:	e017      	b.n	8009e80 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2201      	movs	r2, #1
 8009e54:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	683a      	ldr	r2, [r7, #0]
 8009e60:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009e62:	68f9      	ldr	r1, [r7, #12]
 8009e64:	4808      	ldr	r0, [pc, #32]	@ (8009e88 <tcpip_try_callback+0x70>)
 8009e66:	f00c fe19 	bl	8016a9c <sys_mbox_trypost>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d006      	beq.n	8009e7e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8009e70:	68f9      	ldr	r1, [r7, #12]
 8009e72:	2008      	movs	r0, #8
 8009e74:	f000 fe18 	bl	800aaa8 <memp_free>
    return ERR_MEM;
 8009e78:	f04f 33ff 	mov.w	r3, #4294967295
 8009e7c:	e000      	b.n	8009e80 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8009e7e:	2300      	movs	r3, #0
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3710      	adds	r7, #16
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}
 8009e88:	20009284 	.word	0x20009284
 8009e8c:	08018354 	.word	0x08018354
 8009e90:	080183cc 	.word	0x080183cc
 8009e94:	080183a4 	.word	0x080183a4

08009e98 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af02      	add	r7, sp, #8
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009ea2:	f000 f8e0 	bl	800a066 <lwip_init>

  tcpip_init_done = initfunc;
 8009ea6:	4a17      	ldr	r2, [pc, #92]	@ (8009f04 <tcpip_init+0x6c>)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009eac:	4a16      	ldr	r2, [pc, #88]	@ (8009f08 <tcpip_init+0x70>)
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009eb2:	2106      	movs	r1, #6
 8009eb4:	4815      	ldr	r0, [pc, #84]	@ (8009f0c <tcpip_init+0x74>)
 8009eb6:	f00c fdcf 	bl	8016a58 <sys_mbox_new>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d006      	beq.n	8009ece <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009ec0:	4b13      	ldr	r3, [pc, #76]	@ (8009f10 <tcpip_init+0x78>)
 8009ec2:	f240 2261 	movw	r2, #609	@ 0x261
 8009ec6:	4913      	ldr	r1, [pc, #76]	@ (8009f14 <tcpip_init+0x7c>)
 8009ec8:	4813      	ldr	r0, [pc, #76]	@ (8009f18 <tcpip_init+0x80>)
 8009eca:	f00c ffdb 	bl	8016e84 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009ece:	4813      	ldr	r0, [pc, #76]	@ (8009f1c <tcpip_init+0x84>)
 8009ed0:	f00c fe5c 	bl	8016b8c <sys_mutex_new>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d006      	beq.n	8009ee8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8009eda:	4b0d      	ldr	r3, [pc, #52]	@ (8009f10 <tcpip_init+0x78>)
 8009edc:	f240 2265 	movw	r2, #613	@ 0x265
 8009ee0:	490f      	ldr	r1, [pc, #60]	@ (8009f20 <tcpip_init+0x88>)
 8009ee2:	480d      	ldr	r0, [pc, #52]	@ (8009f18 <tcpip_init+0x80>)
 8009ee4:	f00c ffce 	bl	8016e84 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8009ee8:	2300      	movs	r3, #0
 8009eea:	9300      	str	r3, [sp, #0]
 8009eec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	490c      	ldr	r1, [pc, #48]	@ (8009f24 <tcpip_init+0x8c>)
 8009ef4:	480c      	ldr	r0, [pc, #48]	@ (8009f28 <tcpip_init+0x90>)
 8009ef6:	f00c fe81 	bl	8016bfc <sys_thread_new>
}
 8009efa:	bf00      	nop
 8009efc:	3708      	adds	r7, #8
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop
 8009f04:	2000927c 	.word	0x2000927c
 8009f08:	20009280 	.word	0x20009280
 8009f0c:	20009284 	.word	0x20009284
 8009f10:	08018354 	.word	0x08018354
 8009f14:	080183dc 	.word	0x080183dc
 8009f18:	080183a4 	.word	0x080183a4
 8009f1c:	20009288 	.word	0x20009288
 8009f20:	08018400 	.word	0x08018400
 8009f24:	08009c55 	.word	0x08009c55
 8009f28:	08018424 	.word	0x08018424

08009f2c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	4603      	mov	r3, r0
 8009f34:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009f36:	88fb      	ldrh	r3, [r7, #6]
 8009f38:	021b      	lsls	r3, r3, #8
 8009f3a:	b21a      	sxth	r2, r3
 8009f3c:	88fb      	ldrh	r3, [r7, #6]
 8009f3e:	0a1b      	lsrs	r3, r3, #8
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	b21b      	sxth	r3, r3
 8009f44:	4313      	orrs	r3, r2
 8009f46:	b21b      	sxth	r3, r3
 8009f48:	b29b      	uxth	r3, r3
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	370c      	adds	r7, #12
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f54:	4770      	bx	lr

08009f56 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009f56:	b480      	push	{r7}
 8009f58:	b083      	sub	sp, #12
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	061a      	lsls	r2, r3, #24
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	021b      	lsls	r3, r3, #8
 8009f66:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009f6a:	431a      	orrs	r2, r3
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	0a1b      	lsrs	r3, r3, #8
 8009f70:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009f74:	431a      	orrs	r2, r3
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	0e1b      	lsrs	r3, r3, #24
 8009f7a:	4313      	orrs	r3, r2
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	370c      	adds	r7, #12
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr

08009f88 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b089      	sub	sp, #36	@ 0x24
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8009f96:	2300      	movs	r3, #0
 8009f98:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8009f9e:	69fb      	ldr	r3, [r7, #28]
 8009fa0:	f003 0301 	and.w	r3, r3, #1
 8009fa4:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00d      	beq.n	8009fc8 <lwip_standard_chksum+0x40>
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	dd0a      	ble.n	8009fc8 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8009fb2:	69fa      	ldr	r2, [r7, #28]
 8009fb4:	1c53      	adds	r3, r2, #1
 8009fb6:	61fb      	str	r3, [r7, #28]
 8009fb8:	f107 030e 	add.w	r3, r7, #14
 8009fbc:	3301      	adds	r3, #1
 8009fbe:	7812      	ldrb	r2, [r2, #0]
 8009fc0:	701a      	strb	r2, [r3, #0]
    len--;
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	3b01      	subs	r3, #1
 8009fc6:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8009fc8:	69fb      	ldr	r3, [r7, #28]
 8009fca:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8009fcc:	e00a      	b.n	8009fe4 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8009fce:	69bb      	ldr	r3, [r7, #24]
 8009fd0:	1c9a      	adds	r2, r3, #2
 8009fd2:	61ba      	str	r2, [r7, #24]
 8009fd4:	881b      	ldrh	r3, [r3, #0]
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	4413      	add	r3, r2
 8009fdc:	617b      	str	r3, [r7, #20]
    len -= 2;
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	3b02      	subs	r3, #2
 8009fe2:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	dcf1      	bgt.n	8009fce <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	dd04      	ble.n	8009ffa <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8009ff0:	f107 030e 	add.w	r3, r7, #14
 8009ff4:	69ba      	ldr	r2, [r7, #24]
 8009ff6:	7812      	ldrb	r2, [r2, #0]
 8009ff8:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8009ffa:	89fb      	ldrh	r3, [r7, #14]
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	4413      	add	r3, r2
 800a002:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	0c1a      	lsrs	r2, r3, #16
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	4413      	add	r3, r2
 800a00e:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	0c1a      	lsrs	r2, r3, #16
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	b29b      	uxth	r3, r3
 800a018:	4413      	add	r3, r2
 800a01a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d007      	beq.n	800a032 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	021b      	lsls	r3, r3, #8
 800a026:	b29a      	uxth	r2, r3
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	0a1b      	lsrs	r3, r3, #8
 800a02c:	b2db      	uxtb	r3, r3
 800a02e:	4313      	orrs	r3, r2
 800a030:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	b29b      	uxth	r3, r3
}
 800a036:	4618      	mov	r0, r3
 800a038:	3724      	adds	r7, #36	@ 0x24
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr

0800a042 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800a042:	b580      	push	{r7, lr}
 800a044:	b082      	sub	sp, #8
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
 800a04a:	460b      	mov	r3, r1
 800a04c:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800a04e:	887b      	ldrh	r3, [r7, #2]
 800a050:	4619      	mov	r1, r3
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f7ff ff98 	bl	8009f88 <lwip_standard_chksum>
 800a058:	4603      	mov	r3, r0
 800a05a:	43db      	mvns	r3, r3
 800a05c:	b29b      	uxth	r3, r3
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3708      	adds	r7, #8
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}

0800a066 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a066:	b580      	push	{r7, lr}
 800a068:	b082      	sub	sp, #8
 800a06a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a06c:	2300      	movs	r3, #0
 800a06e:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a070:	f00c fd7e 	bl	8016b70 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a074:	f000 f8d6 	bl	800a224 <mem_init>
  memp_init();
 800a078:	f000 fc32 	bl	800a8e0 <memp_init>
  pbuf_init();
  netif_init();
 800a07c:	f000 fd3e 	bl	800aafc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a080:	f007 fa24 	bl	80114cc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a084:	f001 ff50 	bl	800bf28 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
 800a088:	f00a fee6 	bl	8014e58 <igmp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a08c:	f007 f964 	bl	8011358 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a090:	bf00      	nop
 800a092:	3708      	adds	r7, #8
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	4603      	mov	r3, r0
 800a0a0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a0a2:	4b05      	ldr	r3, [pc, #20]	@ (800a0b8 <ptr_to_mem+0x20>)
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	88fb      	ldrh	r3, [r7, #6]
 800a0a8:	4413      	add	r3, r2
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	370c      	adds	r7, #12
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr
 800a0b6:	bf00      	nop
 800a0b8:	200098f8 	.word	0x200098f8

0800a0bc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b083      	sub	sp, #12
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a0c4:	4b05      	ldr	r3, [pc, #20]	@ (800a0dc <mem_to_ptr+0x20>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	1ad3      	subs	r3, r2, r3
 800a0cc:	b29b      	uxth	r3, r3
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	370c      	adds	r7, #12
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop
 800a0dc:	200098f8 	.word	0x200098f8

0800a0e0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a0e0:	b590      	push	{r4, r7, lr}
 800a0e2:	b085      	sub	sp, #20
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a0e8:	4b45      	ldr	r3, [pc, #276]	@ (800a200 <plug_holes+0x120>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d206      	bcs.n	800a100 <plug_holes+0x20>
 800a0f2:	4b44      	ldr	r3, [pc, #272]	@ (800a204 <plug_holes+0x124>)
 800a0f4:	f240 12df 	movw	r2, #479	@ 0x1df
 800a0f8:	4943      	ldr	r1, [pc, #268]	@ (800a208 <plug_holes+0x128>)
 800a0fa:	4844      	ldr	r0, [pc, #272]	@ (800a20c <plug_holes+0x12c>)
 800a0fc:	f00c fec2 	bl	8016e84 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a100:	4b43      	ldr	r3, [pc, #268]	@ (800a210 <plug_holes+0x130>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	429a      	cmp	r2, r3
 800a108:	d306      	bcc.n	800a118 <plug_holes+0x38>
 800a10a:	4b3e      	ldr	r3, [pc, #248]	@ (800a204 <plug_holes+0x124>)
 800a10c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800a110:	4940      	ldr	r1, [pc, #256]	@ (800a214 <plug_holes+0x134>)
 800a112:	483e      	ldr	r0, [pc, #248]	@ (800a20c <plug_holes+0x12c>)
 800a114:	f00c feb6 	bl	8016e84 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	791b      	ldrb	r3, [r3, #4]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d006      	beq.n	800a12e <plug_holes+0x4e>
 800a120:	4b38      	ldr	r3, [pc, #224]	@ (800a204 <plug_holes+0x124>)
 800a122:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800a126:	493c      	ldr	r1, [pc, #240]	@ (800a218 <plug_holes+0x138>)
 800a128:	4838      	ldr	r0, [pc, #224]	@ (800a20c <plug_holes+0x12c>)
 800a12a:	f00c feab 	bl	8016e84 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	881b      	ldrh	r3, [r3, #0]
 800a132:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a136:	d906      	bls.n	800a146 <plug_holes+0x66>
 800a138:	4b32      	ldr	r3, [pc, #200]	@ (800a204 <plug_holes+0x124>)
 800a13a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800a13e:	4937      	ldr	r1, [pc, #220]	@ (800a21c <plug_holes+0x13c>)
 800a140:	4832      	ldr	r0, [pc, #200]	@ (800a20c <plug_holes+0x12c>)
 800a142:	f00c fe9f 	bl	8016e84 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	881b      	ldrh	r3, [r3, #0]
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7ff ffa4 	bl	800a098 <ptr_to_mem>
 800a150:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	429a      	cmp	r2, r3
 800a158:	d024      	beq.n	800a1a4 <plug_holes+0xc4>
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	791b      	ldrb	r3, [r3, #4]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d120      	bne.n	800a1a4 <plug_holes+0xc4>
 800a162:	4b2b      	ldr	r3, [pc, #172]	@ (800a210 <plug_holes+0x130>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	68fa      	ldr	r2, [r7, #12]
 800a168:	429a      	cmp	r2, r3
 800a16a:	d01b      	beq.n	800a1a4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a16c:	4b2c      	ldr	r3, [pc, #176]	@ (800a220 <plug_holes+0x140>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	68fa      	ldr	r2, [r7, #12]
 800a172:	429a      	cmp	r2, r3
 800a174:	d102      	bne.n	800a17c <plug_holes+0x9c>
      lfree = mem;
 800a176:	4a2a      	ldr	r2, [pc, #168]	@ (800a220 <plug_holes+0x140>)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	881a      	ldrh	r2, [r3, #0]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	881b      	ldrh	r3, [r3, #0]
 800a188:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a18c:	d00a      	beq.n	800a1a4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	881b      	ldrh	r3, [r3, #0]
 800a192:	4618      	mov	r0, r3
 800a194:	f7ff ff80 	bl	800a098 <ptr_to_mem>
 800a198:	4604      	mov	r4, r0
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f7ff ff8e 	bl	800a0bc <mem_to_ptr>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	885b      	ldrh	r3, [r3, #2]
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f7ff ff75 	bl	800a098 <ptr_to_mem>
 800a1ae:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a1b0:	68ba      	ldr	r2, [r7, #8]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d01f      	beq.n	800a1f8 <plug_holes+0x118>
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	791b      	ldrb	r3, [r3, #4]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d11b      	bne.n	800a1f8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a1c0:	4b17      	ldr	r3, [pc, #92]	@ (800a220 <plug_holes+0x140>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d102      	bne.n	800a1d0 <plug_holes+0xf0>
      lfree = pmem;
 800a1ca:	4a15      	ldr	r2, [pc, #84]	@ (800a220 <plug_holes+0x140>)
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	881a      	ldrh	r2, [r3, #0]
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	881b      	ldrh	r3, [r3, #0]
 800a1dc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a1e0:	d00a      	beq.n	800a1f8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	881b      	ldrh	r3, [r3, #0]
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7ff ff56 	bl	800a098 <ptr_to_mem>
 800a1ec:	4604      	mov	r4, r0
 800a1ee:	68b8      	ldr	r0, [r7, #8]
 800a1f0:	f7ff ff64 	bl	800a0bc <mem_to_ptr>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a1f8:	bf00      	nop
 800a1fa:	3714      	adds	r7, #20
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd90      	pop	{r4, r7, pc}
 800a200:	200098f8 	.word	0x200098f8
 800a204:	08018434 	.word	0x08018434
 800a208:	08018464 	.word	0x08018464
 800a20c:	0801847c 	.word	0x0801847c
 800a210:	200098fc 	.word	0x200098fc
 800a214:	080184a4 	.word	0x080184a4
 800a218:	080184c0 	.word	0x080184c0
 800a21c:	080184dc 	.word	0x080184dc
 800a220:	20009904 	.word	0x20009904

0800a224 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a22a:	4b1f      	ldr	r3, [pc, #124]	@ (800a2a8 <mem_init+0x84>)
 800a22c:	3303      	adds	r3, #3
 800a22e:	f023 0303 	bic.w	r3, r3, #3
 800a232:	461a      	mov	r2, r3
 800a234:	4b1d      	ldr	r3, [pc, #116]	@ (800a2ac <mem_init+0x88>)
 800a236:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a238:	4b1c      	ldr	r3, [pc, #112]	@ (800a2ac <mem_init+0x88>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800a244:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2200      	movs	r2, #0
 800a24a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2200      	movs	r2, #0
 800a250:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a252:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800a256:	f7ff ff1f 	bl	800a098 <ptr_to_mem>
 800a25a:	4603      	mov	r3, r0
 800a25c:	4a14      	ldr	r2, [pc, #80]	@ (800a2b0 <mem_init+0x8c>)
 800a25e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a260:	4b13      	ldr	r3, [pc, #76]	@ (800a2b0 <mem_init+0x8c>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2201      	movs	r2, #1
 800a266:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a268:	4b11      	ldr	r3, [pc, #68]	@ (800a2b0 <mem_init+0x8c>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800a270:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a272:	4b0f      	ldr	r3, [pc, #60]	@ (800a2b0 <mem_init+0x8c>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800a27a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a27c:	4b0b      	ldr	r3, [pc, #44]	@ (800a2ac <mem_init+0x88>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a0c      	ldr	r2, [pc, #48]	@ (800a2b4 <mem_init+0x90>)
 800a282:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a284:	480c      	ldr	r0, [pc, #48]	@ (800a2b8 <mem_init+0x94>)
 800a286:	f00c fc81 	bl	8016b8c <sys_mutex_new>
 800a28a:	4603      	mov	r3, r0
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d006      	beq.n	800a29e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a290:	4b0a      	ldr	r3, [pc, #40]	@ (800a2bc <mem_init+0x98>)
 800a292:	f240 221f 	movw	r2, #543	@ 0x21f
 800a296:	490a      	ldr	r1, [pc, #40]	@ (800a2c0 <mem_init+0x9c>)
 800a298:	480a      	ldr	r0, [pc, #40]	@ (800a2c4 <mem_init+0xa0>)
 800a29a:	f00c fdf3 	bl	8016e84 <iprintf>
  }
}
 800a29e:	bf00      	nop
 800a2a0:	3708      	adds	r7, #8
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	200092a4 	.word	0x200092a4
 800a2ac:	200098f8 	.word	0x200098f8
 800a2b0:	200098fc 	.word	0x200098fc
 800a2b4:	20009904 	.word	0x20009904
 800a2b8:	20009900 	.word	0x20009900
 800a2bc:	08018434 	.word	0x08018434
 800a2c0:	08018508 	.word	0x08018508
 800a2c4:	0801847c 	.word	0x0801847c

0800a2c8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b086      	sub	sp, #24
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f7ff fef3 	bl	800a0bc <mem_to_ptr>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	881b      	ldrh	r3, [r3, #0]
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7ff feda 	bl	800a098 <ptr_to_mem>
 800a2e4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	885b      	ldrh	r3, [r3, #2]
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f7ff fed4 	bl	800a098 <ptr_to_mem>
 800a2f0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	881b      	ldrh	r3, [r3, #0]
 800a2f6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a2fa:	d818      	bhi.n	800a32e <mem_link_valid+0x66>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	885b      	ldrh	r3, [r3, #2]
 800a300:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a304:	d813      	bhi.n	800a32e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a30a:	8afa      	ldrh	r2, [r7, #22]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d004      	beq.n	800a31a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	881b      	ldrh	r3, [r3, #0]
 800a314:	8afa      	ldrh	r2, [r7, #22]
 800a316:	429a      	cmp	r2, r3
 800a318:	d109      	bne.n	800a32e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a31a:	4b08      	ldr	r3, [pc, #32]	@ (800a33c <mem_link_valid+0x74>)
 800a31c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a31e:	693a      	ldr	r2, [r7, #16]
 800a320:	429a      	cmp	r2, r3
 800a322:	d006      	beq.n	800a332 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	885b      	ldrh	r3, [r3, #2]
 800a328:	8afa      	ldrh	r2, [r7, #22]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d001      	beq.n	800a332 <mem_link_valid+0x6a>
    return 0;
 800a32e:	2300      	movs	r3, #0
 800a330:	e000      	b.n	800a334 <mem_link_valid+0x6c>
  }
  return 1;
 800a332:	2301      	movs	r3, #1
}
 800a334:	4618      	mov	r0, r3
 800a336:	3718      	adds	r7, #24
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}
 800a33c:	200098fc 	.word	0x200098fc

0800a340 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b088      	sub	sp, #32
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d070      	beq.n	800a430 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f003 0303 	and.w	r3, r3, #3
 800a354:	2b00      	cmp	r3, #0
 800a356:	d00d      	beq.n	800a374 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a358:	4b37      	ldr	r3, [pc, #220]	@ (800a438 <mem_free+0xf8>)
 800a35a:	f240 2273 	movw	r2, #627	@ 0x273
 800a35e:	4937      	ldr	r1, [pc, #220]	@ (800a43c <mem_free+0xfc>)
 800a360:	4837      	ldr	r0, [pc, #220]	@ (800a440 <mem_free+0x100>)
 800a362:	f00c fd8f 	bl	8016e84 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a366:	f00c fc6f 	bl	8016c48 <sys_arch_protect>
 800a36a:	60f8      	str	r0, [r7, #12]
 800a36c:	68f8      	ldr	r0, [r7, #12]
 800a36e:	f00c fc79 	bl	8016c64 <sys_arch_unprotect>
    return;
 800a372:	e05e      	b.n	800a432 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	3b08      	subs	r3, #8
 800a378:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a37a:	4b32      	ldr	r3, [pc, #200]	@ (800a444 <mem_free+0x104>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	69fa      	ldr	r2, [r7, #28]
 800a380:	429a      	cmp	r2, r3
 800a382:	d306      	bcc.n	800a392 <mem_free+0x52>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f103 020c 	add.w	r2, r3, #12
 800a38a:	4b2f      	ldr	r3, [pc, #188]	@ (800a448 <mem_free+0x108>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	429a      	cmp	r2, r3
 800a390:	d90d      	bls.n	800a3ae <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a392:	4b29      	ldr	r3, [pc, #164]	@ (800a438 <mem_free+0xf8>)
 800a394:	f240 227f 	movw	r2, #639	@ 0x27f
 800a398:	492c      	ldr	r1, [pc, #176]	@ (800a44c <mem_free+0x10c>)
 800a39a:	4829      	ldr	r0, [pc, #164]	@ (800a440 <mem_free+0x100>)
 800a39c:	f00c fd72 	bl	8016e84 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a3a0:	f00c fc52 	bl	8016c48 <sys_arch_protect>
 800a3a4:	6138      	str	r0, [r7, #16]
 800a3a6:	6938      	ldr	r0, [r7, #16]
 800a3a8:	f00c fc5c 	bl	8016c64 <sys_arch_unprotect>
    return;
 800a3ac:	e041      	b.n	800a432 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a3ae:	4828      	ldr	r0, [pc, #160]	@ (800a450 <mem_free+0x110>)
 800a3b0:	f00c fc08 	bl	8016bc4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a3b4:	69fb      	ldr	r3, [r7, #28]
 800a3b6:	791b      	ldrb	r3, [r3, #4]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d110      	bne.n	800a3de <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a3bc:	4b1e      	ldr	r3, [pc, #120]	@ (800a438 <mem_free+0xf8>)
 800a3be:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800a3c2:	4924      	ldr	r1, [pc, #144]	@ (800a454 <mem_free+0x114>)
 800a3c4:	481e      	ldr	r0, [pc, #120]	@ (800a440 <mem_free+0x100>)
 800a3c6:	f00c fd5d 	bl	8016e84 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a3ca:	4821      	ldr	r0, [pc, #132]	@ (800a450 <mem_free+0x110>)
 800a3cc:	f00c fc09 	bl	8016be2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a3d0:	f00c fc3a 	bl	8016c48 <sys_arch_protect>
 800a3d4:	6178      	str	r0, [r7, #20]
 800a3d6:	6978      	ldr	r0, [r7, #20]
 800a3d8:	f00c fc44 	bl	8016c64 <sys_arch_unprotect>
    return;
 800a3dc:	e029      	b.n	800a432 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a3de:	69f8      	ldr	r0, [r7, #28]
 800a3e0:	f7ff ff72 	bl	800a2c8 <mem_link_valid>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d110      	bne.n	800a40c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a3ea:	4b13      	ldr	r3, [pc, #76]	@ (800a438 <mem_free+0xf8>)
 800a3ec:	f240 2295 	movw	r2, #661	@ 0x295
 800a3f0:	4919      	ldr	r1, [pc, #100]	@ (800a458 <mem_free+0x118>)
 800a3f2:	4813      	ldr	r0, [pc, #76]	@ (800a440 <mem_free+0x100>)
 800a3f4:	f00c fd46 	bl	8016e84 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a3f8:	4815      	ldr	r0, [pc, #84]	@ (800a450 <mem_free+0x110>)
 800a3fa:	f00c fbf2 	bl	8016be2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a3fe:	f00c fc23 	bl	8016c48 <sys_arch_protect>
 800a402:	61b8      	str	r0, [r7, #24]
 800a404:	69b8      	ldr	r0, [r7, #24]
 800a406:	f00c fc2d 	bl	8016c64 <sys_arch_unprotect>
    return;
 800a40a:	e012      	b.n	800a432 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a40c:	69fb      	ldr	r3, [r7, #28]
 800a40e:	2200      	movs	r2, #0
 800a410:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a412:	4b12      	ldr	r3, [pc, #72]	@ (800a45c <mem_free+0x11c>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	69fa      	ldr	r2, [r7, #28]
 800a418:	429a      	cmp	r2, r3
 800a41a:	d202      	bcs.n	800a422 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a41c:	4a0f      	ldr	r2, [pc, #60]	@ (800a45c <mem_free+0x11c>)
 800a41e:	69fb      	ldr	r3, [r7, #28]
 800a420:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a422:	69f8      	ldr	r0, [r7, #28]
 800a424:	f7ff fe5c 	bl	800a0e0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a428:	4809      	ldr	r0, [pc, #36]	@ (800a450 <mem_free+0x110>)
 800a42a:	f00c fbda 	bl	8016be2 <sys_mutex_unlock>
 800a42e:	e000      	b.n	800a432 <mem_free+0xf2>
    return;
 800a430:	bf00      	nop
}
 800a432:	3720      	adds	r7, #32
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}
 800a438:	08018434 	.word	0x08018434
 800a43c:	08018524 	.word	0x08018524
 800a440:	0801847c 	.word	0x0801847c
 800a444:	200098f8 	.word	0x200098f8
 800a448:	200098fc 	.word	0x200098fc
 800a44c:	08018548 	.word	0x08018548
 800a450:	20009900 	.word	0x20009900
 800a454:	08018564 	.word	0x08018564
 800a458:	0801858c 	.word	0x0801858c
 800a45c:	20009904 	.word	0x20009904

0800a460 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b088      	sub	sp, #32
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	460b      	mov	r3, r1
 800a46a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a46c:	887b      	ldrh	r3, [r7, #2]
 800a46e:	3303      	adds	r3, #3
 800a470:	b29b      	uxth	r3, r3
 800a472:	f023 0303 	bic.w	r3, r3, #3
 800a476:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a478:	8bfb      	ldrh	r3, [r7, #30]
 800a47a:	2b0b      	cmp	r3, #11
 800a47c:	d801      	bhi.n	800a482 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a47e:	230c      	movs	r3, #12
 800a480:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a482:	8bfb      	ldrh	r3, [r7, #30]
 800a484:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a488:	d803      	bhi.n	800a492 <mem_trim+0x32>
 800a48a:	8bfa      	ldrh	r2, [r7, #30]
 800a48c:	887b      	ldrh	r3, [r7, #2]
 800a48e:	429a      	cmp	r2, r3
 800a490:	d201      	bcs.n	800a496 <mem_trim+0x36>
    return NULL;
 800a492:	2300      	movs	r3, #0
 800a494:	e0d8      	b.n	800a648 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a496:	4b6e      	ldr	r3, [pc, #440]	@ (800a650 <mem_trim+0x1f0>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	687a      	ldr	r2, [r7, #4]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d304      	bcc.n	800a4aa <mem_trim+0x4a>
 800a4a0:	4b6c      	ldr	r3, [pc, #432]	@ (800a654 <mem_trim+0x1f4>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d306      	bcc.n	800a4b8 <mem_trim+0x58>
 800a4aa:	4b6b      	ldr	r3, [pc, #428]	@ (800a658 <mem_trim+0x1f8>)
 800a4ac:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800a4b0:	496a      	ldr	r1, [pc, #424]	@ (800a65c <mem_trim+0x1fc>)
 800a4b2:	486b      	ldr	r0, [pc, #428]	@ (800a660 <mem_trim+0x200>)
 800a4b4:	f00c fce6 	bl	8016e84 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a4b8:	4b65      	ldr	r3, [pc, #404]	@ (800a650 <mem_trim+0x1f0>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d304      	bcc.n	800a4cc <mem_trim+0x6c>
 800a4c2:	4b64      	ldr	r3, [pc, #400]	@ (800a654 <mem_trim+0x1f4>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d307      	bcc.n	800a4dc <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a4cc:	f00c fbbc 	bl	8016c48 <sys_arch_protect>
 800a4d0:	60b8      	str	r0, [r7, #8]
 800a4d2:	68b8      	ldr	r0, [r7, #8]
 800a4d4:	f00c fbc6 	bl	8016c64 <sys_arch_unprotect>
    return rmem;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	e0b5      	b.n	800a648 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	3b08      	subs	r3, #8
 800a4e0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a4e2:	69b8      	ldr	r0, [r7, #24]
 800a4e4:	f7ff fdea 	bl	800a0bc <mem_to_ptr>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a4ec:	69bb      	ldr	r3, [r7, #24]
 800a4ee:	881a      	ldrh	r2, [r3, #0]
 800a4f0:	8afb      	ldrh	r3, [r7, #22]
 800a4f2:	1ad3      	subs	r3, r2, r3
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	3b08      	subs	r3, #8
 800a4f8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a4fa:	8bfa      	ldrh	r2, [r7, #30]
 800a4fc:	8abb      	ldrh	r3, [r7, #20]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d906      	bls.n	800a510 <mem_trim+0xb0>
 800a502:	4b55      	ldr	r3, [pc, #340]	@ (800a658 <mem_trim+0x1f8>)
 800a504:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800a508:	4956      	ldr	r1, [pc, #344]	@ (800a664 <mem_trim+0x204>)
 800a50a:	4855      	ldr	r0, [pc, #340]	@ (800a660 <mem_trim+0x200>)
 800a50c:	f00c fcba 	bl	8016e84 <iprintf>
  if (newsize > size) {
 800a510:	8bfa      	ldrh	r2, [r7, #30]
 800a512:	8abb      	ldrh	r3, [r7, #20]
 800a514:	429a      	cmp	r2, r3
 800a516:	d901      	bls.n	800a51c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800a518:	2300      	movs	r3, #0
 800a51a:	e095      	b.n	800a648 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800a51c:	8bfa      	ldrh	r2, [r7, #30]
 800a51e:	8abb      	ldrh	r3, [r7, #20]
 800a520:	429a      	cmp	r2, r3
 800a522:	d101      	bne.n	800a528 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	e08f      	b.n	800a648 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a528:	484f      	ldr	r0, [pc, #316]	@ (800a668 <mem_trim+0x208>)
 800a52a:	f00c fb4b 	bl	8016bc4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800a52e:	69bb      	ldr	r3, [r7, #24]
 800a530:	881b      	ldrh	r3, [r3, #0]
 800a532:	4618      	mov	r0, r3
 800a534:	f7ff fdb0 	bl	800a098 <ptr_to_mem>
 800a538:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	791b      	ldrb	r3, [r3, #4]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d13f      	bne.n	800a5c2 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a542:	69bb      	ldr	r3, [r7, #24]
 800a544:	881b      	ldrh	r3, [r3, #0]
 800a546:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a54a:	d106      	bne.n	800a55a <mem_trim+0xfa>
 800a54c:	4b42      	ldr	r3, [pc, #264]	@ (800a658 <mem_trim+0x1f8>)
 800a54e:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800a552:	4946      	ldr	r1, [pc, #280]	@ (800a66c <mem_trim+0x20c>)
 800a554:	4842      	ldr	r0, [pc, #264]	@ (800a660 <mem_trim+0x200>)
 800a556:	f00c fc95 	bl	8016e84 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	881b      	ldrh	r3, [r3, #0]
 800a55e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a560:	8afa      	ldrh	r2, [r7, #22]
 800a562:	8bfb      	ldrh	r3, [r7, #30]
 800a564:	4413      	add	r3, r2
 800a566:	b29b      	uxth	r3, r3
 800a568:	3308      	adds	r3, #8
 800a56a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a56c:	4b40      	ldr	r3, [pc, #256]	@ (800a670 <mem_trim+0x210>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	693a      	ldr	r2, [r7, #16]
 800a572:	429a      	cmp	r2, r3
 800a574:	d106      	bne.n	800a584 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800a576:	89fb      	ldrh	r3, [r7, #14]
 800a578:	4618      	mov	r0, r3
 800a57a:	f7ff fd8d 	bl	800a098 <ptr_to_mem>
 800a57e:	4603      	mov	r3, r0
 800a580:	4a3b      	ldr	r2, [pc, #236]	@ (800a670 <mem_trim+0x210>)
 800a582:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a584:	89fb      	ldrh	r3, [r7, #14]
 800a586:	4618      	mov	r0, r3
 800a588:	f7ff fd86 	bl	800a098 <ptr_to_mem>
 800a58c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	2200      	movs	r2, #0
 800a592:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	89ba      	ldrh	r2, [r7, #12]
 800a598:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	8afa      	ldrh	r2, [r7, #22]
 800a59e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a5a0:	69bb      	ldr	r3, [r7, #24]
 800a5a2:	89fa      	ldrh	r2, [r7, #14]
 800a5a4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	881b      	ldrh	r3, [r3, #0]
 800a5aa:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a5ae:	d047      	beq.n	800a640 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	881b      	ldrh	r3, [r3, #0]
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f7ff fd6f 	bl	800a098 <ptr_to_mem>
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	89fb      	ldrh	r3, [r7, #14]
 800a5be:	8053      	strh	r3, [r2, #2]
 800a5c0:	e03e      	b.n	800a640 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a5c2:	8bfb      	ldrh	r3, [r7, #30]
 800a5c4:	f103 0214 	add.w	r2, r3, #20
 800a5c8:	8abb      	ldrh	r3, [r7, #20]
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d838      	bhi.n	800a640 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a5ce:	8afa      	ldrh	r2, [r7, #22]
 800a5d0:	8bfb      	ldrh	r3, [r7, #30]
 800a5d2:	4413      	add	r3, r2
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	3308      	adds	r3, #8
 800a5d8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a5da:	69bb      	ldr	r3, [r7, #24]
 800a5dc:	881b      	ldrh	r3, [r3, #0]
 800a5de:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a5e2:	d106      	bne.n	800a5f2 <mem_trim+0x192>
 800a5e4:	4b1c      	ldr	r3, [pc, #112]	@ (800a658 <mem_trim+0x1f8>)
 800a5e6:	f240 3216 	movw	r2, #790	@ 0x316
 800a5ea:	4920      	ldr	r1, [pc, #128]	@ (800a66c <mem_trim+0x20c>)
 800a5ec:	481c      	ldr	r0, [pc, #112]	@ (800a660 <mem_trim+0x200>)
 800a5ee:	f00c fc49 	bl	8016e84 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a5f2:	89fb      	ldrh	r3, [r7, #14]
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f7ff fd4f 	bl	800a098 <ptr_to_mem>
 800a5fa:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a5fc:	4b1c      	ldr	r3, [pc, #112]	@ (800a670 <mem_trim+0x210>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	693a      	ldr	r2, [r7, #16]
 800a602:	429a      	cmp	r2, r3
 800a604:	d202      	bcs.n	800a60c <mem_trim+0x1ac>
      lfree = mem2;
 800a606:	4a1a      	ldr	r2, [pc, #104]	@ (800a670 <mem_trim+0x210>)
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	2200      	movs	r2, #0
 800a610:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a612:	69bb      	ldr	r3, [r7, #24]
 800a614:	881a      	ldrh	r2, [r3, #0]
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	8afa      	ldrh	r2, [r7, #22]
 800a61e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a620:	69bb      	ldr	r3, [r7, #24]
 800a622:	89fa      	ldrh	r2, [r7, #14]
 800a624:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	881b      	ldrh	r3, [r3, #0]
 800a62a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a62e:	d007      	beq.n	800a640 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	881b      	ldrh	r3, [r3, #0]
 800a634:	4618      	mov	r0, r3
 800a636:	f7ff fd2f 	bl	800a098 <ptr_to_mem>
 800a63a:	4602      	mov	r2, r0
 800a63c:	89fb      	ldrh	r3, [r7, #14]
 800a63e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a640:	4809      	ldr	r0, [pc, #36]	@ (800a668 <mem_trim+0x208>)
 800a642:	f00c face 	bl	8016be2 <sys_mutex_unlock>
  return rmem;
 800a646:	687b      	ldr	r3, [r7, #4]
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3720      	adds	r7, #32
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	200098f8 	.word	0x200098f8
 800a654:	200098fc 	.word	0x200098fc
 800a658:	08018434 	.word	0x08018434
 800a65c:	080185c0 	.word	0x080185c0
 800a660:	0801847c 	.word	0x0801847c
 800a664:	080185d8 	.word	0x080185d8
 800a668:	20009900 	.word	0x20009900
 800a66c:	080185f8 	.word	0x080185f8
 800a670:	20009904 	.word	0x20009904

0800a674 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b088      	sub	sp, #32
 800a678:	af00      	add	r7, sp, #0
 800a67a:	4603      	mov	r3, r0
 800a67c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a67e:	88fb      	ldrh	r3, [r7, #6]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d101      	bne.n	800a688 <mem_malloc+0x14>
    return NULL;
 800a684:	2300      	movs	r3, #0
 800a686:	e0e2      	b.n	800a84e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a688:	88fb      	ldrh	r3, [r7, #6]
 800a68a:	3303      	adds	r3, #3
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	f023 0303 	bic.w	r3, r3, #3
 800a692:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a694:	8bbb      	ldrh	r3, [r7, #28]
 800a696:	2b0b      	cmp	r3, #11
 800a698:	d801      	bhi.n	800a69e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a69a:	230c      	movs	r3, #12
 800a69c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a69e:	8bbb      	ldrh	r3, [r7, #28]
 800a6a0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a6a4:	d803      	bhi.n	800a6ae <mem_malloc+0x3a>
 800a6a6:	8bba      	ldrh	r2, [r7, #28]
 800a6a8:	88fb      	ldrh	r3, [r7, #6]
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d201      	bcs.n	800a6b2 <mem_malloc+0x3e>
    return NULL;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	e0cd      	b.n	800a84e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800a6b2:	4869      	ldr	r0, [pc, #420]	@ (800a858 <mem_malloc+0x1e4>)
 800a6b4:	f00c fa86 	bl	8016bc4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a6b8:	4b68      	ldr	r3, [pc, #416]	@ (800a85c <mem_malloc+0x1e8>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f7ff fcfd 	bl	800a0bc <mem_to_ptr>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	83fb      	strh	r3, [r7, #30]
 800a6c6:	e0b7      	b.n	800a838 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a6c8:	8bfb      	ldrh	r3, [r7, #30]
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7ff fce4 	bl	800a098 <ptr_to_mem>
 800a6d0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	791b      	ldrb	r3, [r3, #4]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	f040 80a7 	bne.w	800a82a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	881b      	ldrh	r3, [r3, #0]
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	8bfb      	ldrh	r3, [r7, #30]
 800a6e4:	1ad3      	subs	r3, r2, r3
 800a6e6:	f1a3 0208 	sub.w	r2, r3, #8
 800a6ea:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	f0c0 809c 	bcc.w	800a82a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	881b      	ldrh	r3, [r3, #0]
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	8bfb      	ldrh	r3, [r7, #30]
 800a6fa:	1ad3      	subs	r3, r2, r3
 800a6fc:	f1a3 0208 	sub.w	r2, r3, #8
 800a700:	8bbb      	ldrh	r3, [r7, #28]
 800a702:	3314      	adds	r3, #20
 800a704:	429a      	cmp	r2, r3
 800a706:	d333      	bcc.n	800a770 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a708:	8bfa      	ldrh	r2, [r7, #30]
 800a70a:	8bbb      	ldrh	r3, [r7, #28]
 800a70c:	4413      	add	r3, r2
 800a70e:	b29b      	uxth	r3, r3
 800a710:	3308      	adds	r3, #8
 800a712:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a714:	8a7b      	ldrh	r3, [r7, #18]
 800a716:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a71a:	d106      	bne.n	800a72a <mem_malloc+0xb6>
 800a71c:	4b50      	ldr	r3, [pc, #320]	@ (800a860 <mem_malloc+0x1ec>)
 800a71e:	f240 3287 	movw	r2, #903	@ 0x387
 800a722:	4950      	ldr	r1, [pc, #320]	@ (800a864 <mem_malloc+0x1f0>)
 800a724:	4850      	ldr	r0, [pc, #320]	@ (800a868 <mem_malloc+0x1f4>)
 800a726:	f00c fbad 	bl	8016e84 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a72a:	8a7b      	ldrh	r3, [r7, #18]
 800a72c:	4618      	mov	r0, r3
 800a72e:	f7ff fcb3 	bl	800a098 <ptr_to_mem>
 800a732:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2200      	movs	r2, #0
 800a738:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	881a      	ldrh	r2, [r3, #0]
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	8bfa      	ldrh	r2, [r7, #30]
 800a746:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	8a7a      	ldrh	r2, [r7, #18]
 800a74c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	2201      	movs	r2, #1
 800a752:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	881b      	ldrh	r3, [r3, #0]
 800a758:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a75c:	d00b      	beq.n	800a776 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	881b      	ldrh	r3, [r3, #0]
 800a762:	4618      	mov	r0, r3
 800a764:	f7ff fc98 	bl	800a098 <ptr_to_mem>
 800a768:	4602      	mov	r2, r0
 800a76a:	8a7b      	ldrh	r3, [r7, #18]
 800a76c:	8053      	strh	r3, [r2, #2]
 800a76e:	e002      	b.n	800a776 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	2201      	movs	r2, #1
 800a774:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a776:	4b39      	ldr	r3, [pc, #228]	@ (800a85c <mem_malloc+0x1e8>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	697a      	ldr	r2, [r7, #20]
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d127      	bne.n	800a7d0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800a780:	4b36      	ldr	r3, [pc, #216]	@ (800a85c <mem_malloc+0x1e8>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a786:	e005      	b.n	800a794 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a788:	69bb      	ldr	r3, [r7, #24]
 800a78a:	881b      	ldrh	r3, [r3, #0]
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7ff fc83 	bl	800a098 <ptr_to_mem>
 800a792:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a794:	69bb      	ldr	r3, [r7, #24]
 800a796:	791b      	ldrb	r3, [r3, #4]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d004      	beq.n	800a7a6 <mem_malloc+0x132>
 800a79c:	4b33      	ldr	r3, [pc, #204]	@ (800a86c <mem_malloc+0x1f8>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	69ba      	ldr	r2, [r7, #24]
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d1f0      	bne.n	800a788 <mem_malloc+0x114>
          }
          lfree = cur;
 800a7a6:	4a2d      	ldr	r2, [pc, #180]	@ (800a85c <mem_malloc+0x1e8>)
 800a7a8:	69bb      	ldr	r3, [r7, #24]
 800a7aa:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a7ac:	4b2b      	ldr	r3, [pc, #172]	@ (800a85c <mem_malloc+0x1e8>)
 800a7ae:	681a      	ldr	r2, [r3, #0]
 800a7b0:	4b2e      	ldr	r3, [pc, #184]	@ (800a86c <mem_malloc+0x1f8>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d00b      	beq.n	800a7d0 <mem_malloc+0x15c>
 800a7b8:	4b28      	ldr	r3, [pc, #160]	@ (800a85c <mem_malloc+0x1e8>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	791b      	ldrb	r3, [r3, #4]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d006      	beq.n	800a7d0 <mem_malloc+0x15c>
 800a7c2:	4b27      	ldr	r3, [pc, #156]	@ (800a860 <mem_malloc+0x1ec>)
 800a7c4:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800a7c8:	4929      	ldr	r1, [pc, #164]	@ (800a870 <mem_malloc+0x1fc>)
 800a7ca:	4827      	ldr	r0, [pc, #156]	@ (800a868 <mem_malloc+0x1f4>)
 800a7cc:	f00c fb5a 	bl	8016e84 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800a7d0:	4821      	ldr	r0, [pc, #132]	@ (800a858 <mem_malloc+0x1e4>)
 800a7d2:	f00c fa06 	bl	8016be2 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a7d6:	8bba      	ldrh	r2, [r7, #28]
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	4413      	add	r3, r2
 800a7dc:	3308      	adds	r3, #8
 800a7de:	4a23      	ldr	r2, [pc, #140]	@ (800a86c <mem_malloc+0x1f8>)
 800a7e0:	6812      	ldr	r2, [r2, #0]
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d906      	bls.n	800a7f4 <mem_malloc+0x180>
 800a7e6:	4b1e      	ldr	r3, [pc, #120]	@ (800a860 <mem_malloc+0x1ec>)
 800a7e8:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800a7ec:	4921      	ldr	r1, [pc, #132]	@ (800a874 <mem_malloc+0x200>)
 800a7ee:	481e      	ldr	r0, [pc, #120]	@ (800a868 <mem_malloc+0x1f4>)
 800a7f0:	f00c fb48 	bl	8016e84 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	f003 0303 	and.w	r3, r3, #3
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d006      	beq.n	800a80c <mem_malloc+0x198>
 800a7fe:	4b18      	ldr	r3, [pc, #96]	@ (800a860 <mem_malloc+0x1ec>)
 800a800:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800a804:	491c      	ldr	r1, [pc, #112]	@ (800a878 <mem_malloc+0x204>)
 800a806:	4818      	ldr	r0, [pc, #96]	@ (800a868 <mem_malloc+0x1f4>)
 800a808:	f00c fb3c 	bl	8016e84 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	f003 0303 	and.w	r3, r3, #3
 800a812:	2b00      	cmp	r3, #0
 800a814:	d006      	beq.n	800a824 <mem_malloc+0x1b0>
 800a816:	4b12      	ldr	r3, [pc, #72]	@ (800a860 <mem_malloc+0x1ec>)
 800a818:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800a81c:	4917      	ldr	r1, [pc, #92]	@ (800a87c <mem_malloc+0x208>)
 800a81e:	4812      	ldr	r0, [pc, #72]	@ (800a868 <mem_malloc+0x1f4>)
 800a820:	f00c fb30 	bl	8016e84 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	3308      	adds	r3, #8
 800a828:	e011      	b.n	800a84e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800a82a:	8bfb      	ldrh	r3, [r7, #30]
 800a82c:	4618      	mov	r0, r3
 800a82e:	f7ff fc33 	bl	800a098 <ptr_to_mem>
 800a832:	4603      	mov	r3, r0
 800a834:	881b      	ldrh	r3, [r3, #0]
 800a836:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a838:	8bfa      	ldrh	r2, [r7, #30]
 800a83a:	8bbb      	ldrh	r3, [r7, #28]
 800a83c:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800a840:	429a      	cmp	r2, r3
 800a842:	f4ff af41 	bcc.w	800a6c8 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800a846:	4804      	ldr	r0, [pc, #16]	@ (800a858 <mem_malloc+0x1e4>)
 800a848:	f00c f9cb 	bl	8016be2 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a84c:	2300      	movs	r3, #0
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3720      	adds	r7, #32
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	20009900 	.word	0x20009900
 800a85c:	20009904 	.word	0x20009904
 800a860:	08018434 	.word	0x08018434
 800a864:	080185f8 	.word	0x080185f8
 800a868:	0801847c 	.word	0x0801847c
 800a86c:	200098fc 	.word	0x200098fc
 800a870:	0801860c 	.word	0x0801860c
 800a874:	08018628 	.word	0x08018628
 800a878:	08018658 	.word	0x08018658
 800a87c:	08018688 	.word	0x08018688

0800a880 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a880:	b480      	push	{r7}
 800a882:	b085      	sub	sp, #20
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	689b      	ldr	r3, [r3, #8]
 800a88c:	2200      	movs	r2, #0
 800a88e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	3303      	adds	r3, #3
 800a896:	f023 0303 	bic.w	r3, r3, #3
 800a89a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a89c:	2300      	movs	r3, #0
 800a89e:	60fb      	str	r3, [r7, #12]
 800a8a0:	e011      	b.n	800a8c6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	689b      	ldr	r3, [r3, #8]
 800a8a6:	681a      	ldr	r2, [r3, #0]
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	68ba      	ldr	r2, [r7, #8]
 800a8b2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	881b      	ldrh	r3, [r3, #0]
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	4413      	add	r3, r2
 800a8be:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	60fb      	str	r3, [r7, #12]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	885b      	ldrh	r3, [r3, #2]
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	dbe7      	blt.n	800a8a2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a8d2:	bf00      	nop
 800a8d4:	bf00      	nop
 800a8d6:	3714      	adds	r7, #20
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr

0800a8e0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	80fb      	strh	r3, [r7, #6]
 800a8ea:	e009      	b.n	800a900 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a8ec:	88fb      	ldrh	r3, [r7, #6]
 800a8ee:	4a08      	ldr	r2, [pc, #32]	@ (800a910 <memp_init+0x30>)
 800a8f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f7ff ffc3 	bl	800a880 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a8fa:	88fb      	ldrh	r3, [r7, #6]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	80fb      	strh	r3, [r7, #6]
 800a900:	88fb      	ldrh	r3, [r7, #6]
 800a902:	2b0d      	cmp	r3, #13
 800a904:	d9f2      	bls.n	800a8ec <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a906:	bf00      	nop
 800a908:	bf00      	nop
 800a90a:	3708      	adds	r7, #8
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}
 800a910:	0801b61c 	.word	0x0801b61c

0800a914 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b084      	sub	sp, #16
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800a91c:	f00c f994 	bl	8016c48 <sys_arch_protect>
 800a920:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	689b      	ldr	r3, [r3, #8]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d015      	beq.n	800a95c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	689b      	ldr	r3, [r3, #8]
 800a934:	68ba      	ldr	r2, [r7, #8]
 800a936:	6812      	ldr	r2, [r2, #0]
 800a938:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	f003 0303 	and.w	r3, r3, #3
 800a940:	2b00      	cmp	r3, #0
 800a942:	d006      	beq.n	800a952 <do_memp_malloc_pool+0x3e>
 800a944:	4b09      	ldr	r3, [pc, #36]	@ (800a96c <do_memp_malloc_pool+0x58>)
 800a946:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800a94a:	4909      	ldr	r1, [pc, #36]	@ (800a970 <do_memp_malloc_pool+0x5c>)
 800a94c:	4809      	ldr	r0, [pc, #36]	@ (800a974 <do_memp_malloc_pool+0x60>)
 800a94e:	f00c fa99 	bl	8016e84 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a952:	68f8      	ldr	r0, [r7, #12]
 800a954:	f00c f986 	bl	8016c64 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	e003      	b.n	800a964 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a95c:	68f8      	ldr	r0, [r7, #12]
 800a95e:	f00c f981 	bl	8016c64 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a962:	2300      	movs	r3, #0
}
 800a964:	4618      	mov	r0, r3
 800a966:	3710      	adds	r7, #16
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}
 800a96c:	080186ac 	.word	0x080186ac
 800a970:	080186dc 	.word	0x080186dc
 800a974:	08018700 	.word	0x08018700

0800a978 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b082      	sub	sp, #8
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d106      	bne.n	800a994 <memp_malloc_pool+0x1c>
 800a986:	4b0a      	ldr	r3, [pc, #40]	@ (800a9b0 <memp_malloc_pool+0x38>)
 800a988:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800a98c:	4909      	ldr	r1, [pc, #36]	@ (800a9b4 <memp_malloc_pool+0x3c>)
 800a98e:	480a      	ldr	r0, [pc, #40]	@ (800a9b8 <memp_malloc_pool+0x40>)
 800a990:	f00c fa78 	bl	8016e84 <iprintf>
  if (desc == NULL) {
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d101      	bne.n	800a99e <memp_malloc_pool+0x26>
    return NULL;
 800a99a:	2300      	movs	r3, #0
 800a99c:	e003      	b.n	800a9a6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f7ff ffb8 	bl	800a914 <do_memp_malloc_pool>
 800a9a4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3708      	adds	r7, #8
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	080186ac 	.word	0x080186ac
 800a9b4:	08018728 	.word	0x08018728
 800a9b8:	08018700 	.word	0x08018700

0800a9bc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a9c6:	79fb      	ldrb	r3, [r7, #7]
 800a9c8:	2b0d      	cmp	r3, #13
 800a9ca:	d908      	bls.n	800a9de <memp_malloc+0x22>
 800a9cc:	4b0a      	ldr	r3, [pc, #40]	@ (800a9f8 <memp_malloc+0x3c>)
 800a9ce:	f240 1257 	movw	r2, #343	@ 0x157
 800a9d2:	490a      	ldr	r1, [pc, #40]	@ (800a9fc <memp_malloc+0x40>)
 800a9d4:	480a      	ldr	r0, [pc, #40]	@ (800aa00 <memp_malloc+0x44>)
 800a9d6:	f00c fa55 	bl	8016e84 <iprintf>
 800a9da:	2300      	movs	r3, #0
 800a9dc:	e008      	b.n	800a9f0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a9de:	79fb      	ldrb	r3, [r7, #7]
 800a9e0:	4a08      	ldr	r2, [pc, #32]	@ (800aa04 <memp_malloc+0x48>)
 800a9e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f7ff ff94 	bl	800a914 <do_memp_malloc_pool>
 800a9ec:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3710      	adds	r7, #16
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	080186ac 	.word	0x080186ac
 800a9fc:	0801873c 	.word	0x0801873c
 800aa00:	08018700 	.word	0x08018700
 800aa04:	0801b61c 	.word	0x0801b61c

0800aa08 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	f003 0303 	and.w	r3, r3, #3
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d006      	beq.n	800aa2a <do_memp_free_pool+0x22>
 800aa1c:	4b0d      	ldr	r3, [pc, #52]	@ (800aa54 <do_memp_free_pool+0x4c>)
 800aa1e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800aa22:	490d      	ldr	r1, [pc, #52]	@ (800aa58 <do_memp_free_pool+0x50>)
 800aa24:	480d      	ldr	r0, [pc, #52]	@ (800aa5c <do_memp_free_pool+0x54>)
 800aa26:	f00c fa2d 	bl	8016e84 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800aa2e:	f00c f90b 	bl	8016c48 <sys_arch_protect>
 800aa32:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	689b      	ldr	r3, [r3, #8]
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	689b      	ldr	r3, [r3, #8]
 800aa42:	68fa      	ldr	r2, [r7, #12]
 800aa44:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800aa46:	68b8      	ldr	r0, [r7, #8]
 800aa48:	f00c f90c 	bl	8016c64 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800aa4c:	bf00      	nop
 800aa4e:	3710      	adds	r7, #16
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}
 800aa54:	080186ac 	.word	0x080186ac
 800aa58:	0801875c 	.word	0x0801875c
 800aa5c:	08018700 	.word	0x08018700

0800aa60 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b082      	sub	sp, #8
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d106      	bne.n	800aa7e <memp_free_pool+0x1e>
 800aa70:	4b0a      	ldr	r3, [pc, #40]	@ (800aa9c <memp_free_pool+0x3c>)
 800aa72:	f240 1295 	movw	r2, #405	@ 0x195
 800aa76:	490a      	ldr	r1, [pc, #40]	@ (800aaa0 <memp_free_pool+0x40>)
 800aa78:	480a      	ldr	r0, [pc, #40]	@ (800aaa4 <memp_free_pool+0x44>)
 800aa7a:	f00c fa03 	bl	8016e84 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d007      	beq.n	800aa94 <memp_free_pool+0x34>
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d004      	beq.n	800aa94 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800aa8a:	6839      	ldr	r1, [r7, #0]
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f7ff ffbb 	bl	800aa08 <do_memp_free_pool>
 800aa92:	e000      	b.n	800aa96 <memp_free_pool+0x36>
    return;
 800aa94:	bf00      	nop
}
 800aa96:	3708      	adds	r7, #8
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}
 800aa9c:	080186ac 	.word	0x080186ac
 800aaa0:	08018728 	.word	0x08018728
 800aaa4:	08018700 	.word	0x08018700

0800aaa8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	4603      	mov	r3, r0
 800aab0:	6039      	str	r1, [r7, #0]
 800aab2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800aab4:	79fb      	ldrb	r3, [r7, #7]
 800aab6:	2b0d      	cmp	r3, #13
 800aab8:	d907      	bls.n	800aaca <memp_free+0x22>
 800aaba:	4b0c      	ldr	r3, [pc, #48]	@ (800aaec <memp_free+0x44>)
 800aabc:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800aac0:	490b      	ldr	r1, [pc, #44]	@ (800aaf0 <memp_free+0x48>)
 800aac2:	480c      	ldr	r0, [pc, #48]	@ (800aaf4 <memp_free+0x4c>)
 800aac4:	f00c f9de 	bl	8016e84 <iprintf>
 800aac8:	e00c      	b.n	800aae4 <memp_free+0x3c>

  if (mem == NULL) {
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d008      	beq.n	800aae2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800aad0:	79fb      	ldrb	r3, [r7, #7]
 800aad2:	4a09      	ldr	r2, [pc, #36]	@ (800aaf8 <memp_free+0x50>)
 800aad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aad8:	6839      	ldr	r1, [r7, #0]
 800aada:	4618      	mov	r0, r3
 800aadc:	f7ff ff94 	bl	800aa08 <do_memp_free_pool>
 800aae0:	e000      	b.n	800aae4 <memp_free+0x3c>
    return;
 800aae2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800aae4:	3708      	adds	r7, #8
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}
 800aaea:	bf00      	nop
 800aaec:	080186ac 	.word	0x080186ac
 800aaf0:	0801877c 	.word	0x0801877c
 800aaf4:	08018700 	.word	0x08018700
 800aaf8:	0801b61c 	.word	0x0801b61c

0800aafc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800aafc:	b480      	push	{r7}
 800aafe:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ab00:	bf00      	nop
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr
	...

0800ab0c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b086      	sub	sp, #24
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	60f8      	str	r0, [r7, #12]
 800ab14:	60b9      	str	r1, [r7, #8]
 800ab16:	607a      	str	r2, [r7, #4]
 800ab18:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d108      	bne.n	800ab32 <netif_add+0x26>
 800ab20:	4b64      	ldr	r3, [pc, #400]	@ (800acb4 <netif_add+0x1a8>)
 800ab22:	f240 1227 	movw	r2, #295	@ 0x127
 800ab26:	4964      	ldr	r1, [pc, #400]	@ (800acb8 <netif_add+0x1ac>)
 800ab28:	4864      	ldr	r0, [pc, #400]	@ (800acbc <netif_add+0x1b0>)
 800ab2a:	f00c f9ab 	bl	8016e84 <iprintf>
 800ab2e:	2300      	movs	r3, #0
 800ab30:	e0bb      	b.n	800acaa <netif_add+0x19e>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ab32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d108      	bne.n	800ab4a <netif_add+0x3e>
 800ab38:	4b5e      	ldr	r3, [pc, #376]	@ (800acb4 <netif_add+0x1a8>)
 800ab3a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800ab3e:	4960      	ldr	r1, [pc, #384]	@ (800acc0 <netif_add+0x1b4>)
 800ab40:	485e      	ldr	r0, [pc, #376]	@ (800acbc <netif_add+0x1b0>)
 800ab42:	f00c f99f 	bl	8016e84 <iprintf>
 800ab46:	2300      	movs	r3, #0
 800ab48:	e0af      	b.n	800acaa <netif_add+0x19e>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d101      	bne.n	800ab54 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ab50:	4b5c      	ldr	r3, [pc, #368]	@ (800acc4 <netif_add+0x1b8>)
 800ab52:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d101      	bne.n	800ab5e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ab5a:	4b5a      	ldr	r3, [pc, #360]	@ (800acc4 <netif_add+0x1b8>)
 800ab5c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d101      	bne.n	800ab68 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ab64:	4b57      	ldr	r3, [pc, #348]	@ (800acc4 <netif_add+0x1b8>)
 800ab66:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2200      	movs	r2, #0
 800ab72:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	2200      	movs	r2, #0
 800ab78:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	4a52      	ldr	r2, [pc, #328]	@ (800acc8 <netif_add+0x1bc>)
 800ab7e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	2200      	movs	r2, #0
 800ab84:	869a      	strh	r2, [r3, #52]	@ 0x34
  netif->flags = 0;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	3328      	adds	r3, #40	@ 0x28
 800ab92:	2208      	movs	r2, #8
 800ab94:	2100      	movs	r1, #0
 800ab96:	4618      	mov	r0, r3
 800ab98:	f00c fb06 	bl	80171a8 <memset>
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
  nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  // netif->link_callback = NULL;
#endif /* LWIP_NETIF_LINK_CALLBACK */
#if LWIP_IGMP
  netif->igmp_mac_filter = NULL;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2200      	movs	r2, #0
 800aba6:	645a      	str	r2, [r3, #68]	@ 0x44
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	6a3a      	ldr	r2, [r7, #32]
 800abac:	625a      	str	r2, [r3, #36]	@ 0x24
  netif->num = netif_num;
 800abae:	4b47      	ldr	r3, [pc, #284]	@ (800accc <netif_add+0x1c0>)
 800abb0:	781a      	ldrb	r2, [r3, #0]
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  netif->input = input;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800abbc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	68b9      	ldr	r1, [r7, #8]
 800abc4:	68f8      	ldr	r0, [r7, #12]
 800abc6:	f000 f951 	bl	800ae6c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800abca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abcc:	68f8      	ldr	r0, [r7, #12]
 800abce:	4798      	blx	r3
 800abd0:	4603      	mov	r3, r0
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d001      	beq.n	800abda <netif_add+0xce>
    return NULL;
 800abd6:	2300      	movs	r3, #0
 800abd8:	e067      	b.n	800acaa <netif_add+0x19e>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800abe0:	2bff      	cmp	r3, #255	@ 0xff
 800abe2:	d103      	bne.n	800abec <netif_add+0xe0>
        netif->num = 0;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2200      	movs	r2, #0
 800abe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      }
      num_netifs = 0;
 800abec:	2300      	movs	r3, #0
 800abee:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800abf0:	4b37      	ldr	r3, [pc, #220]	@ (800acd0 <netif_add+0x1c4>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	617b      	str	r3, [r7, #20]
 800abf6:	e02b      	b.n	800ac50 <netif_add+0x144>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800abf8:	697a      	ldr	r2, [r7, #20]
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d106      	bne.n	800ac0e <netif_add+0x102>
 800ac00:	4b2c      	ldr	r3, [pc, #176]	@ (800acb4 <netif_add+0x1a8>)
 800ac02:	f240 128b 	movw	r2, #395	@ 0x18b
 800ac06:	4933      	ldr	r1, [pc, #204]	@ (800acd4 <netif_add+0x1c8>)
 800ac08:	482c      	ldr	r0, [pc, #176]	@ (800acbc <netif_add+0x1b0>)
 800ac0a:	f00c f93b 	bl	8016e84 <iprintf>
        num_netifs++;
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	3301      	adds	r3, #1
 800ac12:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	2bff      	cmp	r3, #255	@ 0xff
 800ac18:	dd06      	ble.n	800ac28 <netif_add+0x11c>
 800ac1a:	4b26      	ldr	r3, [pc, #152]	@ (800acb4 <netif_add+0x1a8>)
 800ac1c:	f240 128d 	movw	r2, #397	@ 0x18d
 800ac20:	492d      	ldr	r1, [pc, #180]	@ (800acd8 <netif_add+0x1cc>)
 800ac22:	4826      	ldr	r0, [pc, #152]	@ (800acbc <netif_add+0x1b0>)
 800ac24:	f00c f92e 	bl	8016e84 <iprintf>
        if (netif2->num == netif->num) {
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d108      	bne.n	800ac4a <netif_add+0x13e>
          netif->num++;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ac3e:	3301      	adds	r3, #1
 800ac40:	b2da      	uxtb	r2, r3
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          break;
 800ac48:	e005      	b.n	800ac56 <netif_add+0x14a>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	617b      	str	r3, [r7, #20]
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d1d0      	bne.n	800abf8 <netif_add+0xec>
        }
      }
    } while (netif2 != NULL);
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d1be      	bne.n	800abda <netif_add+0xce>
  }
  if (netif->num == 254) {
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ac62:	2bfe      	cmp	r3, #254	@ 0xfe
 800ac64:	d103      	bne.n	800ac6e <netif_add+0x162>
    netif_num = 0;
 800ac66:	4b19      	ldr	r3, [pc, #100]	@ (800accc <netif_add+0x1c0>)
 800ac68:	2200      	movs	r2, #0
 800ac6a:	701a      	strb	r2, [r3, #0]
 800ac6c:	e006      	b.n	800ac7c <netif_add+0x170>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ac74:	3301      	adds	r3, #1
 800ac76:	b2da      	uxtb	r2, r3
 800ac78:	4b14      	ldr	r3, [pc, #80]	@ (800accc <netif_add+0x1c0>)
 800ac7a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ac7c:	4b14      	ldr	r3, [pc, #80]	@ (800acd0 <netif_add+0x1c4>)
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ac84:	4a12      	ldr	r2, [pc, #72]	@ (800acd0 <netif_add+0x1c4>)
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	6013      	str	r3, [r2, #0]
#endif /* "LWIP_SINGLE_NETIF */
  mib2_netif_added(netif);

#if LWIP_IGMP
  /* start IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac90:	f003 0320 	and.w	r3, r3, #32
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d002      	beq.n	800ac9e <netif_add+0x192>
    igmp_start(netif);
 800ac98:	68f8      	ldr	r0, [r7, #12]
 800ac9a:	f00a f8f3 	bl	8014e84 <igmp_start>
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);
 800ac9e:	2200      	movs	r2, #0
 800aca0:	2101      	movs	r1, #1
 800aca2:	68f8      	ldr	r0, [r7, #12]
 800aca4:	f000 fb00 	bl	800b2a8 <netif_invoke_ext_callback>

  return netif;
 800aca8:	68fb      	ldr	r3, [r7, #12]
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3718      	adds	r7, #24
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop
 800acb4:	08018798 	.word	0x08018798
 800acb8:	0801882c 	.word	0x0801882c
 800acbc:	080187e8 	.word	0x080187e8
 800acc0:	08018848 	.word	0x08018848
 800acc4:	0801b6ac 	.word	0x0801b6ac
 800acc8:	0800b241 	.word	0x0800b241
 800accc:	2000cab8 	.word	0x2000cab8
 800acd0:	2000cab0 	.word	0x2000cab0
 800acd4:	0801886c 	.word	0x0801886c
 800acd8:	08018880 	.word	0x08018880

0800acdc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b082      	sub	sp, #8
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ace6:	6839      	ldr	r1, [r7, #0]
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f002 fc67 	bl	800d5bc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800acee:	6839      	ldr	r1, [r7, #0]
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f007 f895 	bl	8011e20 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800acf6:	bf00      	nop
 800acf8:	3708      	adds	r7, #8
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
	...

0800ad00 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b086      	sub	sp, #24
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	60f8      	str	r0, [r7, #12]
 800ad08:	60b9      	str	r1, [r7, #8]
 800ad0a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d106      	bne.n	800ad20 <netif_do_set_ipaddr+0x20>
 800ad12:	4b21      	ldr	r3, [pc, #132]	@ (800ad98 <netif_do_set_ipaddr+0x98>)
 800ad14:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800ad18:	4920      	ldr	r1, [pc, #128]	@ (800ad9c <netif_do_set_ipaddr+0x9c>)
 800ad1a:	4821      	ldr	r0, [pc, #132]	@ (800ada0 <netif_do_set_ipaddr+0xa0>)
 800ad1c:	f00c f8b2 	bl	8016e84 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d106      	bne.n	800ad34 <netif_do_set_ipaddr+0x34>
 800ad26:	4b1c      	ldr	r3, [pc, #112]	@ (800ad98 <netif_do_set_ipaddr+0x98>)
 800ad28:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800ad2c:	491b      	ldr	r1, [pc, #108]	@ (800ad9c <netif_do_set_ipaddr+0x9c>)
 800ad2e:	481c      	ldr	r0, [pc, #112]	@ (800ada0 <netif_do_set_ipaddr+0xa0>)
 800ad30:	f00c f8a8 	bl	8016e84 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	681a      	ldr	r2, [r3, #0]
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	3304      	adds	r3, #4
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d024      	beq.n	800ad8c <netif_do_set_ipaddr+0x8c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	3304      	adds	r3, #4
 800ad4c:	681a      	ldr	r2, [r3, #0]
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ad52:	f107 0314 	add.w	r3, r7, #20
 800ad56:	4619      	mov	r1, r3
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f7ff ffbf 	bl	800acdc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d002      	beq.n	800ad6a <netif_do_set_ipaddr+0x6a>
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	e000      	b.n	800ad6c <netif_do_set_ipaddr+0x6c>
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	68fa      	ldr	r2, [r7, #12]
 800ad6e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ad70:	2101      	movs	r1, #1
 800ad72:	68f8      	ldr	r0, [r7, #12]
 800ad74:	f000 f94a 	bl	800b00c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	69db      	ldr	r3, [r3, #28]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d003      	beq.n	800ad88 <netif_do_set_ipaddr+0x88>
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	69db      	ldr	r3, [r3, #28]
 800ad84:	68f8      	ldr	r0, [r7, #12]
 800ad86:	4798      	blx	r3
    return 1; /* address changed */
 800ad88:	2301      	movs	r3, #1
 800ad8a:	e000      	b.n	800ad8e <netif_do_set_ipaddr+0x8e>
  }
  return 0; /* address unchanged */
 800ad8c:	2300      	movs	r3, #0
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3718      	adds	r7, #24
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}
 800ad96:	bf00      	nop
 800ad98:	08018798 	.word	0x08018798
 800ad9c:	080188b0 	.word	0x080188b0
 800ada0:	080187e8 	.word	0x080187e8

0800ada4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b084      	sub	sp, #16
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	60f8      	str	r0, [r7, #12]
 800adac:	60b9      	str	r1, [r7, #8]
 800adae:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	681a      	ldr	r2, [r3, #0]
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	3308      	adds	r3, #8
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	429a      	cmp	r2, r3
 800adbc:	d019      	beq.n	800adf2 <netif_do_set_netmask+0x4e>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    LWIP_ASSERT("invalid pointer", old_nm != NULL);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d106      	bne.n	800add2 <netif_do_set_netmask+0x2e>
 800adc4:	4b0d      	ldr	r3, [pc, #52]	@ (800adfc <netif_do_set_netmask+0x58>)
 800adc6:	f44f 7204 	mov.w	r2, #528	@ 0x210
 800adca:	490d      	ldr	r1, [pc, #52]	@ (800ae00 <netif_do_set_netmask+0x5c>)
 800adcc:	480d      	ldr	r0, [pc, #52]	@ (800ae04 <netif_do_set_netmask+0x60>)
 800adce:	f00c f859 	bl	8016e84 <iprintf>
    ip_addr_copy(*old_nm, *netif_ip_netmask4(netif));
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	3308      	adds	r3, #8
 800add6:	681a      	ldr	r2, [r3, #0]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	601a      	str	r2, [r3, #0]
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d002      	beq.n	800ade8 <netif_do_set_netmask+0x44>
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	e000      	b.n	800adea <netif_do_set_netmask+0x46>
 800ade8:	2300      	movs	r3, #0
 800adea:	68fa      	ldr	r2, [r7, #12]
 800adec:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800adee:	2301      	movs	r3, #1
 800adf0:	e000      	b.n	800adf4 <netif_do_set_netmask+0x50>
  }
  return 0; /* netmask unchanged */
 800adf2:	2300      	movs	r3, #0
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3710      	adds	r7, #16
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}
 800adfc:	08018798 	.word	0x08018798
 800ae00:	080188b0 	.word	0x080188b0
 800ae04:	080187e8 	.word	0x080187e8

0800ae08 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	60f8      	str	r0, [r7, #12]
 800ae10:	60b9      	str	r1, [r7, #8]
 800ae12:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	681a      	ldr	r2, [r3, #0]
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	330c      	adds	r3, #12
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d019      	beq.n	800ae56 <netif_do_set_gw+0x4e>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    LWIP_ASSERT("invalid pointer", old_gw != NULL);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d106      	bne.n	800ae36 <netif_do_set_gw+0x2e>
 800ae28:	4b0d      	ldr	r3, [pc, #52]	@ (800ae60 <netif_do_set_gw+0x58>)
 800ae2a:	f44f 7214 	mov.w	r2, #592	@ 0x250
 800ae2e:	490d      	ldr	r1, [pc, #52]	@ (800ae64 <netif_do_set_gw+0x5c>)
 800ae30:	480d      	ldr	r0, [pc, #52]	@ (800ae68 <netif_do_set_gw+0x60>)
 800ae32:	f00c f827 	bl	8016e84 <iprintf>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	330c      	adds	r3, #12
 800ae3a:	681a      	ldr	r2, [r3, #0]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	601a      	str	r2, [r3, #0]
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d002      	beq.n	800ae4c <netif_do_set_gw+0x44>
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	e000      	b.n	800ae4e <netif_do_set_gw+0x46>
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	68fa      	ldr	r2, [r7, #12]
 800ae50:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800ae52:	2301      	movs	r3, #1
 800ae54:	e000      	b.n	800ae58 <netif_do_set_gw+0x50>
  }
  return 0; /* gateway unchanged */
 800ae56:	2300      	movs	r3, #0
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3710      	adds	r7, #16
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}
 800ae60:	08018798 	.word	0x08018798
 800ae64:	080188b0 	.word	0x080188b0
 800ae68:	080187e8 	.word	0x080187e8

0800ae6c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b08e      	sub	sp, #56	@ 0x38
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	60b9      	str	r1, [r7, #8]
 800ae76:	607a      	str	r2, [r7, #4]
 800ae78:	603b      	str	r3, [r7, #0]
#if LWIP_NETIF_EXT_STATUS_CALLBACK
  netif_nsc_reason_t change_reason = LWIP_NSC_NONE;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	86fb      	strh	r3, [r7, #54]	@ 0x36
  netif_ext_callback_args_t cb_args;
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
 800ae7e:	f107 0318 	add.w	r3, r7, #24
 800ae82:	633b      	str	r3, [r7, #48]	@ 0x30
  ip_addr_t *old_gw = &old_gw_val;
 800ae84:	f107 0314 	add.w	r3, r7, #20
 800ae88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d101      	bne.n	800ae94 <netif_set_addr+0x28>
    ipaddr = IP4_ADDR_ANY4;
 800ae90:	4b36      	ldr	r3, [pc, #216]	@ (800af6c <netif_set_addr+0x100>)
 800ae92:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d101      	bne.n	800ae9e <netif_set_addr+0x32>
    netmask = IP4_ADDR_ANY4;
 800ae9a:	4b34      	ldr	r3, [pc, #208]	@ (800af6c <netif_set_addr+0x100>)
 800ae9c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d101      	bne.n	800aea8 <netif_set_addr+0x3c>
    gw = IP4_ADDR_ANY4;
 800aea4:	4b31      	ldr	r3, [pc, #196]	@ (800af6c <netif_set_addr+0x100>)
 800aea6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d003      	beq.n	800aeb6 <netif_set_addr+0x4a>
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d101      	bne.n	800aeba <netif_set_addr+0x4e>
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	e000      	b.n	800aebc <netif_set_addr+0x50>
 800aeba:	2300      	movs	r3, #0
 800aebc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (remove) {
 800aebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d010      	beq.n	800aee6 <netif_set_addr+0x7a>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800aec4:	f107 0310 	add.w	r3, r7, #16
 800aec8:	461a      	mov	r2, r3
 800aeca:	68b9      	ldr	r1, [r7, #8]
 800aecc:	68f8      	ldr	r0, [r7, #12]
 800aece:	f7ff ff17 	bl	800ad00 <netif_do_set_ipaddr>
 800aed2:	4603      	mov	r3, r0
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d006      	beq.n	800aee6 <netif_set_addr+0x7a>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
 800aed8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800aeda:	f043 0310 	orr.w	r3, r3, #16
 800aede:	86fb      	strh	r3, [r7, #54]	@ 0x36
      cb_args.ipv4_changed.old_address = &old_addr;
 800aee0:	f107 0310 	add.w	r3, r7, #16
 800aee4:	61fb      	str	r3, [r7, #28]
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800aee6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aee8:	6879      	ldr	r1, [r7, #4]
 800aeea:	68f8      	ldr	r0, [r7, #12]
 800aeec:	f7ff ff5a 	bl	800ada4 <netif_do_set_netmask>
 800aef0:	4603      	mov	r3, r0
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d005      	beq.n	800af02 <netif_set_addr+0x96>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
 800aef6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800aef8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aefc:	86fb      	strh	r3, [r7, #54]	@ 0x36
    cb_args.ipv4_changed.old_netmask = old_nm;
 800aefe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af00:	623b      	str	r3, [r7, #32]
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800af02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af04:	6839      	ldr	r1, [r7, #0]
 800af06:	68f8      	ldr	r0, [r7, #12]
 800af08:	f7ff ff7e 	bl	800ae08 <netif_do_set_gw>
 800af0c:	4603      	mov	r3, r0
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d005      	beq.n	800af1e <netif_set_addr+0xb2>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
 800af12:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800af14:	f043 0320 	orr.w	r3, r3, #32
 800af18:	86fb      	strh	r3, [r7, #54]	@ 0x36
    cb_args.ipv4_changed.old_gw = old_gw;
 800af1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af1c:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
  }
  if (!remove) {
 800af1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af20:	2b00      	cmp	r3, #0
 800af22:	d110      	bne.n	800af46 <netif_set_addr+0xda>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800af24:	f107 0310 	add.w	r3, r7, #16
 800af28:	461a      	mov	r2, r3
 800af2a:	68b9      	ldr	r1, [r7, #8]
 800af2c:	68f8      	ldr	r0, [r7, #12]
 800af2e:	f7ff fee7 	bl	800ad00 <netif_do_set_ipaddr>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	d006      	beq.n	800af46 <netif_set_addr+0xda>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
 800af38:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800af3a:	f043 0310 	orr.w	r3, r3, #16
 800af3e:	86fb      	strh	r3, [r7, #54]	@ 0x36
      cb_args.ipv4_changed.old_address = &old_addr;
 800af40:	f107 0310 	add.w	r3, r7, #16
 800af44:	61fb      	str	r3, [r7, #28]
#endif
    }
  }

#if LWIP_NETIF_EXT_STATUS_CALLBACK
  if (change_reason != LWIP_NSC_NONE) {
 800af46:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d00a      	beq.n	800af62 <netif_set_addr+0xf6>
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
 800af4c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800af4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af52:	86fb      	strh	r3, [r7, #54]	@ 0x36
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
 800af54:	f107 021c 	add.w	r2, r7, #28
 800af58:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800af5a:	4619      	mov	r1, r3
 800af5c:	68f8      	ldr	r0, [r7, #12]
 800af5e:	f000 f9a3 	bl	800b2a8 <netif_invoke_ext_callback>
  }
#endif
}
 800af62:	bf00      	nop
 800af64:	3738      	adds	r7, #56	@ 0x38
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
 800af6a:	bf00      	nop
 800af6c:	0801b6ac 	.word	0x0801b6ac

0800af70 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800af70:	b480      	push	{r7}
 800af72:	b083      	sub	sp, #12
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800af78:	4a04      	ldr	r2, [pc, #16]	@ (800af8c <netif_set_default+0x1c>)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800af7e:	bf00      	nop
 800af80:	370c      	adds	r7, #12
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr
 800af8a:	bf00      	nop
 800af8c:	2000cab4 	.word	0x2000cab4

0800af90 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b086      	sub	sp, #24
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d107      	bne.n	800afae <netif_set_up+0x1e>
 800af9e:	4b18      	ldr	r3, [pc, #96]	@ (800b000 <netif_set_up+0x70>)
 800afa0:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800afa4:	4917      	ldr	r1, [pc, #92]	@ (800b004 <netif_set_up+0x74>)
 800afa6:	4818      	ldr	r0, [pc, #96]	@ (800b008 <netif_set_up+0x78>)
 800afa8:	f00b ff6c 	bl	8016e84 <iprintf>
 800afac:	e024      	b.n	800aff8 <netif_set_up+0x68>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800afb4:	f003 0301 	and.w	r3, r3, #1
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d11d      	bne.n	800aff8 <netif_set_up+0x68>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800afc2:	f043 0301 	orr.w	r3, r3, #1
 800afc6:	b2da      	uxtb	r2, r3
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	69db      	ldr	r3, [r3, #28]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d003      	beq.n	800afde <netif_set_up+0x4e>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	69db      	ldr	r3, [r3, #28]
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	4798      	blx	r3

#if LWIP_NETIF_EXT_STATUS_CALLBACK
    {
      netif_ext_callback_args_t args;
      args.status_changed.state = 1;
 800afde:	2301      	movs	r3, #1
 800afe0:	733b      	strb	r3, [r7, #12]
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
 800afe2:	f107 030c 	add.w	r3, r7, #12
 800afe6:	461a      	mov	r2, r3
 800afe8:	2108      	movs	r1, #8
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 f95c 	bl	800b2a8 <netif_invoke_ext_callback>
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800aff0:	2103      	movs	r1, #3
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 f80a 	bl	800b00c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800aff8:	3718      	adds	r7, #24
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	08018798 	.word	0x08018798
 800b004:	08018920 	.word	0x08018920
 800b008:	080187e8 	.word	0x080187e8

0800b00c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b082      	sub	sp, #8
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	460b      	mov	r3, r1
 800b016:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d106      	bne.n	800b02c <netif_issue_reports+0x20>
 800b01e:	4b1d      	ldr	r3, [pc, #116]	@ (800b094 <netif_issue_reports+0x88>)
 800b020:	f240 326d 	movw	r2, #877	@ 0x36d
 800b024:	491c      	ldr	r1, [pc, #112]	@ (800b098 <netif_issue_reports+0x8c>)
 800b026:	481d      	ldr	r0, [pc, #116]	@ (800b09c <netif_issue_reports+0x90>)
 800b028:	f00b ff2c 	bl	8016e84 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b032:	f003 0304 	and.w	r3, r3, #4
 800b036:	2b00      	cmp	r3, #0
 800b038:	d028      	beq.n	800b08c <netif_issue_reports+0x80>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b040:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b044:	2b00      	cmp	r3, #0
 800b046:	d021      	beq.n	800b08c <netif_issue_reports+0x80>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b048:	78fb      	ldrb	r3, [r7, #3]
 800b04a:	f003 0301 	and.w	r3, r3, #1
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d01d      	beq.n	800b08e <netif_issue_reports+0x82>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	3304      	adds	r3, #4
 800b056:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d018      	beq.n	800b08e <netif_issue_reports+0x82>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b062:	f003 0308 	and.w	r3, r3, #8
 800b066:	2b00      	cmp	r3, #0
 800b068:	d005      	beq.n	800b076 <netif_issue_reports+0x6a>
      etharp_gratuitous(netif);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	3304      	adds	r3, #4
 800b06e:	4619      	mov	r1, r3
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f009 fd51 	bl	8014b18 <etharp_request>
    }
#endif /* LWIP_ARP */

#if LWIP_IGMP
    /* resend IGMP memberships */
    if (netif->flags & NETIF_FLAG_IGMP) {
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b07c:	f003 0320 	and.w	r3, r3, #32
 800b080:	2b00      	cmp	r3, #0
 800b082:	d004      	beq.n	800b08e <netif_issue_reports+0x82>
      igmp_report_groups(netif);
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f009 ff27 	bl	8014ed8 <igmp_report_groups>
 800b08a:	e000      	b.n	800b08e <netif_issue_reports+0x82>
    return;
 800b08c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b08e:	3708      	adds	r7, #8
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}
 800b094:	08018798 	.word	0x08018798
 800b098:	0801893c 	.word	0x0801893c
 800b09c:	080187e8 	.word	0x080187e8

0800b0a0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b086      	sub	sp, #24
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d107      	bne.n	800b0be <netif_set_down+0x1e>
 800b0ae:	4b1b      	ldr	r3, [pc, #108]	@ (800b11c <netif_set_down+0x7c>)
 800b0b0:	f240 329b 	movw	r2, #923	@ 0x39b
 800b0b4:	491a      	ldr	r1, [pc, #104]	@ (800b120 <netif_set_down+0x80>)
 800b0b6:	481b      	ldr	r0, [pc, #108]	@ (800b124 <netif_set_down+0x84>)
 800b0b8:	f00b fee4 	bl	8016e84 <iprintf>
 800b0bc:	e02a      	b.n	800b114 <netif_set_down+0x74>

  if (netif->flags & NETIF_FLAG_UP) {
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b0c4:	f003 0301 	and.w	r3, r3, #1
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d023      	beq.n	800b114 <netif_set_down+0x74>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    {
      netif_ext_callback_args_t args;
      args.status_changed.state = 0;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	733b      	strb	r3, [r7, #12]
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
 800b0d0:	f107 030c 	add.w	r3, r7, #12
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	2108      	movs	r1, #8
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 f8e5 	bl	800b2a8 <netif_invoke_ext_callback>
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b0e4:	f023 0301 	bic.w	r3, r3, #1
 800b0e8:	b2da      	uxtb	r2, r3
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b0f6:	f003 0308 	and.w	r3, r3, #8
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d002      	beq.n	800b104 <netif_set_down+0x64>
      etharp_cleanup_netif(netif);
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f009 f8c4 	bl	801428c <etharp_cleanup_netif>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	69db      	ldr	r3, [r3, #28]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d003      	beq.n	800b114 <netif_set_down+0x74>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	69db      	ldr	r3, [r3, #28]
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	4798      	blx	r3
  }
}
 800b114:	3718      	adds	r7, #24
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop
 800b11c:	08018798 	.word	0x08018798
 800b120:	08018960 	.word	0x08018960
 800b124:	080187e8 	.word	0x080187e8

0800b128 <netif_set_status_callback>:
 * @ingroup netif
 * Set callback to be called when interface is brought up/down or address is changed while up
 */
void
netif_set_status_callback(struct netif *netif, netif_status_callback_fn status_callback)
{
 800b128:	b480      	push	{r7}
 800b12a:	b083      	sub	sp, #12
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d002      	beq.n	800b13e <netif_set_status_callback+0x16>
    netif->status_callback = status_callback;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	683a      	ldr	r2, [r7, #0]
 800b13c:	61da      	str	r2, [r3, #28]
  }
}
 800b13e:	bf00      	nop
 800b140:	370c      	adds	r7, #12
 800b142:	46bd      	mov	sp, r7
 800b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b148:	4770      	bx	lr
	...

0800b14c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b086      	sub	sp, #24
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d107      	bne.n	800b16a <netif_set_link_up+0x1e>
 800b15a:	4b19      	ldr	r3, [pc, #100]	@ (800b1c0 <netif_set_link_up+0x74>)
 800b15c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800b160:	4918      	ldr	r1, [pc, #96]	@ (800b1c4 <netif_set_link_up+0x78>)
 800b162:	4819      	ldr	r0, [pc, #100]	@ (800b1c8 <netif_set_link_up+0x7c>)
 800b164:	f00b fe8e 	bl	8016e84 <iprintf>
 800b168:	e027      	b.n	800b1ba <netif_set_link_up+0x6e>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b170:	f003 0304 	and.w	r3, r3, #4
 800b174:	2b00      	cmp	r3, #0
 800b176:	d120      	bne.n	800b1ba <netif_set_link_up+0x6e>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b17e:	f043 0304 	orr.w	r3, r3, #4
 800b182:	b2da      	uxtb	r2, r3
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f007 fa7a 	bl	8012684 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b190:	2103      	movs	r1, #3
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f7ff ff3a 	bl	800b00c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6a1b      	ldr	r3, [r3, #32]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d003      	beq.n	800b1a8 <netif_set_link_up+0x5c>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6a1b      	ldr	r3, [r3, #32]
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	4798      	blx	r3
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    {
      netif_ext_callback_args_t args;
      args.link_changed.state = 1;
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	733b      	strb	r3, [r7, #12]
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
 800b1ac:	f107 030c 	add.w	r3, r7, #12
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	2104      	movs	r1, #4
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 f877 	bl	800b2a8 <netif_invoke_ext_callback>
    }
#endif
  }
}
 800b1ba:	3718      	adds	r7, #24
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}
 800b1c0:	08018798 	.word	0x08018798
 800b1c4:	08018980 	.word	0x08018980
 800b1c8:	080187e8 	.word	0x080187e8

0800b1cc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b086      	sub	sp, #24
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d107      	bne.n	800b1ea <netif_set_link_down+0x1e>
 800b1da:	4b16      	ldr	r3, [pc, #88]	@ (800b234 <netif_set_link_down+0x68>)
 800b1dc:	f240 4206 	movw	r2, #1030	@ 0x406
 800b1e0:	4915      	ldr	r1, [pc, #84]	@ (800b238 <netif_set_link_down+0x6c>)
 800b1e2:	4816      	ldr	r0, [pc, #88]	@ (800b23c <netif_set_link_down+0x70>)
 800b1e4:	f00b fe4e 	bl	8016e84 <iprintf>
 800b1e8:	e020      	b.n	800b22c <netif_set_link_down+0x60>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b1f0:	f003 0304 	and.w	r3, r3, #4
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d019      	beq.n	800b22c <netif_set_link_down+0x60>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b1fe:	f023 0304 	bic.w	r3, r3, #4
 800b202:	b2da      	uxtb	r2, r3
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    NETIF_LINK_CALLBACK(netif);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6a1b      	ldr	r3, [r3, #32]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d003      	beq.n	800b21a <netif_set_link_down+0x4e>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6a1b      	ldr	r3, [r3, #32]
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	4798      	blx	r3
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    {
      netif_ext_callback_args_t args;
      args.link_changed.state = 0;
 800b21a:	2300      	movs	r3, #0
 800b21c:	733b      	strb	r3, [r7, #12]
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
 800b21e:	f107 030c 	add.w	r3, r7, #12
 800b222:	461a      	mov	r2, r3
 800b224:	2104      	movs	r1, #4
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 f83e 	bl	800b2a8 <netif_invoke_ext_callback>
    }
#endif
  }
}
 800b22c:	3718      	adds	r7, #24
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}
 800b232:	bf00      	nop
 800b234:	08018798 	.word	0x08018798
 800b238:	080189a4 	.word	0x080189a4
 800b23c:	080187e8 	.word	0x080187e8

0800b240 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b240:	b480      	push	{r7}
 800b242:	b085      	sub	sp, #20
 800b244:	af00      	add	r7, sp, #0
 800b246:	60f8      	str	r0, [r7, #12]
 800b248:	60b9      	str	r1, [r7, #8]
 800b24a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b24c:	f06f 030b 	mvn.w	r3, #11
}
 800b250:	4618      	mov	r0, r3
 800b252:	3714      	adds	r7, #20
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr

0800b25c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b085      	sub	sp, #20
 800b260:	af00      	add	r7, sp, #0
 800b262:	4603      	mov	r3, r0
 800b264:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b266:	79fb      	ldrb	r3, [r7, #7]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d013      	beq.n	800b294 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b26c:	4b0d      	ldr	r3, [pc, #52]	@ (800b2a4 <netif_get_by_index+0x48>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	60fb      	str	r3, [r7, #12]
 800b272:	e00c      	b.n	800b28e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b27a:	3301      	adds	r3, #1
 800b27c:	b2db      	uxtb	r3, r3
 800b27e:	79fa      	ldrb	r2, [r7, #7]
 800b280:	429a      	cmp	r2, r3
 800b282:	d101      	bne.n	800b288 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	e006      	b.n	800b296 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	60fb      	str	r3, [r7, #12]
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d1ef      	bne.n	800b274 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b294:	2300      	movs	r3, #0
}
 800b296:	4618      	mov	r0, r3
 800b298:	3714      	adds	r7, #20
 800b29a:	46bd      	mov	sp, r7
 800b29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a0:	4770      	bx	lr
 800b2a2:	bf00      	nop
 800b2a4:	2000cab0 	.word	0x2000cab0

0800b2a8 <netif_invoke_ext_callback>:
 * @param reason change reason
 * @param args depends on reason, see reason description
 */
void
netif_invoke_ext_callback(struct netif *netif, netif_nsc_reason_t reason, const netif_ext_callback_args_t *args)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b086      	sub	sp, #24
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	60f8      	str	r0, [r7, #12]
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	607a      	str	r2, [r7, #4]
 800b2b4:	817b      	strh	r3, [r7, #10]
  netif_ext_callback_t *callback = ext_callback;
 800b2b6:	4b0f      	ldr	r3, [pc, #60]	@ (800b2f4 <netif_invoke_ext_callback+0x4c>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT("netif must be != NULL", netif != NULL);
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d110      	bne.n	800b2e4 <netif_invoke_ext_callback+0x3c>
 800b2c2:	4b0d      	ldr	r3, [pc, #52]	@ (800b2f8 <netif_invoke_ext_callback+0x50>)
 800b2c4:	f240 62fc 	movw	r2, #1788	@ 0x6fc
 800b2c8:	490c      	ldr	r1, [pc, #48]	@ (800b2fc <netif_invoke_ext_callback+0x54>)
 800b2ca:	480d      	ldr	r0, [pc, #52]	@ (800b300 <netif_invoke_ext_callback+0x58>)
 800b2cc:	f00b fdda 	bl	8016e84 <iprintf>

  while (callback != NULL) {
 800b2d0:	e008      	b.n	800b2e4 <netif_invoke_ext_callback+0x3c>
    callback->callback_fn(netif, reason, args);
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	8979      	ldrh	r1, [r7, #10]
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	68f8      	ldr	r0, [r7, #12]
 800b2dc:	4798      	blx	r3
    callback = callback->next;
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	617b      	str	r3, [r7, #20]
  while (callback != NULL) {
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d1f3      	bne.n	800b2d2 <netif_invoke_ext_callback+0x2a>
  }
}
 800b2ea:	bf00      	nop
 800b2ec:	bf00      	nop
 800b2ee:	3718      	adds	r7, #24
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}
 800b2f4:	2000caac 	.word	0x2000caac
 800b2f8:	08018798 	.word	0x08018798
 800b2fc:	08018a08 	.word	0x08018a08
 800b300:	080187e8 	.word	0x080187e8

0800b304 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b082      	sub	sp, #8
 800b308:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b30a:	f00b fc9d 	bl	8016c48 <sys_arch_protect>
 800b30e:	6038      	str	r0, [r7, #0]
 800b310:	4b0d      	ldr	r3, [pc, #52]	@ (800b348 <pbuf_free_ooseq+0x44>)
 800b312:	2200      	movs	r2, #0
 800b314:	701a      	strb	r2, [r3, #0]
 800b316:	6838      	ldr	r0, [r7, #0]
 800b318:	f00b fca4 	bl	8016c64 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b31c:	4b0b      	ldr	r3, [pc, #44]	@ (800b34c <pbuf_free_ooseq+0x48>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	607b      	str	r3, [r7, #4]
 800b322:	e00a      	b.n	800b33a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d003      	beq.n	800b334 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f002 f983 	bl	800d638 <tcp_free_ooseq>
      return;
 800b332:	e005      	b.n	800b340 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	68db      	ldr	r3, [r3, #12]
 800b338:	607b      	str	r3, [r7, #4]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d1f1      	bne.n	800b324 <pbuf_free_ooseq+0x20>
    }
  }
}
 800b340:	3708      	adds	r7, #8
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	2000cab9 	.word	0x2000cab9
 800b34c:	2000cac8 	.word	0x2000cac8

0800b350 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b358:	f7ff ffd4 	bl	800b304 <pbuf_free_ooseq>
}
 800b35c:	bf00      	nop
 800b35e:	3708      	adds	r7, #8
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}

0800b364 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b082      	sub	sp, #8
 800b368:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b36a:	f00b fc6d 	bl	8016c48 <sys_arch_protect>
 800b36e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b370:	4b0f      	ldr	r3, [pc, #60]	@ (800b3b0 <pbuf_pool_is_empty+0x4c>)
 800b372:	781b      	ldrb	r3, [r3, #0]
 800b374:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b376:	4b0e      	ldr	r3, [pc, #56]	@ (800b3b0 <pbuf_pool_is_empty+0x4c>)
 800b378:	2201      	movs	r2, #1
 800b37a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f00b fc71 	bl	8016c64 <sys_arch_unprotect>

  if (!queued) {
 800b382:	78fb      	ldrb	r3, [r7, #3]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d10f      	bne.n	800b3a8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b388:	2100      	movs	r1, #0
 800b38a:	480a      	ldr	r0, [pc, #40]	@ (800b3b4 <pbuf_pool_is_empty+0x50>)
 800b38c:	f7fe fd44 	bl	8009e18 <tcpip_try_callback>
 800b390:	4603      	mov	r3, r0
 800b392:	2b00      	cmp	r3, #0
 800b394:	d008      	beq.n	800b3a8 <pbuf_pool_is_empty+0x44>
 800b396:	f00b fc57 	bl	8016c48 <sys_arch_protect>
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	4b04      	ldr	r3, [pc, #16]	@ (800b3b0 <pbuf_pool_is_empty+0x4c>)
 800b39e:	2200      	movs	r2, #0
 800b3a0:	701a      	strb	r2, [r3, #0]
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f00b fc5e 	bl	8016c64 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b3a8:	bf00      	nop
 800b3aa:	3708      	adds	r7, #8
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}
 800b3b0:	2000cab9 	.word	0x2000cab9
 800b3b4:	0800b351 	.word	0x0800b351

0800b3b8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b085      	sub	sp, #20
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	60b9      	str	r1, [r7, #8]
 800b3c2:	4611      	mov	r1, r2
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	460b      	mov	r3, r1
 800b3c8:	80fb      	strh	r3, [r7, #6]
 800b3ca:	4613      	mov	r3, r2
 800b3cc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	68ba      	ldr	r2, [r7, #8]
 800b3d8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	88fa      	ldrh	r2, [r7, #6]
 800b3de:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	88ba      	ldrh	r2, [r7, #4]
 800b3e4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b3e6:	8b3b      	ldrh	r3, [r7, #24]
 800b3e8:	b2da      	uxtb	r2, r3
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	7f3a      	ldrb	r2, [r7, #28]
 800b3f2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	73da      	strb	r2, [r3, #15]
}
 800b400:	bf00      	nop
 800b402:	3714      	adds	r7, #20
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b08c      	sub	sp, #48	@ 0x30
 800b410:	af02      	add	r7, sp, #8
 800b412:	4603      	mov	r3, r0
 800b414:	71fb      	strb	r3, [r7, #7]
 800b416:	460b      	mov	r3, r1
 800b418:	80bb      	strh	r3, [r7, #4]
 800b41a:	4613      	mov	r3, r2
 800b41c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b41e:	79fb      	ldrb	r3, [r7, #7]
 800b420:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b422:	887b      	ldrh	r3, [r7, #2]
 800b424:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800b428:	d07f      	beq.n	800b52a <pbuf_alloc+0x11e>
 800b42a:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800b42e:	f300 80c8 	bgt.w	800b5c2 <pbuf_alloc+0x1b6>
 800b432:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800b436:	d010      	beq.n	800b45a <pbuf_alloc+0x4e>
 800b438:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800b43c:	f300 80c1 	bgt.w	800b5c2 <pbuf_alloc+0x1b6>
 800b440:	2b01      	cmp	r3, #1
 800b442:	d002      	beq.n	800b44a <pbuf_alloc+0x3e>
 800b444:	2b41      	cmp	r3, #65	@ 0x41
 800b446:	f040 80bc 	bne.w	800b5c2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b44a:	887a      	ldrh	r2, [r7, #2]
 800b44c:	88bb      	ldrh	r3, [r7, #4]
 800b44e:	4619      	mov	r1, r3
 800b450:	2000      	movs	r0, #0
 800b452:	f000 f8d1 	bl	800b5f8 <pbuf_alloc_reference>
 800b456:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800b458:	e0bd      	b.n	800b5d6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b45a:	2300      	movs	r3, #0
 800b45c:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800b45e:	2300      	movs	r3, #0
 800b460:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b462:	88bb      	ldrh	r3, [r7, #4]
 800b464:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b466:	200d      	movs	r0, #13
 800b468:	f7ff faa8 	bl	800a9bc <memp_malloc>
 800b46c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d109      	bne.n	800b488 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b474:	f7ff ff76 	bl	800b364 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d002      	beq.n	800b484 <pbuf_alloc+0x78>
            pbuf_free(p);
 800b47e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b480:	f000 faa8 	bl	800b9d4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b484:	2300      	movs	r3, #0
 800b486:	e0a7      	b.n	800b5d8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b488:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b48a:	3303      	adds	r3, #3
 800b48c:	b29b      	uxth	r3, r3
 800b48e:	f023 0303 	bic.w	r3, r3, #3
 800b492:	b29b      	uxth	r3, r3
 800b494:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800b498:	b29b      	uxth	r3, r3
 800b49a:	8b7a      	ldrh	r2, [r7, #26]
 800b49c:	4293      	cmp	r3, r2
 800b49e:	bf28      	it	cs
 800b4a0:	4613      	movcs	r3, r2
 800b4a2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b4a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b4a6:	3310      	adds	r3, #16
 800b4a8:	693a      	ldr	r2, [r7, #16]
 800b4aa:	4413      	add	r3, r2
 800b4ac:	3303      	adds	r3, #3
 800b4ae:	f023 0303 	bic.w	r3, r3, #3
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	89f9      	ldrh	r1, [r7, #14]
 800b4b6:	8b7a      	ldrh	r2, [r7, #26]
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	9301      	str	r3, [sp, #4]
 800b4bc:	887b      	ldrh	r3, [r7, #2]
 800b4be:	9300      	str	r3, [sp, #0]
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	4601      	mov	r1, r0
 800b4c4:	6938      	ldr	r0, [r7, #16]
 800b4c6:	f7ff ff77 	bl	800b3b8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	f003 0303 	and.w	r3, r3, #3
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d006      	beq.n	800b4e4 <pbuf_alloc+0xd8>
 800b4d6:	4b42      	ldr	r3, [pc, #264]	@ (800b5e0 <pbuf_alloc+0x1d4>)
 800b4d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b4dc:	4941      	ldr	r1, [pc, #260]	@ (800b5e4 <pbuf_alloc+0x1d8>)
 800b4de:	4842      	ldr	r0, [pc, #264]	@ (800b5e8 <pbuf_alloc+0x1dc>)
 800b4e0:	f00b fcd0 	bl	8016e84 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b4e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b4e6:	3303      	adds	r3, #3
 800b4e8:	f023 0303 	bic.w	r3, r3, #3
 800b4ec:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800b4f0:	d106      	bne.n	800b500 <pbuf_alloc+0xf4>
 800b4f2:	4b3b      	ldr	r3, [pc, #236]	@ (800b5e0 <pbuf_alloc+0x1d4>)
 800b4f4:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800b4f8:	493c      	ldr	r1, [pc, #240]	@ (800b5ec <pbuf_alloc+0x1e0>)
 800b4fa:	483b      	ldr	r0, [pc, #236]	@ (800b5e8 <pbuf_alloc+0x1dc>)
 800b4fc:	f00b fcc2 	bl	8016e84 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b502:	2b00      	cmp	r3, #0
 800b504:	d102      	bne.n	800b50c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	627b      	str	r3, [r7, #36]	@ 0x24
 800b50a:	e002      	b.n	800b512 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b50c:	69fb      	ldr	r3, [r7, #28]
 800b50e:	693a      	ldr	r2, [r7, #16]
 800b510:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b516:	8b7a      	ldrh	r2, [r7, #26]
 800b518:	89fb      	ldrh	r3, [r7, #14]
 800b51a:	1ad3      	subs	r3, r2, r3
 800b51c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b51e:	2300      	movs	r3, #0
 800b520:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800b522:	8b7b      	ldrh	r3, [r7, #26]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d19e      	bne.n	800b466 <pbuf_alloc+0x5a>
      break;
 800b528:	e055      	b.n	800b5d6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b52a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b52c:	3303      	adds	r3, #3
 800b52e:	b29b      	uxth	r3, r3
 800b530:	f023 0303 	bic.w	r3, r3, #3
 800b534:	b29a      	uxth	r2, r3
 800b536:	88bb      	ldrh	r3, [r7, #4]
 800b538:	3303      	adds	r3, #3
 800b53a:	b29b      	uxth	r3, r3
 800b53c:	f023 0303 	bic.w	r3, r3, #3
 800b540:	b29b      	uxth	r3, r3
 800b542:	4413      	add	r3, r2
 800b544:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b546:	8b3b      	ldrh	r3, [r7, #24]
 800b548:	3310      	adds	r3, #16
 800b54a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b54c:	8b3a      	ldrh	r2, [r7, #24]
 800b54e:	88bb      	ldrh	r3, [r7, #4]
 800b550:	3303      	adds	r3, #3
 800b552:	f023 0303 	bic.w	r3, r3, #3
 800b556:	429a      	cmp	r2, r3
 800b558:	d306      	bcc.n	800b568 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b55a:	8afa      	ldrh	r2, [r7, #22]
 800b55c:	88bb      	ldrh	r3, [r7, #4]
 800b55e:	3303      	adds	r3, #3
 800b560:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b564:	429a      	cmp	r2, r3
 800b566:	d201      	bcs.n	800b56c <pbuf_alloc+0x160>
        return NULL;
 800b568:	2300      	movs	r3, #0
 800b56a:	e035      	b.n	800b5d8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b56c:	8afb      	ldrh	r3, [r7, #22]
 800b56e:	4618      	mov	r0, r3
 800b570:	f7ff f880 	bl	800a674 <mem_malloc>
 800b574:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800b576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d101      	bne.n	800b580 <pbuf_alloc+0x174>
        return NULL;
 800b57c:	2300      	movs	r3, #0
 800b57e:	e02b      	b.n	800b5d8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b580:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b582:	3310      	adds	r3, #16
 800b584:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b586:	4413      	add	r3, r2
 800b588:	3303      	adds	r3, #3
 800b58a:	f023 0303 	bic.w	r3, r3, #3
 800b58e:	4618      	mov	r0, r3
 800b590:	88b9      	ldrh	r1, [r7, #4]
 800b592:	88ba      	ldrh	r2, [r7, #4]
 800b594:	2300      	movs	r3, #0
 800b596:	9301      	str	r3, [sp, #4]
 800b598:	887b      	ldrh	r3, [r7, #2]
 800b59a:	9300      	str	r3, [sp, #0]
 800b59c:	460b      	mov	r3, r1
 800b59e:	4601      	mov	r1, r0
 800b5a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b5a2:	f7ff ff09 	bl	800b3b8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	f003 0303 	and.w	r3, r3, #3
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d010      	beq.n	800b5d4 <pbuf_alloc+0x1c8>
 800b5b2:	4b0b      	ldr	r3, [pc, #44]	@ (800b5e0 <pbuf_alloc+0x1d4>)
 800b5b4:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800b5b8:	490d      	ldr	r1, [pc, #52]	@ (800b5f0 <pbuf_alloc+0x1e4>)
 800b5ba:	480b      	ldr	r0, [pc, #44]	@ (800b5e8 <pbuf_alloc+0x1dc>)
 800b5bc:	f00b fc62 	bl	8016e84 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b5c0:	e008      	b.n	800b5d4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b5c2:	4b07      	ldr	r3, [pc, #28]	@ (800b5e0 <pbuf_alloc+0x1d4>)
 800b5c4:	f240 1227 	movw	r2, #295	@ 0x127
 800b5c8:	490a      	ldr	r1, [pc, #40]	@ (800b5f4 <pbuf_alloc+0x1e8>)
 800b5ca:	4807      	ldr	r0, [pc, #28]	@ (800b5e8 <pbuf_alloc+0x1dc>)
 800b5cc:	f00b fc5a 	bl	8016e84 <iprintf>
      return NULL;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	e001      	b.n	800b5d8 <pbuf_alloc+0x1cc>
      break;
 800b5d4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3728      	adds	r7, #40	@ 0x28
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}
 800b5e0:	08018a20 	.word	0x08018a20
 800b5e4:	08018a50 	.word	0x08018a50
 800b5e8:	08018a80 	.word	0x08018a80
 800b5ec:	08018aa8 	.word	0x08018aa8
 800b5f0:	08018adc 	.word	0x08018adc
 800b5f4:	08018b08 	.word	0x08018b08

0800b5f8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b086      	sub	sp, #24
 800b5fc:	af02      	add	r7, sp, #8
 800b5fe:	6078      	str	r0, [r7, #4]
 800b600:	460b      	mov	r3, r1
 800b602:	807b      	strh	r3, [r7, #2]
 800b604:	4613      	mov	r3, r2
 800b606:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b608:	883b      	ldrh	r3, [r7, #0]
 800b60a:	2b41      	cmp	r3, #65	@ 0x41
 800b60c:	d009      	beq.n	800b622 <pbuf_alloc_reference+0x2a>
 800b60e:	883b      	ldrh	r3, [r7, #0]
 800b610:	2b01      	cmp	r3, #1
 800b612:	d006      	beq.n	800b622 <pbuf_alloc_reference+0x2a>
 800b614:	4b0f      	ldr	r3, [pc, #60]	@ (800b654 <pbuf_alloc_reference+0x5c>)
 800b616:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800b61a:	490f      	ldr	r1, [pc, #60]	@ (800b658 <pbuf_alloc_reference+0x60>)
 800b61c:	480f      	ldr	r0, [pc, #60]	@ (800b65c <pbuf_alloc_reference+0x64>)
 800b61e:	f00b fc31 	bl	8016e84 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b622:	200c      	movs	r0, #12
 800b624:	f7ff f9ca 	bl	800a9bc <memp_malloc>
 800b628:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d101      	bne.n	800b634 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b630:	2300      	movs	r3, #0
 800b632:	e00b      	b.n	800b64c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b634:	8879      	ldrh	r1, [r7, #2]
 800b636:	887a      	ldrh	r2, [r7, #2]
 800b638:	2300      	movs	r3, #0
 800b63a:	9301      	str	r3, [sp, #4]
 800b63c:	883b      	ldrh	r3, [r7, #0]
 800b63e:	9300      	str	r3, [sp, #0]
 800b640:	460b      	mov	r3, r1
 800b642:	6879      	ldr	r1, [r7, #4]
 800b644:	68f8      	ldr	r0, [r7, #12]
 800b646:	f7ff feb7 	bl	800b3b8 <pbuf_init_alloced_pbuf>
  return p;
 800b64a:	68fb      	ldr	r3, [r7, #12]
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3710      	adds	r7, #16
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}
 800b654:	08018a20 	.word	0x08018a20
 800b658:	08018b24 	.word	0x08018b24
 800b65c:	08018a80 	.word	0x08018a80

0800b660 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b088      	sub	sp, #32
 800b664:	af02      	add	r7, sp, #8
 800b666:	607b      	str	r3, [r7, #4]
 800b668:	4603      	mov	r3, r0
 800b66a:	73fb      	strb	r3, [r7, #15]
 800b66c:	460b      	mov	r3, r1
 800b66e:	81bb      	strh	r3, [r7, #12]
 800b670:	4613      	mov	r3, r2
 800b672:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b674:	7bfb      	ldrb	r3, [r7, #15]
 800b676:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b678:	8a7b      	ldrh	r3, [r7, #18]
 800b67a:	3303      	adds	r3, #3
 800b67c:	f023 0203 	bic.w	r2, r3, #3
 800b680:	89bb      	ldrh	r3, [r7, #12]
 800b682:	441a      	add	r2, r3
 800b684:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b686:	429a      	cmp	r2, r3
 800b688:	d901      	bls.n	800b68e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b68a:	2300      	movs	r3, #0
 800b68c:	e018      	b.n	800b6c0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b68e:	6a3b      	ldr	r3, [r7, #32]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d007      	beq.n	800b6a4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b694:	8a7b      	ldrh	r3, [r7, #18]
 800b696:	3303      	adds	r3, #3
 800b698:	f023 0303 	bic.w	r3, r3, #3
 800b69c:	6a3a      	ldr	r2, [r7, #32]
 800b69e:	4413      	add	r3, r2
 800b6a0:	617b      	str	r3, [r7, #20]
 800b6a2:	e001      	b.n	800b6a8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	89b9      	ldrh	r1, [r7, #12]
 800b6ac:	89ba      	ldrh	r2, [r7, #12]
 800b6ae:	2302      	movs	r3, #2
 800b6b0:	9301      	str	r3, [sp, #4]
 800b6b2:	897b      	ldrh	r3, [r7, #10]
 800b6b4:	9300      	str	r3, [sp, #0]
 800b6b6:	460b      	mov	r3, r1
 800b6b8:	6979      	ldr	r1, [r7, #20]
 800b6ba:	f7ff fe7d 	bl	800b3b8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b6be:	687b      	ldr	r3, [r7, #4]
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3718      	adds	r7, #24
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b084      	sub	sp, #16
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	460b      	mov	r3, r1
 800b6d2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d106      	bne.n	800b6e8 <pbuf_realloc+0x20>
 800b6da:	4b3a      	ldr	r3, [pc, #232]	@ (800b7c4 <pbuf_realloc+0xfc>)
 800b6dc:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800b6e0:	4939      	ldr	r1, [pc, #228]	@ (800b7c8 <pbuf_realloc+0x100>)
 800b6e2:	483a      	ldr	r0, [pc, #232]	@ (800b7cc <pbuf_realloc+0x104>)
 800b6e4:	f00b fbce 	bl	8016e84 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	891b      	ldrh	r3, [r3, #8]
 800b6ec:	887a      	ldrh	r2, [r7, #2]
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	d263      	bcs.n	800b7ba <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	891a      	ldrh	r2, [r3, #8]
 800b6f6:	887b      	ldrh	r3, [r7, #2]
 800b6f8:	1ad3      	subs	r3, r2, r3
 800b6fa:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b6fc:	887b      	ldrh	r3, [r7, #2]
 800b6fe:	817b      	strh	r3, [r7, #10]
  q = p;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b704:	e018      	b.n	800b738 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	895b      	ldrh	r3, [r3, #10]
 800b70a:	897a      	ldrh	r2, [r7, #10]
 800b70c:	1ad3      	subs	r3, r2, r3
 800b70e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	891a      	ldrh	r2, [r3, #8]
 800b714:	893b      	ldrh	r3, [r7, #8]
 800b716:	1ad3      	subs	r3, r2, r3
 800b718:	b29a      	uxth	r2, r3
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d106      	bne.n	800b738 <pbuf_realloc+0x70>
 800b72a:	4b26      	ldr	r3, [pc, #152]	@ (800b7c4 <pbuf_realloc+0xfc>)
 800b72c:	f240 12af 	movw	r2, #431	@ 0x1af
 800b730:	4927      	ldr	r1, [pc, #156]	@ (800b7d0 <pbuf_realloc+0x108>)
 800b732:	4826      	ldr	r0, [pc, #152]	@ (800b7cc <pbuf_realloc+0x104>)
 800b734:	f00b fba6 	bl	8016e84 <iprintf>
  while (rem_len > q->len) {
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	895b      	ldrh	r3, [r3, #10]
 800b73c:	897a      	ldrh	r2, [r7, #10]
 800b73e:	429a      	cmp	r2, r3
 800b740:	d8e1      	bhi.n	800b706 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	7b1b      	ldrb	r3, [r3, #12]
 800b746:	f003 030f 	and.w	r3, r3, #15
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d121      	bne.n	800b792 <pbuf_realloc+0xca>
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	895b      	ldrh	r3, [r3, #10]
 800b752:	897a      	ldrh	r2, [r7, #10]
 800b754:	429a      	cmp	r2, r3
 800b756:	d01c      	beq.n	800b792 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	7b5b      	ldrb	r3, [r3, #13]
 800b75c:	f003 0302 	and.w	r3, r3, #2
 800b760:	2b00      	cmp	r3, #0
 800b762:	d116      	bne.n	800b792 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	685a      	ldr	r2, [r3, #4]
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	1ad3      	subs	r3, r2, r3
 800b76c:	b29a      	uxth	r2, r3
 800b76e:	897b      	ldrh	r3, [r7, #10]
 800b770:	4413      	add	r3, r2
 800b772:	b29b      	uxth	r3, r3
 800b774:	4619      	mov	r1, r3
 800b776:	68f8      	ldr	r0, [r7, #12]
 800b778:	f7fe fe72 	bl	800a460 <mem_trim>
 800b77c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d106      	bne.n	800b792 <pbuf_realloc+0xca>
 800b784:	4b0f      	ldr	r3, [pc, #60]	@ (800b7c4 <pbuf_realloc+0xfc>)
 800b786:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800b78a:	4912      	ldr	r1, [pc, #72]	@ (800b7d4 <pbuf_realloc+0x10c>)
 800b78c:	480f      	ldr	r0, [pc, #60]	@ (800b7cc <pbuf_realloc+0x104>)
 800b78e:	f00b fb79 	bl	8016e84 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	897a      	ldrh	r2, [r7, #10]
 800b796:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	895a      	ldrh	r2, [r3, #10]
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d004      	beq.n	800b7b2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f000 f911 	bl	800b9d4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	601a      	str	r2, [r3, #0]
 800b7b8:	e000      	b.n	800b7bc <pbuf_realloc+0xf4>
    return;
 800b7ba:	bf00      	nop

}
 800b7bc:	3710      	adds	r7, #16
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	bf00      	nop
 800b7c4:	08018a20 	.word	0x08018a20
 800b7c8:	08018b38 	.word	0x08018b38
 800b7cc:	08018a80 	.word	0x08018a80
 800b7d0:	08018b50 	.word	0x08018b50
 800b7d4:	08018b68 	.word	0x08018b68

0800b7d8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b086      	sub	sp, #24
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	60f8      	str	r0, [r7, #12]
 800b7e0:	60b9      	str	r1, [r7, #8]
 800b7e2:	4613      	mov	r3, r2
 800b7e4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d106      	bne.n	800b7fa <pbuf_add_header_impl+0x22>
 800b7ec:	4b2b      	ldr	r3, [pc, #172]	@ (800b89c <pbuf_add_header_impl+0xc4>)
 800b7ee:	f240 12df 	movw	r2, #479	@ 0x1df
 800b7f2:	492b      	ldr	r1, [pc, #172]	@ (800b8a0 <pbuf_add_header_impl+0xc8>)
 800b7f4:	482b      	ldr	r0, [pc, #172]	@ (800b8a4 <pbuf_add_header_impl+0xcc>)
 800b7f6:	f00b fb45 	bl	8016e84 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d003      	beq.n	800b808 <pbuf_add_header_impl+0x30>
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b806:	d301      	bcc.n	800b80c <pbuf_add_header_impl+0x34>
    return 1;
 800b808:	2301      	movs	r3, #1
 800b80a:	e043      	b.n	800b894 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d101      	bne.n	800b816 <pbuf_add_header_impl+0x3e>
    return 0;
 800b812:	2300      	movs	r3, #0
 800b814:	e03e      	b.n	800b894 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	891a      	ldrh	r2, [r3, #8]
 800b81e:	8a7b      	ldrh	r3, [r7, #18]
 800b820:	4413      	add	r3, r2
 800b822:	b29b      	uxth	r3, r3
 800b824:	8a7a      	ldrh	r2, [r7, #18]
 800b826:	429a      	cmp	r2, r3
 800b828:	d901      	bls.n	800b82e <pbuf_add_header_impl+0x56>
    return 1;
 800b82a:	2301      	movs	r3, #1
 800b82c:	e032      	b.n	800b894 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	7b1b      	ldrb	r3, [r3, #12]
 800b832:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b834:	8a3b      	ldrh	r3, [r7, #16]
 800b836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d00c      	beq.n	800b858 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	685a      	ldr	r2, [r3, #4]
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	425b      	negs	r3, r3
 800b846:	4413      	add	r3, r2
 800b848:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	3310      	adds	r3, #16
 800b84e:	697a      	ldr	r2, [r7, #20]
 800b850:	429a      	cmp	r2, r3
 800b852:	d20d      	bcs.n	800b870 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b854:	2301      	movs	r3, #1
 800b856:	e01d      	b.n	800b894 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b858:	79fb      	ldrb	r3, [r7, #7]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d006      	beq.n	800b86c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	685a      	ldr	r2, [r3, #4]
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	425b      	negs	r3, r3
 800b866:	4413      	add	r3, r2
 800b868:	617b      	str	r3, [r7, #20]
 800b86a:	e001      	b.n	800b870 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b86c:	2301      	movs	r3, #1
 800b86e:	e011      	b.n	800b894 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	697a      	ldr	r2, [r7, #20]
 800b874:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	895a      	ldrh	r2, [r3, #10]
 800b87a:	8a7b      	ldrh	r3, [r7, #18]
 800b87c:	4413      	add	r3, r2
 800b87e:	b29a      	uxth	r2, r3
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	891a      	ldrh	r2, [r3, #8]
 800b888:	8a7b      	ldrh	r3, [r7, #18]
 800b88a:	4413      	add	r3, r2
 800b88c:	b29a      	uxth	r2, r3
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	811a      	strh	r2, [r3, #8]


  return 0;
 800b892:	2300      	movs	r3, #0
}
 800b894:	4618      	mov	r0, r3
 800b896:	3718      	adds	r7, #24
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}
 800b89c:	08018a20 	.word	0x08018a20
 800b8a0:	08018b84 	.word	0x08018b84
 800b8a4:	08018a80 	.word	0x08018a80

0800b8a8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	6839      	ldr	r1, [r7, #0]
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f7ff ff8e 	bl	800b7d8 <pbuf_add_header_impl>
 800b8bc:	4603      	mov	r3, r0
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3708      	adds	r7, #8
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}
	...

0800b8c8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d106      	bne.n	800b8e6 <pbuf_remove_header+0x1e>
 800b8d8:	4b20      	ldr	r3, [pc, #128]	@ (800b95c <pbuf_remove_header+0x94>)
 800b8da:	f240 224b 	movw	r2, #587	@ 0x24b
 800b8de:	4920      	ldr	r1, [pc, #128]	@ (800b960 <pbuf_remove_header+0x98>)
 800b8e0:	4820      	ldr	r0, [pc, #128]	@ (800b964 <pbuf_remove_header+0x9c>)
 800b8e2:	f00b facf 	bl	8016e84 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d003      	beq.n	800b8f4 <pbuf_remove_header+0x2c>
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8f2:	d301      	bcc.n	800b8f8 <pbuf_remove_header+0x30>
    return 1;
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	e02c      	b.n	800b952 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d101      	bne.n	800b902 <pbuf_remove_header+0x3a>
    return 0;
 800b8fe:	2300      	movs	r3, #0
 800b900:	e027      	b.n	800b952 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	895b      	ldrh	r3, [r3, #10]
 800b90a:	89fa      	ldrh	r2, [r7, #14]
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d908      	bls.n	800b922 <pbuf_remove_header+0x5a>
 800b910:	4b12      	ldr	r3, [pc, #72]	@ (800b95c <pbuf_remove_header+0x94>)
 800b912:	f240 2255 	movw	r2, #597	@ 0x255
 800b916:	4914      	ldr	r1, [pc, #80]	@ (800b968 <pbuf_remove_header+0xa0>)
 800b918:	4812      	ldr	r0, [pc, #72]	@ (800b964 <pbuf_remove_header+0x9c>)
 800b91a:	f00b fab3 	bl	8016e84 <iprintf>
 800b91e:	2301      	movs	r3, #1
 800b920:	e017      	b.n	800b952 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	685b      	ldr	r3, [r3, #4]
 800b926:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	685a      	ldr	r2, [r3, #4]
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	441a      	add	r2, r3
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	895a      	ldrh	r2, [r3, #10]
 800b938:	89fb      	ldrh	r3, [r7, #14]
 800b93a:	1ad3      	subs	r3, r2, r3
 800b93c:	b29a      	uxth	r2, r3
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	891a      	ldrh	r2, [r3, #8]
 800b946:	89fb      	ldrh	r3, [r7, #14]
 800b948:	1ad3      	subs	r3, r2, r3
 800b94a:	b29a      	uxth	r2, r3
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b950:	2300      	movs	r3, #0
}
 800b952:	4618      	mov	r0, r3
 800b954:	3710      	adds	r7, #16
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}
 800b95a:	bf00      	nop
 800b95c:	08018a20 	.word	0x08018a20
 800b960:	08018b84 	.word	0x08018b84
 800b964:	08018a80 	.word	0x08018a80
 800b968:	08018b90 	.word	0x08018b90

0800b96c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b082      	sub	sp, #8
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	460b      	mov	r3, r1
 800b976:	807b      	strh	r3, [r7, #2]
 800b978:	4613      	mov	r3, r2
 800b97a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b97c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b980:	2b00      	cmp	r3, #0
 800b982:	da08      	bge.n	800b996 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b984:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b988:	425b      	negs	r3, r3
 800b98a:	4619      	mov	r1, r3
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f7ff ff9b 	bl	800b8c8 <pbuf_remove_header>
 800b992:	4603      	mov	r3, r0
 800b994:	e007      	b.n	800b9a6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b996:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b99a:	787a      	ldrb	r2, [r7, #1]
 800b99c:	4619      	mov	r1, r3
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f7ff ff1a 	bl	800b7d8 <pbuf_add_header_impl>
 800b9a4:	4603      	mov	r3, r0
  }
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3708      	adds	r7, #8
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}

0800b9ae <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b9ae:	b580      	push	{r7, lr}
 800b9b0:	b082      	sub	sp, #8
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
 800b9b6:	460b      	mov	r3, r1
 800b9b8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b9ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b9be:	2201      	movs	r2, #1
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f7ff ffd2 	bl	800b96c <pbuf_header_impl>
 800b9c8:	4603      	mov	r3, r0
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3708      	adds	r7, #8
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
	...

0800b9d4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b088      	sub	sp, #32
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d10b      	bne.n	800b9fa <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d106      	bne.n	800b9f6 <pbuf_free+0x22>
 800b9e8:	4b3b      	ldr	r3, [pc, #236]	@ (800bad8 <pbuf_free+0x104>)
 800b9ea:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800b9ee:	493b      	ldr	r1, [pc, #236]	@ (800badc <pbuf_free+0x108>)
 800b9f0:	483b      	ldr	r0, [pc, #236]	@ (800bae0 <pbuf_free+0x10c>)
 800b9f2:	f00b fa47 	bl	8016e84 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	e069      	b.n	800bace <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b9fe:	e062      	b.n	800bac6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800ba00:	f00b f922 	bl	8016c48 <sys_arch_protect>
 800ba04:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	7b9b      	ldrb	r3, [r3, #14]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d106      	bne.n	800ba1c <pbuf_free+0x48>
 800ba0e:	4b32      	ldr	r3, [pc, #200]	@ (800bad8 <pbuf_free+0x104>)
 800ba10:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800ba14:	4933      	ldr	r1, [pc, #204]	@ (800bae4 <pbuf_free+0x110>)
 800ba16:	4832      	ldr	r0, [pc, #200]	@ (800bae0 <pbuf_free+0x10c>)
 800ba18:	f00b fa34 	bl	8016e84 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	7b9b      	ldrb	r3, [r3, #14]
 800ba20:	3b01      	subs	r3, #1
 800ba22:	b2da      	uxtb	r2, r3
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	739a      	strb	r2, [r3, #14]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	7b9b      	ldrb	r3, [r3, #14]
 800ba2c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800ba2e:	69b8      	ldr	r0, [r7, #24]
 800ba30:	f00b f918 	bl	8016c64 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ba34:	7dfb      	ldrb	r3, [r7, #23]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d143      	bne.n	800bac2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	7b1b      	ldrb	r3, [r3, #12]
 800ba44:	f003 030f 	and.w	r3, r3, #15
 800ba48:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	7b5b      	ldrb	r3, [r3, #13]
 800ba4e:	f003 0302 	and.w	r3, r3, #2
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d011      	beq.n	800ba7a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	691b      	ldr	r3, [r3, #16]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d106      	bne.n	800ba70 <pbuf_free+0x9c>
 800ba62:	4b1d      	ldr	r3, [pc, #116]	@ (800bad8 <pbuf_free+0x104>)
 800ba64:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800ba68:	491f      	ldr	r1, [pc, #124]	@ (800bae8 <pbuf_free+0x114>)
 800ba6a:	481d      	ldr	r0, [pc, #116]	@ (800bae0 <pbuf_free+0x10c>)
 800ba6c:	f00b fa0a 	bl	8016e84 <iprintf>
        pc->custom_free_function(p);
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	691b      	ldr	r3, [r3, #16]
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	4798      	blx	r3
 800ba78:	e01d      	b.n	800bab6 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ba7a:	7bfb      	ldrb	r3, [r7, #15]
 800ba7c:	2b02      	cmp	r3, #2
 800ba7e:	d104      	bne.n	800ba8a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800ba80:	6879      	ldr	r1, [r7, #4]
 800ba82:	200d      	movs	r0, #13
 800ba84:	f7ff f810 	bl	800aaa8 <memp_free>
 800ba88:	e015      	b.n	800bab6 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ba8a:	7bfb      	ldrb	r3, [r7, #15]
 800ba8c:	2b01      	cmp	r3, #1
 800ba8e:	d104      	bne.n	800ba9a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800ba90:	6879      	ldr	r1, [r7, #4]
 800ba92:	200c      	movs	r0, #12
 800ba94:	f7ff f808 	bl	800aaa8 <memp_free>
 800ba98:	e00d      	b.n	800bab6 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ba9a:	7bfb      	ldrb	r3, [r7, #15]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d103      	bne.n	800baa8 <pbuf_free+0xd4>
          mem_free(p);
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f7fe fc4d 	bl	800a340 <mem_free>
 800baa6:	e006      	b.n	800bab6 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800baa8:	4b0b      	ldr	r3, [pc, #44]	@ (800bad8 <pbuf_free+0x104>)
 800baaa:	f240 320f 	movw	r2, #783	@ 0x30f
 800baae:	490f      	ldr	r1, [pc, #60]	@ (800baec <pbuf_free+0x118>)
 800bab0:	480b      	ldr	r0, [pc, #44]	@ (800bae0 <pbuf_free+0x10c>)
 800bab2:	f00b f9e7 	bl	8016e84 <iprintf>
        }
      }
      count++;
 800bab6:	7ffb      	ldrb	r3, [r7, #31]
 800bab8:	3301      	adds	r3, #1
 800baba:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	607b      	str	r3, [r7, #4]
 800bac0:	e001      	b.n	800bac6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800bac2:	2300      	movs	r3, #0
 800bac4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d199      	bne.n	800ba00 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800bacc:	7ffb      	ldrb	r3, [r7, #31]
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3720      	adds	r7, #32
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}
 800bad6:	bf00      	nop
 800bad8:	08018a20 	.word	0x08018a20
 800badc:	08018b84 	.word	0x08018b84
 800bae0:	08018a80 	.word	0x08018a80
 800bae4:	08018bb0 	.word	0x08018bb0
 800bae8:	08018bc8 	.word	0x08018bc8
 800baec:	08018bec 	.word	0x08018bec

0800baf0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800baf0:	b480      	push	{r7}
 800baf2:	b085      	sub	sp, #20
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800baf8:	2300      	movs	r3, #0
 800bafa:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800bafc:	e005      	b.n	800bb0a <pbuf_clen+0x1a>
    ++len;
 800bafe:	89fb      	ldrh	r3, [r7, #14]
 800bb00:	3301      	adds	r3, #1
 800bb02:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d1f6      	bne.n	800bafe <pbuf_clen+0xe>
  }
  return len;
 800bb10:	89fb      	ldrh	r3, [r7, #14]
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3714      	adds	r7, #20
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr
	...

0800bb20 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b084      	sub	sp, #16
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d016      	beq.n	800bb5c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800bb2e:	f00b f88b 	bl	8016c48 <sys_arch_protect>
 800bb32:	60f8      	str	r0, [r7, #12]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	7b9b      	ldrb	r3, [r3, #14]
 800bb38:	3301      	adds	r3, #1
 800bb3a:	b2da      	uxtb	r2, r3
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	739a      	strb	r2, [r3, #14]
 800bb40:	68f8      	ldr	r0, [r7, #12]
 800bb42:	f00b f88f 	bl	8016c64 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	7b9b      	ldrb	r3, [r3, #14]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d106      	bne.n	800bb5c <pbuf_ref+0x3c>
 800bb4e:	4b05      	ldr	r3, [pc, #20]	@ (800bb64 <pbuf_ref+0x44>)
 800bb50:	f240 3242 	movw	r2, #834	@ 0x342
 800bb54:	4904      	ldr	r1, [pc, #16]	@ (800bb68 <pbuf_ref+0x48>)
 800bb56:	4805      	ldr	r0, [pc, #20]	@ (800bb6c <pbuf_ref+0x4c>)
 800bb58:	f00b f994 	bl	8016e84 <iprintf>
  }
}
 800bb5c:	bf00      	nop
 800bb5e:	3710      	adds	r7, #16
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}
 800bb64:	08018a20 	.word	0x08018a20
 800bb68:	08018c00 	.word	0x08018c00
 800bb6c:	08018a80 	.word	0x08018a80

0800bb70 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b084      	sub	sp, #16
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d002      	beq.n	800bb86 <pbuf_cat+0x16>
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d107      	bne.n	800bb96 <pbuf_cat+0x26>
 800bb86:	4b20      	ldr	r3, [pc, #128]	@ (800bc08 <pbuf_cat+0x98>)
 800bb88:	f240 3259 	movw	r2, #857	@ 0x359
 800bb8c:	491f      	ldr	r1, [pc, #124]	@ (800bc0c <pbuf_cat+0x9c>)
 800bb8e:	4820      	ldr	r0, [pc, #128]	@ (800bc10 <pbuf_cat+0xa0>)
 800bb90:	f00b f978 	bl	8016e84 <iprintf>
 800bb94:	e034      	b.n	800bc00 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	60fb      	str	r3, [r7, #12]
 800bb9a:	e00a      	b.n	800bbb2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	891a      	ldrh	r2, [r3, #8]
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	891b      	ldrh	r3, [r3, #8]
 800bba4:	4413      	add	r3, r2
 800bba6:	b29a      	uxth	r2, r3
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	60fb      	str	r3, [r7, #12]
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d1f0      	bne.n	800bb9c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	891a      	ldrh	r2, [r3, #8]
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	895b      	ldrh	r3, [r3, #10]
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	d006      	beq.n	800bbd4 <pbuf_cat+0x64>
 800bbc6:	4b10      	ldr	r3, [pc, #64]	@ (800bc08 <pbuf_cat+0x98>)
 800bbc8:	f240 3262 	movw	r2, #866	@ 0x362
 800bbcc:	4911      	ldr	r1, [pc, #68]	@ (800bc14 <pbuf_cat+0xa4>)
 800bbce:	4810      	ldr	r0, [pc, #64]	@ (800bc10 <pbuf_cat+0xa0>)
 800bbd0:	f00b f958 	bl	8016e84 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d006      	beq.n	800bbea <pbuf_cat+0x7a>
 800bbdc:	4b0a      	ldr	r3, [pc, #40]	@ (800bc08 <pbuf_cat+0x98>)
 800bbde:	f240 3263 	movw	r2, #867	@ 0x363
 800bbe2:	490d      	ldr	r1, [pc, #52]	@ (800bc18 <pbuf_cat+0xa8>)
 800bbe4:	480a      	ldr	r0, [pc, #40]	@ (800bc10 <pbuf_cat+0xa0>)
 800bbe6:	f00b f94d 	bl	8016e84 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	891a      	ldrh	r2, [r3, #8]
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	891b      	ldrh	r3, [r3, #8]
 800bbf2:	4413      	add	r3, r2
 800bbf4:	b29a      	uxth	r2, r3
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	683a      	ldr	r2, [r7, #0]
 800bbfe:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800bc00:	3710      	adds	r7, #16
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
 800bc06:	bf00      	nop
 800bc08:	08018a20 	.word	0x08018a20
 800bc0c:	08018c14 	.word	0x08018c14
 800bc10:	08018a80 	.word	0x08018a80
 800bc14:	08018c4c 	.word	0x08018c4c
 800bc18:	08018c7c 	.word	0x08018c7c

0800bc1c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800bc26:	6839      	ldr	r1, [r7, #0]
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f7ff ffa1 	bl	800bb70 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800bc2e:	6838      	ldr	r0, [r7, #0]
 800bc30:	f7ff ff76 	bl	800bb20 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800bc34:	bf00      	nop
 800bc36:	3708      	adds	r7, #8
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b086      	sub	sp, #24
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800bc46:	2300      	movs	r3, #0
 800bc48:	617b      	str	r3, [r7, #20]
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d008      	beq.n	800bc66 <pbuf_copy+0x2a>
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d005      	beq.n	800bc66 <pbuf_copy+0x2a>
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	891a      	ldrh	r2, [r3, #8]
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	891b      	ldrh	r3, [r3, #8]
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d209      	bcs.n	800bc7a <pbuf_copy+0x3e>
 800bc66:	4b57      	ldr	r3, [pc, #348]	@ (800bdc4 <pbuf_copy+0x188>)
 800bc68:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800bc6c:	4956      	ldr	r1, [pc, #344]	@ (800bdc8 <pbuf_copy+0x18c>)
 800bc6e:	4857      	ldr	r0, [pc, #348]	@ (800bdcc <pbuf_copy+0x190>)
 800bc70:	f00b f908 	bl	8016e84 <iprintf>
 800bc74:	f06f 030f 	mvn.w	r3, #15
 800bc78:	e09f      	b.n	800bdba <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	895b      	ldrh	r3, [r3, #10]
 800bc7e:	461a      	mov	r2, r3
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	1ad2      	subs	r2, r2, r3
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	895b      	ldrh	r3, [r3, #10]
 800bc88:	4619      	mov	r1, r3
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	1acb      	subs	r3, r1, r3
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d306      	bcc.n	800bca0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	895b      	ldrh	r3, [r3, #10]
 800bc96:	461a      	mov	r2, r3
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	1ad3      	subs	r3, r2, r3
 800bc9c:	60fb      	str	r3, [r7, #12]
 800bc9e:	e005      	b.n	800bcac <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	895b      	ldrh	r3, [r3, #10]
 800bca4:	461a      	mov	r2, r3
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	1ad3      	subs	r3, r2, r3
 800bcaa:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	685a      	ldr	r2, [r3, #4]
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	18d0      	adds	r0, r2, r3
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	685a      	ldr	r2, [r3, #4]
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	4413      	add	r3, r2
 800bcbc:	68fa      	ldr	r2, [r7, #12]
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	f00b fb3d 	bl	801733e <memcpy>
    offset_to += len;
 800bcc4:	697a      	ldr	r2, [r7, #20]
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	4413      	add	r3, r2
 800bcca:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800bccc:	693a      	ldr	r2, [r7, #16]
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	4413      	add	r3, r2
 800bcd2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	895b      	ldrh	r3, [r3, #10]
 800bcd8:	461a      	mov	r2, r3
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d906      	bls.n	800bcee <pbuf_copy+0xb2>
 800bce0:	4b38      	ldr	r3, [pc, #224]	@ (800bdc4 <pbuf_copy+0x188>)
 800bce2:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800bce6:	493a      	ldr	r1, [pc, #232]	@ (800bdd0 <pbuf_copy+0x194>)
 800bce8:	4838      	ldr	r0, [pc, #224]	@ (800bdcc <pbuf_copy+0x190>)
 800bcea:	f00b f8cb 	bl	8016e84 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	895b      	ldrh	r3, [r3, #10]
 800bcf2:	461a      	mov	r2, r3
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d906      	bls.n	800bd08 <pbuf_copy+0xcc>
 800bcfa:	4b32      	ldr	r3, [pc, #200]	@ (800bdc4 <pbuf_copy+0x188>)
 800bcfc:	f240 32da 	movw	r2, #986	@ 0x3da
 800bd00:	4934      	ldr	r1, [pc, #208]	@ (800bdd4 <pbuf_copy+0x198>)
 800bd02:	4832      	ldr	r0, [pc, #200]	@ (800bdcc <pbuf_copy+0x190>)
 800bd04:	f00b f8be 	bl	8016e84 <iprintf>
    if (offset_from >= p_from->len) {
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	895b      	ldrh	r3, [r3, #10]
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d304      	bcc.n	800bd1e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800bd14:	2300      	movs	r3, #0
 800bd16:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	895b      	ldrh	r3, [r3, #10]
 800bd22:	461a      	mov	r2, r3
 800bd24:	697b      	ldr	r3, [r7, #20]
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d114      	bne.n	800bd54 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d10c      	bne.n	800bd54 <pbuf_copy+0x118>
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d009      	beq.n	800bd54 <pbuf_copy+0x118>
 800bd40:	4b20      	ldr	r3, [pc, #128]	@ (800bdc4 <pbuf_copy+0x188>)
 800bd42:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800bd46:	4924      	ldr	r1, [pc, #144]	@ (800bdd8 <pbuf_copy+0x19c>)
 800bd48:	4820      	ldr	r0, [pc, #128]	@ (800bdcc <pbuf_copy+0x190>)
 800bd4a:	f00b f89b 	bl	8016e84 <iprintf>
 800bd4e:	f06f 030f 	mvn.w	r3, #15
 800bd52:	e032      	b.n	800bdba <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d013      	beq.n	800bd82 <pbuf_copy+0x146>
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	895a      	ldrh	r2, [r3, #10]
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	891b      	ldrh	r3, [r3, #8]
 800bd62:	429a      	cmp	r2, r3
 800bd64:	d10d      	bne.n	800bd82 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d009      	beq.n	800bd82 <pbuf_copy+0x146>
 800bd6e:	4b15      	ldr	r3, [pc, #84]	@ (800bdc4 <pbuf_copy+0x188>)
 800bd70:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800bd74:	4919      	ldr	r1, [pc, #100]	@ (800bddc <pbuf_copy+0x1a0>)
 800bd76:	4815      	ldr	r0, [pc, #84]	@ (800bdcc <pbuf_copy+0x190>)
 800bd78:	f00b f884 	bl	8016e84 <iprintf>
 800bd7c:	f06f 0305 	mvn.w	r3, #5
 800bd80:	e01b      	b.n	800bdba <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d013      	beq.n	800bdb0 <pbuf_copy+0x174>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	895a      	ldrh	r2, [r3, #10]
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	891b      	ldrh	r3, [r3, #8]
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d10d      	bne.n	800bdb0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d009      	beq.n	800bdb0 <pbuf_copy+0x174>
 800bd9c:	4b09      	ldr	r3, [pc, #36]	@ (800bdc4 <pbuf_copy+0x188>)
 800bd9e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800bda2:	490e      	ldr	r1, [pc, #56]	@ (800bddc <pbuf_copy+0x1a0>)
 800bda4:	4809      	ldr	r0, [pc, #36]	@ (800bdcc <pbuf_copy+0x190>)
 800bda6:	f00b f86d 	bl	8016e84 <iprintf>
 800bdaa:	f06f 0305 	mvn.w	r3, #5
 800bdae:	e004      	b.n	800bdba <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	f47f af61 	bne.w	800bc7a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800bdb8:	2300      	movs	r3, #0
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3718      	adds	r7, #24
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	bf00      	nop
 800bdc4:	08018a20 	.word	0x08018a20
 800bdc8:	08018cc8 	.word	0x08018cc8
 800bdcc:	08018a80 	.word	0x08018a80
 800bdd0:	08018cf8 	.word	0x08018cf8
 800bdd4:	08018d10 	.word	0x08018d10
 800bdd8:	08018d2c 	.word	0x08018d2c
 800bddc:	08018d3c 	.word	0x08018d3c

0800bde0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b088      	sub	sp, #32
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	60f8      	str	r0, [r7, #12]
 800bde8:	60b9      	str	r1, [r7, #8]
 800bdea:	4611      	mov	r1, r2
 800bdec:	461a      	mov	r2, r3
 800bdee:	460b      	mov	r3, r1
 800bdf0:	80fb      	strh	r3, [r7, #6]
 800bdf2:	4613      	mov	r3, r2
 800bdf4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d108      	bne.n	800be16 <pbuf_copy_partial+0x36>
 800be04:	4b2b      	ldr	r3, [pc, #172]	@ (800beb4 <pbuf_copy_partial+0xd4>)
 800be06:	f240 420a 	movw	r2, #1034	@ 0x40a
 800be0a:	492b      	ldr	r1, [pc, #172]	@ (800beb8 <pbuf_copy_partial+0xd8>)
 800be0c:	482b      	ldr	r0, [pc, #172]	@ (800bebc <pbuf_copy_partial+0xdc>)
 800be0e:	f00b f839 	bl	8016e84 <iprintf>
 800be12:	2300      	movs	r3, #0
 800be14:	e04a      	b.n	800beac <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d108      	bne.n	800be2e <pbuf_copy_partial+0x4e>
 800be1c:	4b25      	ldr	r3, [pc, #148]	@ (800beb4 <pbuf_copy_partial+0xd4>)
 800be1e:	f240 420b 	movw	r2, #1035	@ 0x40b
 800be22:	4927      	ldr	r1, [pc, #156]	@ (800bec0 <pbuf_copy_partial+0xe0>)
 800be24:	4825      	ldr	r0, [pc, #148]	@ (800bebc <pbuf_copy_partial+0xdc>)
 800be26:	f00b f82d 	bl	8016e84 <iprintf>
 800be2a:	2300      	movs	r3, #0
 800be2c:	e03e      	b.n	800beac <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	61fb      	str	r3, [r7, #28]
 800be32:	e034      	b.n	800be9e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800be34:	88bb      	ldrh	r3, [r7, #4]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d00a      	beq.n	800be50 <pbuf_copy_partial+0x70>
 800be3a:	69fb      	ldr	r3, [r7, #28]
 800be3c:	895b      	ldrh	r3, [r3, #10]
 800be3e:	88ba      	ldrh	r2, [r7, #4]
 800be40:	429a      	cmp	r2, r3
 800be42:	d305      	bcc.n	800be50 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800be44:	69fb      	ldr	r3, [r7, #28]
 800be46:	895b      	ldrh	r3, [r3, #10]
 800be48:	88ba      	ldrh	r2, [r7, #4]
 800be4a:	1ad3      	subs	r3, r2, r3
 800be4c:	80bb      	strh	r3, [r7, #4]
 800be4e:	e023      	b.n	800be98 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800be50:	69fb      	ldr	r3, [r7, #28]
 800be52:	895a      	ldrh	r2, [r3, #10]
 800be54:	88bb      	ldrh	r3, [r7, #4]
 800be56:	1ad3      	subs	r3, r2, r3
 800be58:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800be5a:	8b3a      	ldrh	r2, [r7, #24]
 800be5c:	88fb      	ldrh	r3, [r7, #6]
 800be5e:	429a      	cmp	r2, r3
 800be60:	d901      	bls.n	800be66 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800be62:	88fb      	ldrh	r3, [r7, #6]
 800be64:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800be66:	8b7b      	ldrh	r3, [r7, #26]
 800be68:	68ba      	ldr	r2, [r7, #8]
 800be6a:	18d0      	adds	r0, r2, r3
 800be6c:	69fb      	ldr	r3, [r7, #28]
 800be6e:	685a      	ldr	r2, [r3, #4]
 800be70:	88bb      	ldrh	r3, [r7, #4]
 800be72:	4413      	add	r3, r2
 800be74:	8b3a      	ldrh	r2, [r7, #24]
 800be76:	4619      	mov	r1, r3
 800be78:	f00b fa61 	bl	801733e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800be7c:	8afa      	ldrh	r2, [r7, #22]
 800be7e:	8b3b      	ldrh	r3, [r7, #24]
 800be80:	4413      	add	r3, r2
 800be82:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800be84:	8b7a      	ldrh	r2, [r7, #26]
 800be86:	8b3b      	ldrh	r3, [r7, #24]
 800be88:	4413      	add	r3, r2
 800be8a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800be8c:	88fa      	ldrh	r2, [r7, #6]
 800be8e:	8b3b      	ldrh	r3, [r7, #24]
 800be90:	1ad3      	subs	r3, r2, r3
 800be92:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800be94:	2300      	movs	r3, #0
 800be96:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800be98:	69fb      	ldr	r3, [r7, #28]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	61fb      	str	r3, [r7, #28]
 800be9e:	88fb      	ldrh	r3, [r7, #6]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d002      	beq.n	800beaa <pbuf_copy_partial+0xca>
 800bea4:	69fb      	ldr	r3, [r7, #28]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d1c4      	bne.n	800be34 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800beaa:	8afb      	ldrh	r3, [r7, #22]
}
 800beac:	4618      	mov	r0, r3
 800beae:	3720      	adds	r7, #32
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}
 800beb4:	08018a20 	.word	0x08018a20
 800beb8:	08018d68 	.word	0x08018d68
 800bebc:	08018a80 	.word	0x08018a80
 800bec0:	08018d88 	.word	0x08018d88

0800bec4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b084      	sub	sp, #16
 800bec8:	af00      	add	r7, sp, #0
 800beca:	4603      	mov	r3, r0
 800becc:	603a      	str	r2, [r7, #0]
 800bece:	71fb      	strb	r3, [r7, #7]
 800bed0:	460b      	mov	r3, r1
 800bed2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	8919      	ldrh	r1, [r3, #8]
 800bed8:	88ba      	ldrh	r2, [r7, #4]
 800beda:	79fb      	ldrb	r3, [r7, #7]
 800bedc:	4618      	mov	r0, r3
 800bede:	f7ff fa95 	bl	800b40c <pbuf_alloc>
 800bee2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d101      	bne.n	800beee <pbuf_clone+0x2a>
    return NULL;
 800beea:	2300      	movs	r3, #0
 800beec:	e011      	b.n	800bf12 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800beee:	6839      	ldr	r1, [r7, #0]
 800bef0:	68f8      	ldr	r0, [r7, #12]
 800bef2:	f7ff fea3 	bl	800bc3c <pbuf_copy>
 800bef6:	4603      	mov	r3, r0
 800bef8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800befa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d006      	beq.n	800bf10 <pbuf_clone+0x4c>
 800bf02:	4b06      	ldr	r3, [pc, #24]	@ (800bf1c <pbuf_clone+0x58>)
 800bf04:	f240 5224 	movw	r2, #1316	@ 0x524
 800bf08:	4905      	ldr	r1, [pc, #20]	@ (800bf20 <pbuf_clone+0x5c>)
 800bf0a:	4806      	ldr	r0, [pc, #24]	@ (800bf24 <pbuf_clone+0x60>)
 800bf0c:	f00a ffba 	bl	8016e84 <iprintf>
  return q;
 800bf10:	68fb      	ldr	r3, [r7, #12]
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3710      	adds	r7, #16
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}
 800bf1a:	bf00      	nop
 800bf1c:	08018a20 	.word	0x08018a20
 800bf20:	08018e94 	.word	0x08018e94
 800bf24:	08018a80 	.word	0x08018a80

0800bf28 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bf2c:	f00a feaa 	bl	8016c84 <rand>
 800bf30:	4603      	mov	r3, r0
 800bf32:	b29b      	uxth	r3, r3
 800bf34:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bf38:	b29b      	uxth	r3, r3
 800bf3a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800bf3e:	b29a      	uxth	r2, r3
 800bf40:	4b01      	ldr	r3, [pc, #4]	@ (800bf48 <tcp_init+0x20>)
 800bf42:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bf44:	bf00      	nop
 800bf46:	bd80      	pop	{r7, pc}
 800bf48:	20000028 	.word	0x20000028

0800bf4c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b082      	sub	sp, #8
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	7d1b      	ldrb	r3, [r3, #20]
 800bf58:	2b01      	cmp	r3, #1
 800bf5a:	d105      	bne.n	800bf68 <tcp_free+0x1c>
 800bf5c:	4b06      	ldr	r3, [pc, #24]	@ (800bf78 <tcp_free+0x2c>)
 800bf5e:	22d4      	movs	r2, #212	@ 0xd4
 800bf60:	4906      	ldr	r1, [pc, #24]	@ (800bf7c <tcp_free+0x30>)
 800bf62:	4807      	ldr	r0, [pc, #28]	@ (800bf80 <tcp_free+0x34>)
 800bf64:	f00a ff8e 	bl	8016e84 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800bf68:	6879      	ldr	r1, [r7, #4]
 800bf6a:	2001      	movs	r0, #1
 800bf6c:	f7fe fd9c 	bl	800aaa8 <memp_free>
}
 800bf70:	bf00      	nop
 800bf72:	3708      	adds	r7, #8
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}
 800bf78:	08018f20 	.word	0x08018f20
 800bf7c:	08018f50 	.word	0x08018f50
 800bf80:	08018f64 	.word	0x08018f64

0800bf84 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b082      	sub	sp, #8
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	7d1b      	ldrb	r3, [r3, #20]
 800bf90:	2b01      	cmp	r3, #1
 800bf92:	d105      	bne.n	800bfa0 <tcp_free_listen+0x1c>
 800bf94:	4b06      	ldr	r3, [pc, #24]	@ (800bfb0 <tcp_free_listen+0x2c>)
 800bf96:	22df      	movs	r2, #223	@ 0xdf
 800bf98:	4906      	ldr	r1, [pc, #24]	@ (800bfb4 <tcp_free_listen+0x30>)
 800bf9a:	4807      	ldr	r0, [pc, #28]	@ (800bfb8 <tcp_free_listen+0x34>)
 800bf9c:	f00a ff72 	bl	8016e84 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800bfa0:	6879      	ldr	r1, [r7, #4]
 800bfa2:	2002      	movs	r0, #2
 800bfa4:	f7fe fd80 	bl	800aaa8 <memp_free>
}
 800bfa8:	bf00      	nop
 800bfaa:	3708      	adds	r7, #8
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}
 800bfb0:	08018f20 	.word	0x08018f20
 800bfb4:	08018f8c 	.word	0x08018f8c
 800bfb8:	08018f64 	.word	0x08018f64

0800bfbc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800bfc0:	f000 fea4 	bl	800cd0c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800bfc4:	4b07      	ldr	r3, [pc, #28]	@ (800bfe4 <tcp_tmr+0x28>)
 800bfc6:	781b      	ldrb	r3, [r3, #0]
 800bfc8:	3301      	adds	r3, #1
 800bfca:	b2da      	uxtb	r2, r3
 800bfcc:	4b05      	ldr	r3, [pc, #20]	@ (800bfe4 <tcp_tmr+0x28>)
 800bfce:	701a      	strb	r2, [r3, #0]
 800bfd0:	4b04      	ldr	r3, [pc, #16]	@ (800bfe4 <tcp_tmr+0x28>)
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	f003 0301 	and.w	r3, r3, #1
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d001      	beq.n	800bfe0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800bfdc:	f000 fb54 	bl	800c688 <tcp_slowtmr>
  }
}
 800bfe0:	bf00      	nop
 800bfe2:	bd80      	pop	{r7, pc}
 800bfe4:	2000cad1 	.word	0x2000cad1

0800bfe8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b084      	sub	sp, #16
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
 800bff0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d105      	bne.n	800c004 <tcp_remove_listener+0x1c>
 800bff8:	4b0d      	ldr	r3, [pc, #52]	@ (800c030 <tcp_remove_listener+0x48>)
 800bffa:	22ff      	movs	r2, #255	@ 0xff
 800bffc:	490d      	ldr	r1, [pc, #52]	@ (800c034 <tcp_remove_listener+0x4c>)
 800bffe:	480e      	ldr	r0, [pc, #56]	@ (800c038 <tcp_remove_listener+0x50>)
 800c000:	f00a ff40 	bl	8016e84 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	60fb      	str	r3, [r7, #12]
 800c008:	e00a      	b.n	800c020 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c00e:	683a      	ldr	r2, [r7, #0]
 800c010:	429a      	cmp	r2, r3
 800c012:	d102      	bne.n	800c01a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	2200      	movs	r2, #0
 800c018:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	68db      	ldr	r3, [r3, #12]
 800c01e:	60fb      	str	r3, [r7, #12]
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d1f1      	bne.n	800c00a <tcp_remove_listener+0x22>
    }
  }
}
 800c026:	bf00      	nop
 800c028:	bf00      	nop
 800c02a:	3710      	adds	r7, #16
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}
 800c030:	08018f20 	.word	0x08018f20
 800c034:	08018fa8 	.word	0x08018fa8
 800c038:	08018f64 	.word	0x08018f64

0800c03c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b084      	sub	sp, #16
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d106      	bne.n	800c058 <tcp_listen_closed+0x1c>
 800c04a:	4b14      	ldr	r3, [pc, #80]	@ (800c09c <tcp_listen_closed+0x60>)
 800c04c:	f240 1211 	movw	r2, #273	@ 0x111
 800c050:	4913      	ldr	r1, [pc, #76]	@ (800c0a0 <tcp_listen_closed+0x64>)
 800c052:	4814      	ldr	r0, [pc, #80]	@ (800c0a4 <tcp_listen_closed+0x68>)
 800c054:	f00a ff16 	bl	8016e84 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	7d1b      	ldrb	r3, [r3, #20]
 800c05c:	2b01      	cmp	r3, #1
 800c05e:	d006      	beq.n	800c06e <tcp_listen_closed+0x32>
 800c060:	4b0e      	ldr	r3, [pc, #56]	@ (800c09c <tcp_listen_closed+0x60>)
 800c062:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800c066:	4910      	ldr	r1, [pc, #64]	@ (800c0a8 <tcp_listen_closed+0x6c>)
 800c068:	480e      	ldr	r0, [pc, #56]	@ (800c0a4 <tcp_listen_closed+0x68>)
 800c06a:	f00a ff0b 	bl	8016e84 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c06e:	2301      	movs	r3, #1
 800c070:	60fb      	str	r3, [r7, #12]
 800c072:	e00b      	b.n	800c08c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c074:	4a0d      	ldr	r2, [pc, #52]	@ (800c0ac <tcp_listen_closed+0x70>)
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	6879      	ldr	r1, [r7, #4]
 800c080:	4618      	mov	r0, r3
 800c082:	f7ff ffb1 	bl	800bfe8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	3301      	adds	r3, #1
 800c08a:	60fb      	str	r3, [r7, #12]
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	2b03      	cmp	r3, #3
 800c090:	d9f0      	bls.n	800c074 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c092:	bf00      	nop
 800c094:	bf00      	nop
 800c096:	3710      	adds	r7, #16
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}
 800c09c:	08018f20 	.word	0x08018f20
 800c0a0:	08018fd0 	.word	0x08018fd0
 800c0a4:	08018f64 	.word	0x08018f64
 800c0a8:	08018fdc 	.word	0x08018fdc
 800c0ac:	0801b66c 	.word	0x0801b66c

0800c0b0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c0b0:	b5b0      	push	{r4, r5, r7, lr}
 800c0b2:	b088      	sub	sp, #32
 800c0b4:	af04      	add	r7, sp, #16
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	460b      	mov	r3, r1
 800c0ba:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d106      	bne.n	800c0d0 <tcp_close_shutdown+0x20>
 800c0c2:	4b63      	ldr	r3, [pc, #396]	@ (800c250 <tcp_close_shutdown+0x1a0>)
 800c0c4:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800c0c8:	4962      	ldr	r1, [pc, #392]	@ (800c254 <tcp_close_shutdown+0x1a4>)
 800c0ca:	4863      	ldr	r0, [pc, #396]	@ (800c258 <tcp_close_shutdown+0x1a8>)
 800c0cc:	f00a feda 	bl	8016e84 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c0d0:	78fb      	ldrb	r3, [r7, #3]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d066      	beq.n	800c1a4 <tcp_close_shutdown+0xf4>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	7d1b      	ldrb	r3, [r3, #20]
 800c0da:	2b04      	cmp	r3, #4
 800c0dc:	d003      	beq.n	800c0e6 <tcp_close_shutdown+0x36>
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	7d1b      	ldrb	r3, [r3, #20]
 800c0e2:	2b07      	cmp	r3, #7
 800c0e4:	d15e      	bne.n	800c1a4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d104      	bne.n	800c0f8 <tcp_close_shutdown+0x48>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c0f2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800c0f6:	d055      	beq.n	800c1a4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	8b5b      	ldrh	r3, [r3, #26]
 800c0fc:	f003 0310 	and.w	r3, r3, #16
 800c100:	2b00      	cmp	r3, #0
 800c102:	d106      	bne.n	800c112 <tcp_close_shutdown+0x62>
 800c104:	4b52      	ldr	r3, [pc, #328]	@ (800c250 <tcp_close_shutdown+0x1a0>)
 800c106:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800c10a:	4954      	ldr	r1, [pc, #336]	@ (800c25c <tcp_close_shutdown+0x1ac>)
 800c10c:	4852      	ldr	r0, [pc, #328]	@ (800c258 <tcp_close_shutdown+0x1a8>)
 800c10e:	f00a feb9 	bl	8016e84 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800c11a:	687d      	ldr	r5, [r7, #4]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	3304      	adds	r3, #4
 800c120:	687a      	ldr	r2, [r7, #4]
 800c122:	8ad2      	ldrh	r2, [r2, #22]
 800c124:	6879      	ldr	r1, [r7, #4]
 800c126:	8b09      	ldrh	r1, [r1, #24]
 800c128:	9102      	str	r1, [sp, #8]
 800c12a:	9201      	str	r2, [sp, #4]
 800c12c:	9300      	str	r3, [sp, #0]
 800c12e:	462b      	mov	r3, r5
 800c130:	4622      	mov	r2, r4
 800c132:	4601      	mov	r1, r0
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f004 fe8d 	bl	8010e54 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f001 f8c8 	bl	800d2d0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c140:	4b47      	ldr	r3, [pc, #284]	@ (800c260 <tcp_close_shutdown+0x1b0>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	687a      	ldr	r2, [r7, #4]
 800c146:	429a      	cmp	r2, r3
 800c148:	d105      	bne.n	800c156 <tcp_close_shutdown+0xa6>
 800c14a:	4b45      	ldr	r3, [pc, #276]	@ (800c260 <tcp_close_shutdown+0x1b0>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	68db      	ldr	r3, [r3, #12]
 800c150:	4a43      	ldr	r2, [pc, #268]	@ (800c260 <tcp_close_shutdown+0x1b0>)
 800c152:	6013      	str	r3, [r2, #0]
 800c154:	e013      	b.n	800c17e <tcp_close_shutdown+0xce>
 800c156:	4b42      	ldr	r3, [pc, #264]	@ (800c260 <tcp_close_shutdown+0x1b0>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	60fb      	str	r3, [r7, #12]
 800c15c:	e00c      	b.n	800c178 <tcp_close_shutdown+0xc8>
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	68db      	ldr	r3, [r3, #12]
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	429a      	cmp	r2, r3
 800c166:	d104      	bne.n	800c172 <tcp_close_shutdown+0xc2>
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	68da      	ldr	r2, [r3, #12]
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	60da      	str	r2, [r3, #12]
 800c170:	e005      	b.n	800c17e <tcp_close_shutdown+0xce>
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	68db      	ldr	r3, [r3, #12]
 800c176:	60fb      	str	r3, [r7, #12]
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d1ef      	bne.n	800c15e <tcp_close_shutdown+0xae>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2200      	movs	r2, #0
 800c182:	60da      	str	r2, [r3, #12]
 800c184:	4b37      	ldr	r3, [pc, #220]	@ (800c264 <tcp_close_shutdown+0x1b4>)
 800c186:	2201      	movs	r2, #1
 800c188:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c18a:	4b37      	ldr	r3, [pc, #220]	@ (800c268 <tcp_close_shutdown+0x1b8>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	687a      	ldr	r2, [r7, #4]
 800c190:	429a      	cmp	r2, r3
 800c192:	d102      	bne.n	800c19a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c194:	f003 fd5c 	bl	800fc50 <tcp_trigger_input_pcb_close>
 800c198:	e002      	b.n	800c1a0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f7ff fed6 	bl	800bf4c <tcp_free>
      }
      return ERR_OK;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	e050      	b.n	800c246 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	7d1b      	ldrb	r3, [r3, #20]
 800c1a8:	2b02      	cmp	r3, #2
 800c1aa:	d03b      	beq.n	800c224 <tcp_close_shutdown+0x174>
 800c1ac:	2b02      	cmp	r3, #2
 800c1ae:	dc44      	bgt.n	800c23a <tcp_close_shutdown+0x18a>
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d002      	beq.n	800c1ba <tcp_close_shutdown+0x10a>
 800c1b4:	2b01      	cmp	r3, #1
 800c1b6:	d02a      	beq.n	800c20e <tcp_close_shutdown+0x15e>
 800c1b8:	e03f      	b.n	800c23a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	8adb      	ldrh	r3, [r3, #22]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d021      	beq.n	800c206 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c1c2:	4b2a      	ldr	r3, [pc, #168]	@ (800c26c <tcp_close_shutdown+0x1bc>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	d105      	bne.n	800c1d8 <tcp_close_shutdown+0x128>
 800c1cc:	4b27      	ldr	r3, [pc, #156]	@ (800c26c <tcp_close_shutdown+0x1bc>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	68db      	ldr	r3, [r3, #12]
 800c1d2:	4a26      	ldr	r2, [pc, #152]	@ (800c26c <tcp_close_shutdown+0x1bc>)
 800c1d4:	6013      	str	r3, [r2, #0]
 800c1d6:	e013      	b.n	800c200 <tcp_close_shutdown+0x150>
 800c1d8:	4b24      	ldr	r3, [pc, #144]	@ (800c26c <tcp_close_shutdown+0x1bc>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	60bb      	str	r3, [r7, #8]
 800c1de:	e00c      	b.n	800c1fa <tcp_close_shutdown+0x14a>
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	68db      	ldr	r3, [r3, #12]
 800c1e4:	687a      	ldr	r2, [r7, #4]
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d104      	bne.n	800c1f4 <tcp_close_shutdown+0x144>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	68da      	ldr	r2, [r3, #12]
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	60da      	str	r2, [r3, #12]
 800c1f2:	e005      	b.n	800c200 <tcp_close_shutdown+0x150>
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	68db      	ldr	r3, [r3, #12]
 800c1f8:	60bb      	str	r3, [r7, #8]
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d1ef      	bne.n	800c1e0 <tcp_close_shutdown+0x130>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2200      	movs	r2, #0
 800c204:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f7ff fea0 	bl	800bf4c <tcp_free>
      break;
 800c20c:	e01a      	b.n	800c244 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f7ff ff14 	bl	800c03c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c214:	6879      	ldr	r1, [r7, #4]
 800c216:	4816      	ldr	r0, [pc, #88]	@ (800c270 <tcp_close_shutdown+0x1c0>)
 800c218:	f001 f8aa 	bl	800d370 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f7ff feb1 	bl	800bf84 <tcp_free_listen>
      break;
 800c222:	e00f      	b.n	800c244 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c224:	6879      	ldr	r1, [r7, #4]
 800c226:	480e      	ldr	r0, [pc, #56]	@ (800c260 <tcp_close_shutdown+0x1b0>)
 800c228:	f001 f8a2 	bl	800d370 <tcp_pcb_remove>
 800c22c:	4b0d      	ldr	r3, [pc, #52]	@ (800c264 <tcp_close_shutdown+0x1b4>)
 800c22e:	2201      	movs	r2, #1
 800c230:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f7ff fe8a 	bl	800bf4c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c238:	e004      	b.n	800c244 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f000 f81a 	bl	800c274 <tcp_close_shutdown_fin>
 800c240:	4603      	mov	r3, r0
 800c242:	e000      	b.n	800c246 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c244:	2300      	movs	r3, #0
}
 800c246:	4618      	mov	r0, r3
 800c248:	3710      	adds	r7, #16
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bdb0      	pop	{r4, r5, r7, pc}
 800c24e:	bf00      	nop
 800c250:	08018f20 	.word	0x08018f20
 800c254:	08018ff4 	.word	0x08018ff4
 800c258:	08018f64 	.word	0x08018f64
 800c25c:	08019014 	.word	0x08019014
 800c260:	2000cac8 	.word	0x2000cac8
 800c264:	2000cad0 	.word	0x2000cad0
 800c268:	2000cb08 	.word	0x2000cb08
 800c26c:	2000cac0 	.word	0x2000cac0
 800c270:	2000cac4 	.word	0x2000cac4

0800c274 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b084      	sub	sp, #16
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d106      	bne.n	800c290 <tcp_close_shutdown_fin+0x1c>
 800c282:	4b2e      	ldr	r3, [pc, #184]	@ (800c33c <tcp_close_shutdown_fin+0xc8>)
 800c284:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800c288:	492d      	ldr	r1, [pc, #180]	@ (800c340 <tcp_close_shutdown_fin+0xcc>)
 800c28a:	482e      	ldr	r0, [pc, #184]	@ (800c344 <tcp_close_shutdown_fin+0xd0>)
 800c28c:	f00a fdfa 	bl	8016e84 <iprintf>

  switch (pcb->state) {
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	7d1b      	ldrb	r3, [r3, #20]
 800c294:	2b07      	cmp	r3, #7
 800c296:	d020      	beq.n	800c2da <tcp_close_shutdown_fin+0x66>
 800c298:	2b07      	cmp	r3, #7
 800c29a:	dc2b      	bgt.n	800c2f4 <tcp_close_shutdown_fin+0x80>
 800c29c:	2b03      	cmp	r3, #3
 800c29e:	d002      	beq.n	800c2a6 <tcp_close_shutdown_fin+0x32>
 800c2a0:	2b04      	cmp	r3, #4
 800c2a2:	d00d      	beq.n	800c2c0 <tcp_close_shutdown_fin+0x4c>
 800c2a4:	e026      	b.n	800c2f4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f003 fee2 	bl	8010070 <tcp_send_fin>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c2b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d11f      	bne.n	800c2f8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2205      	movs	r2, #5
 800c2bc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c2be:	e01b      	b.n	800c2f8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f003 fed5 	bl	8010070 <tcp_send_fin>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c2ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d114      	bne.n	800c2fc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2205      	movs	r2, #5
 800c2d6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c2d8:	e010      	b.n	800c2fc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f003 fec8 	bl	8010070 <tcp_send_fin>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c2e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d109      	bne.n	800c300 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2209      	movs	r2, #9
 800c2f0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c2f2:	e005      	b.n	800c300 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	e01c      	b.n	800c332 <tcp_close_shutdown_fin+0xbe>
      break;
 800c2f8:	bf00      	nop
 800c2fa:	e002      	b.n	800c302 <tcp_close_shutdown_fin+0x8e>
      break;
 800c2fc:	bf00      	nop
 800c2fe:	e000      	b.n	800c302 <tcp_close_shutdown_fin+0x8e>
      break;
 800c300:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d103      	bne.n	800c312 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f003 ffee 	bl	80102ec <tcp_output>
 800c310:	e00d      	b.n	800c32e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c31a:	d108      	bne.n	800c32e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	8b5b      	ldrh	r3, [r3, #26]
 800c320:	f043 0308 	orr.w	r3, r3, #8
 800c324:	b29a      	uxth	r2, r3
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c32a:	2300      	movs	r3, #0
 800c32c:	e001      	b.n	800c332 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c32e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c332:	4618      	mov	r0, r3
 800c334:	3710      	adds	r7, #16
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}
 800c33a:	bf00      	nop
 800c33c:	08018f20 	.word	0x08018f20
 800c340:	08018fd0 	.word	0x08018fd0
 800c344:	08018f64 	.word	0x08018f64

0800c348 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b082      	sub	sp, #8
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d109      	bne.n	800c36a <tcp_close+0x22>
 800c356:	4b0f      	ldr	r3, [pc, #60]	@ (800c394 <tcp_close+0x4c>)
 800c358:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800c35c:	490e      	ldr	r1, [pc, #56]	@ (800c398 <tcp_close+0x50>)
 800c35e:	480f      	ldr	r0, [pc, #60]	@ (800c39c <tcp_close+0x54>)
 800c360:	f00a fd90 	bl	8016e84 <iprintf>
 800c364:	f06f 030f 	mvn.w	r3, #15
 800c368:	e00f      	b.n	800c38a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	7d1b      	ldrb	r3, [r3, #20]
 800c36e:	2b01      	cmp	r3, #1
 800c370:	d006      	beq.n	800c380 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	8b5b      	ldrh	r3, [r3, #26]
 800c376:	f043 0310 	orr.w	r3, r3, #16
 800c37a:	b29a      	uxth	r2, r3
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c380:	2101      	movs	r1, #1
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f7ff fe94 	bl	800c0b0 <tcp_close_shutdown>
 800c388:	4603      	mov	r3, r0
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	3708      	adds	r7, #8
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}
 800c392:	bf00      	nop
 800c394:	08018f20 	.word	0x08018f20
 800c398:	08019030 	.word	0x08019030
 800c39c:	08018f64 	.word	0x08018f64

0800c3a0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b08e      	sub	sp, #56	@ 0x38
 800c3a4:	af04      	add	r7, sp, #16
 800c3a6:	6078      	str	r0, [r7, #4]
 800c3a8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d107      	bne.n	800c3c0 <tcp_abandon+0x20>
 800c3b0:	4b52      	ldr	r3, [pc, #328]	@ (800c4fc <tcp_abandon+0x15c>)
 800c3b2:	f240 223d 	movw	r2, #573	@ 0x23d
 800c3b6:	4952      	ldr	r1, [pc, #328]	@ (800c500 <tcp_abandon+0x160>)
 800c3b8:	4852      	ldr	r0, [pc, #328]	@ (800c504 <tcp_abandon+0x164>)
 800c3ba:	f00a fd63 	bl	8016e84 <iprintf>
 800c3be:	e099      	b.n	800c4f4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	7d1b      	ldrb	r3, [r3, #20]
 800c3c4:	2b01      	cmp	r3, #1
 800c3c6:	d106      	bne.n	800c3d6 <tcp_abandon+0x36>
 800c3c8:	4b4c      	ldr	r3, [pc, #304]	@ (800c4fc <tcp_abandon+0x15c>)
 800c3ca:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800c3ce:	494e      	ldr	r1, [pc, #312]	@ (800c508 <tcp_abandon+0x168>)
 800c3d0:	484c      	ldr	r0, [pc, #304]	@ (800c504 <tcp_abandon+0x164>)
 800c3d2:	f00a fd57 	bl	8016e84 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	7d1b      	ldrb	r3, [r3, #20]
 800c3da:	2b0a      	cmp	r3, #10
 800c3dc:	d107      	bne.n	800c3ee <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c3de:	6879      	ldr	r1, [r7, #4]
 800c3e0:	484a      	ldr	r0, [pc, #296]	@ (800c50c <tcp_abandon+0x16c>)
 800c3e2:	f000 ffc5 	bl	800d370 <tcp_pcb_remove>
    tcp_free(pcb);
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f7ff fdb0 	bl	800bf4c <tcp_free>
 800c3ec:	e082      	b.n	800c4f4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c3fa:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c400:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c408:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	691b      	ldr	r3, [r3, #16]
 800c40e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	7d1b      	ldrb	r3, [r3, #20]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d126      	bne.n	800c466 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	8adb      	ldrh	r3, [r3, #22]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d02e      	beq.n	800c47e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c420:	4b3b      	ldr	r3, [pc, #236]	@ (800c510 <tcp_abandon+0x170>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	687a      	ldr	r2, [r7, #4]
 800c426:	429a      	cmp	r2, r3
 800c428:	d105      	bne.n	800c436 <tcp_abandon+0x96>
 800c42a:	4b39      	ldr	r3, [pc, #228]	@ (800c510 <tcp_abandon+0x170>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	68db      	ldr	r3, [r3, #12]
 800c430:	4a37      	ldr	r2, [pc, #220]	@ (800c510 <tcp_abandon+0x170>)
 800c432:	6013      	str	r3, [r2, #0]
 800c434:	e013      	b.n	800c45e <tcp_abandon+0xbe>
 800c436:	4b36      	ldr	r3, [pc, #216]	@ (800c510 <tcp_abandon+0x170>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	61fb      	str	r3, [r7, #28]
 800c43c:	e00c      	b.n	800c458 <tcp_abandon+0xb8>
 800c43e:	69fb      	ldr	r3, [r7, #28]
 800c440:	68db      	ldr	r3, [r3, #12]
 800c442:	687a      	ldr	r2, [r7, #4]
 800c444:	429a      	cmp	r2, r3
 800c446:	d104      	bne.n	800c452 <tcp_abandon+0xb2>
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	68da      	ldr	r2, [r3, #12]
 800c44c:	69fb      	ldr	r3, [r7, #28]
 800c44e:	60da      	str	r2, [r3, #12]
 800c450:	e005      	b.n	800c45e <tcp_abandon+0xbe>
 800c452:	69fb      	ldr	r3, [r7, #28]
 800c454:	68db      	ldr	r3, [r3, #12]
 800c456:	61fb      	str	r3, [r7, #28]
 800c458:	69fb      	ldr	r3, [r7, #28]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d1ef      	bne.n	800c43e <tcp_abandon+0x9e>
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2200      	movs	r2, #0
 800c462:	60da      	str	r2, [r3, #12]
 800c464:	e00b      	b.n	800c47e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	8adb      	ldrh	r3, [r3, #22]
 800c46e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c470:	6879      	ldr	r1, [r7, #4]
 800c472:	4828      	ldr	r0, [pc, #160]	@ (800c514 <tcp_abandon+0x174>)
 800c474:	f000 ff7c 	bl	800d370 <tcp_pcb_remove>
 800c478:	4b27      	ldr	r3, [pc, #156]	@ (800c518 <tcp_abandon+0x178>)
 800c47a:	2201      	movs	r2, #1
 800c47c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c482:	2b00      	cmp	r3, #0
 800c484:	d004      	beq.n	800c490 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c48a:	4618      	mov	r0, r3
 800c48c:	f000 fd1e 	bl	800cecc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c494:	2b00      	cmp	r3, #0
 800c496:	d004      	beq.n	800c4a2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c49c:	4618      	mov	r0, r3
 800c49e:	f000 fd15 	bl	800cecc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d004      	beq.n	800c4b4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f000 fd0c 	bl	800cecc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c4b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d00e      	beq.n	800c4d8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c4ba:	6879      	ldr	r1, [r7, #4]
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	3304      	adds	r3, #4
 800c4c0:	687a      	ldr	r2, [r7, #4]
 800c4c2:	8b12      	ldrh	r2, [r2, #24]
 800c4c4:	9202      	str	r2, [sp, #8]
 800c4c6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c4c8:	9201      	str	r2, [sp, #4]
 800c4ca:	9300      	str	r3, [sp, #0]
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	697a      	ldr	r2, [r7, #20]
 800c4d0:	69b9      	ldr	r1, [r7, #24]
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f004 fcbe 	bl	8010e54 <tcp_rst>
    }
    last_state = pcb->state;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	7d1b      	ldrb	r3, [r3, #20]
 800c4dc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f7ff fd34 	bl	800bf4c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d004      	beq.n	800c4f4 <tcp_abandon+0x154>
 800c4ea:	693b      	ldr	r3, [r7, #16]
 800c4ec:	f06f 010c 	mvn.w	r1, #12
 800c4f0:	68f8      	ldr	r0, [r7, #12]
 800c4f2:	4798      	blx	r3
  }
}
 800c4f4:	3728      	adds	r7, #40	@ 0x28
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}
 800c4fa:	bf00      	nop
 800c4fc:	08018f20 	.word	0x08018f20
 800c500:	08019064 	.word	0x08019064
 800c504:	08018f64 	.word	0x08018f64
 800c508:	08019080 	.word	0x08019080
 800c50c:	2000cacc 	.word	0x2000cacc
 800c510:	2000cac0 	.word	0x2000cac0
 800c514:	2000cac8 	.word	0x2000cac8
 800c518:	2000cad0 	.word	0x2000cad0

0800c51c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b082      	sub	sp, #8
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c524:	2101      	movs	r1, #1
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f7ff ff3a 	bl	800c3a0 <tcp_abandon>
}
 800c52c:	bf00      	nop
 800c52e:	3708      	adds	r7, #8
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}

0800c534 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b084      	sub	sp, #16
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d106      	bne.n	800c550 <tcp_update_rcv_ann_wnd+0x1c>
 800c542:	4b25      	ldr	r3, [pc, #148]	@ (800c5d8 <tcp_update_rcv_ann_wnd+0xa4>)
 800c544:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800c548:	4924      	ldr	r1, [pc, #144]	@ (800c5dc <tcp_update_rcv_ann_wnd+0xa8>)
 800c54a:	4825      	ldr	r0, [pc, #148]	@ (800c5e0 <tcp_update_rcv_ann_wnd+0xac>)
 800c54c:	f00a fc9a 	bl	8016e84 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c554:	687a      	ldr	r2, [r7, #4]
 800c556:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800c558:	4413      	add	r3, r2
 800c55a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c560:	687a      	ldr	r2, [r7, #4]
 800c562:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800c564:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800c568:	bf28      	it	cs
 800c56a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800c56e:	b292      	uxth	r2, r2
 800c570:	4413      	add	r3, r2
 800c572:	68fa      	ldr	r2, [r7, #12]
 800c574:	1ad3      	subs	r3, r2, r3
 800c576:	2b00      	cmp	r3, #0
 800c578:	db08      	blt.n	800c58c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c586:	68fa      	ldr	r2, [r7, #12]
 800c588:	1ad3      	subs	r3, r2, r3
 800c58a:	e020      	b.n	800c5ce <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c594:	1ad3      	subs	r3, r2, r3
 800c596:	2b00      	cmp	r3, #0
 800c598:	dd03      	ble.n	800c5a2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2200      	movs	r2, #0
 800c59e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c5a0:	e014      	b.n	800c5cc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5aa:	1ad3      	subs	r3, r2, r3
 800c5ac:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c5b4:	d306      	bcc.n	800c5c4 <tcp_update_rcv_ann_wnd+0x90>
 800c5b6:	4b08      	ldr	r3, [pc, #32]	@ (800c5d8 <tcp_update_rcv_ann_wnd+0xa4>)
 800c5b8:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800c5bc:	4909      	ldr	r1, [pc, #36]	@ (800c5e4 <tcp_update_rcv_ann_wnd+0xb0>)
 800c5be:	4808      	ldr	r0, [pc, #32]	@ (800c5e0 <tcp_update_rcv_ann_wnd+0xac>)
 800c5c0:	f00a fc60 	bl	8016e84 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	b29a      	uxth	r2, r3
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800c5cc:	2300      	movs	r3, #0
  }
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3710      	adds	r7, #16
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
 800c5d6:	bf00      	nop
 800c5d8:	08018f20 	.word	0x08018f20
 800c5dc:	0801917c 	.word	0x0801917c
 800c5e0:	08018f64 	.word	0x08018f64
 800c5e4:	080191a0 	.word	0x080191a0

0800c5e8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b084      	sub	sp, #16
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	460b      	mov	r3, r1
 800c5f2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d107      	bne.n	800c60a <tcp_recved+0x22>
 800c5fa:	4b1f      	ldr	r3, [pc, #124]	@ (800c678 <tcp_recved+0x90>)
 800c5fc:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800c600:	491e      	ldr	r1, [pc, #120]	@ (800c67c <tcp_recved+0x94>)
 800c602:	481f      	ldr	r0, [pc, #124]	@ (800c680 <tcp_recved+0x98>)
 800c604:	f00a fc3e 	bl	8016e84 <iprintf>
 800c608:	e032      	b.n	800c670 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	7d1b      	ldrb	r3, [r3, #20]
 800c60e:	2b01      	cmp	r3, #1
 800c610:	d106      	bne.n	800c620 <tcp_recved+0x38>
 800c612:	4b19      	ldr	r3, [pc, #100]	@ (800c678 <tcp_recved+0x90>)
 800c614:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800c618:	491a      	ldr	r1, [pc, #104]	@ (800c684 <tcp_recved+0x9c>)
 800c61a:	4819      	ldr	r0, [pc, #100]	@ (800c680 <tcp_recved+0x98>)
 800c61c:	f00a fc32 	bl	8016e84 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c624:	887b      	ldrh	r3, [r7, #2]
 800c626:	4413      	add	r3, r2
 800c628:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c62a:	89fb      	ldrh	r3, [r7, #14]
 800c62c:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800c630:	d804      	bhi.n	800c63c <tcp_recved+0x54>
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c636:	89fa      	ldrh	r2, [r7, #14]
 800c638:	429a      	cmp	r2, r3
 800c63a:	d204      	bcs.n	800c646 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800c642:	851a      	strh	r2, [r3, #40]	@ 0x28
 800c644:	e002      	b.n	800c64c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	89fa      	ldrh	r2, [r7, #14]
 800c64a:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f7ff ff71 	bl	800c534 <tcp_update_rcv_ann_wnd>
 800c652:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800c65a:	d309      	bcc.n	800c670 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	8b5b      	ldrh	r3, [r3, #26]
 800c660:	f043 0302 	orr.w	r3, r3, #2
 800c664:	b29a      	uxth	r2, r3
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f003 fe3e 	bl	80102ec <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c670:	3710      	adds	r7, #16
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
 800c676:	bf00      	nop
 800c678:	08018f20 	.word	0x08018f20
 800c67c:	080191bc 	.word	0x080191bc
 800c680:	08018f64 	.word	0x08018f64
 800c684:	080191d4 	.word	0x080191d4

0800c688 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c688:	b5b0      	push	{r4, r5, r7, lr}
 800c68a:	b090      	sub	sp, #64	@ 0x40
 800c68c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c68e:	2300      	movs	r3, #0
 800c690:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800c694:	4b95      	ldr	r3, [pc, #596]	@ (800c8ec <tcp_slowtmr+0x264>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	3301      	adds	r3, #1
 800c69a:	4a94      	ldr	r2, [pc, #592]	@ (800c8ec <tcp_slowtmr+0x264>)
 800c69c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c69e:	4b94      	ldr	r3, [pc, #592]	@ (800c8f0 <tcp_slowtmr+0x268>)
 800c6a0:	781b      	ldrb	r3, [r3, #0]
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	b2da      	uxtb	r2, r3
 800c6a6:	4b92      	ldr	r3, [pc, #584]	@ (800c8f0 <tcp_slowtmr+0x268>)
 800c6a8:	701a      	strb	r2, [r3, #0]
 800c6aa:	e000      	b.n	800c6ae <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800c6ac:	bf00      	nop
  prev = NULL;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800c6b2:	4b90      	ldr	r3, [pc, #576]	@ (800c8f4 <tcp_slowtmr+0x26c>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800c6b8:	e29f      	b.n	800cbfa <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c6ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6bc:	7d1b      	ldrb	r3, [r3, #20]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d106      	bne.n	800c6d0 <tcp_slowtmr+0x48>
 800c6c2:	4b8d      	ldr	r3, [pc, #564]	@ (800c8f8 <tcp_slowtmr+0x270>)
 800c6c4:	f240 42be 	movw	r2, #1214	@ 0x4be
 800c6c8:	498c      	ldr	r1, [pc, #560]	@ (800c8fc <tcp_slowtmr+0x274>)
 800c6ca:	488d      	ldr	r0, [pc, #564]	@ (800c900 <tcp_slowtmr+0x278>)
 800c6cc:	f00a fbda 	bl	8016e84 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c6d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6d2:	7d1b      	ldrb	r3, [r3, #20]
 800c6d4:	2b01      	cmp	r3, #1
 800c6d6:	d106      	bne.n	800c6e6 <tcp_slowtmr+0x5e>
 800c6d8:	4b87      	ldr	r3, [pc, #540]	@ (800c8f8 <tcp_slowtmr+0x270>)
 800c6da:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800c6de:	4989      	ldr	r1, [pc, #548]	@ (800c904 <tcp_slowtmr+0x27c>)
 800c6e0:	4887      	ldr	r0, [pc, #540]	@ (800c900 <tcp_slowtmr+0x278>)
 800c6e2:	f00a fbcf 	bl	8016e84 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c6e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6e8:	7d1b      	ldrb	r3, [r3, #20]
 800c6ea:	2b0a      	cmp	r3, #10
 800c6ec:	d106      	bne.n	800c6fc <tcp_slowtmr+0x74>
 800c6ee:	4b82      	ldr	r3, [pc, #520]	@ (800c8f8 <tcp_slowtmr+0x270>)
 800c6f0:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800c6f4:	4984      	ldr	r1, [pc, #528]	@ (800c908 <tcp_slowtmr+0x280>)
 800c6f6:	4882      	ldr	r0, [pc, #520]	@ (800c900 <tcp_slowtmr+0x278>)
 800c6f8:	f00a fbc4 	bl	8016e84 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c6fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6fe:	7f9a      	ldrb	r2, [r3, #30]
 800c700:	4b7b      	ldr	r3, [pc, #492]	@ (800c8f0 <tcp_slowtmr+0x268>)
 800c702:	781b      	ldrb	r3, [r3, #0]
 800c704:	429a      	cmp	r2, r3
 800c706:	d105      	bne.n	800c714 <tcp_slowtmr+0x8c>
      prev = pcb;
 800c708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c70a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800c70c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c70e:	68db      	ldr	r3, [r3, #12]
 800c710:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800c712:	e272      	b.n	800cbfa <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 800c714:	4b76      	ldr	r3, [pc, #472]	@ (800c8f0 <tcp_slowtmr+0x268>)
 800c716:	781a      	ldrb	r2, [r3, #0]
 800c718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c71a:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800c71c:	2300      	movs	r3, #0
 800c71e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800c722:	2300      	movs	r3, #0
 800c724:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c72a:	7d1b      	ldrb	r3, [r3, #20]
 800c72c:	2b02      	cmp	r3, #2
 800c72e:	d10a      	bne.n	800c746 <tcp_slowtmr+0xbe>
 800c730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c732:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c736:	2b05      	cmp	r3, #5
 800c738:	d905      	bls.n	800c746 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800c73a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c73e:	3301      	adds	r3, #1
 800c740:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c744:	e11e      	b.n	800c984 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c748:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c74c:	2b0b      	cmp	r3, #11
 800c74e:	d905      	bls.n	800c75c <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800c750:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c754:	3301      	adds	r3, #1
 800c756:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c75a:	e113      	b.n	800c984 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800c75c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c75e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c762:	2b00      	cmp	r3, #0
 800c764:	d075      	beq.n	800c852 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d006      	beq.n	800c77c <tcp_slowtmr+0xf4>
 800c76e:	4b62      	ldr	r3, [pc, #392]	@ (800c8f8 <tcp_slowtmr+0x270>)
 800c770:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800c774:	4965      	ldr	r1, [pc, #404]	@ (800c90c <tcp_slowtmr+0x284>)
 800c776:	4862      	ldr	r0, [pc, #392]	@ (800c900 <tcp_slowtmr+0x278>)
 800c778:	f00a fb84 	bl	8016e84 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c77c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c77e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c780:	2b00      	cmp	r3, #0
 800c782:	d106      	bne.n	800c792 <tcp_slowtmr+0x10a>
 800c784:	4b5c      	ldr	r3, [pc, #368]	@ (800c8f8 <tcp_slowtmr+0x270>)
 800c786:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800c78a:	4961      	ldr	r1, [pc, #388]	@ (800c910 <tcp_slowtmr+0x288>)
 800c78c:	485c      	ldr	r0, [pc, #368]	@ (800c900 <tcp_slowtmr+0x278>)
 800c78e:	f00a fb79 	bl	8016e84 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c794:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800c798:	2b0b      	cmp	r3, #11
 800c79a:	d905      	bls.n	800c7a8 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800c79c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c7a0:	3301      	adds	r3, #1
 800c7a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c7a6:	e0ed      	b.n	800c984 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c7a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7aa:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c7ae:	3b01      	subs	r3, #1
 800c7b0:	4a58      	ldr	r2, [pc, #352]	@ (800c914 <tcp_slowtmr+0x28c>)
 800c7b2:	5cd3      	ldrb	r3, [r2, r3]
 800c7b4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c7b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7b8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c7bc:	7c7a      	ldrb	r2, [r7, #17]
 800c7be:	429a      	cmp	r2, r3
 800c7c0:	d907      	bls.n	800c7d2 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800c7c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7c4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c7c8:	3301      	adds	r3, #1
 800c7ca:	b2da      	uxtb	r2, r3
 800c7cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7ce:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800c7d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7d4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c7d8:	7c7a      	ldrb	r2, [r7, #17]
 800c7da:	429a      	cmp	r2, r3
 800c7dc:	f200 80d2 	bhi.w	800c984 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800c7e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d108      	bne.n	800c800 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c7ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c7f0:	f004 fc24 	bl	801103c <tcp_zero_window_probe>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d014      	beq.n	800c824 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	623b      	str	r3, [r7, #32]
 800c7fe:	e011      	b.n	800c824 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c802:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c806:	4619      	mov	r1, r3
 800c808:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c80a:	f003 fae9 	bl	800fde0 <tcp_split_unsent_seg>
 800c80e:	4603      	mov	r3, r0
 800c810:	2b00      	cmp	r3, #0
 800c812:	d107      	bne.n	800c824 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800c814:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c816:	f003 fd69 	bl	80102ec <tcp_output>
 800c81a:	4603      	mov	r3, r0
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d101      	bne.n	800c824 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800c820:	2300      	movs	r3, #0
 800c822:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800c824:	6a3b      	ldr	r3, [r7, #32]
 800c826:	2b00      	cmp	r3, #0
 800c828:	f000 80ac 	beq.w	800c984 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800c82c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c82e:	2200      	movs	r2, #0
 800c830:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c836:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c83a:	2b06      	cmp	r3, #6
 800c83c:	f200 80a2 	bhi.w	800c984 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800c840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c842:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c846:	3301      	adds	r3, #1
 800c848:	b2da      	uxtb	r2, r3
 800c84a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c84c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800c850:	e098      	b.n	800c984 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c854:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c858:	2b00      	cmp	r3, #0
 800c85a:	db0f      	blt.n	800c87c <tcp_slowtmr+0x1f4>
 800c85c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c85e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c862:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800c866:	4293      	cmp	r3, r2
 800c868:	d008      	beq.n	800c87c <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800c86a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c86c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c870:	b29b      	uxth	r3, r3
 800c872:	3301      	adds	r3, #1
 800c874:	b29b      	uxth	r3, r3
 800c876:	b21a      	sxth	r2, r3
 800c878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c87a:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800c87c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c87e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800c882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c884:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800c888:	429a      	cmp	r2, r3
 800c88a:	db7b      	blt.n	800c984 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c88c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c88e:	f004 f821 	bl	80108d4 <tcp_rexmit_rto_prepare>
 800c892:	4603      	mov	r3, r0
 800c894:	2b00      	cmp	r3, #0
 800c896:	d007      	beq.n	800c8a8 <tcp_slowtmr+0x220>
 800c898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c89a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d171      	bne.n	800c984 <tcp_slowtmr+0x2fc>
 800c8a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d06d      	beq.n	800c984 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800c8a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8aa:	7d1b      	ldrb	r3, [r3, #20]
 800c8ac:	2b02      	cmp	r3, #2
 800c8ae:	d03a      	beq.n	800c926 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c8b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c8b6:	2b0c      	cmp	r3, #12
 800c8b8:	bf28      	it	cs
 800c8ba:	230c      	movcs	r3, #12
 800c8bc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c8be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8c0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c8c4:	10db      	asrs	r3, r3, #3
 800c8c6:	b21b      	sxth	r3, r3
 800c8c8:	461a      	mov	r2, r3
 800c8ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8cc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c8d0:	4413      	add	r3, r2
 800c8d2:	7efa      	ldrb	r2, [r7, #27]
 800c8d4:	4910      	ldr	r1, [pc, #64]	@ (800c918 <tcp_slowtmr+0x290>)
 800c8d6:	5c8a      	ldrb	r2, [r1, r2]
 800c8d8:	4093      	lsls	r3, r2
 800c8da:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	dc1a      	bgt.n	800c91c <tcp_slowtmr+0x294>
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	b21a      	sxth	r2, r3
 800c8ea:	e019      	b.n	800c920 <tcp_slowtmr+0x298>
 800c8ec:	2000cabc 	.word	0x2000cabc
 800c8f0:	2000cad2 	.word	0x2000cad2
 800c8f4:	2000cac8 	.word	0x2000cac8
 800c8f8:	08018f20 	.word	0x08018f20
 800c8fc:	08019264 	.word	0x08019264
 800c900:	08018f64 	.word	0x08018f64
 800c904:	08019290 	.word	0x08019290
 800c908:	080192bc 	.word	0x080192bc
 800c90c:	080192ec 	.word	0x080192ec
 800c910:	08019320 	.word	0x08019320
 800c914:	0801b664 	.word	0x0801b664
 800c918:	0801b654 	.word	0x0801b654
 800c91c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800c920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c922:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800c926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c928:	2200      	movs	r2, #0
 800c92a:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c92c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c92e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800c932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c934:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c938:	4293      	cmp	r3, r2
 800c93a:	bf28      	it	cs
 800c93c:	4613      	movcs	r3, r2
 800c93e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800c940:	8a7b      	ldrh	r3, [r7, #18]
 800c942:	085b      	lsrs	r3, r3, #1
 800c944:	b29a      	uxth	r2, r3
 800c946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c948:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c94c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c94e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800c952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c954:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c956:	005b      	lsls	r3, r3, #1
 800c958:	b29b      	uxth	r3, r3
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d206      	bcs.n	800c96c <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800c95e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c960:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c962:	005b      	lsls	r3, r3, #1
 800c964:	b29a      	uxth	r2, r3
 800c966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c968:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800c96c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c96e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800c970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c972:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800c976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c978:	2200      	movs	r2, #0
 800c97a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800c97e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c980:	f004 f818 	bl	80109b4 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800c984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c986:	7d1b      	ldrb	r3, [r3, #20]
 800c988:	2b06      	cmp	r3, #6
 800c98a:	d111      	bne.n	800c9b0 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800c98c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c98e:	8b5b      	ldrh	r3, [r3, #26]
 800c990:	f003 0310 	and.w	r3, r3, #16
 800c994:	2b00      	cmp	r3, #0
 800c996:	d00b      	beq.n	800c9b0 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c998:	4b9d      	ldr	r3, [pc, #628]	@ (800cc10 <tcp_slowtmr+0x588>)
 800c99a:	681a      	ldr	r2, [r3, #0]
 800c99c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c99e:	6a1b      	ldr	r3, [r3, #32]
 800c9a0:	1ad3      	subs	r3, r2, r3
 800c9a2:	2b28      	cmp	r3, #40	@ 0x28
 800c9a4:	d904      	bls.n	800c9b0 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800c9a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c9aa:	3301      	adds	r3, #1
 800c9ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c9b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9b2:	7a5b      	ldrb	r3, [r3, #9]
 800c9b4:	f003 0308 	and.w	r3, r3, #8
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d04c      	beq.n	800ca56 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 800c9bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9be:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c9c0:	2b04      	cmp	r3, #4
 800c9c2:	d003      	beq.n	800c9cc <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800c9c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9c6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800c9c8:	2b07      	cmp	r3, #7
 800c9ca:	d144      	bne.n	800ca56 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c9cc:	4b90      	ldr	r3, [pc, #576]	@ (800cc10 <tcp_slowtmr+0x588>)
 800c9ce:	681a      	ldr	r2, [r3, #0]
 800c9d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9d2:	6a1b      	ldr	r3, [r3, #32]
 800c9d4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800c9d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c9dc:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800c9e0:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800c9e4:	498b      	ldr	r1, [pc, #556]	@ (800cc14 <tcp_slowtmr+0x58c>)
 800c9e6:	fba1 1303 	umull	r1, r3, r1, r3
 800c9ea:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	d90a      	bls.n	800ca06 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800c9f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c9f4:	3301      	adds	r3, #1
 800c9f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800c9fa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c9fe:	3301      	adds	r3, #1
 800ca00:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ca04:	e027      	b.n	800ca56 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ca06:	4b82      	ldr	r3, [pc, #520]	@ (800cc10 <tcp_slowtmr+0x588>)
 800ca08:	681a      	ldr	r2, [r3, #0]
 800ca0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca0c:	6a1b      	ldr	r3, [r3, #32]
 800ca0e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ca10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca12:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800ca16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca18:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	4b7e      	ldr	r3, [pc, #504]	@ (800cc18 <tcp_slowtmr+0x590>)
 800ca20:	fb00 f303 	mul.w	r3, r0, r3
 800ca24:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800ca26:	497b      	ldr	r1, [pc, #492]	@ (800cc14 <tcp_slowtmr+0x58c>)
 800ca28:	fba1 1303 	umull	r1, r3, r1, r3
 800ca2c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ca2e:	429a      	cmp	r2, r3
 800ca30:	d911      	bls.n	800ca56 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800ca32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ca34:	f004 fac2 	bl	8010fbc <tcp_keepalive>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800ca3e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d107      	bne.n	800ca56 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 800ca46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca48:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800ca4c:	3301      	adds	r3, #1
 800ca4e:	b2da      	uxtb	r2, r3
 800ca50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca52:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800ca56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d011      	beq.n	800ca82 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ca5e:	4b6c      	ldr	r3, [pc, #432]	@ (800cc10 <tcp_slowtmr+0x588>)
 800ca60:	681a      	ldr	r2, [r3, #0]
 800ca62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca64:	6a1b      	ldr	r3, [r3, #32]
 800ca66:	1ad2      	subs	r2, r2, r3
 800ca68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca6a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800ca6e:	4619      	mov	r1, r3
 800ca70:	460b      	mov	r3, r1
 800ca72:	005b      	lsls	r3, r3, #1
 800ca74:	440b      	add	r3, r1
 800ca76:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d302      	bcc.n	800ca82 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 800ca7c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ca7e:	f000 fddb 	bl	800d638 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800ca82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca84:	7d1b      	ldrb	r3, [r3, #20]
 800ca86:	2b03      	cmp	r3, #3
 800ca88:	d10b      	bne.n	800caa2 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ca8a:	4b61      	ldr	r3, [pc, #388]	@ (800cc10 <tcp_slowtmr+0x588>)
 800ca8c:	681a      	ldr	r2, [r3, #0]
 800ca8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca90:	6a1b      	ldr	r3, [r3, #32]
 800ca92:	1ad3      	subs	r3, r2, r3
 800ca94:	2b28      	cmp	r3, #40	@ 0x28
 800ca96:	d904      	bls.n	800caa2 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 800ca98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca9c:	3301      	adds	r3, #1
 800ca9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800caa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caa4:	7d1b      	ldrb	r3, [r3, #20]
 800caa6:	2b09      	cmp	r3, #9
 800caa8:	d10b      	bne.n	800cac2 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800caaa:	4b59      	ldr	r3, [pc, #356]	@ (800cc10 <tcp_slowtmr+0x588>)
 800caac:	681a      	ldr	r2, [r3, #0]
 800caae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cab0:	6a1b      	ldr	r3, [r3, #32]
 800cab2:	1ad3      	subs	r3, r2, r3
 800cab4:	2bf0      	cmp	r3, #240	@ 0xf0
 800cab6:	d904      	bls.n	800cac2 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 800cab8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cabc:	3301      	adds	r3, #1
 800cabe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800cac2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d060      	beq.n	800cb8c <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 800caca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cacc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cad0:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800cad2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cad4:	f000 fbfc 	bl	800d2d0 <tcp_pcb_purge>
      if (prev != NULL) {
 800cad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d010      	beq.n	800cb00 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800cade:	4b4f      	ldr	r3, [pc, #316]	@ (800cc1c <tcp_slowtmr+0x594>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cae4:	429a      	cmp	r2, r3
 800cae6:	d106      	bne.n	800caf6 <tcp_slowtmr+0x46e>
 800cae8:	4b4d      	ldr	r3, [pc, #308]	@ (800cc20 <tcp_slowtmr+0x598>)
 800caea:	f240 526d 	movw	r2, #1389	@ 0x56d
 800caee:	494d      	ldr	r1, [pc, #308]	@ (800cc24 <tcp_slowtmr+0x59c>)
 800caf0:	484d      	ldr	r0, [pc, #308]	@ (800cc28 <tcp_slowtmr+0x5a0>)
 800caf2:	f00a f9c7 	bl	8016e84 <iprintf>
        prev->next = pcb->next;
 800caf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caf8:	68da      	ldr	r2, [r3, #12]
 800cafa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cafc:	60da      	str	r2, [r3, #12]
 800cafe:	e00f      	b.n	800cb20 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800cb00:	4b46      	ldr	r3, [pc, #280]	@ (800cc1c <tcp_slowtmr+0x594>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb06:	429a      	cmp	r2, r3
 800cb08:	d006      	beq.n	800cb18 <tcp_slowtmr+0x490>
 800cb0a:	4b45      	ldr	r3, [pc, #276]	@ (800cc20 <tcp_slowtmr+0x598>)
 800cb0c:	f240 5271 	movw	r2, #1393	@ 0x571
 800cb10:	4946      	ldr	r1, [pc, #280]	@ (800cc2c <tcp_slowtmr+0x5a4>)
 800cb12:	4845      	ldr	r0, [pc, #276]	@ (800cc28 <tcp_slowtmr+0x5a0>)
 800cb14:	f00a f9b6 	bl	8016e84 <iprintf>
        tcp_active_pcbs = pcb->next;
 800cb18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb1a:	68db      	ldr	r3, [r3, #12]
 800cb1c:	4a3f      	ldr	r2, [pc, #252]	@ (800cc1c <tcp_slowtmr+0x594>)
 800cb1e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800cb20:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d013      	beq.n	800cb50 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cb28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb2a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800cb2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb2e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800cb30:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800cb32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb34:	3304      	adds	r3, #4
 800cb36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb38:	8ad2      	ldrh	r2, [r2, #22]
 800cb3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cb3c:	8b09      	ldrh	r1, [r1, #24]
 800cb3e:	9102      	str	r1, [sp, #8]
 800cb40:	9201      	str	r2, [sp, #4]
 800cb42:	9300      	str	r3, [sp, #0]
 800cb44:	462b      	mov	r3, r5
 800cb46:	4622      	mov	r2, r4
 800cb48:	4601      	mov	r1, r0
 800cb4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cb4c:	f004 f982 	bl	8010e54 <tcp_rst>
      err_arg = pcb->callback_arg;
 800cb50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb52:	691b      	ldr	r3, [r3, #16]
 800cb54:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800cb56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb58:	7d1b      	ldrb	r3, [r3, #20]
 800cb5a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800cb5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb5e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800cb60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb62:	68db      	ldr	r3, [r3, #12]
 800cb64:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800cb66:	6838      	ldr	r0, [r7, #0]
 800cb68:	f7ff f9f0 	bl	800bf4c <tcp_free>
      tcp_active_pcbs_changed = 0;
 800cb6c:	4b30      	ldr	r3, [pc, #192]	@ (800cc30 <tcp_slowtmr+0x5a8>)
 800cb6e:	2200      	movs	r2, #0
 800cb70:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d004      	beq.n	800cb82 <tcp_slowtmr+0x4fa>
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	f06f 010c 	mvn.w	r1, #12
 800cb7e:	68b8      	ldr	r0, [r7, #8]
 800cb80:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800cb82:	4b2b      	ldr	r3, [pc, #172]	@ (800cc30 <tcp_slowtmr+0x5a8>)
 800cb84:	781b      	ldrb	r3, [r3, #0]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d037      	beq.n	800cbfa <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 800cb8a:	e590      	b.n	800c6ae <tcp_slowtmr+0x26>
      prev = pcb;
 800cb8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb8e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800cb90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb92:	68db      	ldr	r3, [r3, #12]
 800cb94:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800cb96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb98:	7f1b      	ldrb	r3, [r3, #28]
 800cb9a:	3301      	adds	r3, #1
 800cb9c:	b2da      	uxtb	r2, r3
 800cb9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cba0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800cba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cba4:	7f1a      	ldrb	r2, [r3, #28]
 800cba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cba8:	7f5b      	ldrb	r3, [r3, #29]
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d325      	bcc.n	800cbfa <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 800cbae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800cbb4:	4b1e      	ldr	r3, [pc, #120]	@ (800cc30 <tcp_slowtmr+0x5a8>)
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800cbba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d00b      	beq.n	800cbdc <tcp_slowtmr+0x554>
 800cbc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cbca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cbcc:	6912      	ldr	r2, [r2, #16]
 800cbce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cbd0:	4610      	mov	r0, r2
 800cbd2:	4798      	blx	r3
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800cbda:	e002      	b.n	800cbe2 <tcp_slowtmr+0x55a>
 800cbdc:	2300      	movs	r3, #0
 800cbde:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800cbe2:	4b13      	ldr	r3, [pc, #76]	@ (800cc30 <tcp_slowtmr+0x5a8>)
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	f47f ad60 	bne.w	800c6ac <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800cbec:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d102      	bne.n	800cbfa <tcp_slowtmr+0x572>
          tcp_output(prev);
 800cbf4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cbf6:	f003 fb79 	bl	80102ec <tcp_output>
  while (pcb != NULL) {
 800cbfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	f47f ad5c 	bne.w	800c6ba <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800cc02:	2300      	movs	r3, #0
 800cc04:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800cc06:	4b0b      	ldr	r3, [pc, #44]	@ (800cc34 <tcp_slowtmr+0x5ac>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800cc0c:	e067      	b.n	800ccde <tcp_slowtmr+0x656>
 800cc0e:	bf00      	nop
 800cc10:	2000cabc 	.word	0x2000cabc
 800cc14:	10624dd3 	.word	0x10624dd3
 800cc18:	000124f8 	.word	0x000124f8
 800cc1c:	2000cac8 	.word	0x2000cac8
 800cc20:	08018f20 	.word	0x08018f20
 800cc24:	08019358 	.word	0x08019358
 800cc28:	08018f64 	.word	0x08018f64
 800cc2c:	08019384 	.word	0x08019384
 800cc30:	2000cad0 	.word	0x2000cad0
 800cc34:	2000cacc 	.word	0x2000cacc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cc38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc3a:	7d1b      	ldrb	r3, [r3, #20]
 800cc3c:	2b0a      	cmp	r3, #10
 800cc3e:	d006      	beq.n	800cc4e <tcp_slowtmr+0x5c6>
 800cc40:	4b2b      	ldr	r3, [pc, #172]	@ (800ccf0 <tcp_slowtmr+0x668>)
 800cc42:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800cc46:	492b      	ldr	r1, [pc, #172]	@ (800ccf4 <tcp_slowtmr+0x66c>)
 800cc48:	482b      	ldr	r0, [pc, #172]	@ (800ccf8 <tcp_slowtmr+0x670>)
 800cc4a:	f00a f91b 	bl	8016e84 <iprintf>
    pcb_remove = 0;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cc54:	4b29      	ldr	r3, [pc, #164]	@ (800ccfc <tcp_slowtmr+0x674>)
 800cc56:	681a      	ldr	r2, [r3, #0]
 800cc58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc5a:	6a1b      	ldr	r3, [r3, #32]
 800cc5c:	1ad3      	subs	r3, r2, r3
 800cc5e:	2bf0      	cmp	r3, #240	@ 0xf0
 800cc60:	d904      	bls.n	800cc6c <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800cc62:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc66:	3301      	adds	r3, #1
 800cc68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cc6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d02f      	beq.n	800ccd4 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800cc74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cc76:	f000 fb2b 	bl	800d2d0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800cc7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d010      	beq.n	800cca2 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800cc80:	4b1f      	ldr	r3, [pc, #124]	@ (800cd00 <tcp_slowtmr+0x678>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc86:	429a      	cmp	r2, r3
 800cc88:	d106      	bne.n	800cc98 <tcp_slowtmr+0x610>
 800cc8a:	4b19      	ldr	r3, [pc, #100]	@ (800ccf0 <tcp_slowtmr+0x668>)
 800cc8c:	f240 52af 	movw	r2, #1455	@ 0x5af
 800cc90:	491c      	ldr	r1, [pc, #112]	@ (800cd04 <tcp_slowtmr+0x67c>)
 800cc92:	4819      	ldr	r0, [pc, #100]	@ (800ccf8 <tcp_slowtmr+0x670>)
 800cc94:	f00a f8f6 	bl	8016e84 <iprintf>
        prev->next = pcb->next;
 800cc98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc9a:	68da      	ldr	r2, [r3, #12]
 800cc9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc9e:	60da      	str	r2, [r3, #12]
 800cca0:	e00f      	b.n	800ccc2 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800cca2:	4b17      	ldr	r3, [pc, #92]	@ (800cd00 <tcp_slowtmr+0x678>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d006      	beq.n	800ccba <tcp_slowtmr+0x632>
 800ccac:	4b10      	ldr	r3, [pc, #64]	@ (800ccf0 <tcp_slowtmr+0x668>)
 800ccae:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800ccb2:	4915      	ldr	r1, [pc, #84]	@ (800cd08 <tcp_slowtmr+0x680>)
 800ccb4:	4810      	ldr	r0, [pc, #64]	@ (800ccf8 <tcp_slowtmr+0x670>)
 800ccb6:	f00a f8e5 	bl	8016e84 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ccba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccbc:	68db      	ldr	r3, [r3, #12]
 800ccbe:	4a10      	ldr	r2, [pc, #64]	@ (800cd00 <tcp_slowtmr+0x678>)
 800ccc0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ccc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccc4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ccc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccc8:	68db      	ldr	r3, [r3, #12]
 800ccca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800cccc:	69f8      	ldr	r0, [r7, #28]
 800ccce:	f7ff f93d 	bl	800bf4c <tcp_free>
 800ccd2:	e004      	b.n	800ccde <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800ccd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccd6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800ccd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccda:	68db      	ldr	r3, [r3, #12]
 800ccdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800ccde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d1a9      	bne.n	800cc38 <tcp_slowtmr+0x5b0>
    }
  }
}
 800cce4:	bf00      	nop
 800cce6:	bf00      	nop
 800cce8:	3730      	adds	r7, #48	@ 0x30
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bdb0      	pop	{r4, r5, r7, pc}
 800ccee:	bf00      	nop
 800ccf0:	08018f20 	.word	0x08018f20
 800ccf4:	080193b0 	.word	0x080193b0
 800ccf8:	08018f64 	.word	0x08018f64
 800ccfc:	2000cabc 	.word	0x2000cabc
 800cd00:	2000cacc 	.word	0x2000cacc
 800cd04:	080193e0 	.word	0x080193e0
 800cd08:	08019408 	.word	0x08019408

0800cd0c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b082      	sub	sp, #8
 800cd10:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800cd12:	4b2d      	ldr	r3, [pc, #180]	@ (800cdc8 <tcp_fasttmr+0xbc>)
 800cd14:	781b      	ldrb	r3, [r3, #0]
 800cd16:	3301      	adds	r3, #1
 800cd18:	b2da      	uxtb	r2, r3
 800cd1a:	4b2b      	ldr	r3, [pc, #172]	@ (800cdc8 <tcp_fasttmr+0xbc>)
 800cd1c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800cd1e:	4b2b      	ldr	r3, [pc, #172]	@ (800cdcc <tcp_fasttmr+0xc0>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cd24:	e048      	b.n	800cdb8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	7f9a      	ldrb	r2, [r3, #30]
 800cd2a:	4b27      	ldr	r3, [pc, #156]	@ (800cdc8 <tcp_fasttmr+0xbc>)
 800cd2c:	781b      	ldrb	r3, [r3, #0]
 800cd2e:	429a      	cmp	r2, r3
 800cd30:	d03f      	beq.n	800cdb2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800cd32:	4b25      	ldr	r3, [pc, #148]	@ (800cdc8 <tcp_fasttmr+0xbc>)
 800cd34:	781a      	ldrb	r2, [r3, #0]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	8b5b      	ldrh	r3, [r3, #26]
 800cd3e:	f003 0301 	and.w	r3, r3, #1
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d010      	beq.n	800cd68 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	8b5b      	ldrh	r3, [r3, #26]
 800cd4a:	f043 0302 	orr.w	r3, r3, #2
 800cd4e:	b29a      	uxth	r2, r3
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f003 fac9 	bl	80102ec <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	8b5b      	ldrh	r3, [r3, #26]
 800cd5e:	f023 0303 	bic.w	r3, r3, #3
 800cd62:	b29a      	uxth	r2, r3
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	8b5b      	ldrh	r3, [r3, #26]
 800cd6c:	f003 0308 	and.w	r3, r3, #8
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d009      	beq.n	800cd88 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	8b5b      	ldrh	r3, [r3, #26]
 800cd78:	f023 0308 	bic.w	r3, r3, #8
 800cd7c:	b29a      	uxth	r2, r3
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f7ff fa76 	bl	800c274 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	68db      	ldr	r3, [r3, #12]
 800cd8c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d00a      	beq.n	800cdac <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800cd96:	4b0e      	ldr	r3, [pc, #56]	@ (800cdd0 <tcp_fasttmr+0xc4>)
 800cd98:	2200      	movs	r2, #0
 800cd9a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f000 f819 	bl	800cdd4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800cda2:	4b0b      	ldr	r3, [pc, #44]	@ (800cdd0 <tcp_fasttmr+0xc4>)
 800cda4:	781b      	ldrb	r3, [r3, #0]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d000      	beq.n	800cdac <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800cdaa:	e7b8      	b.n	800cd1e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	607b      	str	r3, [r7, #4]
 800cdb0:	e002      	b.n	800cdb8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	68db      	ldr	r3, [r3, #12]
 800cdb6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d1b3      	bne.n	800cd26 <tcp_fasttmr+0x1a>
    }
  }
}
 800cdbe:	bf00      	nop
 800cdc0:	bf00      	nop
 800cdc2:	3708      	adds	r7, #8
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}
 800cdc8:	2000cad2 	.word	0x2000cad2
 800cdcc:	2000cac8 	.word	0x2000cac8
 800cdd0:	2000cad0 	.word	0x2000cad0

0800cdd4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800cdd4:	b590      	push	{r4, r7, lr}
 800cdd6:	b085      	sub	sp, #20
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d109      	bne.n	800cdf6 <tcp_process_refused_data+0x22>
 800cde2:	4b37      	ldr	r3, [pc, #220]	@ (800cec0 <tcp_process_refused_data+0xec>)
 800cde4:	f240 6209 	movw	r2, #1545	@ 0x609
 800cde8:	4936      	ldr	r1, [pc, #216]	@ (800cec4 <tcp_process_refused_data+0xf0>)
 800cdea:	4837      	ldr	r0, [pc, #220]	@ (800cec8 <tcp_process_refused_data+0xf4>)
 800cdec:	f00a f84a 	bl	8016e84 <iprintf>
 800cdf0:	f06f 030f 	mvn.w	r3, #15
 800cdf4:	e060      	b.n	800ceb8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cdfa:	7b5b      	ldrb	r3, [r3, #13]
 800cdfc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ce02:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2200      	movs	r2, #0
 800ce08:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d00b      	beq.n	800ce2c <tcp_process_refused_data+0x58>
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6918      	ldr	r0, [r3, #16]
 800ce1e:	2300      	movs	r3, #0
 800ce20:	68ba      	ldr	r2, [r7, #8]
 800ce22:	6879      	ldr	r1, [r7, #4]
 800ce24:	47a0      	blx	r4
 800ce26:	4603      	mov	r3, r0
 800ce28:	73fb      	strb	r3, [r7, #15]
 800ce2a:	e007      	b.n	800ce3c <tcp_process_refused_data+0x68>
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	68ba      	ldr	r2, [r7, #8]
 800ce30:	6879      	ldr	r1, [r7, #4]
 800ce32:	2000      	movs	r0, #0
 800ce34:	f000 f8a4 	bl	800cf80 <tcp_recv_null>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ce3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d12a      	bne.n	800ce9a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ce44:	7bbb      	ldrb	r3, [r7, #14]
 800ce46:	f003 0320 	and.w	r3, r3, #32
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d033      	beq.n	800ceb6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ce52:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800ce56:	d005      	beq.n	800ce64 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ce5c:	3301      	adds	r3, #1
 800ce5e:	b29a      	uxth	r2, r3
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d00b      	beq.n	800ce86 <tcp_process_refused_data+0xb2>
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6918      	ldr	r0, [r3, #16]
 800ce78:	2300      	movs	r3, #0
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	6879      	ldr	r1, [r7, #4]
 800ce7e:	47a0      	blx	r4
 800ce80:	4603      	mov	r3, r0
 800ce82:	73fb      	strb	r3, [r7, #15]
 800ce84:	e001      	b.n	800ce8a <tcp_process_refused_data+0xb6>
 800ce86:	2300      	movs	r3, #0
 800ce88:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ce8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce8e:	f113 0f0d 	cmn.w	r3, #13
 800ce92:	d110      	bne.n	800ceb6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ce94:	f06f 030c 	mvn.w	r3, #12
 800ce98:	e00e      	b.n	800ceb8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ce9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce9e:	f113 0f0d 	cmn.w	r3, #13
 800cea2:	d102      	bne.n	800ceaa <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800cea4:	f06f 030c 	mvn.w	r3, #12
 800cea8:	e006      	b.n	800ceb8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	68ba      	ldr	r2, [r7, #8]
 800ceae:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800ceb0:	f06f 0304 	mvn.w	r3, #4
 800ceb4:	e000      	b.n	800ceb8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ceb6:	2300      	movs	r3, #0
}
 800ceb8:	4618      	mov	r0, r3
 800ceba:	3714      	adds	r7, #20
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd90      	pop	{r4, r7, pc}
 800cec0:	08018f20 	.word	0x08018f20
 800cec4:	08019430 	.word	0x08019430
 800cec8:	08018f64 	.word	0x08018f64

0800cecc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b084      	sub	sp, #16
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ced4:	e007      	b.n	800cee6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f000 f80a 	bl	800cef6 <tcp_seg_free>
    seg = next;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d1f4      	bne.n	800ced6 <tcp_segs_free+0xa>
  }
}
 800ceec:	bf00      	nop
 800ceee:	bf00      	nop
 800cef0:	3710      	adds	r7, #16
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}

0800cef6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800cef6:	b580      	push	{r7, lr}
 800cef8:	b082      	sub	sp, #8
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d00c      	beq.n	800cf1e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	685b      	ldr	r3, [r3, #4]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d004      	beq.n	800cf16 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	685b      	ldr	r3, [r3, #4]
 800cf10:	4618      	mov	r0, r3
 800cf12:	f7fe fd5f 	bl	800b9d4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800cf16:	6879      	ldr	r1, [r7, #4]
 800cf18:	2003      	movs	r0, #3
 800cf1a:	f7fd fdc5 	bl	800aaa8 <memp_free>
  }
}
 800cf1e:	bf00      	nop
 800cf20:	3708      	adds	r7, #8
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}
	...

0800cf28 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b084      	sub	sp, #16
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d106      	bne.n	800cf44 <tcp_seg_copy+0x1c>
 800cf36:	4b0f      	ldr	r3, [pc, #60]	@ (800cf74 <tcp_seg_copy+0x4c>)
 800cf38:	f240 6282 	movw	r2, #1666	@ 0x682
 800cf3c:	490e      	ldr	r1, [pc, #56]	@ (800cf78 <tcp_seg_copy+0x50>)
 800cf3e:	480f      	ldr	r0, [pc, #60]	@ (800cf7c <tcp_seg_copy+0x54>)
 800cf40:	f009 ffa0 	bl	8016e84 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800cf44:	2003      	movs	r0, #3
 800cf46:	f7fd fd39 	bl	800a9bc <memp_malloc>
 800cf4a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d101      	bne.n	800cf56 <tcp_seg_copy+0x2e>
    return NULL;
 800cf52:	2300      	movs	r3, #0
 800cf54:	e00a      	b.n	800cf6c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800cf56:	2210      	movs	r2, #16
 800cf58:	6879      	ldr	r1, [r7, #4]
 800cf5a:	68f8      	ldr	r0, [r7, #12]
 800cf5c:	f00a f9ef 	bl	801733e <memcpy>
  pbuf_ref(cseg->p);
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	685b      	ldr	r3, [r3, #4]
 800cf64:	4618      	mov	r0, r3
 800cf66:	f7fe fddb 	bl	800bb20 <pbuf_ref>
  return cseg;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3710      	adds	r7, #16
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}
 800cf74:	08018f20 	.word	0x08018f20
 800cf78:	08019474 	.word	0x08019474
 800cf7c:	08018f64 	.word	0x08018f64

0800cf80 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b084      	sub	sp, #16
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	60f8      	str	r0, [r7, #12]
 800cf88:	60b9      	str	r1, [r7, #8]
 800cf8a:	607a      	str	r2, [r7, #4]
 800cf8c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d109      	bne.n	800cfa8 <tcp_recv_null+0x28>
 800cf94:	4b12      	ldr	r3, [pc, #72]	@ (800cfe0 <tcp_recv_null+0x60>)
 800cf96:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800cf9a:	4912      	ldr	r1, [pc, #72]	@ (800cfe4 <tcp_recv_null+0x64>)
 800cf9c:	4812      	ldr	r0, [pc, #72]	@ (800cfe8 <tcp_recv_null+0x68>)
 800cf9e:	f009 ff71 	bl	8016e84 <iprintf>
 800cfa2:	f06f 030f 	mvn.w	r3, #15
 800cfa6:	e016      	b.n	800cfd6 <tcp_recv_null+0x56>

  if (p != NULL) {
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d009      	beq.n	800cfc2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	891b      	ldrh	r3, [r3, #8]
 800cfb2:	4619      	mov	r1, r3
 800cfb4:	68b8      	ldr	r0, [r7, #8]
 800cfb6:	f7ff fb17 	bl	800c5e8 <tcp_recved>
    pbuf_free(p);
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f7fe fd0a 	bl	800b9d4 <pbuf_free>
 800cfc0:	e008      	b.n	800cfd4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800cfc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d104      	bne.n	800cfd4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800cfca:	68b8      	ldr	r0, [r7, #8]
 800cfcc:	f7ff f9bc 	bl	800c348 <tcp_close>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	e000      	b.n	800cfd6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800cfd4:	2300      	movs	r3, #0
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3710      	adds	r7, #16
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}
 800cfde:	bf00      	nop
 800cfe0:	08018f20 	.word	0x08018f20
 800cfe4:	08019490 	.word	0x08019490
 800cfe8:	08018f64 	.word	0x08018f64

0800cfec <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b086      	sub	sp, #24
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	4603      	mov	r3, r0
 800cff4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800cff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	db01      	blt.n	800d002 <tcp_kill_prio+0x16>
 800cffe:	79fb      	ldrb	r3, [r7, #7]
 800d000:	e000      	b.n	800d004 <tcp_kill_prio+0x18>
 800d002:	237f      	movs	r3, #127	@ 0x7f
 800d004:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d006:	7afb      	ldrb	r3, [r7, #11]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d034      	beq.n	800d076 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d00c:	7afb      	ldrb	r3, [r7, #11]
 800d00e:	3b01      	subs	r3, #1
 800d010:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d012:	2300      	movs	r3, #0
 800d014:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d016:	2300      	movs	r3, #0
 800d018:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d01a:	4b19      	ldr	r3, [pc, #100]	@ (800d080 <tcp_kill_prio+0x94>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	617b      	str	r3, [r7, #20]
 800d020:	e01f      	b.n	800d062 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	7d5b      	ldrb	r3, [r3, #21]
 800d026:	7afa      	ldrb	r2, [r7, #11]
 800d028:	429a      	cmp	r2, r3
 800d02a:	d80c      	bhi.n	800d046 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d030:	7afa      	ldrb	r2, [r7, #11]
 800d032:	429a      	cmp	r2, r3
 800d034:	d112      	bne.n	800d05c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d036:	4b13      	ldr	r3, [pc, #76]	@ (800d084 <tcp_kill_prio+0x98>)
 800d038:	681a      	ldr	r2, [r3, #0]
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	6a1b      	ldr	r3, [r3, #32]
 800d03e:	1ad3      	subs	r3, r2, r3
 800d040:	68fa      	ldr	r2, [r7, #12]
 800d042:	429a      	cmp	r2, r3
 800d044:	d80a      	bhi.n	800d05c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d046:	4b0f      	ldr	r3, [pc, #60]	@ (800d084 <tcp_kill_prio+0x98>)
 800d048:	681a      	ldr	r2, [r3, #0]
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	6a1b      	ldr	r3, [r3, #32]
 800d04e:	1ad3      	subs	r3, r2, r3
 800d050:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	7d5b      	ldrb	r3, [r3, #21]
 800d05a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	68db      	ldr	r3, [r3, #12]
 800d060:	617b      	str	r3, [r7, #20]
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d1dc      	bne.n	800d022 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d004      	beq.n	800d078 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d06e:	6938      	ldr	r0, [r7, #16]
 800d070:	f7ff fa54 	bl	800c51c <tcp_abort>
 800d074:	e000      	b.n	800d078 <tcp_kill_prio+0x8c>
    return;
 800d076:	bf00      	nop
  }
}
 800d078:	3718      	adds	r7, #24
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}
 800d07e:	bf00      	nop
 800d080:	2000cac8 	.word	0x2000cac8
 800d084:	2000cabc 	.word	0x2000cabc

0800d088 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b086      	sub	sp, #24
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	4603      	mov	r3, r0
 800d090:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d092:	79fb      	ldrb	r3, [r7, #7]
 800d094:	2b08      	cmp	r3, #8
 800d096:	d009      	beq.n	800d0ac <tcp_kill_state+0x24>
 800d098:	79fb      	ldrb	r3, [r7, #7]
 800d09a:	2b09      	cmp	r3, #9
 800d09c:	d006      	beq.n	800d0ac <tcp_kill_state+0x24>
 800d09e:	4b1a      	ldr	r3, [pc, #104]	@ (800d108 <tcp_kill_state+0x80>)
 800d0a0:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800d0a4:	4919      	ldr	r1, [pc, #100]	@ (800d10c <tcp_kill_state+0x84>)
 800d0a6:	481a      	ldr	r0, [pc, #104]	@ (800d110 <tcp_kill_state+0x88>)
 800d0a8:	f009 feec 	bl	8016e84 <iprintf>

  inactivity = 0;
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d0b4:	4b17      	ldr	r3, [pc, #92]	@ (800d114 <tcp_kill_state+0x8c>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	617b      	str	r3, [r7, #20]
 800d0ba:	e017      	b.n	800d0ec <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d0bc:	697b      	ldr	r3, [r7, #20]
 800d0be:	7d1b      	ldrb	r3, [r3, #20]
 800d0c0:	79fa      	ldrb	r2, [r7, #7]
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	d10f      	bne.n	800d0e6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d0c6:	4b14      	ldr	r3, [pc, #80]	@ (800d118 <tcp_kill_state+0x90>)
 800d0c8:	681a      	ldr	r2, [r3, #0]
 800d0ca:	697b      	ldr	r3, [r7, #20]
 800d0cc:	6a1b      	ldr	r3, [r3, #32]
 800d0ce:	1ad3      	subs	r3, r2, r3
 800d0d0:	68fa      	ldr	r2, [r7, #12]
 800d0d2:	429a      	cmp	r2, r3
 800d0d4:	d807      	bhi.n	800d0e6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d0d6:	4b10      	ldr	r3, [pc, #64]	@ (800d118 <tcp_kill_state+0x90>)
 800d0d8:	681a      	ldr	r2, [r3, #0]
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	6a1b      	ldr	r3, [r3, #32]
 800d0de:	1ad3      	subs	r3, r2, r3
 800d0e0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d0e6:	697b      	ldr	r3, [r7, #20]
 800d0e8:	68db      	ldr	r3, [r3, #12]
 800d0ea:	617b      	str	r3, [r7, #20]
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d1e4      	bne.n	800d0bc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d0f2:	693b      	ldr	r3, [r7, #16]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d003      	beq.n	800d100 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d0f8:	2100      	movs	r1, #0
 800d0fa:	6938      	ldr	r0, [r7, #16]
 800d0fc:	f7ff f950 	bl	800c3a0 <tcp_abandon>
  }
}
 800d100:	bf00      	nop
 800d102:	3718      	adds	r7, #24
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}
 800d108:	08018f20 	.word	0x08018f20
 800d10c:	080194ac 	.word	0x080194ac
 800d110:	08018f64 	.word	0x08018f64
 800d114:	2000cac8 	.word	0x2000cac8
 800d118:	2000cabc 	.word	0x2000cabc

0800d11c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b084      	sub	sp, #16
 800d120:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d122:	2300      	movs	r3, #0
 800d124:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d126:	2300      	movs	r3, #0
 800d128:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d12a:	4b12      	ldr	r3, [pc, #72]	@ (800d174 <tcp_kill_timewait+0x58>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	60fb      	str	r3, [r7, #12]
 800d130:	e012      	b.n	800d158 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d132:	4b11      	ldr	r3, [pc, #68]	@ (800d178 <tcp_kill_timewait+0x5c>)
 800d134:	681a      	ldr	r2, [r3, #0]
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	6a1b      	ldr	r3, [r3, #32]
 800d13a:	1ad3      	subs	r3, r2, r3
 800d13c:	687a      	ldr	r2, [r7, #4]
 800d13e:	429a      	cmp	r2, r3
 800d140:	d807      	bhi.n	800d152 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d142:	4b0d      	ldr	r3, [pc, #52]	@ (800d178 <tcp_kill_timewait+0x5c>)
 800d144:	681a      	ldr	r2, [r3, #0]
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	6a1b      	ldr	r3, [r3, #32]
 800d14a:	1ad3      	subs	r3, r2, r3
 800d14c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	68db      	ldr	r3, [r3, #12]
 800d156:	60fb      	str	r3, [r7, #12]
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d1e9      	bne.n	800d132 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d15e:	68bb      	ldr	r3, [r7, #8]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d002      	beq.n	800d16a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d164:	68b8      	ldr	r0, [r7, #8]
 800d166:	f7ff f9d9 	bl	800c51c <tcp_abort>
  }
}
 800d16a:	bf00      	nop
 800d16c:	3710      	adds	r7, #16
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}
 800d172:	bf00      	nop
 800d174:	2000cacc 	.word	0x2000cacc
 800d178:	2000cabc 	.word	0x2000cabc

0800d17c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b082      	sub	sp, #8
 800d180:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d182:	4b10      	ldr	r3, [pc, #64]	@ (800d1c4 <tcp_handle_closepend+0x48>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d188:	e014      	b.n	800d1b4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	68db      	ldr	r3, [r3, #12]
 800d18e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	8b5b      	ldrh	r3, [r3, #26]
 800d194:	f003 0308 	and.w	r3, r3, #8
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d009      	beq.n	800d1b0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	8b5b      	ldrh	r3, [r3, #26]
 800d1a0:	f023 0308 	bic.w	r3, r3, #8
 800d1a4:	b29a      	uxth	r2, r3
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f7ff f862 	bl	800c274 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d1e7      	bne.n	800d18a <tcp_handle_closepend+0xe>
  }
}
 800d1ba:	bf00      	nop
 800d1bc:	bf00      	nop
 800d1be:	3708      	adds	r7, #8
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}
 800d1c4:	2000cac8 	.word	0x2000cac8

0800d1c8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b084      	sub	sp, #16
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d1d2:	2001      	movs	r0, #1
 800d1d4:	f7fd fbf2 	bl	800a9bc <memp_malloc>
 800d1d8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d126      	bne.n	800d22e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d1e0:	f7ff ffcc 	bl	800d17c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d1e4:	f7ff ff9a 	bl	800d11c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d1e8:	2001      	movs	r0, #1
 800d1ea:	f7fd fbe7 	bl	800a9bc <memp_malloc>
 800d1ee:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d11b      	bne.n	800d22e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d1f6:	2009      	movs	r0, #9
 800d1f8:	f7ff ff46 	bl	800d088 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d1fc:	2001      	movs	r0, #1
 800d1fe:	f7fd fbdd 	bl	800a9bc <memp_malloc>
 800d202:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d111      	bne.n	800d22e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d20a:	2008      	movs	r0, #8
 800d20c:	f7ff ff3c 	bl	800d088 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d210:	2001      	movs	r0, #1
 800d212:	f7fd fbd3 	bl	800a9bc <memp_malloc>
 800d216:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d107      	bne.n	800d22e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d21e:	79fb      	ldrb	r3, [r7, #7]
 800d220:	4618      	mov	r0, r3
 800d222:	f7ff fee3 	bl	800cfec <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d226:	2001      	movs	r0, #1
 800d228:	f7fd fbc8 	bl	800a9bc <memp_malloc>
 800d22c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d03f      	beq.n	800d2b4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d234:	229c      	movs	r2, #156	@ 0x9c
 800d236:	2100      	movs	r1, #0
 800d238:	68f8      	ldr	r0, [r7, #12]
 800d23a:	f009 ffb5 	bl	80171a8 <memset>
    pcb->prio = prio;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	79fa      	ldrb	r2, [r7, #7]
 800d242:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800d24a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800d254:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	22ff      	movs	r2, #255	@ 0xff
 800d262:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800d26a:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	2206      	movs	r2, #6
 800d270:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	2206      	movs	r2, #6
 800d278:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d280:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2201      	movs	r2, #1
 800d286:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800d28a:	4b0d      	ldr	r3, [pc, #52]	@ (800d2c0 <tcp_alloc+0xf8>)
 800d28c:	681a      	ldr	r2, [r3, #0]
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d292:	4b0c      	ldr	r3, [pc, #48]	@ (800d2c4 <tcp_alloc+0xfc>)
 800d294:	781a      	ldrb	r2, [r3, #0]
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800d2a0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	4a08      	ldr	r2, [pc, #32]	@ (800d2c8 <tcp_alloc+0x100>)
 800d2a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	4a07      	ldr	r2, [pc, #28]	@ (800d2cc <tcp_alloc+0x104>)
 800d2b0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	3710      	adds	r7, #16
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd80      	pop	{r7, pc}
 800d2be:	bf00      	nop
 800d2c0:	2000cabc 	.word	0x2000cabc
 800d2c4:	2000cad2 	.word	0x2000cad2
 800d2c8:	0800cf81 	.word	0x0800cf81
 800d2cc:	006ddd00 	.word	0x006ddd00

0800d2d0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b082      	sub	sp, #8
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d107      	bne.n	800d2ee <tcp_pcb_purge+0x1e>
 800d2de:	4b21      	ldr	r3, [pc, #132]	@ (800d364 <tcp_pcb_purge+0x94>)
 800d2e0:	f640 0251 	movw	r2, #2129	@ 0x851
 800d2e4:	4920      	ldr	r1, [pc, #128]	@ (800d368 <tcp_pcb_purge+0x98>)
 800d2e6:	4821      	ldr	r0, [pc, #132]	@ (800d36c <tcp_pcb_purge+0x9c>)
 800d2e8:	f009 fdcc 	bl	8016e84 <iprintf>
 800d2ec:	e037      	b.n	800d35e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	7d1b      	ldrb	r3, [r3, #20]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d033      	beq.n	800d35e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d2fa:	2b0a      	cmp	r3, #10
 800d2fc:	d02f      	beq.n	800d35e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d302:	2b01      	cmp	r3, #1
 800d304:	d02b      	beq.n	800d35e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d007      	beq.n	800d31e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d312:	4618      	mov	r0, r3
 800d314:	f7fe fb5e 	bl	800b9d4 <pbuf_free>
      pcb->refused_data = NULL;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2200      	movs	r2, #0
 800d31c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d322:	2b00      	cmp	r3, #0
 800d324:	d002      	beq.n	800d32c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	f000 f986 	bl	800d638 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d332:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d338:	4618      	mov	r0, r3
 800d33a:	f7ff fdc7 	bl	800cecc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d342:	4618      	mov	r0, r3
 800d344:	f7ff fdc2 	bl	800cecc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2200      	movs	r2, #0
 800d34c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2200      	movs	r2, #0
 800d35a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d35e:	3708      	adds	r7, #8
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}
 800d364:	08018f20 	.word	0x08018f20
 800d368:	0801956c 	.word	0x0801956c
 800d36c:	08018f64 	.word	0x08018f64

0800d370 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b084      	sub	sp, #16
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
 800d378:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d106      	bne.n	800d38e <tcp_pcb_remove+0x1e>
 800d380:	4b3e      	ldr	r3, [pc, #248]	@ (800d47c <tcp_pcb_remove+0x10c>)
 800d382:	f640 0283 	movw	r2, #2179	@ 0x883
 800d386:	493e      	ldr	r1, [pc, #248]	@ (800d480 <tcp_pcb_remove+0x110>)
 800d388:	483e      	ldr	r0, [pc, #248]	@ (800d484 <tcp_pcb_remove+0x114>)
 800d38a:	f009 fd7b 	bl	8016e84 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d106      	bne.n	800d3a2 <tcp_pcb_remove+0x32>
 800d394:	4b39      	ldr	r3, [pc, #228]	@ (800d47c <tcp_pcb_remove+0x10c>)
 800d396:	f640 0284 	movw	r2, #2180	@ 0x884
 800d39a:	493b      	ldr	r1, [pc, #236]	@ (800d488 <tcp_pcb_remove+0x118>)
 800d39c:	4839      	ldr	r0, [pc, #228]	@ (800d484 <tcp_pcb_remove+0x114>)
 800d39e:	f009 fd71 	bl	8016e84 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	683a      	ldr	r2, [r7, #0]
 800d3a8:	429a      	cmp	r2, r3
 800d3aa:	d105      	bne.n	800d3b8 <tcp_pcb_remove+0x48>
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	68da      	ldr	r2, [r3, #12]
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	601a      	str	r2, [r3, #0]
 800d3b6:	e013      	b.n	800d3e0 <tcp_pcb_remove+0x70>
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	60fb      	str	r3, [r7, #12]
 800d3be:	e00c      	b.n	800d3da <tcp_pcb_remove+0x6a>
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	68db      	ldr	r3, [r3, #12]
 800d3c4:	683a      	ldr	r2, [r7, #0]
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d104      	bne.n	800d3d4 <tcp_pcb_remove+0x64>
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	68da      	ldr	r2, [r3, #12]
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	60da      	str	r2, [r3, #12]
 800d3d2:	e005      	b.n	800d3e0 <tcp_pcb_remove+0x70>
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	68db      	ldr	r3, [r3, #12]
 800d3d8:	60fb      	str	r3, [r7, #12]
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d1ef      	bne.n	800d3c0 <tcp_pcb_remove+0x50>
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d3e6:	6838      	ldr	r0, [r7, #0]
 800d3e8:	f7ff ff72 	bl	800d2d0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	7d1b      	ldrb	r3, [r3, #20]
 800d3f0:	2b0a      	cmp	r3, #10
 800d3f2:	d013      	beq.n	800d41c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d3f8:	2b01      	cmp	r3, #1
 800d3fa:	d00f      	beq.n	800d41c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	8b5b      	ldrh	r3, [r3, #26]
 800d400:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d404:	2b00      	cmp	r3, #0
 800d406:	d009      	beq.n	800d41c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	8b5b      	ldrh	r3, [r3, #26]
 800d40c:	f043 0302 	orr.w	r3, r3, #2
 800d410:	b29a      	uxth	r2, r3
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d416:	6838      	ldr	r0, [r7, #0]
 800d418:	f002 ff68 	bl	80102ec <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	7d1b      	ldrb	r3, [r3, #20]
 800d420:	2b01      	cmp	r3, #1
 800d422:	d020      	beq.n	800d466 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d006      	beq.n	800d43a <tcp_pcb_remove+0xca>
 800d42c:	4b13      	ldr	r3, [pc, #76]	@ (800d47c <tcp_pcb_remove+0x10c>)
 800d42e:	f640 0293 	movw	r2, #2195	@ 0x893
 800d432:	4916      	ldr	r1, [pc, #88]	@ (800d48c <tcp_pcb_remove+0x11c>)
 800d434:	4813      	ldr	r0, [pc, #76]	@ (800d484 <tcp_pcb_remove+0x114>)
 800d436:	f009 fd25 	bl	8016e84 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d006      	beq.n	800d450 <tcp_pcb_remove+0xe0>
 800d442:	4b0e      	ldr	r3, [pc, #56]	@ (800d47c <tcp_pcb_remove+0x10c>)
 800d444:	f640 0294 	movw	r2, #2196	@ 0x894
 800d448:	4911      	ldr	r1, [pc, #68]	@ (800d490 <tcp_pcb_remove+0x120>)
 800d44a:	480e      	ldr	r0, [pc, #56]	@ (800d484 <tcp_pcb_remove+0x114>)
 800d44c:	f009 fd1a 	bl	8016e84 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d454:	2b00      	cmp	r3, #0
 800d456:	d006      	beq.n	800d466 <tcp_pcb_remove+0xf6>
 800d458:	4b08      	ldr	r3, [pc, #32]	@ (800d47c <tcp_pcb_remove+0x10c>)
 800d45a:	f640 0296 	movw	r2, #2198	@ 0x896
 800d45e:	490d      	ldr	r1, [pc, #52]	@ (800d494 <tcp_pcb_remove+0x124>)
 800d460:	4808      	ldr	r0, [pc, #32]	@ (800d484 <tcp_pcb_remove+0x114>)
 800d462:	f009 fd0f 	bl	8016e84 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	2200      	movs	r2, #0
 800d46a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	2200      	movs	r2, #0
 800d470:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d472:	bf00      	nop
 800d474:	3710      	adds	r7, #16
 800d476:	46bd      	mov	sp, r7
 800d478:	bd80      	pop	{r7, pc}
 800d47a:	bf00      	nop
 800d47c:	08018f20 	.word	0x08018f20
 800d480:	08019588 	.word	0x08019588
 800d484:	08018f64 	.word	0x08018f64
 800d488:	080195a4 	.word	0x080195a4
 800d48c:	080195c4 	.word	0x080195c4
 800d490:	080195dc 	.word	0x080195dc
 800d494:	080195f8 	.word	0x080195f8

0800d498 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b082      	sub	sp, #8
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d106      	bne.n	800d4b4 <tcp_next_iss+0x1c>
 800d4a6:	4b0a      	ldr	r3, [pc, #40]	@ (800d4d0 <tcp_next_iss+0x38>)
 800d4a8:	f640 02af 	movw	r2, #2223	@ 0x8af
 800d4ac:	4909      	ldr	r1, [pc, #36]	@ (800d4d4 <tcp_next_iss+0x3c>)
 800d4ae:	480a      	ldr	r0, [pc, #40]	@ (800d4d8 <tcp_next_iss+0x40>)
 800d4b0:	f009 fce8 	bl	8016e84 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d4b4:	4b09      	ldr	r3, [pc, #36]	@ (800d4dc <tcp_next_iss+0x44>)
 800d4b6:	681a      	ldr	r2, [r3, #0]
 800d4b8:	4b09      	ldr	r3, [pc, #36]	@ (800d4e0 <tcp_next_iss+0x48>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	4413      	add	r3, r2
 800d4be:	4a07      	ldr	r2, [pc, #28]	@ (800d4dc <tcp_next_iss+0x44>)
 800d4c0:	6013      	str	r3, [r2, #0]
  return iss;
 800d4c2:	4b06      	ldr	r3, [pc, #24]	@ (800d4dc <tcp_next_iss+0x44>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3708      	adds	r7, #8
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}
 800d4ce:	bf00      	nop
 800d4d0:	08018f20 	.word	0x08018f20
 800d4d4:	08019610 	.word	0x08019610
 800d4d8:	08018f64 	.word	0x08018f64
 800d4dc:	2000002c 	.word	0x2000002c
 800d4e0:	2000cabc 	.word	0x2000cabc

0800d4e4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b086      	sub	sp, #24
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	60b9      	str	r1, [r7, #8]
 800d4ee:	607a      	str	r2, [r7, #4]
 800d4f0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d106      	bne.n	800d506 <tcp_eff_send_mss_netif+0x22>
 800d4f8:	4b14      	ldr	r3, [pc, #80]	@ (800d54c <tcp_eff_send_mss_netif+0x68>)
 800d4fa:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800d4fe:	4914      	ldr	r1, [pc, #80]	@ (800d550 <tcp_eff_send_mss_netif+0x6c>)
 800d500:	4814      	ldr	r0, [pc, #80]	@ (800d554 <tcp_eff_send_mss_netif+0x70>)
 800d502:	f009 fcbf 	bl	8016e84 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d506:	68bb      	ldr	r3, [r7, #8]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d101      	bne.n	800d510 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d50c:	89fb      	ldrh	r3, [r7, #14]
 800d50e:	e019      	b.n	800d544 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800d514:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d516:	8afb      	ldrh	r3, [r7, #22]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d012      	beq.n	800d542 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d51c:	2328      	movs	r3, #40	@ 0x28
 800d51e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d520:	8afa      	ldrh	r2, [r7, #22]
 800d522:	8abb      	ldrh	r3, [r7, #20]
 800d524:	429a      	cmp	r2, r3
 800d526:	d904      	bls.n	800d532 <tcp_eff_send_mss_netif+0x4e>
 800d528:	8afa      	ldrh	r2, [r7, #22]
 800d52a:	8abb      	ldrh	r3, [r7, #20]
 800d52c:	1ad3      	subs	r3, r2, r3
 800d52e:	b29b      	uxth	r3, r3
 800d530:	e000      	b.n	800d534 <tcp_eff_send_mss_netif+0x50>
 800d532:	2300      	movs	r3, #0
 800d534:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d536:	8a7a      	ldrh	r2, [r7, #18]
 800d538:	89fb      	ldrh	r3, [r7, #14]
 800d53a:	4293      	cmp	r3, r2
 800d53c:	bf28      	it	cs
 800d53e:	4613      	movcs	r3, r2
 800d540:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d542:	89fb      	ldrh	r3, [r7, #14]
}
 800d544:	4618      	mov	r0, r3
 800d546:	3718      	adds	r7, #24
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}
 800d54c:	08018f20 	.word	0x08018f20
 800d550:	0801962c 	.word	0x0801962c
 800d554:	08018f64 	.word	0x08018f64

0800d558 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b084      	sub	sp, #16
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
 800d560:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d119      	bne.n	800d5a0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d56c:	4b10      	ldr	r3, [pc, #64]	@ (800d5b0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d56e:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800d572:	4910      	ldr	r1, [pc, #64]	@ (800d5b4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d574:	4810      	ldr	r0, [pc, #64]	@ (800d5b8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d576:	f009 fc85 	bl	8016e84 <iprintf>

  while (pcb != NULL) {
 800d57a:	e011      	b.n	800d5a0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	681a      	ldr	r2, [r3, #0]
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	429a      	cmp	r2, r3
 800d586:	d108      	bne.n	800d59a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	68db      	ldr	r3, [r3, #12]
 800d58c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d58e:	68f8      	ldr	r0, [r7, #12]
 800d590:	f7fe ffc4 	bl	800c51c <tcp_abort>
      pcb = next;
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	60fb      	str	r3, [r7, #12]
 800d598:	e002      	b.n	800d5a0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	68db      	ldr	r3, [r3, #12]
 800d59e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d1ea      	bne.n	800d57c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d5a6:	bf00      	nop
 800d5a8:	bf00      	nop
 800d5aa:	3710      	adds	r7, #16
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}
 800d5b0:	08018f20 	.word	0x08018f20
 800d5b4:	08019654 	.word	0x08019654
 800d5b8:	08018f64 	.word	0x08018f64

0800d5bc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b084      	sub	sp, #16
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
 800d5c4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d02a      	beq.n	800d622 <tcp_netif_ip_addr_changed+0x66>
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d026      	beq.n	800d622 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d5d4:	4b15      	ldr	r3, [pc, #84]	@ (800d62c <tcp_netif_ip_addr_changed+0x70>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	4619      	mov	r1, r3
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	f7ff ffbc 	bl	800d558 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d5e0:	4b13      	ldr	r3, [pc, #76]	@ (800d630 <tcp_netif_ip_addr_changed+0x74>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	4619      	mov	r1, r3
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	f7ff ffb6 	bl	800d558 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d017      	beq.n	800d622 <tcp_netif_ip_addr_changed+0x66>
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d013      	beq.n	800d622 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d5fa:	4b0e      	ldr	r3, [pc, #56]	@ (800d634 <tcp_netif_ip_addr_changed+0x78>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	60fb      	str	r3, [r7, #12]
 800d600:	e00c      	b.n	800d61c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	681a      	ldr	r2, [r3, #0]
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	429a      	cmp	r2, r3
 800d60c:	d103      	bne.n	800d616 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	681a      	ldr	r2, [r3, #0]
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	68db      	ldr	r3, [r3, #12]
 800d61a:	60fb      	str	r3, [r7, #12]
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d1ef      	bne.n	800d602 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d622:	bf00      	nop
 800d624:	3710      	adds	r7, #16
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}
 800d62a:	bf00      	nop
 800d62c:	2000cac8 	.word	0x2000cac8
 800d630:	2000cac0 	.word	0x2000cac0
 800d634:	2000cac4 	.word	0x2000cac4

0800d638 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b082      	sub	sp, #8
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d644:	2b00      	cmp	r3, #0
 800d646:	d007      	beq.n	800d658 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d64c:	4618      	mov	r0, r3
 800d64e:	f7ff fc3d 	bl	800cecc <tcp_segs_free>
    pcb->ooseq = NULL;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2200      	movs	r2, #0
 800d656:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d658:	bf00      	nop
 800d65a:	3708      	adds	r7, #8
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}

0800d660 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d660:	b590      	push	{r4, r7, lr}
 800d662:	b08d      	sub	sp, #52	@ 0x34
 800d664:	af04      	add	r7, sp, #16
 800d666:	6078      	str	r0, [r7, #4]
 800d668:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d105      	bne.n	800d67c <tcp_input+0x1c>
 800d670:	4b9b      	ldr	r3, [pc, #620]	@ (800d8e0 <tcp_input+0x280>)
 800d672:	2283      	movs	r2, #131	@ 0x83
 800d674:	499b      	ldr	r1, [pc, #620]	@ (800d8e4 <tcp_input+0x284>)
 800d676:	489c      	ldr	r0, [pc, #624]	@ (800d8e8 <tcp_input+0x288>)
 800d678:	f009 fc04 	bl	8016e84 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	685b      	ldr	r3, [r3, #4]
 800d680:	4a9a      	ldr	r2, [pc, #616]	@ (800d8ec <tcp_input+0x28c>)
 800d682:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	895b      	ldrh	r3, [r3, #10]
 800d688:	2b13      	cmp	r3, #19
 800d68a:	f240 83d1 	bls.w	800de30 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d68e:	4b98      	ldr	r3, [pc, #608]	@ (800d8f0 <tcp_input+0x290>)
 800d690:	695b      	ldr	r3, [r3, #20]
 800d692:	4a97      	ldr	r2, [pc, #604]	@ (800d8f0 <tcp_input+0x290>)
 800d694:	6812      	ldr	r2, [r2, #0]
 800d696:	4611      	mov	r1, r2
 800d698:	4618      	mov	r0, r3
 800d69a:	f008 f9f7 	bl	8015a8c <ip4_addr_isbroadcast_u32>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	f040 83c7 	bne.w	800de34 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d6a6:	4b92      	ldr	r3, [pc, #584]	@ (800d8f0 <tcp_input+0x290>)
 800d6a8:	695b      	ldr	r3, [r3, #20]
 800d6aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d6ae:	2be0      	cmp	r3, #224	@ 0xe0
 800d6b0:	f000 83c0 	beq.w	800de34 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d6b4:	4b8d      	ldr	r3, [pc, #564]	@ (800d8ec <tcp_input+0x28c>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	899b      	ldrh	r3, [r3, #12]
 800d6ba:	b29b      	uxth	r3, r3
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f7fc fc35 	bl	8009f2c <lwip_htons>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	0b1b      	lsrs	r3, r3, #12
 800d6c6:	b29b      	uxth	r3, r3
 800d6c8:	b2db      	uxtb	r3, r3
 800d6ca:	009b      	lsls	r3, r3, #2
 800d6cc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d6ce:	7cbb      	ldrb	r3, [r7, #18]
 800d6d0:	2b13      	cmp	r3, #19
 800d6d2:	f240 83b1 	bls.w	800de38 <tcp_input+0x7d8>
 800d6d6:	7cbb      	ldrb	r3, [r7, #18]
 800d6d8:	b29a      	uxth	r2, r3
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	891b      	ldrh	r3, [r3, #8]
 800d6de:	429a      	cmp	r2, r3
 800d6e0:	f200 83aa 	bhi.w	800de38 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d6e4:	7cbb      	ldrb	r3, [r7, #18]
 800d6e6:	b29b      	uxth	r3, r3
 800d6e8:	3b14      	subs	r3, #20
 800d6ea:	b29a      	uxth	r2, r3
 800d6ec:	4b81      	ldr	r3, [pc, #516]	@ (800d8f4 <tcp_input+0x294>)
 800d6ee:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d6f0:	4b81      	ldr	r3, [pc, #516]	@ (800d8f8 <tcp_input+0x298>)
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	895a      	ldrh	r2, [r3, #10]
 800d6fa:	7cbb      	ldrb	r3, [r7, #18]
 800d6fc:	b29b      	uxth	r3, r3
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d309      	bcc.n	800d716 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d702:	4b7c      	ldr	r3, [pc, #496]	@ (800d8f4 <tcp_input+0x294>)
 800d704:	881a      	ldrh	r2, [r3, #0]
 800d706:	4b7d      	ldr	r3, [pc, #500]	@ (800d8fc <tcp_input+0x29c>)
 800d708:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d70a:	7cbb      	ldrb	r3, [r7, #18]
 800d70c:	4619      	mov	r1, r3
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f7fe f8da 	bl	800b8c8 <pbuf_remove_header>
 800d714:	e04e      	b.n	800d7b4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d105      	bne.n	800d72a <tcp_input+0xca>
 800d71e:	4b70      	ldr	r3, [pc, #448]	@ (800d8e0 <tcp_input+0x280>)
 800d720:	22c2      	movs	r2, #194	@ 0xc2
 800d722:	4977      	ldr	r1, [pc, #476]	@ (800d900 <tcp_input+0x2a0>)
 800d724:	4870      	ldr	r0, [pc, #448]	@ (800d8e8 <tcp_input+0x288>)
 800d726:	f009 fbad 	bl	8016e84 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d72a:	2114      	movs	r1, #20
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f7fe f8cb 	bl	800b8c8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	895a      	ldrh	r2, [r3, #10]
 800d736:	4b71      	ldr	r3, [pc, #452]	@ (800d8fc <tcp_input+0x29c>)
 800d738:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d73a:	4b6e      	ldr	r3, [pc, #440]	@ (800d8f4 <tcp_input+0x294>)
 800d73c:	881a      	ldrh	r2, [r3, #0]
 800d73e:	4b6f      	ldr	r3, [pc, #444]	@ (800d8fc <tcp_input+0x29c>)
 800d740:	881b      	ldrh	r3, [r3, #0]
 800d742:	1ad3      	subs	r3, r2, r3
 800d744:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d746:	4b6d      	ldr	r3, [pc, #436]	@ (800d8fc <tcp_input+0x29c>)
 800d748:	881b      	ldrh	r3, [r3, #0]
 800d74a:	4619      	mov	r1, r3
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	f7fe f8bb 	bl	800b8c8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	895b      	ldrh	r3, [r3, #10]
 800d758:	8a3a      	ldrh	r2, [r7, #16]
 800d75a:	429a      	cmp	r2, r3
 800d75c:	f200 836e 	bhi.w	800de3c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	685b      	ldr	r3, [r3, #4]
 800d766:	4a64      	ldr	r2, [pc, #400]	@ (800d8f8 <tcp_input+0x298>)
 800d768:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	8a3a      	ldrh	r2, [r7, #16]
 800d770:	4611      	mov	r1, r2
 800d772:	4618      	mov	r0, r3
 800d774:	f7fe f8a8 	bl	800b8c8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	891a      	ldrh	r2, [r3, #8]
 800d77c:	8a3b      	ldrh	r3, [r7, #16]
 800d77e:	1ad3      	subs	r3, r2, r3
 800d780:	b29a      	uxth	r2, r3
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	895b      	ldrh	r3, [r3, #10]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d005      	beq.n	800d79a <tcp_input+0x13a>
 800d78e:	4b54      	ldr	r3, [pc, #336]	@ (800d8e0 <tcp_input+0x280>)
 800d790:	22df      	movs	r2, #223	@ 0xdf
 800d792:	495c      	ldr	r1, [pc, #368]	@ (800d904 <tcp_input+0x2a4>)
 800d794:	4854      	ldr	r0, [pc, #336]	@ (800d8e8 <tcp_input+0x288>)
 800d796:	f009 fb75 	bl	8016e84 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	891a      	ldrh	r2, [r3, #8]
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	891b      	ldrh	r3, [r3, #8]
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d005      	beq.n	800d7b4 <tcp_input+0x154>
 800d7a8:	4b4d      	ldr	r3, [pc, #308]	@ (800d8e0 <tcp_input+0x280>)
 800d7aa:	22e0      	movs	r2, #224	@ 0xe0
 800d7ac:	4956      	ldr	r1, [pc, #344]	@ (800d908 <tcp_input+0x2a8>)
 800d7ae:	484e      	ldr	r0, [pc, #312]	@ (800d8e8 <tcp_input+0x288>)
 800d7b0:	f009 fb68 	bl	8016e84 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d7b4:	4b4d      	ldr	r3, [pc, #308]	@ (800d8ec <tcp_input+0x28c>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	881b      	ldrh	r3, [r3, #0]
 800d7ba:	b29b      	uxth	r3, r3
 800d7bc:	4a4b      	ldr	r2, [pc, #300]	@ (800d8ec <tcp_input+0x28c>)
 800d7be:	6814      	ldr	r4, [r2, #0]
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f7fc fbb3 	bl	8009f2c <lwip_htons>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d7ca:	4b48      	ldr	r3, [pc, #288]	@ (800d8ec <tcp_input+0x28c>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	885b      	ldrh	r3, [r3, #2]
 800d7d0:	b29b      	uxth	r3, r3
 800d7d2:	4a46      	ldr	r2, [pc, #280]	@ (800d8ec <tcp_input+0x28c>)
 800d7d4:	6814      	ldr	r4, [r2, #0]
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f7fc fba8 	bl	8009f2c <lwip_htons>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d7e0:	4b42      	ldr	r3, [pc, #264]	@ (800d8ec <tcp_input+0x28c>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	685b      	ldr	r3, [r3, #4]
 800d7e6:	4a41      	ldr	r2, [pc, #260]	@ (800d8ec <tcp_input+0x28c>)
 800d7e8:	6814      	ldr	r4, [r2, #0]
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f7fc fbb3 	bl	8009f56 <lwip_htonl>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	6063      	str	r3, [r4, #4]
 800d7f4:	6863      	ldr	r3, [r4, #4]
 800d7f6:	4a45      	ldr	r2, [pc, #276]	@ (800d90c <tcp_input+0x2ac>)
 800d7f8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d7fa:	4b3c      	ldr	r3, [pc, #240]	@ (800d8ec <tcp_input+0x28c>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	689b      	ldr	r3, [r3, #8]
 800d800:	4a3a      	ldr	r2, [pc, #232]	@ (800d8ec <tcp_input+0x28c>)
 800d802:	6814      	ldr	r4, [r2, #0]
 800d804:	4618      	mov	r0, r3
 800d806:	f7fc fba6 	bl	8009f56 <lwip_htonl>
 800d80a:	4603      	mov	r3, r0
 800d80c:	60a3      	str	r3, [r4, #8]
 800d80e:	68a3      	ldr	r3, [r4, #8]
 800d810:	4a3f      	ldr	r2, [pc, #252]	@ (800d910 <tcp_input+0x2b0>)
 800d812:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d814:	4b35      	ldr	r3, [pc, #212]	@ (800d8ec <tcp_input+0x28c>)
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	89db      	ldrh	r3, [r3, #14]
 800d81a:	b29b      	uxth	r3, r3
 800d81c:	4a33      	ldr	r2, [pc, #204]	@ (800d8ec <tcp_input+0x28c>)
 800d81e:	6814      	ldr	r4, [r2, #0]
 800d820:	4618      	mov	r0, r3
 800d822:	f7fc fb83 	bl	8009f2c <lwip_htons>
 800d826:	4603      	mov	r3, r0
 800d828:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d82a:	4b30      	ldr	r3, [pc, #192]	@ (800d8ec <tcp_input+0x28c>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	899b      	ldrh	r3, [r3, #12]
 800d830:	b29b      	uxth	r3, r3
 800d832:	4618      	mov	r0, r3
 800d834:	f7fc fb7a 	bl	8009f2c <lwip_htons>
 800d838:	4603      	mov	r3, r0
 800d83a:	b2db      	uxtb	r3, r3
 800d83c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d840:	b2da      	uxtb	r2, r3
 800d842:	4b34      	ldr	r3, [pc, #208]	@ (800d914 <tcp_input+0x2b4>)
 800d844:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	891a      	ldrh	r2, [r3, #8]
 800d84a:	4b33      	ldr	r3, [pc, #204]	@ (800d918 <tcp_input+0x2b8>)
 800d84c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d84e:	4b31      	ldr	r3, [pc, #196]	@ (800d914 <tcp_input+0x2b4>)
 800d850:	781b      	ldrb	r3, [r3, #0]
 800d852:	f003 0303 	and.w	r3, r3, #3
 800d856:	2b00      	cmp	r3, #0
 800d858:	d00c      	beq.n	800d874 <tcp_input+0x214>
    tcplen++;
 800d85a:	4b2f      	ldr	r3, [pc, #188]	@ (800d918 <tcp_input+0x2b8>)
 800d85c:	881b      	ldrh	r3, [r3, #0]
 800d85e:	3301      	adds	r3, #1
 800d860:	b29a      	uxth	r2, r3
 800d862:	4b2d      	ldr	r3, [pc, #180]	@ (800d918 <tcp_input+0x2b8>)
 800d864:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	891a      	ldrh	r2, [r3, #8]
 800d86a:	4b2b      	ldr	r3, [pc, #172]	@ (800d918 <tcp_input+0x2b8>)
 800d86c:	881b      	ldrh	r3, [r3, #0]
 800d86e:	429a      	cmp	r2, r3
 800d870:	f200 82e6 	bhi.w	800de40 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d874:	2300      	movs	r3, #0
 800d876:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d878:	4b28      	ldr	r3, [pc, #160]	@ (800d91c <tcp_input+0x2bc>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	61fb      	str	r3, [r7, #28]
 800d87e:	e09d      	b.n	800d9bc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d880:	69fb      	ldr	r3, [r7, #28]
 800d882:	7d1b      	ldrb	r3, [r3, #20]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d105      	bne.n	800d894 <tcp_input+0x234>
 800d888:	4b15      	ldr	r3, [pc, #84]	@ (800d8e0 <tcp_input+0x280>)
 800d88a:	22fb      	movs	r2, #251	@ 0xfb
 800d88c:	4924      	ldr	r1, [pc, #144]	@ (800d920 <tcp_input+0x2c0>)
 800d88e:	4816      	ldr	r0, [pc, #88]	@ (800d8e8 <tcp_input+0x288>)
 800d890:	f009 faf8 	bl	8016e84 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d894:	69fb      	ldr	r3, [r7, #28]
 800d896:	7d1b      	ldrb	r3, [r3, #20]
 800d898:	2b0a      	cmp	r3, #10
 800d89a:	d105      	bne.n	800d8a8 <tcp_input+0x248>
 800d89c:	4b10      	ldr	r3, [pc, #64]	@ (800d8e0 <tcp_input+0x280>)
 800d89e:	22fc      	movs	r2, #252	@ 0xfc
 800d8a0:	4920      	ldr	r1, [pc, #128]	@ (800d924 <tcp_input+0x2c4>)
 800d8a2:	4811      	ldr	r0, [pc, #68]	@ (800d8e8 <tcp_input+0x288>)
 800d8a4:	f009 faee 	bl	8016e84 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d8a8:	69fb      	ldr	r3, [r7, #28]
 800d8aa:	7d1b      	ldrb	r3, [r3, #20]
 800d8ac:	2b01      	cmp	r3, #1
 800d8ae:	d105      	bne.n	800d8bc <tcp_input+0x25c>
 800d8b0:	4b0b      	ldr	r3, [pc, #44]	@ (800d8e0 <tcp_input+0x280>)
 800d8b2:	22fd      	movs	r2, #253	@ 0xfd
 800d8b4:	491c      	ldr	r1, [pc, #112]	@ (800d928 <tcp_input+0x2c8>)
 800d8b6:	480c      	ldr	r0, [pc, #48]	@ (800d8e8 <tcp_input+0x288>)
 800d8b8:	f009 fae4 	bl	8016e84 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d8bc:	69fb      	ldr	r3, [r7, #28]
 800d8be:	7a1b      	ldrb	r3, [r3, #8]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d033      	beq.n	800d92c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d8c4:	69fb      	ldr	r3, [r7, #28]
 800d8c6:	7a1a      	ldrb	r2, [r3, #8]
 800d8c8:	4b09      	ldr	r3, [pc, #36]	@ (800d8f0 <tcp_input+0x290>)
 800d8ca:	685b      	ldr	r3, [r3, #4]
 800d8cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d8d0:	3301      	adds	r3, #1
 800d8d2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d8d4:	429a      	cmp	r2, r3
 800d8d6:	d029      	beq.n	800d92c <tcp_input+0x2cc>
      prev = pcb;
 800d8d8:	69fb      	ldr	r3, [r7, #28]
 800d8da:	61bb      	str	r3, [r7, #24]
      continue;
 800d8dc:	e06b      	b.n	800d9b6 <tcp_input+0x356>
 800d8de:	bf00      	nop
 800d8e0:	08019688 	.word	0x08019688
 800d8e4:	080196bc 	.word	0x080196bc
 800d8e8:	080196d4 	.word	0x080196d4
 800d8ec:	2000cae4 	.word	0x2000cae4
 800d8f0:	2000928c 	.word	0x2000928c
 800d8f4:	2000cae8 	.word	0x2000cae8
 800d8f8:	2000caec 	.word	0x2000caec
 800d8fc:	2000caea 	.word	0x2000caea
 800d900:	080196fc 	.word	0x080196fc
 800d904:	0801970c 	.word	0x0801970c
 800d908:	08019718 	.word	0x08019718
 800d90c:	2000caf4 	.word	0x2000caf4
 800d910:	2000caf8 	.word	0x2000caf8
 800d914:	2000cb00 	.word	0x2000cb00
 800d918:	2000cafe 	.word	0x2000cafe
 800d91c:	2000cac8 	.word	0x2000cac8
 800d920:	08019738 	.word	0x08019738
 800d924:	08019760 	.word	0x08019760
 800d928:	0801978c 	.word	0x0801978c
    }

    if (pcb->remote_port == tcphdr->src &&
 800d92c:	69fb      	ldr	r3, [r7, #28]
 800d92e:	8b1a      	ldrh	r2, [r3, #24]
 800d930:	4b72      	ldr	r3, [pc, #456]	@ (800dafc <tcp_input+0x49c>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	881b      	ldrh	r3, [r3, #0]
 800d936:	b29b      	uxth	r3, r3
 800d938:	429a      	cmp	r2, r3
 800d93a:	d13a      	bne.n	800d9b2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800d93c:	69fb      	ldr	r3, [r7, #28]
 800d93e:	8ada      	ldrh	r2, [r3, #22]
 800d940:	4b6e      	ldr	r3, [pc, #440]	@ (800dafc <tcp_input+0x49c>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	885b      	ldrh	r3, [r3, #2]
 800d946:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d948:	429a      	cmp	r2, r3
 800d94a:	d132      	bne.n	800d9b2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d94c:	69fb      	ldr	r3, [r7, #28]
 800d94e:	685a      	ldr	r2, [r3, #4]
 800d950:	4b6b      	ldr	r3, [pc, #428]	@ (800db00 <tcp_input+0x4a0>)
 800d952:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d954:	429a      	cmp	r2, r3
 800d956:	d12c      	bne.n	800d9b2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d958:	69fb      	ldr	r3, [r7, #28]
 800d95a:	681a      	ldr	r2, [r3, #0]
 800d95c:	4b68      	ldr	r3, [pc, #416]	@ (800db00 <tcp_input+0x4a0>)
 800d95e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d960:	429a      	cmp	r2, r3
 800d962:	d126      	bne.n	800d9b2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d964:	69fb      	ldr	r3, [r7, #28]
 800d966:	68db      	ldr	r3, [r3, #12]
 800d968:	69fa      	ldr	r2, [r7, #28]
 800d96a:	429a      	cmp	r2, r3
 800d96c:	d106      	bne.n	800d97c <tcp_input+0x31c>
 800d96e:	4b65      	ldr	r3, [pc, #404]	@ (800db04 <tcp_input+0x4a4>)
 800d970:	f240 120d 	movw	r2, #269	@ 0x10d
 800d974:	4964      	ldr	r1, [pc, #400]	@ (800db08 <tcp_input+0x4a8>)
 800d976:	4865      	ldr	r0, [pc, #404]	@ (800db0c <tcp_input+0x4ac>)
 800d978:	f009 fa84 	bl	8016e84 <iprintf>
      if (prev != NULL) {
 800d97c:	69bb      	ldr	r3, [r7, #24]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d00a      	beq.n	800d998 <tcp_input+0x338>
        prev->next = pcb->next;
 800d982:	69fb      	ldr	r3, [r7, #28]
 800d984:	68da      	ldr	r2, [r3, #12]
 800d986:	69bb      	ldr	r3, [r7, #24]
 800d988:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800d98a:	4b61      	ldr	r3, [pc, #388]	@ (800db10 <tcp_input+0x4b0>)
 800d98c:	681a      	ldr	r2, [r3, #0]
 800d98e:	69fb      	ldr	r3, [r7, #28]
 800d990:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800d992:	4a5f      	ldr	r2, [pc, #380]	@ (800db10 <tcp_input+0x4b0>)
 800d994:	69fb      	ldr	r3, [r7, #28]
 800d996:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d998:	69fb      	ldr	r3, [r7, #28]
 800d99a:	68db      	ldr	r3, [r3, #12]
 800d99c:	69fa      	ldr	r2, [r7, #28]
 800d99e:	429a      	cmp	r2, r3
 800d9a0:	d111      	bne.n	800d9c6 <tcp_input+0x366>
 800d9a2:	4b58      	ldr	r3, [pc, #352]	@ (800db04 <tcp_input+0x4a4>)
 800d9a4:	f240 1215 	movw	r2, #277	@ 0x115
 800d9a8:	495a      	ldr	r1, [pc, #360]	@ (800db14 <tcp_input+0x4b4>)
 800d9aa:	4858      	ldr	r0, [pc, #352]	@ (800db0c <tcp_input+0x4ac>)
 800d9ac:	f009 fa6a 	bl	8016e84 <iprintf>
      break;
 800d9b0:	e009      	b.n	800d9c6 <tcp_input+0x366>
    }
    prev = pcb;
 800d9b2:	69fb      	ldr	r3, [r7, #28]
 800d9b4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9b6:	69fb      	ldr	r3, [r7, #28]
 800d9b8:	68db      	ldr	r3, [r3, #12]
 800d9ba:	61fb      	str	r3, [r7, #28]
 800d9bc:	69fb      	ldr	r3, [r7, #28]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	f47f af5e 	bne.w	800d880 <tcp_input+0x220>
 800d9c4:	e000      	b.n	800d9c8 <tcp_input+0x368>
      break;
 800d9c6:	bf00      	nop
  }

  if (pcb == NULL) {
 800d9c8:	69fb      	ldr	r3, [r7, #28]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	f040 80aa 	bne.w	800db24 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9d0:	4b51      	ldr	r3, [pc, #324]	@ (800db18 <tcp_input+0x4b8>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	61fb      	str	r3, [r7, #28]
 800d9d6:	e03f      	b.n	800da58 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d9d8:	69fb      	ldr	r3, [r7, #28]
 800d9da:	7d1b      	ldrb	r3, [r3, #20]
 800d9dc:	2b0a      	cmp	r3, #10
 800d9de:	d006      	beq.n	800d9ee <tcp_input+0x38e>
 800d9e0:	4b48      	ldr	r3, [pc, #288]	@ (800db04 <tcp_input+0x4a4>)
 800d9e2:	f240 121f 	movw	r2, #287	@ 0x11f
 800d9e6:	494d      	ldr	r1, [pc, #308]	@ (800db1c <tcp_input+0x4bc>)
 800d9e8:	4848      	ldr	r0, [pc, #288]	@ (800db0c <tcp_input+0x4ac>)
 800d9ea:	f009 fa4b 	bl	8016e84 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d9ee:	69fb      	ldr	r3, [r7, #28]
 800d9f0:	7a1b      	ldrb	r3, [r3, #8]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d009      	beq.n	800da0a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d9f6:	69fb      	ldr	r3, [r7, #28]
 800d9f8:	7a1a      	ldrb	r2, [r3, #8]
 800d9fa:	4b41      	ldr	r3, [pc, #260]	@ (800db00 <tcp_input+0x4a0>)
 800d9fc:	685b      	ldr	r3, [r3, #4]
 800d9fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800da02:	3301      	adds	r3, #1
 800da04:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800da06:	429a      	cmp	r2, r3
 800da08:	d122      	bne.n	800da50 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800da0a:	69fb      	ldr	r3, [r7, #28]
 800da0c:	8b1a      	ldrh	r2, [r3, #24]
 800da0e:	4b3b      	ldr	r3, [pc, #236]	@ (800dafc <tcp_input+0x49c>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	881b      	ldrh	r3, [r3, #0]
 800da14:	b29b      	uxth	r3, r3
 800da16:	429a      	cmp	r2, r3
 800da18:	d11b      	bne.n	800da52 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800da1a:	69fb      	ldr	r3, [r7, #28]
 800da1c:	8ada      	ldrh	r2, [r3, #22]
 800da1e:	4b37      	ldr	r3, [pc, #220]	@ (800dafc <tcp_input+0x49c>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	885b      	ldrh	r3, [r3, #2]
 800da24:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800da26:	429a      	cmp	r2, r3
 800da28:	d113      	bne.n	800da52 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800da2a:	69fb      	ldr	r3, [r7, #28]
 800da2c:	685a      	ldr	r2, [r3, #4]
 800da2e:	4b34      	ldr	r3, [pc, #208]	@ (800db00 <tcp_input+0x4a0>)
 800da30:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800da32:	429a      	cmp	r2, r3
 800da34:	d10d      	bne.n	800da52 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800da36:	69fb      	ldr	r3, [r7, #28]
 800da38:	681a      	ldr	r2, [r3, #0]
 800da3a:	4b31      	ldr	r3, [pc, #196]	@ (800db00 <tcp_input+0x4a0>)
 800da3c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800da3e:	429a      	cmp	r2, r3
 800da40:	d107      	bne.n	800da52 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800da42:	69f8      	ldr	r0, [r7, #28]
 800da44:	f000 fb56 	bl	800e0f4 <tcp_timewait_input>
        }
        pbuf_free(p);
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f7fd ffc3 	bl	800b9d4 <pbuf_free>
        return;
 800da4e:	e1fd      	b.n	800de4c <tcp_input+0x7ec>
        continue;
 800da50:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800da52:	69fb      	ldr	r3, [r7, #28]
 800da54:	68db      	ldr	r3, [r3, #12]
 800da56:	61fb      	str	r3, [r7, #28]
 800da58:	69fb      	ldr	r3, [r7, #28]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d1bc      	bne.n	800d9d8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800da5e:	2300      	movs	r3, #0
 800da60:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800da62:	4b2f      	ldr	r3, [pc, #188]	@ (800db20 <tcp_input+0x4c0>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	617b      	str	r3, [r7, #20]
 800da68:	e02a      	b.n	800dac0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	7a1b      	ldrb	r3, [r3, #8]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d00c      	beq.n	800da8c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	7a1a      	ldrb	r2, [r3, #8]
 800da76:	4b22      	ldr	r3, [pc, #136]	@ (800db00 <tcp_input+0x4a0>)
 800da78:	685b      	ldr	r3, [r3, #4]
 800da7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800da7e:	3301      	adds	r3, #1
 800da80:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800da82:	429a      	cmp	r2, r3
 800da84:	d002      	beq.n	800da8c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	61bb      	str	r3, [r7, #24]
        continue;
 800da8a:	e016      	b.n	800daba <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	8ada      	ldrh	r2, [r3, #22]
 800da90:	4b1a      	ldr	r3, [pc, #104]	@ (800dafc <tcp_input+0x49c>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	885b      	ldrh	r3, [r3, #2]
 800da96:	b29b      	uxth	r3, r3
 800da98:	429a      	cmp	r2, r3
 800da9a:	d10c      	bne.n	800dab6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	681a      	ldr	r2, [r3, #0]
 800daa0:	4b17      	ldr	r3, [pc, #92]	@ (800db00 <tcp_input+0x4a0>)
 800daa2:	695b      	ldr	r3, [r3, #20]
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d00f      	beq.n	800dac8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d00d      	beq.n	800daca <tcp_input+0x46a>
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d009      	beq.n	800daca <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	68db      	ldr	r3, [r3, #12]
 800dabe:	617b      	str	r3, [r7, #20]
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d1d1      	bne.n	800da6a <tcp_input+0x40a>
 800dac6:	e000      	b.n	800daca <tcp_input+0x46a>
            break;
 800dac8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d029      	beq.n	800db24 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800dad0:	69bb      	ldr	r3, [r7, #24]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d00a      	beq.n	800daec <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800dad6:	697b      	ldr	r3, [r7, #20]
 800dad8:	68da      	ldr	r2, [r3, #12]
 800dada:	69bb      	ldr	r3, [r7, #24]
 800dadc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800dade:	4b10      	ldr	r3, [pc, #64]	@ (800db20 <tcp_input+0x4c0>)
 800dae0:	681a      	ldr	r2, [r3, #0]
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800dae6:	4a0e      	ldr	r2, [pc, #56]	@ (800db20 <tcp_input+0x4c0>)
 800dae8:	697b      	ldr	r3, [r7, #20]
 800daea:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800daec:	6978      	ldr	r0, [r7, #20]
 800daee:	f000 fa03 	bl	800def8 <tcp_listen_input>
      }
      pbuf_free(p);
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f7fd ff6e 	bl	800b9d4 <pbuf_free>
      return;
 800daf8:	e1a8      	b.n	800de4c <tcp_input+0x7ec>
 800dafa:	bf00      	nop
 800dafc:	2000cae4 	.word	0x2000cae4
 800db00:	2000928c 	.word	0x2000928c
 800db04:	08019688 	.word	0x08019688
 800db08:	080197b4 	.word	0x080197b4
 800db0c:	080196d4 	.word	0x080196d4
 800db10:	2000cac8 	.word	0x2000cac8
 800db14:	080197e0 	.word	0x080197e0
 800db18:	2000cacc 	.word	0x2000cacc
 800db1c:	0801980c 	.word	0x0801980c
 800db20:	2000cac4 	.word	0x2000cac4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800db24:	69fb      	ldr	r3, [r7, #28]
 800db26:	2b00      	cmp	r3, #0
 800db28:	f000 8158 	beq.w	800dddc <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800db2c:	4b95      	ldr	r3, [pc, #596]	@ (800dd84 <tcp_input+0x724>)
 800db2e:	2200      	movs	r2, #0
 800db30:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	891a      	ldrh	r2, [r3, #8]
 800db36:	4b93      	ldr	r3, [pc, #588]	@ (800dd84 <tcp_input+0x724>)
 800db38:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800db3a:	4a92      	ldr	r2, [pc, #584]	@ (800dd84 <tcp_input+0x724>)
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800db40:	4b91      	ldr	r3, [pc, #580]	@ (800dd88 <tcp_input+0x728>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	4a8f      	ldr	r2, [pc, #572]	@ (800dd84 <tcp_input+0x724>)
 800db46:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800db48:	4b90      	ldr	r3, [pc, #576]	@ (800dd8c <tcp_input+0x72c>)
 800db4a:	2200      	movs	r2, #0
 800db4c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800db4e:	4b90      	ldr	r3, [pc, #576]	@ (800dd90 <tcp_input+0x730>)
 800db50:	2200      	movs	r2, #0
 800db52:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800db54:	4b8f      	ldr	r3, [pc, #572]	@ (800dd94 <tcp_input+0x734>)
 800db56:	2200      	movs	r2, #0
 800db58:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800db5a:	4b8f      	ldr	r3, [pc, #572]	@ (800dd98 <tcp_input+0x738>)
 800db5c:	781b      	ldrb	r3, [r3, #0]
 800db5e:	f003 0308 	and.w	r3, r3, #8
 800db62:	2b00      	cmp	r3, #0
 800db64:	d006      	beq.n	800db74 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	7b5b      	ldrb	r3, [r3, #13]
 800db6a:	f043 0301 	orr.w	r3, r3, #1
 800db6e:	b2da      	uxtb	r2, r3
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800db74:	69fb      	ldr	r3, [r7, #28]
 800db76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d017      	beq.n	800dbac <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800db7c:	69f8      	ldr	r0, [r7, #28]
 800db7e:	f7ff f929 	bl	800cdd4 <tcp_process_refused_data>
 800db82:	4603      	mov	r3, r0
 800db84:	f113 0f0d 	cmn.w	r3, #13
 800db88:	d007      	beq.n	800db9a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800db8a:	69fb      	ldr	r3, [r7, #28]
 800db8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d00c      	beq.n	800dbac <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800db92:	4b82      	ldr	r3, [pc, #520]	@ (800dd9c <tcp_input+0x73c>)
 800db94:	881b      	ldrh	r3, [r3, #0]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d008      	beq.n	800dbac <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800db9a:	69fb      	ldr	r3, [r7, #28]
 800db9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	f040 80e3 	bne.w	800dd6a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800dba4:	69f8      	ldr	r0, [r7, #28]
 800dba6:	f003 f9a7 	bl	8010ef8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800dbaa:	e0de      	b.n	800dd6a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800dbac:	4a7c      	ldr	r2, [pc, #496]	@ (800dda0 <tcp_input+0x740>)
 800dbae:	69fb      	ldr	r3, [r7, #28]
 800dbb0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800dbb2:	69f8      	ldr	r0, [r7, #28]
 800dbb4:	f000 fb18 	bl	800e1e8 <tcp_process>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800dbbc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dbc0:	f113 0f0d 	cmn.w	r3, #13
 800dbc4:	f000 80d3 	beq.w	800dd6e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800dbc8:	4b71      	ldr	r3, [pc, #452]	@ (800dd90 <tcp_input+0x730>)
 800dbca:	781b      	ldrb	r3, [r3, #0]
 800dbcc:	f003 0308 	and.w	r3, r3, #8
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d015      	beq.n	800dc00 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800dbd4:	69fb      	ldr	r3, [r7, #28]
 800dbd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d008      	beq.n	800dbf0 <tcp_input+0x590>
 800dbde:	69fb      	ldr	r3, [r7, #28]
 800dbe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dbe4:	69fa      	ldr	r2, [r7, #28]
 800dbe6:	6912      	ldr	r2, [r2, #16]
 800dbe8:	f06f 010d 	mvn.w	r1, #13
 800dbec:	4610      	mov	r0, r2
 800dbee:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800dbf0:	69f9      	ldr	r1, [r7, #28]
 800dbf2:	486c      	ldr	r0, [pc, #432]	@ (800dda4 <tcp_input+0x744>)
 800dbf4:	f7ff fbbc 	bl	800d370 <tcp_pcb_remove>
        tcp_free(pcb);
 800dbf8:	69f8      	ldr	r0, [r7, #28]
 800dbfa:	f7fe f9a7 	bl	800bf4c <tcp_free>
 800dbfe:	e0da      	b.n	800ddb6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800dc00:	2300      	movs	r3, #0
 800dc02:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800dc04:	4b63      	ldr	r3, [pc, #396]	@ (800dd94 <tcp_input+0x734>)
 800dc06:	881b      	ldrh	r3, [r3, #0]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d01d      	beq.n	800dc48 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800dc0c:	4b61      	ldr	r3, [pc, #388]	@ (800dd94 <tcp_input+0x734>)
 800dc0e:	881b      	ldrh	r3, [r3, #0]
 800dc10:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800dc12:	69fb      	ldr	r3, [r7, #28]
 800dc14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d00a      	beq.n	800dc32 <tcp_input+0x5d2>
 800dc1c:	69fb      	ldr	r3, [r7, #28]
 800dc1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dc22:	69fa      	ldr	r2, [r7, #28]
 800dc24:	6910      	ldr	r0, [r2, #16]
 800dc26:	89fa      	ldrh	r2, [r7, #14]
 800dc28:	69f9      	ldr	r1, [r7, #28]
 800dc2a:	4798      	blx	r3
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	74fb      	strb	r3, [r7, #19]
 800dc30:	e001      	b.n	800dc36 <tcp_input+0x5d6>
 800dc32:	2300      	movs	r3, #0
 800dc34:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dc36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dc3a:	f113 0f0d 	cmn.w	r3, #13
 800dc3e:	f000 8098 	beq.w	800dd72 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800dc42:	4b54      	ldr	r3, [pc, #336]	@ (800dd94 <tcp_input+0x734>)
 800dc44:	2200      	movs	r2, #0
 800dc46:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800dc48:	69f8      	ldr	r0, [r7, #28]
 800dc4a:	f000 f915 	bl	800de78 <tcp_input_delayed_close>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	f040 8090 	bne.w	800dd76 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800dc56:	4b4d      	ldr	r3, [pc, #308]	@ (800dd8c <tcp_input+0x72c>)
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d041      	beq.n	800dce2 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800dc5e:	69fb      	ldr	r3, [r7, #28]
 800dc60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d006      	beq.n	800dc74 <tcp_input+0x614>
 800dc66:	4b50      	ldr	r3, [pc, #320]	@ (800dda8 <tcp_input+0x748>)
 800dc68:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800dc6c:	494f      	ldr	r1, [pc, #316]	@ (800ddac <tcp_input+0x74c>)
 800dc6e:	4850      	ldr	r0, [pc, #320]	@ (800ddb0 <tcp_input+0x750>)
 800dc70:	f009 f908 	bl	8016e84 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800dc74:	69fb      	ldr	r3, [r7, #28]
 800dc76:	8b5b      	ldrh	r3, [r3, #26]
 800dc78:	f003 0310 	and.w	r3, r3, #16
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d008      	beq.n	800dc92 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800dc80:	4b42      	ldr	r3, [pc, #264]	@ (800dd8c <tcp_input+0x72c>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	4618      	mov	r0, r3
 800dc86:	f7fd fea5 	bl	800b9d4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800dc8a:	69f8      	ldr	r0, [r7, #28]
 800dc8c:	f7fe fc46 	bl	800c51c <tcp_abort>
            goto aborted;
 800dc90:	e091      	b.n	800ddb6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800dc92:	69fb      	ldr	r3, [r7, #28]
 800dc94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d00c      	beq.n	800dcb6 <tcp_input+0x656>
 800dc9c:	69fb      	ldr	r3, [r7, #28]
 800dc9e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800dca2:	69fb      	ldr	r3, [r7, #28]
 800dca4:	6918      	ldr	r0, [r3, #16]
 800dca6:	4b39      	ldr	r3, [pc, #228]	@ (800dd8c <tcp_input+0x72c>)
 800dca8:	681a      	ldr	r2, [r3, #0]
 800dcaa:	2300      	movs	r3, #0
 800dcac:	69f9      	ldr	r1, [r7, #28]
 800dcae:	47a0      	blx	r4
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	74fb      	strb	r3, [r7, #19]
 800dcb4:	e008      	b.n	800dcc8 <tcp_input+0x668>
 800dcb6:	4b35      	ldr	r3, [pc, #212]	@ (800dd8c <tcp_input+0x72c>)
 800dcb8:	681a      	ldr	r2, [r3, #0]
 800dcba:	2300      	movs	r3, #0
 800dcbc:	69f9      	ldr	r1, [r7, #28]
 800dcbe:	2000      	movs	r0, #0
 800dcc0:	f7ff f95e 	bl	800cf80 <tcp_recv_null>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800dcc8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dccc:	f113 0f0d 	cmn.w	r3, #13
 800dcd0:	d053      	beq.n	800dd7a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800dcd2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d003      	beq.n	800dce2 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800dcda:	4b2c      	ldr	r3, [pc, #176]	@ (800dd8c <tcp_input+0x72c>)
 800dcdc:	681a      	ldr	r2, [r3, #0]
 800dcde:	69fb      	ldr	r3, [r7, #28]
 800dce0:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800dce2:	4b2b      	ldr	r3, [pc, #172]	@ (800dd90 <tcp_input+0x730>)
 800dce4:	781b      	ldrb	r3, [r3, #0]
 800dce6:	f003 0320 	and.w	r3, r3, #32
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d030      	beq.n	800dd50 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800dcee:	69fb      	ldr	r3, [r7, #28]
 800dcf0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d009      	beq.n	800dd0a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800dcf6:	69fb      	ldr	r3, [r7, #28]
 800dcf8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dcfa:	7b5a      	ldrb	r2, [r3, #13]
 800dcfc:	69fb      	ldr	r3, [r7, #28]
 800dcfe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dd00:	f042 0220 	orr.w	r2, r2, #32
 800dd04:	b2d2      	uxtb	r2, r2
 800dd06:	735a      	strb	r2, [r3, #13]
 800dd08:	e022      	b.n	800dd50 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800dd0a:	69fb      	ldr	r3, [r7, #28]
 800dd0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd0e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800dd12:	d005      	beq.n	800dd20 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800dd14:	69fb      	ldr	r3, [r7, #28]
 800dd16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd18:	3301      	adds	r3, #1
 800dd1a:	b29a      	uxth	r2, r3
 800dd1c:	69fb      	ldr	r3, [r7, #28]
 800dd1e:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800dd20:	69fb      	ldr	r3, [r7, #28]
 800dd22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d00b      	beq.n	800dd42 <tcp_input+0x6e2>
 800dd2a:	69fb      	ldr	r3, [r7, #28]
 800dd2c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800dd30:	69fb      	ldr	r3, [r7, #28]
 800dd32:	6918      	ldr	r0, [r3, #16]
 800dd34:	2300      	movs	r3, #0
 800dd36:	2200      	movs	r2, #0
 800dd38:	69f9      	ldr	r1, [r7, #28]
 800dd3a:	47a0      	blx	r4
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	74fb      	strb	r3, [r7, #19]
 800dd40:	e001      	b.n	800dd46 <tcp_input+0x6e6>
 800dd42:	2300      	movs	r3, #0
 800dd44:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dd46:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dd4a:	f113 0f0d 	cmn.w	r3, #13
 800dd4e:	d016      	beq.n	800dd7e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800dd50:	4b13      	ldr	r3, [pc, #76]	@ (800dda0 <tcp_input+0x740>)
 800dd52:	2200      	movs	r2, #0
 800dd54:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800dd56:	69f8      	ldr	r0, [r7, #28]
 800dd58:	f000 f88e 	bl	800de78 <tcp_input_delayed_close>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d128      	bne.n	800ddb4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800dd62:	69f8      	ldr	r0, [r7, #28]
 800dd64:	f002 fac2 	bl	80102ec <tcp_output>
 800dd68:	e025      	b.n	800ddb6 <tcp_input+0x756>
        goto aborted;
 800dd6a:	bf00      	nop
 800dd6c:	e023      	b.n	800ddb6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800dd6e:	bf00      	nop
 800dd70:	e021      	b.n	800ddb6 <tcp_input+0x756>
              goto aborted;
 800dd72:	bf00      	nop
 800dd74:	e01f      	b.n	800ddb6 <tcp_input+0x756>
          goto aborted;
 800dd76:	bf00      	nop
 800dd78:	e01d      	b.n	800ddb6 <tcp_input+0x756>
            goto aborted;
 800dd7a:	bf00      	nop
 800dd7c:	e01b      	b.n	800ddb6 <tcp_input+0x756>
              goto aborted;
 800dd7e:	bf00      	nop
 800dd80:	e019      	b.n	800ddb6 <tcp_input+0x756>
 800dd82:	bf00      	nop
 800dd84:	2000cad4 	.word	0x2000cad4
 800dd88:	2000cae4 	.word	0x2000cae4
 800dd8c:	2000cb04 	.word	0x2000cb04
 800dd90:	2000cb01 	.word	0x2000cb01
 800dd94:	2000cafc 	.word	0x2000cafc
 800dd98:	2000cb00 	.word	0x2000cb00
 800dd9c:	2000cafe 	.word	0x2000cafe
 800dda0:	2000cb08 	.word	0x2000cb08
 800dda4:	2000cac8 	.word	0x2000cac8
 800dda8:	08019688 	.word	0x08019688
 800ddac:	0801983c 	.word	0x0801983c
 800ddb0:	080196d4 	.word	0x080196d4
          goto aborted;
 800ddb4:	bf00      	nop
    tcp_input_pcb = NULL;
 800ddb6:	4b27      	ldr	r3, [pc, #156]	@ (800de54 <tcp_input+0x7f4>)
 800ddb8:	2200      	movs	r2, #0
 800ddba:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ddbc:	4b26      	ldr	r3, [pc, #152]	@ (800de58 <tcp_input+0x7f8>)
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ddc2:	4b26      	ldr	r3, [pc, #152]	@ (800de5c <tcp_input+0x7fc>)
 800ddc4:	685b      	ldr	r3, [r3, #4]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d03f      	beq.n	800de4a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800ddca:	4b24      	ldr	r3, [pc, #144]	@ (800de5c <tcp_input+0x7fc>)
 800ddcc:	685b      	ldr	r3, [r3, #4]
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f7fd fe00 	bl	800b9d4 <pbuf_free>
      inseg.p = NULL;
 800ddd4:	4b21      	ldr	r3, [pc, #132]	@ (800de5c <tcp_input+0x7fc>)
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ddda:	e036      	b.n	800de4a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800dddc:	4b20      	ldr	r3, [pc, #128]	@ (800de60 <tcp_input+0x800>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	899b      	ldrh	r3, [r3, #12]
 800dde2:	b29b      	uxth	r3, r3
 800dde4:	4618      	mov	r0, r3
 800dde6:	f7fc f8a1 	bl	8009f2c <lwip_htons>
 800ddea:	4603      	mov	r3, r0
 800ddec:	b2db      	uxtb	r3, r3
 800ddee:	f003 0304 	and.w	r3, r3, #4
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d118      	bne.n	800de28 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ddf6:	4b1b      	ldr	r3, [pc, #108]	@ (800de64 <tcp_input+0x804>)
 800ddf8:	6819      	ldr	r1, [r3, #0]
 800ddfa:	4b1b      	ldr	r3, [pc, #108]	@ (800de68 <tcp_input+0x808>)
 800ddfc:	881b      	ldrh	r3, [r3, #0]
 800ddfe:	461a      	mov	r2, r3
 800de00:	4b1a      	ldr	r3, [pc, #104]	@ (800de6c <tcp_input+0x80c>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800de06:	4b16      	ldr	r3, [pc, #88]	@ (800de60 <tcp_input+0x800>)
 800de08:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800de0a:	885b      	ldrh	r3, [r3, #2]
 800de0c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800de0e:	4a14      	ldr	r2, [pc, #80]	@ (800de60 <tcp_input+0x800>)
 800de10:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800de12:	8812      	ldrh	r2, [r2, #0]
 800de14:	b292      	uxth	r2, r2
 800de16:	9202      	str	r2, [sp, #8]
 800de18:	9301      	str	r3, [sp, #4]
 800de1a:	4b15      	ldr	r3, [pc, #84]	@ (800de70 <tcp_input+0x810>)
 800de1c:	9300      	str	r3, [sp, #0]
 800de1e:	4b15      	ldr	r3, [pc, #84]	@ (800de74 <tcp_input+0x814>)
 800de20:	4602      	mov	r2, r0
 800de22:	2000      	movs	r0, #0
 800de24:	f003 f816 	bl	8010e54 <tcp_rst>
    pbuf_free(p);
 800de28:	6878      	ldr	r0, [r7, #4]
 800de2a:	f7fd fdd3 	bl	800b9d4 <pbuf_free>
  return;
 800de2e:	e00c      	b.n	800de4a <tcp_input+0x7ea>
    goto dropped;
 800de30:	bf00      	nop
 800de32:	e006      	b.n	800de42 <tcp_input+0x7e2>
    goto dropped;
 800de34:	bf00      	nop
 800de36:	e004      	b.n	800de42 <tcp_input+0x7e2>
    goto dropped;
 800de38:	bf00      	nop
 800de3a:	e002      	b.n	800de42 <tcp_input+0x7e2>
      goto dropped;
 800de3c:	bf00      	nop
 800de3e:	e000      	b.n	800de42 <tcp_input+0x7e2>
      goto dropped;
 800de40:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f7fd fdc6 	bl	800b9d4 <pbuf_free>
 800de48:	e000      	b.n	800de4c <tcp_input+0x7ec>
  return;
 800de4a:	bf00      	nop
}
 800de4c:	3724      	adds	r7, #36	@ 0x24
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd90      	pop	{r4, r7, pc}
 800de52:	bf00      	nop
 800de54:	2000cb08 	.word	0x2000cb08
 800de58:	2000cb04 	.word	0x2000cb04
 800de5c:	2000cad4 	.word	0x2000cad4
 800de60:	2000cae4 	.word	0x2000cae4
 800de64:	2000caf8 	.word	0x2000caf8
 800de68:	2000cafe 	.word	0x2000cafe
 800de6c:	2000caf4 	.word	0x2000caf4
 800de70:	2000929c 	.word	0x2000929c
 800de74:	200092a0 	.word	0x200092a0

0800de78 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b082      	sub	sp, #8
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d106      	bne.n	800de94 <tcp_input_delayed_close+0x1c>
 800de86:	4b17      	ldr	r3, [pc, #92]	@ (800dee4 <tcp_input_delayed_close+0x6c>)
 800de88:	f240 225a 	movw	r2, #602	@ 0x25a
 800de8c:	4916      	ldr	r1, [pc, #88]	@ (800dee8 <tcp_input_delayed_close+0x70>)
 800de8e:	4817      	ldr	r0, [pc, #92]	@ (800deec <tcp_input_delayed_close+0x74>)
 800de90:	f008 fff8 	bl	8016e84 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800de94:	4b16      	ldr	r3, [pc, #88]	@ (800def0 <tcp_input_delayed_close+0x78>)
 800de96:	781b      	ldrb	r3, [r3, #0]
 800de98:	f003 0310 	and.w	r3, r3, #16
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d01c      	beq.n	800deda <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	8b5b      	ldrh	r3, [r3, #26]
 800dea4:	f003 0310 	and.w	r3, r3, #16
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d10d      	bne.n	800dec8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d008      	beq.n	800dec8 <tcp_input_delayed_close+0x50>
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800debc:	687a      	ldr	r2, [r7, #4]
 800debe:	6912      	ldr	r2, [r2, #16]
 800dec0:	f06f 010e 	mvn.w	r1, #14
 800dec4:	4610      	mov	r0, r2
 800dec6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800dec8:	6879      	ldr	r1, [r7, #4]
 800deca:	480a      	ldr	r0, [pc, #40]	@ (800def4 <tcp_input_delayed_close+0x7c>)
 800decc:	f7ff fa50 	bl	800d370 <tcp_pcb_remove>
    tcp_free(pcb);
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	f7fe f83b 	bl	800bf4c <tcp_free>
    return 1;
 800ded6:	2301      	movs	r3, #1
 800ded8:	e000      	b.n	800dedc <tcp_input_delayed_close+0x64>
  }
  return 0;
 800deda:	2300      	movs	r3, #0
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3708      	adds	r7, #8
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}
 800dee4:	08019688 	.word	0x08019688
 800dee8:	08019858 	.word	0x08019858
 800deec:	080196d4 	.word	0x080196d4
 800def0:	2000cb01 	.word	0x2000cb01
 800def4:	2000cac8 	.word	0x2000cac8

0800def8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800def8:	b590      	push	{r4, r7, lr}
 800defa:	b08b      	sub	sp, #44	@ 0x2c
 800defc:	af04      	add	r7, sp, #16
 800defe:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800df00:	4b6f      	ldr	r3, [pc, #444]	@ (800e0c0 <tcp_listen_input+0x1c8>)
 800df02:	781b      	ldrb	r3, [r3, #0]
 800df04:	f003 0304 	and.w	r3, r3, #4
 800df08:	2b00      	cmp	r3, #0
 800df0a:	f040 80d2 	bne.w	800e0b2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d106      	bne.n	800df22 <tcp_listen_input+0x2a>
 800df14:	4b6b      	ldr	r3, [pc, #428]	@ (800e0c4 <tcp_listen_input+0x1cc>)
 800df16:	f240 2281 	movw	r2, #641	@ 0x281
 800df1a:	496b      	ldr	r1, [pc, #428]	@ (800e0c8 <tcp_listen_input+0x1d0>)
 800df1c:	486b      	ldr	r0, [pc, #428]	@ (800e0cc <tcp_listen_input+0x1d4>)
 800df1e:	f008 ffb1 	bl	8016e84 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800df22:	4b67      	ldr	r3, [pc, #412]	@ (800e0c0 <tcp_listen_input+0x1c8>)
 800df24:	781b      	ldrb	r3, [r3, #0]
 800df26:	f003 0310 	and.w	r3, r3, #16
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d019      	beq.n	800df62 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df2e:	4b68      	ldr	r3, [pc, #416]	@ (800e0d0 <tcp_listen_input+0x1d8>)
 800df30:	6819      	ldr	r1, [r3, #0]
 800df32:	4b68      	ldr	r3, [pc, #416]	@ (800e0d4 <tcp_listen_input+0x1dc>)
 800df34:	881b      	ldrh	r3, [r3, #0]
 800df36:	461a      	mov	r2, r3
 800df38:	4b67      	ldr	r3, [pc, #412]	@ (800e0d8 <tcp_listen_input+0x1e0>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800df3e:	4b67      	ldr	r3, [pc, #412]	@ (800e0dc <tcp_listen_input+0x1e4>)
 800df40:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df42:	885b      	ldrh	r3, [r3, #2]
 800df44:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800df46:	4a65      	ldr	r2, [pc, #404]	@ (800e0dc <tcp_listen_input+0x1e4>)
 800df48:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df4a:	8812      	ldrh	r2, [r2, #0]
 800df4c:	b292      	uxth	r2, r2
 800df4e:	9202      	str	r2, [sp, #8]
 800df50:	9301      	str	r3, [sp, #4]
 800df52:	4b63      	ldr	r3, [pc, #396]	@ (800e0e0 <tcp_listen_input+0x1e8>)
 800df54:	9300      	str	r3, [sp, #0]
 800df56:	4b63      	ldr	r3, [pc, #396]	@ (800e0e4 <tcp_listen_input+0x1ec>)
 800df58:	4602      	mov	r2, r0
 800df5a:	6878      	ldr	r0, [r7, #4]
 800df5c:	f002 ff7a 	bl	8010e54 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800df60:	e0a9      	b.n	800e0b6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800df62:	4b57      	ldr	r3, [pc, #348]	@ (800e0c0 <tcp_listen_input+0x1c8>)
 800df64:	781b      	ldrb	r3, [r3, #0]
 800df66:	f003 0302 	and.w	r3, r3, #2
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	f000 80a3 	beq.w	800e0b6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	7d5b      	ldrb	r3, [r3, #21]
 800df74:	4618      	mov	r0, r3
 800df76:	f7ff f927 	bl	800d1c8 <tcp_alloc>
 800df7a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d111      	bne.n	800dfa6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	699b      	ldr	r3, [r3, #24]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d00a      	beq.n	800dfa0 <tcp_listen_input+0xa8>
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	699b      	ldr	r3, [r3, #24]
 800df8e:	687a      	ldr	r2, [r7, #4]
 800df90:	6910      	ldr	r0, [r2, #16]
 800df92:	f04f 32ff 	mov.w	r2, #4294967295
 800df96:	2100      	movs	r1, #0
 800df98:	4798      	blx	r3
 800df9a:	4603      	mov	r3, r0
 800df9c:	73bb      	strb	r3, [r7, #14]
      return;
 800df9e:	e08b      	b.n	800e0b8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800dfa0:	23f0      	movs	r3, #240	@ 0xf0
 800dfa2:	73bb      	strb	r3, [r7, #14]
      return;
 800dfa4:	e088      	b.n	800e0b8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800dfa6:	4b50      	ldr	r3, [pc, #320]	@ (800e0e8 <tcp_listen_input+0x1f0>)
 800dfa8:	695a      	ldr	r2, [r3, #20]
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800dfae:	4b4e      	ldr	r3, [pc, #312]	@ (800e0e8 <tcp_listen_input+0x1f0>)
 800dfb0:	691a      	ldr	r2, [r3, #16]
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	8ada      	ldrh	r2, [r3, #22]
 800dfba:	697b      	ldr	r3, [r7, #20]
 800dfbc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800dfbe:	4b47      	ldr	r3, [pc, #284]	@ (800e0dc <tcp_listen_input+0x1e4>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	881b      	ldrh	r3, [r3, #0]
 800dfc4:	b29a      	uxth	r2, r3
 800dfc6:	697b      	ldr	r3, [r7, #20]
 800dfc8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	2203      	movs	r2, #3
 800dfce:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800dfd0:	4b41      	ldr	r3, [pc, #260]	@ (800e0d8 <tcp_listen_input+0x1e0>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	1c5a      	adds	r2, r3, #1
 800dfd6:	697b      	ldr	r3, [r7, #20]
 800dfd8:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800dfda:	697b      	ldr	r3, [r7, #20]
 800dfdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dfde:	697b      	ldr	r3, [r7, #20]
 800dfe0:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800dfe2:	6978      	ldr	r0, [r7, #20]
 800dfe4:	f7ff fa58 	bl	800d498 <tcp_next_iss>
 800dfe8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	693a      	ldr	r2, [r7, #16]
 800dfee:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800dff0:	697b      	ldr	r3, [r7, #20]
 800dff2:	693a      	ldr	r2, [r7, #16]
 800dff4:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800dff6:	697b      	ldr	r3, [r7, #20]
 800dff8:	693a      	ldr	r2, [r7, #16]
 800dffa:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800dffc:	697b      	ldr	r3, [r7, #20]
 800dffe:	693a      	ldr	r2, [r7, #16]
 800e000:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e002:	4b35      	ldr	r3, [pc, #212]	@ (800e0d8 <tcp_listen_input+0x1e0>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	1e5a      	subs	r2, r3, #1
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	691a      	ldr	r2, [r3, #16]
 800e010:	697b      	ldr	r3, [r7, #20]
 800e012:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	687a      	ldr	r2, [r7, #4]
 800e018:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	7a5b      	ldrb	r3, [r3, #9]
 800e01e:	f003 030c 	and.w	r3, r3, #12
 800e022:	b2da      	uxtb	r2, r3
 800e024:	697b      	ldr	r3, [r7, #20]
 800e026:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	7a1a      	ldrb	r2, [r3, #8]
 800e02c:	697b      	ldr	r3, [r7, #20]
 800e02e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e030:	4b2e      	ldr	r3, [pc, #184]	@ (800e0ec <tcp_listen_input+0x1f4>)
 800e032:	681a      	ldr	r2, [r3, #0]
 800e034:	697b      	ldr	r3, [r7, #20]
 800e036:	60da      	str	r2, [r3, #12]
 800e038:	4a2c      	ldr	r2, [pc, #176]	@ (800e0ec <tcp_listen_input+0x1f4>)
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	6013      	str	r3, [r2, #0]
 800e03e:	f003 f8cb 	bl	80111d8 <tcp_timer_needed>
 800e042:	4b2b      	ldr	r3, [pc, #172]	@ (800e0f0 <tcp_listen_input+0x1f8>)
 800e044:	2201      	movs	r2, #1
 800e046:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e048:	6978      	ldr	r0, [r7, #20]
 800e04a:	f001 fd8b 	bl	800fb64 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e04e:	4b23      	ldr	r3, [pc, #140]	@ (800e0dc <tcp_listen_input+0x1e4>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	89db      	ldrh	r3, [r3, #14]
 800e054:	b29a      	uxth	r2, r3
 800e056:	697b      	ldr	r3, [r7, #20]
 800e058:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e05c:	697b      	ldr	r3, [r7, #20]
 800e05e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e062:	697b      	ldr	r3, [r7, #20]
 800e064:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e068:	697b      	ldr	r3, [r7, #20]
 800e06a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800e06c:	697b      	ldr	r3, [r7, #20]
 800e06e:	3304      	adds	r3, #4
 800e070:	4618      	mov	r0, r3
 800e072:	f007 f99b 	bl	80153ac <ip4_route>
 800e076:	4601      	mov	r1, r0
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	3304      	adds	r3, #4
 800e07c:	461a      	mov	r2, r3
 800e07e:	4620      	mov	r0, r4
 800e080:	f7ff fa30 	bl	800d4e4 <tcp_eff_send_mss_netif>
 800e084:	4603      	mov	r3, r0
 800e086:	461a      	mov	r2, r3
 800e088:	697b      	ldr	r3, [r7, #20]
 800e08a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e08c:	2112      	movs	r1, #18
 800e08e:	6978      	ldr	r0, [r7, #20]
 800e090:	f002 f83e 	bl	8010110 <tcp_enqueue_flags>
 800e094:	4603      	mov	r3, r0
 800e096:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d004      	beq.n	800e0aa <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e0a0:	2100      	movs	r1, #0
 800e0a2:	6978      	ldr	r0, [r7, #20]
 800e0a4:	f7fe f97c 	bl	800c3a0 <tcp_abandon>
      return;
 800e0a8:	e006      	b.n	800e0b8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e0aa:	6978      	ldr	r0, [r7, #20]
 800e0ac:	f002 f91e 	bl	80102ec <tcp_output>
  return;
 800e0b0:	e001      	b.n	800e0b6 <tcp_listen_input+0x1be>
    return;
 800e0b2:	bf00      	nop
 800e0b4:	e000      	b.n	800e0b8 <tcp_listen_input+0x1c0>
  return;
 800e0b6:	bf00      	nop
}
 800e0b8:	371c      	adds	r7, #28
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd90      	pop	{r4, r7, pc}
 800e0be:	bf00      	nop
 800e0c0:	2000cb00 	.word	0x2000cb00
 800e0c4:	08019688 	.word	0x08019688
 800e0c8:	08019880 	.word	0x08019880
 800e0cc:	080196d4 	.word	0x080196d4
 800e0d0:	2000caf8 	.word	0x2000caf8
 800e0d4:	2000cafe 	.word	0x2000cafe
 800e0d8:	2000caf4 	.word	0x2000caf4
 800e0dc:	2000cae4 	.word	0x2000cae4
 800e0e0:	2000929c 	.word	0x2000929c
 800e0e4:	200092a0 	.word	0x200092a0
 800e0e8:	2000928c 	.word	0x2000928c
 800e0ec:	2000cac8 	.word	0x2000cac8
 800e0f0:	2000cad0 	.word	0x2000cad0

0800e0f4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b086      	sub	sp, #24
 800e0f8:	af04      	add	r7, sp, #16
 800e0fa:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e0fc:	4b2f      	ldr	r3, [pc, #188]	@ (800e1bc <tcp_timewait_input+0xc8>)
 800e0fe:	781b      	ldrb	r3, [r3, #0]
 800e100:	f003 0304 	and.w	r3, r3, #4
 800e104:	2b00      	cmp	r3, #0
 800e106:	d153      	bne.n	800e1b0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d106      	bne.n	800e11c <tcp_timewait_input+0x28>
 800e10e:	4b2c      	ldr	r3, [pc, #176]	@ (800e1c0 <tcp_timewait_input+0xcc>)
 800e110:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800e114:	492b      	ldr	r1, [pc, #172]	@ (800e1c4 <tcp_timewait_input+0xd0>)
 800e116:	482c      	ldr	r0, [pc, #176]	@ (800e1c8 <tcp_timewait_input+0xd4>)
 800e118:	f008 feb4 	bl	8016e84 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e11c:	4b27      	ldr	r3, [pc, #156]	@ (800e1bc <tcp_timewait_input+0xc8>)
 800e11e:	781b      	ldrb	r3, [r3, #0]
 800e120:	f003 0302 	and.w	r3, r3, #2
 800e124:	2b00      	cmp	r3, #0
 800e126:	d02a      	beq.n	800e17e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e128:	4b28      	ldr	r3, [pc, #160]	@ (800e1cc <tcp_timewait_input+0xd8>)
 800e12a:	681a      	ldr	r2, [r3, #0]
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e130:	1ad3      	subs	r3, r2, r3
 800e132:	2b00      	cmp	r3, #0
 800e134:	db2d      	blt.n	800e192 <tcp_timewait_input+0x9e>
 800e136:	4b25      	ldr	r3, [pc, #148]	@ (800e1cc <tcp_timewait_input+0xd8>)
 800e138:	681a      	ldr	r2, [r3, #0]
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e13e:	6879      	ldr	r1, [r7, #4]
 800e140:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e142:	440b      	add	r3, r1
 800e144:	1ad3      	subs	r3, r2, r3
 800e146:	2b00      	cmp	r3, #0
 800e148:	dc23      	bgt.n	800e192 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e14a:	4b21      	ldr	r3, [pc, #132]	@ (800e1d0 <tcp_timewait_input+0xdc>)
 800e14c:	6819      	ldr	r1, [r3, #0]
 800e14e:	4b21      	ldr	r3, [pc, #132]	@ (800e1d4 <tcp_timewait_input+0xe0>)
 800e150:	881b      	ldrh	r3, [r3, #0]
 800e152:	461a      	mov	r2, r3
 800e154:	4b1d      	ldr	r3, [pc, #116]	@ (800e1cc <tcp_timewait_input+0xd8>)
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e15a:	4b1f      	ldr	r3, [pc, #124]	@ (800e1d8 <tcp_timewait_input+0xe4>)
 800e15c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e15e:	885b      	ldrh	r3, [r3, #2]
 800e160:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e162:	4a1d      	ldr	r2, [pc, #116]	@ (800e1d8 <tcp_timewait_input+0xe4>)
 800e164:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e166:	8812      	ldrh	r2, [r2, #0]
 800e168:	b292      	uxth	r2, r2
 800e16a:	9202      	str	r2, [sp, #8]
 800e16c:	9301      	str	r3, [sp, #4]
 800e16e:	4b1b      	ldr	r3, [pc, #108]	@ (800e1dc <tcp_timewait_input+0xe8>)
 800e170:	9300      	str	r3, [sp, #0]
 800e172:	4b1b      	ldr	r3, [pc, #108]	@ (800e1e0 <tcp_timewait_input+0xec>)
 800e174:	4602      	mov	r2, r0
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f002 fe6c 	bl	8010e54 <tcp_rst>
      return;
 800e17c:	e01b      	b.n	800e1b6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e17e:	4b0f      	ldr	r3, [pc, #60]	@ (800e1bc <tcp_timewait_input+0xc8>)
 800e180:	781b      	ldrb	r3, [r3, #0]
 800e182:	f003 0301 	and.w	r3, r3, #1
 800e186:	2b00      	cmp	r3, #0
 800e188:	d003      	beq.n	800e192 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e18a:	4b16      	ldr	r3, [pc, #88]	@ (800e1e4 <tcp_timewait_input+0xf0>)
 800e18c:	681a      	ldr	r2, [r3, #0]
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e192:	4b10      	ldr	r3, [pc, #64]	@ (800e1d4 <tcp_timewait_input+0xe0>)
 800e194:	881b      	ldrh	r3, [r3, #0]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d00c      	beq.n	800e1b4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	8b5b      	ldrh	r3, [r3, #26]
 800e19e:	f043 0302 	orr.w	r3, r3, #2
 800e1a2:	b29a      	uxth	r2, r3
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e1a8:	6878      	ldr	r0, [r7, #4]
 800e1aa:	f002 f89f 	bl	80102ec <tcp_output>
  }
  return;
 800e1ae:	e001      	b.n	800e1b4 <tcp_timewait_input+0xc0>
    return;
 800e1b0:	bf00      	nop
 800e1b2:	e000      	b.n	800e1b6 <tcp_timewait_input+0xc2>
  return;
 800e1b4:	bf00      	nop
}
 800e1b6:	3708      	adds	r7, #8
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd80      	pop	{r7, pc}
 800e1bc:	2000cb00 	.word	0x2000cb00
 800e1c0:	08019688 	.word	0x08019688
 800e1c4:	080198a0 	.word	0x080198a0
 800e1c8:	080196d4 	.word	0x080196d4
 800e1cc:	2000caf4 	.word	0x2000caf4
 800e1d0:	2000caf8 	.word	0x2000caf8
 800e1d4:	2000cafe 	.word	0x2000cafe
 800e1d8:	2000cae4 	.word	0x2000cae4
 800e1dc:	2000929c 	.word	0x2000929c
 800e1e0:	200092a0 	.word	0x200092a0
 800e1e4:	2000cabc 	.word	0x2000cabc

0800e1e8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e1e8:	b590      	push	{r4, r7, lr}
 800e1ea:	b08d      	sub	sp, #52	@ 0x34
 800e1ec:	af04      	add	r7, sp, #16
 800e1ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d106      	bne.n	800e20c <tcp_process+0x24>
 800e1fe:	4b9d      	ldr	r3, [pc, #628]	@ (800e474 <tcp_process+0x28c>)
 800e200:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800e204:	499c      	ldr	r1, [pc, #624]	@ (800e478 <tcp_process+0x290>)
 800e206:	489d      	ldr	r0, [pc, #628]	@ (800e47c <tcp_process+0x294>)
 800e208:	f008 fe3c 	bl	8016e84 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e20c:	4b9c      	ldr	r3, [pc, #624]	@ (800e480 <tcp_process+0x298>)
 800e20e:	781b      	ldrb	r3, [r3, #0]
 800e210:	f003 0304 	and.w	r3, r3, #4
 800e214:	2b00      	cmp	r3, #0
 800e216:	d04e      	beq.n	800e2b6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	7d1b      	ldrb	r3, [r3, #20]
 800e21c:	2b02      	cmp	r3, #2
 800e21e:	d108      	bne.n	800e232 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e224:	4b97      	ldr	r3, [pc, #604]	@ (800e484 <tcp_process+0x29c>)
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	429a      	cmp	r2, r3
 800e22a:	d123      	bne.n	800e274 <tcp_process+0x8c>
        acceptable = 1;
 800e22c:	2301      	movs	r3, #1
 800e22e:	76fb      	strb	r3, [r7, #27]
 800e230:	e020      	b.n	800e274 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e236:	4b94      	ldr	r3, [pc, #592]	@ (800e488 <tcp_process+0x2a0>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	429a      	cmp	r2, r3
 800e23c:	d102      	bne.n	800e244 <tcp_process+0x5c>
        acceptable = 1;
 800e23e:	2301      	movs	r3, #1
 800e240:	76fb      	strb	r3, [r7, #27]
 800e242:	e017      	b.n	800e274 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e244:	4b90      	ldr	r3, [pc, #576]	@ (800e488 <tcp_process+0x2a0>)
 800e246:	681a      	ldr	r2, [r3, #0]
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e24c:	1ad3      	subs	r3, r2, r3
 800e24e:	2b00      	cmp	r3, #0
 800e250:	db10      	blt.n	800e274 <tcp_process+0x8c>
 800e252:	4b8d      	ldr	r3, [pc, #564]	@ (800e488 <tcp_process+0x2a0>)
 800e254:	681a      	ldr	r2, [r3, #0]
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e25a:	6879      	ldr	r1, [r7, #4]
 800e25c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e25e:	440b      	add	r3, r1
 800e260:	1ad3      	subs	r3, r2, r3
 800e262:	2b00      	cmp	r3, #0
 800e264:	dc06      	bgt.n	800e274 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	8b5b      	ldrh	r3, [r3, #26]
 800e26a:	f043 0302 	orr.w	r3, r3, #2
 800e26e:	b29a      	uxth	r2, r3
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e274:	7efb      	ldrb	r3, [r7, #27]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d01b      	beq.n	800e2b2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	7d1b      	ldrb	r3, [r3, #20]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d106      	bne.n	800e290 <tcp_process+0xa8>
 800e282:	4b7c      	ldr	r3, [pc, #496]	@ (800e474 <tcp_process+0x28c>)
 800e284:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800e288:	4980      	ldr	r1, [pc, #512]	@ (800e48c <tcp_process+0x2a4>)
 800e28a:	487c      	ldr	r0, [pc, #496]	@ (800e47c <tcp_process+0x294>)
 800e28c:	f008 fdfa 	bl	8016e84 <iprintf>
      recv_flags |= TF_RESET;
 800e290:	4b7f      	ldr	r3, [pc, #508]	@ (800e490 <tcp_process+0x2a8>)
 800e292:	781b      	ldrb	r3, [r3, #0]
 800e294:	f043 0308 	orr.w	r3, r3, #8
 800e298:	b2da      	uxtb	r2, r3
 800e29a:	4b7d      	ldr	r3, [pc, #500]	@ (800e490 <tcp_process+0x2a8>)
 800e29c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	8b5b      	ldrh	r3, [r3, #26]
 800e2a2:	f023 0301 	bic.w	r3, r3, #1
 800e2a6:	b29a      	uxth	r2, r3
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e2ac:	f06f 030d 	mvn.w	r3, #13
 800e2b0:	e37a      	b.n	800e9a8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	e378      	b.n	800e9a8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e2b6:	4b72      	ldr	r3, [pc, #456]	@ (800e480 <tcp_process+0x298>)
 800e2b8:	781b      	ldrb	r3, [r3, #0]
 800e2ba:	f003 0302 	and.w	r3, r3, #2
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d010      	beq.n	800e2e4 <tcp_process+0xfc>
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	7d1b      	ldrb	r3, [r3, #20]
 800e2c6:	2b02      	cmp	r3, #2
 800e2c8:	d00c      	beq.n	800e2e4 <tcp_process+0xfc>
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	7d1b      	ldrb	r3, [r3, #20]
 800e2ce:	2b03      	cmp	r3, #3
 800e2d0:	d008      	beq.n	800e2e4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	8b5b      	ldrh	r3, [r3, #26]
 800e2d6:	f043 0302 	orr.w	r3, r3, #2
 800e2da:	b29a      	uxth	r2, r3
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	e361      	b.n	800e9a8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	8b5b      	ldrh	r3, [r3, #26]
 800e2e8:	f003 0310 	and.w	r3, r3, #16
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d103      	bne.n	800e2f8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e2f0:	4b68      	ldr	r3, [pc, #416]	@ (800e494 <tcp_process+0x2ac>)
 800e2f2:	681a      	ldr	r2, [r3, #0]
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2200      	movs	r2, #0
 800e304:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	f001 fc2b 	bl	800fb64 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	7d1b      	ldrb	r3, [r3, #20]
 800e312:	3b02      	subs	r3, #2
 800e314:	2b07      	cmp	r3, #7
 800e316:	f200 8337 	bhi.w	800e988 <tcp_process+0x7a0>
 800e31a:	a201      	add	r2, pc, #4	@ (adr r2, 800e320 <tcp_process+0x138>)
 800e31c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e320:	0800e341 	.word	0x0800e341
 800e324:	0800e571 	.word	0x0800e571
 800e328:	0800e6e9 	.word	0x0800e6e9
 800e32c:	0800e713 	.word	0x0800e713
 800e330:	0800e837 	.word	0x0800e837
 800e334:	0800e6e9 	.word	0x0800e6e9
 800e338:	0800e8c3 	.word	0x0800e8c3
 800e33c:	0800e953 	.word	0x0800e953
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e340:	4b4f      	ldr	r3, [pc, #316]	@ (800e480 <tcp_process+0x298>)
 800e342:	781b      	ldrb	r3, [r3, #0]
 800e344:	f003 0310 	and.w	r3, r3, #16
 800e348:	2b00      	cmp	r3, #0
 800e34a:	f000 80e4 	beq.w	800e516 <tcp_process+0x32e>
 800e34e:	4b4c      	ldr	r3, [pc, #304]	@ (800e480 <tcp_process+0x298>)
 800e350:	781b      	ldrb	r3, [r3, #0]
 800e352:	f003 0302 	and.w	r3, r3, #2
 800e356:	2b00      	cmp	r3, #0
 800e358:	f000 80dd 	beq.w	800e516 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e360:	1c5a      	adds	r2, r3, #1
 800e362:	4b48      	ldr	r3, [pc, #288]	@ (800e484 <tcp_process+0x29c>)
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	429a      	cmp	r2, r3
 800e368:	f040 80d5 	bne.w	800e516 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e36c:	4b46      	ldr	r3, [pc, #280]	@ (800e488 <tcp_process+0x2a0>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	1c5a      	adds	r2, r3, #1
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800e37e:	4b41      	ldr	r3, [pc, #260]	@ (800e484 <tcp_process+0x29c>)
 800e380:	681a      	ldr	r2, [r3, #0]
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e386:	4b44      	ldr	r3, [pc, #272]	@ (800e498 <tcp_process+0x2b0>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	89db      	ldrh	r3, [r3, #14]
 800e38c:	b29a      	uxth	r2, r3
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e3a0:	4b39      	ldr	r3, [pc, #228]	@ (800e488 <tcp_process+0x2a0>)
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	1e5a      	subs	r2, r3, #1
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	2204      	movs	r2, #4
 800e3ae:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	3304      	adds	r3, #4
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f006 fff7 	bl	80153ac <ip4_route>
 800e3be:	4601      	mov	r1, r0
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	3304      	adds	r3, #4
 800e3c4:	461a      	mov	r2, r3
 800e3c6:	4620      	mov	r0, r4
 800e3c8:	f7ff f88c 	bl	800d4e4 <tcp_eff_send_mss_netif>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	461a      	mov	r2, r3
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e3d8:	009a      	lsls	r2, r3, #2
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e3de:	005b      	lsls	r3, r3, #1
 800e3e0:	f241 111c 	movw	r1, #4380	@ 0x111c
 800e3e4:	428b      	cmp	r3, r1
 800e3e6:	bf38      	it	cc
 800e3e8:	460b      	movcc	r3, r1
 800e3ea:	429a      	cmp	r2, r3
 800e3ec:	d204      	bcs.n	800e3f8 <tcp_process+0x210>
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e3f2:	009b      	lsls	r3, r3, #2
 800e3f4:	b29b      	uxth	r3, r3
 800e3f6:	e00d      	b.n	800e414 <tcp_process+0x22c>
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e3fc:	005b      	lsls	r3, r3, #1
 800e3fe:	f241 121c 	movw	r2, #4380	@ 0x111c
 800e402:	4293      	cmp	r3, r2
 800e404:	d904      	bls.n	800e410 <tcp_process+0x228>
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e40a:	005b      	lsls	r3, r3, #1
 800e40c:	b29b      	uxth	r3, r3
 800e40e:	e001      	b.n	800e414 <tcp_process+0x22c>
 800e410:	f241 131c 	movw	r3, #4380	@ 0x111c
 800e414:	687a      	ldr	r2, [r7, #4]
 800e416:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e420:	2b00      	cmp	r3, #0
 800e422:	d106      	bne.n	800e432 <tcp_process+0x24a>
 800e424:	4b13      	ldr	r3, [pc, #76]	@ (800e474 <tcp_process+0x28c>)
 800e426:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800e42a:	491c      	ldr	r1, [pc, #112]	@ (800e49c <tcp_process+0x2b4>)
 800e42c:	4813      	ldr	r0, [pc, #76]	@ (800e47c <tcp_process+0x294>)
 800e42e:	f008 fd29 	bl	8016e84 <iprintf>
        --pcb->snd_queuelen;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e438:	3b01      	subs	r3, #1
 800e43a:	b29a      	uxth	r2, r3
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e446:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e448:	69fb      	ldr	r3, [r7, #28]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d12a      	bne.n	800e4a4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e452:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e454:	69fb      	ldr	r3, [r7, #28]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d106      	bne.n	800e468 <tcp_process+0x280>
 800e45a:	4b06      	ldr	r3, [pc, #24]	@ (800e474 <tcp_process+0x28c>)
 800e45c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800e460:	490f      	ldr	r1, [pc, #60]	@ (800e4a0 <tcp_process+0x2b8>)
 800e462:	4806      	ldr	r0, [pc, #24]	@ (800e47c <tcp_process+0x294>)
 800e464:	f008 fd0e 	bl	8016e84 <iprintf>
          pcb->unsent = rseg->next;
 800e468:	69fb      	ldr	r3, [r7, #28]
 800e46a:	681a      	ldr	r2, [r3, #0]
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	66da      	str	r2, [r3, #108]	@ 0x6c
 800e470:	e01c      	b.n	800e4ac <tcp_process+0x2c4>
 800e472:	bf00      	nop
 800e474:	08019688 	.word	0x08019688
 800e478:	080198c0 	.word	0x080198c0
 800e47c:	080196d4 	.word	0x080196d4
 800e480:	2000cb00 	.word	0x2000cb00
 800e484:	2000caf8 	.word	0x2000caf8
 800e488:	2000caf4 	.word	0x2000caf4
 800e48c:	080198dc 	.word	0x080198dc
 800e490:	2000cb01 	.word	0x2000cb01
 800e494:	2000cabc 	.word	0x2000cabc
 800e498:	2000cae4 	.word	0x2000cae4
 800e49c:	080198fc 	.word	0x080198fc
 800e4a0:	08019914 	.word	0x08019914
        } else {
          pcb->unacked = rseg->next;
 800e4a4:	69fb      	ldr	r3, [r7, #28]
 800e4a6:	681a      	ldr	r2, [r3, #0]
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800e4ac:	69f8      	ldr	r0, [r7, #28]
 800e4ae:	f7fe fd22 	bl	800cef6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d104      	bne.n	800e4c4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e4c0:	861a      	strh	r2, [r3, #48]	@ 0x30
 800e4c2:	e006      	b.n	800e4d2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d00a      	beq.n	800e4f2 <tcp_process+0x30a>
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e4e2:	687a      	ldr	r2, [r7, #4]
 800e4e4:	6910      	ldr	r0, [r2, #16]
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	6879      	ldr	r1, [r7, #4]
 800e4ea:	4798      	blx	r3
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	76bb      	strb	r3, [r7, #26]
 800e4f0:	e001      	b.n	800e4f6 <tcp_process+0x30e>
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e4f6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e4fa:	f113 0f0d 	cmn.w	r3, #13
 800e4fe:	d102      	bne.n	800e506 <tcp_process+0x31e>
          return ERR_ABRT;
 800e500:	f06f 030c 	mvn.w	r3, #12
 800e504:	e250      	b.n	800e9a8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	8b5b      	ldrh	r3, [r3, #26]
 800e50a:	f043 0302 	orr.w	r3, r3, #2
 800e50e:	b29a      	uxth	r2, r3
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e514:	e23a      	b.n	800e98c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e516:	4b98      	ldr	r3, [pc, #608]	@ (800e778 <tcp_process+0x590>)
 800e518:	781b      	ldrb	r3, [r3, #0]
 800e51a:	f003 0310 	and.w	r3, r3, #16
 800e51e:	2b00      	cmp	r3, #0
 800e520:	f000 8234 	beq.w	800e98c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e524:	4b95      	ldr	r3, [pc, #596]	@ (800e77c <tcp_process+0x594>)
 800e526:	6819      	ldr	r1, [r3, #0]
 800e528:	4b95      	ldr	r3, [pc, #596]	@ (800e780 <tcp_process+0x598>)
 800e52a:	881b      	ldrh	r3, [r3, #0]
 800e52c:	461a      	mov	r2, r3
 800e52e:	4b95      	ldr	r3, [pc, #596]	@ (800e784 <tcp_process+0x59c>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e534:	4b94      	ldr	r3, [pc, #592]	@ (800e788 <tcp_process+0x5a0>)
 800e536:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e538:	885b      	ldrh	r3, [r3, #2]
 800e53a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e53c:	4a92      	ldr	r2, [pc, #584]	@ (800e788 <tcp_process+0x5a0>)
 800e53e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e540:	8812      	ldrh	r2, [r2, #0]
 800e542:	b292      	uxth	r2, r2
 800e544:	9202      	str	r2, [sp, #8]
 800e546:	9301      	str	r3, [sp, #4]
 800e548:	4b90      	ldr	r3, [pc, #576]	@ (800e78c <tcp_process+0x5a4>)
 800e54a:	9300      	str	r3, [sp, #0]
 800e54c:	4b90      	ldr	r3, [pc, #576]	@ (800e790 <tcp_process+0x5a8>)
 800e54e:	4602      	mov	r2, r0
 800e550:	6878      	ldr	r0, [r7, #4]
 800e552:	f002 fc7f 	bl	8010e54 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e55c:	2b05      	cmp	r3, #5
 800e55e:	f200 8215 	bhi.w	800e98c <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	2200      	movs	r2, #0
 800e566:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800e568:	6878      	ldr	r0, [r7, #4]
 800e56a:	f002 fa4b 	bl	8010a04 <tcp_rexmit_rto>
      break;
 800e56e:	e20d      	b.n	800e98c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e570:	4b81      	ldr	r3, [pc, #516]	@ (800e778 <tcp_process+0x590>)
 800e572:	781b      	ldrb	r3, [r3, #0]
 800e574:	f003 0310 	and.w	r3, r3, #16
 800e578:	2b00      	cmp	r3, #0
 800e57a:	f000 80a1 	beq.w	800e6c0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e57e:	4b7f      	ldr	r3, [pc, #508]	@ (800e77c <tcp_process+0x594>)
 800e580:	681a      	ldr	r2, [r3, #0]
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e586:	1ad3      	subs	r3, r2, r3
 800e588:	3b01      	subs	r3, #1
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	db7e      	blt.n	800e68c <tcp_process+0x4a4>
 800e58e:	4b7b      	ldr	r3, [pc, #492]	@ (800e77c <tcp_process+0x594>)
 800e590:	681a      	ldr	r2, [r3, #0]
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e596:	1ad3      	subs	r3, r2, r3
 800e598:	2b00      	cmp	r3, #0
 800e59a:	dc77      	bgt.n	800e68c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	2204      	movs	r2, #4
 800e5a0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d102      	bne.n	800e5b0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e5aa:	23fa      	movs	r3, #250	@ 0xfa
 800e5ac:	76bb      	strb	r3, [r7, #26]
 800e5ae:	e01d      	b.n	800e5ec <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e5b4:	699b      	ldr	r3, [r3, #24]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d106      	bne.n	800e5c8 <tcp_process+0x3e0>
 800e5ba:	4b76      	ldr	r3, [pc, #472]	@ (800e794 <tcp_process+0x5ac>)
 800e5bc:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800e5c0:	4975      	ldr	r1, [pc, #468]	@ (800e798 <tcp_process+0x5b0>)
 800e5c2:	4876      	ldr	r0, [pc, #472]	@ (800e79c <tcp_process+0x5b4>)
 800e5c4:	f008 fc5e 	bl	8016e84 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e5cc:	699b      	ldr	r3, [r3, #24]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d00a      	beq.n	800e5e8 <tcp_process+0x400>
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e5d6:	699b      	ldr	r3, [r3, #24]
 800e5d8:	687a      	ldr	r2, [r7, #4]
 800e5da:	6910      	ldr	r0, [r2, #16]
 800e5dc:	2200      	movs	r2, #0
 800e5de:	6879      	ldr	r1, [r7, #4]
 800e5e0:	4798      	blx	r3
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	76bb      	strb	r3, [r7, #26]
 800e5e6:	e001      	b.n	800e5ec <tcp_process+0x404>
 800e5e8:	23f0      	movs	r3, #240	@ 0xf0
 800e5ea:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e5ec:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d00a      	beq.n	800e60a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e5f4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e5f8:	f113 0f0d 	cmn.w	r3, #13
 800e5fc:	d002      	beq.n	800e604 <tcp_process+0x41c>
              tcp_abort(pcb);
 800e5fe:	6878      	ldr	r0, [r7, #4]
 800e600:	f7fd ff8c 	bl	800c51c <tcp_abort>
            }
            return ERR_ABRT;
 800e604:	f06f 030c 	mvn.w	r3, #12
 800e608:	e1ce      	b.n	800e9a8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f000 fae0 	bl	800ebd0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e610:	4b63      	ldr	r3, [pc, #396]	@ (800e7a0 <tcp_process+0x5b8>)
 800e612:	881b      	ldrh	r3, [r3, #0]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d005      	beq.n	800e624 <tcp_process+0x43c>
            recv_acked--;
 800e618:	4b61      	ldr	r3, [pc, #388]	@ (800e7a0 <tcp_process+0x5b8>)
 800e61a:	881b      	ldrh	r3, [r3, #0]
 800e61c:	3b01      	subs	r3, #1
 800e61e:	b29a      	uxth	r2, r3
 800e620:	4b5f      	ldr	r3, [pc, #380]	@ (800e7a0 <tcp_process+0x5b8>)
 800e622:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e628:	009a      	lsls	r2, r3, #2
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e62e:	005b      	lsls	r3, r3, #1
 800e630:	f241 111c 	movw	r1, #4380	@ 0x111c
 800e634:	428b      	cmp	r3, r1
 800e636:	bf38      	it	cc
 800e638:	460b      	movcc	r3, r1
 800e63a:	429a      	cmp	r2, r3
 800e63c:	d204      	bcs.n	800e648 <tcp_process+0x460>
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e642:	009b      	lsls	r3, r3, #2
 800e644:	b29b      	uxth	r3, r3
 800e646:	e00d      	b.n	800e664 <tcp_process+0x47c>
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e64c:	005b      	lsls	r3, r3, #1
 800e64e:	f241 121c 	movw	r2, #4380	@ 0x111c
 800e652:	4293      	cmp	r3, r2
 800e654:	d904      	bls.n	800e660 <tcp_process+0x478>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e65a:	005b      	lsls	r3, r3, #1
 800e65c:	b29b      	uxth	r3, r3
 800e65e:	e001      	b.n	800e664 <tcp_process+0x47c>
 800e660:	f241 131c 	movw	r3, #4380	@ 0x111c
 800e664:	687a      	ldr	r2, [r7, #4]
 800e666:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e66a:	4b4e      	ldr	r3, [pc, #312]	@ (800e7a4 <tcp_process+0x5bc>)
 800e66c:	781b      	ldrb	r3, [r3, #0]
 800e66e:	f003 0320 	and.w	r3, r3, #32
 800e672:	2b00      	cmp	r3, #0
 800e674:	d037      	beq.n	800e6e6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	8b5b      	ldrh	r3, [r3, #26]
 800e67a:	f043 0302 	orr.w	r3, r3, #2
 800e67e:	b29a      	uxth	r2, r3
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2207      	movs	r2, #7
 800e688:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e68a:	e02c      	b.n	800e6e6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e68c:	4b3b      	ldr	r3, [pc, #236]	@ (800e77c <tcp_process+0x594>)
 800e68e:	6819      	ldr	r1, [r3, #0]
 800e690:	4b3b      	ldr	r3, [pc, #236]	@ (800e780 <tcp_process+0x598>)
 800e692:	881b      	ldrh	r3, [r3, #0]
 800e694:	461a      	mov	r2, r3
 800e696:	4b3b      	ldr	r3, [pc, #236]	@ (800e784 <tcp_process+0x59c>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e69c:	4b3a      	ldr	r3, [pc, #232]	@ (800e788 <tcp_process+0x5a0>)
 800e69e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e6a0:	885b      	ldrh	r3, [r3, #2]
 800e6a2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e6a4:	4a38      	ldr	r2, [pc, #224]	@ (800e788 <tcp_process+0x5a0>)
 800e6a6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e6a8:	8812      	ldrh	r2, [r2, #0]
 800e6aa:	b292      	uxth	r2, r2
 800e6ac:	9202      	str	r2, [sp, #8]
 800e6ae:	9301      	str	r3, [sp, #4]
 800e6b0:	4b36      	ldr	r3, [pc, #216]	@ (800e78c <tcp_process+0x5a4>)
 800e6b2:	9300      	str	r3, [sp, #0]
 800e6b4:	4b36      	ldr	r3, [pc, #216]	@ (800e790 <tcp_process+0x5a8>)
 800e6b6:	4602      	mov	r2, r0
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	f002 fbcb 	bl	8010e54 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e6be:	e167      	b.n	800e990 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e6c0:	4b2d      	ldr	r3, [pc, #180]	@ (800e778 <tcp_process+0x590>)
 800e6c2:	781b      	ldrb	r3, [r3, #0]
 800e6c4:	f003 0302 	and.w	r3, r3, #2
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	f000 8161 	beq.w	800e990 <tcp_process+0x7a8>
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6d2:	1e5a      	subs	r2, r3, #1
 800e6d4:	4b2b      	ldr	r3, [pc, #172]	@ (800e784 <tcp_process+0x59c>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	429a      	cmp	r2, r3
 800e6da:	f040 8159 	bne.w	800e990 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e6de:	6878      	ldr	r0, [r7, #4]
 800e6e0:	f002 f9b2 	bl	8010a48 <tcp_rexmit>
      break;
 800e6e4:	e154      	b.n	800e990 <tcp_process+0x7a8>
 800e6e6:	e153      	b.n	800e990 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e6e8:	6878      	ldr	r0, [r7, #4]
 800e6ea:	f000 fa71 	bl	800ebd0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e6ee:	4b2d      	ldr	r3, [pc, #180]	@ (800e7a4 <tcp_process+0x5bc>)
 800e6f0:	781b      	ldrb	r3, [r3, #0]
 800e6f2:	f003 0320 	and.w	r3, r3, #32
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	f000 814c 	beq.w	800e994 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	8b5b      	ldrh	r3, [r3, #26]
 800e700:	f043 0302 	orr.w	r3, r3, #2
 800e704:	b29a      	uxth	r2, r3
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2207      	movs	r2, #7
 800e70e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e710:	e140      	b.n	800e994 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f000 fa5c 	bl	800ebd0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e718:	4b22      	ldr	r3, [pc, #136]	@ (800e7a4 <tcp_process+0x5bc>)
 800e71a:	781b      	ldrb	r3, [r3, #0]
 800e71c:	f003 0320 	and.w	r3, r3, #32
 800e720:	2b00      	cmp	r3, #0
 800e722:	d071      	beq.n	800e808 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e724:	4b14      	ldr	r3, [pc, #80]	@ (800e778 <tcp_process+0x590>)
 800e726:	781b      	ldrb	r3, [r3, #0]
 800e728:	f003 0310 	and.w	r3, r3, #16
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d060      	beq.n	800e7f2 <tcp_process+0x60a>
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e734:	4b11      	ldr	r3, [pc, #68]	@ (800e77c <tcp_process+0x594>)
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	429a      	cmp	r2, r3
 800e73a:	d15a      	bne.n	800e7f2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e740:	2b00      	cmp	r3, #0
 800e742:	d156      	bne.n	800e7f2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	8b5b      	ldrh	r3, [r3, #26]
 800e748:	f043 0302 	orr.w	r3, r3, #2
 800e74c:	b29a      	uxth	r2, r3
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e752:	6878      	ldr	r0, [r7, #4]
 800e754:	f7fe fdbc 	bl	800d2d0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e758:	4b13      	ldr	r3, [pc, #76]	@ (800e7a8 <tcp_process+0x5c0>)
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	687a      	ldr	r2, [r7, #4]
 800e75e:	429a      	cmp	r2, r3
 800e760:	d105      	bne.n	800e76e <tcp_process+0x586>
 800e762:	4b11      	ldr	r3, [pc, #68]	@ (800e7a8 <tcp_process+0x5c0>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	68db      	ldr	r3, [r3, #12]
 800e768:	4a0f      	ldr	r2, [pc, #60]	@ (800e7a8 <tcp_process+0x5c0>)
 800e76a:	6013      	str	r3, [r2, #0]
 800e76c:	e02e      	b.n	800e7cc <tcp_process+0x5e4>
 800e76e:	4b0e      	ldr	r3, [pc, #56]	@ (800e7a8 <tcp_process+0x5c0>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	617b      	str	r3, [r7, #20]
 800e774:	e027      	b.n	800e7c6 <tcp_process+0x5de>
 800e776:	bf00      	nop
 800e778:	2000cb00 	.word	0x2000cb00
 800e77c:	2000caf8 	.word	0x2000caf8
 800e780:	2000cafe 	.word	0x2000cafe
 800e784:	2000caf4 	.word	0x2000caf4
 800e788:	2000cae4 	.word	0x2000cae4
 800e78c:	2000929c 	.word	0x2000929c
 800e790:	200092a0 	.word	0x200092a0
 800e794:	08019688 	.word	0x08019688
 800e798:	08019928 	.word	0x08019928
 800e79c:	080196d4 	.word	0x080196d4
 800e7a0:	2000cafc 	.word	0x2000cafc
 800e7a4:	2000cb01 	.word	0x2000cb01
 800e7a8:	2000cac8 	.word	0x2000cac8
 800e7ac:	697b      	ldr	r3, [r7, #20]
 800e7ae:	68db      	ldr	r3, [r3, #12]
 800e7b0:	687a      	ldr	r2, [r7, #4]
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	d104      	bne.n	800e7c0 <tcp_process+0x5d8>
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	68da      	ldr	r2, [r3, #12]
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	60da      	str	r2, [r3, #12]
 800e7be:	e005      	b.n	800e7cc <tcp_process+0x5e4>
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	68db      	ldr	r3, [r3, #12]
 800e7c4:	617b      	str	r3, [r7, #20]
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d1ef      	bne.n	800e7ac <tcp_process+0x5c4>
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	60da      	str	r2, [r3, #12]
 800e7d2:	4b77      	ldr	r3, [pc, #476]	@ (800e9b0 <tcp_process+0x7c8>)
 800e7d4:	2201      	movs	r2, #1
 800e7d6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	220a      	movs	r2, #10
 800e7dc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e7de:	4b75      	ldr	r3, [pc, #468]	@ (800e9b4 <tcp_process+0x7cc>)
 800e7e0:	681a      	ldr	r2, [r3, #0]
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	60da      	str	r2, [r3, #12]
 800e7e6:	4a73      	ldr	r2, [pc, #460]	@ (800e9b4 <tcp_process+0x7cc>)
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	6013      	str	r3, [r2, #0]
 800e7ec:	f002 fcf4 	bl	80111d8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e7f0:	e0d2      	b.n	800e998 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	8b5b      	ldrh	r3, [r3, #26]
 800e7f6:	f043 0302 	orr.w	r3, r3, #2
 800e7fa:	b29a      	uxth	r2, r3
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2208      	movs	r2, #8
 800e804:	751a      	strb	r2, [r3, #20]
      break;
 800e806:	e0c7      	b.n	800e998 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e808:	4b6b      	ldr	r3, [pc, #428]	@ (800e9b8 <tcp_process+0x7d0>)
 800e80a:	781b      	ldrb	r3, [r3, #0]
 800e80c:	f003 0310 	and.w	r3, r3, #16
 800e810:	2b00      	cmp	r3, #0
 800e812:	f000 80c1 	beq.w	800e998 <tcp_process+0x7b0>
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e81a:	4b68      	ldr	r3, [pc, #416]	@ (800e9bc <tcp_process+0x7d4>)
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	429a      	cmp	r2, r3
 800e820:	f040 80ba 	bne.w	800e998 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e828:	2b00      	cmp	r3, #0
 800e82a:	f040 80b5 	bne.w	800e998 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	2206      	movs	r2, #6
 800e832:	751a      	strb	r2, [r3, #20]
      break;
 800e834:	e0b0      	b.n	800e998 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f000 f9ca 	bl	800ebd0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e83c:	4b60      	ldr	r3, [pc, #384]	@ (800e9c0 <tcp_process+0x7d8>)
 800e83e:	781b      	ldrb	r3, [r3, #0]
 800e840:	f003 0320 	and.w	r3, r3, #32
 800e844:	2b00      	cmp	r3, #0
 800e846:	f000 80a9 	beq.w	800e99c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	8b5b      	ldrh	r3, [r3, #26]
 800e84e:	f043 0302 	orr.w	r3, r3, #2
 800e852:	b29a      	uxth	r2, r3
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e858:	6878      	ldr	r0, [r7, #4]
 800e85a:	f7fe fd39 	bl	800d2d0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e85e:	4b59      	ldr	r3, [pc, #356]	@ (800e9c4 <tcp_process+0x7dc>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	687a      	ldr	r2, [r7, #4]
 800e864:	429a      	cmp	r2, r3
 800e866:	d105      	bne.n	800e874 <tcp_process+0x68c>
 800e868:	4b56      	ldr	r3, [pc, #344]	@ (800e9c4 <tcp_process+0x7dc>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	68db      	ldr	r3, [r3, #12]
 800e86e:	4a55      	ldr	r2, [pc, #340]	@ (800e9c4 <tcp_process+0x7dc>)
 800e870:	6013      	str	r3, [r2, #0]
 800e872:	e013      	b.n	800e89c <tcp_process+0x6b4>
 800e874:	4b53      	ldr	r3, [pc, #332]	@ (800e9c4 <tcp_process+0x7dc>)
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	613b      	str	r3, [r7, #16]
 800e87a:	e00c      	b.n	800e896 <tcp_process+0x6ae>
 800e87c:	693b      	ldr	r3, [r7, #16]
 800e87e:	68db      	ldr	r3, [r3, #12]
 800e880:	687a      	ldr	r2, [r7, #4]
 800e882:	429a      	cmp	r2, r3
 800e884:	d104      	bne.n	800e890 <tcp_process+0x6a8>
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	68da      	ldr	r2, [r3, #12]
 800e88a:	693b      	ldr	r3, [r7, #16]
 800e88c:	60da      	str	r2, [r3, #12]
 800e88e:	e005      	b.n	800e89c <tcp_process+0x6b4>
 800e890:	693b      	ldr	r3, [r7, #16]
 800e892:	68db      	ldr	r3, [r3, #12]
 800e894:	613b      	str	r3, [r7, #16]
 800e896:	693b      	ldr	r3, [r7, #16]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d1ef      	bne.n	800e87c <tcp_process+0x694>
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2200      	movs	r2, #0
 800e8a0:	60da      	str	r2, [r3, #12]
 800e8a2:	4b43      	ldr	r3, [pc, #268]	@ (800e9b0 <tcp_process+0x7c8>)
 800e8a4:	2201      	movs	r2, #1
 800e8a6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	220a      	movs	r2, #10
 800e8ac:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e8ae:	4b41      	ldr	r3, [pc, #260]	@ (800e9b4 <tcp_process+0x7cc>)
 800e8b0:	681a      	ldr	r2, [r3, #0]
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	60da      	str	r2, [r3, #12]
 800e8b6:	4a3f      	ldr	r2, [pc, #252]	@ (800e9b4 <tcp_process+0x7cc>)
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	6013      	str	r3, [r2, #0]
 800e8bc:	f002 fc8c 	bl	80111d8 <tcp_timer_needed>
      }
      break;
 800e8c0:	e06c      	b.n	800e99c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e8c2:	6878      	ldr	r0, [r7, #4]
 800e8c4:	f000 f984 	bl	800ebd0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e8c8:	4b3b      	ldr	r3, [pc, #236]	@ (800e9b8 <tcp_process+0x7d0>)
 800e8ca:	781b      	ldrb	r3, [r3, #0]
 800e8cc:	f003 0310 	and.w	r3, r3, #16
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d065      	beq.n	800e9a0 <tcp_process+0x7b8>
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e8d8:	4b38      	ldr	r3, [pc, #224]	@ (800e9bc <tcp_process+0x7d4>)
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	429a      	cmp	r2, r3
 800e8de:	d15f      	bne.n	800e9a0 <tcp_process+0x7b8>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d15b      	bne.n	800e9a0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800e8e8:	6878      	ldr	r0, [r7, #4]
 800e8ea:	f7fe fcf1 	bl	800d2d0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e8ee:	4b35      	ldr	r3, [pc, #212]	@ (800e9c4 <tcp_process+0x7dc>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	687a      	ldr	r2, [r7, #4]
 800e8f4:	429a      	cmp	r2, r3
 800e8f6:	d105      	bne.n	800e904 <tcp_process+0x71c>
 800e8f8:	4b32      	ldr	r3, [pc, #200]	@ (800e9c4 <tcp_process+0x7dc>)
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	68db      	ldr	r3, [r3, #12]
 800e8fe:	4a31      	ldr	r2, [pc, #196]	@ (800e9c4 <tcp_process+0x7dc>)
 800e900:	6013      	str	r3, [r2, #0]
 800e902:	e013      	b.n	800e92c <tcp_process+0x744>
 800e904:	4b2f      	ldr	r3, [pc, #188]	@ (800e9c4 <tcp_process+0x7dc>)
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	60fb      	str	r3, [r7, #12]
 800e90a:	e00c      	b.n	800e926 <tcp_process+0x73e>
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	68db      	ldr	r3, [r3, #12]
 800e910:	687a      	ldr	r2, [r7, #4]
 800e912:	429a      	cmp	r2, r3
 800e914:	d104      	bne.n	800e920 <tcp_process+0x738>
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	68da      	ldr	r2, [r3, #12]
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	60da      	str	r2, [r3, #12]
 800e91e:	e005      	b.n	800e92c <tcp_process+0x744>
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	68db      	ldr	r3, [r3, #12]
 800e924:	60fb      	str	r3, [r7, #12]
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d1ef      	bne.n	800e90c <tcp_process+0x724>
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2200      	movs	r2, #0
 800e930:	60da      	str	r2, [r3, #12]
 800e932:	4b1f      	ldr	r3, [pc, #124]	@ (800e9b0 <tcp_process+0x7c8>)
 800e934:	2201      	movs	r2, #1
 800e936:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	220a      	movs	r2, #10
 800e93c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e93e:	4b1d      	ldr	r3, [pc, #116]	@ (800e9b4 <tcp_process+0x7cc>)
 800e940:	681a      	ldr	r2, [r3, #0]
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	60da      	str	r2, [r3, #12]
 800e946:	4a1b      	ldr	r2, [pc, #108]	@ (800e9b4 <tcp_process+0x7cc>)
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	6013      	str	r3, [r2, #0]
 800e94c:	f002 fc44 	bl	80111d8 <tcp_timer_needed>
      }
      break;
 800e950:	e026      	b.n	800e9a0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800e952:	6878      	ldr	r0, [r7, #4]
 800e954:	f000 f93c 	bl	800ebd0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e958:	4b17      	ldr	r3, [pc, #92]	@ (800e9b8 <tcp_process+0x7d0>)
 800e95a:	781b      	ldrb	r3, [r3, #0]
 800e95c:	f003 0310 	and.w	r3, r3, #16
 800e960:	2b00      	cmp	r3, #0
 800e962:	d01f      	beq.n	800e9a4 <tcp_process+0x7bc>
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e968:	4b14      	ldr	r3, [pc, #80]	@ (800e9bc <tcp_process+0x7d4>)
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	429a      	cmp	r2, r3
 800e96e:	d119      	bne.n	800e9a4 <tcp_process+0x7bc>
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e974:	2b00      	cmp	r3, #0
 800e976:	d115      	bne.n	800e9a4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800e978:	4b11      	ldr	r3, [pc, #68]	@ (800e9c0 <tcp_process+0x7d8>)
 800e97a:	781b      	ldrb	r3, [r3, #0]
 800e97c:	f043 0310 	orr.w	r3, r3, #16
 800e980:	b2da      	uxtb	r2, r3
 800e982:	4b0f      	ldr	r3, [pc, #60]	@ (800e9c0 <tcp_process+0x7d8>)
 800e984:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e986:	e00d      	b.n	800e9a4 <tcp_process+0x7bc>
    default:
      break;
 800e988:	bf00      	nop
 800e98a:	e00c      	b.n	800e9a6 <tcp_process+0x7be>
      break;
 800e98c:	bf00      	nop
 800e98e:	e00a      	b.n	800e9a6 <tcp_process+0x7be>
      break;
 800e990:	bf00      	nop
 800e992:	e008      	b.n	800e9a6 <tcp_process+0x7be>
      break;
 800e994:	bf00      	nop
 800e996:	e006      	b.n	800e9a6 <tcp_process+0x7be>
      break;
 800e998:	bf00      	nop
 800e99a:	e004      	b.n	800e9a6 <tcp_process+0x7be>
      break;
 800e99c:	bf00      	nop
 800e99e:	e002      	b.n	800e9a6 <tcp_process+0x7be>
      break;
 800e9a0:	bf00      	nop
 800e9a2:	e000      	b.n	800e9a6 <tcp_process+0x7be>
      break;
 800e9a4:	bf00      	nop
  }
  return ERR_OK;
 800e9a6:	2300      	movs	r3, #0
}
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	3724      	adds	r7, #36	@ 0x24
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd90      	pop	{r4, r7, pc}
 800e9b0:	2000cad0 	.word	0x2000cad0
 800e9b4:	2000cacc 	.word	0x2000cacc
 800e9b8:	2000cb00 	.word	0x2000cb00
 800e9bc:	2000caf8 	.word	0x2000caf8
 800e9c0:	2000cb01 	.word	0x2000cb01
 800e9c4:	2000cac8 	.word	0x2000cac8

0800e9c8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800e9c8:	b590      	push	{r4, r7, lr}
 800e9ca:	b085      	sub	sp, #20
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
 800e9d0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d106      	bne.n	800e9e6 <tcp_oos_insert_segment+0x1e>
 800e9d8:	4b3b      	ldr	r3, [pc, #236]	@ (800eac8 <tcp_oos_insert_segment+0x100>)
 800e9da:	f240 421f 	movw	r2, #1055	@ 0x41f
 800e9de:	493b      	ldr	r1, [pc, #236]	@ (800eacc <tcp_oos_insert_segment+0x104>)
 800e9e0:	483b      	ldr	r0, [pc, #236]	@ (800ead0 <tcp_oos_insert_segment+0x108>)
 800e9e2:	f008 fa4f 	bl	8016e84 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	68db      	ldr	r3, [r3, #12]
 800e9ea:	899b      	ldrh	r3, [r3, #12]
 800e9ec:	b29b      	uxth	r3, r3
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f7fb fa9c 	bl	8009f2c <lwip_htons>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	b2db      	uxtb	r3, r3
 800e9f8:	f003 0301 	and.w	r3, r3, #1
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d028      	beq.n	800ea52 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ea00:	6838      	ldr	r0, [r7, #0]
 800ea02:	f7fe fa63 	bl	800cecc <tcp_segs_free>
    next = NULL;
 800ea06:	2300      	movs	r3, #0
 800ea08:	603b      	str	r3, [r7, #0]
 800ea0a:	e056      	b.n	800eaba <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ea0c:	683b      	ldr	r3, [r7, #0]
 800ea0e:	68db      	ldr	r3, [r3, #12]
 800ea10:	899b      	ldrh	r3, [r3, #12]
 800ea12:	b29b      	uxth	r3, r3
 800ea14:	4618      	mov	r0, r3
 800ea16:	f7fb fa89 	bl	8009f2c <lwip_htons>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	b2db      	uxtb	r3, r3
 800ea1e:	f003 0301 	and.w	r3, r3, #1
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d00d      	beq.n	800ea42 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	68db      	ldr	r3, [r3, #12]
 800ea2a:	899b      	ldrh	r3, [r3, #12]
 800ea2c:	b29c      	uxth	r4, r3
 800ea2e:	2001      	movs	r0, #1
 800ea30:	f7fb fa7c 	bl	8009f2c <lwip_htons>
 800ea34:	4603      	mov	r3, r0
 800ea36:	461a      	mov	r2, r3
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	68db      	ldr	r3, [r3, #12]
 800ea3c:	4322      	orrs	r2, r4
 800ea3e:	b292      	uxth	r2, r2
 800ea40:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ea4c:	68f8      	ldr	r0, [r7, #12]
 800ea4e:	f7fe fa52 	bl	800cef6 <tcp_seg_free>
    while (next &&
 800ea52:	683b      	ldr	r3, [r7, #0]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d00e      	beq.n	800ea76 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	891b      	ldrh	r3, [r3, #8]
 800ea5c:	461a      	mov	r2, r3
 800ea5e:	4b1d      	ldr	r3, [pc, #116]	@ (800ead4 <tcp_oos_insert_segment+0x10c>)
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	441a      	add	r2, r3
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	68db      	ldr	r3, [r3, #12]
 800ea68:	685b      	ldr	r3, [r3, #4]
 800ea6a:	6839      	ldr	r1, [r7, #0]
 800ea6c:	8909      	ldrh	r1, [r1, #8]
 800ea6e:	440b      	add	r3, r1
 800ea70:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	daca      	bge.n	800ea0c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d01e      	beq.n	800eaba <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	891b      	ldrh	r3, [r3, #8]
 800ea80:	461a      	mov	r2, r3
 800ea82:	4b14      	ldr	r3, [pc, #80]	@ (800ead4 <tcp_oos_insert_segment+0x10c>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	441a      	add	r2, r3
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	68db      	ldr	r3, [r3, #12]
 800ea8c:	685b      	ldr	r3, [r3, #4]
 800ea8e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	dd12      	ble.n	800eaba <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	68db      	ldr	r3, [r3, #12]
 800ea98:	685b      	ldr	r3, [r3, #4]
 800ea9a:	b29a      	uxth	r2, r3
 800ea9c:	4b0d      	ldr	r3, [pc, #52]	@ (800ead4 <tcp_oos_insert_segment+0x10c>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	b29b      	uxth	r3, r3
 800eaa2:	1ad3      	subs	r3, r2, r3
 800eaa4:	b29a      	uxth	r2, r3
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	685a      	ldr	r2, [r3, #4]
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	891b      	ldrh	r3, [r3, #8]
 800eab2:	4619      	mov	r1, r3
 800eab4:	4610      	mov	r0, r2
 800eab6:	f7fc fe07 	bl	800b6c8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	683a      	ldr	r2, [r7, #0]
 800eabe:	601a      	str	r2, [r3, #0]
}
 800eac0:	bf00      	nop
 800eac2:	3714      	adds	r7, #20
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd90      	pop	{r4, r7, pc}
 800eac8:	08019688 	.word	0x08019688
 800eacc:	08019948 	.word	0x08019948
 800ead0:	080196d4 	.word	0x080196d4
 800ead4:	2000caf4 	.word	0x2000caf4

0800ead8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ead8:	b5b0      	push	{r4, r5, r7, lr}
 800eada:	b086      	sub	sp, #24
 800eadc:	af00      	add	r7, sp, #0
 800eade:	60f8      	str	r0, [r7, #12]
 800eae0:	60b9      	str	r1, [r7, #8]
 800eae2:	607a      	str	r2, [r7, #4]
 800eae4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800eae6:	e03e      	b.n	800eb66 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800eae8:	68bb      	ldr	r3, [r7, #8]
 800eaea:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800eaec:	68bb      	ldr	r3, [r7, #8]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800eaf2:	697b      	ldr	r3, [r7, #20]
 800eaf4:	685b      	ldr	r3, [r3, #4]
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	f7fc fffa 	bl	800baf0 <pbuf_clen>
 800eafc:	4603      	mov	r3, r0
 800eafe:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800eb06:	8a7a      	ldrh	r2, [r7, #18]
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	d906      	bls.n	800eb1a <tcp_free_acked_segments+0x42>
 800eb0c:	4b2a      	ldr	r3, [pc, #168]	@ (800ebb8 <tcp_free_acked_segments+0xe0>)
 800eb0e:	f240 4257 	movw	r2, #1111	@ 0x457
 800eb12:	492a      	ldr	r1, [pc, #168]	@ (800ebbc <tcp_free_acked_segments+0xe4>)
 800eb14:	482a      	ldr	r0, [pc, #168]	@ (800ebc0 <tcp_free_acked_segments+0xe8>)
 800eb16:	f008 f9b5 	bl	8016e84 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800eb20:	8a7b      	ldrh	r3, [r7, #18]
 800eb22:	1ad3      	subs	r3, r2, r3
 800eb24:	b29a      	uxth	r2, r3
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800eb2c:	697b      	ldr	r3, [r7, #20]
 800eb2e:	891a      	ldrh	r2, [r3, #8]
 800eb30:	4b24      	ldr	r3, [pc, #144]	@ (800ebc4 <tcp_free_acked_segments+0xec>)
 800eb32:	881b      	ldrh	r3, [r3, #0]
 800eb34:	4413      	add	r3, r2
 800eb36:	b29a      	uxth	r2, r3
 800eb38:	4b22      	ldr	r3, [pc, #136]	@ (800ebc4 <tcp_free_acked_segments+0xec>)
 800eb3a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800eb3c:	6978      	ldr	r0, [r7, #20]
 800eb3e:	f7fe f9da 	bl	800cef6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d00c      	beq.n	800eb66 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800eb4c:	68bb      	ldr	r3, [r7, #8]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d109      	bne.n	800eb66 <tcp_free_acked_segments+0x8e>
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d106      	bne.n	800eb66 <tcp_free_acked_segments+0x8e>
 800eb58:	4b17      	ldr	r3, [pc, #92]	@ (800ebb8 <tcp_free_acked_segments+0xe0>)
 800eb5a:	f240 4261 	movw	r2, #1121	@ 0x461
 800eb5e:	491a      	ldr	r1, [pc, #104]	@ (800ebc8 <tcp_free_acked_segments+0xf0>)
 800eb60:	4817      	ldr	r0, [pc, #92]	@ (800ebc0 <tcp_free_acked_segments+0xe8>)
 800eb62:	f008 f98f 	bl	8016e84 <iprintf>
  while (seg_list != NULL &&
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d020      	beq.n	800ebae <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800eb6c:	68bb      	ldr	r3, [r7, #8]
 800eb6e:	68db      	ldr	r3, [r3, #12]
 800eb70:	685b      	ldr	r3, [r3, #4]
 800eb72:	4618      	mov	r0, r3
 800eb74:	f7fb f9ef 	bl	8009f56 <lwip_htonl>
 800eb78:	4604      	mov	r4, r0
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	891b      	ldrh	r3, [r3, #8]
 800eb7e:	461d      	mov	r5, r3
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	68db      	ldr	r3, [r3, #12]
 800eb84:	899b      	ldrh	r3, [r3, #12]
 800eb86:	b29b      	uxth	r3, r3
 800eb88:	4618      	mov	r0, r3
 800eb8a:	f7fb f9cf 	bl	8009f2c <lwip_htons>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	b2db      	uxtb	r3, r3
 800eb92:	f003 0303 	and.w	r3, r3, #3
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d001      	beq.n	800eb9e <tcp_free_acked_segments+0xc6>
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	e000      	b.n	800eba0 <tcp_free_acked_segments+0xc8>
 800eb9e:	2300      	movs	r3, #0
 800eba0:	442b      	add	r3, r5
 800eba2:	18e2      	adds	r2, r4, r3
 800eba4:	4b09      	ldr	r3, [pc, #36]	@ (800ebcc <tcp_free_acked_segments+0xf4>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	dd9c      	ble.n	800eae8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ebae:	68bb      	ldr	r3, [r7, #8]
}
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	3718      	adds	r7, #24
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	bdb0      	pop	{r4, r5, r7, pc}
 800ebb8:	08019688 	.word	0x08019688
 800ebbc:	08019970 	.word	0x08019970
 800ebc0:	080196d4 	.word	0x080196d4
 800ebc4:	2000cafc 	.word	0x2000cafc
 800ebc8:	08019998 	.word	0x08019998
 800ebcc:	2000caf8 	.word	0x2000caf8

0800ebd0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ebd0:	b5b0      	push	{r4, r5, r7, lr}
 800ebd2:	b094      	sub	sp, #80	@ 0x50
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ebd8:	2300      	movs	r3, #0
 800ebda:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d106      	bne.n	800ebf0 <tcp_receive+0x20>
 800ebe2:	4b91      	ldr	r3, [pc, #580]	@ (800ee28 <tcp_receive+0x258>)
 800ebe4:	f240 427b 	movw	r2, #1147	@ 0x47b
 800ebe8:	4990      	ldr	r1, [pc, #576]	@ (800ee2c <tcp_receive+0x25c>)
 800ebea:	4891      	ldr	r0, [pc, #580]	@ (800ee30 <tcp_receive+0x260>)
 800ebec:	f008 f94a 	bl	8016e84 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	7d1b      	ldrb	r3, [r3, #20]
 800ebf4:	2b03      	cmp	r3, #3
 800ebf6:	d806      	bhi.n	800ec06 <tcp_receive+0x36>
 800ebf8:	4b8b      	ldr	r3, [pc, #556]	@ (800ee28 <tcp_receive+0x258>)
 800ebfa:	f240 427c 	movw	r2, #1148	@ 0x47c
 800ebfe:	498d      	ldr	r1, [pc, #564]	@ (800ee34 <tcp_receive+0x264>)
 800ec00:	488b      	ldr	r0, [pc, #556]	@ (800ee30 <tcp_receive+0x260>)
 800ec02:	f008 f93f 	bl	8016e84 <iprintf>

  if (flags & TCP_ACK) {
 800ec06:	4b8c      	ldr	r3, [pc, #560]	@ (800ee38 <tcp_receive+0x268>)
 800ec08:	781b      	ldrb	r3, [r3, #0]
 800ec0a:	f003 0310 	and.w	r3, r3, #16
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	f000 8264 	beq.w	800f0dc <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ec1a:	461a      	mov	r2, r3
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ec20:	4413      	add	r3, r2
 800ec22:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ec28:	4b84      	ldr	r3, [pc, #528]	@ (800ee3c <tcp_receive+0x26c>)
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	1ad3      	subs	r3, r2, r3
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	db1b      	blt.n	800ec6a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ec36:	4b81      	ldr	r3, [pc, #516]	@ (800ee3c <tcp_receive+0x26c>)
 800ec38:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	d106      	bne.n	800ec4c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ec42:	4b7f      	ldr	r3, [pc, #508]	@ (800ee40 <tcp_receive+0x270>)
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	1ad3      	subs	r3, r2, r3
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	db0e      	blt.n	800ec6a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ec50:	4b7b      	ldr	r3, [pc, #492]	@ (800ee40 <tcp_receive+0x270>)
 800ec52:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ec54:	429a      	cmp	r2, r3
 800ec56:	d125      	bne.n	800eca4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ec58:	4b7a      	ldr	r3, [pc, #488]	@ (800ee44 <tcp_receive+0x274>)
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	89db      	ldrh	r3, [r3, #14]
 800ec5e:	b29a      	uxth	r2, r3
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ec66:	429a      	cmp	r2, r3
 800ec68:	d91c      	bls.n	800eca4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ec6a:	4b76      	ldr	r3, [pc, #472]	@ (800ee44 <tcp_receive+0x274>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	89db      	ldrh	r3, [r3, #14]
 800ec70:	b29a      	uxth	r2, r3
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ec84:	429a      	cmp	r2, r3
 800ec86:	d205      	bcs.n	800ec94 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800ec94:	4b69      	ldr	r3, [pc, #420]	@ (800ee3c <tcp_receive+0x26c>)
 800ec96:	681a      	ldr	r2, [r3, #0]
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800ec9c:	4b68      	ldr	r3, [pc, #416]	@ (800ee40 <tcp_receive+0x270>)
 800ec9e:	681a      	ldr	r2, [r3, #0]
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800eca4:	4b66      	ldr	r3, [pc, #408]	@ (800ee40 <tcp_receive+0x270>)
 800eca6:	681a      	ldr	r2, [r3, #0]
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ecac:	1ad3      	subs	r3, r2, r3
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	dc58      	bgt.n	800ed64 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ecb2:	4b65      	ldr	r3, [pc, #404]	@ (800ee48 <tcp_receive+0x278>)
 800ecb4:	881b      	ldrh	r3, [r3, #0]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d14b      	bne.n	800ed52 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ecbe:	687a      	ldr	r2, [r7, #4]
 800ecc0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800ecc4:	4413      	add	r3, r2
 800ecc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	d142      	bne.n	800ed52 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	db3d      	blt.n	800ed52 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ecda:	4b59      	ldr	r3, [pc, #356]	@ (800ee40 <tcp_receive+0x270>)
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	429a      	cmp	r2, r3
 800ece0:	d137      	bne.n	800ed52 <tcp_receive+0x182>
              found_dupack = 1;
 800ece2:	2301      	movs	r3, #1
 800ece4:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ecec:	2bff      	cmp	r3, #255	@ 0xff
 800ecee:	d007      	beq.n	800ed00 <tcp_receive+0x130>
                ++pcb->dupacks;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ecf6:	3301      	adds	r3, #1
 800ecf8:	b2da      	uxtb	r2, r3
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ed06:	2b03      	cmp	r3, #3
 800ed08:	d91b      	bls.n	800ed42 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ed14:	4413      	add	r3, r2
 800ed16:	b29a      	uxth	r2, r3
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ed1e:	429a      	cmp	r2, r3
 800ed20:	d30a      	bcc.n	800ed38 <tcp_receive+0x168>
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ed2c:	4413      	add	r3, r2
 800ed2e:	b29a      	uxth	r2, r3
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800ed36:	e004      	b.n	800ed42 <tcp_receive+0x172>
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ed3e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ed48:	2b02      	cmp	r3, #2
 800ed4a:	d902      	bls.n	800ed52 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800ed4c:	6878      	ldr	r0, [r7, #4]
 800ed4e:	f001 fee7 	bl	8010b20 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800ed52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	f040 8161 	bne.w	800f01c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ed62:	e15b      	b.n	800f01c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ed64:	4b36      	ldr	r3, [pc, #216]	@ (800ee40 <tcp_receive+0x270>)
 800ed66:	681a      	ldr	r2, [r3, #0]
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed6c:	1ad3      	subs	r3, r2, r3
 800ed6e:	3b01      	subs	r3, #1
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	f2c0 814e 	blt.w	800f012 <tcp_receive+0x442>
 800ed76:	4b32      	ldr	r3, [pc, #200]	@ (800ee40 <tcp_receive+0x270>)
 800ed78:	681a      	ldr	r2, [r3, #0]
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed7e:	1ad3      	subs	r3, r2, r3
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	f300 8146 	bgt.w	800f012 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	8b5b      	ldrh	r3, [r3, #26]
 800ed8a:	f003 0304 	and.w	r3, r3, #4
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d010      	beq.n	800edb4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	8b5b      	ldrh	r3, [r3, #26]
 800ed96:	f023 0304 	bic.w	r3, r3, #4
 800ed9a:	b29a      	uxth	r2, r3
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2200      	movs	r2, #0
 800edb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2200      	movs	r2, #0
 800edb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800edc2:	10db      	asrs	r3, r3, #3
 800edc4:	b21b      	sxth	r3, r3
 800edc6:	b29a      	uxth	r2, r3
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800edce:	b29b      	uxth	r3, r3
 800edd0:	4413      	add	r3, r2
 800edd2:	b29b      	uxth	r3, r3
 800edd4:	b21a      	sxth	r2, r3
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800eddc:	4b18      	ldr	r3, [pc, #96]	@ (800ee40 <tcp_receive+0x270>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	b29a      	uxth	r2, r3
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ede6:	b29b      	uxth	r3, r3
 800ede8:	1ad3      	subs	r3, r2, r3
 800edea:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2200      	movs	r2, #0
 800edf0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800edf4:	4b12      	ldr	r3, [pc, #72]	@ (800ee40 <tcp_receive+0x270>)
 800edf6:	681a      	ldr	r2, [r3, #0]
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	7d1b      	ldrb	r3, [r3, #20]
 800ee00:	2b03      	cmp	r3, #3
 800ee02:	f240 8097 	bls.w	800ef34 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800ee12:	429a      	cmp	r2, r3
 800ee14:	d245      	bcs.n	800eea2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	8b5b      	ldrh	r3, [r3, #26]
 800ee1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d014      	beq.n	800ee4c <tcp_receive+0x27c>
 800ee22:	2301      	movs	r3, #1
 800ee24:	e013      	b.n	800ee4e <tcp_receive+0x27e>
 800ee26:	bf00      	nop
 800ee28:	08019688 	.word	0x08019688
 800ee2c:	080199b8 	.word	0x080199b8
 800ee30:	080196d4 	.word	0x080196d4
 800ee34:	080199d4 	.word	0x080199d4
 800ee38:	2000cb00 	.word	0x2000cb00
 800ee3c:	2000caf4 	.word	0x2000caf4
 800ee40:	2000caf8 	.word	0x2000caf8
 800ee44:	2000cae4 	.word	0x2000cae4
 800ee48:	2000cafe 	.word	0x2000cafe
 800ee4c:	2302      	movs	r3, #2
 800ee4e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ee52:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800ee56:	b29a      	uxth	r2, r3
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ee5c:	fb12 f303 	smulbb	r3, r2, r3
 800ee60:	b29b      	uxth	r3, r3
 800ee62:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ee64:	4293      	cmp	r3, r2
 800ee66:	bf28      	it	cs
 800ee68:	4613      	movcs	r3, r2
 800ee6a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ee72:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ee74:	4413      	add	r3, r2
 800ee76:	b29a      	uxth	r2, r3
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ee7e:	429a      	cmp	r2, r3
 800ee80:	d309      	bcc.n	800ee96 <tcp_receive+0x2c6>
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ee88:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ee8a:	4413      	add	r3, r2
 800ee8c:	b29a      	uxth	r2, r3
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800ee94:	e04e      	b.n	800ef34 <tcp_receive+0x364>
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ee9c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800eea0:	e048      	b.n	800ef34 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800eea8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800eeaa:	4413      	add	r3, r2
 800eeac:	b29a      	uxth	r2, r3
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800eeb4:	429a      	cmp	r2, r3
 800eeb6:	d309      	bcc.n	800eecc <tcp_receive+0x2fc>
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800eebe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800eec0:	4413      	add	r3, r2
 800eec2:	b29a      	uxth	r2, r3
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800eeca:	e004      	b.n	800eed6 <tcp_receive+0x306>
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800eed2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800eee2:	429a      	cmp	r2, r3
 800eee4:	d326      	bcc.n	800ef34 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800eef2:	1ad3      	subs	r3, r2, r3
 800eef4:	b29a      	uxth	r2, r3
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ef06:	4413      	add	r3, r2
 800ef08:	b29a      	uxth	r2, r3
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ef10:	429a      	cmp	r2, r3
 800ef12:	d30a      	bcc.n	800ef2a <tcp_receive+0x35a>
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ef1e:	4413      	add	r3, r2
 800ef20:	b29a      	uxth	r2, r3
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800ef28:	e004      	b.n	800ef34 <tcp_receive+0x364>
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ef30:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ef3c:	4a98      	ldr	r2, [pc, #608]	@ (800f1a0 <tcp_receive+0x5d0>)
 800ef3e:	6878      	ldr	r0, [r7, #4]
 800ef40:	f7ff fdca 	bl	800ead8 <tcp_free_acked_segments>
 800ef44:	4602      	mov	r2, r0
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef52:	4a94      	ldr	r2, [pc, #592]	@ (800f1a4 <tcp_receive+0x5d4>)
 800ef54:	6878      	ldr	r0, [r7, #4]
 800ef56:	f7ff fdbf 	bl	800ead8 <tcp_free_acked_segments>
 800ef5a:	4602      	mov	r2, r0
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d104      	bne.n	800ef72 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ef6e:	861a      	strh	r2, [r3, #48]	@ 0x30
 800ef70:	e002      	b.n	800ef78 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	2200      	movs	r2, #0
 800ef76:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d103      	bne.n	800ef8e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2200      	movs	r2, #0
 800ef8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800ef94:	4b84      	ldr	r3, [pc, #528]	@ (800f1a8 <tcp_receive+0x5d8>)
 800ef96:	881b      	ldrh	r3, [r3, #0]
 800ef98:	4413      	add	r3, r2
 800ef9a:	b29a      	uxth	r2, r3
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	8b5b      	ldrh	r3, [r3, #26]
 800efa6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d035      	beq.n	800f01a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d118      	bne.n	800efe8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d00c      	beq.n	800efd8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800efc6:	68db      	ldr	r3, [r3, #12]
 800efc8:	685b      	ldr	r3, [r3, #4]
 800efca:	4618      	mov	r0, r3
 800efcc:	f7fa ffc3 	bl	8009f56 <lwip_htonl>
 800efd0:	4603      	mov	r3, r0
 800efd2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	dc20      	bgt.n	800f01a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	8b5b      	ldrh	r3, [r3, #26]
 800efdc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800efe0:	b29a      	uxth	r2, r3
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800efe6:	e018      	b.n	800f01a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eff0:	68db      	ldr	r3, [r3, #12]
 800eff2:	685b      	ldr	r3, [r3, #4]
 800eff4:	4618      	mov	r0, r3
 800eff6:	f7fa ffae 	bl	8009f56 <lwip_htonl>
 800effa:	4603      	mov	r3, r0
 800effc:	1ae3      	subs	r3, r4, r3
 800effe:	2b00      	cmp	r3, #0
 800f000:	dc0b      	bgt.n	800f01a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	8b5b      	ldrh	r3, [r3, #26]
 800f006:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f00a:	b29a      	uxth	r2, r3
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f010:	e003      	b.n	800f01a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f012:	6878      	ldr	r0, [r7, #4]
 800f014:	f001 ff70 	bl	8010ef8 <tcp_send_empty_ack>
 800f018:	e000      	b.n	800f01c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f01a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f020:	2b00      	cmp	r3, #0
 800f022:	d05b      	beq.n	800f0dc <tcp_receive+0x50c>
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f028:	4b60      	ldr	r3, [pc, #384]	@ (800f1ac <tcp_receive+0x5dc>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	1ad3      	subs	r3, r2, r3
 800f02e:	2b00      	cmp	r3, #0
 800f030:	da54      	bge.n	800f0dc <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f032:	4b5f      	ldr	r3, [pc, #380]	@ (800f1b0 <tcp_receive+0x5e0>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	b29a      	uxth	r2, r3
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f03c:	b29b      	uxth	r3, r3
 800f03e:	1ad3      	subs	r3, r2, r3
 800f040:	b29b      	uxth	r3, r3
 800f042:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f046:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f050:	10db      	asrs	r3, r3, #3
 800f052:	b21b      	sxth	r3, r3
 800f054:	b29b      	uxth	r3, r3
 800f056:	1ad3      	subs	r3, r2, r3
 800f058:	b29b      	uxth	r3, r3
 800f05a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f064:	b29a      	uxth	r2, r3
 800f066:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f06a:	4413      	add	r3, r2
 800f06c:	b29b      	uxth	r3, r3
 800f06e:	b21a      	sxth	r2, r3
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800f074:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800f078:	2b00      	cmp	r3, #0
 800f07a:	da05      	bge.n	800f088 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800f07c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f080:	425b      	negs	r3, r3
 800f082:	b29b      	uxth	r3, r3
 800f084:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f088:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f092:	109b      	asrs	r3, r3, #2
 800f094:	b21b      	sxth	r3, r3
 800f096:	b29b      	uxth	r3, r3
 800f098:	1ad3      	subs	r3, r2, r3
 800f09a:	b29b      	uxth	r3, r3
 800f09c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f0a6:	b29a      	uxth	r2, r3
 800f0a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f0ac:	4413      	add	r3, r2
 800f0ae:	b29b      	uxth	r3, r3
 800f0b0:	b21a      	sxth	r2, r3
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f0bc:	10db      	asrs	r3, r3, #3
 800f0be:	b21b      	sxth	r3, r3
 800f0c0:	b29a      	uxth	r2, r3
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f0c8:	b29b      	uxth	r3, r3
 800f0ca:	4413      	add	r3, r2
 800f0cc:	b29b      	uxth	r3, r3
 800f0ce:	b21a      	sxth	r2, r3
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	2200      	movs	r2, #0
 800f0da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f0dc:	4b35      	ldr	r3, [pc, #212]	@ (800f1b4 <tcp_receive+0x5e4>)
 800f0de:	881b      	ldrh	r3, [r3, #0]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	f000 84df 	beq.w	800faa4 <tcp_receive+0xed4>
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	7d1b      	ldrb	r3, [r3, #20]
 800f0ea:	2b06      	cmp	r3, #6
 800f0ec:	f200 84da 	bhi.w	800faa4 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f0f4:	4b30      	ldr	r3, [pc, #192]	@ (800f1b8 <tcp_receive+0x5e8>)
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	1ad3      	subs	r3, r2, r3
 800f0fa:	3b01      	subs	r3, #1
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	f2c0 808f 	blt.w	800f220 <tcp_receive+0x650>
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f106:	4b2b      	ldr	r3, [pc, #172]	@ (800f1b4 <tcp_receive+0x5e4>)
 800f108:	881b      	ldrh	r3, [r3, #0]
 800f10a:	4619      	mov	r1, r3
 800f10c:	4b2a      	ldr	r3, [pc, #168]	@ (800f1b8 <tcp_receive+0x5e8>)
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	440b      	add	r3, r1
 800f112:	1ad3      	subs	r3, r2, r3
 800f114:	3301      	adds	r3, #1
 800f116:	2b00      	cmp	r3, #0
 800f118:	f300 8082 	bgt.w	800f220 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f11c:	4b27      	ldr	r3, [pc, #156]	@ (800f1bc <tcp_receive+0x5ec>)
 800f11e:	685b      	ldr	r3, [r3, #4]
 800f120:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f126:	4b24      	ldr	r3, [pc, #144]	@ (800f1b8 <tcp_receive+0x5e8>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	1ad3      	subs	r3, r2, r3
 800f12c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f12e:	4b23      	ldr	r3, [pc, #140]	@ (800f1bc <tcp_receive+0x5ec>)
 800f130:	685b      	ldr	r3, [r3, #4]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d106      	bne.n	800f144 <tcp_receive+0x574>
 800f136:	4b22      	ldr	r3, [pc, #136]	@ (800f1c0 <tcp_receive+0x5f0>)
 800f138:	f240 5294 	movw	r2, #1428	@ 0x594
 800f13c:	4921      	ldr	r1, [pc, #132]	@ (800f1c4 <tcp_receive+0x5f4>)
 800f13e:	4822      	ldr	r0, [pc, #136]	@ (800f1c8 <tcp_receive+0x5f8>)
 800f140:	f007 fea0 	bl	8016e84 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f146:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800f14a:	4293      	cmp	r3, r2
 800f14c:	d906      	bls.n	800f15c <tcp_receive+0x58c>
 800f14e:	4b1c      	ldr	r3, [pc, #112]	@ (800f1c0 <tcp_receive+0x5f0>)
 800f150:	f240 5295 	movw	r2, #1429	@ 0x595
 800f154:	491d      	ldr	r1, [pc, #116]	@ (800f1cc <tcp_receive+0x5fc>)
 800f156:	481c      	ldr	r0, [pc, #112]	@ (800f1c8 <tcp_receive+0x5f8>)
 800f158:	f007 fe94 	bl	8016e84 <iprintf>
      off = (u16_t)off32;
 800f15c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f15e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f162:	4b16      	ldr	r3, [pc, #88]	@ (800f1bc <tcp_receive+0x5ec>)
 800f164:	685b      	ldr	r3, [r3, #4]
 800f166:	891b      	ldrh	r3, [r3, #8]
 800f168:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f16c:	429a      	cmp	r2, r3
 800f16e:	d906      	bls.n	800f17e <tcp_receive+0x5ae>
 800f170:	4b13      	ldr	r3, [pc, #76]	@ (800f1c0 <tcp_receive+0x5f0>)
 800f172:	f240 5297 	movw	r2, #1431	@ 0x597
 800f176:	4916      	ldr	r1, [pc, #88]	@ (800f1d0 <tcp_receive+0x600>)
 800f178:	4813      	ldr	r0, [pc, #76]	@ (800f1c8 <tcp_receive+0x5f8>)
 800f17a:	f007 fe83 	bl	8016e84 <iprintf>
      inseg.len -= off;
 800f17e:	4b0f      	ldr	r3, [pc, #60]	@ (800f1bc <tcp_receive+0x5ec>)
 800f180:	891a      	ldrh	r2, [r3, #8]
 800f182:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f186:	1ad3      	subs	r3, r2, r3
 800f188:	b29a      	uxth	r2, r3
 800f18a:	4b0c      	ldr	r3, [pc, #48]	@ (800f1bc <tcp_receive+0x5ec>)
 800f18c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f18e:	4b0b      	ldr	r3, [pc, #44]	@ (800f1bc <tcp_receive+0x5ec>)
 800f190:	685b      	ldr	r3, [r3, #4]
 800f192:	891a      	ldrh	r2, [r3, #8]
 800f194:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f198:	1ad3      	subs	r3, r2, r3
 800f19a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800f19c:	e02a      	b.n	800f1f4 <tcp_receive+0x624>
 800f19e:	bf00      	nop
 800f1a0:	080199f0 	.word	0x080199f0
 800f1a4:	080199f8 	.word	0x080199f8
 800f1a8:	2000cafc 	.word	0x2000cafc
 800f1ac:	2000caf8 	.word	0x2000caf8
 800f1b0:	2000cabc 	.word	0x2000cabc
 800f1b4:	2000cafe 	.word	0x2000cafe
 800f1b8:	2000caf4 	.word	0x2000caf4
 800f1bc:	2000cad4 	.word	0x2000cad4
 800f1c0:	08019688 	.word	0x08019688
 800f1c4:	08019a00 	.word	0x08019a00
 800f1c8:	080196d4 	.word	0x080196d4
 800f1cc:	08019a10 	.word	0x08019a10
 800f1d0:	08019a20 	.word	0x08019a20
        off -= p->len;
 800f1d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f1d6:	895b      	ldrh	r3, [r3, #10]
 800f1d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f1dc:	1ad3      	subs	r3, r2, r3
 800f1de:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f1e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f1e4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800f1e6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f1e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f1ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800f1f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f1f6:	895b      	ldrh	r3, [r3, #10]
 800f1f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f1fc:	429a      	cmp	r2, r3
 800f1fe:	d8e9      	bhi.n	800f1d4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f200:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f204:	4619      	mov	r1, r3
 800f206:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f208:	f7fc fb5e 	bl	800b8c8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f210:	4a90      	ldr	r2, [pc, #576]	@ (800f454 <tcp_receive+0x884>)
 800f212:	6013      	str	r3, [r2, #0]
 800f214:	4b90      	ldr	r3, [pc, #576]	@ (800f458 <tcp_receive+0x888>)
 800f216:	68db      	ldr	r3, [r3, #12]
 800f218:	4a8e      	ldr	r2, [pc, #568]	@ (800f454 <tcp_receive+0x884>)
 800f21a:	6812      	ldr	r2, [r2, #0]
 800f21c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f21e:	e00d      	b.n	800f23c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f220:	4b8c      	ldr	r3, [pc, #560]	@ (800f454 <tcp_receive+0x884>)
 800f222:	681a      	ldr	r2, [r3, #0]
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f228:	1ad3      	subs	r3, r2, r3
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	da06      	bge.n	800f23c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	8b5b      	ldrh	r3, [r3, #26]
 800f232:	f043 0302 	orr.w	r3, r3, #2
 800f236:	b29a      	uxth	r2, r3
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f23c:	4b85      	ldr	r3, [pc, #532]	@ (800f454 <tcp_receive+0x884>)
 800f23e:	681a      	ldr	r2, [r3, #0]
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f244:	1ad3      	subs	r3, r2, r3
 800f246:	2b00      	cmp	r3, #0
 800f248:	f2c0 8427 	blt.w	800fa9a <tcp_receive+0xeca>
 800f24c:	4b81      	ldr	r3, [pc, #516]	@ (800f454 <tcp_receive+0x884>)
 800f24e:	681a      	ldr	r2, [r3, #0]
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f254:	6879      	ldr	r1, [r7, #4]
 800f256:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f258:	440b      	add	r3, r1
 800f25a:	1ad3      	subs	r3, r2, r3
 800f25c:	3301      	adds	r3, #1
 800f25e:	2b00      	cmp	r3, #0
 800f260:	f300 841b 	bgt.w	800fa9a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f268:	4b7a      	ldr	r3, [pc, #488]	@ (800f454 <tcp_receive+0x884>)
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	429a      	cmp	r2, r3
 800f26e:	f040 8298 	bne.w	800f7a2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f272:	4b79      	ldr	r3, [pc, #484]	@ (800f458 <tcp_receive+0x888>)
 800f274:	891c      	ldrh	r4, [r3, #8]
 800f276:	4b78      	ldr	r3, [pc, #480]	@ (800f458 <tcp_receive+0x888>)
 800f278:	68db      	ldr	r3, [r3, #12]
 800f27a:	899b      	ldrh	r3, [r3, #12]
 800f27c:	b29b      	uxth	r3, r3
 800f27e:	4618      	mov	r0, r3
 800f280:	f7fa fe54 	bl	8009f2c <lwip_htons>
 800f284:	4603      	mov	r3, r0
 800f286:	b2db      	uxtb	r3, r3
 800f288:	f003 0303 	and.w	r3, r3, #3
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d001      	beq.n	800f294 <tcp_receive+0x6c4>
 800f290:	2301      	movs	r3, #1
 800f292:	e000      	b.n	800f296 <tcp_receive+0x6c6>
 800f294:	2300      	movs	r3, #0
 800f296:	4423      	add	r3, r4
 800f298:	b29a      	uxth	r2, r3
 800f29a:	4b70      	ldr	r3, [pc, #448]	@ (800f45c <tcp_receive+0x88c>)
 800f29c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f2a2:	4b6e      	ldr	r3, [pc, #440]	@ (800f45c <tcp_receive+0x88c>)
 800f2a4:	881b      	ldrh	r3, [r3, #0]
 800f2a6:	429a      	cmp	r2, r3
 800f2a8:	d274      	bcs.n	800f394 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f2aa:	4b6b      	ldr	r3, [pc, #428]	@ (800f458 <tcp_receive+0x888>)
 800f2ac:	68db      	ldr	r3, [r3, #12]
 800f2ae:	899b      	ldrh	r3, [r3, #12]
 800f2b0:	b29b      	uxth	r3, r3
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f7fa fe3a 	bl	8009f2c <lwip_htons>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	b2db      	uxtb	r3, r3
 800f2bc:	f003 0301 	and.w	r3, r3, #1
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d01e      	beq.n	800f302 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f2c4:	4b64      	ldr	r3, [pc, #400]	@ (800f458 <tcp_receive+0x888>)
 800f2c6:	68db      	ldr	r3, [r3, #12]
 800f2c8:	899b      	ldrh	r3, [r3, #12]
 800f2ca:	b29b      	uxth	r3, r3
 800f2cc:	b21b      	sxth	r3, r3
 800f2ce:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f2d2:	b21c      	sxth	r4, r3
 800f2d4:	4b60      	ldr	r3, [pc, #384]	@ (800f458 <tcp_receive+0x888>)
 800f2d6:	68db      	ldr	r3, [r3, #12]
 800f2d8:	899b      	ldrh	r3, [r3, #12]
 800f2da:	b29b      	uxth	r3, r3
 800f2dc:	4618      	mov	r0, r3
 800f2de:	f7fa fe25 	bl	8009f2c <lwip_htons>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	b2db      	uxtb	r3, r3
 800f2e6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800f2ea:	b29b      	uxth	r3, r3
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	f7fa fe1d 	bl	8009f2c <lwip_htons>
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	b21b      	sxth	r3, r3
 800f2f6:	4323      	orrs	r3, r4
 800f2f8:	b21a      	sxth	r2, r3
 800f2fa:	4b57      	ldr	r3, [pc, #348]	@ (800f458 <tcp_receive+0x888>)
 800f2fc:	68db      	ldr	r3, [r3, #12]
 800f2fe:	b292      	uxth	r2, r2
 800f300:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f306:	4b54      	ldr	r3, [pc, #336]	@ (800f458 <tcp_receive+0x888>)
 800f308:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f30a:	4b53      	ldr	r3, [pc, #332]	@ (800f458 <tcp_receive+0x888>)
 800f30c:	68db      	ldr	r3, [r3, #12]
 800f30e:	899b      	ldrh	r3, [r3, #12]
 800f310:	b29b      	uxth	r3, r3
 800f312:	4618      	mov	r0, r3
 800f314:	f7fa fe0a 	bl	8009f2c <lwip_htons>
 800f318:	4603      	mov	r3, r0
 800f31a:	b2db      	uxtb	r3, r3
 800f31c:	f003 0302 	and.w	r3, r3, #2
 800f320:	2b00      	cmp	r3, #0
 800f322:	d005      	beq.n	800f330 <tcp_receive+0x760>
            inseg.len -= 1;
 800f324:	4b4c      	ldr	r3, [pc, #304]	@ (800f458 <tcp_receive+0x888>)
 800f326:	891b      	ldrh	r3, [r3, #8]
 800f328:	3b01      	subs	r3, #1
 800f32a:	b29a      	uxth	r2, r3
 800f32c:	4b4a      	ldr	r3, [pc, #296]	@ (800f458 <tcp_receive+0x888>)
 800f32e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f330:	4b49      	ldr	r3, [pc, #292]	@ (800f458 <tcp_receive+0x888>)
 800f332:	685b      	ldr	r3, [r3, #4]
 800f334:	4a48      	ldr	r2, [pc, #288]	@ (800f458 <tcp_receive+0x888>)
 800f336:	8912      	ldrh	r2, [r2, #8]
 800f338:	4611      	mov	r1, r2
 800f33a:	4618      	mov	r0, r3
 800f33c:	f7fc f9c4 	bl	800b6c8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f340:	4b45      	ldr	r3, [pc, #276]	@ (800f458 <tcp_receive+0x888>)
 800f342:	891c      	ldrh	r4, [r3, #8]
 800f344:	4b44      	ldr	r3, [pc, #272]	@ (800f458 <tcp_receive+0x888>)
 800f346:	68db      	ldr	r3, [r3, #12]
 800f348:	899b      	ldrh	r3, [r3, #12]
 800f34a:	b29b      	uxth	r3, r3
 800f34c:	4618      	mov	r0, r3
 800f34e:	f7fa fded 	bl	8009f2c <lwip_htons>
 800f352:	4603      	mov	r3, r0
 800f354:	b2db      	uxtb	r3, r3
 800f356:	f003 0303 	and.w	r3, r3, #3
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d001      	beq.n	800f362 <tcp_receive+0x792>
 800f35e:	2301      	movs	r3, #1
 800f360:	e000      	b.n	800f364 <tcp_receive+0x794>
 800f362:	2300      	movs	r3, #0
 800f364:	4423      	add	r3, r4
 800f366:	b29a      	uxth	r2, r3
 800f368:	4b3c      	ldr	r3, [pc, #240]	@ (800f45c <tcp_receive+0x88c>)
 800f36a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f36c:	4b3b      	ldr	r3, [pc, #236]	@ (800f45c <tcp_receive+0x88c>)
 800f36e:	881b      	ldrh	r3, [r3, #0]
 800f370:	461a      	mov	r2, r3
 800f372:	4b38      	ldr	r3, [pc, #224]	@ (800f454 <tcp_receive+0x884>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	441a      	add	r2, r3
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f37c:	6879      	ldr	r1, [r7, #4]
 800f37e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f380:	440b      	add	r3, r1
 800f382:	429a      	cmp	r2, r3
 800f384:	d006      	beq.n	800f394 <tcp_receive+0x7c4>
 800f386:	4b36      	ldr	r3, [pc, #216]	@ (800f460 <tcp_receive+0x890>)
 800f388:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800f38c:	4935      	ldr	r1, [pc, #212]	@ (800f464 <tcp_receive+0x894>)
 800f38e:	4836      	ldr	r0, [pc, #216]	@ (800f468 <tcp_receive+0x898>)
 800f390:	f007 fd78 	bl	8016e84 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f398:	2b00      	cmp	r3, #0
 800f39a:	f000 80e6 	beq.w	800f56a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f39e:	4b2e      	ldr	r3, [pc, #184]	@ (800f458 <tcp_receive+0x888>)
 800f3a0:	68db      	ldr	r3, [r3, #12]
 800f3a2:	899b      	ldrh	r3, [r3, #12]
 800f3a4:	b29b      	uxth	r3, r3
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f7fa fdc0 	bl	8009f2c <lwip_htons>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	b2db      	uxtb	r3, r3
 800f3b0:	f003 0301 	and.w	r3, r3, #1
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d010      	beq.n	800f3da <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f3b8:	e00a      	b.n	800f3d0 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3be:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3c4:	681a      	ldr	r2, [r3, #0]
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800f3ca:	68f8      	ldr	r0, [r7, #12]
 800f3cc:	f7fd fd93 	bl	800cef6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d1f0      	bne.n	800f3ba <tcp_receive+0x7ea>
 800f3d8:	e0c7      	b.n	800f56a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3de:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f3e0:	e051      	b.n	800f486 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f3e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3e4:	68db      	ldr	r3, [r3, #12]
 800f3e6:	899b      	ldrh	r3, [r3, #12]
 800f3e8:	b29b      	uxth	r3, r3
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f7fa fd9e 	bl	8009f2c <lwip_htons>
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	b2db      	uxtb	r3, r3
 800f3f4:	f003 0301 	and.w	r3, r3, #1
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d03c      	beq.n	800f476 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f3fc:	4b16      	ldr	r3, [pc, #88]	@ (800f458 <tcp_receive+0x888>)
 800f3fe:	68db      	ldr	r3, [r3, #12]
 800f400:	899b      	ldrh	r3, [r3, #12]
 800f402:	b29b      	uxth	r3, r3
 800f404:	4618      	mov	r0, r3
 800f406:	f7fa fd91 	bl	8009f2c <lwip_htons>
 800f40a:	4603      	mov	r3, r0
 800f40c:	b2db      	uxtb	r3, r3
 800f40e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f412:	2b00      	cmp	r3, #0
 800f414:	d12f      	bne.n	800f476 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f416:	4b10      	ldr	r3, [pc, #64]	@ (800f458 <tcp_receive+0x888>)
 800f418:	68db      	ldr	r3, [r3, #12]
 800f41a:	899b      	ldrh	r3, [r3, #12]
 800f41c:	b29c      	uxth	r4, r3
 800f41e:	2001      	movs	r0, #1
 800f420:	f7fa fd84 	bl	8009f2c <lwip_htons>
 800f424:	4603      	mov	r3, r0
 800f426:	461a      	mov	r2, r3
 800f428:	4b0b      	ldr	r3, [pc, #44]	@ (800f458 <tcp_receive+0x888>)
 800f42a:	68db      	ldr	r3, [r3, #12]
 800f42c:	4322      	orrs	r2, r4
 800f42e:	b292      	uxth	r2, r2
 800f430:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f432:	4b09      	ldr	r3, [pc, #36]	@ (800f458 <tcp_receive+0x888>)
 800f434:	891c      	ldrh	r4, [r3, #8]
 800f436:	4b08      	ldr	r3, [pc, #32]	@ (800f458 <tcp_receive+0x888>)
 800f438:	68db      	ldr	r3, [r3, #12]
 800f43a:	899b      	ldrh	r3, [r3, #12]
 800f43c:	b29b      	uxth	r3, r3
 800f43e:	4618      	mov	r0, r3
 800f440:	f7fa fd74 	bl	8009f2c <lwip_htons>
 800f444:	4603      	mov	r3, r0
 800f446:	b2db      	uxtb	r3, r3
 800f448:	f003 0303 	and.w	r3, r3, #3
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d00d      	beq.n	800f46c <tcp_receive+0x89c>
 800f450:	2301      	movs	r3, #1
 800f452:	e00c      	b.n	800f46e <tcp_receive+0x89e>
 800f454:	2000caf4 	.word	0x2000caf4
 800f458:	2000cad4 	.word	0x2000cad4
 800f45c:	2000cafe 	.word	0x2000cafe
 800f460:	08019688 	.word	0x08019688
 800f464:	08019a30 	.word	0x08019a30
 800f468:	080196d4 	.word	0x080196d4
 800f46c:	2300      	movs	r3, #0
 800f46e:	4423      	add	r3, r4
 800f470:	b29a      	uxth	r2, r3
 800f472:	4b98      	ldr	r3, [pc, #608]	@ (800f6d4 <tcp_receive+0xb04>)
 800f474:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f478:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f47a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800f480:	6938      	ldr	r0, [r7, #16]
 800f482:	f7fd fd38 	bl	800cef6 <tcp_seg_free>
            while (next &&
 800f486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d00e      	beq.n	800f4aa <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f48c:	4b91      	ldr	r3, [pc, #580]	@ (800f6d4 <tcp_receive+0xb04>)
 800f48e:	881b      	ldrh	r3, [r3, #0]
 800f490:	461a      	mov	r2, r3
 800f492:	4b91      	ldr	r3, [pc, #580]	@ (800f6d8 <tcp_receive+0xb08>)
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	441a      	add	r2, r3
 800f498:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f49a:	68db      	ldr	r3, [r3, #12]
 800f49c:	685b      	ldr	r3, [r3, #4]
 800f49e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f4a0:	8909      	ldrh	r1, [r1, #8]
 800f4a2:	440b      	add	r3, r1
 800f4a4:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	da9b      	bge.n	800f3e2 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f4aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d059      	beq.n	800f564 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800f4b0:	4b88      	ldr	r3, [pc, #544]	@ (800f6d4 <tcp_receive+0xb04>)
 800f4b2:	881b      	ldrh	r3, [r3, #0]
 800f4b4:	461a      	mov	r2, r3
 800f4b6:	4b88      	ldr	r3, [pc, #544]	@ (800f6d8 <tcp_receive+0xb08>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	441a      	add	r2, r3
 800f4bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4be:	68db      	ldr	r3, [r3, #12]
 800f4c0:	685b      	ldr	r3, [r3, #4]
 800f4c2:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	dd4d      	ble.n	800f564 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f4c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4ca:	68db      	ldr	r3, [r3, #12]
 800f4cc:	685b      	ldr	r3, [r3, #4]
 800f4ce:	b29a      	uxth	r2, r3
 800f4d0:	4b81      	ldr	r3, [pc, #516]	@ (800f6d8 <tcp_receive+0xb08>)
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	b29b      	uxth	r3, r3
 800f4d6:	1ad3      	subs	r3, r2, r3
 800f4d8:	b29a      	uxth	r2, r3
 800f4da:	4b80      	ldr	r3, [pc, #512]	@ (800f6dc <tcp_receive+0xb0c>)
 800f4dc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f4de:	4b7f      	ldr	r3, [pc, #508]	@ (800f6dc <tcp_receive+0xb0c>)
 800f4e0:	68db      	ldr	r3, [r3, #12]
 800f4e2:	899b      	ldrh	r3, [r3, #12]
 800f4e4:	b29b      	uxth	r3, r3
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f7fa fd20 	bl	8009f2c <lwip_htons>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	b2db      	uxtb	r3, r3
 800f4f0:	f003 0302 	and.w	r3, r3, #2
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d005      	beq.n	800f504 <tcp_receive+0x934>
                inseg.len -= 1;
 800f4f8:	4b78      	ldr	r3, [pc, #480]	@ (800f6dc <tcp_receive+0xb0c>)
 800f4fa:	891b      	ldrh	r3, [r3, #8]
 800f4fc:	3b01      	subs	r3, #1
 800f4fe:	b29a      	uxth	r2, r3
 800f500:	4b76      	ldr	r3, [pc, #472]	@ (800f6dc <tcp_receive+0xb0c>)
 800f502:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f504:	4b75      	ldr	r3, [pc, #468]	@ (800f6dc <tcp_receive+0xb0c>)
 800f506:	685b      	ldr	r3, [r3, #4]
 800f508:	4a74      	ldr	r2, [pc, #464]	@ (800f6dc <tcp_receive+0xb0c>)
 800f50a:	8912      	ldrh	r2, [r2, #8]
 800f50c:	4611      	mov	r1, r2
 800f50e:	4618      	mov	r0, r3
 800f510:	f7fc f8da 	bl	800b6c8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f514:	4b71      	ldr	r3, [pc, #452]	@ (800f6dc <tcp_receive+0xb0c>)
 800f516:	891c      	ldrh	r4, [r3, #8]
 800f518:	4b70      	ldr	r3, [pc, #448]	@ (800f6dc <tcp_receive+0xb0c>)
 800f51a:	68db      	ldr	r3, [r3, #12]
 800f51c:	899b      	ldrh	r3, [r3, #12]
 800f51e:	b29b      	uxth	r3, r3
 800f520:	4618      	mov	r0, r3
 800f522:	f7fa fd03 	bl	8009f2c <lwip_htons>
 800f526:	4603      	mov	r3, r0
 800f528:	b2db      	uxtb	r3, r3
 800f52a:	f003 0303 	and.w	r3, r3, #3
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d001      	beq.n	800f536 <tcp_receive+0x966>
 800f532:	2301      	movs	r3, #1
 800f534:	e000      	b.n	800f538 <tcp_receive+0x968>
 800f536:	2300      	movs	r3, #0
 800f538:	4423      	add	r3, r4
 800f53a:	b29a      	uxth	r2, r3
 800f53c:	4b65      	ldr	r3, [pc, #404]	@ (800f6d4 <tcp_receive+0xb04>)
 800f53e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f540:	4b64      	ldr	r3, [pc, #400]	@ (800f6d4 <tcp_receive+0xb04>)
 800f542:	881b      	ldrh	r3, [r3, #0]
 800f544:	461a      	mov	r2, r3
 800f546:	4b64      	ldr	r3, [pc, #400]	@ (800f6d8 <tcp_receive+0xb08>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	441a      	add	r2, r3
 800f54c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f54e:	68db      	ldr	r3, [r3, #12]
 800f550:	685b      	ldr	r3, [r3, #4]
 800f552:	429a      	cmp	r2, r3
 800f554:	d006      	beq.n	800f564 <tcp_receive+0x994>
 800f556:	4b62      	ldr	r3, [pc, #392]	@ (800f6e0 <tcp_receive+0xb10>)
 800f558:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800f55c:	4961      	ldr	r1, [pc, #388]	@ (800f6e4 <tcp_receive+0xb14>)
 800f55e:	4862      	ldr	r0, [pc, #392]	@ (800f6e8 <tcp_receive+0xb18>)
 800f560:	f007 fc90 	bl	8016e84 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f568:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f56a:	4b5a      	ldr	r3, [pc, #360]	@ (800f6d4 <tcp_receive+0xb04>)
 800f56c:	881b      	ldrh	r3, [r3, #0]
 800f56e:	461a      	mov	r2, r3
 800f570:	4b59      	ldr	r3, [pc, #356]	@ (800f6d8 <tcp_receive+0xb08>)
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	441a      	add	r2, r3
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f57e:	4b55      	ldr	r3, [pc, #340]	@ (800f6d4 <tcp_receive+0xb04>)
 800f580:	881b      	ldrh	r3, [r3, #0]
 800f582:	429a      	cmp	r2, r3
 800f584:	d206      	bcs.n	800f594 <tcp_receive+0x9c4>
 800f586:	4b56      	ldr	r3, [pc, #344]	@ (800f6e0 <tcp_receive+0xb10>)
 800f588:	f240 6207 	movw	r2, #1543	@ 0x607
 800f58c:	4957      	ldr	r1, [pc, #348]	@ (800f6ec <tcp_receive+0xb1c>)
 800f58e:	4856      	ldr	r0, [pc, #344]	@ (800f6e8 <tcp_receive+0xb18>)
 800f590:	f007 fc78 	bl	8016e84 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f598:	4b4e      	ldr	r3, [pc, #312]	@ (800f6d4 <tcp_receive+0xb04>)
 800f59a:	881b      	ldrh	r3, [r3, #0]
 800f59c:	1ad3      	subs	r3, r2, r3
 800f59e:	b29a      	uxth	r2, r3
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f5a4:	6878      	ldr	r0, [r7, #4]
 800f5a6:	f7fc ffc5 	bl	800c534 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f5aa:	4b4c      	ldr	r3, [pc, #304]	@ (800f6dc <tcp_receive+0xb0c>)
 800f5ac:	685b      	ldr	r3, [r3, #4]
 800f5ae:	891b      	ldrh	r3, [r3, #8]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d006      	beq.n	800f5c2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800f5b4:	4b49      	ldr	r3, [pc, #292]	@ (800f6dc <tcp_receive+0xb0c>)
 800f5b6:	685b      	ldr	r3, [r3, #4]
 800f5b8:	4a4d      	ldr	r2, [pc, #308]	@ (800f6f0 <tcp_receive+0xb20>)
 800f5ba:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f5bc:	4b47      	ldr	r3, [pc, #284]	@ (800f6dc <tcp_receive+0xb0c>)
 800f5be:	2200      	movs	r2, #0
 800f5c0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f5c2:	4b46      	ldr	r3, [pc, #280]	@ (800f6dc <tcp_receive+0xb0c>)
 800f5c4:	68db      	ldr	r3, [r3, #12]
 800f5c6:	899b      	ldrh	r3, [r3, #12]
 800f5c8:	b29b      	uxth	r3, r3
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	f7fa fcae 	bl	8009f2c <lwip_htons>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	b2db      	uxtb	r3, r3
 800f5d4:	f003 0301 	and.w	r3, r3, #1
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	f000 80b8 	beq.w	800f74e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f5de:	4b45      	ldr	r3, [pc, #276]	@ (800f6f4 <tcp_receive+0xb24>)
 800f5e0:	781b      	ldrb	r3, [r3, #0]
 800f5e2:	f043 0320 	orr.w	r3, r3, #32
 800f5e6:	b2da      	uxtb	r2, r3
 800f5e8:	4b42      	ldr	r3, [pc, #264]	@ (800f6f4 <tcp_receive+0xb24>)
 800f5ea:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f5ec:	e0af      	b.n	800f74e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f5f2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f5f8:	68db      	ldr	r3, [r3, #12]
 800f5fa:	685b      	ldr	r3, [r3, #4]
 800f5fc:	4a36      	ldr	r2, [pc, #216]	@ (800f6d8 <tcp_receive+0xb08>)
 800f5fe:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	891b      	ldrh	r3, [r3, #8]
 800f604:	461c      	mov	r4, r3
 800f606:	68bb      	ldr	r3, [r7, #8]
 800f608:	68db      	ldr	r3, [r3, #12]
 800f60a:	899b      	ldrh	r3, [r3, #12]
 800f60c:	b29b      	uxth	r3, r3
 800f60e:	4618      	mov	r0, r3
 800f610:	f7fa fc8c 	bl	8009f2c <lwip_htons>
 800f614:	4603      	mov	r3, r0
 800f616:	b2db      	uxtb	r3, r3
 800f618:	f003 0303 	and.w	r3, r3, #3
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d001      	beq.n	800f624 <tcp_receive+0xa54>
 800f620:	2301      	movs	r3, #1
 800f622:	e000      	b.n	800f626 <tcp_receive+0xa56>
 800f624:	2300      	movs	r3, #0
 800f626:	191a      	adds	r2, r3, r4
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f62c:	441a      	add	r2, r3
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f636:	461c      	mov	r4, r3
 800f638:	68bb      	ldr	r3, [r7, #8]
 800f63a:	891b      	ldrh	r3, [r3, #8]
 800f63c:	461d      	mov	r5, r3
 800f63e:	68bb      	ldr	r3, [r7, #8]
 800f640:	68db      	ldr	r3, [r3, #12]
 800f642:	899b      	ldrh	r3, [r3, #12]
 800f644:	b29b      	uxth	r3, r3
 800f646:	4618      	mov	r0, r3
 800f648:	f7fa fc70 	bl	8009f2c <lwip_htons>
 800f64c:	4603      	mov	r3, r0
 800f64e:	b2db      	uxtb	r3, r3
 800f650:	f003 0303 	and.w	r3, r3, #3
 800f654:	2b00      	cmp	r3, #0
 800f656:	d001      	beq.n	800f65c <tcp_receive+0xa8c>
 800f658:	2301      	movs	r3, #1
 800f65a:	e000      	b.n	800f65e <tcp_receive+0xa8e>
 800f65c:	2300      	movs	r3, #0
 800f65e:	442b      	add	r3, r5
 800f660:	429c      	cmp	r4, r3
 800f662:	d206      	bcs.n	800f672 <tcp_receive+0xaa2>
 800f664:	4b1e      	ldr	r3, [pc, #120]	@ (800f6e0 <tcp_receive+0xb10>)
 800f666:	f240 622b 	movw	r2, #1579	@ 0x62b
 800f66a:	4923      	ldr	r1, [pc, #140]	@ (800f6f8 <tcp_receive+0xb28>)
 800f66c:	481e      	ldr	r0, [pc, #120]	@ (800f6e8 <tcp_receive+0xb18>)
 800f66e:	f007 fc09 	bl	8016e84 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f672:	68bb      	ldr	r3, [r7, #8]
 800f674:	891b      	ldrh	r3, [r3, #8]
 800f676:	461c      	mov	r4, r3
 800f678:	68bb      	ldr	r3, [r7, #8]
 800f67a:	68db      	ldr	r3, [r3, #12]
 800f67c:	899b      	ldrh	r3, [r3, #12]
 800f67e:	b29b      	uxth	r3, r3
 800f680:	4618      	mov	r0, r3
 800f682:	f7fa fc53 	bl	8009f2c <lwip_htons>
 800f686:	4603      	mov	r3, r0
 800f688:	b2db      	uxtb	r3, r3
 800f68a:	f003 0303 	and.w	r3, r3, #3
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d001      	beq.n	800f696 <tcp_receive+0xac6>
 800f692:	2301      	movs	r3, #1
 800f694:	e000      	b.n	800f698 <tcp_receive+0xac8>
 800f696:	2300      	movs	r3, #0
 800f698:	1919      	adds	r1, r3, r4
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f69e:	b28b      	uxth	r3, r1
 800f6a0:	1ad3      	subs	r3, r2, r3
 800f6a2:	b29a      	uxth	r2, r3
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f6a8:	6878      	ldr	r0, [r7, #4]
 800f6aa:	f7fc ff43 	bl	800c534 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f6ae:	68bb      	ldr	r3, [r7, #8]
 800f6b0:	685b      	ldr	r3, [r3, #4]
 800f6b2:	891b      	ldrh	r3, [r3, #8]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d028      	beq.n	800f70a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f6b8:	4b0d      	ldr	r3, [pc, #52]	@ (800f6f0 <tcp_receive+0xb20>)
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d01d      	beq.n	800f6fc <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800f6c0:	4b0b      	ldr	r3, [pc, #44]	@ (800f6f0 <tcp_receive+0xb20>)
 800f6c2:	681a      	ldr	r2, [r3, #0]
 800f6c4:	68bb      	ldr	r3, [r7, #8]
 800f6c6:	685b      	ldr	r3, [r3, #4]
 800f6c8:	4619      	mov	r1, r3
 800f6ca:	4610      	mov	r0, r2
 800f6cc:	f7fc fa50 	bl	800bb70 <pbuf_cat>
 800f6d0:	e018      	b.n	800f704 <tcp_receive+0xb34>
 800f6d2:	bf00      	nop
 800f6d4:	2000cafe 	.word	0x2000cafe
 800f6d8:	2000caf4 	.word	0x2000caf4
 800f6dc:	2000cad4 	.word	0x2000cad4
 800f6e0:	08019688 	.word	0x08019688
 800f6e4:	08019a68 	.word	0x08019a68
 800f6e8:	080196d4 	.word	0x080196d4
 800f6ec:	08019aa4 	.word	0x08019aa4
 800f6f0:	2000cb04 	.word	0x2000cb04
 800f6f4:	2000cb01 	.word	0x2000cb01
 800f6f8:	08019ac4 	.word	0x08019ac4
            } else {
              recv_data = cseg->p;
 800f6fc:	68bb      	ldr	r3, [r7, #8]
 800f6fe:	685b      	ldr	r3, [r3, #4]
 800f700:	4a70      	ldr	r2, [pc, #448]	@ (800f8c4 <tcp_receive+0xcf4>)
 800f702:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f704:	68bb      	ldr	r3, [r7, #8]
 800f706:	2200      	movs	r2, #0
 800f708:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f70a:	68bb      	ldr	r3, [r7, #8]
 800f70c:	68db      	ldr	r3, [r3, #12]
 800f70e:	899b      	ldrh	r3, [r3, #12]
 800f710:	b29b      	uxth	r3, r3
 800f712:	4618      	mov	r0, r3
 800f714:	f7fa fc0a 	bl	8009f2c <lwip_htons>
 800f718:	4603      	mov	r3, r0
 800f71a:	b2db      	uxtb	r3, r3
 800f71c:	f003 0301 	and.w	r3, r3, #1
 800f720:	2b00      	cmp	r3, #0
 800f722:	d00d      	beq.n	800f740 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f724:	4b68      	ldr	r3, [pc, #416]	@ (800f8c8 <tcp_receive+0xcf8>)
 800f726:	781b      	ldrb	r3, [r3, #0]
 800f728:	f043 0320 	orr.w	r3, r3, #32
 800f72c:	b2da      	uxtb	r2, r3
 800f72e:	4b66      	ldr	r3, [pc, #408]	@ (800f8c8 <tcp_receive+0xcf8>)
 800f730:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	7d1b      	ldrb	r3, [r3, #20]
 800f736:	2b04      	cmp	r3, #4
 800f738:	d102      	bne.n	800f740 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	2207      	movs	r2, #7
 800f73e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f740:	68bb      	ldr	r3, [r7, #8]
 800f742:	681a      	ldr	r2, [r3, #0]
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800f748:	68b8      	ldr	r0, [r7, #8]
 800f74a:	f7fd fbd4 	bl	800cef6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f752:	2b00      	cmp	r3, #0
 800f754:	d008      	beq.n	800f768 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f75a:	68db      	ldr	r3, [r3, #12]
 800f75c:	685a      	ldr	r2, [r3, #4]
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800f762:	429a      	cmp	r2, r3
 800f764:	f43f af43 	beq.w	800f5ee <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	8b5b      	ldrh	r3, [r3, #26]
 800f76c:	f003 0301 	and.w	r3, r3, #1
 800f770:	2b00      	cmp	r3, #0
 800f772:	d00e      	beq.n	800f792 <tcp_receive+0xbc2>
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	8b5b      	ldrh	r3, [r3, #26]
 800f778:	f023 0301 	bic.w	r3, r3, #1
 800f77c:	b29a      	uxth	r2, r3
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	835a      	strh	r2, [r3, #26]
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	8b5b      	ldrh	r3, [r3, #26]
 800f786:	f043 0302 	orr.w	r3, r3, #2
 800f78a:	b29a      	uxth	r2, r3
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f790:	e187      	b.n	800faa2 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	8b5b      	ldrh	r3, [r3, #26]
 800f796:	f043 0301 	orr.w	r3, r3, #1
 800f79a:	b29a      	uxth	r2, r3
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f7a0:	e17f      	b.n	800faa2 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d106      	bne.n	800f7b8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f7aa:	4848      	ldr	r0, [pc, #288]	@ (800f8cc <tcp_receive+0xcfc>)
 800f7ac:	f7fd fbbc 	bl	800cf28 <tcp_seg_copy>
 800f7b0:	4602      	mov	r2, r0
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	675a      	str	r2, [r3, #116]	@ 0x74
 800f7b6:	e16c      	b.n	800fa92 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f7c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f7c2:	e156      	b.n	800fa72 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800f7c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7c6:	68db      	ldr	r3, [r3, #12]
 800f7c8:	685a      	ldr	r2, [r3, #4]
 800f7ca:	4b41      	ldr	r3, [pc, #260]	@ (800f8d0 <tcp_receive+0xd00>)
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	429a      	cmp	r2, r3
 800f7d0:	d11d      	bne.n	800f80e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f7d2:	4b3e      	ldr	r3, [pc, #248]	@ (800f8cc <tcp_receive+0xcfc>)
 800f7d4:	891a      	ldrh	r2, [r3, #8]
 800f7d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7d8:	891b      	ldrh	r3, [r3, #8]
 800f7da:	429a      	cmp	r2, r3
 800f7dc:	f240 814e 	bls.w	800fa7c <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f7e0:	483a      	ldr	r0, [pc, #232]	@ (800f8cc <tcp_receive+0xcfc>)
 800f7e2:	f7fd fba1 	bl	800cf28 <tcp_seg_copy>
 800f7e6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f7e8:	697b      	ldr	r3, [r7, #20]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	f000 8148 	beq.w	800fa80 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800f7f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d003      	beq.n	800f7fe <tcp_receive+0xc2e>
                    prev->next = cseg;
 800f7f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7f8:	697a      	ldr	r2, [r7, #20]
 800f7fa:	601a      	str	r2, [r3, #0]
 800f7fc:	e002      	b.n	800f804 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	697a      	ldr	r2, [r7, #20]
 800f802:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f804:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f806:	6978      	ldr	r0, [r7, #20]
 800f808:	f7ff f8de 	bl	800e9c8 <tcp_oos_insert_segment>
                }
                break;
 800f80c:	e138      	b.n	800fa80 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f80e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f810:	2b00      	cmp	r3, #0
 800f812:	d117      	bne.n	800f844 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f814:	4b2e      	ldr	r3, [pc, #184]	@ (800f8d0 <tcp_receive+0xd00>)
 800f816:	681a      	ldr	r2, [r3, #0]
 800f818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f81a:	68db      	ldr	r3, [r3, #12]
 800f81c:	685b      	ldr	r3, [r3, #4]
 800f81e:	1ad3      	subs	r3, r2, r3
 800f820:	2b00      	cmp	r3, #0
 800f822:	da57      	bge.n	800f8d4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f824:	4829      	ldr	r0, [pc, #164]	@ (800f8cc <tcp_receive+0xcfc>)
 800f826:	f7fd fb7f 	bl	800cf28 <tcp_seg_copy>
 800f82a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f82c:	69bb      	ldr	r3, [r7, #24]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	f000 8128 	beq.w	800fa84 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	69ba      	ldr	r2, [r7, #24]
 800f838:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f83a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f83c:	69b8      	ldr	r0, [r7, #24]
 800f83e:	f7ff f8c3 	bl	800e9c8 <tcp_oos_insert_segment>
                  }
                  break;
 800f842:	e11f      	b.n	800fa84 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f844:	4b22      	ldr	r3, [pc, #136]	@ (800f8d0 <tcp_receive+0xd00>)
 800f846:	681a      	ldr	r2, [r3, #0]
 800f848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f84a:	68db      	ldr	r3, [r3, #12]
 800f84c:	685b      	ldr	r3, [r3, #4]
 800f84e:	1ad3      	subs	r3, r2, r3
 800f850:	3b01      	subs	r3, #1
 800f852:	2b00      	cmp	r3, #0
 800f854:	db3e      	blt.n	800f8d4 <tcp_receive+0xd04>
 800f856:	4b1e      	ldr	r3, [pc, #120]	@ (800f8d0 <tcp_receive+0xd00>)
 800f858:	681a      	ldr	r2, [r3, #0]
 800f85a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f85c:	68db      	ldr	r3, [r3, #12]
 800f85e:	685b      	ldr	r3, [r3, #4]
 800f860:	1ad3      	subs	r3, r2, r3
 800f862:	3301      	adds	r3, #1
 800f864:	2b00      	cmp	r3, #0
 800f866:	dc35      	bgt.n	800f8d4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f868:	4818      	ldr	r0, [pc, #96]	@ (800f8cc <tcp_receive+0xcfc>)
 800f86a:	f7fd fb5d 	bl	800cf28 <tcp_seg_copy>
 800f86e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f870:	69fb      	ldr	r3, [r7, #28]
 800f872:	2b00      	cmp	r3, #0
 800f874:	f000 8108 	beq.w	800fa88 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f87a:	68db      	ldr	r3, [r3, #12]
 800f87c:	685b      	ldr	r3, [r3, #4]
 800f87e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f880:	8912      	ldrh	r2, [r2, #8]
 800f882:	441a      	add	r2, r3
 800f884:	4b12      	ldr	r3, [pc, #72]	@ (800f8d0 <tcp_receive+0xd00>)
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	1ad3      	subs	r3, r2, r3
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	dd12      	ble.n	800f8b4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f88e:	4b10      	ldr	r3, [pc, #64]	@ (800f8d0 <tcp_receive+0xd00>)
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	b29a      	uxth	r2, r3
 800f894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f896:	68db      	ldr	r3, [r3, #12]
 800f898:	685b      	ldr	r3, [r3, #4]
 800f89a:	b29b      	uxth	r3, r3
 800f89c:	1ad3      	subs	r3, r2, r3
 800f89e:	b29a      	uxth	r2, r3
 800f8a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8a2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f8a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8a6:	685a      	ldr	r2, [r3, #4]
 800f8a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8aa:	891b      	ldrh	r3, [r3, #8]
 800f8ac:	4619      	mov	r1, r3
 800f8ae:	4610      	mov	r0, r2
 800f8b0:	f7fb ff0a 	bl	800b6c8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f8b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8b6:	69fa      	ldr	r2, [r7, #28]
 800f8b8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f8ba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f8bc:	69f8      	ldr	r0, [r7, #28]
 800f8be:	f7ff f883 	bl	800e9c8 <tcp_oos_insert_segment>
                  }
                  break;
 800f8c2:	e0e1      	b.n	800fa88 <tcp_receive+0xeb8>
 800f8c4:	2000cb04 	.word	0x2000cb04
 800f8c8:	2000cb01 	.word	0x2000cb01
 800f8cc:	2000cad4 	.word	0x2000cad4
 800f8d0:	2000caf4 	.word	0x2000caf4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f8d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8d6:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f8d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	f040 80c5 	bne.w	800fa6c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f8e2:	4b7f      	ldr	r3, [pc, #508]	@ (800fae0 <tcp_receive+0xf10>)
 800f8e4:	681a      	ldr	r2, [r3, #0]
 800f8e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8e8:	68db      	ldr	r3, [r3, #12]
 800f8ea:	685b      	ldr	r3, [r3, #4]
 800f8ec:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	f340 80bc 	ble.w	800fa6c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f8f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8f6:	68db      	ldr	r3, [r3, #12]
 800f8f8:	899b      	ldrh	r3, [r3, #12]
 800f8fa:	b29b      	uxth	r3, r3
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	f7fa fb15 	bl	8009f2c <lwip_htons>
 800f902:	4603      	mov	r3, r0
 800f904:	b2db      	uxtb	r3, r3
 800f906:	f003 0301 	and.w	r3, r3, #1
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	f040 80be 	bne.w	800fa8c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f910:	4874      	ldr	r0, [pc, #464]	@ (800fae4 <tcp_receive+0xf14>)
 800f912:	f7fd fb09 	bl	800cf28 <tcp_seg_copy>
 800f916:	4602      	mov	r2, r0
 800f918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f91a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f91c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	2b00      	cmp	r3, #0
 800f922:	f000 80b5 	beq.w	800fa90 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f928:	68db      	ldr	r3, [r3, #12]
 800f92a:	685b      	ldr	r3, [r3, #4]
 800f92c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f92e:	8912      	ldrh	r2, [r2, #8]
 800f930:	441a      	add	r2, r3
 800f932:	4b6b      	ldr	r3, [pc, #428]	@ (800fae0 <tcp_receive+0xf10>)
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	1ad3      	subs	r3, r2, r3
 800f938:	2b00      	cmp	r3, #0
 800f93a:	dd12      	ble.n	800f962 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f93c:	4b68      	ldr	r3, [pc, #416]	@ (800fae0 <tcp_receive+0xf10>)
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	b29a      	uxth	r2, r3
 800f942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f944:	68db      	ldr	r3, [r3, #12]
 800f946:	685b      	ldr	r3, [r3, #4]
 800f948:	b29b      	uxth	r3, r3
 800f94a:	1ad3      	subs	r3, r2, r3
 800f94c:	b29a      	uxth	r2, r3
 800f94e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f950:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f954:	685a      	ldr	r2, [r3, #4]
 800f956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f958:	891b      	ldrh	r3, [r3, #8]
 800f95a:	4619      	mov	r1, r3
 800f95c:	4610      	mov	r0, r2
 800f95e:	f7fb feb3 	bl	800b6c8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f962:	4b61      	ldr	r3, [pc, #388]	@ (800fae8 <tcp_receive+0xf18>)
 800f964:	881b      	ldrh	r3, [r3, #0]
 800f966:	461a      	mov	r2, r3
 800f968:	4b5d      	ldr	r3, [pc, #372]	@ (800fae0 <tcp_receive+0xf10>)
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	441a      	add	r2, r3
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f972:	6879      	ldr	r1, [r7, #4]
 800f974:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f976:	440b      	add	r3, r1
 800f978:	1ad3      	subs	r3, r2, r3
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	f340 8088 	ble.w	800fa90 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	68db      	ldr	r3, [r3, #12]
 800f986:	899b      	ldrh	r3, [r3, #12]
 800f988:	b29b      	uxth	r3, r3
 800f98a:	4618      	mov	r0, r3
 800f98c:	f7fa face 	bl	8009f2c <lwip_htons>
 800f990:	4603      	mov	r3, r0
 800f992:	b2db      	uxtb	r3, r3
 800f994:	f003 0301 	and.w	r3, r3, #1
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d021      	beq.n	800f9e0 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f99c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	68db      	ldr	r3, [r3, #12]
 800f9a2:	899b      	ldrh	r3, [r3, #12]
 800f9a4:	b29b      	uxth	r3, r3
 800f9a6:	b21b      	sxth	r3, r3
 800f9a8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f9ac:	b21c      	sxth	r4, r3
 800f9ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	68db      	ldr	r3, [r3, #12]
 800f9b4:	899b      	ldrh	r3, [r3, #12]
 800f9b6:	b29b      	uxth	r3, r3
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f7fa fab7 	bl	8009f2c <lwip_htons>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	b2db      	uxtb	r3, r3
 800f9c2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800f9c6:	b29b      	uxth	r3, r3
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f7fa faaf 	bl	8009f2c <lwip_htons>
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	b21b      	sxth	r3, r3
 800f9d2:	4323      	orrs	r3, r4
 800f9d4:	b21a      	sxth	r2, r3
 800f9d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	68db      	ldr	r3, [r3, #12]
 800f9dc:	b292      	uxth	r2, r2
 800f9de:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9e4:	b29a      	uxth	r2, r3
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f9ea:	4413      	add	r3, r2
 800f9ec:	b299      	uxth	r1, r3
 800f9ee:	4b3c      	ldr	r3, [pc, #240]	@ (800fae0 <tcp_receive+0xf10>)
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	b29a      	uxth	r2, r3
 800f9f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	1a8a      	subs	r2, r1, r2
 800f9fa:	b292      	uxth	r2, r2
 800f9fc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800f9fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	685a      	ldr	r2, [r3, #4]
 800fa04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	891b      	ldrh	r3, [r3, #8]
 800fa0a:	4619      	mov	r1, r3
 800fa0c:	4610      	mov	r0, r2
 800fa0e:	f7fb fe5b 	bl	800b6c8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800fa12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	891c      	ldrh	r4, [r3, #8]
 800fa18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	68db      	ldr	r3, [r3, #12]
 800fa1e:	899b      	ldrh	r3, [r3, #12]
 800fa20:	b29b      	uxth	r3, r3
 800fa22:	4618      	mov	r0, r3
 800fa24:	f7fa fa82 	bl	8009f2c <lwip_htons>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	b2db      	uxtb	r3, r3
 800fa2c:	f003 0303 	and.w	r3, r3, #3
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d001      	beq.n	800fa38 <tcp_receive+0xe68>
 800fa34:	2301      	movs	r3, #1
 800fa36:	e000      	b.n	800fa3a <tcp_receive+0xe6a>
 800fa38:	2300      	movs	r3, #0
 800fa3a:	4423      	add	r3, r4
 800fa3c:	b29a      	uxth	r2, r3
 800fa3e:	4b2a      	ldr	r3, [pc, #168]	@ (800fae8 <tcp_receive+0xf18>)
 800fa40:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fa42:	4b29      	ldr	r3, [pc, #164]	@ (800fae8 <tcp_receive+0xf18>)
 800fa44:	881b      	ldrh	r3, [r3, #0]
 800fa46:	461a      	mov	r2, r3
 800fa48:	4b25      	ldr	r3, [pc, #148]	@ (800fae0 <tcp_receive+0xf10>)
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	441a      	add	r2, r3
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa52:	6879      	ldr	r1, [r7, #4]
 800fa54:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fa56:	440b      	add	r3, r1
 800fa58:	429a      	cmp	r2, r3
 800fa5a:	d019      	beq.n	800fa90 <tcp_receive+0xec0>
 800fa5c:	4b23      	ldr	r3, [pc, #140]	@ (800faec <tcp_receive+0xf1c>)
 800fa5e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800fa62:	4923      	ldr	r1, [pc, #140]	@ (800faf0 <tcp_receive+0xf20>)
 800fa64:	4823      	ldr	r0, [pc, #140]	@ (800faf4 <tcp_receive+0xf24>)
 800fa66:	f007 fa0d 	bl	8016e84 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800fa6a:	e011      	b.n	800fa90 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fa6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fa72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	f47f aea5 	bne.w	800f7c4 <tcp_receive+0xbf4>
 800fa7a:	e00a      	b.n	800fa92 <tcp_receive+0xec2>
                break;
 800fa7c:	bf00      	nop
 800fa7e:	e008      	b.n	800fa92 <tcp_receive+0xec2>
                break;
 800fa80:	bf00      	nop
 800fa82:	e006      	b.n	800fa92 <tcp_receive+0xec2>
                  break;
 800fa84:	bf00      	nop
 800fa86:	e004      	b.n	800fa92 <tcp_receive+0xec2>
                  break;
 800fa88:	bf00      	nop
 800fa8a:	e002      	b.n	800fa92 <tcp_receive+0xec2>
                  break;
 800fa8c:	bf00      	nop
 800fa8e:	e000      	b.n	800fa92 <tcp_receive+0xec2>
                break;
 800fa90:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800fa92:	6878      	ldr	r0, [r7, #4]
 800fa94:	f001 fa30 	bl	8010ef8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800fa98:	e003      	b.n	800faa2 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800fa9a:	6878      	ldr	r0, [r7, #4]
 800fa9c:	f001 fa2c 	bl	8010ef8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800faa0:	e01a      	b.n	800fad8 <tcp_receive+0xf08>
 800faa2:	e019      	b.n	800fad8 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800faa4:	4b0e      	ldr	r3, [pc, #56]	@ (800fae0 <tcp_receive+0xf10>)
 800faa6:	681a      	ldr	r2, [r3, #0]
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800faac:	1ad3      	subs	r3, r2, r3
 800faae:	2b00      	cmp	r3, #0
 800fab0:	db0a      	blt.n	800fac8 <tcp_receive+0xef8>
 800fab2:	4b0b      	ldr	r3, [pc, #44]	@ (800fae0 <tcp_receive+0xf10>)
 800fab4:	681a      	ldr	r2, [r3, #0]
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800faba:	6879      	ldr	r1, [r7, #4]
 800fabc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fabe:	440b      	add	r3, r1
 800fac0:	1ad3      	subs	r3, r2, r3
 800fac2:	3301      	adds	r3, #1
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	dd07      	ble.n	800fad8 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	8b5b      	ldrh	r3, [r3, #26]
 800facc:	f043 0302 	orr.w	r3, r3, #2
 800fad0:	b29a      	uxth	r2, r3
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800fad6:	e7ff      	b.n	800fad8 <tcp_receive+0xf08>
 800fad8:	bf00      	nop
 800fada:	3750      	adds	r7, #80	@ 0x50
 800fadc:	46bd      	mov	sp, r7
 800fade:	bdb0      	pop	{r4, r5, r7, pc}
 800fae0:	2000caf4 	.word	0x2000caf4
 800fae4:	2000cad4 	.word	0x2000cad4
 800fae8:	2000cafe 	.word	0x2000cafe
 800faec:	08019688 	.word	0x08019688
 800faf0:	08019a30 	.word	0x08019a30
 800faf4:	080196d4 	.word	0x080196d4

0800faf8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800faf8:	b480      	push	{r7}
 800fafa:	b083      	sub	sp, #12
 800fafc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800fafe:	4b15      	ldr	r3, [pc, #84]	@ (800fb54 <tcp_get_next_optbyte+0x5c>)
 800fb00:	881b      	ldrh	r3, [r3, #0]
 800fb02:	1c5a      	adds	r2, r3, #1
 800fb04:	b291      	uxth	r1, r2
 800fb06:	4a13      	ldr	r2, [pc, #76]	@ (800fb54 <tcp_get_next_optbyte+0x5c>)
 800fb08:	8011      	strh	r1, [r2, #0]
 800fb0a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fb0c:	4b12      	ldr	r3, [pc, #72]	@ (800fb58 <tcp_get_next_optbyte+0x60>)
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d004      	beq.n	800fb1e <tcp_get_next_optbyte+0x26>
 800fb14:	4b11      	ldr	r3, [pc, #68]	@ (800fb5c <tcp_get_next_optbyte+0x64>)
 800fb16:	881b      	ldrh	r3, [r3, #0]
 800fb18:	88fa      	ldrh	r2, [r7, #6]
 800fb1a:	429a      	cmp	r2, r3
 800fb1c:	d208      	bcs.n	800fb30 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800fb1e:	4b10      	ldr	r3, [pc, #64]	@ (800fb60 <tcp_get_next_optbyte+0x68>)
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	3314      	adds	r3, #20
 800fb24:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800fb26:	88fb      	ldrh	r3, [r7, #6]
 800fb28:	683a      	ldr	r2, [r7, #0]
 800fb2a:	4413      	add	r3, r2
 800fb2c:	781b      	ldrb	r3, [r3, #0]
 800fb2e:	e00b      	b.n	800fb48 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800fb30:	88fb      	ldrh	r3, [r7, #6]
 800fb32:	b2da      	uxtb	r2, r3
 800fb34:	4b09      	ldr	r3, [pc, #36]	@ (800fb5c <tcp_get_next_optbyte+0x64>)
 800fb36:	881b      	ldrh	r3, [r3, #0]
 800fb38:	b2db      	uxtb	r3, r3
 800fb3a:	1ad3      	subs	r3, r2, r3
 800fb3c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800fb3e:	4b06      	ldr	r3, [pc, #24]	@ (800fb58 <tcp_get_next_optbyte+0x60>)
 800fb40:	681a      	ldr	r2, [r3, #0]
 800fb42:	797b      	ldrb	r3, [r7, #5]
 800fb44:	4413      	add	r3, r2
 800fb46:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fb48:	4618      	mov	r0, r3
 800fb4a:	370c      	adds	r7, #12
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb52:	4770      	bx	lr
 800fb54:	2000caf0 	.word	0x2000caf0
 800fb58:	2000caec 	.word	0x2000caec
 800fb5c:	2000caea 	.word	0x2000caea
 800fb60:	2000cae4 	.word	0x2000cae4

0800fb64 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b084      	sub	sp, #16
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d106      	bne.n	800fb80 <tcp_parseopt+0x1c>
 800fb72:	4b32      	ldr	r3, [pc, #200]	@ (800fc3c <tcp_parseopt+0xd8>)
 800fb74:	f240 727d 	movw	r2, #1917	@ 0x77d
 800fb78:	4931      	ldr	r1, [pc, #196]	@ (800fc40 <tcp_parseopt+0xdc>)
 800fb7a:	4832      	ldr	r0, [pc, #200]	@ (800fc44 <tcp_parseopt+0xe0>)
 800fb7c:	f007 f982 	bl	8016e84 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800fb80:	4b31      	ldr	r3, [pc, #196]	@ (800fc48 <tcp_parseopt+0xe4>)
 800fb82:	881b      	ldrh	r3, [r3, #0]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d056      	beq.n	800fc36 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fb88:	4b30      	ldr	r3, [pc, #192]	@ (800fc4c <tcp_parseopt+0xe8>)
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	801a      	strh	r2, [r3, #0]
 800fb8e:	e046      	b.n	800fc1e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800fb90:	f7ff ffb2 	bl	800faf8 <tcp_get_next_optbyte>
 800fb94:	4603      	mov	r3, r0
 800fb96:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800fb98:	7bfb      	ldrb	r3, [r7, #15]
 800fb9a:	2b02      	cmp	r3, #2
 800fb9c:	d006      	beq.n	800fbac <tcp_parseopt+0x48>
 800fb9e:	2b02      	cmp	r3, #2
 800fba0:	dc2a      	bgt.n	800fbf8 <tcp_parseopt+0x94>
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d042      	beq.n	800fc2c <tcp_parseopt+0xc8>
 800fba6:	2b01      	cmp	r3, #1
 800fba8:	d038      	beq.n	800fc1c <tcp_parseopt+0xb8>
 800fbaa:	e025      	b.n	800fbf8 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800fbac:	f7ff ffa4 	bl	800faf8 <tcp_get_next_optbyte>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	2b04      	cmp	r3, #4
 800fbb4:	d13c      	bne.n	800fc30 <tcp_parseopt+0xcc>
 800fbb6:	4b25      	ldr	r3, [pc, #148]	@ (800fc4c <tcp_parseopt+0xe8>)
 800fbb8:	881b      	ldrh	r3, [r3, #0]
 800fbba:	3301      	adds	r3, #1
 800fbbc:	4a22      	ldr	r2, [pc, #136]	@ (800fc48 <tcp_parseopt+0xe4>)
 800fbbe:	8812      	ldrh	r2, [r2, #0]
 800fbc0:	4293      	cmp	r3, r2
 800fbc2:	da35      	bge.n	800fc30 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800fbc4:	f7ff ff98 	bl	800faf8 <tcp_get_next_optbyte>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	021b      	lsls	r3, r3, #8
 800fbcc:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800fbce:	f7ff ff93 	bl	800faf8 <tcp_get_next_optbyte>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	461a      	mov	r2, r3
 800fbd6:	89bb      	ldrh	r3, [r7, #12]
 800fbd8:	4313      	orrs	r3, r2
 800fbda:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800fbdc:	89bb      	ldrh	r3, [r7, #12]
 800fbde:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800fbe2:	d804      	bhi.n	800fbee <tcp_parseopt+0x8a>
 800fbe4:	89bb      	ldrh	r3, [r7, #12]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d001      	beq.n	800fbee <tcp_parseopt+0x8a>
 800fbea:	89ba      	ldrh	r2, [r7, #12]
 800fbec:	e001      	b.n	800fbf2 <tcp_parseopt+0x8e>
 800fbee:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800fbf6:	e012      	b.n	800fc1e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800fbf8:	f7ff ff7e 	bl	800faf8 <tcp_get_next_optbyte>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800fc00:	7afb      	ldrb	r3, [r7, #11]
 800fc02:	2b01      	cmp	r3, #1
 800fc04:	d916      	bls.n	800fc34 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800fc06:	7afb      	ldrb	r3, [r7, #11]
 800fc08:	b29a      	uxth	r2, r3
 800fc0a:	4b10      	ldr	r3, [pc, #64]	@ (800fc4c <tcp_parseopt+0xe8>)
 800fc0c:	881b      	ldrh	r3, [r3, #0]
 800fc0e:	4413      	add	r3, r2
 800fc10:	b29b      	uxth	r3, r3
 800fc12:	3b02      	subs	r3, #2
 800fc14:	b29a      	uxth	r2, r3
 800fc16:	4b0d      	ldr	r3, [pc, #52]	@ (800fc4c <tcp_parseopt+0xe8>)
 800fc18:	801a      	strh	r2, [r3, #0]
 800fc1a:	e000      	b.n	800fc1e <tcp_parseopt+0xba>
          break;
 800fc1c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fc1e:	4b0b      	ldr	r3, [pc, #44]	@ (800fc4c <tcp_parseopt+0xe8>)
 800fc20:	881a      	ldrh	r2, [r3, #0]
 800fc22:	4b09      	ldr	r3, [pc, #36]	@ (800fc48 <tcp_parseopt+0xe4>)
 800fc24:	881b      	ldrh	r3, [r3, #0]
 800fc26:	429a      	cmp	r2, r3
 800fc28:	d3b2      	bcc.n	800fb90 <tcp_parseopt+0x2c>
 800fc2a:	e004      	b.n	800fc36 <tcp_parseopt+0xd2>
          return;
 800fc2c:	bf00      	nop
 800fc2e:	e002      	b.n	800fc36 <tcp_parseopt+0xd2>
            return;
 800fc30:	bf00      	nop
 800fc32:	e000      	b.n	800fc36 <tcp_parseopt+0xd2>
            return;
 800fc34:	bf00      	nop
      }
    }
  }
}
 800fc36:	3710      	adds	r7, #16
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	bd80      	pop	{r7, pc}
 800fc3c:	08019688 	.word	0x08019688
 800fc40:	08019aec 	.word	0x08019aec
 800fc44:	080196d4 	.word	0x080196d4
 800fc48:	2000cae8 	.word	0x2000cae8
 800fc4c:	2000caf0 	.word	0x2000caf0

0800fc50 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800fc50:	b480      	push	{r7}
 800fc52:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800fc54:	4b05      	ldr	r3, [pc, #20]	@ (800fc6c <tcp_trigger_input_pcb_close+0x1c>)
 800fc56:	781b      	ldrb	r3, [r3, #0]
 800fc58:	f043 0310 	orr.w	r3, r3, #16
 800fc5c:	b2da      	uxtb	r2, r3
 800fc5e:	4b03      	ldr	r3, [pc, #12]	@ (800fc6c <tcp_trigger_input_pcb_close+0x1c>)
 800fc60:	701a      	strb	r2, [r3, #0]
}
 800fc62:	bf00      	nop
 800fc64:	46bd      	mov	sp, r7
 800fc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6a:	4770      	bx	lr
 800fc6c:	2000cb01 	.word	0x2000cb01

0800fc70 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b084      	sub	sp, #16
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	60f8      	str	r0, [r7, #12]
 800fc78:	60b9      	str	r1, [r7, #8]
 800fc7a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d00a      	beq.n	800fc98 <tcp_route+0x28>
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	7a1b      	ldrb	r3, [r3, #8]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d006      	beq.n	800fc98 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	7a1b      	ldrb	r3, [r3, #8]
 800fc8e:	4618      	mov	r0, r3
 800fc90:	f7fb fae4 	bl	800b25c <netif_get_by_index>
 800fc94:	4603      	mov	r3, r0
 800fc96:	e003      	b.n	800fca0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800fc98:	6878      	ldr	r0, [r7, #4]
 800fc9a:	f005 fb87 	bl	80153ac <ip4_route>
 800fc9e:	4603      	mov	r3, r0
  }
}
 800fca0:	4618      	mov	r0, r3
 800fca2:	3710      	adds	r7, #16
 800fca4:	46bd      	mov	sp, r7
 800fca6:	bd80      	pop	{r7, pc}

0800fca8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800fca8:	b590      	push	{r4, r7, lr}
 800fcaa:	b087      	sub	sp, #28
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	60f8      	str	r0, [r7, #12]
 800fcb0:	60b9      	str	r1, [r7, #8]
 800fcb2:	603b      	str	r3, [r7, #0]
 800fcb4:	4613      	mov	r3, r2
 800fcb6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d105      	bne.n	800fcca <tcp_create_segment+0x22>
 800fcbe:	4b43      	ldr	r3, [pc, #268]	@ (800fdcc <tcp_create_segment+0x124>)
 800fcc0:	22a3      	movs	r2, #163	@ 0xa3
 800fcc2:	4943      	ldr	r1, [pc, #268]	@ (800fdd0 <tcp_create_segment+0x128>)
 800fcc4:	4843      	ldr	r0, [pc, #268]	@ (800fdd4 <tcp_create_segment+0x12c>)
 800fcc6:	f007 f8dd 	bl	8016e84 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800fcca:	68bb      	ldr	r3, [r7, #8]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d105      	bne.n	800fcdc <tcp_create_segment+0x34>
 800fcd0:	4b3e      	ldr	r3, [pc, #248]	@ (800fdcc <tcp_create_segment+0x124>)
 800fcd2:	22a4      	movs	r2, #164	@ 0xa4
 800fcd4:	4940      	ldr	r1, [pc, #256]	@ (800fdd8 <tcp_create_segment+0x130>)
 800fcd6:	483f      	ldr	r0, [pc, #252]	@ (800fdd4 <tcp_create_segment+0x12c>)
 800fcd8:	f007 f8d4 	bl	8016e84 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fcdc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fce0:	009b      	lsls	r3, r3, #2
 800fce2:	b2db      	uxtb	r3, r3
 800fce4:	f003 0304 	and.w	r3, r3, #4
 800fce8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800fcea:	2003      	movs	r0, #3
 800fcec:	f7fa fe66 	bl	800a9bc <memp_malloc>
 800fcf0:	6138      	str	r0, [r7, #16]
 800fcf2:	693b      	ldr	r3, [r7, #16]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d104      	bne.n	800fd02 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800fcf8:	68b8      	ldr	r0, [r7, #8]
 800fcfa:	f7fb fe6b 	bl	800b9d4 <pbuf_free>
    return NULL;
 800fcfe:	2300      	movs	r3, #0
 800fd00:	e060      	b.n	800fdc4 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800fd02:	693b      	ldr	r3, [r7, #16]
 800fd04:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800fd08:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800fd0a:	693b      	ldr	r3, [r7, #16]
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800fd10:	693b      	ldr	r3, [r7, #16]
 800fd12:	68ba      	ldr	r2, [r7, #8]
 800fd14:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800fd16:	68bb      	ldr	r3, [r7, #8]
 800fd18:	891a      	ldrh	r2, [r3, #8]
 800fd1a:	7dfb      	ldrb	r3, [r7, #23]
 800fd1c:	b29b      	uxth	r3, r3
 800fd1e:	429a      	cmp	r2, r3
 800fd20:	d205      	bcs.n	800fd2e <tcp_create_segment+0x86>
 800fd22:	4b2a      	ldr	r3, [pc, #168]	@ (800fdcc <tcp_create_segment+0x124>)
 800fd24:	22b0      	movs	r2, #176	@ 0xb0
 800fd26:	492d      	ldr	r1, [pc, #180]	@ (800fddc <tcp_create_segment+0x134>)
 800fd28:	482a      	ldr	r0, [pc, #168]	@ (800fdd4 <tcp_create_segment+0x12c>)
 800fd2a:	f007 f8ab 	bl	8016e84 <iprintf>
  seg->len = p->tot_len - optlen;
 800fd2e:	68bb      	ldr	r3, [r7, #8]
 800fd30:	891a      	ldrh	r2, [r3, #8]
 800fd32:	7dfb      	ldrb	r3, [r7, #23]
 800fd34:	b29b      	uxth	r3, r3
 800fd36:	1ad3      	subs	r3, r2, r3
 800fd38:	b29a      	uxth	r2, r3
 800fd3a:	693b      	ldr	r3, [r7, #16]
 800fd3c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800fd3e:	2114      	movs	r1, #20
 800fd40:	68b8      	ldr	r0, [r7, #8]
 800fd42:	f7fb fdb1 	bl	800b8a8 <pbuf_add_header>
 800fd46:	4603      	mov	r3, r0
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d004      	beq.n	800fd56 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800fd4c:	6938      	ldr	r0, [r7, #16]
 800fd4e:	f7fd f8d2 	bl	800cef6 <tcp_seg_free>
    return NULL;
 800fd52:	2300      	movs	r3, #0
 800fd54:	e036      	b.n	800fdc4 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800fd56:	693b      	ldr	r3, [r7, #16]
 800fd58:	685b      	ldr	r3, [r3, #4]
 800fd5a:	685a      	ldr	r2, [r3, #4]
 800fd5c:	693b      	ldr	r3, [r7, #16]
 800fd5e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	8ada      	ldrh	r2, [r3, #22]
 800fd64:	693b      	ldr	r3, [r7, #16]
 800fd66:	68dc      	ldr	r4, [r3, #12]
 800fd68:	4610      	mov	r0, r2
 800fd6a:	f7fa f8df 	bl	8009f2c <lwip_htons>
 800fd6e:	4603      	mov	r3, r0
 800fd70:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	8b1a      	ldrh	r2, [r3, #24]
 800fd76:	693b      	ldr	r3, [r7, #16]
 800fd78:	68dc      	ldr	r4, [r3, #12]
 800fd7a:	4610      	mov	r0, r2
 800fd7c:	f7fa f8d6 	bl	8009f2c <lwip_htons>
 800fd80:	4603      	mov	r3, r0
 800fd82:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800fd84:	693b      	ldr	r3, [r7, #16]
 800fd86:	68dc      	ldr	r4, [r3, #12]
 800fd88:	6838      	ldr	r0, [r7, #0]
 800fd8a:	f7fa f8e4 	bl	8009f56 <lwip_htonl>
 800fd8e:	4603      	mov	r3, r0
 800fd90:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800fd92:	7dfb      	ldrb	r3, [r7, #23]
 800fd94:	089b      	lsrs	r3, r3, #2
 800fd96:	b2db      	uxtb	r3, r3
 800fd98:	3305      	adds	r3, #5
 800fd9a:	b29b      	uxth	r3, r3
 800fd9c:	031b      	lsls	r3, r3, #12
 800fd9e:	b29a      	uxth	r2, r3
 800fda0:	79fb      	ldrb	r3, [r7, #7]
 800fda2:	b29b      	uxth	r3, r3
 800fda4:	4313      	orrs	r3, r2
 800fda6:	b29a      	uxth	r2, r3
 800fda8:	693b      	ldr	r3, [r7, #16]
 800fdaa:	68dc      	ldr	r4, [r3, #12]
 800fdac:	4610      	mov	r0, r2
 800fdae:	f7fa f8bd 	bl	8009f2c <lwip_htons>
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800fdb6:	693b      	ldr	r3, [r7, #16]
 800fdb8:	68db      	ldr	r3, [r3, #12]
 800fdba:	2200      	movs	r2, #0
 800fdbc:	749a      	strb	r2, [r3, #18]
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	74da      	strb	r2, [r3, #19]
  return seg;
 800fdc2:	693b      	ldr	r3, [r7, #16]
}
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	371c      	adds	r7, #28
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bd90      	pop	{r4, r7, pc}
 800fdcc:	08019b08 	.word	0x08019b08
 800fdd0:	08019b3c 	.word	0x08019b3c
 800fdd4:	08019b5c 	.word	0x08019b5c
 800fdd8:	08019b84 	.word	0x08019b84
 800fddc:	08019ba8 	.word	0x08019ba8

0800fde0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800fde0:	b590      	push	{r4, r7, lr}
 800fde2:	b08b      	sub	sp, #44	@ 0x2c
 800fde4:	af02      	add	r7, sp, #8
 800fde6:	6078      	str	r0, [r7, #4]
 800fde8:	460b      	mov	r3, r1
 800fdea:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800fdec:	2300      	movs	r3, #0
 800fdee:	61fb      	str	r3, [r7, #28]
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d106      	bne.n	800fe0c <tcp_split_unsent_seg+0x2c>
 800fdfe:	4b95      	ldr	r3, [pc, #596]	@ (8010054 <tcp_split_unsent_seg+0x274>)
 800fe00:	f240 324b 	movw	r2, #843	@ 0x34b
 800fe04:	4994      	ldr	r1, [pc, #592]	@ (8010058 <tcp_split_unsent_seg+0x278>)
 800fe06:	4895      	ldr	r0, [pc, #596]	@ (801005c <tcp_split_unsent_seg+0x27c>)
 800fe08:	f007 f83c 	bl	8016e84 <iprintf>

  useg = pcb->unsent;
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fe10:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800fe12:	697b      	ldr	r3, [r7, #20]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d102      	bne.n	800fe1e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800fe18:	f04f 33ff 	mov.w	r3, #4294967295
 800fe1c:	e116      	b.n	801004c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800fe1e:	887b      	ldrh	r3, [r7, #2]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d109      	bne.n	800fe38 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800fe24:	4b8b      	ldr	r3, [pc, #556]	@ (8010054 <tcp_split_unsent_seg+0x274>)
 800fe26:	f240 3253 	movw	r2, #851	@ 0x353
 800fe2a:	498d      	ldr	r1, [pc, #564]	@ (8010060 <tcp_split_unsent_seg+0x280>)
 800fe2c:	488b      	ldr	r0, [pc, #556]	@ (801005c <tcp_split_unsent_seg+0x27c>)
 800fe2e:	f007 f829 	bl	8016e84 <iprintf>
    return ERR_VAL;
 800fe32:	f06f 0305 	mvn.w	r3, #5
 800fe36:	e109      	b.n	801004c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800fe38:	697b      	ldr	r3, [r7, #20]
 800fe3a:	891b      	ldrh	r3, [r3, #8]
 800fe3c:	887a      	ldrh	r2, [r7, #2]
 800fe3e:	429a      	cmp	r2, r3
 800fe40:	d301      	bcc.n	800fe46 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800fe42:	2300      	movs	r3, #0
 800fe44:	e102      	b.n	801004c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fe4a:	887a      	ldrh	r2, [r7, #2]
 800fe4c:	429a      	cmp	r2, r3
 800fe4e:	d906      	bls.n	800fe5e <tcp_split_unsent_seg+0x7e>
 800fe50:	4b80      	ldr	r3, [pc, #512]	@ (8010054 <tcp_split_unsent_seg+0x274>)
 800fe52:	f240 325b 	movw	r2, #859	@ 0x35b
 800fe56:	4983      	ldr	r1, [pc, #524]	@ (8010064 <tcp_split_unsent_seg+0x284>)
 800fe58:	4880      	ldr	r0, [pc, #512]	@ (801005c <tcp_split_unsent_seg+0x27c>)
 800fe5a:	f007 f813 	bl	8016e84 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800fe5e:	697b      	ldr	r3, [r7, #20]
 800fe60:	891b      	ldrh	r3, [r3, #8]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d106      	bne.n	800fe74 <tcp_split_unsent_seg+0x94>
 800fe66:	4b7b      	ldr	r3, [pc, #492]	@ (8010054 <tcp_split_unsent_seg+0x274>)
 800fe68:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800fe6c:	497e      	ldr	r1, [pc, #504]	@ (8010068 <tcp_split_unsent_seg+0x288>)
 800fe6e:	487b      	ldr	r0, [pc, #492]	@ (801005c <tcp_split_unsent_seg+0x27c>)
 800fe70:	f007 f808 	bl	8016e84 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800fe74:	697b      	ldr	r3, [r7, #20]
 800fe76:	7a9b      	ldrb	r3, [r3, #10]
 800fe78:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800fe7a:	7bfb      	ldrb	r3, [r7, #15]
 800fe7c:	009b      	lsls	r3, r3, #2
 800fe7e:	b2db      	uxtb	r3, r3
 800fe80:	f003 0304 	and.w	r3, r3, #4
 800fe84:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800fe86:	697b      	ldr	r3, [r7, #20]
 800fe88:	891a      	ldrh	r2, [r3, #8]
 800fe8a:	887b      	ldrh	r3, [r7, #2]
 800fe8c:	1ad3      	subs	r3, r2, r3
 800fe8e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800fe90:	7bbb      	ldrb	r3, [r7, #14]
 800fe92:	b29a      	uxth	r2, r3
 800fe94:	89bb      	ldrh	r3, [r7, #12]
 800fe96:	4413      	add	r3, r2
 800fe98:	b29b      	uxth	r3, r3
 800fe9a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fe9e:	4619      	mov	r1, r3
 800fea0:	2036      	movs	r0, #54	@ 0x36
 800fea2:	f7fb fab3 	bl	800b40c <pbuf_alloc>
 800fea6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fea8:	693b      	ldr	r3, [r7, #16]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	f000 80b7 	beq.w	801001e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800feb0:	697b      	ldr	r3, [r7, #20]
 800feb2:	685b      	ldr	r3, [r3, #4]
 800feb4:	891a      	ldrh	r2, [r3, #8]
 800feb6:	697b      	ldr	r3, [r7, #20]
 800feb8:	891b      	ldrh	r3, [r3, #8]
 800feba:	1ad3      	subs	r3, r2, r3
 800febc:	b29a      	uxth	r2, r3
 800febe:	887b      	ldrh	r3, [r7, #2]
 800fec0:	4413      	add	r3, r2
 800fec2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800fec4:	697b      	ldr	r3, [r7, #20]
 800fec6:	6858      	ldr	r0, [r3, #4]
 800fec8:	693b      	ldr	r3, [r7, #16]
 800feca:	685a      	ldr	r2, [r3, #4]
 800fecc:	7bbb      	ldrb	r3, [r7, #14]
 800fece:	18d1      	adds	r1, r2, r3
 800fed0:	897b      	ldrh	r3, [r7, #10]
 800fed2:	89ba      	ldrh	r2, [r7, #12]
 800fed4:	f7fb ff84 	bl	800bde0 <pbuf_copy_partial>
 800fed8:	4603      	mov	r3, r0
 800feda:	461a      	mov	r2, r3
 800fedc:	89bb      	ldrh	r3, [r7, #12]
 800fede:	4293      	cmp	r3, r2
 800fee0:	f040 809f 	bne.w	8010022 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800fee4:	697b      	ldr	r3, [r7, #20]
 800fee6:	68db      	ldr	r3, [r3, #12]
 800fee8:	899b      	ldrh	r3, [r3, #12]
 800feea:	b29b      	uxth	r3, r3
 800feec:	4618      	mov	r0, r3
 800feee:	f7fa f81d 	bl	8009f2c <lwip_htons>
 800fef2:	4603      	mov	r3, r0
 800fef4:	b2db      	uxtb	r3, r3
 800fef6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fefa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800fefc:	2300      	movs	r3, #0
 800fefe:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800ff00:	7efb      	ldrb	r3, [r7, #27]
 800ff02:	f003 0308 	and.w	r3, r3, #8
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d007      	beq.n	800ff1a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800ff0a:	7efb      	ldrb	r3, [r7, #27]
 800ff0c:	f023 0308 	bic.w	r3, r3, #8
 800ff10:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800ff12:	7ebb      	ldrb	r3, [r7, #26]
 800ff14:	f043 0308 	orr.w	r3, r3, #8
 800ff18:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800ff1a:	7efb      	ldrb	r3, [r7, #27]
 800ff1c:	f003 0301 	and.w	r3, r3, #1
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d007      	beq.n	800ff34 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800ff24:	7efb      	ldrb	r3, [r7, #27]
 800ff26:	f023 0301 	bic.w	r3, r3, #1
 800ff2a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ff2c:	7ebb      	ldrb	r3, [r7, #26]
 800ff2e:	f043 0301 	orr.w	r3, r3, #1
 800ff32:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ff34:	697b      	ldr	r3, [r7, #20]
 800ff36:	68db      	ldr	r3, [r3, #12]
 800ff38:	685b      	ldr	r3, [r3, #4]
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f7fa f80b 	bl	8009f56 <lwip_htonl>
 800ff40:	4602      	mov	r2, r0
 800ff42:	887b      	ldrh	r3, [r7, #2]
 800ff44:	18d1      	adds	r1, r2, r3
 800ff46:	7eba      	ldrb	r2, [r7, #26]
 800ff48:	7bfb      	ldrb	r3, [r7, #15]
 800ff4a:	9300      	str	r3, [sp, #0]
 800ff4c:	460b      	mov	r3, r1
 800ff4e:	6939      	ldr	r1, [r7, #16]
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f7ff fea9 	bl	800fca8 <tcp_create_segment>
 800ff56:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800ff58:	69fb      	ldr	r3, [r7, #28]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d063      	beq.n	8010026 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ff5e:	697b      	ldr	r3, [r7, #20]
 800ff60:	685b      	ldr	r3, [r3, #4]
 800ff62:	4618      	mov	r0, r3
 800ff64:	f7fb fdc4 	bl	800baf0 <pbuf_clen>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	461a      	mov	r2, r3
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ff72:	1a9b      	subs	r3, r3, r2
 800ff74:	b29a      	uxth	r2, r3
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ff7c:	697b      	ldr	r3, [r7, #20]
 800ff7e:	6858      	ldr	r0, [r3, #4]
 800ff80:	697b      	ldr	r3, [r7, #20]
 800ff82:	685b      	ldr	r3, [r3, #4]
 800ff84:	891a      	ldrh	r2, [r3, #8]
 800ff86:	89bb      	ldrh	r3, [r7, #12]
 800ff88:	1ad3      	subs	r3, r2, r3
 800ff8a:	b29b      	uxth	r3, r3
 800ff8c:	4619      	mov	r1, r3
 800ff8e:	f7fb fb9b 	bl	800b6c8 <pbuf_realloc>
  useg->len -= remainder;
 800ff92:	697b      	ldr	r3, [r7, #20]
 800ff94:	891a      	ldrh	r2, [r3, #8]
 800ff96:	89bb      	ldrh	r3, [r7, #12]
 800ff98:	1ad3      	subs	r3, r2, r3
 800ff9a:	b29a      	uxth	r2, r3
 800ff9c:	697b      	ldr	r3, [r7, #20]
 800ff9e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ffa0:	697b      	ldr	r3, [r7, #20]
 800ffa2:	68db      	ldr	r3, [r3, #12]
 800ffa4:	899b      	ldrh	r3, [r3, #12]
 800ffa6:	b29c      	uxth	r4, r3
 800ffa8:	7efb      	ldrb	r3, [r7, #27]
 800ffaa:	b29b      	uxth	r3, r3
 800ffac:	4618      	mov	r0, r3
 800ffae:	f7f9 ffbd 	bl	8009f2c <lwip_htons>
 800ffb2:	4603      	mov	r3, r0
 800ffb4:	461a      	mov	r2, r3
 800ffb6:	697b      	ldr	r3, [r7, #20]
 800ffb8:	68db      	ldr	r3, [r3, #12]
 800ffba:	4322      	orrs	r2, r4
 800ffbc:	b292      	uxth	r2, r2
 800ffbe:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ffc0:	697b      	ldr	r3, [r7, #20]
 800ffc2:	685b      	ldr	r3, [r3, #4]
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	f7fb fd93 	bl	800baf0 <pbuf_clen>
 800ffca:	4603      	mov	r3, r0
 800ffcc:	461a      	mov	r2, r3
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ffd4:	4413      	add	r3, r2
 800ffd6:	b29a      	uxth	r2, r3
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ffde:	69fb      	ldr	r3, [r7, #28]
 800ffe0:	685b      	ldr	r3, [r3, #4]
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	f7fb fd84 	bl	800baf0 <pbuf_clen>
 800ffe8:	4603      	mov	r3, r0
 800ffea:	461a      	mov	r2, r3
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fff2:	4413      	add	r3, r2
 800fff4:	b29a      	uxth	r2, r3
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800fffc:	697b      	ldr	r3, [r7, #20]
 800fffe:	681a      	ldr	r2, [r3, #0]
 8010000:	69fb      	ldr	r3, [r7, #28]
 8010002:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010004:	697b      	ldr	r3, [r7, #20]
 8010006:	69fa      	ldr	r2, [r7, #28]
 8010008:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801000a:	69fb      	ldr	r3, [r7, #28]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d103      	bne.n	801001a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	2200      	movs	r2, #0
 8010016:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801001a:	2300      	movs	r3, #0
 801001c:	e016      	b.n	801004c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801001e:	bf00      	nop
 8010020:	e002      	b.n	8010028 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010022:	bf00      	nop
 8010024:	e000      	b.n	8010028 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010026:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010028:	69fb      	ldr	r3, [r7, #28]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d006      	beq.n	801003c <tcp_split_unsent_seg+0x25c>
 801002e:	4b09      	ldr	r3, [pc, #36]	@ (8010054 <tcp_split_unsent_seg+0x274>)
 8010030:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8010034:	490d      	ldr	r1, [pc, #52]	@ (801006c <tcp_split_unsent_seg+0x28c>)
 8010036:	4809      	ldr	r0, [pc, #36]	@ (801005c <tcp_split_unsent_seg+0x27c>)
 8010038:	f006 ff24 	bl	8016e84 <iprintf>
  if (p != NULL) {
 801003c:	693b      	ldr	r3, [r7, #16]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d002      	beq.n	8010048 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010042:	6938      	ldr	r0, [r7, #16]
 8010044:	f7fb fcc6 	bl	800b9d4 <pbuf_free>
  }

  return ERR_MEM;
 8010048:	f04f 33ff 	mov.w	r3, #4294967295
}
 801004c:	4618      	mov	r0, r3
 801004e:	3724      	adds	r7, #36	@ 0x24
 8010050:	46bd      	mov	sp, r7
 8010052:	bd90      	pop	{r4, r7, pc}
 8010054:	08019b08 	.word	0x08019b08
 8010058:	08019e9c 	.word	0x08019e9c
 801005c:	08019b5c 	.word	0x08019b5c
 8010060:	08019ec0 	.word	0x08019ec0
 8010064:	08019ee4 	.word	0x08019ee4
 8010068:	08019ef4 	.word	0x08019ef4
 801006c:	08019f04 	.word	0x08019f04

08010070 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010070:	b590      	push	{r4, r7, lr}
 8010072:	b085      	sub	sp, #20
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d106      	bne.n	801008c <tcp_send_fin+0x1c>
 801007e:	4b21      	ldr	r3, [pc, #132]	@ (8010104 <tcp_send_fin+0x94>)
 8010080:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8010084:	4920      	ldr	r1, [pc, #128]	@ (8010108 <tcp_send_fin+0x98>)
 8010086:	4821      	ldr	r0, [pc, #132]	@ (801010c <tcp_send_fin+0x9c>)
 8010088:	f006 fefc 	bl	8016e84 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010090:	2b00      	cmp	r3, #0
 8010092:	d02e      	beq.n	80100f2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010098:	60fb      	str	r3, [r7, #12]
 801009a:	e002      	b.n	80100a2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d1f8      	bne.n	801009c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	68db      	ldr	r3, [r3, #12]
 80100ae:	899b      	ldrh	r3, [r3, #12]
 80100b0:	b29b      	uxth	r3, r3
 80100b2:	4618      	mov	r0, r3
 80100b4:	f7f9 ff3a 	bl	8009f2c <lwip_htons>
 80100b8:	4603      	mov	r3, r0
 80100ba:	b2db      	uxtb	r3, r3
 80100bc:	f003 0307 	and.w	r3, r3, #7
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d116      	bne.n	80100f2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	68db      	ldr	r3, [r3, #12]
 80100c8:	899b      	ldrh	r3, [r3, #12]
 80100ca:	b29c      	uxth	r4, r3
 80100cc:	2001      	movs	r0, #1
 80100ce:	f7f9 ff2d 	bl	8009f2c <lwip_htons>
 80100d2:	4603      	mov	r3, r0
 80100d4:	461a      	mov	r2, r3
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	68db      	ldr	r3, [r3, #12]
 80100da:	4322      	orrs	r2, r4
 80100dc:	b292      	uxth	r2, r2
 80100de:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	8b5b      	ldrh	r3, [r3, #26]
 80100e4:	f043 0320 	orr.w	r3, r3, #32
 80100e8:	b29a      	uxth	r2, r3
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80100ee:	2300      	movs	r3, #0
 80100f0:	e004      	b.n	80100fc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80100f2:	2101      	movs	r1, #1
 80100f4:	6878      	ldr	r0, [r7, #4]
 80100f6:	f000 f80b 	bl	8010110 <tcp_enqueue_flags>
 80100fa:	4603      	mov	r3, r0
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	3714      	adds	r7, #20
 8010100:	46bd      	mov	sp, r7
 8010102:	bd90      	pop	{r4, r7, pc}
 8010104:	08019b08 	.word	0x08019b08
 8010108:	08019f10 	.word	0x08019f10
 801010c:	08019b5c 	.word	0x08019b5c

08010110 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010110:	b580      	push	{r7, lr}
 8010112:	b08a      	sub	sp, #40	@ 0x28
 8010114:	af02      	add	r7, sp, #8
 8010116:	6078      	str	r0, [r7, #4]
 8010118:	460b      	mov	r3, r1
 801011a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801011c:	2300      	movs	r3, #0
 801011e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010120:	2300      	movs	r3, #0
 8010122:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010124:	78fb      	ldrb	r3, [r7, #3]
 8010126:	f003 0303 	and.w	r3, r3, #3
 801012a:	2b00      	cmp	r3, #0
 801012c:	d106      	bne.n	801013c <tcp_enqueue_flags+0x2c>
 801012e:	4b67      	ldr	r3, [pc, #412]	@ (80102cc <tcp_enqueue_flags+0x1bc>)
 8010130:	f240 4211 	movw	r2, #1041	@ 0x411
 8010134:	4966      	ldr	r1, [pc, #408]	@ (80102d0 <tcp_enqueue_flags+0x1c0>)
 8010136:	4867      	ldr	r0, [pc, #412]	@ (80102d4 <tcp_enqueue_flags+0x1c4>)
 8010138:	f006 fea4 	bl	8016e84 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d106      	bne.n	8010150 <tcp_enqueue_flags+0x40>
 8010142:	4b62      	ldr	r3, [pc, #392]	@ (80102cc <tcp_enqueue_flags+0x1bc>)
 8010144:	f240 4213 	movw	r2, #1043	@ 0x413
 8010148:	4963      	ldr	r1, [pc, #396]	@ (80102d8 <tcp_enqueue_flags+0x1c8>)
 801014a:	4862      	ldr	r0, [pc, #392]	@ (80102d4 <tcp_enqueue_flags+0x1c4>)
 801014c:	f006 fe9a 	bl	8016e84 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010150:	78fb      	ldrb	r3, [r7, #3]
 8010152:	f003 0302 	and.w	r3, r3, #2
 8010156:	2b00      	cmp	r3, #0
 8010158:	d001      	beq.n	801015e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801015a:	2301      	movs	r3, #1
 801015c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801015e:	7ffb      	ldrb	r3, [r7, #31]
 8010160:	009b      	lsls	r3, r3, #2
 8010162:	b2db      	uxtb	r3, r3
 8010164:	f003 0304 	and.w	r3, r3, #4
 8010168:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801016a:	7dfb      	ldrb	r3, [r7, #23]
 801016c:	b29b      	uxth	r3, r3
 801016e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010172:	4619      	mov	r1, r3
 8010174:	2036      	movs	r0, #54	@ 0x36
 8010176:	f7fb f949 	bl	800b40c <pbuf_alloc>
 801017a:	6138      	str	r0, [r7, #16]
 801017c:	693b      	ldr	r3, [r7, #16]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d109      	bne.n	8010196 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	8b5b      	ldrh	r3, [r3, #26]
 8010186:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801018a:	b29a      	uxth	r2, r3
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010190:	f04f 33ff 	mov.w	r3, #4294967295
 8010194:	e095      	b.n	80102c2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010196:	693b      	ldr	r3, [r7, #16]
 8010198:	895a      	ldrh	r2, [r3, #10]
 801019a:	7dfb      	ldrb	r3, [r7, #23]
 801019c:	b29b      	uxth	r3, r3
 801019e:	429a      	cmp	r2, r3
 80101a0:	d206      	bcs.n	80101b0 <tcp_enqueue_flags+0xa0>
 80101a2:	4b4a      	ldr	r3, [pc, #296]	@ (80102cc <tcp_enqueue_flags+0x1bc>)
 80101a4:	f240 4239 	movw	r2, #1081	@ 0x439
 80101a8:	494c      	ldr	r1, [pc, #304]	@ (80102dc <tcp_enqueue_flags+0x1cc>)
 80101aa:	484a      	ldr	r0, [pc, #296]	@ (80102d4 <tcp_enqueue_flags+0x1c4>)
 80101ac:	f006 fe6a 	bl	8016e84 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80101b4:	78fa      	ldrb	r2, [r7, #3]
 80101b6:	7ffb      	ldrb	r3, [r7, #31]
 80101b8:	9300      	str	r3, [sp, #0]
 80101ba:	460b      	mov	r3, r1
 80101bc:	6939      	ldr	r1, [r7, #16]
 80101be:	6878      	ldr	r0, [r7, #4]
 80101c0:	f7ff fd72 	bl	800fca8 <tcp_create_segment>
 80101c4:	60f8      	str	r0, [r7, #12]
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d109      	bne.n	80101e0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	8b5b      	ldrh	r3, [r3, #26]
 80101d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80101d4:	b29a      	uxth	r2, r3
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80101da:	f04f 33ff 	mov.w	r3, #4294967295
 80101de:	e070      	b.n	80102c2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	68db      	ldr	r3, [r3, #12]
 80101e4:	f003 0303 	and.w	r3, r3, #3
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d006      	beq.n	80101fa <tcp_enqueue_flags+0xea>
 80101ec:	4b37      	ldr	r3, [pc, #220]	@ (80102cc <tcp_enqueue_flags+0x1bc>)
 80101ee:	f240 4242 	movw	r2, #1090	@ 0x442
 80101f2:	493b      	ldr	r1, [pc, #236]	@ (80102e0 <tcp_enqueue_flags+0x1d0>)
 80101f4:	4837      	ldr	r0, [pc, #220]	@ (80102d4 <tcp_enqueue_flags+0x1c4>)
 80101f6:	f006 fe45 	bl	8016e84 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	891b      	ldrh	r3, [r3, #8]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d006      	beq.n	8010210 <tcp_enqueue_flags+0x100>
 8010202:	4b32      	ldr	r3, [pc, #200]	@ (80102cc <tcp_enqueue_flags+0x1bc>)
 8010204:	f240 4243 	movw	r2, #1091	@ 0x443
 8010208:	4936      	ldr	r1, [pc, #216]	@ (80102e4 <tcp_enqueue_flags+0x1d4>)
 801020a:	4832      	ldr	r0, [pc, #200]	@ (80102d4 <tcp_enqueue_flags+0x1c4>)
 801020c:	f006 fe3a 	bl	8016e84 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010214:	2b00      	cmp	r3, #0
 8010216:	d103      	bne.n	8010220 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	68fa      	ldr	r2, [r7, #12]
 801021c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801021e:	e00d      	b.n	801023c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010224:	61bb      	str	r3, [r7, #24]
 8010226:	e002      	b.n	801022e <tcp_enqueue_flags+0x11e>
 8010228:	69bb      	ldr	r3, [r7, #24]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	61bb      	str	r3, [r7, #24]
 801022e:	69bb      	ldr	r3, [r7, #24]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d1f8      	bne.n	8010228 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010236:	69bb      	ldr	r3, [r7, #24]
 8010238:	68fa      	ldr	r2, [r7, #12]
 801023a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	2200      	movs	r2, #0
 8010240:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010244:	78fb      	ldrb	r3, [r7, #3]
 8010246:	f003 0302 	and.w	r3, r3, #2
 801024a:	2b00      	cmp	r3, #0
 801024c:	d104      	bne.n	8010258 <tcp_enqueue_flags+0x148>
 801024e:	78fb      	ldrb	r3, [r7, #3]
 8010250:	f003 0301 	and.w	r3, r3, #1
 8010254:	2b00      	cmp	r3, #0
 8010256:	d004      	beq.n	8010262 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801025c:	1c5a      	adds	r2, r3, #1
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010262:	78fb      	ldrb	r3, [r7, #3]
 8010264:	f003 0301 	and.w	r3, r3, #1
 8010268:	2b00      	cmp	r3, #0
 801026a:	d006      	beq.n	801027a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	8b5b      	ldrh	r3, [r3, #26]
 8010270:	f043 0320 	orr.w	r3, r3, #32
 8010274:	b29a      	uxth	r2, r3
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	685b      	ldr	r3, [r3, #4]
 801027e:	4618      	mov	r0, r3
 8010280:	f7fb fc36 	bl	800baf0 <pbuf_clen>
 8010284:	4603      	mov	r3, r0
 8010286:	461a      	mov	r2, r3
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801028e:	4413      	add	r3, r2
 8010290:	b29a      	uxth	r2, r3
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d00e      	beq.n	80102c0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d10a      	bne.n	80102c0 <tcp_enqueue_flags+0x1b0>
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d106      	bne.n	80102c0 <tcp_enqueue_flags+0x1b0>
 80102b2:	4b06      	ldr	r3, [pc, #24]	@ (80102cc <tcp_enqueue_flags+0x1bc>)
 80102b4:	f240 4265 	movw	r2, #1125	@ 0x465
 80102b8:	490b      	ldr	r1, [pc, #44]	@ (80102e8 <tcp_enqueue_flags+0x1d8>)
 80102ba:	4806      	ldr	r0, [pc, #24]	@ (80102d4 <tcp_enqueue_flags+0x1c4>)
 80102bc:	f006 fde2 	bl	8016e84 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80102c0:	2300      	movs	r3, #0
}
 80102c2:	4618      	mov	r0, r3
 80102c4:	3720      	adds	r7, #32
 80102c6:	46bd      	mov	sp, r7
 80102c8:	bd80      	pop	{r7, pc}
 80102ca:	bf00      	nop
 80102cc:	08019b08 	.word	0x08019b08
 80102d0:	08019f2c 	.word	0x08019f2c
 80102d4:	08019b5c 	.word	0x08019b5c
 80102d8:	08019f84 	.word	0x08019f84
 80102dc:	08019fa4 	.word	0x08019fa4
 80102e0:	08019fe0 	.word	0x08019fe0
 80102e4:	08019ff8 	.word	0x08019ff8
 80102e8:	0801a024 	.word	0x0801a024

080102ec <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80102ec:	b5b0      	push	{r4, r5, r7, lr}
 80102ee:	b08a      	sub	sp, #40	@ 0x28
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d106      	bne.n	8010308 <tcp_output+0x1c>
 80102fa:	4b8a      	ldr	r3, [pc, #552]	@ (8010524 <tcp_output+0x238>)
 80102fc:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8010300:	4989      	ldr	r1, [pc, #548]	@ (8010528 <tcp_output+0x23c>)
 8010302:	488a      	ldr	r0, [pc, #552]	@ (801052c <tcp_output+0x240>)
 8010304:	f006 fdbe 	bl	8016e84 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	7d1b      	ldrb	r3, [r3, #20]
 801030c:	2b01      	cmp	r3, #1
 801030e:	d106      	bne.n	801031e <tcp_output+0x32>
 8010310:	4b84      	ldr	r3, [pc, #528]	@ (8010524 <tcp_output+0x238>)
 8010312:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8010316:	4986      	ldr	r1, [pc, #536]	@ (8010530 <tcp_output+0x244>)
 8010318:	4884      	ldr	r0, [pc, #528]	@ (801052c <tcp_output+0x240>)
 801031a:	f006 fdb3 	bl	8016e84 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801031e:	4b85      	ldr	r3, [pc, #532]	@ (8010534 <tcp_output+0x248>)
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	687a      	ldr	r2, [r7, #4]
 8010324:	429a      	cmp	r2, r3
 8010326:	d101      	bne.n	801032c <tcp_output+0x40>
    return ERR_OK;
 8010328:	2300      	movs	r3, #0
 801032a:	e1ce      	b.n	80106ca <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010338:	4293      	cmp	r3, r2
 801033a:	bf28      	it	cs
 801033c:	4613      	movcs	r3, r2
 801033e:	b29b      	uxth	r3, r3
 8010340:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010346:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8010348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801034a:	2b00      	cmp	r3, #0
 801034c:	d10b      	bne.n	8010366 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	8b5b      	ldrh	r3, [r3, #26]
 8010352:	f003 0302 	and.w	r3, r3, #2
 8010356:	2b00      	cmp	r3, #0
 8010358:	f000 81aa 	beq.w	80106b0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801035c:	6878      	ldr	r0, [r7, #4]
 801035e:	f000 fdcb 	bl	8010ef8 <tcp_send_empty_ack>
 8010362:	4603      	mov	r3, r0
 8010364:	e1b1      	b.n	80106ca <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010366:	6879      	ldr	r1, [r7, #4]
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	3304      	adds	r3, #4
 801036c:	461a      	mov	r2, r3
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	f7ff fc7e 	bl	800fc70 <tcp_route>
 8010374:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010376:	697b      	ldr	r3, [r7, #20]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d102      	bne.n	8010382 <tcp_output+0x96>
    return ERR_RTE;
 801037c:	f06f 0303 	mvn.w	r3, #3
 8010380:	e1a3      	b.n	80106ca <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d003      	beq.n	8010390 <tcp_output+0xa4>
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d111      	bne.n	80103b4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010390:	697b      	ldr	r3, [r7, #20]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d002      	beq.n	801039c <tcp_output+0xb0>
 8010396:	697b      	ldr	r3, [r7, #20]
 8010398:	3304      	adds	r3, #4
 801039a:	e000      	b.n	801039e <tcp_output+0xb2>
 801039c:	2300      	movs	r3, #0
 801039e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80103a0:	693b      	ldr	r3, [r7, #16]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d102      	bne.n	80103ac <tcp_output+0xc0>
      return ERR_RTE;
 80103a6:	f06f 0303 	mvn.w	r3, #3
 80103aa:	e18e      	b.n	80106ca <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80103ac:	693b      	ldr	r3, [r7, #16]
 80103ae:	681a      	ldr	r2, [r3, #0]
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80103b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103b6:	68db      	ldr	r3, [r3, #12]
 80103b8:	685b      	ldr	r3, [r3, #4]
 80103ba:	4618      	mov	r0, r3
 80103bc:	f7f9 fdcb 	bl	8009f56 <lwip_htonl>
 80103c0:	4602      	mov	r2, r0
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80103c6:	1ad3      	subs	r3, r2, r3
 80103c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80103ca:	8912      	ldrh	r2, [r2, #8]
 80103cc:	4413      	add	r3, r2
 80103ce:	69ba      	ldr	r2, [r7, #24]
 80103d0:	429a      	cmp	r2, r3
 80103d2:	d227      	bcs.n	8010424 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80103da:	461a      	mov	r2, r3
 80103dc:	69bb      	ldr	r3, [r7, #24]
 80103de:	4293      	cmp	r3, r2
 80103e0:	d114      	bne.n	801040c <tcp_output+0x120>
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d110      	bne.n	801040c <tcp_output+0x120>
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d10b      	bne.n	801040c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	2200      	movs	r2, #0
 80103f8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	2201      	movs	r2, #1
 8010400:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	2200      	movs	r2, #0
 8010408:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	8b5b      	ldrh	r3, [r3, #26]
 8010410:	f003 0302 	and.w	r3, r3, #2
 8010414:	2b00      	cmp	r3, #0
 8010416:	f000 814d 	beq.w	80106b4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801041a:	6878      	ldr	r0, [r7, #4]
 801041c:	f000 fd6c 	bl	8010ef8 <tcp_send_empty_ack>
 8010420:	4603      	mov	r3, r0
 8010422:	e152      	b.n	80106ca <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	2200      	movs	r2, #0
 8010428:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010430:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010432:	6a3b      	ldr	r3, [r7, #32]
 8010434:	2b00      	cmp	r3, #0
 8010436:	f000 811c 	beq.w	8010672 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801043a:	e002      	b.n	8010442 <tcp_output+0x156>
 801043c:	6a3b      	ldr	r3, [r7, #32]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	623b      	str	r3, [r7, #32]
 8010442:	6a3b      	ldr	r3, [r7, #32]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d1f8      	bne.n	801043c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801044a:	e112      	b.n	8010672 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801044c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801044e:	68db      	ldr	r3, [r3, #12]
 8010450:	899b      	ldrh	r3, [r3, #12]
 8010452:	b29b      	uxth	r3, r3
 8010454:	4618      	mov	r0, r3
 8010456:	f7f9 fd69 	bl	8009f2c <lwip_htons>
 801045a:	4603      	mov	r3, r0
 801045c:	b2db      	uxtb	r3, r3
 801045e:	f003 0304 	and.w	r3, r3, #4
 8010462:	2b00      	cmp	r3, #0
 8010464:	d006      	beq.n	8010474 <tcp_output+0x188>
 8010466:	4b2f      	ldr	r3, [pc, #188]	@ (8010524 <tcp_output+0x238>)
 8010468:	f240 5236 	movw	r2, #1334	@ 0x536
 801046c:	4932      	ldr	r1, [pc, #200]	@ (8010538 <tcp_output+0x24c>)
 801046e:	482f      	ldr	r0, [pc, #188]	@ (801052c <tcp_output+0x240>)
 8010470:	f006 fd08 	bl	8016e84 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010478:	2b00      	cmp	r3, #0
 801047a:	d01f      	beq.n	80104bc <tcp_output+0x1d0>
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	8b5b      	ldrh	r3, [r3, #26]
 8010480:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8010484:	2b00      	cmp	r3, #0
 8010486:	d119      	bne.n	80104bc <tcp_output+0x1d0>
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801048c:	2b00      	cmp	r3, #0
 801048e:	d00b      	beq.n	80104a8 <tcp_output+0x1bc>
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d110      	bne.n	80104bc <tcp_output+0x1d0>
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801049e:	891a      	ldrh	r2, [r3, #8]
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80104a4:	429a      	cmp	r2, r3
 80104a6:	d209      	bcs.n	80104bc <tcp_output+0x1d0>
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d004      	beq.n	80104bc <tcp_output+0x1d0>
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80104b8:	2b08      	cmp	r3, #8
 80104ba:	d901      	bls.n	80104c0 <tcp_output+0x1d4>
 80104bc:	2301      	movs	r3, #1
 80104be:	e000      	b.n	80104c2 <tcp_output+0x1d6>
 80104c0:	2300      	movs	r3, #0
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d106      	bne.n	80104d4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	8b5b      	ldrh	r3, [r3, #26]
 80104ca:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	f000 80e4 	beq.w	801069c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	7d1b      	ldrb	r3, [r3, #20]
 80104d8:	2b02      	cmp	r3, #2
 80104da:	d00d      	beq.n	80104f8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80104dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104de:	68db      	ldr	r3, [r3, #12]
 80104e0:	899b      	ldrh	r3, [r3, #12]
 80104e2:	b29c      	uxth	r4, r3
 80104e4:	2010      	movs	r0, #16
 80104e6:	f7f9 fd21 	bl	8009f2c <lwip_htons>
 80104ea:	4603      	mov	r3, r0
 80104ec:	461a      	mov	r2, r3
 80104ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104f0:	68db      	ldr	r3, [r3, #12]
 80104f2:	4322      	orrs	r2, r4
 80104f4:	b292      	uxth	r2, r2
 80104f6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80104f8:	697a      	ldr	r2, [r7, #20]
 80104fa:	6879      	ldr	r1, [r7, #4]
 80104fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80104fe:	f000 f909 	bl	8010714 <tcp_output_segment>
 8010502:	4603      	mov	r3, r0
 8010504:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d016      	beq.n	801053c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	8b5b      	ldrh	r3, [r3, #26]
 8010512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010516:	b29a      	uxth	r2, r3
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	835a      	strh	r2, [r3, #26]
      return err;
 801051c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010520:	e0d3      	b.n	80106ca <tcp_output+0x3de>
 8010522:	bf00      	nop
 8010524:	08019b08 	.word	0x08019b08
 8010528:	0801a04c 	.word	0x0801a04c
 801052c:	08019b5c 	.word	0x08019b5c
 8010530:	0801a064 	.word	0x0801a064
 8010534:	2000cb08 	.word	0x2000cb08
 8010538:	0801a08c 	.word	0x0801a08c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801053c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801053e:	681a      	ldr	r2, [r3, #0]
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	7d1b      	ldrb	r3, [r3, #20]
 8010548:	2b02      	cmp	r3, #2
 801054a:	d006      	beq.n	801055a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	8b5b      	ldrh	r3, [r3, #26]
 8010550:	f023 0303 	bic.w	r3, r3, #3
 8010554:	b29a      	uxth	r2, r3
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801055a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801055c:	68db      	ldr	r3, [r3, #12]
 801055e:	685b      	ldr	r3, [r3, #4]
 8010560:	4618      	mov	r0, r3
 8010562:	f7f9 fcf8 	bl	8009f56 <lwip_htonl>
 8010566:	4604      	mov	r4, r0
 8010568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801056a:	891b      	ldrh	r3, [r3, #8]
 801056c:	461d      	mov	r5, r3
 801056e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010570:	68db      	ldr	r3, [r3, #12]
 8010572:	899b      	ldrh	r3, [r3, #12]
 8010574:	b29b      	uxth	r3, r3
 8010576:	4618      	mov	r0, r3
 8010578:	f7f9 fcd8 	bl	8009f2c <lwip_htons>
 801057c:	4603      	mov	r3, r0
 801057e:	b2db      	uxtb	r3, r3
 8010580:	f003 0303 	and.w	r3, r3, #3
 8010584:	2b00      	cmp	r3, #0
 8010586:	d001      	beq.n	801058c <tcp_output+0x2a0>
 8010588:	2301      	movs	r3, #1
 801058a:	e000      	b.n	801058e <tcp_output+0x2a2>
 801058c:	2300      	movs	r3, #0
 801058e:	442b      	add	r3, r5
 8010590:	4423      	add	r3, r4
 8010592:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010598:	68bb      	ldr	r3, [r7, #8]
 801059a:	1ad3      	subs	r3, r2, r3
 801059c:	2b00      	cmp	r3, #0
 801059e:	da02      	bge.n	80105a6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	68ba      	ldr	r2, [r7, #8]
 80105a4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80105a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105a8:	891b      	ldrh	r3, [r3, #8]
 80105aa:	461c      	mov	r4, r3
 80105ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105ae:	68db      	ldr	r3, [r3, #12]
 80105b0:	899b      	ldrh	r3, [r3, #12]
 80105b2:	b29b      	uxth	r3, r3
 80105b4:	4618      	mov	r0, r3
 80105b6:	f7f9 fcb9 	bl	8009f2c <lwip_htons>
 80105ba:	4603      	mov	r3, r0
 80105bc:	b2db      	uxtb	r3, r3
 80105be:	f003 0303 	and.w	r3, r3, #3
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d001      	beq.n	80105ca <tcp_output+0x2de>
 80105c6:	2301      	movs	r3, #1
 80105c8:	e000      	b.n	80105cc <tcp_output+0x2e0>
 80105ca:	2300      	movs	r3, #0
 80105cc:	4423      	add	r3, r4
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d049      	beq.n	8010666 <tcp_output+0x37a>
      seg->next = NULL;
 80105d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105d4:	2200      	movs	r2, #0
 80105d6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d105      	bne.n	80105ec <tcp_output+0x300>
        pcb->unacked = seg;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80105e4:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 80105e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105e8:	623b      	str	r3, [r7, #32]
 80105ea:	e03f      	b.n	801066c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80105ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105ee:	68db      	ldr	r3, [r3, #12]
 80105f0:	685b      	ldr	r3, [r3, #4]
 80105f2:	4618      	mov	r0, r3
 80105f4:	f7f9 fcaf 	bl	8009f56 <lwip_htonl>
 80105f8:	4604      	mov	r4, r0
 80105fa:	6a3b      	ldr	r3, [r7, #32]
 80105fc:	68db      	ldr	r3, [r3, #12]
 80105fe:	685b      	ldr	r3, [r3, #4]
 8010600:	4618      	mov	r0, r3
 8010602:	f7f9 fca8 	bl	8009f56 <lwip_htonl>
 8010606:	4603      	mov	r3, r0
 8010608:	1ae3      	subs	r3, r4, r3
 801060a:	2b00      	cmp	r3, #0
 801060c:	da24      	bge.n	8010658 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	3370      	adds	r3, #112	@ 0x70
 8010612:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010614:	e002      	b.n	801061c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8010616:	69fb      	ldr	r3, [r7, #28]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801061c:	69fb      	ldr	r3, [r7, #28]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d011      	beq.n	8010648 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010624:	69fb      	ldr	r3, [r7, #28]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	68db      	ldr	r3, [r3, #12]
 801062a:	685b      	ldr	r3, [r3, #4]
 801062c:	4618      	mov	r0, r3
 801062e:	f7f9 fc92 	bl	8009f56 <lwip_htonl>
 8010632:	4604      	mov	r4, r0
 8010634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010636:	68db      	ldr	r3, [r3, #12]
 8010638:	685b      	ldr	r3, [r3, #4]
 801063a:	4618      	mov	r0, r3
 801063c:	f7f9 fc8b 	bl	8009f56 <lwip_htonl>
 8010640:	4603      	mov	r3, r0
 8010642:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010644:	2b00      	cmp	r3, #0
 8010646:	dbe6      	blt.n	8010616 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8010648:	69fb      	ldr	r3, [r7, #28]
 801064a:	681a      	ldr	r2, [r3, #0]
 801064c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801064e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010650:	69fb      	ldr	r3, [r7, #28]
 8010652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010654:	601a      	str	r2, [r3, #0]
 8010656:	e009      	b.n	801066c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010658:	6a3b      	ldr	r3, [r7, #32]
 801065a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801065c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801065e:	6a3b      	ldr	r3, [r7, #32]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	623b      	str	r3, [r7, #32]
 8010664:	e002      	b.n	801066c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8010666:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010668:	f7fc fc45 	bl	800cef6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010670:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8010672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010674:	2b00      	cmp	r3, #0
 8010676:	d012      	beq.n	801069e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801067a:	68db      	ldr	r3, [r3, #12]
 801067c:	685b      	ldr	r3, [r3, #4]
 801067e:	4618      	mov	r0, r3
 8010680:	f7f9 fc69 	bl	8009f56 <lwip_htonl>
 8010684:	4602      	mov	r2, r0
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801068a:	1ad3      	subs	r3, r2, r3
 801068c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801068e:	8912      	ldrh	r2, [r2, #8]
 8010690:	4413      	add	r3, r2
  while (seg != NULL &&
 8010692:	69ba      	ldr	r2, [r7, #24]
 8010694:	429a      	cmp	r2, r3
 8010696:	f4bf aed9 	bcs.w	801044c <tcp_output+0x160>
 801069a:	e000      	b.n	801069e <tcp_output+0x3b2>
      break;
 801069c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d108      	bne.n	80106b8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	2200      	movs	r2, #0
 80106aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80106ae:	e004      	b.n	80106ba <tcp_output+0x3ce>
    goto output_done;
 80106b0:	bf00      	nop
 80106b2:	e002      	b.n	80106ba <tcp_output+0x3ce>
    goto output_done;
 80106b4:	bf00      	nop
 80106b6:	e000      	b.n	80106ba <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80106b8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	8b5b      	ldrh	r3, [r3, #26]
 80106be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80106c2:	b29a      	uxth	r2, r3
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80106c8:	2300      	movs	r3, #0
}
 80106ca:	4618      	mov	r0, r3
 80106cc:	3728      	adds	r7, #40	@ 0x28
 80106ce:	46bd      	mov	sp, r7
 80106d0:	bdb0      	pop	{r4, r5, r7, pc}
 80106d2:	bf00      	nop

080106d4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b082      	sub	sp, #8
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d106      	bne.n	80106f0 <tcp_output_segment_busy+0x1c>
 80106e2:	4b09      	ldr	r3, [pc, #36]	@ (8010708 <tcp_output_segment_busy+0x34>)
 80106e4:	f240 529a 	movw	r2, #1434	@ 0x59a
 80106e8:	4908      	ldr	r1, [pc, #32]	@ (801070c <tcp_output_segment_busy+0x38>)
 80106ea:	4809      	ldr	r0, [pc, #36]	@ (8010710 <tcp_output_segment_busy+0x3c>)
 80106ec:	f006 fbca 	bl	8016e84 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	685b      	ldr	r3, [r3, #4]
 80106f4:	7b9b      	ldrb	r3, [r3, #14]
 80106f6:	2b01      	cmp	r3, #1
 80106f8:	d001      	beq.n	80106fe <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80106fa:	2301      	movs	r3, #1
 80106fc:	e000      	b.n	8010700 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80106fe:	2300      	movs	r3, #0
}
 8010700:	4618      	mov	r0, r3
 8010702:	3708      	adds	r7, #8
 8010704:	46bd      	mov	sp, r7
 8010706:	bd80      	pop	{r7, pc}
 8010708:	08019b08 	.word	0x08019b08
 801070c:	0801a0a4 	.word	0x0801a0a4
 8010710:	08019b5c 	.word	0x08019b5c

08010714 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010714:	b5b0      	push	{r4, r5, r7, lr}
 8010716:	b08c      	sub	sp, #48	@ 0x30
 8010718:	af04      	add	r7, sp, #16
 801071a:	60f8      	str	r0, [r7, #12]
 801071c:	60b9      	str	r1, [r7, #8]
 801071e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d106      	bne.n	8010734 <tcp_output_segment+0x20>
 8010726:	4b64      	ldr	r3, [pc, #400]	@ (80108b8 <tcp_output_segment+0x1a4>)
 8010728:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 801072c:	4963      	ldr	r1, [pc, #396]	@ (80108bc <tcp_output_segment+0x1a8>)
 801072e:	4864      	ldr	r0, [pc, #400]	@ (80108c0 <tcp_output_segment+0x1ac>)
 8010730:	f006 fba8 	bl	8016e84 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010734:	68bb      	ldr	r3, [r7, #8]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d106      	bne.n	8010748 <tcp_output_segment+0x34>
 801073a:	4b5f      	ldr	r3, [pc, #380]	@ (80108b8 <tcp_output_segment+0x1a4>)
 801073c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8010740:	4960      	ldr	r1, [pc, #384]	@ (80108c4 <tcp_output_segment+0x1b0>)
 8010742:	485f      	ldr	r0, [pc, #380]	@ (80108c0 <tcp_output_segment+0x1ac>)
 8010744:	f006 fb9e 	bl	8016e84 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d106      	bne.n	801075c <tcp_output_segment+0x48>
 801074e:	4b5a      	ldr	r3, [pc, #360]	@ (80108b8 <tcp_output_segment+0x1a4>)
 8010750:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8010754:	495c      	ldr	r1, [pc, #368]	@ (80108c8 <tcp_output_segment+0x1b4>)
 8010756:	485a      	ldr	r0, [pc, #360]	@ (80108c0 <tcp_output_segment+0x1ac>)
 8010758:	f006 fb94 	bl	8016e84 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801075c:	68f8      	ldr	r0, [r7, #12]
 801075e:	f7ff ffb9 	bl	80106d4 <tcp_output_segment_busy>
 8010762:	4603      	mov	r3, r0
 8010764:	2b00      	cmp	r3, #0
 8010766:	d001      	beq.n	801076c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8010768:	2300      	movs	r3, #0
 801076a:	e0a1      	b.n	80108b0 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801076c:	68bb      	ldr	r3, [r7, #8]
 801076e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	68dc      	ldr	r4, [r3, #12]
 8010774:	4610      	mov	r0, r2
 8010776:	f7f9 fbee 	bl	8009f56 <lwip_htonl>
 801077a:	4603      	mov	r3, r0
 801077c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801077e:	68bb      	ldr	r3, [r7, #8]
 8010780:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	68dc      	ldr	r4, [r3, #12]
 8010786:	4610      	mov	r0, r2
 8010788:	f7f9 fbd0 	bl	8009f2c <lwip_htons>
 801078c:	4603      	mov	r3, r0
 801078e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010790:	68bb      	ldr	r3, [r7, #8]
 8010792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010794:	68ba      	ldr	r2, [r7, #8]
 8010796:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8010798:	441a      	add	r2, r3
 801079a:	68bb      	ldr	r3, [r7, #8]
 801079c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	68db      	ldr	r3, [r3, #12]
 80107a2:	3314      	adds	r3, #20
 80107a4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	7a9b      	ldrb	r3, [r3, #10]
 80107aa:	f003 0301 	and.w	r3, r3, #1
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d015      	beq.n	80107de <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80107b2:	68bb      	ldr	r3, [r7, #8]
 80107b4:	3304      	adds	r3, #4
 80107b6:	461a      	mov	r2, r3
 80107b8:	6879      	ldr	r1, [r7, #4]
 80107ba:	f44f 7006 	mov.w	r0, #536	@ 0x218
 80107be:	f7fc fe91 	bl	800d4e4 <tcp_eff_send_mss_netif>
 80107c2:	4603      	mov	r3, r0
 80107c4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80107c6:	8b7b      	ldrh	r3, [r7, #26]
 80107c8:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 80107cc:	4618      	mov	r0, r3
 80107ce:	f7f9 fbc2 	bl	8009f56 <lwip_htonl>
 80107d2:	4602      	mov	r2, r0
 80107d4:	69fb      	ldr	r3, [r7, #28]
 80107d6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80107d8:	69fb      	ldr	r3, [r7, #28]
 80107da:	3304      	adds	r3, #4
 80107dc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80107de:	68bb      	ldr	r3, [r7, #8]
 80107e0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	da02      	bge.n	80107ee <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80107e8:	68bb      	ldr	r3, [r7, #8]
 80107ea:	2200      	movs	r2, #0
 80107ec:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80107ee:	68bb      	ldr	r3, [r7, #8]
 80107f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d10c      	bne.n	8010810 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80107f6:	4b35      	ldr	r3, [pc, #212]	@ (80108cc <tcp_output_segment+0x1b8>)
 80107f8:	681a      	ldr	r2, [r3, #0]
 80107fa:	68bb      	ldr	r3, [r7, #8]
 80107fc:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	68db      	ldr	r3, [r3, #12]
 8010802:	685b      	ldr	r3, [r3, #4]
 8010804:	4618      	mov	r0, r3
 8010806:	f7f9 fba6 	bl	8009f56 <lwip_htonl>
 801080a:	4602      	mov	r2, r0
 801080c:	68bb      	ldr	r3, [r7, #8]
 801080e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	68da      	ldr	r2, [r3, #12]
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	685b      	ldr	r3, [r3, #4]
 8010818:	685b      	ldr	r3, [r3, #4]
 801081a:	1ad3      	subs	r3, r2, r3
 801081c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	685b      	ldr	r3, [r3, #4]
 8010822:	8959      	ldrh	r1, [r3, #10]
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	685b      	ldr	r3, [r3, #4]
 8010828:	8b3a      	ldrh	r2, [r7, #24]
 801082a:	1a8a      	subs	r2, r1, r2
 801082c:	b292      	uxth	r2, r2
 801082e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	685b      	ldr	r3, [r3, #4]
 8010834:	8919      	ldrh	r1, [r3, #8]
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	685b      	ldr	r3, [r3, #4]
 801083a:	8b3a      	ldrh	r2, [r7, #24]
 801083c:	1a8a      	subs	r2, r1, r2
 801083e:	b292      	uxth	r2, r2
 8010840:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	685b      	ldr	r3, [r3, #4]
 8010846:	68fa      	ldr	r2, [r7, #12]
 8010848:	68d2      	ldr	r2, [r2, #12]
 801084a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	68db      	ldr	r3, [r3, #12]
 8010850:	2200      	movs	r2, #0
 8010852:	741a      	strb	r2, [r3, #16]
 8010854:	2200      	movs	r2, #0
 8010856:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	68da      	ldr	r2, [r3, #12]
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	7a9b      	ldrb	r3, [r3, #10]
 8010860:	f003 0301 	and.w	r3, r3, #1
 8010864:	2b00      	cmp	r3, #0
 8010866:	d001      	beq.n	801086c <tcp_output_segment+0x158>
 8010868:	2318      	movs	r3, #24
 801086a:	e000      	b.n	801086e <tcp_output_segment+0x15a>
 801086c:	2314      	movs	r3, #20
 801086e:	4413      	add	r3, r2
 8010870:	69fa      	ldr	r2, [r7, #28]
 8010872:	429a      	cmp	r2, r3
 8010874:	d006      	beq.n	8010884 <tcp_output_segment+0x170>
 8010876:	4b10      	ldr	r3, [pc, #64]	@ (80108b8 <tcp_output_segment+0x1a4>)
 8010878:	f240 621c 	movw	r2, #1564	@ 0x61c
 801087c:	4914      	ldr	r1, [pc, #80]	@ (80108d0 <tcp_output_segment+0x1bc>)
 801087e:	4810      	ldr	r0, [pc, #64]	@ (80108c0 <tcp_output_segment+0x1ac>)
 8010880:	f006 fb00 	bl	8016e84 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	6858      	ldr	r0, [r3, #4]
 8010888:	68b9      	ldr	r1, [r7, #8]
 801088a:	68bb      	ldr	r3, [r7, #8]
 801088c:	1d1c      	adds	r4, r3, #4
 801088e:	68bb      	ldr	r3, [r7, #8]
 8010890:	7add      	ldrb	r5, [r3, #11]
 8010892:	68bb      	ldr	r3, [r7, #8]
 8010894:	7a9b      	ldrb	r3, [r3, #10]
 8010896:	687a      	ldr	r2, [r7, #4]
 8010898:	9202      	str	r2, [sp, #8]
 801089a:	2206      	movs	r2, #6
 801089c:	9201      	str	r2, [sp, #4]
 801089e:	9300      	str	r3, [sp, #0]
 80108a0:	462b      	mov	r3, r5
 80108a2:	4622      	mov	r2, r4
 80108a4:	f004 ffa4 	bl	80157f0 <ip4_output_if>
 80108a8:	4603      	mov	r3, r0
 80108aa:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80108ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80108b0:	4618      	mov	r0, r3
 80108b2:	3720      	adds	r7, #32
 80108b4:	46bd      	mov	sp, r7
 80108b6:	bdb0      	pop	{r4, r5, r7, pc}
 80108b8:	08019b08 	.word	0x08019b08
 80108bc:	0801a0cc 	.word	0x0801a0cc
 80108c0:	08019b5c 	.word	0x08019b5c
 80108c4:	0801a0ec 	.word	0x0801a0ec
 80108c8:	0801a10c 	.word	0x0801a10c
 80108cc:	2000cabc 	.word	0x2000cabc
 80108d0:	0801a130 	.word	0x0801a130

080108d4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80108d4:	b5b0      	push	{r4, r5, r7, lr}
 80108d6:	b084      	sub	sp, #16
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d106      	bne.n	80108f0 <tcp_rexmit_rto_prepare+0x1c>
 80108e2:	4b31      	ldr	r3, [pc, #196]	@ (80109a8 <tcp_rexmit_rto_prepare+0xd4>)
 80108e4:	f240 6263 	movw	r2, #1635	@ 0x663
 80108e8:	4930      	ldr	r1, [pc, #192]	@ (80109ac <tcp_rexmit_rto_prepare+0xd8>)
 80108ea:	4831      	ldr	r0, [pc, #196]	@ (80109b0 <tcp_rexmit_rto_prepare+0xdc>)
 80108ec:	f006 faca 	bl	8016e84 <iprintf>

  if (pcb->unacked == NULL) {
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d102      	bne.n	80108fe <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80108f8:	f06f 0305 	mvn.w	r3, #5
 80108fc:	e050      	b.n	80109a0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010902:	60fb      	str	r3, [r7, #12]
 8010904:	e00b      	b.n	801091e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8010906:	68f8      	ldr	r0, [r7, #12]
 8010908:	f7ff fee4 	bl	80106d4 <tcp_output_segment_busy>
 801090c:	4603      	mov	r3, r0
 801090e:	2b00      	cmp	r3, #0
 8010910:	d002      	beq.n	8010918 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8010912:	f06f 0305 	mvn.w	r3, #5
 8010916:	e043      	b.n	80109a0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	60fb      	str	r3, [r7, #12]
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d1ef      	bne.n	8010906 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8010926:	68f8      	ldr	r0, [r7, #12]
 8010928:	f7ff fed4 	bl	80106d4 <tcp_output_segment_busy>
 801092c:	4603      	mov	r3, r0
 801092e:	2b00      	cmp	r3, #0
 8010930:	d002      	beq.n	8010938 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8010932:	f06f 0305 	mvn.w	r3, #5
 8010936:	e033      	b.n	80109a0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2200      	movs	r2, #0
 801094c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	8b5b      	ldrh	r3, [r3, #26]
 8010952:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8010956:	b29a      	uxth	r2, r3
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	68db      	ldr	r3, [r3, #12]
 8010960:	685b      	ldr	r3, [r3, #4]
 8010962:	4618      	mov	r0, r3
 8010964:	f7f9 faf7 	bl	8009f56 <lwip_htonl>
 8010968:	4604      	mov	r4, r0
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	891b      	ldrh	r3, [r3, #8]
 801096e:	461d      	mov	r5, r3
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	68db      	ldr	r3, [r3, #12]
 8010974:	899b      	ldrh	r3, [r3, #12]
 8010976:	b29b      	uxth	r3, r3
 8010978:	4618      	mov	r0, r3
 801097a:	f7f9 fad7 	bl	8009f2c <lwip_htons>
 801097e:	4603      	mov	r3, r0
 8010980:	b2db      	uxtb	r3, r3
 8010982:	f003 0303 	and.w	r3, r3, #3
 8010986:	2b00      	cmp	r3, #0
 8010988:	d001      	beq.n	801098e <tcp_rexmit_rto_prepare+0xba>
 801098a:	2301      	movs	r3, #1
 801098c:	e000      	b.n	8010990 <tcp_rexmit_rto_prepare+0xbc>
 801098e:	2300      	movs	r3, #0
 8010990:	442b      	add	r3, r5
 8010992:	18e2      	adds	r2, r4, r3
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	2200      	movs	r2, #0
 801099c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801099e:	2300      	movs	r3, #0
}
 80109a0:	4618      	mov	r0, r3
 80109a2:	3710      	adds	r7, #16
 80109a4:	46bd      	mov	sp, r7
 80109a6:	bdb0      	pop	{r4, r5, r7, pc}
 80109a8:	08019b08 	.word	0x08019b08
 80109ac:	0801a144 	.word	0x0801a144
 80109b0:	08019b5c 	.word	0x08019b5c

080109b4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b082      	sub	sp, #8
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d106      	bne.n	80109d0 <tcp_rexmit_rto_commit+0x1c>
 80109c2:	4b0d      	ldr	r3, [pc, #52]	@ (80109f8 <tcp_rexmit_rto_commit+0x44>)
 80109c4:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80109c8:	490c      	ldr	r1, [pc, #48]	@ (80109fc <tcp_rexmit_rto_commit+0x48>)
 80109ca:	480d      	ldr	r0, [pc, #52]	@ (8010a00 <tcp_rexmit_rto_commit+0x4c>)
 80109cc:	f006 fa5a 	bl	8016e84 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80109d6:	2bff      	cmp	r3, #255	@ 0xff
 80109d8:	d007      	beq.n	80109ea <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80109e0:	3301      	adds	r3, #1
 80109e2:	b2da      	uxtb	r2, r3
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80109ea:	6878      	ldr	r0, [r7, #4]
 80109ec:	f7ff fc7e 	bl	80102ec <tcp_output>
}
 80109f0:	bf00      	nop
 80109f2:	3708      	adds	r7, #8
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bd80      	pop	{r7, pc}
 80109f8:	08019b08 	.word	0x08019b08
 80109fc:	0801a168 	.word	0x0801a168
 8010a00:	08019b5c 	.word	0x08019b5c

08010a04 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b082      	sub	sp, #8
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d106      	bne.n	8010a20 <tcp_rexmit_rto+0x1c>
 8010a12:	4b0a      	ldr	r3, [pc, #40]	@ (8010a3c <tcp_rexmit_rto+0x38>)
 8010a14:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8010a18:	4909      	ldr	r1, [pc, #36]	@ (8010a40 <tcp_rexmit_rto+0x3c>)
 8010a1a:	480a      	ldr	r0, [pc, #40]	@ (8010a44 <tcp_rexmit_rto+0x40>)
 8010a1c:	f006 fa32 	bl	8016e84 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010a20:	6878      	ldr	r0, [r7, #4]
 8010a22:	f7ff ff57 	bl	80108d4 <tcp_rexmit_rto_prepare>
 8010a26:	4603      	mov	r3, r0
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d102      	bne.n	8010a32 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8010a2c:	6878      	ldr	r0, [r7, #4]
 8010a2e:	f7ff ffc1 	bl	80109b4 <tcp_rexmit_rto_commit>
  }
}
 8010a32:	bf00      	nop
 8010a34:	3708      	adds	r7, #8
 8010a36:	46bd      	mov	sp, r7
 8010a38:	bd80      	pop	{r7, pc}
 8010a3a:	bf00      	nop
 8010a3c:	08019b08 	.word	0x08019b08
 8010a40:	0801a18c 	.word	0x0801a18c
 8010a44:	08019b5c 	.word	0x08019b5c

08010a48 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010a48:	b590      	push	{r4, r7, lr}
 8010a4a:	b085      	sub	sp, #20
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d106      	bne.n	8010a64 <tcp_rexmit+0x1c>
 8010a56:	4b2f      	ldr	r3, [pc, #188]	@ (8010b14 <tcp_rexmit+0xcc>)
 8010a58:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8010a5c:	492e      	ldr	r1, [pc, #184]	@ (8010b18 <tcp_rexmit+0xd0>)
 8010a5e:	482f      	ldr	r0, [pc, #188]	@ (8010b1c <tcp_rexmit+0xd4>)
 8010a60:	f006 fa10 	bl	8016e84 <iprintf>

  if (pcb->unacked == NULL) {
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d102      	bne.n	8010a72 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8010a6c:	f06f 0305 	mvn.w	r3, #5
 8010a70:	e04c      	b.n	8010b0c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010a76:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8010a78:	68b8      	ldr	r0, [r7, #8]
 8010a7a:	f7ff fe2b 	bl	80106d4 <tcp_output_segment_busy>
 8010a7e:	4603      	mov	r3, r0
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d002      	beq.n	8010a8a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8010a84:	f06f 0305 	mvn.w	r3, #5
 8010a88:	e040      	b.n	8010b0c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8010a8a:	68bb      	ldr	r3, [r7, #8]
 8010a8c:	681a      	ldr	r2, [r3, #0]
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	336c      	adds	r3, #108	@ 0x6c
 8010a96:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010a98:	e002      	b.n	8010aa0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d011      	beq.n	8010acc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	68db      	ldr	r3, [r3, #12]
 8010aae:	685b      	ldr	r3, [r3, #4]
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	f7f9 fa50 	bl	8009f56 <lwip_htonl>
 8010ab6:	4604      	mov	r4, r0
 8010ab8:	68bb      	ldr	r3, [r7, #8]
 8010aba:	68db      	ldr	r3, [r3, #12]
 8010abc:	685b      	ldr	r3, [r3, #4]
 8010abe:	4618      	mov	r0, r3
 8010ac0:	f7f9 fa49 	bl	8009f56 <lwip_htonl>
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	dbe6      	blt.n	8010a9a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	681a      	ldr	r2, [r3, #0]
 8010ad0:	68bb      	ldr	r3, [r7, #8]
 8010ad2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	68ba      	ldr	r2, [r7, #8]
 8010ad8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8010ada:	68bb      	ldr	r3, [r7, #8]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d103      	bne.n	8010aea <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	2200      	movs	r2, #0
 8010ae6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010af0:	2bff      	cmp	r3, #255	@ 0xff
 8010af2:	d007      	beq.n	8010b04 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010afa:	3301      	adds	r3, #1
 8010afc:	b2da      	uxtb	r2, r3
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	2200      	movs	r2, #0
 8010b08:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8010b0a:	2300      	movs	r3, #0
}
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	3714      	adds	r7, #20
 8010b10:	46bd      	mov	sp, r7
 8010b12:	bd90      	pop	{r4, r7, pc}
 8010b14:	08019b08 	.word	0x08019b08
 8010b18:	0801a1a8 	.word	0x0801a1a8
 8010b1c:	08019b5c 	.word	0x08019b5c

08010b20 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b082      	sub	sp, #8
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d106      	bne.n	8010b3c <tcp_rexmit_fast+0x1c>
 8010b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8010bd8 <tcp_rexmit_fast+0xb8>)
 8010b30:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8010b34:	4929      	ldr	r1, [pc, #164]	@ (8010bdc <tcp_rexmit_fast+0xbc>)
 8010b36:	482a      	ldr	r0, [pc, #168]	@ (8010be0 <tcp_rexmit_fast+0xc0>)
 8010b38:	f006 f9a4 	bl	8016e84 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d044      	beq.n	8010bce <tcp_rexmit_fast+0xae>
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	8b5b      	ldrh	r3, [r3, #26]
 8010b48:	f003 0304 	and.w	r3, r3, #4
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d13e      	bne.n	8010bce <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010b50:	6878      	ldr	r0, [r7, #4]
 8010b52:	f7ff ff79 	bl	8010a48 <tcp_rexmit>
 8010b56:	4603      	mov	r3, r0
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d138      	bne.n	8010bce <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010b68:	4293      	cmp	r3, r2
 8010b6a:	bf28      	it	cs
 8010b6c:	4613      	movcs	r3, r2
 8010b6e:	b29b      	uxth	r3, r3
 8010b70:	0fda      	lsrs	r2, r3, #31
 8010b72:	4413      	add	r3, r2
 8010b74:	105b      	asrs	r3, r3, #1
 8010b76:	b29a      	uxth	r2, r3
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8010b84:	461a      	mov	r2, r3
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010b8a:	005b      	lsls	r3, r3, #1
 8010b8c:	429a      	cmp	r2, r3
 8010b8e:	d206      	bcs.n	8010b9e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010b94:	005b      	lsls	r3, r3, #1
 8010b96:	b29a      	uxth	r2, r3
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010ba8:	4619      	mov	r1, r3
 8010baa:	0049      	lsls	r1, r1, #1
 8010bac:	440b      	add	r3, r1
 8010bae:	b29b      	uxth	r3, r3
 8010bb0:	4413      	add	r3, r2
 8010bb2:	b29a      	uxth	r2, r3
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	8b5b      	ldrh	r3, [r3, #26]
 8010bbe:	f043 0304 	orr.w	r3, r3, #4
 8010bc2:	b29a      	uxth	r2, r3
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	2200      	movs	r2, #0
 8010bcc:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8010bce:	bf00      	nop
 8010bd0:	3708      	adds	r7, #8
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	bd80      	pop	{r7, pc}
 8010bd6:	bf00      	nop
 8010bd8:	08019b08 	.word	0x08019b08
 8010bdc:	0801a1c0 	.word	0x0801a1c0
 8010be0:	08019b5c 	.word	0x08019b5c

08010be4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b086      	sub	sp, #24
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	60f8      	str	r0, [r7, #12]
 8010bec:	607b      	str	r3, [r7, #4]
 8010bee:	460b      	mov	r3, r1
 8010bf0:	817b      	strh	r3, [r7, #10]
 8010bf2:	4613      	mov	r3, r2
 8010bf4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010bf6:	897a      	ldrh	r2, [r7, #10]
 8010bf8:	893b      	ldrh	r3, [r7, #8]
 8010bfa:	4413      	add	r3, r2
 8010bfc:	b29b      	uxth	r3, r3
 8010bfe:	3314      	adds	r3, #20
 8010c00:	b29b      	uxth	r3, r3
 8010c02:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010c06:	4619      	mov	r1, r3
 8010c08:	2022      	movs	r0, #34	@ 0x22
 8010c0a:	f7fa fbff 	bl	800b40c <pbuf_alloc>
 8010c0e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010c10:	697b      	ldr	r3, [r7, #20]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d04d      	beq.n	8010cb2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010c16:	897b      	ldrh	r3, [r7, #10]
 8010c18:	3313      	adds	r3, #19
 8010c1a:	697a      	ldr	r2, [r7, #20]
 8010c1c:	8952      	ldrh	r2, [r2, #10]
 8010c1e:	4293      	cmp	r3, r2
 8010c20:	db06      	blt.n	8010c30 <tcp_output_alloc_header_common+0x4c>
 8010c22:	4b26      	ldr	r3, [pc, #152]	@ (8010cbc <tcp_output_alloc_header_common+0xd8>)
 8010c24:	f240 7223 	movw	r2, #1827	@ 0x723
 8010c28:	4925      	ldr	r1, [pc, #148]	@ (8010cc0 <tcp_output_alloc_header_common+0xdc>)
 8010c2a:	4826      	ldr	r0, [pc, #152]	@ (8010cc4 <tcp_output_alloc_header_common+0xe0>)
 8010c2c:	f006 f92a 	bl	8016e84 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010c30:	697b      	ldr	r3, [r7, #20]
 8010c32:	685b      	ldr	r3, [r3, #4]
 8010c34:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8010c36:	8c3b      	ldrh	r3, [r7, #32]
 8010c38:	4618      	mov	r0, r3
 8010c3a:	f7f9 f977 	bl	8009f2c <lwip_htons>
 8010c3e:	4603      	mov	r3, r0
 8010c40:	461a      	mov	r2, r3
 8010c42:	693b      	ldr	r3, [r7, #16]
 8010c44:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8010c46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010c48:	4618      	mov	r0, r3
 8010c4a:	f7f9 f96f 	bl	8009f2c <lwip_htons>
 8010c4e:	4603      	mov	r3, r0
 8010c50:	461a      	mov	r2, r3
 8010c52:	693b      	ldr	r3, [r7, #16]
 8010c54:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010c56:	693b      	ldr	r3, [r7, #16]
 8010c58:	687a      	ldr	r2, [r7, #4]
 8010c5a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010c5c:	68f8      	ldr	r0, [r7, #12]
 8010c5e:	f7f9 f97a 	bl	8009f56 <lwip_htonl>
 8010c62:	4602      	mov	r2, r0
 8010c64:	693b      	ldr	r3, [r7, #16]
 8010c66:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010c68:	897b      	ldrh	r3, [r7, #10]
 8010c6a:	089b      	lsrs	r3, r3, #2
 8010c6c:	b29b      	uxth	r3, r3
 8010c6e:	3305      	adds	r3, #5
 8010c70:	b29b      	uxth	r3, r3
 8010c72:	031b      	lsls	r3, r3, #12
 8010c74:	b29a      	uxth	r2, r3
 8010c76:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010c7a:	b29b      	uxth	r3, r3
 8010c7c:	4313      	orrs	r3, r2
 8010c7e:	b29b      	uxth	r3, r3
 8010c80:	4618      	mov	r0, r3
 8010c82:	f7f9 f953 	bl	8009f2c <lwip_htons>
 8010c86:	4603      	mov	r3, r0
 8010c88:	461a      	mov	r2, r3
 8010c8a:	693b      	ldr	r3, [r7, #16]
 8010c8c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010c8e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010c90:	4618      	mov	r0, r3
 8010c92:	f7f9 f94b 	bl	8009f2c <lwip_htons>
 8010c96:	4603      	mov	r3, r0
 8010c98:	461a      	mov	r2, r3
 8010c9a:	693b      	ldr	r3, [r7, #16]
 8010c9c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010c9e:	693b      	ldr	r3, [r7, #16]
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	741a      	strb	r2, [r3, #16]
 8010ca4:	2200      	movs	r2, #0
 8010ca6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010ca8:	693b      	ldr	r3, [r7, #16]
 8010caa:	2200      	movs	r2, #0
 8010cac:	749a      	strb	r2, [r3, #18]
 8010cae:	2200      	movs	r2, #0
 8010cb0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8010cb2:	697b      	ldr	r3, [r7, #20]
}
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	3718      	adds	r7, #24
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bd80      	pop	{r7, pc}
 8010cbc:	08019b08 	.word	0x08019b08
 8010cc0:	0801a1e0 	.word	0x0801a1e0
 8010cc4:	08019b5c 	.word	0x08019b5c

08010cc8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010cc8:	b5b0      	push	{r4, r5, r7, lr}
 8010cca:	b08a      	sub	sp, #40	@ 0x28
 8010ccc:	af04      	add	r7, sp, #16
 8010cce:	60f8      	str	r0, [r7, #12]
 8010cd0:	607b      	str	r3, [r7, #4]
 8010cd2:	460b      	mov	r3, r1
 8010cd4:	817b      	strh	r3, [r7, #10]
 8010cd6:	4613      	mov	r3, r2
 8010cd8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d106      	bne.n	8010cee <tcp_output_alloc_header+0x26>
 8010ce0:	4b15      	ldr	r3, [pc, #84]	@ (8010d38 <tcp_output_alloc_header+0x70>)
 8010ce2:	f240 7242 	movw	r2, #1858	@ 0x742
 8010ce6:	4915      	ldr	r1, [pc, #84]	@ (8010d3c <tcp_output_alloc_header+0x74>)
 8010ce8:	4815      	ldr	r0, [pc, #84]	@ (8010d40 <tcp_output_alloc_header+0x78>)
 8010cea:	f006 f8cb 	bl	8016e84 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	8adb      	ldrh	r3, [r3, #22]
 8010cf6:	68fa      	ldr	r2, [r7, #12]
 8010cf8:	8b12      	ldrh	r2, [r2, #24]
 8010cfa:	68f9      	ldr	r1, [r7, #12]
 8010cfc:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8010cfe:	893d      	ldrh	r5, [r7, #8]
 8010d00:	897c      	ldrh	r4, [r7, #10]
 8010d02:	9103      	str	r1, [sp, #12]
 8010d04:	2110      	movs	r1, #16
 8010d06:	9102      	str	r1, [sp, #8]
 8010d08:	9201      	str	r2, [sp, #4]
 8010d0a:	9300      	str	r3, [sp, #0]
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	462a      	mov	r2, r5
 8010d10:	4621      	mov	r1, r4
 8010d12:	f7ff ff67 	bl	8010be4 <tcp_output_alloc_header_common>
 8010d16:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010d18:	697b      	ldr	r3, [r7, #20]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d006      	beq.n	8010d2c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d22:	68fa      	ldr	r2, [r7, #12]
 8010d24:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8010d26:	441a      	add	r2, r3
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8010d2c:	697b      	ldr	r3, [r7, #20]
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	3718      	adds	r7, #24
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bdb0      	pop	{r4, r5, r7, pc}
 8010d36:	bf00      	nop
 8010d38:	08019b08 	.word	0x08019b08
 8010d3c:	0801a210 	.word	0x0801a210
 8010d40:	08019b5c 	.word	0x08019b5c

08010d44 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b088      	sub	sp, #32
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	60f8      	str	r0, [r7, #12]
 8010d4c:	60b9      	str	r1, [r7, #8]
 8010d4e:	4611      	mov	r1, r2
 8010d50:	461a      	mov	r2, r3
 8010d52:	460b      	mov	r3, r1
 8010d54:	71fb      	strb	r3, [r7, #7]
 8010d56:	4613      	mov	r3, r2
 8010d58:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8010d5e:	68bb      	ldr	r3, [r7, #8]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d106      	bne.n	8010d72 <tcp_output_fill_options+0x2e>
 8010d64:	4b12      	ldr	r3, [pc, #72]	@ (8010db0 <tcp_output_fill_options+0x6c>)
 8010d66:	f240 7256 	movw	r2, #1878	@ 0x756
 8010d6a:	4912      	ldr	r1, [pc, #72]	@ (8010db4 <tcp_output_fill_options+0x70>)
 8010d6c:	4812      	ldr	r0, [pc, #72]	@ (8010db8 <tcp_output_fill_options+0x74>)
 8010d6e:	f006 f889 	bl	8016e84 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8010d72:	68bb      	ldr	r3, [r7, #8]
 8010d74:	685b      	ldr	r3, [r3, #4]
 8010d76:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8010d78:	69bb      	ldr	r3, [r7, #24]
 8010d7a:	3314      	adds	r3, #20
 8010d7c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8010d7e:	8bfb      	ldrh	r3, [r7, #30]
 8010d80:	009b      	lsls	r3, r3, #2
 8010d82:	461a      	mov	r2, r3
 8010d84:	79fb      	ldrb	r3, [r7, #7]
 8010d86:	009b      	lsls	r3, r3, #2
 8010d88:	f003 0304 	and.w	r3, r3, #4
 8010d8c:	4413      	add	r3, r2
 8010d8e:	3314      	adds	r3, #20
 8010d90:	69ba      	ldr	r2, [r7, #24]
 8010d92:	4413      	add	r3, r2
 8010d94:	697a      	ldr	r2, [r7, #20]
 8010d96:	429a      	cmp	r2, r3
 8010d98:	d006      	beq.n	8010da8 <tcp_output_fill_options+0x64>
 8010d9a:	4b05      	ldr	r3, [pc, #20]	@ (8010db0 <tcp_output_fill_options+0x6c>)
 8010d9c:	f240 7275 	movw	r2, #1909	@ 0x775
 8010da0:	4906      	ldr	r1, [pc, #24]	@ (8010dbc <tcp_output_fill_options+0x78>)
 8010da2:	4805      	ldr	r0, [pc, #20]	@ (8010db8 <tcp_output_fill_options+0x74>)
 8010da4:	f006 f86e 	bl	8016e84 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8010da8:	bf00      	nop
 8010daa:	3720      	adds	r7, #32
 8010dac:	46bd      	mov	sp, r7
 8010dae:	bd80      	pop	{r7, pc}
 8010db0:	08019b08 	.word	0x08019b08
 8010db4:	0801a238 	.word	0x0801a238
 8010db8:	08019b5c 	.word	0x08019b5c
 8010dbc:	0801a130 	.word	0x0801a130

08010dc0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b08a      	sub	sp, #40	@ 0x28
 8010dc4:	af04      	add	r7, sp, #16
 8010dc6:	60f8      	str	r0, [r7, #12]
 8010dc8:	60b9      	str	r1, [r7, #8]
 8010dca:	607a      	str	r2, [r7, #4]
 8010dcc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010dce:	68bb      	ldr	r3, [r7, #8]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d106      	bne.n	8010de2 <tcp_output_control_segment+0x22>
 8010dd4:	4b1c      	ldr	r3, [pc, #112]	@ (8010e48 <tcp_output_control_segment+0x88>)
 8010dd6:	f240 7287 	movw	r2, #1927	@ 0x787
 8010dda:	491c      	ldr	r1, [pc, #112]	@ (8010e4c <tcp_output_control_segment+0x8c>)
 8010ddc:	481c      	ldr	r0, [pc, #112]	@ (8010e50 <tcp_output_control_segment+0x90>)
 8010dde:	f006 f851 	bl	8016e84 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8010de2:	683a      	ldr	r2, [r7, #0]
 8010de4:	6879      	ldr	r1, [r7, #4]
 8010de6:	68f8      	ldr	r0, [r7, #12]
 8010de8:	f7fe ff42 	bl	800fc70 <tcp_route>
 8010dec:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010dee:	693b      	ldr	r3, [r7, #16]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d102      	bne.n	8010dfa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8010df4:	23fc      	movs	r3, #252	@ 0xfc
 8010df6:	75fb      	strb	r3, [r7, #23]
 8010df8:	e01c      	b.n	8010e34 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d006      	beq.n	8010e0e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	7adb      	ldrb	r3, [r3, #11]
 8010e04:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	7a9b      	ldrb	r3, [r3, #10]
 8010e0a:	757b      	strb	r3, [r7, #21]
 8010e0c:	e003      	b.n	8010e16 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8010e0e:	23ff      	movs	r3, #255	@ 0xff
 8010e10:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8010e12:	2300      	movs	r3, #0
 8010e14:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8010e16:	7dba      	ldrb	r2, [r7, #22]
 8010e18:	693b      	ldr	r3, [r7, #16]
 8010e1a:	9302      	str	r3, [sp, #8]
 8010e1c:	2306      	movs	r3, #6
 8010e1e:	9301      	str	r3, [sp, #4]
 8010e20:	7d7b      	ldrb	r3, [r7, #21]
 8010e22:	9300      	str	r3, [sp, #0]
 8010e24:	4613      	mov	r3, r2
 8010e26:	683a      	ldr	r2, [r7, #0]
 8010e28:	6879      	ldr	r1, [r7, #4]
 8010e2a:	68b8      	ldr	r0, [r7, #8]
 8010e2c:	f004 fce0 	bl	80157f0 <ip4_output_if>
 8010e30:	4603      	mov	r3, r0
 8010e32:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8010e34:	68b8      	ldr	r0, [r7, #8]
 8010e36:	f7fa fdcd 	bl	800b9d4 <pbuf_free>
  return err;
 8010e3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010e3e:	4618      	mov	r0, r3
 8010e40:	3718      	adds	r7, #24
 8010e42:	46bd      	mov	sp, r7
 8010e44:	bd80      	pop	{r7, pc}
 8010e46:	bf00      	nop
 8010e48:	08019b08 	.word	0x08019b08
 8010e4c:	0801a260 	.word	0x0801a260
 8010e50:	08019b5c 	.word	0x08019b5c

08010e54 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010e54:	b590      	push	{r4, r7, lr}
 8010e56:	b08b      	sub	sp, #44	@ 0x2c
 8010e58:	af04      	add	r7, sp, #16
 8010e5a:	60f8      	str	r0, [r7, #12]
 8010e5c:	60b9      	str	r1, [r7, #8]
 8010e5e:	607a      	str	r2, [r7, #4]
 8010e60:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010e62:	683b      	ldr	r3, [r7, #0]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d106      	bne.n	8010e76 <tcp_rst+0x22>
 8010e68:	4b1f      	ldr	r3, [pc, #124]	@ (8010ee8 <tcp_rst+0x94>)
 8010e6a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8010e6e:	491f      	ldr	r1, [pc, #124]	@ (8010eec <tcp_rst+0x98>)
 8010e70:	481f      	ldr	r0, [pc, #124]	@ (8010ef0 <tcp_rst+0x9c>)
 8010e72:	f006 f807 	bl	8016e84 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8010e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d106      	bne.n	8010e8a <tcp_rst+0x36>
 8010e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8010ee8 <tcp_rst+0x94>)
 8010e7e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8010e82:	491c      	ldr	r1, [pc, #112]	@ (8010ef4 <tcp_rst+0xa0>)
 8010e84:	481a      	ldr	r0, [pc, #104]	@ (8010ef0 <tcp_rst+0x9c>)
 8010e86:	f005 fffd 	bl	8016e84 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8010e8e:	f246 0308 	movw	r3, #24584	@ 0x6008
 8010e92:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8010e94:	7dfb      	ldrb	r3, [r7, #23]
 8010e96:	b29c      	uxth	r4, r3
 8010e98:	68b8      	ldr	r0, [r7, #8]
 8010e9a:	f7f9 f85c 	bl	8009f56 <lwip_htonl>
 8010e9e:	4602      	mov	r2, r0
 8010ea0:	8abb      	ldrh	r3, [r7, #20]
 8010ea2:	9303      	str	r3, [sp, #12]
 8010ea4:	2314      	movs	r3, #20
 8010ea6:	9302      	str	r3, [sp, #8]
 8010ea8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8010eaa:	9301      	str	r3, [sp, #4]
 8010eac:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010eae:	9300      	str	r3, [sp, #0]
 8010eb0:	4613      	mov	r3, r2
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	4621      	mov	r1, r4
 8010eb6:	6878      	ldr	r0, [r7, #4]
 8010eb8:	f7ff fe94 	bl	8010be4 <tcp_output_alloc_header_common>
 8010ebc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010ebe:	693b      	ldr	r3, [r7, #16]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d00c      	beq.n	8010ede <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010ec4:	7dfb      	ldrb	r3, [r7, #23]
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	6939      	ldr	r1, [r7, #16]
 8010eca:	68f8      	ldr	r0, [r7, #12]
 8010ecc:	f7ff ff3a 	bl	8010d44 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ed2:	683a      	ldr	r2, [r7, #0]
 8010ed4:	6939      	ldr	r1, [r7, #16]
 8010ed6:	68f8      	ldr	r0, [r7, #12]
 8010ed8:	f7ff ff72 	bl	8010dc0 <tcp_output_control_segment>
 8010edc:	e000      	b.n	8010ee0 <tcp_rst+0x8c>
    return;
 8010ede:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010ee0:	371c      	adds	r7, #28
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	bd90      	pop	{r4, r7, pc}
 8010ee6:	bf00      	nop
 8010ee8:	08019b08 	.word	0x08019b08
 8010eec:	0801a28c 	.word	0x0801a28c
 8010ef0:	08019b5c 	.word	0x08019b5c
 8010ef4:	0801a2a8 	.word	0x0801a2a8

08010ef8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010ef8:	b590      	push	{r4, r7, lr}
 8010efa:	b087      	sub	sp, #28
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8010f00:	2300      	movs	r3, #0
 8010f02:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8010f04:	2300      	movs	r3, #0
 8010f06:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d106      	bne.n	8010f1c <tcp_send_empty_ack+0x24>
 8010f0e:	4b28      	ldr	r3, [pc, #160]	@ (8010fb0 <tcp_send_empty_ack+0xb8>)
 8010f10:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8010f14:	4927      	ldr	r1, [pc, #156]	@ (8010fb4 <tcp_send_empty_ack+0xbc>)
 8010f16:	4828      	ldr	r0, [pc, #160]	@ (8010fb8 <tcp_send_empty_ack+0xc0>)
 8010f18:	f005 ffb4 	bl	8016e84 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010f1c:	7dfb      	ldrb	r3, [r7, #23]
 8010f1e:	009b      	lsls	r3, r3, #2
 8010f20:	b2db      	uxtb	r3, r3
 8010f22:	f003 0304 	and.w	r3, r3, #4
 8010f26:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010f28:	7d7b      	ldrb	r3, [r7, #21]
 8010f2a:	b29c      	uxth	r4, r3
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010f30:	4618      	mov	r0, r3
 8010f32:	f7f9 f810 	bl	8009f56 <lwip_htonl>
 8010f36:	4603      	mov	r3, r0
 8010f38:	2200      	movs	r2, #0
 8010f3a:	4621      	mov	r1, r4
 8010f3c:	6878      	ldr	r0, [r7, #4]
 8010f3e:	f7ff fec3 	bl	8010cc8 <tcp_output_alloc_header>
 8010f42:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010f44:	693b      	ldr	r3, [r7, #16]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d109      	bne.n	8010f5e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	8b5b      	ldrh	r3, [r3, #26]
 8010f4e:	f043 0303 	orr.w	r3, r3, #3
 8010f52:	b29a      	uxth	r2, r3
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010f58:	f06f 0301 	mvn.w	r3, #1
 8010f5c:	e023      	b.n	8010fa6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8010f5e:	7dbb      	ldrb	r3, [r7, #22]
 8010f60:	7dfa      	ldrb	r2, [r7, #23]
 8010f62:	6939      	ldr	r1, [r7, #16]
 8010f64:	6878      	ldr	r0, [r7, #4]
 8010f66:	f7ff feed 	bl	8010d44 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010f6a:	687a      	ldr	r2, [r7, #4]
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	3304      	adds	r3, #4
 8010f70:	6939      	ldr	r1, [r7, #16]
 8010f72:	6878      	ldr	r0, [r7, #4]
 8010f74:	f7ff ff24 	bl	8010dc0 <tcp_output_control_segment>
 8010f78:	4603      	mov	r3, r0
 8010f7a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010f7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d007      	beq.n	8010f94 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	8b5b      	ldrh	r3, [r3, #26]
 8010f88:	f043 0303 	orr.w	r3, r3, #3
 8010f8c:	b29a      	uxth	r2, r3
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	835a      	strh	r2, [r3, #26]
 8010f92:	e006      	b.n	8010fa2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	8b5b      	ldrh	r3, [r3, #26]
 8010f98:	f023 0303 	bic.w	r3, r3, #3
 8010f9c:	b29a      	uxth	r2, r3
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8010fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	371c      	adds	r7, #28
 8010faa:	46bd      	mov	sp, r7
 8010fac:	bd90      	pop	{r4, r7, pc}
 8010fae:	bf00      	nop
 8010fb0:	08019b08 	.word	0x08019b08
 8010fb4:	0801a2c4 	.word	0x0801a2c4
 8010fb8:	08019b5c 	.word	0x08019b5c

08010fbc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010fbc:	b590      	push	{r4, r7, lr}
 8010fbe:	b087      	sub	sp, #28
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d106      	bne.n	8010fdc <tcp_keepalive+0x20>
 8010fce:	4b18      	ldr	r3, [pc, #96]	@ (8011030 <tcp_keepalive+0x74>)
 8010fd0:	f640 0224 	movw	r2, #2084	@ 0x824
 8010fd4:	4917      	ldr	r1, [pc, #92]	@ (8011034 <tcp_keepalive+0x78>)
 8010fd6:	4818      	ldr	r0, [pc, #96]	@ (8011038 <tcp_keepalive+0x7c>)
 8010fd8:	f005 ff54 	bl	8016e84 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8010fdc:	7dfb      	ldrb	r3, [r7, #23]
 8010fde:	b29c      	uxth	r4, r3
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010fe4:	3b01      	subs	r3, #1
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	f7f8 ffb5 	bl	8009f56 <lwip_htonl>
 8010fec:	4603      	mov	r3, r0
 8010fee:	2200      	movs	r2, #0
 8010ff0:	4621      	mov	r1, r4
 8010ff2:	6878      	ldr	r0, [r7, #4]
 8010ff4:	f7ff fe68 	bl	8010cc8 <tcp_output_alloc_header>
 8010ff8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010ffa:	693b      	ldr	r3, [r7, #16]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d102      	bne.n	8011006 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011000:	f04f 33ff 	mov.w	r3, #4294967295
 8011004:	e010      	b.n	8011028 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011006:	7dfb      	ldrb	r3, [r7, #23]
 8011008:	2200      	movs	r2, #0
 801100a:	6939      	ldr	r1, [r7, #16]
 801100c:	6878      	ldr	r0, [r7, #4]
 801100e:	f7ff fe99 	bl	8010d44 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011012:	687a      	ldr	r2, [r7, #4]
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	3304      	adds	r3, #4
 8011018:	6939      	ldr	r1, [r7, #16]
 801101a:	6878      	ldr	r0, [r7, #4]
 801101c:	f7ff fed0 	bl	8010dc0 <tcp_output_control_segment>
 8011020:	4603      	mov	r3, r0
 8011022:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011024:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011028:	4618      	mov	r0, r3
 801102a:	371c      	adds	r7, #28
 801102c:	46bd      	mov	sp, r7
 801102e:	bd90      	pop	{r4, r7, pc}
 8011030:	08019b08 	.word	0x08019b08
 8011034:	0801a2e4 	.word	0x0801a2e4
 8011038:	08019b5c 	.word	0x08019b5c

0801103c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801103c:	b590      	push	{r4, r7, lr}
 801103e:	b08b      	sub	sp, #44	@ 0x2c
 8011040:	af00      	add	r7, sp, #0
 8011042:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011044:	2300      	movs	r3, #0
 8011046:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d106      	bne.n	801105e <tcp_zero_window_probe+0x22>
 8011050:	4b4c      	ldr	r3, [pc, #304]	@ (8011184 <tcp_zero_window_probe+0x148>)
 8011052:	f640 024f 	movw	r2, #2127	@ 0x84f
 8011056:	494c      	ldr	r1, [pc, #304]	@ (8011188 <tcp_zero_window_probe+0x14c>)
 8011058:	484c      	ldr	r0, [pc, #304]	@ (801118c <tcp_zero_window_probe+0x150>)
 801105a:	f005 ff13 	bl	8016e84 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011062:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011064:	6a3b      	ldr	r3, [r7, #32]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d101      	bne.n	801106e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801106a:	2300      	movs	r3, #0
 801106c:	e086      	b.n	801117c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8011074:	2bff      	cmp	r3, #255	@ 0xff
 8011076:	d007      	beq.n	8011088 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801107e:	3301      	adds	r3, #1
 8011080:	b2da      	uxtb	r2, r3
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011088:	6a3b      	ldr	r3, [r7, #32]
 801108a:	68db      	ldr	r3, [r3, #12]
 801108c:	899b      	ldrh	r3, [r3, #12]
 801108e:	b29b      	uxth	r3, r3
 8011090:	4618      	mov	r0, r3
 8011092:	f7f8 ff4b 	bl	8009f2c <lwip_htons>
 8011096:	4603      	mov	r3, r0
 8011098:	b2db      	uxtb	r3, r3
 801109a:	f003 0301 	and.w	r3, r3, #1
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d005      	beq.n	80110ae <tcp_zero_window_probe+0x72>
 80110a2:	6a3b      	ldr	r3, [r7, #32]
 80110a4:	891b      	ldrh	r3, [r3, #8]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d101      	bne.n	80110ae <tcp_zero_window_probe+0x72>
 80110aa:	2301      	movs	r3, #1
 80110ac:	e000      	b.n	80110b0 <tcp_zero_window_probe+0x74>
 80110ae:	2300      	movs	r3, #0
 80110b0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80110b2:	7ffb      	ldrb	r3, [r7, #31]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	bf0c      	ite	eq
 80110b8:	2301      	moveq	r3, #1
 80110ba:	2300      	movne	r3, #0
 80110bc:	b2db      	uxtb	r3, r3
 80110be:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80110c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80110c4:	b299      	uxth	r1, r3
 80110c6:	6a3b      	ldr	r3, [r7, #32]
 80110c8:	68db      	ldr	r3, [r3, #12]
 80110ca:	685b      	ldr	r3, [r3, #4]
 80110cc:	8bba      	ldrh	r2, [r7, #28]
 80110ce:	6878      	ldr	r0, [r7, #4]
 80110d0:	f7ff fdfa 	bl	8010cc8 <tcp_output_alloc_header>
 80110d4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80110d6:	69bb      	ldr	r3, [r7, #24]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d102      	bne.n	80110e2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80110dc:	f04f 33ff 	mov.w	r3, #4294967295
 80110e0:	e04c      	b.n	801117c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80110e2:	69bb      	ldr	r3, [r7, #24]
 80110e4:	685b      	ldr	r3, [r3, #4]
 80110e6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80110e8:	7ffb      	ldrb	r3, [r7, #31]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d011      	beq.n	8011112 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80110ee:	697b      	ldr	r3, [r7, #20]
 80110f0:	899b      	ldrh	r3, [r3, #12]
 80110f2:	b29b      	uxth	r3, r3
 80110f4:	b21b      	sxth	r3, r3
 80110f6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80110fa:	b21c      	sxth	r4, r3
 80110fc:	2011      	movs	r0, #17
 80110fe:	f7f8 ff15 	bl	8009f2c <lwip_htons>
 8011102:	4603      	mov	r3, r0
 8011104:	b21b      	sxth	r3, r3
 8011106:	4323      	orrs	r3, r4
 8011108:	b21b      	sxth	r3, r3
 801110a:	b29a      	uxth	r2, r3
 801110c:	697b      	ldr	r3, [r7, #20]
 801110e:	819a      	strh	r2, [r3, #12]
 8011110:	e010      	b.n	8011134 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011112:	69bb      	ldr	r3, [r7, #24]
 8011114:	685b      	ldr	r3, [r3, #4]
 8011116:	3314      	adds	r3, #20
 8011118:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801111a:	6a3b      	ldr	r3, [r7, #32]
 801111c:	6858      	ldr	r0, [r3, #4]
 801111e:	6a3b      	ldr	r3, [r7, #32]
 8011120:	685b      	ldr	r3, [r3, #4]
 8011122:	891a      	ldrh	r2, [r3, #8]
 8011124:	6a3b      	ldr	r3, [r7, #32]
 8011126:	891b      	ldrh	r3, [r3, #8]
 8011128:	1ad3      	subs	r3, r2, r3
 801112a:	b29b      	uxth	r3, r3
 801112c:	2201      	movs	r2, #1
 801112e:	6939      	ldr	r1, [r7, #16]
 8011130:	f7fa fe56 	bl	800bde0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011134:	6a3b      	ldr	r3, [r7, #32]
 8011136:	68db      	ldr	r3, [r3, #12]
 8011138:	685b      	ldr	r3, [r3, #4]
 801113a:	4618      	mov	r0, r3
 801113c:	f7f8 ff0b 	bl	8009f56 <lwip_htonl>
 8011140:	4603      	mov	r3, r0
 8011142:	3301      	adds	r3, #1
 8011144:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	1ad3      	subs	r3, r2, r3
 801114e:	2b00      	cmp	r3, #0
 8011150:	da02      	bge.n	8011158 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	68fa      	ldr	r2, [r7, #12]
 8011156:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011158:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801115c:	2200      	movs	r2, #0
 801115e:	69b9      	ldr	r1, [r7, #24]
 8011160:	6878      	ldr	r0, [r7, #4]
 8011162:	f7ff fdef 	bl	8010d44 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011166:	687a      	ldr	r2, [r7, #4]
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	3304      	adds	r3, #4
 801116c:	69b9      	ldr	r1, [r7, #24]
 801116e:	6878      	ldr	r0, [r7, #4]
 8011170:	f7ff fe26 	bl	8010dc0 <tcp_output_control_segment>
 8011174:	4603      	mov	r3, r0
 8011176:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011178:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801117c:	4618      	mov	r0, r3
 801117e:	372c      	adds	r7, #44	@ 0x2c
 8011180:	46bd      	mov	sp, r7
 8011182:	bd90      	pop	{r4, r7, pc}
 8011184:	08019b08 	.word	0x08019b08
 8011188:	0801a300 	.word	0x0801a300
 801118c:	08019b5c 	.word	0x08019b5c

08011190 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011190:	b580      	push	{r7, lr}
 8011192:	b082      	sub	sp, #8
 8011194:	af00      	add	r7, sp, #0
 8011196:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011198:	f7fa ff10 	bl	800bfbc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801119c:	4b0a      	ldr	r3, [pc, #40]	@ (80111c8 <tcpip_tcp_timer+0x38>)
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d103      	bne.n	80111ac <tcpip_tcp_timer+0x1c>
 80111a4:	4b09      	ldr	r3, [pc, #36]	@ (80111cc <tcpip_tcp_timer+0x3c>)
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d005      	beq.n	80111b8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80111ac:	2200      	movs	r2, #0
 80111ae:	4908      	ldr	r1, [pc, #32]	@ (80111d0 <tcpip_tcp_timer+0x40>)
 80111b0:	20fa      	movs	r0, #250	@ 0xfa
 80111b2:	f000 f8f3 	bl	801139c <sys_timeout>
 80111b6:	e003      	b.n	80111c0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80111b8:	4b06      	ldr	r3, [pc, #24]	@ (80111d4 <tcpip_tcp_timer+0x44>)
 80111ba:	2200      	movs	r2, #0
 80111bc:	601a      	str	r2, [r3, #0]
  }
}
 80111be:	bf00      	nop
 80111c0:	bf00      	nop
 80111c2:	3708      	adds	r7, #8
 80111c4:	46bd      	mov	sp, r7
 80111c6:	bd80      	pop	{r7, pc}
 80111c8:	2000cac8 	.word	0x2000cac8
 80111cc:	2000cacc 	.word	0x2000cacc
 80111d0:	08011191 	.word	0x08011191
 80111d4:	2000cb14 	.word	0x2000cb14

080111d8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80111d8:	b580      	push	{r7, lr}
 80111da:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80111dc:	4b0a      	ldr	r3, [pc, #40]	@ (8011208 <tcp_timer_needed+0x30>)
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d10f      	bne.n	8011204 <tcp_timer_needed+0x2c>
 80111e4:	4b09      	ldr	r3, [pc, #36]	@ (801120c <tcp_timer_needed+0x34>)
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d103      	bne.n	80111f4 <tcp_timer_needed+0x1c>
 80111ec:	4b08      	ldr	r3, [pc, #32]	@ (8011210 <tcp_timer_needed+0x38>)
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d007      	beq.n	8011204 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80111f4:	4b04      	ldr	r3, [pc, #16]	@ (8011208 <tcp_timer_needed+0x30>)
 80111f6:	2201      	movs	r2, #1
 80111f8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80111fa:	2200      	movs	r2, #0
 80111fc:	4905      	ldr	r1, [pc, #20]	@ (8011214 <tcp_timer_needed+0x3c>)
 80111fe:	20fa      	movs	r0, #250	@ 0xfa
 8011200:	f000 f8cc 	bl	801139c <sys_timeout>
  }
}
 8011204:	bf00      	nop
 8011206:	bd80      	pop	{r7, pc}
 8011208:	2000cb14 	.word	0x2000cb14
 801120c:	2000cac8 	.word	0x2000cac8
 8011210:	2000cacc 	.word	0x2000cacc
 8011214:	08011191 	.word	0x08011191

08011218 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b086      	sub	sp, #24
 801121c:	af00      	add	r7, sp, #0
 801121e:	60f8      	str	r0, [r7, #12]
 8011220:	60b9      	str	r1, [r7, #8]
 8011222:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011224:	200b      	movs	r0, #11
 8011226:	f7f9 fbc9 	bl	800a9bc <memp_malloc>
 801122a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801122c:	693b      	ldr	r3, [r7, #16]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d109      	bne.n	8011246 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011232:	693b      	ldr	r3, [r7, #16]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d151      	bne.n	80112dc <sys_timeout_abs+0xc4>
 8011238:	4b2a      	ldr	r3, [pc, #168]	@ (80112e4 <sys_timeout_abs+0xcc>)
 801123a:	22be      	movs	r2, #190	@ 0xbe
 801123c:	492a      	ldr	r1, [pc, #168]	@ (80112e8 <sys_timeout_abs+0xd0>)
 801123e:	482b      	ldr	r0, [pc, #172]	@ (80112ec <sys_timeout_abs+0xd4>)
 8011240:	f005 fe20 	bl	8016e84 <iprintf>
    return;
 8011244:	e04a      	b.n	80112dc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011246:	693b      	ldr	r3, [r7, #16]
 8011248:	2200      	movs	r2, #0
 801124a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801124c:	693b      	ldr	r3, [r7, #16]
 801124e:	68ba      	ldr	r2, [r7, #8]
 8011250:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011252:	693b      	ldr	r3, [r7, #16]
 8011254:	687a      	ldr	r2, [r7, #4]
 8011256:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011258:	693b      	ldr	r3, [r7, #16]
 801125a:	68fa      	ldr	r2, [r7, #12]
 801125c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801125e:	4b24      	ldr	r3, [pc, #144]	@ (80112f0 <sys_timeout_abs+0xd8>)
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d103      	bne.n	801126e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011266:	4a22      	ldr	r2, [pc, #136]	@ (80112f0 <sys_timeout_abs+0xd8>)
 8011268:	693b      	ldr	r3, [r7, #16]
 801126a:	6013      	str	r3, [r2, #0]
    return;
 801126c:	e037      	b.n	80112de <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801126e:	693b      	ldr	r3, [r7, #16]
 8011270:	685a      	ldr	r2, [r3, #4]
 8011272:	4b1f      	ldr	r3, [pc, #124]	@ (80112f0 <sys_timeout_abs+0xd8>)
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	685b      	ldr	r3, [r3, #4]
 8011278:	1ad3      	subs	r3, r2, r3
 801127a:	0fdb      	lsrs	r3, r3, #31
 801127c:	f003 0301 	and.w	r3, r3, #1
 8011280:	b2db      	uxtb	r3, r3
 8011282:	2b00      	cmp	r3, #0
 8011284:	d007      	beq.n	8011296 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011286:	4b1a      	ldr	r3, [pc, #104]	@ (80112f0 <sys_timeout_abs+0xd8>)
 8011288:	681a      	ldr	r2, [r3, #0]
 801128a:	693b      	ldr	r3, [r7, #16]
 801128c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801128e:	4a18      	ldr	r2, [pc, #96]	@ (80112f0 <sys_timeout_abs+0xd8>)
 8011290:	693b      	ldr	r3, [r7, #16]
 8011292:	6013      	str	r3, [r2, #0]
 8011294:	e023      	b.n	80112de <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011296:	4b16      	ldr	r3, [pc, #88]	@ (80112f0 <sys_timeout_abs+0xd8>)
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	617b      	str	r3, [r7, #20]
 801129c:	e01a      	b.n	80112d4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801129e:	697b      	ldr	r3, [r7, #20]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d00b      	beq.n	80112be <sys_timeout_abs+0xa6>
 80112a6:	693b      	ldr	r3, [r7, #16]
 80112a8:	685a      	ldr	r2, [r3, #4]
 80112aa:	697b      	ldr	r3, [r7, #20]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	685b      	ldr	r3, [r3, #4]
 80112b0:	1ad3      	subs	r3, r2, r3
 80112b2:	0fdb      	lsrs	r3, r3, #31
 80112b4:	f003 0301 	and.w	r3, r3, #1
 80112b8:	b2db      	uxtb	r3, r3
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d007      	beq.n	80112ce <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80112be:	697b      	ldr	r3, [r7, #20]
 80112c0:	681a      	ldr	r2, [r3, #0]
 80112c2:	693b      	ldr	r3, [r7, #16]
 80112c4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80112c6:	697b      	ldr	r3, [r7, #20]
 80112c8:	693a      	ldr	r2, [r7, #16]
 80112ca:	601a      	str	r2, [r3, #0]
        break;
 80112cc:	e007      	b.n	80112de <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80112ce:	697b      	ldr	r3, [r7, #20]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	617b      	str	r3, [r7, #20]
 80112d4:	697b      	ldr	r3, [r7, #20]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d1e1      	bne.n	801129e <sys_timeout_abs+0x86>
 80112da:	e000      	b.n	80112de <sys_timeout_abs+0xc6>
    return;
 80112dc:	bf00      	nop
      }
    }
  }
}
 80112de:	3718      	adds	r7, #24
 80112e0:	46bd      	mov	sp, r7
 80112e2:	bd80      	pop	{r7, pc}
 80112e4:	0801a324 	.word	0x0801a324
 80112e8:	0801a358 	.word	0x0801a358
 80112ec:	0801a398 	.word	0x0801a398
 80112f0:	2000cb0c 	.word	0x2000cb0c

080112f4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b086      	sub	sp, #24
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011300:	697b      	ldr	r3, [r7, #20]
 8011302:	685b      	ldr	r3, [r3, #4]
 8011304:	4798      	blx	r3

  now = sys_now();
 8011306:	f7f5 fad3 	bl	80068b0 <sys_now>
 801130a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801130c:	697b      	ldr	r3, [r7, #20]
 801130e:	681a      	ldr	r2, [r3, #0]
 8011310:	4b0f      	ldr	r3, [pc, #60]	@ (8011350 <lwip_cyclic_timer+0x5c>)
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	4413      	add	r3, r2
 8011316:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011318:	68fa      	ldr	r2, [r7, #12]
 801131a:	693b      	ldr	r3, [r7, #16]
 801131c:	1ad3      	subs	r3, r2, r3
 801131e:	0fdb      	lsrs	r3, r3, #31
 8011320:	f003 0301 	and.w	r3, r3, #1
 8011324:	b2db      	uxtb	r3, r3
 8011326:	2b00      	cmp	r3, #0
 8011328:	d009      	beq.n	801133e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801132a:	697b      	ldr	r3, [r7, #20]
 801132c:	681a      	ldr	r2, [r3, #0]
 801132e:	693b      	ldr	r3, [r7, #16]
 8011330:	4413      	add	r3, r2
 8011332:	687a      	ldr	r2, [r7, #4]
 8011334:	4907      	ldr	r1, [pc, #28]	@ (8011354 <lwip_cyclic_timer+0x60>)
 8011336:	4618      	mov	r0, r3
 8011338:	f7ff ff6e 	bl	8011218 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801133c:	e004      	b.n	8011348 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801133e:	687a      	ldr	r2, [r7, #4]
 8011340:	4904      	ldr	r1, [pc, #16]	@ (8011354 <lwip_cyclic_timer+0x60>)
 8011342:	68f8      	ldr	r0, [r7, #12]
 8011344:	f7ff ff68 	bl	8011218 <sys_timeout_abs>
}
 8011348:	bf00      	nop
 801134a:	3718      	adds	r7, #24
 801134c:	46bd      	mov	sp, r7
 801134e:	bd80      	pop	{r7, pc}
 8011350:	2000cb10 	.word	0x2000cb10
 8011354:	080112f5 	.word	0x080112f5

08011358 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011358:	b580      	push	{r7, lr}
 801135a:	b082      	sub	sp, #8
 801135c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801135e:	2301      	movs	r3, #1
 8011360:	607b      	str	r3, [r7, #4]
 8011362:	e00e      	b.n	8011382 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011364:	4a0b      	ldr	r2, [pc, #44]	@ (8011394 <sys_timeouts_init+0x3c>)
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	00db      	lsls	r3, r3, #3
 8011370:	4a08      	ldr	r2, [pc, #32]	@ (8011394 <sys_timeouts_init+0x3c>)
 8011372:	4413      	add	r3, r2
 8011374:	461a      	mov	r2, r3
 8011376:	4908      	ldr	r1, [pc, #32]	@ (8011398 <sys_timeouts_init+0x40>)
 8011378:	f000 f810 	bl	801139c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	3301      	adds	r3, #1
 8011380:	607b      	str	r3, [r7, #4]
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	2b05      	cmp	r3, #5
 8011386:	d9ed      	bls.n	8011364 <sys_timeouts_init+0xc>
  }
}
 8011388:	bf00      	nop
 801138a:	bf00      	nop
 801138c:	3708      	adds	r7, #8
 801138e:	46bd      	mov	sp, r7
 8011390:	bd80      	pop	{r7, pc}
 8011392:	bf00      	nop
 8011394:	0801b67c 	.word	0x0801b67c
 8011398:	080112f5 	.word	0x080112f5

0801139c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801139c:	b580      	push	{r7, lr}
 801139e:	b086      	sub	sp, #24
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	60f8      	str	r0, [r7, #12]
 80113a4:	60b9      	str	r1, [r7, #8]
 80113a6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80113ae:	d306      	bcc.n	80113be <sys_timeout+0x22>
 80113b0:	4b0a      	ldr	r3, [pc, #40]	@ (80113dc <sys_timeout+0x40>)
 80113b2:	f240 1229 	movw	r2, #297	@ 0x129
 80113b6:	490a      	ldr	r1, [pc, #40]	@ (80113e0 <sys_timeout+0x44>)
 80113b8:	480a      	ldr	r0, [pc, #40]	@ (80113e4 <sys_timeout+0x48>)
 80113ba:	f005 fd63 	bl	8016e84 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80113be:	f7f5 fa77 	bl	80068b0 <sys_now>
 80113c2:	4602      	mov	r2, r0
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	4413      	add	r3, r2
 80113c8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80113ca:	687a      	ldr	r2, [r7, #4]
 80113cc:	68b9      	ldr	r1, [r7, #8]
 80113ce:	6978      	ldr	r0, [r7, #20]
 80113d0:	f7ff ff22 	bl	8011218 <sys_timeout_abs>
#endif
}
 80113d4:	bf00      	nop
 80113d6:	3718      	adds	r7, #24
 80113d8:	46bd      	mov	sp, r7
 80113da:	bd80      	pop	{r7, pc}
 80113dc:	0801a324 	.word	0x0801a324
 80113e0:	0801a3c0 	.word	0x0801a3c0
 80113e4:	0801a398 	.word	0x0801a398

080113e8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b084      	sub	sp, #16
 80113ec:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80113ee:	f7f5 fa5f 	bl	80068b0 <sys_now>
 80113f2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80113f4:	4b17      	ldr	r3, [pc, #92]	@ (8011454 <sys_check_timeouts+0x6c>)
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80113fa:	68bb      	ldr	r3, [r7, #8]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d022      	beq.n	8011446 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011400:	68bb      	ldr	r3, [r7, #8]
 8011402:	685b      	ldr	r3, [r3, #4]
 8011404:	68fa      	ldr	r2, [r7, #12]
 8011406:	1ad3      	subs	r3, r2, r3
 8011408:	0fdb      	lsrs	r3, r3, #31
 801140a:	f003 0301 	and.w	r3, r3, #1
 801140e:	b2db      	uxtb	r3, r3
 8011410:	2b00      	cmp	r3, #0
 8011412:	d11a      	bne.n	801144a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011414:	68bb      	ldr	r3, [r7, #8]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	4a0e      	ldr	r2, [pc, #56]	@ (8011454 <sys_check_timeouts+0x6c>)
 801141a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801141c:	68bb      	ldr	r3, [r7, #8]
 801141e:	689b      	ldr	r3, [r3, #8]
 8011420:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011422:	68bb      	ldr	r3, [r7, #8]
 8011424:	68db      	ldr	r3, [r3, #12]
 8011426:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011428:	68bb      	ldr	r3, [r7, #8]
 801142a:	685b      	ldr	r3, [r3, #4]
 801142c:	4a0a      	ldr	r2, [pc, #40]	@ (8011458 <sys_check_timeouts+0x70>)
 801142e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011430:	68b9      	ldr	r1, [r7, #8]
 8011432:	200b      	movs	r0, #11
 8011434:	f7f9 fb38 	bl	800aaa8 <memp_free>
    if (handler != NULL) {
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d0da      	beq.n	80113f4 <sys_check_timeouts+0xc>
      handler(arg);
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	6838      	ldr	r0, [r7, #0]
 8011442:	4798      	blx	r3
  do {
 8011444:	e7d6      	b.n	80113f4 <sys_check_timeouts+0xc>
      return;
 8011446:	bf00      	nop
 8011448:	e000      	b.n	801144c <sys_check_timeouts+0x64>
      return;
 801144a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801144c:	3710      	adds	r7, #16
 801144e:	46bd      	mov	sp, r7
 8011450:	bd80      	pop	{r7, pc}
 8011452:	bf00      	nop
 8011454:	2000cb0c 	.word	0x2000cb0c
 8011458:	2000cb10 	.word	0x2000cb10

0801145c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801145c:	b580      	push	{r7, lr}
 801145e:	b082      	sub	sp, #8
 8011460:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8011462:	4b16      	ldr	r3, [pc, #88]	@ (80114bc <sys_timeouts_sleeptime+0x60>)
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d102      	bne.n	8011470 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801146a:	f04f 33ff 	mov.w	r3, #4294967295
 801146e:	e020      	b.n	80114b2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8011470:	f7f5 fa1e 	bl	80068b0 <sys_now>
 8011474:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8011476:	4b11      	ldr	r3, [pc, #68]	@ (80114bc <sys_timeouts_sleeptime+0x60>)
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	685a      	ldr	r2, [r3, #4]
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	1ad3      	subs	r3, r2, r3
 8011480:	0fdb      	lsrs	r3, r3, #31
 8011482:	f003 0301 	and.w	r3, r3, #1
 8011486:	b2db      	uxtb	r3, r3
 8011488:	2b00      	cmp	r3, #0
 801148a:	d001      	beq.n	8011490 <sys_timeouts_sleeptime+0x34>
    return 0;
 801148c:	2300      	movs	r3, #0
 801148e:	e010      	b.n	80114b2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8011490:	4b0a      	ldr	r3, [pc, #40]	@ (80114bc <sys_timeouts_sleeptime+0x60>)
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	685a      	ldr	r2, [r3, #4]
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	1ad3      	subs	r3, r2, r3
 801149a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801149c:	683b      	ldr	r3, [r7, #0]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	da06      	bge.n	80114b0 <sys_timeouts_sleeptime+0x54>
 80114a2:	4b07      	ldr	r3, [pc, #28]	@ (80114c0 <sys_timeouts_sleeptime+0x64>)
 80114a4:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 80114a8:	4906      	ldr	r1, [pc, #24]	@ (80114c4 <sys_timeouts_sleeptime+0x68>)
 80114aa:	4807      	ldr	r0, [pc, #28]	@ (80114c8 <sys_timeouts_sleeptime+0x6c>)
 80114ac:	f005 fcea 	bl	8016e84 <iprintf>
    return ret;
 80114b0:	683b      	ldr	r3, [r7, #0]
  }
}
 80114b2:	4618      	mov	r0, r3
 80114b4:	3708      	adds	r7, #8
 80114b6:	46bd      	mov	sp, r7
 80114b8:	bd80      	pop	{r7, pc}
 80114ba:	bf00      	nop
 80114bc:	2000cb0c 	.word	0x2000cb0c
 80114c0:	0801a324 	.word	0x0801a324
 80114c4:	0801a3f8 	.word	0x0801a3f8
 80114c8:	0801a398 	.word	0x0801a398

080114cc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80114cc:	b580      	push	{r7, lr}
 80114ce:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80114d0:	f005 fbd8 	bl	8016c84 <rand>
 80114d4:	4603      	mov	r3, r0
 80114d6:	b29b      	uxth	r3, r3
 80114d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80114dc:	b29b      	uxth	r3, r3
 80114de:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80114e2:	b29a      	uxth	r2, r3
 80114e4:	4b01      	ldr	r3, [pc, #4]	@ (80114ec <udp_init+0x20>)
 80114e6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80114e8:	bf00      	nop
 80114ea:	bd80      	pop	{r7, pc}
 80114ec:	20000030 	.word	0x20000030

080114f0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80114f0:	b480      	push	{r7}
 80114f2:	b083      	sub	sp, #12
 80114f4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80114f6:	2300      	movs	r3, #0
 80114f8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80114fa:	4b17      	ldr	r3, [pc, #92]	@ (8011558 <udp_new_port+0x68>)
 80114fc:	881b      	ldrh	r3, [r3, #0]
 80114fe:	1c5a      	adds	r2, r3, #1
 8011500:	b291      	uxth	r1, r2
 8011502:	4a15      	ldr	r2, [pc, #84]	@ (8011558 <udp_new_port+0x68>)
 8011504:	8011      	strh	r1, [r2, #0]
 8011506:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801150a:	4293      	cmp	r3, r2
 801150c:	d103      	bne.n	8011516 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801150e:	4b12      	ldr	r3, [pc, #72]	@ (8011558 <udp_new_port+0x68>)
 8011510:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8011514:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011516:	4b11      	ldr	r3, [pc, #68]	@ (801155c <udp_new_port+0x6c>)
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	603b      	str	r3, [r7, #0]
 801151c:	e011      	b.n	8011542 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801151e:	683b      	ldr	r3, [r7, #0]
 8011520:	8a5a      	ldrh	r2, [r3, #18]
 8011522:	4b0d      	ldr	r3, [pc, #52]	@ (8011558 <udp_new_port+0x68>)
 8011524:	881b      	ldrh	r3, [r3, #0]
 8011526:	429a      	cmp	r2, r3
 8011528:	d108      	bne.n	801153c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801152a:	88fb      	ldrh	r3, [r7, #6]
 801152c:	3301      	adds	r3, #1
 801152e:	80fb      	strh	r3, [r7, #6]
 8011530:	88fb      	ldrh	r3, [r7, #6]
 8011532:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011536:	d3e0      	bcc.n	80114fa <udp_new_port+0xa>
        return 0;
 8011538:	2300      	movs	r3, #0
 801153a:	e007      	b.n	801154c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801153c:	683b      	ldr	r3, [r7, #0]
 801153e:	68db      	ldr	r3, [r3, #12]
 8011540:	603b      	str	r3, [r7, #0]
 8011542:	683b      	ldr	r3, [r7, #0]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d1ea      	bne.n	801151e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8011548:	4b03      	ldr	r3, [pc, #12]	@ (8011558 <udp_new_port+0x68>)
 801154a:	881b      	ldrh	r3, [r3, #0]
}
 801154c:	4618      	mov	r0, r3
 801154e:	370c      	adds	r7, #12
 8011550:	46bd      	mov	sp, r7
 8011552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011556:	4770      	bx	lr
 8011558:	20000030 	.word	0x20000030
 801155c:	2000cb18 	.word	0x2000cb18

08011560 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011560:	b580      	push	{r7, lr}
 8011562:	b084      	sub	sp, #16
 8011564:	af00      	add	r7, sp, #0
 8011566:	60f8      	str	r0, [r7, #12]
 8011568:	60b9      	str	r1, [r7, #8]
 801156a:	4613      	mov	r3, r2
 801156c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d105      	bne.n	8011580 <udp_input_local_match+0x20>
 8011574:	4b27      	ldr	r3, [pc, #156]	@ (8011614 <udp_input_local_match+0xb4>)
 8011576:	2287      	movs	r2, #135	@ 0x87
 8011578:	4927      	ldr	r1, [pc, #156]	@ (8011618 <udp_input_local_match+0xb8>)
 801157a:	4828      	ldr	r0, [pc, #160]	@ (801161c <udp_input_local_match+0xbc>)
 801157c:	f005 fc82 	bl	8016e84 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011580:	68bb      	ldr	r3, [r7, #8]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d105      	bne.n	8011592 <udp_input_local_match+0x32>
 8011586:	4b23      	ldr	r3, [pc, #140]	@ (8011614 <udp_input_local_match+0xb4>)
 8011588:	2288      	movs	r2, #136	@ 0x88
 801158a:	4925      	ldr	r1, [pc, #148]	@ (8011620 <udp_input_local_match+0xc0>)
 801158c:	4823      	ldr	r0, [pc, #140]	@ (801161c <udp_input_local_match+0xbc>)
 801158e:	f005 fc79 	bl	8016e84 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	7a1b      	ldrb	r3, [r3, #8]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d00b      	beq.n	80115b2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	7a1a      	ldrb	r2, [r3, #8]
 801159e:	4b21      	ldr	r3, [pc, #132]	@ (8011624 <udp_input_local_match+0xc4>)
 80115a0:	685b      	ldr	r3, [r3, #4]
 80115a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80115a6:	3301      	adds	r3, #1
 80115a8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80115aa:	429a      	cmp	r2, r3
 80115ac:	d001      	beq.n	80115b2 <udp_input_local_match+0x52>
    return 0;
 80115ae:	2300      	movs	r3, #0
 80115b0:	e02b      	b.n	801160a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80115b2:	79fb      	ldrb	r3, [r7, #7]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d018      	beq.n	80115ea <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d013      	beq.n	80115e6 <udp_input_local_match+0x86>
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d00f      	beq.n	80115e6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80115c6:	4b17      	ldr	r3, [pc, #92]	@ (8011624 <udp_input_local_match+0xc4>)
 80115c8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80115ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115ce:	d00a      	beq.n	80115e6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	681a      	ldr	r2, [r3, #0]
 80115d4:	4b13      	ldr	r3, [pc, #76]	@ (8011624 <udp_input_local_match+0xc4>)
 80115d6:	695b      	ldr	r3, [r3, #20]
 80115d8:	405a      	eors	r2, r3
 80115da:	68bb      	ldr	r3, [r7, #8]
 80115dc:	3308      	adds	r3, #8
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d110      	bne.n	8011608 <udp_input_local_match+0xa8>
          return 1;
 80115e6:	2301      	movs	r3, #1
 80115e8:	e00f      	b.n	801160a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d009      	beq.n	8011604 <udp_input_local_match+0xa4>
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d005      	beq.n	8011604 <udp_input_local_match+0xa4>
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	681a      	ldr	r2, [r3, #0]
 80115fc:	4b09      	ldr	r3, [pc, #36]	@ (8011624 <udp_input_local_match+0xc4>)
 80115fe:	695b      	ldr	r3, [r3, #20]
 8011600:	429a      	cmp	r2, r3
 8011602:	d101      	bne.n	8011608 <udp_input_local_match+0xa8>
        return 1;
 8011604:	2301      	movs	r3, #1
 8011606:	e000      	b.n	801160a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011608:	2300      	movs	r3, #0
}
 801160a:	4618      	mov	r0, r3
 801160c:	3710      	adds	r7, #16
 801160e:	46bd      	mov	sp, r7
 8011610:	bd80      	pop	{r7, pc}
 8011612:	bf00      	nop
 8011614:	0801a40c 	.word	0x0801a40c
 8011618:	0801a43c 	.word	0x0801a43c
 801161c:	0801a460 	.word	0x0801a460
 8011620:	0801a488 	.word	0x0801a488
 8011624:	2000928c 	.word	0x2000928c

08011628 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011628:	b590      	push	{r4, r7, lr}
 801162a:	b08d      	sub	sp, #52	@ 0x34
 801162c:	af02      	add	r7, sp, #8
 801162e:	6078      	str	r0, [r7, #4]
 8011630:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8011632:	2300      	movs	r3, #0
 8011634:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d105      	bne.n	8011648 <udp_input+0x20>
 801163c:	4b7c      	ldr	r3, [pc, #496]	@ (8011830 <udp_input+0x208>)
 801163e:	22cf      	movs	r2, #207	@ 0xcf
 8011640:	497c      	ldr	r1, [pc, #496]	@ (8011834 <udp_input+0x20c>)
 8011642:	487d      	ldr	r0, [pc, #500]	@ (8011838 <udp_input+0x210>)
 8011644:	f005 fc1e 	bl	8016e84 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011648:	683b      	ldr	r3, [r7, #0]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d105      	bne.n	801165a <udp_input+0x32>
 801164e:	4b78      	ldr	r3, [pc, #480]	@ (8011830 <udp_input+0x208>)
 8011650:	22d0      	movs	r2, #208	@ 0xd0
 8011652:	497a      	ldr	r1, [pc, #488]	@ (801183c <udp_input+0x214>)
 8011654:	4878      	ldr	r0, [pc, #480]	@ (8011838 <udp_input+0x210>)
 8011656:	f005 fc15 	bl	8016e84 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	895b      	ldrh	r3, [r3, #10]
 801165e:	2b07      	cmp	r3, #7
 8011660:	d803      	bhi.n	801166a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8011662:	6878      	ldr	r0, [r7, #4]
 8011664:	f7fa f9b6 	bl	800b9d4 <pbuf_free>
    goto end;
 8011668:	e0de      	b.n	8011828 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	685b      	ldr	r3, [r3, #4]
 801166e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011670:	4b73      	ldr	r3, [pc, #460]	@ (8011840 <udp_input+0x218>)
 8011672:	695b      	ldr	r3, [r3, #20]
 8011674:	4a72      	ldr	r2, [pc, #456]	@ (8011840 <udp_input+0x218>)
 8011676:	6812      	ldr	r2, [r2, #0]
 8011678:	4611      	mov	r1, r2
 801167a:	4618      	mov	r0, r3
 801167c:	f004 fa06 	bl	8015a8c <ip4_addr_isbroadcast_u32>
 8011680:	4603      	mov	r3, r0
 8011682:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011684:	697b      	ldr	r3, [r7, #20]
 8011686:	881b      	ldrh	r3, [r3, #0]
 8011688:	b29b      	uxth	r3, r3
 801168a:	4618      	mov	r0, r3
 801168c:	f7f8 fc4e 	bl	8009f2c <lwip_htons>
 8011690:	4603      	mov	r3, r0
 8011692:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011694:	697b      	ldr	r3, [r7, #20]
 8011696:	885b      	ldrh	r3, [r3, #2]
 8011698:	b29b      	uxth	r3, r3
 801169a:	4618      	mov	r0, r3
 801169c:	f7f8 fc46 	bl	8009f2c <lwip_htons>
 80116a0:	4603      	mov	r3, r0
 80116a2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80116a4:	2300      	movs	r3, #0
 80116a6:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 80116a8:	2300      	movs	r3, #0
 80116aa:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80116ac:	2300      	movs	r3, #0
 80116ae:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80116b0:	4b64      	ldr	r3, [pc, #400]	@ (8011844 <udp_input+0x21c>)
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80116b6:	e054      	b.n	8011762 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80116b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116ba:	8a5b      	ldrh	r3, [r3, #18]
 80116bc:	89fa      	ldrh	r2, [r7, #14]
 80116be:	429a      	cmp	r2, r3
 80116c0:	d14a      	bne.n	8011758 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80116c2:	7cfb      	ldrb	r3, [r7, #19]
 80116c4:	461a      	mov	r2, r3
 80116c6:	6839      	ldr	r1, [r7, #0]
 80116c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80116ca:	f7ff ff49 	bl	8011560 <udp_input_local_match>
 80116ce:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d041      	beq.n	8011758 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80116d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116d6:	7c1b      	ldrb	r3, [r3, #16]
 80116d8:	f003 0304 	and.w	r3, r3, #4
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d11d      	bne.n	801171c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80116e0:	69fb      	ldr	r3, [r7, #28]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d102      	bne.n	80116ec <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80116e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116e8:	61fb      	str	r3, [r7, #28]
 80116ea:	e017      	b.n	801171c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80116ec:	7cfb      	ldrb	r3, [r7, #19]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d014      	beq.n	801171c <udp_input+0xf4>
 80116f2:	4b53      	ldr	r3, [pc, #332]	@ (8011840 <udp_input+0x218>)
 80116f4:	695b      	ldr	r3, [r3, #20]
 80116f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116fa:	d10f      	bne.n	801171c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80116fc:	69fb      	ldr	r3, [r7, #28]
 80116fe:	681a      	ldr	r2, [r3, #0]
 8011700:	683b      	ldr	r3, [r7, #0]
 8011702:	3304      	adds	r3, #4
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	429a      	cmp	r2, r3
 8011708:	d008      	beq.n	801171c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801170a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801170c:	681a      	ldr	r2, [r3, #0]
 801170e:	683b      	ldr	r3, [r7, #0]
 8011710:	3304      	adds	r3, #4
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	429a      	cmp	r2, r3
 8011716:	d101      	bne.n	801171c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8011718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801171a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801171c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801171e:	8a9b      	ldrh	r3, [r3, #20]
 8011720:	8a3a      	ldrh	r2, [r7, #16]
 8011722:	429a      	cmp	r2, r3
 8011724:	d118      	bne.n	8011758 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011728:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801172a:	2b00      	cmp	r3, #0
 801172c:	d005      	beq.n	801173a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801172e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011730:	685a      	ldr	r2, [r3, #4]
 8011732:	4b43      	ldr	r3, [pc, #268]	@ (8011840 <udp_input+0x218>)
 8011734:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011736:	429a      	cmp	r2, r3
 8011738:	d10e      	bne.n	8011758 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801173a:	6a3b      	ldr	r3, [r7, #32]
 801173c:	2b00      	cmp	r3, #0
 801173e:	d014      	beq.n	801176a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011742:	68da      	ldr	r2, [r3, #12]
 8011744:	6a3b      	ldr	r3, [r7, #32]
 8011746:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011748:	4b3e      	ldr	r3, [pc, #248]	@ (8011844 <udp_input+0x21c>)
 801174a:	681a      	ldr	r2, [r3, #0]
 801174c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801174e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011750:	4a3c      	ldr	r2, [pc, #240]	@ (8011844 <udp_input+0x21c>)
 8011752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011754:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8011756:	e008      	b.n	801176a <udp_input+0x142>
      }
    }

    prev = pcb;
 8011758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801175a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801175c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801175e:	68db      	ldr	r3, [r3, #12]
 8011760:	627b      	str	r3, [r7, #36]	@ 0x24
 8011762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011764:	2b00      	cmp	r3, #0
 8011766:	d1a7      	bne.n	80116b8 <udp_input+0x90>
 8011768:	e000      	b.n	801176c <udp_input+0x144>
        break;
 801176a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801176c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801176e:	2b00      	cmp	r3, #0
 8011770:	d101      	bne.n	8011776 <udp_input+0x14e>
    pcb = uncon_pcb;
 8011772:	69fb      	ldr	r3, [r7, #28]
 8011774:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8011776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011778:	2b00      	cmp	r3, #0
 801177a:	d002      	beq.n	8011782 <udp_input+0x15a>
    for_us = 1;
 801177c:	2301      	movs	r3, #1
 801177e:	76fb      	strb	r3, [r7, #27]
 8011780:	e00a      	b.n	8011798 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8011782:	683b      	ldr	r3, [r7, #0]
 8011784:	3304      	adds	r3, #4
 8011786:	681a      	ldr	r2, [r3, #0]
 8011788:	4b2d      	ldr	r3, [pc, #180]	@ (8011840 <udp_input+0x218>)
 801178a:	695b      	ldr	r3, [r3, #20]
 801178c:	429a      	cmp	r2, r3
 801178e:	bf0c      	ite	eq
 8011790:	2301      	moveq	r3, #1
 8011792:	2300      	movne	r3, #0
 8011794:	b2db      	uxtb	r3, r3
 8011796:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8011798:	7efb      	ldrb	r3, [r7, #27]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d041      	beq.n	8011822 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801179e:	2108      	movs	r1, #8
 80117a0:	6878      	ldr	r0, [r7, #4]
 80117a2:	f7fa f891 	bl	800b8c8 <pbuf_remove_header>
 80117a6:	4603      	mov	r3, r0
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d00a      	beq.n	80117c2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80117ac:	4b20      	ldr	r3, [pc, #128]	@ (8011830 <udp_input+0x208>)
 80117ae:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80117b2:	4925      	ldr	r1, [pc, #148]	@ (8011848 <udp_input+0x220>)
 80117b4:	4820      	ldr	r0, [pc, #128]	@ (8011838 <udp_input+0x210>)
 80117b6:	f005 fb65 	bl	8016e84 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80117ba:	6878      	ldr	r0, [r7, #4]
 80117bc:	f7fa f90a 	bl	800b9d4 <pbuf_free>
      goto end;
 80117c0:	e032      	b.n	8011828 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80117c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d012      	beq.n	80117ee <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80117c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117ca:	6a1b      	ldr	r3, [r3, #32]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d00a      	beq.n	80117e6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80117d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117d2:	6a1c      	ldr	r4, [r3, #32]
 80117d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117d6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80117d8:	8a3b      	ldrh	r3, [r7, #16]
 80117da:	9300      	str	r3, [sp, #0]
 80117dc:	4b1b      	ldr	r3, [pc, #108]	@ (801184c <udp_input+0x224>)
 80117de:	687a      	ldr	r2, [r7, #4]
 80117e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80117e2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80117e4:	e021      	b.n	801182a <udp_input+0x202>
        pbuf_free(p);
 80117e6:	6878      	ldr	r0, [r7, #4]
 80117e8:	f7fa f8f4 	bl	800b9d4 <pbuf_free>
        goto end;
 80117ec:	e01c      	b.n	8011828 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80117ee:	7cfb      	ldrb	r3, [r7, #19]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d112      	bne.n	801181a <udp_input+0x1f2>
 80117f4:	4b12      	ldr	r3, [pc, #72]	@ (8011840 <udp_input+0x218>)
 80117f6:	695b      	ldr	r3, [r3, #20]
 80117f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80117fc:	2be0      	cmp	r3, #224	@ 0xe0
 80117fe:	d00c      	beq.n	801181a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011800:	4b0f      	ldr	r3, [pc, #60]	@ (8011840 <udp_input+0x218>)
 8011802:	899b      	ldrh	r3, [r3, #12]
 8011804:	3308      	adds	r3, #8
 8011806:	b29b      	uxth	r3, r3
 8011808:	b21b      	sxth	r3, r3
 801180a:	4619      	mov	r1, r3
 801180c:	6878      	ldr	r0, [r7, #4]
 801180e:	f7fa f8ce 	bl	800b9ae <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8011812:	2103      	movs	r1, #3
 8011814:	6878      	ldr	r0, [r7, #4]
 8011816:	f003 fa95 	bl	8014d44 <icmp_dest_unreach>
      pbuf_free(p);
 801181a:	6878      	ldr	r0, [r7, #4]
 801181c:	f7fa f8da 	bl	800b9d4 <pbuf_free>
  return;
 8011820:	e003      	b.n	801182a <udp_input+0x202>
    pbuf_free(p);
 8011822:	6878      	ldr	r0, [r7, #4]
 8011824:	f7fa f8d6 	bl	800b9d4 <pbuf_free>
  return;
 8011828:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801182a:	372c      	adds	r7, #44	@ 0x2c
 801182c:	46bd      	mov	sp, r7
 801182e:	bd90      	pop	{r4, r7, pc}
 8011830:	0801a40c 	.word	0x0801a40c
 8011834:	0801a4b0 	.word	0x0801a4b0
 8011838:	0801a460 	.word	0x0801a460
 801183c:	0801a4c8 	.word	0x0801a4c8
 8011840:	2000928c 	.word	0x2000928c
 8011844:	2000cb18 	.word	0x2000cb18
 8011848:	0801a4e4 	.word	0x0801a4e4
 801184c:	2000929c 	.word	0x2000929c

08011850 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8011850:	b580      	push	{r7, lr}
 8011852:	b088      	sub	sp, #32
 8011854:	af02      	add	r7, sp, #8
 8011856:	60f8      	str	r0, [r7, #12]
 8011858:	60b9      	str	r1, [r7, #8]
 801185a:	607a      	str	r2, [r7, #4]
 801185c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	2b00      	cmp	r3, #0
 8011862:	d109      	bne.n	8011878 <udp_sendto_if+0x28>
 8011864:	4b2e      	ldr	r3, [pc, #184]	@ (8011920 <udp_sendto_if+0xd0>)
 8011866:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801186a:	492e      	ldr	r1, [pc, #184]	@ (8011924 <udp_sendto_if+0xd4>)
 801186c:	482e      	ldr	r0, [pc, #184]	@ (8011928 <udp_sendto_if+0xd8>)
 801186e:	f005 fb09 	bl	8016e84 <iprintf>
 8011872:	f06f 030f 	mvn.w	r3, #15
 8011876:	e04f      	b.n	8011918 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8011878:	68bb      	ldr	r3, [r7, #8]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d109      	bne.n	8011892 <udp_sendto_if+0x42>
 801187e:	4b28      	ldr	r3, [pc, #160]	@ (8011920 <udp_sendto_if+0xd0>)
 8011880:	f240 2281 	movw	r2, #641	@ 0x281
 8011884:	4929      	ldr	r1, [pc, #164]	@ (801192c <udp_sendto_if+0xdc>)
 8011886:	4828      	ldr	r0, [pc, #160]	@ (8011928 <udp_sendto_if+0xd8>)
 8011888:	f005 fafc 	bl	8016e84 <iprintf>
 801188c:	f06f 030f 	mvn.w	r3, #15
 8011890:	e042      	b.n	8011918 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d109      	bne.n	80118ac <udp_sendto_if+0x5c>
 8011898:	4b21      	ldr	r3, [pc, #132]	@ (8011920 <udp_sendto_if+0xd0>)
 801189a:	f240 2282 	movw	r2, #642	@ 0x282
 801189e:	4924      	ldr	r1, [pc, #144]	@ (8011930 <udp_sendto_if+0xe0>)
 80118a0:	4821      	ldr	r0, [pc, #132]	@ (8011928 <udp_sendto_if+0xd8>)
 80118a2:	f005 faef 	bl	8016e84 <iprintf>
 80118a6:	f06f 030f 	mvn.w	r3, #15
 80118aa:	e035      	b.n	8011918 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80118ac:	6a3b      	ldr	r3, [r7, #32]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d109      	bne.n	80118c6 <udp_sendto_if+0x76>
 80118b2:	4b1b      	ldr	r3, [pc, #108]	@ (8011920 <udp_sendto_if+0xd0>)
 80118b4:	f240 2283 	movw	r2, #643	@ 0x283
 80118b8:	491e      	ldr	r1, [pc, #120]	@ (8011934 <udp_sendto_if+0xe4>)
 80118ba:	481b      	ldr	r0, [pc, #108]	@ (8011928 <udp_sendto_if+0xd8>)
 80118bc:	f005 fae2 	bl	8016e84 <iprintf>
 80118c0:	f06f 030f 	mvn.w	r3, #15
 80118c4:	e028      	b.n	8011918 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d009      	beq.n	80118e0 <udp_sendto_if+0x90>
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d005      	beq.n	80118e0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80118dc:	2be0      	cmp	r3, #224	@ 0xe0
 80118de:	d103      	bne.n	80118e8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80118e0:	6a3b      	ldr	r3, [r7, #32]
 80118e2:	3304      	adds	r3, #4
 80118e4:	617b      	str	r3, [r7, #20]
 80118e6:	e00b      	b.n	8011900 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	681a      	ldr	r2, [r3, #0]
 80118ec:	6a3b      	ldr	r3, [r7, #32]
 80118ee:	3304      	adds	r3, #4
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	429a      	cmp	r2, r3
 80118f4:	d002      	beq.n	80118fc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80118f6:	f06f 0303 	mvn.w	r3, #3
 80118fa:	e00d      	b.n	8011918 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8011900:	887a      	ldrh	r2, [r7, #2]
 8011902:	697b      	ldr	r3, [r7, #20]
 8011904:	9301      	str	r3, [sp, #4]
 8011906:	6a3b      	ldr	r3, [r7, #32]
 8011908:	9300      	str	r3, [sp, #0]
 801190a:	4613      	mov	r3, r2
 801190c:	687a      	ldr	r2, [r7, #4]
 801190e:	68b9      	ldr	r1, [r7, #8]
 8011910:	68f8      	ldr	r0, [r7, #12]
 8011912:	f000 f811 	bl	8011938 <udp_sendto_if_src>
 8011916:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011918:	4618      	mov	r0, r3
 801191a:	3718      	adds	r7, #24
 801191c:	46bd      	mov	sp, r7
 801191e:	bd80      	pop	{r7, pc}
 8011920:	0801a40c 	.word	0x0801a40c
 8011924:	0801a580 	.word	0x0801a580
 8011928:	0801a460 	.word	0x0801a460
 801192c:	0801a59c 	.word	0x0801a59c
 8011930:	0801a5b8 	.word	0x0801a5b8
 8011934:	0801a5d8 	.word	0x0801a5d8

08011938 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b08c      	sub	sp, #48	@ 0x30
 801193c:	af04      	add	r7, sp, #16
 801193e:	60f8      	str	r0, [r7, #12]
 8011940:	60b9      	str	r1, [r7, #8]
 8011942:	607a      	str	r2, [r7, #4]
 8011944:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d109      	bne.n	8011960 <udp_sendto_if_src+0x28>
 801194c:	4b73      	ldr	r3, [pc, #460]	@ (8011b1c <udp_sendto_if_src+0x1e4>)
 801194e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8011952:	4973      	ldr	r1, [pc, #460]	@ (8011b20 <udp_sendto_if_src+0x1e8>)
 8011954:	4873      	ldr	r0, [pc, #460]	@ (8011b24 <udp_sendto_if_src+0x1ec>)
 8011956:	f005 fa95 	bl	8016e84 <iprintf>
 801195a:	f06f 030f 	mvn.w	r3, #15
 801195e:	e0d8      	b.n	8011b12 <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8011960:	68bb      	ldr	r3, [r7, #8]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d109      	bne.n	801197a <udp_sendto_if_src+0x42>
 8011966:	4b6d      	ldr	r3, [pc, #436]	@ (8011b1c <udp_sendto_if_src+0x1e4>)
 8011968:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801196c:	496e      	ldr	r1, [pc, #440]	@ (8011b28 <udp_sendto_if_src+0x1f0>)
 801196e:	486d      	ldr	r0, [pc, #436]	@ (8011b24 <udp_sendto_if_src+0x1ec>)
 8011970:	f005 fa88 	bl	8016e84 <iprintf>
 8011974:	f06f 030f 	mvn.w	r3, #15
 8011978:	e0cb      	b.n	8011b12 <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d109      	bne.n	8011994 <udp_sendto_if_src+0x5c>
 8011980:	4b66      	ldr	r3, [pc, #408]	@ (8011b1c <udp_sendto_if_src+0x1e4>)
 8011982:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8011986:	4969      	ldr	r1, [pc, #420]	@ (8011b2c <udp_sendto_if_src+0x1f4>)
 8011988:	4866      	ldr	r0, [pc, #408]	@ (8011b24 <udp_sendto_if_src+0x1ec>)
 801198a:	f005 fa7b 	bl	8016e84 <iprintf>
 801198e:	f06f 030f 	mvn.w	r3, #15
 8011992:	e0be      	b.n	8011b12 <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8011994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011996:	2b00      	cmp	r3, #0
 8011998:	d109      	bne.n	80119ae <udp_sendto_if_src+0x76>
 801199a:	4b60      	ldr	r3, [pc, #384]	@ (8011b1c <udp_sendto_if_src+0x1e4>)
 801199c:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 80119a0:	4963      	ldr	r1, [pc, #396]	@ (8011b30 <udp_sendto_if_src+0x1f8>)
 80119a2:	4860      	ldr	r0, [pc, #384]	@ (8011b24 <udp_sendto_if_src+0x1ec>)
 80119a4:	f005 fa6e 	bl	8016e84 <iprintf>
 80119a8:	f06f 030f 	mvn.w	r3, #15
 80119ac:	e0b1      	b.n	8011b12 <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80119ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d109      	bne.n	80119c8 <udp_sendto_if_src+0x90>
 80119b4:	4b59      	ldr	r3, [pc, #356]	@ (8011b1c <udp_sendto_if_src+0x1e4>)
 80119b6:	f240 22d5 	movw	r2, #725	@ 0x2d5
 80119ba:	495e      	ldr	r1, [pc, #376]	@ (8011b34 <udp_sendto_if_src+0x1fc>)
 80119bc:	4859      	ldr	r0, [pc, #356]	@ (8011b24 <udp_sendto_if_src+0x1ec>)
 80119be:	f005 fa61 	bl	8016e84 <iprintf>
 80119c2:	f06f 030f 	mvn.w	r3, #15
 80119c6:	e0a4      	b.n	8011b12 <udp_sendto_if_src+0x1da>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	8a5b      	ldrh	r3, [r3, #18]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d10f      	bne.n	80119f0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80119d0:	68f9      	ldr	r1, [r7, #12]
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	8a5b      	ldrh	r3, [r3, #18]
 80119d6:	461a      	mov	r2, r3
 80119d8:	68f8      	ldr	r0, [r7, #12]
 80119da:	f000 f8af 	bl	8011b3c <udp_bind>
 80119de:	4603      	mov	r3, r0
 80119e0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80119e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d002      	beq.n	80119f0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80119ea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80119ee:	e090      	b.n	8011b12 <udp_sendto_if_src+0x1da>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80119f0:	68bb      	ldr	r3, [r7, #8]
 80119f2:	891b      	ldrh	r3, [r3, #8]
 80119f4:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80119f8:	4293      	cmp	r3, r2
 80119fa:	d902      	bls.n	8011a02 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80119fc:	f04f 33ff 	mov.w	r3, #4294967295
 8011a00:	e087      	b.n	8011b12 <udp_sendto_if_src+0x1da>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8011a02:	2108      	movs	r1, #8
 8011a04:	68b8      	ldr	r0, [r7, #8]
 8011a06:	f7f9 ff4f 	bl	800b8a8 <pbuf_add_header>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d015      	beq.n	8011a3c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8011a10:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011a14:	2108      	movs	r1, #8
 8011a16:	2022      	movs	r0, #34	@ 0x22
 8011a18:	f7f9 fcf8 	bl	800b40c <pbuf_alloc>
 8011a1c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8011a1e:	69fb      	ldr	r3, [r7, #28]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d102      	bne.n	8011a2a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8011a24:	f04f 33ff 	mov.w	r3, #4294967295
 8011a28:	e073      	b.n	8011b12 <udp_sendto_if_src+0x1da>
    }
    if (p->tot_len != 0) {
 8011a2a:	68bb      	ldr	r3, [r7, #8]
 8011a2c:	891b      	ldrh	r3, [r3, #8]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d006      	beq.n	8011a40 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8011a32:	68b9      	ldr	r1, [r7, #8]
 8011a34:	69f8      	ldr	r0, [r7, #28]
 8011a36:	f7fa f8f1 	bl	800bc1c <pbuf_chain>
 8011a3a:	e001      	b.n	8011a40 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8011a3c:	68bb      	ldr	r3, [r7, #8]
 8011a3e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8011a40:	69fb      	ldr	r3, [r7, #28]
 8011a42:	895b      	ldrh	r3, [r3, #10]
 8011a44:	2b07      	cmp	r3, #7
 8011a46:	d806      	bhi.n	8011a56 <udp_sendto_if_src+0x11e>
 8011a48:	4b34      	ldr	r3, [pc, #208]	@ (8011b1c <udp_sendto_if_src+0x1e4>)
 8011a4a:	f240 320d 	movw	r2, #781	@ 0x30d
 8011a4e:	493a      	ldr	r1, [pc, #232]	@ (8011b38 <udp_sendto_if_src+0x200>)
 8011a50:	4834      	ldr	r0, [pc, #208]	@ (8011b24 <udp_sendto_if_src+0x1ec>)
 8011a52:	f005 fa17 	bl	8016e84 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8011a56:	69fb      	ldr	r3, [r7, #28]
 8011a58:	685b      	ldr	r3, [r3, #4]
 8011a5a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	8a5b      	ldrh	r3, [r3, #18]
 8011a60:	4618      	mov	r0, r3
 8011a62:	f7f8 fa63 	bl	8009f2c <lwip_htons>
 8011a66:	4603      	mov	r3, r0
 8011a68:	461a      	mov	r2, r3
 8011a6a:	697b      	ldr	r3, [r7, #20]
 8011a6c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8011a6e:	887b      	ldrh	r3, [r7, #2]
 8011a70:	4618      	mov	r0, r3
 8011a72:	f7f8 fa5b 	bl	8009f2c <lwip_htons>
 8011a76:	4603      	mov	r3, r0
 8011a78:	461a      	mov	r2, r3
 8011a7a:	697b      	ldr	r3, [r7, #20]
 8011a7c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8011a7e:	697b      	ldr	r3, [r7, #20]
 8011a80:	2200      	movs	r2, #0
 8011a82:	719a      	strb	r2, [r3, #6]
 8011a84:	2200      	movs	r2, #0
 8011a86:	71da      	strb	r2, [r3, #7]

  /* Multicast Loop? */
#if LWIP_MULTICAST_TX_OPTIONS
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	7c1b      	ldrb	r3, [r3, #16]
 8011a8c:	f003 0308 	and.w	r3, r3, #8
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d00c      	beq.n	8011aae <udp_sendto_if_src+0x176>
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011a9c:	2be0      	cmp	r3, #224	@ 0xe0
 8011a9e:	d106      	bne.n	8011aae <udp_sendto_if_src+0x176>
    q->flags |= PBUF_FLAG_MCASTLOOP;
 8011aa0:	69fb      	ldr	r3, [r7, #28]
 8011aa2:	7b5b      	ldrb	r3, [r3, #13]
 8011aa4:	f043 0304 	orr.w	r3, r3, #4
 8011aa8:	b2da      	uxtb	r2, r3
 8011aaa:	69fb      	ldr	r3, [r7, #28]
 8011aac:	735a      	strb	r2, [r3, #13]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8011aae:	69fb      	ldr	r3, [r7, #28]
 8011ab0:	891b      	ldrh	r3, [r3, #8]
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	f7f8 fa3a 	bl	8009f2c <lwip_htons>
 8011ab8:	4603      	mov	r3, r0
 8011aba:	461a      	mov	r2, r3
 8011abc:	697b      	ldr	r3, [r7, #20]
 8011abe:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8011ac0:	2311      	movs	r3, #17
 8011ac2:	74fb      	strb	r3, [r7, #19]
  }

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011acc:	2be0      	cmp	r3, #224	@ 0xe0
 8011ace:	d102      	bne.n	8011ad6 <udp_sendto_if_src+0x19e>
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	7f5b      	ldrb	r3, [r3, #29]
 8011ad4:	e001      	b.n	8011ada <udp_sendto_if_src+0x1a2>
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	7adb      	ldrb	r3, [r3, #11]
 8011ada:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	7a9b      	ldrb	r3, [r3, #10]
 8011ae0:	7cb9      	ldrb	r1, [r7, #18]
 8011ae2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011ae4:	9202      	str	r2, [sp, #8]
 8011ae6:	7cfa      	ldrb	r2, [r7, #19]
 8011ae8:	9201      	str	r2, [sp, #4]
 8011aea:	9300      	str	r3, [sp, #0]
 8011aec:	460b      	mov	r3, r1
 8011aee:	687a      	ldr	r2, [r7, #4]
 8011af0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011af2:	69f8      	ldr	r0, [r7, #28]
 8011af4:	f003 fec7 	bl	8015886 <ip4_output_if_src>
 8011af8:	4603      	mov	r3, r0
 8011afa:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8011afc:	69fa      	ldr	r2, [r7, #28]
 8011afe:	68bb      	ldr	r3, [r7, #8]
 8011b00:	429a      	cmp	r2, r3
 8011b02:	d004      	beq.n	8011b0e <udp_sendto_if_src+0x1d6>
    /* free the header pbuf */
    pbuf_free(q);
 8011b04:	69f8      	ldr	r0, [r7, #28]
 8011b06:	f7f9 ff65 	bl	800b9d4 <pbuf_free>
    q = NULL;
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8011b0e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8011b12:	4618      	mov	r0, r3
 8011b14:	3720      	adds	r7, #32
 8011b16:	46bd      	mov	sp, r7
 8011b18:	bd80      	pop	{r7, pc}
 8011b1a:	bf00      	nop
 8011b1c:	0801a40c 	.word	0x0801a40c
 8011b20:	0801a5f8 	.word	0x0801a5f8
 8011b24:	0801a460 	.word	0x0801a460
 8011b28:	0801a618 	.word	0x0801a618
 8011b2c:	0801a638 	.word	0x0801a638
 8011b30:	0801a65c 	.word	0x0801a65c
 8011b34:	0801a680 	.word	0x0801a680
 8011b38:	0801a6a4 	.word	0x0801a6a4

08011b3c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011b3c:	b580      	push	{r7, lr}
 8011b3e:	b086      	sub	sp, #24
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	60f8      	str	r0, [r7, #12]
 8011b44:	60b9      	str	r1, [r7, #8]
 8011b46:	4613      	mov	r3, r2
 8011b48:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011b4a:	68bb      	ldr	r3, [r7, #8]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d101      	bne.n	8011b54 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8011b50:	4b39      	ldr	r3, [pc, #228]	@ (8011c38 <udp_bind+0xfc>)
 8011b52:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d109      	bne.n	8011b6e <udp_bind+0x32>
 8011b5a:	4b38      	ldr	r3, [pc, #224]	@ (8011c3c <udp_bind+0x100>)
 8011b5c:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8011b60:	4937      	ldr	r1, [pc, #220]	@ (8011c40 <udp_bind+0x104>)
 8011b62:	4838      	ldr	r0, [pc, #224]	@ (8011c44 <udp_bind+0x108>)
 8011b64:	f005 f98e 	bl	8016e84 <iprintf>
 8011b68:	f06f 030f 	mvn.w	r3, #15
 8011b6c:	e060      	b.n	8011c30 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8011b6e:	2300      	movs	r3, #0
 8011b70:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011b72:	4b35      	ldr	r3, [pc, #212]	@ (8011c48 <udp_bind+0x10c>)
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	617b      	str	r3, [r7, #20]
 8011b78:	e009      	b.n	8011b8e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8011b7a:	68fa      	ldr	r2, [r7, #12]
 8011b7c:	697b      	ldr	r3, [r7, #20]
 8011b7e:	429a      	cmp	r2, r3
 8011b80:	d102      	bne.n	8011b88 <udp_bind+0x4c>
      rebind = 1;
 8011b82:	2301      	movs	r3, #1
 8011b84:	74fb      	strb	r3, [r7, #19]
      break;
 8011b86:	e005      	b.n	8011b94 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011b88:	697b      	ldr	r3, [r7, #20]
 8011b8a:	68db      	ldr	r3, [r3, #12]
 8011b8c:	617b      	str	r3, [r7, #20]
 8011b8e:	697b      	ldr	r3, [r7, #20]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d1f2      	bne.n	8011b7a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8011b94:	88fb      	ldrh	r3, [r7, #6]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d109      	bne.n	8011bae <udp_bind+0x72>
    port = udp_new_port();
 8011b9a:	f7ff fca9 	bl	80114f0 <udp_new_port>
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8011ba2:	88fb      	ldrh	r3, [r7, #6]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d12c      	bne.n	8011c02 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8011ba8:	f06f 0307 	mvn.w	r3, #7
 8011bac:	e040      	b.n	8011c30 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011bae:	4b26      	ldr	r3, [pc, #152]	@ (8011c48 <udp_bind+0x10c>)
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	617b      	str	r3, [r7, #20]
 8011bb4:	e022      	b.n	8011bfc <udp_bind+0xc0>
      if (pcb != ipcb) {
 8011bb6:	68fa      	ldr	r2, [r7, #12]
 8011bb8:	697b      	ldr	r3, [r7, #20]
 8011bba:	429a      	cmp	r2, r3
 8011bbc:	d01b      	beq.n	8011bf6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8011bbe:	697b      	ldr	r3, [r7, #20]
 8011bc0:	8a5b      	ldrh	r3, [r3, #18]
 8011bc2:	88fa      	ldrh	r2, [r7, #6]
 8011bc4:	429a      	cmp	r2, r3
 8011bc6:	d116      	bne.n	8011bf6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011bc8:	697b      	ldr	r3, [r7, #20]
 8011bca:	681a      	ldr	r2, [r3, #0]
 8011bcc:	68bb      	ldr	r3, [r7, #8]
 8011bce:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8011bd0:	429a      	cmp	r2, r3
 8011bd2:	d00d      	beq.n	8011bf0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011bd4:	68bb      	ldr	r3, [r7, #8]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d00a      	beq.n	8011bf0 <udp_bind+0xb4>
 8011bda:	68bb      	ldr	r3, [r7, #8]
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d006      	beq.n	8011bf0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011be2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d003      	beq.n	8011bf0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011be8:	697b      	ldr	r3, [r7, #20]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d102      	bne.n	8011bf6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8011bf0:	f06f 0307 	mvn.w	r3, #7
 8011bf4:	e01c      	b.n	8011c30 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011bf6:	697b      	ldr	r3, [r7, #20]
 8011bf8:	68db      	ldr	r3, [r3, #12]
 8011bfa:	617b      	str	r3, [r7, #20]
 8011bfc:	697b      	ldr	r3, [r7, #20]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d1d9      	bne.n	8011bb6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8011c02:	68bb      	ldr	r3, [r7, #8]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d002      	beq.n	8011c0e <udp_bind+0xd2>
 8011c08:	68bb      	ldr	r3, [r7, #8]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	e000      	b.n	8011c10 <udp_bind+0xd4>
 8011c0e:	2300      	movs	r3, #0
 8011c10:	68fa      	ldr	r2, [r7, #12]
 8011c12:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	88fa      	ldrh	r2, [r7, #6]
 8011c18:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8011c1a:	7cfb      	ldrb	r3, [r7, #19]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d106      	bne.n	8011c2e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8011c20:	4b09      	ldr	r3, [pc, #36]	@ (8011c48 <udp_bind+0x10c>)
 8011c22:	681a      	ldr	r2, [r3, #0]
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8011c28:	4a07      	ldr	r2, [pc, #28]	@ (8011c48 <udp_bind+0x10c>)
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8011c2e:	2300      	movs	r3, #0
}
 8011c30:	4618      	mov	r0, r3
 8011c32:	3718      	adds	r7, #24
 8011c34:	46bd      	mov	sp, r7
 8011c36:	bd80      	pop	{r7, pc}
 8011c38:	0801b6ac 	.word	0x0801b6ac
 8011c3c:	0801a40c 	.word	0x0801a40c
 8011c40:	0801a6d4 	.word	0x0801a6d4
 8011c44:	0801a460 	.word	0x0801a460
 8011c48:	2000cb18 	.word	0x2000cb18

08011c4c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b086      	sub	sp, #24
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	60f8      	str	r0, [r7, #12]
 8011c54:	60b9      	str	r1, [r7, #8]
 8011c56:	4613      	mov	r3, r2
 8011c58:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d109      	bne.n	8011c74 <udp_connect+0x28>
 8011c60:	4b2c      	ldr	r3, [pc, #176]	@ (8011d14 <udp_connect+0xc8>)
 8011c62:	f240 4235 	movw	r2, #1077	@ 0x435
 8011c66:	492c      	ldr	r1, [pc, #176]	@ (8011d18 <udp_connect+0xcc>)
 8011c68:	482c      	ldr	r0, [pc, #176]	@ (8011d1c <udp_connect+0xd0>)
 8011c6a:	f005 f90b 	bl	8016e84 <iprintf>
 8011c6e:	f06f 030f 	mvn.w	r3, #15
 8011c72:	e04b      	b.n	8011d0c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8011c74:	68bb      	ldr	r3, [r7, #8]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d109      	bne.n	8011c8e <udp_connect+0x42>
 8011c7a:	4b26      	ldr	r3, [pc, #152]	@ (8011d14 <udp_connect+0xc8>)
 8011c7c:	f240 4236 	movw	r2, #1078	@ 0x436
 8011c80:	4927      	ldr	r1, [pc, #156]	@ (8011d20 <udp_connect+0xd4>)
 8011c82:	4826      	ldr	r0, [pc, #152]	@ (8011d1c <udp_connect+0xd0>)
 8011c84:	f005 f8fe 	bl	8016e84 <iprintf>
 8011c88:	f06f 030f 	mvn.w	r3, #15
 8011c8c:	e03e      	b.n	8011d0c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	8a5b      	ldrh	r3, [r3, #18]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d10f      	bne.n	8011cb6 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011c96:	68f9      	ldr	r1, [r7, #12]
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	8a5b      	ldrh	r3, [r3, #18]
 8011c9c:	461a      	mov	r2, r3
 8011c9e:	68f8      	ldr	r0, [r7, #12]
 8011ca0:	f7ff ff4c 	bl	8011b3c <udp_bind>
 8011ca4:	4603      	mov	r3, r0
 8011ca6:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8011ca8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d002      	beq.n	8011cb6 <udp_connect+0x6a>
      return err;
 8011cb0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011cb4:	e02a      	b.n	8011d0c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8011cb6:	68bb      	ldr	r3, [r7, #8]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d002      	beq.n	8011cc2 <udp_connect+0x76>
 8011cbc:	68bb      	ldr	r3, [r7, #8]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	e000      	b.n	8011cc4 <udp_connect+0x78>
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	68fa      	ldr	r2, [r7, #12]
 8011cc6:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	88fa      	ldrh	r2, [r7, #6]
 8011ccc:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	7c1b      	ldrb	r3, [r3, #16]
 8011cd2:	f043 0304 	orr.w	r3, r3, #4
 8011cd6:	b2da      	uxtb	r2, r3
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011cdc:	4b11      	ldr	r3, [pc, #68]	@ (8011d24 <udp_connect+0xd8>)
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	617b      	str	r3, [r7, #20]
 8011ce2:	e008      	b.n	8011cf6 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8011ce4:	68fa      	ldr	r2, [r7, #12]
 8011ce6:	697b      	ldr	r3, [r7, #20]
 8011ce8:	429a      	cmp	r2, r3
 8011cea:	d101      	bne.n	8011cf0 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8011cec:	2300      	movs	r3, #0
 8011cee:	e00d      	b.n	8011d0c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011cf0:	697b      	ldr	r3, [r7, #20]
 8011cf2:	68db      	ldr	r3, [r3, #12]
 8011cf4:	617b      	str	r3, [r7, #20]
 8011cf6:	697b      	ldr	r3, [r7, #20]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d1f3      	bne.n	8011ce4 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8011cfc:	4b09      	ldr	r3, [pc, #36]	@ (8011d24 <udp_connect+0xd8>)
 8011cfe:	681a      	ldr	r2, [r3, #0]
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8011d04:	4a07      	ldr	r2, [pc, #28]	@ (8011d24 <udp_connect+0xd8>)
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8011d0a:	2300      	movs	r3, #0
}
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	3718      	adds	r7, #24
 8011d10:	46bd      	mov	sp, r7
 8011d12:	bd80      	pop	{r7, pc}
 8011d14:	0801a40c 	.word	0x0801a40c
 8011d18:	0801a6ec 	.word	0x0801a6ec
 8011d1c:	0801a460 	.word	0x0801a460
 8011d20:	0801a708 	.word	0x0801a708
 8011d24:	2000cb18 	.word	0x2000cb18

08011d28 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b084      	sub	sp, #16
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	60f8      	str	r0, [r7, #12]
 8011d30:	60b9      	str	r1, [r7, #8]
 8011d32:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d107      	bne.n	8011d4a <udp_recv+0x22>
 8011d3a:	4b08      	ldr	r3, [pc, #32]	@ (8011d5c <udp_recv+0x34>)
 8011d3c:	f240 428a 	movw	r2, #1162	@ 0x48a
 8011d40:	4907      	ldr	r1, [pc, #28]	@ (8011d60 <udp_recv+0x38>)
 8011d42:	4808      	ldr	r0, [pc, #32]	@ (8011d64 <udp_recv+0x3c>)
 8011d44:	f005 f89e 	bl	8016e84 <iprintf>
 8011d48:	e005      	b.n	8011d56 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	68ba      	ldr	r2, [r7, #8]
 8011d4e:	621a      	str	r2, [r3, #32]
  pcb->recv_arg = recv_arg;
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	687a      	ldr	r2, [r7, #4]
 8011d54:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8011d56:	3710      	adds	r7, #16
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	bd80      	pop	{r7, pc}
 8011d5c:	0801a40c 	.word	0x0801a40c
 8011d60:	0801a740 	.word	0x0801a740
 8011d64:	0801a460 	.word	0x0801a460

08011d68 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b084      	sub	sp, #16
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d107      	bne.n	8011d86 <udp_remove+0x1e>
 8011d76:	4b19      	ldr	r3, [pc, #100]	@ (8011ddc <udp_remove+0x74>)
 8011d78:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8011d7c:	4918      	ldr	r1, [pc, #96]	@ (8011de0 <udp_remove+0x78>)
 8011d7e:	4819      	ldr	r0, [pc, #100]	@ (8011de4 <udp_remove+0x7c>)
 8011d80:	f005 f880 	bl	8016e84 <iprintf>
 8011d84:	e026      	b.n	8011dd4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8011d86:	4b18      	ldr	r3, [pc, #96]	@ (8011de8 <udp_remove+0x80>)
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	687a      	ldr	r2, [r7, #4]
 8011d8c:	429a      	cmp	r2, r3
 8011d8e:	d105      	bne.n	8011d9c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8011d90:	4b15      	ldr	r3, [pc, #84]	@ (8011de8 <udp_remove+0x80>)
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	68db      	ldr	r3, [r3, #12]
 8011d96:	4a14      	ldr	r2, [pc, #80]	@ (8011de8 <udp_remove+0x80>)
 8011d98:	6013      	str	r3, [r2, #0]
 8011d9a:	e017      	b.n	8011dcc <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011d9c:	4b12      	ldr	r3, [pc, #72]	@ (8011de8 <udp_remove+0x80>)
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	60fb      	str	r3, [r7, #12]
 8011da2:	e010      	b.n	8011dc6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	68db      	ldr	r3, [r3, #12]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d009      	beq.n	8011dc0 <udp_remove+0x58>
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	68db      	ldr	r3, [r3, #12]
 8011db0:	687a      	ldr	r2, [r7, #4]
 8011db2:	429a      	cmp	r2, r3
 8011db4:	d104      	bne.n	8011dc0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	68da      	ldr	r2, [r3, #12]
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	60da      	str	r2, [r3, #12]
        break;
 8011dbe:	e005      	b.n	8011dcc <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	68db      	ldr	r3, [r3, #12]
 8011dc4:	60fb      	str	r3, [r7, #12]
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d1eb      	bne.n	8011da4 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8011dcc:	6879      	ldr	r1, [r7, #4]
 8011dce:	2000      	movs	r0, #0
 8011dd0:	f7f8 fe6a 	bl	800aaa8 <memp_free>
}
 8011dd4:	3710      	adds	r7, #16
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	bd80      	pop	{r7, pc}
 8011dda:	bf00      	nop
 8011ddc:	0801a40c 	.word	0x0801a40c
 8011de0:	0801a758 	.word	0x0801a758
 8011de4:	0801a460 	.word	0x0801a460
 8011de8:	2000cb18 	.word	0x2000cb18

08011dec <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b082      	sub	sp, #8
 8011df0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8011df2:	2000      	movs	r0, #0
 8011df4:	f7f8 fde2 	bl	800a9bc <memp_malloc>
 8011df8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d00a      	beq.n	8011e16 <udp_new+0x2a>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8011e00:	2228      	movs	r2, #40	@ 0x28
 8011e02:	2100      	movs	r1, #0
 8011e04:	6878      	ldr	r0, [r7, #4]
 8011e06:	f005 f9cf 	bl	80171a8 <memset>
    pcb->ttl = UDP_TTL;
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	22ff      	movs	r2, #255	@ 0xff
 8011e0e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	22ff      	movs	r2, #255	@ 0xff
 8011e14:	775a      	strb	r2, [r3, #29]
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8011e16:	687b      	ldr	r3, [r7, #4]
}
 8011e18:	4618      	mov	r0, r3
 8011e1a:	3708      	adds	r7, #8
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	bd80      	pop	{r7, pc}

08011e20 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011e20:	b480      	push	{r7}
 8011e22:	b085      	sub	sp, #20
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	6078      	str	r0, [r7, #4]
 8011e28:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d01e      	beq.n	8011e6e <udp_netif_ip_addr_changed+0x4e>
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d01a      	beq.n	8011e6e <udp_netif_ip_addr_changed+0x4e>
 8011e38:	683b      	ldr	r3, [r7, #0]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d017      	beq.n	8011e6e <udp_netif_ip_addr_changed+0x4e>
 8011e3e:	683b      	ldr	r3, [r7, #0]
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d013      	beq.n	8011e6e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011e46:	4b0d      	ldr	r3, [pc, #52]	@ (8011e7c <udp_netif_ip_addr_changed+0x5c>)
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	60fb      	str	r3, [r7, #12]
 8011e4c:	e00c      	b.n	8011e68 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	681a      	ldr	r2, [r3, #0]
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	429a      	cmp	r2, r3
 8011e58:	d103      	bne.n	8011e62 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8011e5a:	683b      	ldr	r3, [r7, #0]
 8011e5c:	681a      	ldr	r2, [r3, #0]
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	68db      	ldr	r3, [r3, #12]
 8011e66:	60fb      	str	r3, [r7, #12]
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d1ef      	bne.n	8011e4e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8011e6e:	bf00      	nop
 8011e70:	3714      	adds	r7, #20
 8011e72:	46bd      	mov	sp, r7
 8011e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e78:	4770      	bx	lr
 8011e7a:	bf00      	nop
 8011e7c:	2000cb18 	.word	0x2000cb18

08011e80 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8011e80:	b580      	push	{r7, lr}
 8011e82:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8011e84:	4b20      	ldr	r3, [pc, #128]	@ (8011f08 <dhcp_inc_pcb_refcount+0x88>)
 8011e86:	781b      	ldrb	r3, [r3, #0]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d133      	bne.n	8011ef4 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8011e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8011f0c <dhcp_inc_pcb_refcount+0x8c>)
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d005      	beq.n	8011ea0 <dhcp_inc_pcb_refcount+0x20>
 8011e94:	4b1e      	ldr	r3, [pc, #120]	@ (8011f10 <dhcp_inc_pcb_refcount+0x90>)
 8011e96:	22e5      	movs	r2, #229	@ 0xe5
 8011e98:	491e      	ldr	r1, [pc, #120]	@ (8011f14 <dhcp_inc_pcb_refcount+0x94>)
 8011e9a:	481f      	ldr	r0, [pc, #124]	@ (8011f18 <dhcp_inc_pcb_refcount+0x98>)
 8011e9c:	f004 fff2 	bl	8016e84 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8011ea0:	f7ff ffa4 	bl	8011dec <udp_new>
 8011ea4:	4603      	mov	r3, r0
 8011ea6:	4a19      	ldr	r2, [pc, #100]	@ (8011f0c <dhcp_inc_pcb_refcount+0x8c>)
 8011ea8:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8011eaa:	4b18      	ldr	r3, [pc, #96]	@ (8011f0c <dhcp_inc_pcb_refcount+0x8c>)
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d102      	bne.n	8011eb8 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8011eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8011eb6:	e024      	b.n	8011f02 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8011eb8:	4b14      	ldr	r3, [pc, #80]	@ (8011f0c <dhcp_inc_pcb_refcount+0x8c>)
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	7a5a      	ldrb	r2, [r3, #9]
 8011ebe:	4b13      	ldr	r3, [pc, #76]	@ (8011f0c <dhcp_inc_pcb_refcount+0x8c>)
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	f042 0220 	orr.w	r2, r2, #32
 8011ec6:	b2d2      	uxtb	r2, r2
 8011ec8:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8011eca:	4b10      	ldr	r3, [pc, #64]	@ (8011f0c <dhcp_inc_pcb_refcount+0x8c>)
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	2244      	movs	r2, #68	@ 0x44
 8011ed0:	4912      	ldr	r1, [pc, #72]	@ (8011f1c <dhcp_inc_pcb_refcount+0x9c>)
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	f7ff fe32 	bl	8011b3c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8011ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8011f0c <dhcp_inc_pcb_refcount+0x8c>)
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	2243      	movs	r2, #67	@ 0x43
 8011ede:	490f      	ldr	r1, [pc, #60]	@ (8011f1c <dhcp_inc_pcb_refcount+0x9c>)
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	f7ff feb3 	bl	8011c4c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8011ee6:	4b09      	ldr	r3, [pc, #36]	@ (8011f0c <dhcp_inc_pcb_refcount+0x8c>)
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	2200      	movs	r2, #0
 8011eec:	490c      	ldr	r1, [pc, #48]	@ (8011f20 <dhcp_inc_pcb_refcount+0xa0>)
 8011eee:	4618      	mov	r0, r3
 8011ef0:	f7ff ff1a 	bl	8011d28 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8011ef4:	4b04      	ldr	r3, [pc, #16]	@ (8011f08 <dhcp_inc_pcb_refcount+0x88>)
 8011ef6:	781b      	ldrb	r3, [r3, #0]
 8011ef8:	3301      	adds	r3, #1
 8011efa:	b2da      	uxtb	r2, r3
 8011efc:	4b02      	ldr	r3, [pc, #8]	@ (8011f08 <dhcp_inc_pcb_refcount+0x88>)
 8011efe:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8011f00:	2300      	movs	r3, #0
}
 8011f02:	4618      	mov	r0, r3
 8011f04:	bd80      	pop	{r7, pc}
 8011f06:	bf00      	nop
 8011f08:	2000cb48 	.word	0x2000cb48
 8011f0c:	2000cb44 	.word	0x2000cb44
 8011f10:	0801a770 	.word	0x0801a770
 8011f14:	0801a7a8 	.word	0x0801a7a8
 8011f18:	0801a7d0 	.word	0x0801a7d0
 8011f1c:	0801b6ac 	.word	0x0801b6ac
 8011f20:	080138ad 	.word	0x080138ad

08011f24 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8011f24:	b580      	push	{r7, lr}
 8011f26:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8011f28:	4b0e      	ldr	r3, [pc, #56]	@ (8011f64 <dhcp_dec_pcb_refcount+0x40>)
 8011f2a:	781b      	ldrb	r3, [r3, #0]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d105      	bne.n	8011f3c <dhcp_dec_pcb_refcount+0x18>
 8011f30:	4b0d      	ldr	r3, [pc, #52]	@ (8011f68 <dhcp_dec_pcb_refcount+0x44>)
 8011f32:	22ff      	movs	r2, #255	@ 0xff
 8011f34:	490d      	ldr	r1, [pc, #52]	@ (8011f6c <dhcp_dec_pcb_refcount+0x48>)
 8011f36:	480e      	ldr	r0, [pc, #56]	@ (8011f70 <dhcp_dec_pcb_refcount+0x4c>)
 8011f38:	f004 ffa4 	bl	8016e84 <iprintf>
  dhcp_pcb_refcount--;
 8011f3c:	4b09      	ldr	r3, [pc, #36]	@ (8011f64 <dhcp_dec_pcb_refcount+0x40>)
 8011f3e:	781b      	ldrb	r3, [r3, #0]
 8011f40:	3b01      	subs	r3, #1
 8011f42:	b2da      	uxtb	r2, r3
 8011f44:	4b07      	ldr	r3, [pc, #28]	@ (8011f64 <dhcp_dec_pcb_refcount+0x40>)
 8011f46:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8011f48:	4b06      	ldr	r3, [pc, #24]	@ (8011f64 <dhcp_dec_pcb_refcount+0x40>)
 8011f4a:	781b      	ldrb	r3, [r3, #0]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d107      	bne.n	8011f60 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8011f50:	4b08      	ldr	r3, [pc, #32]	@ (8011f74 <dhcp_dec_pcb_refcount+0x50>)
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	4618      	mov	r0, r3
 8011f56:	f7ff ff07 	bl	8011d68 <udp_remove>
    dhcp_pcb = NULL;
 8011f5a:	4b06      	ldr	r3, [pc, #24]	@ (8011f74 <dhcp_dec_pcb_refcount+0x50>)
 8011f5c:	2200      	movs	r2, #0
 8011f5e:	601a      	str	r2, [r3, #0]
  }
}
 8011f60:	bf00      	nop
 8011f62:	bd80      	pop	{r7, pc}
 8011f64:	2000cb48 	.word	0x2000cb48
 8011f68:	0801a770 	.word	0x0801a770
 8011f6c:	0801a7f8 	.word	0x0801a7f8
 8011f70:	0801a7d0 	.word	0x0801a7d0
 8011f74:	2000cb44 	.word	0x2000cb44

08011f78 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b084      	sub	sp, #16
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f84:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8011f86:	210c      	movs	r1, #12
 8011f88:	68f8      	ldr	r0, [r7, #12]
 8011f8a:	f001 f875 	bl	8013078 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8011f8e:	4b06      	ldr	r3, [pc, #24]	@ (8011fa8 <dhcp_handle_nak+0x30>)
 8011f90:	4a05      	ldr	r2, [pc, #20]	@ (8011fa8 <dhcp_handle_nak+0x30>)
 8011f92:	4905      	ldr	r1, [pc, #20]	@ (8011fa8 <dhcp_handle_nak+0x30>)
 8011f94:	6878      	ldr	r0, [r7, #4]
 8011f96:	f7f8 ff69 	bl	800ae6c <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8011f9a:	6878      	ldr	r0, [r7, #4]
 8011f9c:	f000 fc50 	bl	8012840 <dhcp_discover>
}
 8011fa0:	bf00      	nop
 8011fa2:	3710      	adds	r7, #16
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	bd80      	pop	{r7, pc}
 8011fa8:	0801b6ac 	.word	0x0801b6ac

08011fac <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8011fac:	b580      	push	{r7, lr}
 8011fae:	b084      	sub	sp, #16
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011fb8:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8011fba:	2108      	movs	r1, #8
 8011fbc:	68f8      	ldr	r0, [r7, #12]
 8011fbe:	f001 f85b 	bl	8013078 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	331c      	adds	r3, #28
 8011fc6:	2200      	movs	r2, #0
 8011fc8:	4619      	mov	r1, r3
 8011fca:	6878      	ldr	r0, [r7, #4]
 8011fcc:	f002 fbb8 	bl	8014740 <etharp_query>
 8011fd0:	4603      	mov	r3, r0
 8011fd2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	799b      	ldrb	r3, [r3, #6]
 8011fd8:	2bff      	cmp	r3, #255	@ 0xff
 8011fda:	d005      	beq.n	8011fe8 <dhcp_check+0x3c>
    dhcp->tries++;
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	799b      	ldrb	r3, [r3, #6]
 8011fe0:	3301      	adds	r3, #1
 8011fe2:	b2da      	uxtb	r2, r3
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8011fe8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8011fec:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011fee:	893b      	ldrh	r3, [r7, #8]
 8011ff0:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8011ff4:	4a06      	ldr	r2, [pc, #24]	@ (8012010 <dhcp_check+0x64>)
 8011ff6:	fb82 1203 	smull	r1, r2, r2, r3
 8011ffa:	1152      	asrs	r2, r2, #5
 8011ffc:	17db      	asrs	r3, r3, #31
 8011ffe:	1ad3      	subs	r3, r2, r3
 8012000:	b29a      	uxth	r2, r3
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8012006:	bf00      	nop
 8012008:	3710      	adds	r7, #16
 801200a:	46bd      	mov	sp, r7
 801200c:	bd80      	pop	{r7, pc}
 801200e:	bf00      	nop
 8012010:	10624dd3 	.word	0x10624dd3

08012014 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8012014:	b580      	push	{r7, lr}
 8012016:	b084      	sub	sp, #16
 8012018:	af00      	add	r7, sp, #0
 801201a:	6078      	str	r0, [r7, #4]
 801201c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012022:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8012024:	4b0c      	ldr	r3, [pc, #48]	@ (8012058 <dhcp_handle_offer+0x44>)
 8012026:	789b      	ldrb	r3, [r3, #2]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d011      	beq.n	8012050 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	2200      	movs	r2, #0
 8012030:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8012032:	4b0a      	ldr	r3, [pc, #40]	@ (801205c <dhcp_handle_offer+0x48>)
 8012034:	689b      	ldr	r3, [r3, #8]
 8012036:	4618      	mov	r0, r3
 8012038:	f7f7 ff8d 	bl	8009f56 <lwip_htonl>
 801203c:	4602      	mov	r2, r0
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8012042:	683b      	ldr	r3, [r7, #0]
 8012044:	691a      	ldr	r2, [r3, #16]
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801204a:	6878      	ldr	r0, [r7, #4]
 801204c:	f000 f808 	bl	8012060 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8012050:	bf00      	nop
 8012052:	3710      	adds	r7, #16
 8012054:	46bd      	mov	sp, r7
 8012056:	bd80      	pop	{r7, pc}
 8012058:	2000cb3c 	.word	0x2000cb3c
 801205c:	2000cb1c 	.word	0x2000cb1c

08012060 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8012060:	b5b0      	push	{r4, r5, r7, lr}
 8012062:	b08a      	sub	sp, #40	@ 0x28
 8012064:	af02      	add	r7, sp, #8
 8012066:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d109      	bne.n	8012082 <dhcp_select+0x22>
 801206e:	4b75      	ldr	r3, [pc, #468]	@ (8012244 <dhcp_select+0x1e4>)
 8012070:	f240 1277 	movw	r2, #375	@ 0x177
 8012074:	4974      	ldr	r1, [pc, #464]	@ (8012248 <dhcp_select+0x1e8>)
 8012076:	4875      	ldr	r0, [pc, #468]	@ (801224c <dhcp_select+0x1ec>)
 8012078:	f004 ff04 	bl	8016e84 <iprintf>
 801207c:	f06f 030f 	mvn.w	r3, #15
 8012080:	e0dc      	b.n	801223c <dhcp_select+0x1dc>
  dhcp = netif_dhcp_data(netif);
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012086:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8012088:	69bb      	ldr	r3, [r7, #24]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d109      	bne.n	80120a2 <dhcp_select+0x42>
 801208e:	4b6d      	ldr	r3, [pc, #436]	@ (8012244 <dhcp_select+0x1e4>)
 8012090:	f240 1279 	movw	r2, #377	@ 0x179
 8012094:	496e      	ldr	r1, [pc, #440]	@ (8012250 <dhcp_select+0x1f0>)
 8012096:	486d      	ldr	r0, [pc, #436]	@ (801224c <dhcp_select+0x1ec>)
 8012098:	f004 fef4 	bl	8016e84 <iprintf>
 801209c:	f06f 0305 	mvn.w	r3, #5
 80120a0:	e0cc      	b.n	801223c <dhcp_select+0x1dc>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80120a2:	2101      	movs	r1, #1
 80120a4:	69b8      	ldr	r0, [r7, #24]
 80120a6:	f000 ffe7 	bl	8013078 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80120aa:	f107 030c 	add.w	r3, r7, #12
 80120ae:	2203      	movs	r2, #3
 80120b0:	69b9      	ldr	r1, [r7, #24]
 80120b2:	6878      	ldr	r0, [r7, #4]
 80120b4:	f001 fcc8 	bl	8013a48 <dhcp_create_msg>
 80120b8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80120ba:	697b      	ldr	r3, [r7, #20]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	f000 808e 	beq.w	80121de <dhcp_select+0x17e>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80120c2:	697b      	ldr	r3, [r7, #20]
 80120c4:	685b      	ldr	r3, [r3, #4]
 80120c6:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80120c8:	89b8      	ldrh	r0, [r7, #12]
 80120ca:	693b      	ldr	r3, [r7, #16]
 80120cc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80120d0:	2302      	movs	r3, #2
 80120d2:	2239      	movs	r2, #57	@ 0x39
 80120d4:	f000 ffea 	bl	80130ac <dhcp_option>
 80120d8:	4603      	mov	r3, r0
 80120da:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80120dc:	89b8      	ldrh	r0, [r7, #12]
 80120de:	693b      	ldr	r3, [r7, #16]
 80120e0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80120e8:	461a      	mov	r2, r3
 80120ea:	f001 f839 	bl	8013160 <dhcp_option_short>
 80120ee:	4603      	mov	r3, r0
 80120f0:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80120f2:	89b8      	ldrh	r0, [r7, #12]
 80120f4:	693b      	ldr	r3, [r7, #16]
 80120f6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80120fa:	2304      	movs	r3, #4
 80120fc:	2232      	movs	r2, #50	@ 0x32
 80120fe:	f000 ffd5 	bl	80130ac <dhcp_option>
 8012102:	4603      	mov	r3, r0
 8012104:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012106:	89bc      	ldrh	r4, [r7, #12]
 8012108:	693b      	ldr	r3, [r7, #16]
 801210a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801210e:	69bb      	ldr	r3, [r7, #24]
 8012110:	69db      	ldr	r3, [r3, #28]
 8012112:	4618      	mov	r0, r3
 8012114:	f7f7 ff1f 	bl	8009f56 <lwip_htonl>
 8012118:	4603      	mov	r3, r0
 801211a:	461a      	mov	r2, r3
 801211c:	4629      	mov	r1, r5
 801211e:	4620      	mov	r0, r4
 8012120:	f001 f850 	bl	80131c4 <dhcp_option_long>
 8012124:	4603      	mov	r3, r0
 8012126:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8012128:	89b8      	ldrh	r0, [r7, #12]
 801212a:	693b      	ldr	r3, [r7, #16]
 801212c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012130:	2304      	movs	r3, #4
 8012132:	2236      	movs	r2, #54	@ 0x36
 8012134:	f000 ffba 	bl	80130ac <dhcp_option>
 8012138:	4603      	mov	r3, r0
 801213a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801213c:	89bc      	ldrh	r4, [r7, #12]
 801213e:	693b      	ldr	r3, [r7, #16]
 8012140:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8012144:	69bb      	ldr	r3, [r7, #24]
 8012146:	699b      	ldr	r3, [r3, #24]
 8012148:	4618      	mov	r0, r3
 801214a:	f7f7 ff04 	bl	8009f56 <lwip_htonl>
 801214e:	4603      	mov	r3, r0
 8012150:	461a      	mov	r2, r3
 8012152:	4629      	mov	r1, r5
 8012154:	4620      	mov	r0, r4
 8012156:	f001 f835 	bl	80131c4 <dhcp_option_long>
 801215a:	4603      	mov	r3, r0
 801215c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801215e:	89b8      	ldrh	r0, [r7, #12]
 8012160:	693b      	ldr	r3, [r7, #16]
 8012162:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012166:	2303      	movs	r3, #3
 8012168:	2237      	movs	r2, #55	@ 0x37
 801216a:	f000 ff9f 	bl	80130ac <dhcp_option>
 801216e:	4603      	mov	r3, r0
 8012170:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012172:	2300      	movs	r3, #0
 8012174:	77bb      	strb	r3, [r7, #30]
 8012176:	e00e      	b.n	8012196 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012178:	89b8      	ldrh	r0, [r7, #12]
 801217a:	693b      	ldr	r3, [r7, #16]
 801217c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012180:	7fbb      	ldrb	r3, [r7, #30]
 8012182:	4a34      	ldr	r2, [pc, #208]	@ (8012254 <dhcp_select+0x1f4>)
 8012184:	5cd3      	ldrb	r3, [r2, r3]
 8012186:	461a      	mov	r2, r3
 8012188:	f000 ffc4 	bl	8013114 <dhcp_option_byte>
 801218c:	4603      	mov	r3, r0
 801218e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012190:	7fbb      	ldrb	r3, [r7, #30]
 8012192:	3301      	adds	r3, #1
 8012194:	77bb      	strb	r3, [r7, #30]
 8012196:	7fbb      	ldrb	r3, [r7, #30]
 8012198:	2b02      	cmp	r3, #2
 801219a:	d9ed      	bls.n	8012178 <dhcp_select+0x118>
    }

#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
 801219c:	89b8      	ldrh	r0, [r7, #12]
 801219e:	693b      	ldr	r3, [r7, #16]
 80121a0:	33f0      	adds	r3, #240	@ 0xf0
 80121a2:	687a      	ldr	r2, [r7, #4]
 80121a4:	4619      	mov	r1, r3
 80121a6:	f001 f851 	bl	801324c <dhcp_option_hostname>
 80121aa:	4603      	mov	r3, r0
 80121ac:	81bb      	strh	r3, [r7, #12]
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80121ae:	89b8      	ldrh	r0, [r7, #12]
 80121b0:	693b      	ldr	r3, [r7, #16]
 80121b2:	33f0      	adds	r3, #240	@ 0xf0
 80121b4:	697a      	ldr	r2, [r7, #20]
 80121b6:	4619      	mov	r1, r3
 80121b8:	f001 fd1c 	bl	8013bf4 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80121bc:	4b26      	ldr	r3, [pc, #152]	@ (8012258 <dhcp_select+0x1f8>)
 80121be:	6818      	ldr	r0, [r3, #0]
 80121c0:	4b26      	ldr	r3, [pc, #152]	@ (801225c <dhcp_select+0x1fc>)
 80121c2:	9301      	str	r3, [sp, #4]
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	9300      	str	r3, [sp, #0]
 80121c8:	2343      	movs	r3, #67	@ 0x43
 80121ca:	4a25      	ldr	r2, [pc, #148]	@ (8012260 <dhcp_select+0x200>)
 80121cc:	6979      	ldr	r1, [r7, #20]
 80121ce:	f7ff fbb3 	bl	8011938 <udp_sendto_if_src>
 80121d2:	4603      	mov	r3, r0
 80121d4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80121d6:	6978      	ldr	r0, [r7, #20]
 80121d8:	f7f9 fbfc 	bl	800b9d4 <pbuf_free>
 80121dc:	e001      	b.n	80121e2 <dhcp_select+0x182>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80121de:	23ff      	movs	r3, #255	@ 0xff
 80121e0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80121e2:	69bb      	ldr	r3, [r7, #24]
 80121e4:	799b      	ldrb	r3, [r3, #6]
 80121e6:	2bff      	cmp	r3, #255	@ 0xff
 80121e8:	d005      	beq.n	80121f6 <dhcp_select+0x196>
    dhcp->tries++;
 80121ea:	69bb      	ldr	r3, [r7, #24]
 80121ec:	799b      	ldrb	r3, [r3, #6]
 80121ee:	3301      	adds	r3, #1
 80121f0:	b2da      	uxtb	r2, r3
 80121f2:	69bb      	ldr	r3, [r7, #24]
 80121f4:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80121f6:	69bb      	ldr	r3, [r7, #24]
 80121f8:	799b      	ldrb	r3, [r3, #6]
 80121fa:	2b05      	cmp	r3, #5
 80121fc:	d80d      	bhi.n	801221a <dhcp_select+0x1ba>
 80121fe:	69bb      	ldr	r3, [r7, #24]
 8012200:	799b      	ldrb	r3, [r3, #6]
 8012202:	461a      	mov	r2, r3
 8012204:	2301      	movs	r3, #1
 8012206:	4093      	lsls	r3, r2
 8012208:	b29b      	uxth	r3, r3
 801220a:	461a      	mov	r2, r3
 801220c:	0152      	lsls	r2, r2, #5
 801220e:	1ad2      	subs	r2, r2, r3
 8012210:	0092      	lsls	r2, r2, #2
 8012212:	4413      	add	r3, r2
 8012214:	00db      	lsls	r3, r3, #3
 8012216:	b29b      	uxth	r3, r3
 8012218:	e001      	b.n	801221e <dhcp_select+0x1be>
 801221a:	f64e 2360 	movw	r3, #60000	@ 0xea60
 801221e:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012220:	89fb      	ldrh	r3, [r7, #14]
 8012222:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8012226:	4a0f      	ldr	r2, [pc, #60]	@ (8012264 <dhcp_select+0x204>)
 8012228:	fb82 1203 	smull	r1, r2, r2, r3
 801222c:	1152      	asrs	r2, r2, #5
 801222e:	17db      	asrs	r3, r3, #31
 8012230:	1ad3      	subs	r3, r2, r3
 8012232:	b29a      	uxth	r2, r3
 8012234:	69bb      	ldr	r3, [r7, #24]
 8012236:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012238:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801223c:	4618      	mov	r0, r3
 801223e:	3720      	adds	r7, #32
 8012240:	46bd      	mov	sp, r7
 8012242:	bdb0      	pop	{r4, r5, r7, pc}
 8012244:	0801a770 	.word	0x0801a770
 8012248:	0801a81c 	.word	0x0801a81c
 801224c:	0801a7d0 	.word	0x0801a7d0
 8012250:	0801a838 	.word	0x0801a838
 8012254:	20000034 	.word	0x20000034
 8012258:	2000cb44 	.word	0x2000cb44
 801225c:	0801b6ac 	.word	0x0801b6ac
 8012260:	0801b6b0 	.word	0x0801b6b0
 8012264:	10624dd3 	.word	0x10624dd3

08012268 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8012268:	b580      	push	{r7, lr}
 801226a:	b082      	sub	sp, #8
 801226c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801226e:	4b27      	ldr	r3, [pc, #156]	@ (801230c <dhcp_coarse_tmr+0xa4>)
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	607b      	str	r3, [r7, #4]
 8012274:	e042      	b.n	80122fc <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801227a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801227c:	683b      	ldr	r3, [r7, #0]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d039      	beq.n	80122f6 <dhcp_coarse_tmr+0x8e>
 8012282:	683b      	ldr	r3, [r7, #0]
 8012284:	795b      	ldrb	r3, [r3, #5]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d035      	beq.n	80122f6 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801228a:	683b      	ldr	r3, [r7, #0]
 801228c:	8a9b      	ldrh	r3, [r3, #20]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d012      	beq.n	80122b8 <dhcp_coarse_tmr+0x50>
 8012292:	683b      	ldr	r3, [r7, #0]
 8012294:	8a5b      	ldrh	r3, [r3, #18]
 8012296:	3301      	adds	r3, #1
 8012298:	b29a      	uxth	r2, r3
 801229a:	683b      	ldr	r3, [r7, #0]
 801229c:	825a      	strh	r2, [r3, #18]
 801229e:	683b      	ldr	r3, [r7, #0]
 80122a0:	8a5a      	ldrh	r2, [r3, #18]
 80122a2:	683b      	ldr	r3, [r7, #0]
 80122a4:	8a9b      	ldrh	r3, [r3, #20]
 80122a6:	429a      	cmp	r2, r3
 80122a8:	d106      	bne.n	80122b8 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80122aa:	6878      	ldr	r0, [r7, #4]
 80122ac:	f000 fe4a 	bl	8012f44 <dhcp_release_and_stop>
        dhcp_start(netif);
 80122b0:	6878      	ldr	r0, [r7, #4]
 80122b2:	f000 f969 	bl	8012588 <dhcp_start>
 80122b6:	e01e      	b.n	80122f6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80122b8:	683b      	ldr	r3, [r7, #0]
 80122ba:	8a1b      	ldrh	r3, [r3, #16]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d00b      	beq.n	80122d8 <dhcp_coarse_tmr+0x70>
 80122c0:	683b      	ldr	r3, [r7, #0]
 80122c2:	8a1b      	ldrh	r3, [r3, #16]
 80122c4:	1e5a      	subs	r2, r3, #1
 80122c6:	b291      	uxth	r1, r2
 80122c8:	683a      	ldr	r2, [r7, #0]
 80122ca:	8211      	strh	r1, [r2, #16]
 80122cc:	2b01      	cmp	r3, #1
 80122ce:	d103      	bne.n	80122d8 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80122d0:	6878      	ldr	r0, [r7, #4]
 80122d2:	f000 f8c6 	bl	8012462 <dhcp_t2_timeout>
 80122d6:	e00e      	b.n	80122f6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80122d8:	683b      	ldr	r3, [r7, #0]
 80122da:	89db      	ldrh	r3, [r3, #14]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d00a      	beq.n	80122f6 <dhcp_coarse_tmr+0x8e>
 80122e0:	683b      	ldr	r3, [r7, #0]
 80122e2:	89db      	ldrh	r3, [r3, #14]
 80122e4:	1e5a      	subs	r2, r3, #1
 80122e6:	b291      	uxth	r1, r2
 80122e8:	683a      	ldr	r2, [r7, #0]
 80122ea:	81d1      	strh	r1, [r2, #14]
 80122ec:	2b01      	cmp	r3, #1
 80122ee:	d102      	bne.n	80122f6 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80122f0:	6878      	ldr	r0, [r7, #4]
 80122f2:	f000 f888 	bl	8012406 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	607b      	str	r3, [r7, #4]
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d1b9      	bne.n	8012276 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8012302:	bf00      	nop
 8012304:	bf00      	nop
 8012306:	3708      	adds	r7, #8
 8012308:	46bd      	mov	sp, r7
 801230a:	bd80      	pop	{r7, pc}
 801230c:	2000cab0 	.word	0x2000cab0

08012310 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8012310:	b580      	push	{r7, lr}
 8012312:	b082      	sub	sp, #8
 8012314:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8012316:	4b16      	ldr	r3, [pc, #88]	@ (8012370 <dhcp_fine_tmr+0x60>)
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	607b      	str	r3, [r7, #4]
 801231c:	e020      	b.n	8012360 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012322:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8012324:	683b      	ldr	r3, [r7, #0]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d017      	beq.n	801235a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801232a:	683b      	ldr	r3, [r7, #0]
 801232c:	891b      	ldrh	r3, [r3, #8]
 801232e:	2b01      	cmp	r3, #1
 8012330:	d906      	bls.n	8012340 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8012332:	683b      	ldr	r3, [r7, #0]
 8012334:	891b      	ldrh	r3, [r3, #8]
 8012336:	3b01      	subs	r3, #1
 8012338:	b29a      	uxth	r2, r3
 801233a:	683b      	ldr	r3, [r7, #0]
 801233c:	811a      	strh	r2, [r3, #8]
 801233e:	e00c      	b.n	801235a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8012340:	683b      	ldr	r3, [r7, #0]
 8012342:	891b      	ldrh	r3, [r3, #8]
 8012344:	2b01      	cmp	r3, #1
 8012346:	d108      	bne.n	801235a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8012348:	683b      	ldr	r3, [r7, #0]
 801234a:	891b      	ldrh	r3, [r3, #8]
 801234c:	3b01      	subs	r3, #1
 801234e:	b29a      	uxth	r2, r3
 8012350:	683b      	ldr	r3, [r7, #0]
 8012352:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8012354:	6878      	ldr	r0, [r7, #4]
 8012356:	f000 f80d 	bl	8012374 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	607b      	str	r3, [r7, #4]
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d1db      	bne.n	801231e <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8012366:	bf00      	nop
 8012368:	bf00      	nop
 801236a:	3708      	adds	r7, #8
 801236c:	46bd      	mov	sp, r7
 801236e:	bd80      	pop	{r7, pc}
 8012370:	2000cab0 	.word	0x2000cab0

08012374 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8012374:	b580      	push	{r7, lr}
 8012376:	b084      	sub	sp, #16
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012380:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	795b      	ldrb	r3, [r3, #5]
 8012386:	2b0c      	cmp	r3, #12
 8012388:	d003      	beq.n	8012392 <dhcp_timeout+0x1e>
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	795b      	ldrb	r3, [r3, #5]
 801238e:	2b06      	cmp	r3, #6
 8012390:	d103      	bne.n	801239a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8012392:	6878      	ldr	r0, [r7, #4]
 8012394:	f000 fa54 	bl	8012840 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8012398:	e031      	b.n	80123fe <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	795b      	ldrb	r3, [r3, #5]
 801239e:	2b01      	cmp	r3, #1
 80123a0:	d10e      	bne.n	80123c0 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	799b      	ldrb	r3, [r3, #6]
 80123a6:	2b05      	cmp	r3, #5
 80123a8:	d803      	bhi.n	80123b2 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80123aa:	6878      	ldr	r0, [r7, #4]
 80123ac:	f7ff fe58 	bl	8012060 <dhcp_select>
}
 80123b0:	e025      	b.n	80123fe <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 80123b2:	6878      	ldr	r0, [r7, #4]
 80123b4:	f000 fdc6 	bl	8012f44 <dhcp_release_and_stop>
      dhcp_start(netif);
 80123b8:	6878      	ldr	r0, [r7, #4]
 80123ba:	f000 f8e5 	bl	8012588 <dhcp_start>
}
 80123be:	e01e      	b.n	80123fe <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	795b      	ldrb	r3, [r3, #5]
 80123c4:	2b08      	cmp	r3, #8
 80123c6:	d10b      	bne.n	80123e0 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	799b      	ldrb	r3, [r3, #6]
 80123cc:	2b01      	cmp	r3, #1
 80123ce:	d803      	bhi.n	80123d8 <dhcp_timeout+0x64>
      dhcp_check(netif);
 80123d0:	6878      	ldr	r0, [r7, #4]
 80123d2:	f7ff fdeb 	bl	8011fac <dhcp_check>
}
 80123d6:	e012      	b.n	80123fe <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80123d8:	6878      	ldr	r0, [r7, #4]
 80123da:	f000 fad3 	bl	8012984 <dhcp_bind>
}
 80123de:	e00e      	b.n	80123fe <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	795b      	ldrb	r3, [r3, #5]
 80123e4:	2b03      	cmp	r3, #3
 80123e6:	d10a      	bne.n	80123fe <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	799b      	ldrb	r3, [r3, #6]
 80123ec:	2b01      	cmp	r3, #1
 80123ee:	d803      	bhi.n	80123f8 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80123f0:	6878      	ldr	r0, [r7, #4]
 80123f2:	f000 fce9 	bl	8012dc8 <dhcp_reboot>
}
 80123f6:	e002      	b.n	80123fe <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80123f8:	6878      	ldr	r0, [r7, #4]
 80123fa:	f000 fa21 	bl	8012840 <dhcp_discover>
}
 80123fe:	bf00      	nop
 8012400:	3710      	adds	r7, #16
 8012402:	46bd      	mov	sp, r7
 8012404:	bd80      	pop	{r7, pc}

08012406 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8012406:	b580      	push	{r7, lr}
 8012408:	b084      	sub	sp, #16
 801240a:	af00      	add	r7, sp, #0
 801240c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012412:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	795b      	ldrb	r3, [r3, #5]
 8012418:	2b01      	cmp	r3, #1
 801241a:	d007      	beq.n	801242c <dhcp_t1_timeout+0x26>
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	795b      	ldrb	r3, [r3, #5]
 8012420:	2b0a      	cmp	r3, #10
 8012422:	d003      	beq.n	801242c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012428:	2b05      	cmp	r3, #5
 801242a:	d116      	bne.n	801245a <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801242c:	6878      	ldr	r0, [r7, #4]
 801242e:	f000 fb83 	bl	8012b38 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	899b      	ldrh	r3, [r3, #12]
 8012436:	461a      	mov	r2, r3
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	8a5b      	ldrh	r3, [r3, #18]
 801243c:	1ad3      	subs	r3, r2, r3
 801243e:	2b01      	cmp	r3, #1
 8012440:	dd0b      	ble.n	801245a <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	899b      	ldrh	r3, [r3, #12]
 8012446:	461a      	mov	r2, r3
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	8a5b      	ldrh	r3, [r3, #18]
 801244c:	1ad3      	subs	r3, r2, r3
 801244e:	0fda      	lsrs	r2, r3, #31
 8012450:	4413      	add	r3, r2
 8012452:	105b      	asrs	r3, r3, #1
 8012454:	b29a      	uxth	r2, r3
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801245a:	bf00      	nop
 801245c:	3710      	adds	r7, #16
 801245e:	46bd      	mov	sp, r7
 8012460:	bd80      	pop	{r7, pc}

08012462 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8012462:	b580      	push	{r7, lr}
 8012464:	b084      	sub	sp, #16
 8012466:	af00      	add	r7, sp, #0
 8012468:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801246e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	795b      	ldrb	r3, [r3, #5]
 8012474:	2b01      	cmp	r3, #1
 8012476:	d00b      	beq.n	8012490 <dhcp_t2_timeout+0x2e>
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	795b      	ldrb	r3, [r3, #5]
 801247c:	2b0a      	cmp	r3, #10
 801247e:	d007      	beq.n	8012490 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012484:	2b05      	cmp	r3, #5
 8012486:	d003      	beq.n	8012490 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	795b      	ldrb	r3, [r3, #5]
 801248c:	2b04      	cmp	r3, #4
 801248e:	d116      	bne.n	80124be <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8012490:	6878      	ldr	r0, [r7, #4]
 8012492:	f000 fbf5 	bl	8012c80 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	8a9b      	ldrh	r3, [r3, #20]
 801249a:	461a      	mov	r2, r3
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	8a5b      	ldrh	r3, [r3, #18]
 80124a0:	1ad3      	subs	r3, r2, r3
 80124a2:	2b01      	cmp	r3, #1
 80124a4:	dd0b      	ble.n	80124be <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	8a9b      	ldrh	r3, [r3, #20]
 80124aa:	461a      	mov	r2, r3
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	8a5b      	ldrh	r3, [r3, #18]
 80124b0:	1ad3      	subs	r3, r2, r3
 80124b2:	0fda      	lsrs	r2, r3, #31
 80124b4:	4413      	add	r3, r2
 80124b6:	105b      	asrs	r3, r3, #1
 80124b8:	b29a      	uxth	r2, r3
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80124be:	bf00      	nop
 80124c0:	3710      	adds	r7, #16
 80124c2:	46bd      	mov	sp, r7
 80124c4:	bd80      	pop	{r7, pc}
	...

080124c8 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b084      	sub	sp, #16
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	6078      	str	r0, [r7, #4]
 80124d0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80124d6:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	2200      	movs	r2, #0
 80124dc:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	2200      	movs	r2, #0
 80124e2:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80124e4:	4b26      	ldr	r3, [pc, #152]	@ (8012580 <dhcp_handle_ack+0xb8>)
 80124e6:	78db      	ldrb	r3, [r3, #3]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d003      	beq.n	80124f4 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80124ec:	4b25      	ldr	r3, [pc, #148]	@ (8012584 <dhcp_handle_ack+0xbc>)
 80124ee:	68da      	ldr	r2, [r3, #12]
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80124f4:	4b22      	ldr	r3, [pc, #136]	@ (8012580 <dhcp_handle_ack+0xb8>)
 80124f6:	791b      	ldrb	r3, [r3, #4]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d004      	beq.n	8012506 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80124fc:	4b21      	ldr	r3, [pc, #132]	@ (8012584 <dhcp_handle_ack+0xbc>)
 80124fe:	691a      	ldr	r2, [r3, #16]
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012504:	e004      	b.n	8012510 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801250a:	085a      	lsrs	r2, r3, #1
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8012510:	4b1b      	ldr	r3, [pc, #108]	@ (8012580 <dhcp_handle_ack+0xb8>)
 8012512:	795b      	ldrb	r3, [r3, #5]
 8012514:	2b00      	cmp	r3, #0
 8012516:	d004      	beq.n	8012522 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8012518:	4b1a      	ldr	r3, [pc, #104]	@ (8012584 <dhcp_handle_ack+0xbc>)
 801251a:	695a      	ldr	r2, [r3, #20]
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	631a      	str	r2, [r3, #48]	@ 0x30
 8012520:	e007      	b.n	8012532 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012526:	4613      	mov	r3, r2
 8012528:	00db      	lsls	r3, r3, #3
 801252a:	1a9b      	subs	r3, r3, r2
 801252c:	08da      	lsrs	r2, r3, #3
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8012532:	683b      	ldr	r3, [r7, #0]
 8012534:	691a      	ldr	r2, [r3, #16]
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801253a:	4b11      	ldr	r3, [pc, #68]	@ (8012580 <dhcp_handle_ack+0xb8>)
 801253c:	799b      	ldrb	r3, [r3, #6]
 801253e:	2b00      	cmp	r3, #0
 8012540:	d00b      	beq.n	801255a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8012542:	4b10      	ldr	r3, [pc, #64]	@ (8012584 <dhcp_handle_ack+0xbc>)
 8012544:	699b      	ldr	r3, [r3, #24]
 8012546:	4618      	mov	r0, r3
 8012548:	f7f7 fd05 	bl	8009f56 <lwip_htonl>
 801254c:	4602      	mov	r2, r0
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	2201      	movs	r2, #1
 8012556:	71da      	strb	r2, [r3, #7]
 8012558:	e002      	b.n	8012560 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	2200      	movs	r2, #0
 801255e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8012560:	4b07      	ldr	r3, [pc, #28]	@ (8012580 <dhcp_handle_ack+0xb8>)
 8012562:	79db      	ldrb	r3, [r3, #7]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d007      	beq.n	8012578 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8012568:	4b06      	ldr	r3, [pc, #24]	@ (8012584 <dhcp_handle_ack+0xbc>)
 801256a:	69db      	ldr	r3, [r3, #28]
 801256c:	4618      	mov	r0, r3
 801256e:	f7f7 fcf2 	bl	8009f56 <lwip_htonl>
 8012572:	4602      	mov	r2, r0
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8012578:	bf00      	nop
 801257a:	3710      	adds	r7, #16
 801257c:	46bd      	mov	sp, r7
 801257e:	bd80      	pop	{r7, pc}
 8012580:	2000cb3c 	.word	0x2000cb3c
 8012584:	2000cb1c 	.word	0x2000cb1c

08012588 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8012588:	b580      	push	{r7, lr}
 801258a:	b084      	sub	sp, #16
 801258c:	af00      	add	r7, sp, #0
 801258e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d109      	bne.n	80125aa <dhcp_start+0x22>
 8012596:	4b37      	ldr	r3, [pc, #220]	@ (8012674 <dhcp_start+0xec>)
 8012598:	f240 22e7 	movw	r2, #743	@ 0x2e7
 801259c:	4936      	ldr	r1, [pc, #216]	@ (8012678 <dhcp_start+0xf0>)
 801259e:	4837      	ldr	r0, [pc, #220]	@ (801267c <dhcp_start+0xf4>)
 80125a0:	f004 fc70 	bl	8016e84 <iprintf>
 80125a4:	f06f 030f 	mvn.w	r3, #15
 80125a8:	e060      	b.n	801266c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80125b0:	f003 0301 	and.w	r3, r3, #1
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d109      	bne.n	80125cc <dhcp_start+0x44>
 80125b8:	4b2e      	ldr	r3, [pc, #184]	@ (8012674 <dhcp_start+0xec>)
 80125ba:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 80125be:	4930      	ldr	r1, [pc, #192]	@ (8012680 <dhcp_start+0xf8>)
 80125c0:	482e      	ldr	r0, [pc, #184]	@ (801267c <dhcp_start+0xf4>)
 80125c2:	f004 fc5f 	bl	8016e84 <iprintf>
 80125c6:	f06f 030f 	mvn.w	r3, #15
 80125ca:	e04f      	b.n	801266c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80125d0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80125d6:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 80125da:	d202      	bcs.n	80125e2 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80125dc:	f04f 33ff 	mov.w	r3, #4294967295
 80125e0:	e044      	b.n	801266c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d10d      	bne.n	8012604 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80125e8:	2034      	movs	r0, #52	@ 0x34
 80125ea:	f7f8 f843 	bl	800a674 <mem_malloc>
 80125ee:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d102      	bne.n	80125fc <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80125f6:	f04f 33ff 	mov.w	r3, #4294967295
 80125fa:	e037      	b.n	801266c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	68fa      	ldr	r2, [r7, #12]
 8012600:	629a      	str	r2, [r3, #40]	@ 0x28
 8012602:	e005      	b.n	8012610 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	791b      	ldrb	r3, [r3, #4]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d001      	beq.n	8012610 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801260c:	f7ff fc8a 	bl	8011f24 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8012610:	2234      	movs	r2, #52	@ 0x34
 8012612:	2100      	movs	r1, #0
 8012614:	68f8      	ldr	r0, [r7, #12]
 8012616:	f004 fdc7 	bl	80171a8 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801261a:	f7ff fc31 	bl	8011e80 <dhcp_inc_pcb_refcount>
 801261e:	4603      	mov	r3, r0
 8012620:	2b00      	cmp	r3, #0
 8012622:	d002      	beq.n	801262a <dhcp_start+0xa2>
    return ERR_MEM;
 8012624:	f04f 33ff 	mov.w	r3, #4294967295
 8012628:	e020      	b.n	801266c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	2201      	movs	r2, #1
 801262e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012636:	f003 0304 	and.w	r3, r3, #4
 801263a:	2b00      	cmp	r3, #0
 801263c:	d105      	bne.n	801264a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801263e:	2102      	movs	r1, #2
 8012640:	68f8      	ldr	r0, [r7, #12]
 8012642:	f000 fd19 	bl	8013078 <dhcp_set_state>
    return ERR_OK;
 8012646:	2300      	movs	r3, #0
 8012648:	e010      	b.n	801266c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801264a:	6878      	ldr	r0, [r7, #4]
 801264c:	f000 f8f8 	bl	8012840 <dhcp_discover>
 8012650:	4603      	mov	r3, r0
 8012652:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8012654:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012658:	2b00      	cmp	r3, #0
 801265a:	d005      	beq.n	8012668 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801265c:	6878      	ldr	r0, [r7, #4]
 801265e:	f000 fc71 	bl	8012f44 <dhcp_release_and_stop>
    return ERR_MEM;
 8012662:	f04f 33ff 	mov.w	r3, #4294967295
 8012666:	e001      	b.n	801266c <dhcp_start+0xe4>
  }
  return result;
 8012668:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801266c:	4618      	mov	r0, r3
 801266e:	3710      	adds	r7, #16
 8012670:	46bd      	mov	sp, r7
 8012672:	bd80      	pop	{r7, pc}
 8012674:	0801a770 	.word	0x0801a770
 8012678:	0801a854 	.word	0x0801a854
 801267c:	0801a7d0 	.word	0x0801a7d0
 8012680:	0801a898 	.word	0x0801a898

08012684 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8012684:	b580      	push	{r7, lr}
 8012686:	b084      	sub	sp, #16
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012690:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d025      	beq.n	80126e4 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	795b      	ldrb	r3, [r3, #5]
 801269c:	2b0a      	cmp	r3, #10
 801269e:	d008      	beq.n	80126b2 <dhcp_network_changed+0x2e>
 80126a0:	2b0a      	cmp	r3, #10
 80126a2:	dc0d      	bgt.n	80126c0 <dhcp_network_changed+0x3c>
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d01f      	beq.n	80126e8 <dhcp_network_changed+0x64>
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	db09      	blt.n	80126c0 <dhcp_network_changed+0x3c>
 80126ac:	3b03      	subs	r3, #3
 80126ae:	2b02      	cmp	r3, #2
 80126b0:	d806      	bhi.n	80126c0 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	2200      	movs	r2, #0
 80126b6:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 80126b8:	6878      	ldr	r0, [r7, #4]
 80126ba:	f000 fb85 	bl	8012dc8 <dhcp_reboot>
      break;
 80126be:	e014      	b.n	80126ea <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	795b      	ldrb	r3, [r3, #5]
 80126c4:	2b0c      	cmp	r3, #12
 80126c6:	d906      	bls.n	80126d6 <dhcp_network_changed+0x52>
 80126c8:	4b09      	ldr	r3, [pc, #36]	@ (80126f0 <dhcp_network_changed+0x6c>)
 80126ca:	f240 326d 	movw	r2, #877	@ 0x36d
 80126ce:	4909      	ldr	r1, [pc, #36]	@ (80126f4 <dhcp_network_changed+0x70>)
 80126d0:	4809      	ldr	r0, [pc, #36]	@ (80126f8 <dhcp_network_changed+0x74>)
 80126d2:	f004 fbd7 	bl	8016e84 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	2200      	movs	r2, #0
 80126da:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 80126dc:	6878      	ldr	r0, [r7, #4]
 80126de:	f000 f8af 	bl	8012840 <dhcp_discover>
      break;
 80126e2:	e002      	b.n	80126ea <dhcp_network_changed+0x66>
    return;
 80126e4:	bf00      	nop
 80126e6:	e000      	b.n	80126ea <dhcp_network_changed+0x66>
      break;
 80126e8:	bf00      	nop
  }
}
 80126ea:	3710      	adds	r7, #16
 80126ec:	46bd      	mov	sp, r7
 80126ee:	bd80      	pop	{r7, pc}
 80126f0:	0801a770 	.word	0x0801a770
 80126f4:	0801a8bc 	.word	0x0801a8bc
 80126f8:	0801a7d0 	.word	0x0801a7d0

080126fc <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80126fc:	b580      	push	{r7, lr}
 80126fe:	b084      	sub	sp, #16
 8012700:	af00      	add	r7, sp, #0
 8012702:	6078      	str	r0, [r7, #4]
 8012704:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	2b00      	cmp	r3, #0
 801270a:	d107      	bne.n	801271c <dhcp_arp_reply+0x20>
 801270c:	4b0e      	ldr	r3, [pc, #56]	@ (8012748 <dhcp_arp_reply+0x4c>)
 801270e:	f240 328b 	movw	r2, #907	@ 0x38b
 8012712:	490e      	ldr	r1, [pc, #56]	@ (801274c <dhcp_arp_reply+0x50>)
 8012714:	480e      	ldr	r0, [pc, #56]	@ (8012750 <dhcp_arp_reply+0x54>)
 8012716:	f004 fbb5 	bl	8016e84 <iprintf>
 801271a:	e012      	b.n	8012742 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012720:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d00c      	beq.n	8012742 <dhcp_arp_reply+0x46>
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	795b      	ldrb	r3, [r3, #5]
 801272c:	2b08      	cmp	r3, #8
 801272e:	d108      	bne.n	8012742 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8012730:	683b      	ldr	r3, [r7, #0]
 8012732:	681a      	ldr	r2, [r3, #0]
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	69db      	ldr	r3, [r3, #28]
 8012738:	429a      	cmp	r2, r3
 801273a:	d102      	bne.n	8012742 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801273c:	6878      	ldr	r0, [r7, #4]
 801273e:	f000 f809 	bl	8012754 <dhcp_decline>
    }
  }
}
 8012742:	3710      	adds	r7, #16
 8012744:	46bd      	mov	sp, r7
 8012746:	bd80      	pop	{r7, pc}
 8012748:	0801a770 	.word	0x0801a770
 801274c:	0801a854 	.word	0x0801a854
 8012750:	0801a7d0 	.word	0x0801a7d0

08012754 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8012754:	b5b0      	push	{r4, r5, r7, lr}
 8012756:	b08a      	sub	sp, #40	@ 0x28
 8012758:	af02      	add	r7, sp, #8
 801275a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012760:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8012762:	210c      	movs	r1, #12
 8012764:	69b8      	ldr	r0, [r7, #24]
 8012766:	f000 fc87 	bl	8013078 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801276a:	f107 030c 	add.w	r3, r7, #12
 801276e:	2204      	movs	r2, #4
 8012770:	69b9      	ldr	r1, [r7, #24]
 8012772:	6878      	ldr	r0, [r7, #4]
 8012774:	f001 f968 	bl	8013a48 <dhcp_create_msg>
 8012778:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801277a:	697b      	ldr	r3, [r7, #20]
 801277c:	2b00      	cmp	r3, #0
 801277e:	d035      	beq.n	80127ec <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012780:	697b      	ldr	r3, [r7, #20]
 8012782:	685b      	ldr	r3, [r3, #4]
 8012784:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012786:	89b8      	ldrh	r0, [r7, #12]
 8012788:	693b      	ldr	r3, [r7, #16]
 801278a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801278e:	2304      	movs	r3, #4
 8012790:	2232      	movs	r2, #50	@ 0x32
 8012792:	f000 fc8b 	bl	80130ac <dhcp_option>
 8012796:	4603      	mov	r3, r0
 8012798:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801279a:	89bc      	ldrh	r4, [r7, #12]
 801279c:	693b      	ldr	r3, [r7, #16]
 801279e:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80127a2:	69bb      	ldr	r3, [r7, #24]
 80127a4:	69db      	ldr	r3, [r3, #28]
 80127a6:	4618      	mov	r0, r3
 80127a8:	f7f7 fbd5 	bl	8009f56 <lwip_htonl>
 80127ac:	4603      	mov	r3, r0
 80127ae:	461a      	mov	r2, r3
 80127b0:	4629      	mov	r1, r5
 80127b2:	4620      	mov	r0, r4
 80127b4:	f000 fd06 	bl	80131c4 <dhcp_option_long>
 80127b8:	4603      	mov	r3, r0
 80127ba:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80127bc:	89b8      	ldrh	r0, [r7, #12]
 80127be:	693b      	ldr	r3, [r7, #16]
 80127c0:	33f0      	adds	r3, #240	@ 0xf0
 80127c2:	697a      	ldr	r2, [r7, #20]
 80127c4:	4619      	mov	r1, r3
 80127c6:	f001 fa15 	bl	8013bf4 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80127ca:	4b19      	ldr	r3, [pc, #100]	@ (8012830 <dhcp_decline+0xdc>)
 80127cc:	6818      	ldr	r0, [r3, #0]
 80127ce:	4b19      	ldr	r3, [pc, #100]	@ (8012834 <dhcp_decline+0xe0>)
 80127d0:	9301      	str	r3, [sp, #4]
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	9300      	str	r3, [sp, #0]
 80127d6:	2343      	movs	r3, #67	@ 0x43
 80127d8:	4a17      	ldr	r2, [pc, #92]	@ (8012838 <dhcp_decline+0xe4>)
 80127da:	6979      	ldr	r1, [r7, #20]
 80127dc:	f7ff f8ac 	bl	8011938 <udp_sendto_if_src>
 80127e0:	4603      	mov	r3, r0
 80127e2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80127e4:	6978      	ldr	r0, [r7, #20]
 80127e6:	f7f9 f8f5 	bl	800b9d4 <pbuf_free>
 80127ea:	e001      	b.n	80127f0 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80127ec:	23ff      	movs	r3, #255	@ 0xff
 80127ee:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80127f0:	69bb      	ldr	r3, [r7, #24]
 80127f2:	799b      	ldrb	r3, [r3, #6]
 80127f4:	2bff      	cmp	r3, #255	@ 0xff
 80127f6:	d005      	beq.n	8012804 <dhcp_decline+0xb0>
    dhcp->tries++;
 80127f8:	69bb      	ldr	r3, [r7, #24]
 80127fa:	799b      	ldrb	r3, [r3, #6]
 80127fc:	3301      	adds	r3, #1
 80127fe:	b2da      	uxtb	r2, r3
 8012800:	69bb      	ldr	r3, [r7, #24]
 8012802:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8012804:	f242 7310 	movw	r3, #10000	@ 0x2710
 8012808:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801280a:	89fb      	ldrh	r3, [r7, #14]
 801280c:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8012810:	4a0a      	ldr	r2, [pc, #40]	@ (801283c <dhcp_decline+0xe8>)
 8012812:	fb82 1203 	smull	r1, r2, r2, r3
 8012816:	1152      	asrs	r2, r2, #5
 8012818:	17db      	asrs	r3, r3, #31
 801281a:	1ad3      	subs	r3, r2, r3
 801281c:	b29a      	uxth	r2, r3
 801281e:	69bb      	ldr	r3, [r7, #24]
 8012820:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012822:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012826:	4618      	mov	r0, r3
 8012828:	3720      	adds	r7, #32
 801282a:	46bd      	mov	sp, r7
 801282c:	bdb0      	pop	{r4, r5, r7, pc}
 801282e:	bf00      	nop
 8012830:	2000cb44 	.word	0x2000cb44
 8012834:	0801b6ac 	.word	0x0801b6ac
 8012838:	0801b6b0 	.word	0x0801b6b0
 801283c:	10624dd3 	.word	0x10624dd3

08012840 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b08a      	sub	sp, #40	@ 0x28
 8012844:	af02      	add	r7, sp, #8
 8012846:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801284c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801284e:	2300      	movs	r3, #0
 8012850:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8012852:	69bb      	ldr	r3, [r7, #24]
 8012854:	2200      	movs	r2, #0
 8012856:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8012858:	2106      	movs	r1, #6
 801285a:	69b8      	ldr	r0, [r7, #24]
 801285c:	f000 fc0c 	bl	8013078 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8012860:	f107 0308 	add.w	r3, r7, #8
 8012864:	2201      	movs	r2, #1
 8012866:	69b9      	ldr	r1, [r7, #24]
 8012868:	6878      	ldr	r0, [r7, #4]
 801286a:	f001 f8ed 	bl	8013a48 <dhcp_create_msg>
 801286e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8012870:	693b      	ldr	r3, [r7, #16]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d04b      	beq.n	801290e <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012876:	693b      	ldr	r3, [r7, #16]
 8012878:	685b      	ldr	r3, [r3, #4]
 801287a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801287c:	8938      	ldrh	r0, [r7, #8]
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012884:	2302      	movs	r3, #2
 8012886:	2239      	movs	r2, #57	@ 0x39
 8012888:	f000 fc10 	bl	80130ac <dhcp_option>
 801288c:	4603      	mov	r3, r0
 801288e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012890:	8938      	ldrh	r0, [r7, #8]
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 801289c:	461a      	mov	r2, r3
 801289e:	f000 fc5f 	bl	8013160 <dhcp_option_short>
 80128a2:	4603      	mov	r3, r0
 80128a4:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80128a6:	8938      	ldrh	r0, [r7, #8]
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80128ae:	2303      	movs	r3, #3
 80128b0:	2237      	movs	r2, #55	@ 0x37
 80128b2:	f000 fbfb 	bl	80130ac <dhcp_option>
 80128b6:	4603      	mov	r3, r0
 80128b8:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80128ba:	2300      	movs	r3, #0
 80128bc:	77fb      	strb	r3, [r7, #31]
 80128be:	e00e      	b.n	80128de <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80128c0:	8938      	ldrh	r0, [r7, #8]
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80128c8:	7ffb      	ldrb	r3, [r7, #31]
 80128ca:	4a29      	ldr	r2, [pc, #164]	@ (8012970 <dhcp_discover+0x130>)
 80128cc:	5cd3      	ldrb	r3, [r2, r3]
 80128ce:	461a      	mov	r2, r3
 80128d0:	f000 fc20 	bl	8013114 <dhcp_option_byte>
 80128d4:	4603      	mov	r3, r0
 80128d6:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80128d8:	7ffb      	ldrb	r3, [r7, #31]
 80128da:	3301      	adds	r3, #1
 80128dc:	77fb      	strb	r3, [r7, #31]
 80128de:	7ffb      	ldrb	r3, [r7, #31]
 80128e0:	2b02      	cmp	r3, #2
 80128e2:	d9ed      	bls.n	80128c0 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80128e4:	8938      	ldrh	r0, [r7, #8]
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	33f0      	adds	r3, #240	@ 0xf0
 80128ea:	693a      	ldr	r2, [r7, #16]
 80128ec:	4619      	mov	r1, r3
 80128ee:	f001 f981 	bl	8013bf4 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80128f2:	4b20      	ldr	r3, [pc, #128]	@ (8012974 <dhcp_discover+0x134>)
 80128f4:	6818      	ldr	r0, [r3, #0]
 80128f6:	4b20      	ldr	r3, [pc, #128]	@ (8012978 <dhcp_discover+0x138>)
 80128f8:	9301      	str	r3, [sp, #4]
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	9300      	str	r3, [sp, #0]
 80128fe:	2343      	movs	r3, #67	@ 0x43
 8012900:	4a1e      	ldr	r2, [pc, #120]	@ (801297c <dhcp_discover+0x13c>)
 8012902:	6939      	ldr	r1, [r7, #16]
 8012904:	f7ff f818 	bl	8011938 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8012908:	6938      	ldr	r0, [r7, #16]
 801290a:	f7f9 f863 	bl	800b9d4 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801290e:	69bb      	ldr	r3, [r7, #24]
 8012910:	799b      	ldrb	r3, [r3, #6]
 8012912:	2bff      	cmp	r3, #255	@ 0xff
 8012914:	d005      	beq.n	8012922 <dhcp_discover+0xe2>
    dhcp->tries++;
 8012916:	69bb      	ldr	r3, [r7, #24]
 8012918:	799b      	ldrb	r3, [r3, #6]
 801291a:	3301      	adds	r3, #1
 801291c:	b2da      	uxtb	r2, r3
 801291e:	69bb      	ldr	r3, [r7, #24]
 8012920:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8012922:	69bb      	ldr	r3, [r7, #24]
 8012924:	799b      	ldrb	r3, [r3, #6]
 8012926:	2b05      	cmp	r3, #5
 8012928:	d80d      	bhi.n	8012946 <dhcp_discover+0x106>
 801292a:	69bb      	ldr	r3, [r7, #24]
 801292c:	799b      	ldrb	r3, [r3, #6]
 801292e:	461a      	mov	r2, r3
 8012930:	2301      	movs	r3, #1
 8012932:	4093      	lsls	r3, r2
 8012934:	b29b      	uxth	r3, r3
 8012936:	461a      	mov	r2, r3
 8012938:	0152      	lsls	r2, r2, #5
 801293a:	1ad2      	subs	r2, r2, r3
 801293c:	0092      	lsls	r2, r2, #2
 801293e:	4413      	add	r3, r2
 8012940:	00db      	lsls	r3, r3, #3
 8012942:	b29b      	uxth	r3, r3
 8012944:	e001      	b.n	801294a <dhcp_discover+0x10a>
 8012946:	f64e 2360 	movw	r3, #60000	@ 0xea60
 801294a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801294c:	897b      	ldrh	r3, [r7, #10]
 801294e:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8012952:	4a0b      	ldr	r2, [pc, #44]	@ (8012980 <dhcp_discover+0x140>)
 8012954:	fb82 1203 	smull	r1, r2, r2, r3
 8012958:	1152      	asrs	r2, r2, #5
 801295a:	17db      	asrs	r3, r3, #31
 801295c:	1ad3      	subs	r3, r2, r3
 801295e:	b29a      	uxth	r2, r3
 8012960:	69bb      	ldr	r3, [r7, #24]
 8012962:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012964:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012968:	4618      	mov	r0, r3
 801296a:	3720      	adds	r7, #32
 801296c:	46bd      	mov	sp, r7
 801296e:	bd80      	pop	{r7, pc}
 8012970:	20000034 	.word	0x20000034
 8012974:	2000cb44 	.word	0x2000cb44
 8012978:	0801b6ac 	.word	0x0801b6ac
 801297c:	0801b6b0 	.word	0x0801b6b0
 8012980:	10624dd3 	.word	0x10624dd3

08012984 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8012984:	b580      	push	{r7, lr}
 8012986:	b088      	sub	sp, #32
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d107      	bne.n	80129a2 <dhcp_bind+0x1e>
 8012992:	4b64      	ldr	r3, [pc, #400]	@ (8012b24 <dhcp_bind+0x1a0>)
 8012994:	f240 4215 	movw	r2, #1045	@ 0x415
 8012998:	4963      	ldr	r1, [pc, #396]	@ (8012b28 <dhcp_bind+0x1a4>)
 801299a:	4864      	ldr	r0, [pc, #400]	@ (8012b2c <dhcp_bind+0x1a8>)
 801299c:	f004 fa72 	bl	8016e84 <iprintf>
 80129a0:	e0bc      	b.n	8012b1c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80129a6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80129a8:	69bb      	ldr	r3, [r7, #24]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d107      	bne.n	80129be <dhcp_bind+0x3a>
 80129ae:	4b5d      	ldr	r3, [pc, #372]	@ (8012b24 <dhcp_bind+0x1a0>)
 80129b0:	f240 4217 	movw	r2, #1047	@ 0x417
 80129b4:	495e      	ldr	r1, [pc, #376]	@ (8012b30 <dhcp_bind+0x1ac>)
 80129b6:	485d      	ldr	r0, [pc, #372]	@ (8012b2c <dhcp_bind+0x1a8>)
 80129b8:	f004 fa64 	bl	8016e84 <iprintf>
 80129bc:	e0ae      	b.n	8012b1c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80129be:	69bb      	ldr	r3, [r7, #24]
 80129c0:	2200      	movs	r2, #0
 80129c2:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80129c4:	69bb      	ldr	r3, [r7, #24]
 80129c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80129c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129cc:	d019      	beq.n	8012a02 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80129ce:	69bb      	ldr	r3, [r7, #24]
 80129d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80129d2:	331e      	adds	r3, #30
 80129d4:	4a57      	ldr	r2, [pc, #348]	@ (8012b34 <dhcp_bind+0x1b0>)
 80129d6:	fba2 2303 	umull	r2, r3, r2, r3
 80129da:	095b      	lsrs	r3, r3, #5
 80129dc:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80129de:	69fb      	ldr	r3, [r7, #28]
 80129e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80129e4:	d302      	bcc.n	80129ec <dhcp_bind+0x68>
      timeout = 0xffff;
 80129e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80129ea:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80129ec:	69fb      	ldr	r3, [r7, #28]
 80129ee:	b29a      	uxth	r2, r3
 80129f0:	69bb      	ldr	r3, [r7, #24]
 80129f2:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80129f4:	69bb      	ldr	r3, [r7, #24]
 80129f6:	8a9b      	ldrh	r3, [r3, #20]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d102      	bne.n	8012a02 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80129fc:	69bb      	ldr	r3, [r7, #24]
 80129fe:	2201      	movs	r2, #1
 8012a00:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8012a02:	69bb      	ldr	r3, [r7, #24]
 8012a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a0a:	d01d      	beq.n	8012a48 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012a0c:	69bb      	ldr	r3, [r7, #24]
 8012a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a10:	331e      	adds	r3, #30
 8012a12:	4a48      	ldr	r2, [pc, #288]	@ (8012b34 <dhcp_bind+0x1b0>)
 8012a14:	fba2 2303 	umull	r2, r3, r2, r3
 8012a18:	095b      	lsrs	r3, r3, #5
 8012a1a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012a1c:	69fb      	ldr	r3, [r7, #28]
 8012a1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012a22:	d302      	bcc.n	8012a2a <dhcp_bind+0xa6>
      timeout = 0xffff;
 8012a24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012a28:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8012a2a:	69fb      	ldr	r3, [r7, #28]
 8012a2c:	b29a      	uxth	r2, r3
 8012a2e:	69bb      	ldr	r3, [r7, #24]
 8012a30:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8012a32:	69bb      	ldr	r3, [r7, #24]
 8012a34:	895b      	ldrh	r3, [r3, #10]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d102      	bne.n	8012a40 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8012a3a:	69bb      	ldr	r3, [r7, #24]
 8012a3c:	2201      	movs	r2, #1
 8012a3e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8012a40:	69bb      	ldr	r3, [r7, #24]
 8012a42:	895a      	ldrh	r2, [r3, #10]
 8012a44:	69bb      	ldr	r3, [r7, #24]
 8012a46:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8012a48:	69bb      	ldr	r3, [r7, #24]
 8012a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a50:	d01d      	beq.n	8012a8e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012a52:	69bb      	ldr	r3, [r7, #24]
 8012a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012a56:	331e      	adds	r3, #30
 8012a58:	4a36      	ldr	r2, [pc, #216]	@ (8012b34 <dhcp_bind+0x1b0>)
 8012a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8012a5e:	095b      	lsrs	r3, r3, #5
 8012a60:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012a62:	69fb      	ldr	r3, [r7, #28]
 8012a64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012a68:	d302      	bcc.n	8012a70 <dhcp_bind+0xec>
      timeout = 0xffff;
 8012a6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012a6e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8012a70:	69fb      	ldr	r3, [r7, #28]
 8012a72:	b29a      	uxth	r2, r3
 8012a74:	69bb      	ldr	r3, [r7, #24]
 8012a76:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8012a78:	69bb      	ldr	r3, [r7, #24]
 8012a7a:	899b      	ldrh	r3, [r3, #12]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d102      	bne.n	8012a86 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8012a80:	69bb      	ldr	r3, [r7, #24]
 8012a82:	2201      	movs	r2, #1
 8012a84:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8012a86:	69bb      	ldr	r3, [r7, #24]
 8012a88:	899a      	ldrh	r2, [r3, #12]
 8012a8a:	69bb      	ldr	r3, [r7, #24]
 8012a8c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8012a8e:	69bb      	ldr	r3, [r7, #24]
 8012a90:	895a      	ldrh	r2, [r3, #10]
 8012a92:	69bb      	ldr	r3, [r7, #24]
 8012a94:	899b      	ldrh	r3, [r3, #12]
 8012a96:	429a      	cmp	r2, r3
 8012a98:	d306      	bcc.n	8012aa8 <dhcp_bind+0x124>
 8012a9a:	69bb      	ldr	r3, [r7, #24]
 8012a9c:	899b      	ldrh	r3, [r3, #12]
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d002      	beq.n	8012aa8 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8012aa2:	69bb      	ldr	r3, [r7, #24]
 8012aa4:	2200      	movs	r2, #0
 8012aa6:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8012aa8:	69bb      	ldr	r3, [r7, #24]
 8012aaa:	79db      	ldrb	r3, [r3, #7]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d003      	beq.n	8012ab8 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8012ab0:	69bb      	ldr	r3, [r7, #24]
 8012ab2:	6a1b      	ldr	r3, [r3, #32]
 8012ab4:	613b      	str	r3, [r7, #16]
 8012ab6:	e014      	b.n	8012ae2 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8012ab8:	69bb      	ldr	r3, [r7, #24]
 8012aba:	331c      	adds	r3, #28
 8012abc:	781b      	ldrb	r3, [r3, #0]
 8012abe:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8012ac0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	db02      	blt.n	8012ace <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8012ac8:	23ff      	movs	r3, #255	@ 0xff
 8012aca:	613b      	str	r3, [r7, #16]
 8012acc:	e009      	b.n	8012ae2 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8012ace:	7dfb      	ldrb	r3, [r7, #23]
 8012ad0:	2bbf      	cmp	r3, #191	@ 0xbf
 8012ad2:	d903      	bls.n	8012adc <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8012ad4:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8012ad8:	613b      	str	r3, [r7, #16]
 8012ada:	e002      	b.n	8012ae2 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8012adc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012ae0:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8012ae2:	69bb      	ldr	r3, [r7, #24]
 8012ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ae6:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d108      	bne.n	8012b00 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8012aee:	69bb      	ldr	r3, [r7, #24]
 8012af0:	69da      	ldr	r2, [r3, #28]
 8012af2:	693b      	ldr	r3, [r7, #16]
 8012af4:	4013      	ands	r3, r2
 8012af6:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8012afe:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8012b00:	210a      	movs	r1, #10
 8012b02:	69b8      	ldr	r0, [r7, #24]
 8012b04:	f000 fab8 	bl	8013078 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8012b08:	69bb      	ldr	r3, [r7, #24]
 8012b0a:	f103 011c 	add.w	r1, r3, #28
 8012b0e:	f107 030c 	add.w	r3, r7, #12
 8012b12:	f107 0210 	add.w	r2, r7, #16
 8012b16:	6878      	ldr	r0, [r7, #4]
 8012b18:	f7f8 f9a8 	bl	800ae6c <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8012b1c:	3720      	adds	r7, #32
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	bd80      	pop	{r7, pc}
 8012b22:	bf00      	nop
 8012b24:	0801a770 	.word	0x0801a770
 8012b28:	0801a8d0 	.word	0x0801a8d0
 8012b2c:	0801a7d0 	.word	0x0801a7d0
 8012b30:	0801a8ec 	.word	0x0801a8ec
 8012b34:	88888889 	.word	0x88888889

08012b38 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8012b38:	b580      	push	{r7, lr}
 8012b3a:	b08a      	sub	sp, #40	@ 0x28
 8012b3c:	af02      	add	r7, sp, #8
 8012b3e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012b44:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8012b46:	2105      	movs	r1, #5
 8012b48:	69b8      	ldr	r0, [r7, #24]
 8012b4a:	f000 fa95 	bl	8013078 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012b4e:	f107 030c 	add.w	r3, r7, #12
 8012b52:	2203      	movs	r2, #3
 8012b54:	69b9      	ldr	r1, [r7, #24]
 8012b56:	6878      	ldr	r0, [r7, #4]
 8012b58:	f000 ff76 	bl	8013a48 <dhcp_create_msg>
 8012b5c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012b5e:	697b      	ldr	r3, [r7, #20]
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d057      	beq.n	8012c14 <dhcp_renew+0xdc>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012b64:	697b      	ldr	r3, [r7, #20]
 8012b66:	685b      	ldr	r3, [r3, #4]
 8012b68:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012b6a:	89b8      	ldrh	r0, [r7, #12]
 8012b6c:	693b      	ldr	r3, [r7, #16]
 8012b6e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012b72:	2302      	movs	r3, #2
 8012b74:	2239      	movs	r2, #57	@ 0x39
 8012b76:	f000 fa99 	bl	80130ac <dhcp_option>
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012b7e:	89b8      	ldrh	r0, [r7, #12]
 8012b80:	693b      	ldr	r3, [r7, #16]
 8012b82:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8012b8a:	461a      	mov	r2, r3
 8012b8c:	f000 fae8 	bl	8013160 <dhcp_option_short>
 8012b90:	4603      	mov	r3, r0
 8012b92:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012b94:	89b8      	ldrh	r0, [r7, #12]
 8012b96:	693b      	ldr	r3, [r7, #16]
 8012b98:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012b9c:	2303      	movs	r3, #3
 8012b9e:	2237      	movs	r2, #55	@ 0x37
 8012ba0:	f000 fa84 	bl	80130ac <dhcp_option>
 8012ba4:	4603      	mov	r3, r0
 8012ba6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012ba8:	2300      	movs	r3, #0
 8012baa:	77bb      	strb	r3, [r7, #30]
 8012bac:	e00e      	b.n	8012bcc <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012bae:	89b8      	ldrh	r0, [r7, #12]
 8012bb0:	693b      	ldr	r3, [r7, #16]
 8012bb2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012bb6:	7fbb      	ldrb	r3, [r7, #30]
 8012bb8:	4a2e      	ldr	r2, [pc, #184]	@ (8012c74 <dhcp_renew+0x13c>)
 8012bba:	5cd3      	ldrb	r3, [r2, r3]
 8012bbc:	461a      	mov	r2, r3
 8012bbe:	f000 faa9 	bl	8013114 <dhcp_option_byte>
 8012bc2:	4603      	mov	r3, r0
 8012bc4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012bc6:	7fbb      	ldrb	r3, [r7, #30]
 8012bc8:	3301      	adds	r3, #1
 8012bca:	77bb      	strb	r3, [r7, #30]
 8012bcc:	7fbb      	ldrb	r3, [r7, #30]
 8012bce:	2b02      	cmp	r3, #2
 8012bd0:	d9ed      	bls.n	8012bae <dhcp_renew+0x76>
    }

#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
 8012bd2:	89b8      	ldrh	r0, [r7, #12]
 8012bd4:	693b      	ldr	r3, [r7, #16]
 8012bd6:	33f0      	adds	r3, #240	@ 0xf0
 8012bd8:	687a      	ldr	r2, [r7, #4]
 8012bda:	4619      	mov	r1, r3
 8012bdc:	f000 fb36 	bl	801324c <dhcp_option_hostname>
 8012be0:	4603      	mov	r3, r0
 8012be2:	81bb      	strh	r3, [r7, #12]
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012be4:	89b8      	ldrh	r0, [r7, #12]
 8012be6:	693b      	ldr	r3, [r7, #16]
 8012be8:	33f0      	adds	r3, #240	@ 0xf0
 8012bea:	697a      	ldr	r2, [r7, #20]
 8012bec:	4619      	mov	r1, r3
 8012bee:	f001 f801 	bl	8013bf4 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012bf2:	4b21      	ldr	r3, [pc, #132]	@ (8012c78 <dhcp_renew+0x140>)
 8012bf4:	6818      	ldr	r0, [r3, #0]
 8012bf6:	69bb      	ldr	r3, [r7, #24]
 8012bf8:	f103 0218 	add.w	r2, r3, #24
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	9300      	str	r3, [sp, #0]
 8012c00:	2343      	movs	r3, #67	@ 0x43
 8012c02:	6979      	ldr	r1, [r7, #20]
 8012c04:	f7fe fe24 	bl	8011850 <udp_sendto_if>
 8012c08:	4603      	mov	r3, r0
 8012c0a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012c0c:	6978      	ldr	r0, [r7, #20]
 8012c0e:	f7f8 fee1 	bl	800b9d4 <pbuf_free>
 8012c12:	e001      	b.n	8012c18 <dhcp_renew+0xe0>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012c14:	23ff      	movs	r3, #255	@ 0xff
 8012c16:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012c18:	69bb      	ldr	r3, [r7, #24]
 8012c1a:	799b      	ldrb	r3, [r3, #6]
 8012c1c:	2bff      	cmp	r3, #255	@ 0xff
 8012c1e:	d005      	beq.n	8012c2c <dhcp_renew+0xf4>
    dhcp->tries++;
 8012c20:	69bb      	ldr	r3, [r7, #24]
 8012c22:	799b      	ldrb	r3, [r3, #6]
 8012c24:	3301      	adds	r3, #1
 8012c26:	b2da      	uxtb	r2, r3
 8012c28:	69bb      	ldr	r3, [r7, #24]
 8012c2a:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8012c2c:	69bb      	ldr	r3, [r7, #24]
 8012c2e:	799b      	ldrb	r3, [r3, #6]
 8012c30:	2b09      	cmp	r3, #9
 8012c32:	d809      	bhi.n	8012c48 <dhcp_renew+0x110>
 8012c34:	69bb      	ldr	r3, [r7, #24]
 8012c36:	799b      	ldrb	r3, [r3, #6]
 8012c38:	461a      	mov	r2, r3
 8012c3a:	0152      	lsls	r2, r2, #5
 8012c3c:	1ad2      	subs	r2, r2, r3
 8012c3e:	0092      	lsls	r2, r2, #2
 8012c40:	4413      	add	r3, r2
 8012c42:	011b      	lsls	r3, r3, #4
 8012c44:	b29b      	uxth	r3, r3
 8012c46:	e001      	b.n	8012c4c <dhcp_renew+0x114>
 8012c48:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8012c4c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012c4e:	89fb      	ldrh	r3, [r7, #14]
 8012c50:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8012c54:	4a09      	ldr	r2, [pc, #36]	@ (8012c7c <dhcp_renew+0x144>)
 8012c56:	fb82 1203 	smull	r1, r2, r2, r3
 8012c5a:	1152      	asrs	r2, r2, #5
 8012c5c:	17db      	asrs	r3, r3, #31
 8012c5e:	1ad3      	subs	r3, r2, r3
 8012c60:	b29a      	uxth	r2, r3
 8012c62:	69bb      	ldr	r3, [r7, #24]
 8012c64:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012c66:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	3720      	adds	r7, #32
 8012c6e:	46bd      	mov	sp, r7
 8012c70:	bd80      	pop	{r7, pc}
 8012c72:	bf00      	nop
 8012c74:	20000034 	.word	0x20000034
 8012c78:	2000cb44 	.word	0x2000cb44
 8012c7c:	10624dd3 	.word	0x10624dd3

08012c80 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b08a      	sub	sp, #40	@ 0x28
 8012c84:	af02      	add	r7, sp, #8
 8012c86:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c8c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8012c8e:	2104      	movs	r1, #4
 8012c90:	69b8      	ldr	r0, [r7, #24]
 8012c92:	f000 f9f1 	bl	8013078 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012c96:	f107 030c 	add.w	r3, r7, #12
 8012c9a:	2203      	movs	r2, #3
 8012c9c:	69b9      	ldr	r1, [r7, #24]
 8012c9e:	6878      	ldr	r0, [r7, #4]
 8012ca0:	f000 fed2 	bl	8013a48 <dhcp_create_msg>
 8012ca4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012ca6:	697b      	ldr	r3, [r7, #20]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d055      	beq.n	8012d58 <dhcp_rebind+0xd8>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012cac:	697b      	ldr	r3, [r7, #20]
 8012cae:	685b      	ldr	r3, [r3, #4]
 8012cb0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012cb2:	89b8      	ldrh	r0, [r7, #12]
 8012cb4:	693b      	ldr	r3, [r7, #16]
 8012cb6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012cba:	2302      	movs	r3, #2
 8012cbc:	2239      	movs	r2, #57	@ 0x39
 8012cbe:	f000 f9f5 	bl	80130ac <dhcp_option>
 8012cc2:	4603      	mov	r3, r0
 8012cc4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012cc6:	89b8      	ldrh	r0, [r7, #12]
 8012cc8:	693b      	ldr	r3, [r7, #16]
 8012cca:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8012cd2:	461a      	mov	r2, r3
 8012cd4:	f000 fa44 	bl	8013160 <dhcp_option_short>
 8012cd8:	4603      	mov	r3, r0
 8012cda:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012cdc:	89b8      	ldrh	r0, [r7, #12]
 8012cde:	693b      	ldr	r3, [r7, #16]
 8012ce0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012ce4:	2303      	movs	r3, #3
 8012ce6:	2237      	movs	r2, #55	@ 0x37
 8012ce8:	f000 f9e0 	bl	80130ac <dhcp_option>
 8012cec:	4603      	mov	r3, r0
 8012cee:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012cf0:	2300      	movs	r3, #0
 8012cf2:	77bb      	strb	r3, [r7, #30]
 8012cf4:	e00e      	b.n	8012d14 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012cf6:	89b8      	ldrh	r0, [r7, #12]
 8012cf8:	693b      	ldr	r3, [r7, #16]
 8012cfa:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012cfe:	7fbb      	ldrb	r3, [r7, #30]
 8012d00:	4a2d      	ldr	r2, [pc, #180]	@ (8012db8 <dhcp_rebind+0x138>)
 8012d02:	5cd3      	ldrb	r3, [r2, r3]
 8012d04:	461a      	mov	r2, r3
 8012d06:	f000 fa05 	bl	8013114 <dhcp_option_byte>
 8012d0a:	4603      	mov	r3, r0
 8012d0c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012d0e:	7fbb      	ldrb	r3, [r7, #30]
 8012d10:	3301      	adds	r3, #1
 8012d12:	77bb      	strb	r3, [r7, #30]
 8012d14:	7fbb      	ldrb	r3, [r7, #30]
 8012d16:	2b02      	cmp	r3, #2
 8012d18:	d9ed      	bls.n	8012cf6 <dhcp_rebind+0x76>
    }

#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
 8012d1a:	89b8      	ldrh	r0, [r7, #12]
 8012d1c:	693b      	ldr	r3, [r7, #16]
 8012d1e:	33f0      	adds	r3, #240	@ 0xf0
 8012d20:	687a      	ldr	r2, [r7, #4]
 8012d22:	4619      	mov	r1, r3
 8012d24:	f000 fa92 	bl	801324c <dhcp_option_hostname>
 8012d28:	4603      	mov	r3, r0
 8012d2a:	81bb      	strh	r3, [r7, #12]
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012d2c:	89b8      	ldrh	r0, [r7, #12]
 8012d2e:	693b      	ldr	r3, [r7, #16]
 8012d30:	33f0      	adds	r3, #240	@ 0xf0
 8012d32:	697a      	ldr	r2, [r7, #20]
 8012d34:	4619      	mov	r1, r3
 8012d36:	f000 ff5d 	bl	8013bf4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012d3a:	4b20      	ldr	r3, [pc, #128]	@ (8012dbc <dhcp_rebind+0x13c>)
 8012d3c:	6818      	ldr	r0, [r3, #0]
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	9300      	str	r3, [sp, #0]
 8012d42:	2343      	movs	r3, #67	@ 0x43
 8012d44:	4a1e      	ldr	r2, [pc, #120]	@ (8012dc0 <dhcp_rebind+0x140>)
 8012d46:	6979      	ldr	r1, [r7, #20]
 8012d48:	f7fe fd82 	bl	8011850 <udp_sendto_if>
 8012d4c:	4603      	mov	r3, r0
 8012d4e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012d50:	6978      	ldr	r0, [r7, #20]
 8012d52:	f7f8 fe3f 	bl	800b9d4 <pbuf_free>
 8012d56:	e001      	b.n	8012d5c <dhcp_rebind+0xdc>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012d58:	23ff      	movs	r3, #255	@ 0xff
 8012d5a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012d5c:	69bb      	ldr	r3, [r7, #24]
 8012d5e:	799b      	ldrb	r3, [r3, #6]
 8012d60:	2bff      	cmp	r3, #255	@ 0xff
 8012d62:	d005      	beq.n	8012d70 <dhcp_rebind+0xf0>
    dhcp->tries++;
 8012d64:	69bb      	ldr	r3, [r7, #24]
 8012d66:	799b      	ldrb	r3, [r3, #6]
 8012d68:	3301      	adds	r3, #1
 8012d6a:	b2da      	uxtb	r2, r3
 8012d6c:	69bb      	ldr	r3, [r7, #24]
 8012d6e:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8012d70:	69bb      	ldr	r3, [r7, #24]
 8012d72:	799b      	ldrb	r3, [r3, #6]
 8012d74:	2b09      	cmp	r3, #9
 8012d76:	d809      	bhi.n	8012d8c <dhcp_rebind+0x10c>
 8012d78:	69bb      	ldr	r3, [r7, #24]
 8012d7a:	799b      	ldrb	r3, [r3, #6]
 8012d7c:	461a      	mov	r2, r3
 8012d7e:	0152      	lsls	r2, r2, #5
 8012d80:	1ad2      	subs	r2, r2, r3
 8012d82:	0092      	lsls	r2, r2, #2
 8012d84:	4413      	add	r3, r2
 8012d86:	00db      	lsls	r3, r3, #3
 8012d88:	b29b      	uxth	r3, r3
 8012d8a:	e001      	b.n	8012d90 <dhcp_rebind+0x110>
 8012d8c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8012d90:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012d92:	89fb      	ldrh	r3, [r7, #14]
 8012d94:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8012d98:	4a0a      	ldr	r2, [pc, #40]	@ (8012dc4 <dhcp_rebind+0x144>)
 8012d9a:	fb82 1203 	smull	r1, r2, r2, r3
 8012d9e:	1152      	asrs	r2, r2, #5
 8012da0:	17db      	asrs	r3, r3, #31
 8012da2:	1ad3      	subs	r3, r2, r3
 8012da4:	b29a      	uxth	r2, r3
 8012da6:	69bb      	ldr	r3, [r7, #24]
 8012da8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012daa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012dae:	4618      	mov	r0, r3
 8012db0:	3720      	adds	r7, #32
 8012db2:	46bd      	mov	sp, r7
 8012db4:	bd80      	pop	{r7, pc}
 8012db6:	bf00      	nop
 8012db8:	20000034 	.word	0x20000034
 8012dbc:	2000cb44 	.word	0x2000cb44
 8012dc0:	0801b6b0 	.word	0x0801b6b0
 8012dc4:	10624dd3 	.word	0x10624dd3

08012dc8 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8012dc8:	b5b0      	push	{r4, r5, r7, lr}
 8012dca:	b08a      	sub	sp, #40	@ 0x28
 8012dcc:	af02      	add	r7, sp, #8
 8012dce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012dd4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8012dd6:	2103      	movs	r1, #3
 8012dd8:	69b8      	ldr	r0, [r7, #24]
 8012dda:	f000 f94d 	bl	8013078 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012dde:	f107 030c 	add.w	r3, r7, #12
 8012de2:	2203      	movs	r2, #3
 8012de4:	69b9      	ldr	r1, [r7, #24]
 8012de6:	6878      	ldr	r0, [r7, #4]
 8012de8:	f000 fe2e 	bl	8013a48 <dhcp_create_msg>
 8012dec:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012dee:	697b      	ldr	r3, [r7, #20]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d06f      	beq.n	8012ed4 <dhcp_reboot+0x10c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012df4:	697b      	ldr	r3, [r7, #20]
 8012df6:	685b      	ldr	r3, [r3, #4]
 8012df8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012dfa:	89b8      	ldrh	r0, [r7, #12]
 8012dfc:	693b      	ldr	r3, [r7, #16]
 8012dfe:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012e02:	2302      	movs	r3, #2
 8012e04:	2239      	movs	r2, #57	@ 0x39
 8012e06:	f000 f951 	bl	80130ac <dhcp_option>
 8012e0a:	4603      	mov	r3, r0
 8012e0c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8012e0e:	89b8      	ldrh	r0, [r7, #12]
 8012e10:	693b      	ldr	r3, [r7, #16]
 8012e12:	33f0      	adds	r3, #240	@ 0xf0
 8012e14:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8012e18:	4619      	mov	r1, r3
 8012e1a:	f000 f9a1 	bl	8013160 <dhcp_option_short>
 8012e1e:	4603      	mov	r3, r0
 8012e20:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012e22:	89b8      	ldrh	r0, [r7, #12]
 8012e24:	693b      	ldr	r3, [r7, #16]
 8012e26:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012e2a:	2304      	movs	r3, #4
 8012e2c:	2232      	movs	r2, #50	@ 0x32
 8012e2e:	f000 f93d 	bl	80130ac <dhcp_option>
 8012e32:	4603      	mov	r3, r0
 8012e34:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012e36:	89bc      	ldrh	r4, [r7, #12]
 8012e38:	693b      	ldr	r3, [r7, #16]
 8012e3a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8012e3e:	69bb      	ldr	r3, [r7, #24]
 8012e40:	69db      	ldr	r3, [r3, #28]
 8012e42:	4618      	mov	r0, r3
 8012e44:	f7f7 f887 	bl	8009f56 <lwip_htonl>
 8012e48:	4603      	mov	r3, r0
 8012e4a:	461a      	mov	r2, r3
 8012e4c:	4629      	mov	r1, r5
 8012e4e:	4620      	mov	r0, r4
 8012e50:	f000 f9b8 	bl	80131c4 <dhcp_option_long>
 8012e54:	4603      	mov	r3, r0
 8012e56:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012e58:	89b8      	ldrh	r0, [r7, #12]
 8012e5a:	693b      	ldr	r3, [r7, #16]
 8012e5c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012e60:	2303      	movs	r3, #3
 8012e62:	2237      	movs	r2, #55	@ 0x37
 8012e64:	f000 f922 	bl	80130ac <dhcp_option>
 8012e68:	4603      	mov	r3, r0
 8012e6a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012e6c:	2300      	movs	r3, #0
 8012e6e:	77bb      	strb	r3, [r7, #30]
 8012e70:	e00e      	b.n	8012e90 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012e72:	89b8      	ldrh	r0, [r7, #12]
 8012e74:	693b      	ldr	r3, [r7, #16]
 8012e76:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012e7a:	7fbb      	ldrb	r3, [r7, #30]
 8012e7c:	4a2d      	ldr	r2, [pc, #180]	@ (8012f34 <dhcp_reboot+0x16c>)
 8012e7e:	5cd3      	ldrb	r3, [r2, r3]
 8012e80:	461a      	mov	r2, r3
 8012e82:	f000 f947 	bl	8013114 <dhcp_option_byte>
 8012e86:	4603      	mov	r3, r0
 8012e88:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012e8a:	7fbb      	ldrb	r3, [r7, #30]
 8012e8c:	3301      	adds	r3, #1
 8012e8e:	77bb      	strb	r3, [r7, #30]
 8012e90:	7fbb      	ldrb	r3, [r7, #30]
 8012e92:	2b02      	cmp	r3, #2
 8012e94:	d9ed      	bls.n	8012e72 <dhcp_reboot+0xaa>
    }

#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
 8012e96:	89b8      	ldrh	r0, [r7, #12]
 8012e98:	693b      	ldr	r3, [r7, #16]
 8012e9a:	33f0      	adds	r3, #240	@ 0xf0
 8012e9c:	687a      	ldr	r2, [r7, #4]
 8012e9e:	4619      	mov	r1, r3
 8012ea0:	f000 f9d4 	bl	801324c <dhcp_option_hostname>
 8012ea4:	4603      	mov	r3, r0
 8012ea6:	81bb      	strh	r3, [r7, #12]
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012ea8:	89b8      	ldrh	r0, [r7, #12]
 8012eaa:	693b      	ldr	r3, [r7, #16]
 8012eac:	33f0      	adds	r3, #240	@ 0xf0
 8012eae:	697a      	ldr	r2, [r7, #20]
 8012eb0:	4619      	mov	r1, r3
 8012eb2:	f000 fe9f 	bl	8013bf4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012eb6:	4b20      	ldr	r3, [pc, #128]	@ (8012f38 <dhcp_reboot+0x170>)
 8012eb8:	6818      	ldr	r0, [r3, #0]
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	9300      	str	r3, [sp, #0]
 8012ebe:	2343      	movs	r3, #67	@ 0x43
 8012ec0:	4a1e      	ldr	r2, [pc, #120]	@ (8012f3c <dhcp_reboot+0x174>)
 8012ec2:	6979      	ldr	r1, [r7, #20]
 8012ec4:	f7fe fcc4 	bl	8011850 <udp_sendto_if>
 8012ec8:	4603      	mov	r3, r0
 8012eca:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012ecc:	6978      	ldr	r0, [r7, #20]
 8012ece:	f7f8 fd81 	bl	800b9d4 <pbuf_free>
 8012ed2:	e001      	b.n	8012ed8 <dhcp_reboot+0x110>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012ed4:	23ff      	movs	r3, #255	@ 0xff
 8012ed6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012ed8:	69bb      	ldr	r3, [r7, #24]
 8012eda:	799b      	ldrb	r3, [r3, #6]
 8012edc:	2bff      	cmp	r3, #255	@ 0xff
 8012ede:	d005      	beq.n	8012eec <dhcp_reboot+0x124>
    dhcp->tries++;
 8012ee0:	69bb      	ldr	r3, [r7, #24]
 8012ee2:	799b      	ldrb	r3, [r3, #6]
 8012ee4:	3301      	adds	r3, #1
 8012ee6:	b2da      	uxtb	r2, r3
 8012ee8:	69bb      	ldr	r3, [r7, #24]
 8012eea:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8012eec:	69bb      	ldr	r3, [r7, #24]
 8012eee:	799b      	ldrb	r3, [r3, #6]
 8012ef0:	2b09      	cmp	r3, #9
 8012ef2:	d809      	bhi.n	8012f08 <dhcp_reboot+0x140>
 8012ef4:	69bb      	ldr	r3, [r7, #24]
 8012ef6:	799b      	ldrb	r3, [r3, #6]
 8012ef8:	461a      	mov	r2, r3
 8012efa:	0152      	lsls	r2, r2, #5
 8012efc:	1ad2      	subs	r2, r2, r3
 8012efe:	0092      	lsls	r2, r2, #2
 8012f00:	4413      	add	r3, r2
 8012f02:	00db      	lsls	r3, r3, #3
 8012f04:	b29b      	uxth	r3, r3
 8012f06:	e001      	b.n	8012f0c <dhcp_reboot+0x144>
 8012f08:	f242 7310 	movw	r3, #10000	@ 0x2710
 8012f0c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012f0e:	89fb      	ldrh	r3, [r7, #14]
 8012f10:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8012f14:	4a0a      	ldr	r2, [pc, #40]	@ (8012f40 <dhcp_reboot+0x178>)
 8012f16:	fb82 1203 	smull	r1, r2, r2, r3
 8012f1a:	1152      	asrs	r2, r2, #5
 8012f1c:	17db      	asrs	r3, r3, #31
 8012f1e:	1ad3      	subs	r3, r2, r3
 8012f20:	b29a      	uxth	r2, r3
 8012f22:	69bb      	ldr	r3, [r7, #24]
 8012f24:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012f26:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	3720      	adds	r7, #32
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	bdb0      	pop	{r4, r5, r7, pc}
 8012f32:	bf00      	nop
 8012f34:	20000034 	.word	0x20000034
 8012f38:	2000cb44 	.word	0x2000cb44
 8012f3c:	0801b6b0 	.word	0x0801b6b0
 8012f40:	10624dd3 	.word	0x10624dd3

08012f44 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8012f44:	b5b0      	push	{r4, r5, r7, lr}
 8012f46:	b08a      	sub	sp, #40	@ 0x28
 8012f48:	af02      	add	r7, sp, #8
 8012f4a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012f50:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8012f52:	69fb      	ldr	r3, [r7, #28]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	f000 8084 	beq.w	8013062 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8012f5a:	69fb      	ldr	r3, [r7, #28]
 8012f5c:	795b      	ldrb	r3, [r3, #5]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	f000 8081 	beq.w	8013066 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8012f64:	69fb      	ldr	r3, [r7, #28]
 8012f66:	699b      	ldr	r3, [r3, #24]
 8012f68:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8012f6a:	69fb      	ldr	r3, [r7, #28]
 8012f6c:	2200      	movs	r2, #0
 8012f6e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8012f70:	69fb      	ldr	r3, [r7, #28]
 8012f72:	2200      	movs	r2, #0
 8012f74:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8012f76:	69fb      	ldr	r3, [r7, #28]
 8012f78:	2200      	movs	r2, #0
 8012f7a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8012f7c:	69fb      	ldr	r3, [r7, #28]
 8012f7e:	2200      	movs	r2, #0
 8012f80:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8012f82:	69fb      	ldr	r3, [r7, #28]
 8012f84:	2200      	movs	r2, #0
 8012f86:	631a      	str	r2, [r3, #48]	@ 0x30
 8012f88:	69fb      	ldr	r3, [r7, #28]
 8012f8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012f8c:	69fb      	ldr	r3, [r7, #28]
 8012f8e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012f90:	69fb      	ldr	r3, [r7, #28]
 8012f92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012f94:	69fb      	ldr	r3, [r7, #28]
 8012f96:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8012f98:	69fb      	ldr	r3, [r7, #28]
 8012f9a:	2200      	movs	r2, #0
 8012f9c:	829a      	strh	r2, [r3, #20]
 8012f9e:	69fb      	ldr	r3, [r7, #28]
 8012fa0:	8a9a      	ldrh	r2, [r3, #20]
 8012fa2:	69fb      	ldr	r3, [r7, #28]
 8012fa4:	825a      	strh	r2, [r3, #18]
 8012fa6:	69fb      	ldr	r3, [r7, #28]
 8012fa8:	8a5a      	ldrh	r2, [r3, #18]
 8012faa:	69fb      	ldr	r3, [r7, #28]
 8012fac:	821a      	strh	r2, [r3, #16]
 8012fae:	69fb      	ldr	r3, [r7, #28]
 8012fb0:	8a1a      	ldrh	r2, [r3, #16]
 8012fb2:	69fb      	ldr	r3, [r7, #28]
 8012fb4:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8012fb6:	6878      	ldr	r0, [r7, #4]
 8012fb8:	f000 fe4a 	bl	8013c50 <dhcp_supplied_address>
 8012fbc:	4603      	mov	r3, r0
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d03b      	beq.n	801303a <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8012fc2:	f107 030e 	add.w	r3, r7, #14
 8012fc6:	2207      	movs	r2, #7
 8012fc8:	69f9      	ldr	r1, [r7, #28]
 8012fca:	6878      	ldr	r0, [r7, #4]
 8012fcc:	f000 fd3c 	bl	8013a48 <dhcp_create_msg>
 8012fd0:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8012fd2:	69bb      	ldr	r3, [r7, #24]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d030      	beq.n	801303a <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012fd8:	69bb      	ldr	r3, [r7, #24]
 8012fda:	685b      	ldr	r3, [r3, #4]
 8012fdc:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8012fde:	89f8      	ldrh	r0, [r7, #14]
 8012fe0:	697b      	ldr	r3, [r7, #20]
 8012fe2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012fe6:	2304      	movs	r3, #4
 8012fe8:	2236      	movs	r2, #54	@ 0x36
 8012fea:	f000 f85f 	bl	80130ac <dhcp_option>
 8012fee:	4603      	mov	r3, r0
 8012ff0:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8012ff2:	89fc      	ldrh	r4, [r7, #14]
 8012ff4:	697b      	ldr	r3, [r7, #20]
 8012ff6:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8012ffa:	693b      	ldr	r3, [r7, #16]
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	f7f6 ffaa 	bl	8009f56 <lwip_htonl>
 8013002:	4603      	mov	r3, r0
 8013004:	461a      	mov	r2, r3
 8013006:	4629      	mov	r1, r5
 8013008:	4620      	mov	r0, r4
 801300a:	f000 f8db 	bl	80131c4 <dhcp_option_long>
 801300e:	4603      	mov	r3, r0
 8013010:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013012:	89f8      	ldrh	r0, [r7, #14]
 8013014:	697b      	ldr	r3, [r7, #20]
 8013016:	33f0      	adds	r3, #240	@ 0xf0
 8013018:	69ba      	ldr	r2, [r7, #24]
 801301a:	4619      	mov	r1, r3
 801301c:	f000 fdea 	bl	8013bf4 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013020:	4b13      	ldr	r3, [pc, #76]	@ (8013070 <dhcp_release_and_stop+0x12c>)
 8013022:	6818      	ldr	r0, [r3, #0]
 8013024:	f107 0210 	add.w	r2, r7, #16
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	9300      	str	r3, [sp, #0]
 801302c:	2343      	movs	r3, #67	@ 0x43
 801302e:	69b9      	ldr	r1, [r7, #24]
 8013030:	f7fe fc0e 	bl	8011850 <udp_sendto_if>
      pbuf_free(p_out);
 8013034:	69b8      	ldr	r0, [r7, #24]
 8013036:	f7f8 fccd 	bl	800b9d4 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801303a:	4b0e      	ldr	r3, [pc, #56]	@ (8013074 <dhcp_release_and_stop+0x130>)
 801303c:	4a0d      	ldr	r2, [pc, #52]	@ (8013074 <dhcp_release_and_stop+0x130>)
 801303e:	490d      	ldr	r1, [pc, #52]	@ (8013074 <dhcp_release_and_stop+0x130>)
 8013040:	6878      	ldr	r0, [r7, #4]
 8013042:	f7f7 ff13 	bl	800ae6c <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8013046:	2100      	movs	r1, #0
 8013048:	69f8      	ldr	r0, [r7, #28]
 801304a:	f000 f815 	bl	8013078 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801304e:	69fb      	ldr	r3, [r7, #28]
 8013050:	791b      	ldrb	r3, [r3, #4]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d008      	beq.n	8013068 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8013056:	f7fe ff65 	bl	8011f24 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801305a:	69fb      	ldr	r3, [r7, #28]
 801305c:	2200      	movs	r2, #0
 801305e:	711a      	strb	r2, [r3, #4]
 8013060:	e002      	b.n	8013068 <dhcp_release_and_stop+0x124>
    return;
 8013062:	bf00      	nop
 8013064:	e000      	b.n	8013068 <dhcp_release_and_stop+0x124>
    return;
 8013066:	bf00      	nop
  }
}
 8013068:	3720      	adds	r7, #32
 801306a:	46bd      	mov	sp, r7
 801306c:	bdb0      	pop	{r4, r5, r7, pc}
 801306e:	bf00      	nop
 8013070:	2000cb44 	.word	0x2000cb44
 8013074:	0801b6ac 	.word	0x0801b6ac

08013078 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8013078:	b480      	push	{r7}
 801307a:	b083      	sub	sp, #12
 801307c:	af00      	add	r7, sp, #0
 801307e:	6078      	str	r0, [r7, #4]
 8013080:	460b      	mov	r3, r1
 8013082:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	795b      	ldrb	r3, [r3, #5]
 8013088:	78fa      	ldrb	r2, [r7, #3]
 801308a:	429a      	cmp	r2, r3
 801308c:	d008      	beq.n	80130a0 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	78fa      	ldrb	r2, [r7, #3]
 8013092:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	2200      	movs	r2, #0
 8013098:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	2200      	movs	r2, #0
 801309e:	811a      	strh	r2, [r3, #8]
  }
}
 80130a0:	bf00      	nop
 80130a2:	370c      	adds	r7, #12
 80130a4:	46bd      	mov	sp, r7
 80130a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130aa:	4770      	bx	lr

080130ac <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80130ac:	b580      	push	{r7, lr}
 80130ae:	b082      	sub	sp, #8
 80130b0:	af00      	add	r7, sp, #0
 80130b2:	6039      	str	r1, [r7, #0]
 80130b4:	4611      	mov	r1, r2
 80130b6:	461a      	mov	r2, r3
 80130b8:	4603      	mov	r3, r0
 80130ba:	80fb      	strh	r3, [r7, #6]
 80130bc:	460b      	mov	r3, r1
 80130be:	717b      	strb	r3, [r7, #5]
 80130c0:	4613      	mov	r3, r2
 80130c2:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80130c4:	88fa      	ldrh	r2, [r7, #6]
 80130c6:	793b      	ldrb	r3, [r7, #4]
 80130c8:	4413      	add	r3, r2
 80130ca:	3302      	adds	r3, #2
 80130cc:	2b44      	cmp	r3, #68	@ 0x44
 80130ce:	d906      	bls.n	80130de <dhcp_option+0x32>
 80130d0:	4b0d      	ldr	r3, [pc, #52]	@ (8013108 <dhcp_option+0x5c>)
 80130d2:	f240 529a 	movw	r2, #1434	@ 0x59a
 80130d6:	490d      	ldr	r1, [pc, #52]	@ (801310c <dhcp_option+0x60>)
 80130d8:	480d      	ldr	r0, [pc, #52]	@ (8013110 <dhcp_option+0x64>)
 80130da:	f003 fed3 	bl	8016e84 <iprintf>
  options[options_out_len++] = option_type;
 80130de:	88fb      	ldrh	r3, [r7, #6]
 80130e0:	1c5a      	adds	r2, r3, #1
 80130e2:	80fa      	strh	r2, [r7, #6]
 80130e4:	461a      	mov	r2, r3
 80130e6:	683b      	ldr	r3, [r7, #0]
 80130e8:	4413      	add	r3, r2
 80130ea:	797a      	ldrb	r2, [r7, #5]
 80130ec:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80130ee:	88fb      	ldrh	r3, [r7, #6]
 80130f0:	1c5a      	adds	r2, r3, #1
 80130f2:	80fa      	strh	r2, [r7, #6]
 80130f4:	461a      	mov	r2, r3
 80130f6:	683b      	ldr	r3, [r7, #0]
 80130f8:	4413      	add	r3, r2
 80130fa:	793a      	ldrb	r2, [r7, #4]
 80130fc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80130fe:	88fb      	ldrh	r3, [r7, #6]
}
 8013100:	4618      	mov	r0, r3
 8013102:	3708      	adds	r7, #8
 8013104:	46bd      	mov	sp, r7
 8013106:	bd80      	pop	{r7, pc}
 8013108:	0801a770 	.word	0x0801a770
 801310c:	0801a904 	.word	0x0801a904
 8013110:	0801a7d0 	.word	0x0801a7d0

08013114 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8013114:	b580      	push	{r7, lr}
 8013116:	b082      	sub	sp, #8
 8013118:	af00      	add	r7, sp, #0
 801311a:	4603      	mov	r3, r0
 801311c:	6039      	str	r1, [r7, #0]
 801311e:	80fb      	strh	r3, [r7, #6]
 8013120:	4613      	mov	r3, r2
 8013122:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8013124:	88fb      	ldrh	r3, [r7, #6]
 8013126:	2b43      	cmp	r3, #67	@ 0x43
 8013128:	d906      	bls.n	8013138 <dhcp_option_byte+0x24>
 801312a:	4b0a      	ldr	r3, [pc, #40]	@ (8013154 <dhcp_option_byte+0x40>)
 801312c:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 8013130:	4909      	ldr	r1, [pc, #36]	@ (8013158 <dhcp_option_byte+0x44>)
 8013132:	480a      	ldr	r0, [pc, #40]	@ (801315c <dhcp_option_byte+0x48>)
 8013134:	f003 fea6 	bl	8016e84 <iprintf>
  options[options_out_len++] = value;
 8013138:	88fb      	ldrh	r3, [r7, #6]
 801313a:	1c5a      	adds	r2, r3, #1
 801313c:	80fa      	strh	r2, [r7, #6]
 801313e:	461a      	mov	r2, r3
 8013140:	683b      	ldr	r3, [r7, #0]
 8013142:	4413      	add	r3, r2
 8013144:	797a      	ldrb	r2, [r7, #5]
 8013146:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013148:	88fb      	ldrh	r3, [r7, #6]
}
 801314a:	4618      	mov	r0, r3
 801314c:	3708      	adds	r7, #8
 801314e:	46bd      	mov	sp, r7
 8013150:	bd80      	pop	{r7, pc}
 8013152:	bf00      	nop
 8013154:	0801a770 	.word	0x0801a770
 8013158:	0801a948 	.word	0x0801a948
 801315c:	0801a7d0 	.word	0x0801a7d0

08013160 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8013160:	b580      	push	{r7, lr}
 8013162:	b082      	sub	sp, #8
 8013164:	af00      	add	r7, sp, #0
 8013166:	4603      	mov	r3, r0
 8013168:	6039      	str	r1, [r7, #0]
 801316a:	80fb      	strh	r3, [r7, #6]
 801316c:	4613      	mov	r3, r2
 801316e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8013170:	88fb      	ldrh	r3, [r7, #6]
 8013172:	3302      	adds	r3, #2
 8013174:	2b44      	cmp	r3, #68	@ 0x44
 8013176:	d906      	bls.n	8013186 <dhcp_option_short+0x26>
 8013178:	4b0f      	ldr	r3, [pc, #60]	@ (80131b8 <dhcp_option_short+0x58>)
 801317a:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 801317e:	490f      	ldr	r1, [pc, #60]	@ (80131bc <dhcp_option_short+0x5c>)
 8013180:	480f      	ldr	r0, [pc, #60]	@ (80131c0 <dhcp_option_short+0x60>)
 8013182:	f003 fe7f 	bl	8016e84 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8013186:	88bb      	ldrh	r3, [r7, #4]
 8013188:	0a1b      	lsrs	r3, r3, #8
 801318a:	b29a      	uxth	r2, r3
 801318c:	88fb      	ldrh	r3, [r7, #6]
 801318e:	1c59      	adds	r1, r3, #1
 8013190:	80f9      	strh	r1, [r7, #6]
 8013192:	4619      	mov	r1, r3
 8013194:	683b      	ldr	r3, [r7, #0]
 8013196:	440b      	add	r3, r1
 8013198:	b2d2      	uxtb	r2, r2
 801319a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801319c:	88fb      	ldrh	r3, [r7, #6]
 801319e:	1c5a      	adds	r2, r3, #1
 80131a0:	80fa      	strh	r2, [r7, #6]
 80131a2:	461a      	mov	r2, r3
 80131a4:	683b      	ldr	r3, [r7, #0]
 80131a6:	4413      	add	r3, r2
 80131a8:	88ba      	ldrh	r2, [r7, #4]
 80131aa:	b2d2      	uxtb	r2, r2
 80131ac:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80131ae:	88fb      	ldrh	r3, [r7, #6]
}
 80131b0:	4618      	mov	r0, r3
 80131b2:	3708      	adds	r7, #8
 80131b4:	46bd      	mov	sp, r7
 80131b6:	bd80      	pop	{r7, pc}
 80131b8:	0801a770 	.word	0x0801a770
 80131bc:	0801a980 	.word	0x0801a980
 80131c0:	0801a7d0 	.word	0x0801a7d0

080131c4 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80131c4:	b580      	push	{r7, lr}
 80131c6:	b084      	sub	sp, #16
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	4603      	mov	r3, r0
 80131cc:	60b9      	str	r1, [r7, #8]
 80131ce:	607a      	str	r2, [r7, #4]
 80131d0:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80131d2:	89fb      	ldrh	r3, [r7, #14]
 80131d4:	3304      	adds	r3, #4
 80131d6:	2b44      	cmp	r3, #68	@ 0x44
 80131d8:	d906      	bls.n	80131e8 <dhcp_option_long+0x24>
 80131da:	4b19      	ldr	r3, [pc, #100]	@ (8013240 <dhcp_option_long+0x7c>)
 80131dc:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 80131e0:	4918      	ldr	r1, [pc, #96]	@ (8013244 <dhcp_option_long+0x80>)
 80131e2:	4819      	ldr	r0, [pc, #100]	@ (8013248 <dhcp_option_long+0x84>)
 80131e4:	f003 fe4e 	bl	8016e84 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	0e1a      	lsrs	r2, r3, #24
 80131ec:	89fb      	ldrh	r3, [r7, #14]
 80131ee:	1c59      	adds	r1, r3, #1
 80131f0:	81f9      	strh	r1, [r7, #14]
 80131f2:	4619      	mov	r1, r3
 80131f4:	68bb      	ldr	r3, [r7, #8]
 80131f6:	440b      	add	r3, r1
 80131f8:	b2d2      	uxtb	r2, r2
 80131fa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	0c1a      	lsrs	r2, r3, #16
 8013200:	89fb      	ldrh	r3, [r7, #14]
 8013202:	1c59      	adds	r1, r3, #1
 8013204:	81f9      	strh	r1, [r7, #14]
 8013206:	4619      	mov	r1, r3
 8013208:	68bb      	ldr	r3, [r7, #8]
 801320a:	440b      	add	r3, r1
 801320c:	b2d2      	uxtb	r2, r2
 801320e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	0a1a      	lsrs	r2, r3, #8
 8013214:	89fb      	ldrh	r3, [r7, #14]
 8013216:	1c59      	adds	r1, r3, #1
 8013218:	81f9      	strh	r1, [r7, #14]
 801321a:	4619      	mov	r1, r3
 801321c:	68bb      	ldr	r3, [r7, #8]
 801321e:	440b      	add	r3, r1
 8013220:	b2d2      	uxtb	r2, r2
 8013222:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8013224:	89fb      	ldrh	r3, [r7, #14]
 8013226:	1c5a      	adds	r2, r3, #1
 8013228:	81fa      	strh	r2, [r7, #14]
 801322a:	461a      	mov	r2, r3
 801322c:	68bb      	ldr	r3, [r7, #8]
 801322e:	4413      	add	r3, r2
 8013230:	687a      	ldr	r2, [r7, #4]
 8013232:	b2d2      	uxtb	r2, r2
 8013234:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013236:	89fb      	ldrh	r3, [r7, #14]
}
 8013238:	4618      	mov	r0, r3
 801323a:	3710      	adds	r7, #16
 801323c:	46bd      	mov	sp, r7
 801323e:	bd80      	pop	{r7, pc}
 8013240:	0801a770 	.word	0x0801a770
 8013244:	0801a9bc 	.word	0x0801a9bc
 8013248:	0801a7d0 	.word	0x0801a7d0

0801324c <dhcp_option_hostname>:

#if LWIP_NETIF_HOSTNAME
static u16_t
dhcp_option_hostname(u16_t options_out_len, u8_t *options, struct netif *netif)
{
 801324c:	b580      	push	{r7, lr}
 801324e:	b088      	sub	sp, #32
 8013250:	af00      	add	r7, sp, #0
 8013252:	4603      	mov	r3, r0
 8013254:	60b9      	str	r1, [r7, #8]
 8013256:	607a      	str	r2, [r7, #4]
 8013258:	81fb      	strh	r3, [r7, #14]
  if (netif->hostname != NULL) {
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801325e:	2b00      	cmp	r3, #0
 8013260:	d044      	beq.n	80132ec <dhcp_option_hostname+0xa0>
    size_t namelen = strlen(netif->hostname);
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013266:	4618      	mov	r0, r3
 8013268:	f7ec ffc2 	bl	80001f0 <strlen>
 801326c:	6178      	str	r0, [r7, #20]
    if (namelen > 0) {
 801326e:	697b      	ldr	r3, [r7, #20]
 8013270:	2b00      	cmp	r3, #0
 8013272:	d03b      	beq.n	80132ec <dhcp_option_hostname+0xa0>
      size_t len;
      const char *p = netif->hostname;
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013278:	61bb      	str	r3, [r7, #24]
      /* Shrink len to available bytes (need 2 bytes for OPTION_HOSTNAME
         and 1 byte for trailer) */
      size_t available = DHCP_OPTIONS_LEN - options_out_len - 3;
 801327a:	89fb      	ldrh	r3, [r7, #14]
 801327c:	f1c3 0341 	rsb	r3, r3, #65	@ 0x41
 8013280:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("DHCP: hostname is too long!", namelen <= available);
 8013282:	697a      	ldr	r2, [r7, #20]
 8013284:	693b      	ldr	r3, [r7, #16]
 8013286:	429a      	cmp	r2, r3
 8013288:	d906      	bls.n	8013298 <dhcp_option_hostname+0x4c>
 801328a:	4b1b      	ldr	r3, [pc, #108]	@ (80132f8 <dhcp_option_hostname+0xac>)
 801328c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8013290:	491a      	ldr	r1, [pc, #104]	@ (80132fc <dhcp_option_hostname+0xb0>)
 8013292:	481b      	ldr	r0, [pc, #108]	@ (8013300 <dhcp_option_hostname+0xb4>)
 8013294:	f003 fdf6 	bl	8016e84 <iprintf>
      len = LWIP_MIN(namelen, available);
 8013298:	693a      	ldr	r2, [r7, #16]
 801329a:	697b      	ldr	r3, [r7, #20]
 801329c:	4293      	cmp	r3, r2
 801329e:	bf28      	it	cs
 80132a0:	4613      	movcs	r3, r2
 80132a2:	61fb      	str	r3, [r7, #28]
      LWIP_ASSERT("DHCP: hostname is too long!", len <= 0xFF);
 80132a4:	69fb      	ldr	r3, [r7, #28]
 80132a6:	2bff      	cmp	r3, #255	@ 0xff
 80132a8:	d906      	bls.n	80132b8 <dhcp_option_hostname+0x6c>
 80132aa:	4b13      	ldr	r3, [pc, #76]	@ (80132f8 <dhcp_option_hostname+0xac>)
 80132ac:	f240 52cd 	movw	r2, #1485	@ 0x5cd
 80132b0:	4912      	ldr	r1, [pc, #72]	@ (80132fc <dhcp_option_hostname+0xb0>)
 80132b2:	4813      	ldr	r0, [pc, #76]	@ (8013300 <dhcp_option_hostname+0xb4>)
 80132b4:	f003 fde6 	bl	8016e84 <iprintf>
      options_out_len = dhcp_option(options_out_len, options, DHCP_OPTION_HOSTNAME, (u8_t)len);
 80132b8:	69fb      	ldr	r3, [r7, #28]
 80132ba:	b2db      	uxtb	r3, r3
 80132bc:	89f8      	ldrh	r0, [r7, #14]
 80132be:	220c      	movs	r2, #12
 80132c0:	68b9      	ldr	r1, [r7, #8]
 80132c2:	f7ff fef3 	bl	80130ac <dhcp_option>
 80132c6:	4603      	mov	r3, r0
 80132c8:	81fb      	strh	r3, [r7, #14]
      while (len--) {
 80132ca:	e00a      	b.n	80132e2 <dhcp_option_hostname+0x96>
        options_out_len = dhcp_option_byte(options_out_len, options, *p++);
 80132cc:	69bb      	ldr	r3, [r7, #24]
 80132ce:	1c5a      	adds	r2, r3, #1
 80132d0:	61ba      	str	r2, [r7, #24]
 80132d2:	781a      	ldrb	r2, [r3, #0]
 80132d4:	89fb      	ldrh	r3, [r7, #14]
 80132d6:	68b9      	ldr	r1, [r7, #8]
 80132d8:	4618      	mov	r0, r3
 80132da:	f7ff ff1b 	bl	8013114 <dhcp_option_byte>
 80132de:	4603      	mov	r3, r0
 80132e0:	81fb      	strh	r3, [r7, #14]
      while (len--) {
 80132e2:	69fb      	ldr	r3, [r7, #28]
 80132e4:	1e5a      	subs	r2, r3, #1
 80132e6:	61fa      	str	r2, [r7, #28]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d1ef      	bne.n	80132cc <dhcp_option_hostname+0x80>
      }
    }
  }
  return options_out_len;
 80132ec:	89fb      	ldrh	r3, [r7, #14]
}
 80132ee:	4618      	mov	r0, r3
 80132f0:	3720      	adds	r7, #32
 80132f2:	46bd      	mov	sp, r7
 80132f4:	bd80      	pop	{r7, pc}
 80132f6:	bf00      	nop
 80132f8:	0801a770 	.word	0x0801a770
 80132fc:	0801a9f8 	.word	0x0801a9f8
 8013300:	0801a7d0 	.word	0x0801a7d0

08013304 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8013304:	b580      	push	{r7, lr}
 8013306:	b090      	sub	sp, #64	@ 0x40
 8013308:	af00      	add	r7, sp, #0
 801330a:	6078      	str	r0, [r7, #4]
 801330c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801330e:	2300      	movs	r3, #0
 8013310:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 8013312:	2300      	movs	r3, #0
 8013314:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8013316:	2208      	movs	r2, #8
 8013318:	2100      	movs	r1, #0
 801331a:	48b5      	ldr	r0, [pc, #724]	@ (80135f0 <dhcp_parse_reply+0x2ec>)
 801331c:	f003 ff44 	bl	80171a8 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	895b      	ldrh	r3, [r3, #10]
 8013324:	2b2b      	cmp	r3, #43	@ 0x2b
 8013326:	d802      	bhi.n	801332e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8013328:	f06f 0301 	mvn.w	r3, #1
 801332c:	e2a7      	b.n	801387e <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	685b      	ldr	r3, [r3, #4]
 8013332:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8013334:	23f0      	movs	r3, #240	@ 0xf0
 8013336:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	891b      	ldrh	r3, [r3, #8]
 801333c:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8013342:	e00c      	b.n	801335e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8013344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013346:	895b      	ldrh	r3, [r3, #10]
 8013348:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801334a:	1ad3      	subs	r3, r2, r3
 801334c:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801334e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013350:	895b      	ldrh	r3, [r3, #10]
 8013352:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8013354:	1ad3      	subs	r3, r2, r3
 8013356:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 8013358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801335e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013360:	2b00      	cmp	r3, #0
 8013362:	d004      	beq.n	801336e <dhcp_parse_reply+0x6a>
 8013364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013366:	895b      	ldrh	r3, [r3, #10]
 8013368:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801336a:	429a      	cmp	r2, r3
 801336c:	d2ea      	bcs.n	8013344 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801336e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013370:	2b00      	cmp	r3, #0
 8013372:	d102      	bne.n	801337a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8013374:	f06f 0301 	mvn.w	r3, #1
 8013378:	e281      	b.n	801387e <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 801337a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801337c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 801337e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8013380:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 8013382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013384:	685b      	ldr	r3, [r3, #4]
 8013386:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013388:	e239      	b.n	80137fe <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 801338a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801338c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801338e:	4413      	add	r3, r2
 8013390:	781b      	ldrb	r3, [r3, #0]
 8013392:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8013394:	2300      	movs	r3, #0
 8013396:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 801339a:	f04f 33ff 	mov.w	r3, #4294967295
 801339e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80133a0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80133a2:	3302      	adds	r3, #2
 80133a4:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 80133a6:	8bfa      	ldrh	r2, [r7, #30]
 80133a8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80133aa:	429a      	cmp	r2, r3
 80133ac:	d202      	bcs.n	80133b4 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 80133ae:	f06f 0301 	mvn.w	r3, #1
 80133b2:	e264      	b.n	801387e <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80133b4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80133b6:	3301      	adds	r3, #1
 80133b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80133ba:	8952      	ldrh	r2, [r2, #10]
 80133bc:	4293      	cmp	r3, r2
 80133be:	da07      	bge.n	80133d0 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 80133c0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80133c2:	3301      	adds	r3, #1
 80133c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80133c6:	4413      	add	r3, r2
 80133c8:	781b      	ldrb	r3, [r3, #0]
 80133ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80133ce:	e00b      	b.n	80133e8 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80133d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d004      	beq.n	80133e2 <dhcp_parse_reply+0xde>
 80133d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	685b      	ldr	r3, [r3, #4]
 80133de:	781b      	ldrb	r3, [r3, #0]
 80133e0:	e000      	b.n	80133e4 <dhcp_parse_reply+0xe0>
 80133e2:	2300      	movs	r3, #0
 80133e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 80133e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80133ec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 80133f0:	7dfb      	ldrb	r3, [r7, #23]
 80133f2:	2b3b      	cmp	r3, #59	@ 0x3b
 80133f4:	f200 812c 	bhi.w	8013650 <dhcp_parse_reply+0x34c>
 80133f8:	a201      	add	r2, pc, #4	@ (adr r2, 8013400 <dhcp_parse_reply+0xfc>)
 80133fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133fe:	bf00      	nop
 8013400:	080134f1 	.word	0x080134f1
 8013404:	08013501 	.word	0x08013501
 8013408:	08013651 	.word	0x08013651
 801340c:	08013523 	.word	0x08013523
 8013410:	08013651 	.word	0x08013651
 8013414:	08013651 	.word	0x08013651
 8013418:	08013651 	.word	0x08013651
 801341c:	08013651 	.word	0x08013651
 8013420:	08013651 	.word	0x08013651
 8013424:	08013651 	.word	0x08013651
 8013428:	08013651 	.word	0x08013651
 801342c:	08013651 	.word	0x08013651
 8013430:	08013651 	.word	0x08013651
 8013434:	08013651 	.word	0x08013651
 8013438:	08013651 	.word	0x08013651
 801343c:	08013651 	.word	0x08013651
 8013440:	08013651 	.word	0x08013651
 8013444:	08013651 	.word	0x08013651
 8013448:	08013651 	.word	0x08013651
 801344c:	08013651 	.word	0x08013651
 8013450:	08013651 	.word	0x08013651
 8013454:	08013651 	.word	0x08013651
 8013458:	08013651 	.word	0x08013651
 801345c:	08013651 	.word	0x08013651
 8013460:	08013651 	.word	0x08013651
 8013464:	08013651 	.word	0x08013651
 8013468:	08013651 	.word	0x08013651
 801346c:	08013651 	.word	0x08013651
 8013470:	08013651 	.word	0x08013651
 8013474:	08013651 	.word	0x08013651
 8013478:	08013651 	.word	0x08013651
 801347c:	08013651 	.word	0x08013651
 8013480:	08013651 	.word	0x08013651
 8013484:	08013651 	.word	0x08013651
 8013488:	08013651 	.word	0x08013651
 801348c:	08013651 	.word	0x08013651
 8013490:	08013651 	.word	0x08013651
 8013494:	08013651 	.word	0x08013651
 8013498:	08013651 	.word	0x08013651
 801349c:	08013651 	.word	0x08013651
 80134a0:	08013651 	.word	0x08013651
 80134a4:	08013651 	.word	0x08013651
 80134a8:	08013651 	.word	0x08013651
 80134ac:	08013651 	.word	0x08013651
 80134b0:	08013651 	.word	0x08013651
 80134b4:	08013651 	.word	0x08013651
 80134b8:	08013651 	.word	0x08013651
 80134bc:	08013651 	.word	0x08013651
 80134c0:	08013651 	.word	0x08013651
 80134c4:	08013651 	.word	0x08013651
 80134c8:	08013651 	.word	0x08013651
 80134cc:	0801354f 	.word	0x0801354f
 80134d0:	08013571 	.word	0x08013571
 80134d4:	080135ad 	.word	0x080135ad
 80134d8:	080135cf 	.word	0x080135cf
 80134dc:	08013651 	.word	0x08013651
 80134e0:	08013651 	.word	0x08013651
 80134e4:	08013651 	.word	0x08013651
 80134e8:	0801360d 	.word	0x0801360d
 80134ec:	0801362f 	.word	0x0801362f
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80134f0:	2300      	movs	r3, #0
 80134f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80134f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80134fa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 80134fe:	e0ab      	b.n	8013658 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013500:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013504:	2b04      	cmp	r3, #4
 8013506:	d009      	beq.n	801351c <dhcp_parse_reply+0x218>
 8013508:	4b3a      	ldr	r3, [pc, #232]	@ (80135f4 <dhcp_parse_reply+0x2f0>)
 801350a:	f240 622e 	movw	r2, #1582	@ 0x62e
 801350e:	493a      	ldr	r1, [pc, #232]	@ (80135f8 <dhcp_parse_reply+0x2f4>)
 8013510:	483a      	ldr	r0, [pc, #232]	@ (80135fc <dhcp_parse_reply+0x2f8>)
 8013512:	f003 fcb7 	bl	8016e84 <iprintf>
 8013516:	f06f 0305 	mvn.w	r3, #5
 801351a:	e1b0      	b.n	801387e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801351c:	2306      	movs	r3, #6
 801351e:	623b      	str	r3, [r7, #32]
        break;
 8013520:	e09a      	b.n	8013658 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8013522:	2304      	movs	r3, #4
 8013524:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8013528:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801352c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013530:	429a      	cmp	r2, r3
 8013532:	d209      	bcs.n	8013548 <dhcp_parse_reply+0x244>
 8013534:	4b2f      	ldr	r3, [pc, #188]	@ (80135f4 <dhcp_parse_reply+0x2f0>)
 8013536:	f240 6233 	movw	r2, #1587	@ 0x633
 801353a:	4931      	ldr	r1, [pc, #196]	@ (8013600 <dhcp_parse_reply+0x2fc>)
 801353c:	482f      	ldr	r0, [pc, #188]	@ (80135fc <dhcp_parse_reply+0x2f8>)
 801353e:	f003 fca1 	bl	8016e84 <iprintf>
 8013542:	f06f 0305 	mvn.w	r3, #5
 8013546:	e19a      	b.n	801387e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8013548:	2307      	movs	r3, #7
 801354a:	623b      	str	r3, [r7, #32]
        break;
 801354c:	e084      	b.n	8013658 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801354e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013552:	2b04      	cmp	r3, #4
 8013554:	d009      	beq.n	801356a <dhcp_parse_reply+0x266>
 8013556:	4b27      	ldr	r3, [pc, #156]	@ (80135f4 <dhcp_parse_reply+0x2f0>)
 8013558:	f240 6241 	movw	r2, #1601	@ 0x641
 801355c:	4926      	ldr	r1, [pc, #152]	@ (80135f8 <dhcp_parse_reply+0x2f4>)
 801355e:	4827      	ldr	r0, [pc, #156]	@ (80135fc <dhcp_parse_reply+0x2f8>)
 8013560:	f003 fc90 	bl	8016e84 <iprintf>
 8013564:	f06f 0305 	mvn.w	r3, #5
 8013568:	e189      	b.n	801387e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801356a:	2303      	movs	r3, #3
 801356c:	623b      	str	r3, [r7, #32]
        break;
 801356e:	e073      	b.n	8013658 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8013570:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013574:	2b01      	cmp	r3, #1
 8013576:	d009      	beq.n	801358c <dhcp_parse_reply+0x288>
 8013578:	4b1e      	ldr	r3, [pc, #120]	@ (80135f4 <dhcp_parse_reply+0x2f0>)
 801357a:	f240 624f 	movw	r2, #1615	@ 0x64f
 801357e:	4921      	ldr	r1, [pc, #132]	@ (8013604 <dhcp_parse_reply+0x300>)
 8013580:	481e      	ldr	r0, [pc, #120]	@ (80135fc <dhcp_parse_reply+0x2f8>)
 8013582:	f003 fc7f 	bl	8016e84 <iprintf>
 8013586:	f06f 0305 	mvn.w	r3, #5
 801358a:	e178      	b.n	801387e <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801358c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801358e:	2bf0      	cmp	r3, #240	@ 0xf0
 8013590:	d009      	beq.n	80135a6 <dhcp_parse_reply+0x2a2>
 8013592:	4b18      	ldr	r3, [pc, #96]	@ (80135f4 <dhcp_parse_reply+0x2f0>)
 8013594:	f240 6251 	movw	r2, #1617	@ 0x651
 8013598:	491b      	ldr	r1, [pc, #108]	@ (8013608 <dhcp_parse_reply+0x304>)
 801359a:	4818      	ldr	r0, [pc, #96]	@ (80135fc <dhcp_parse_reply+0x2f8>)
 801359c:	f003 fc72 	bl	8016e84 <iprintf>
 80135a0:	f06f 0305 	mvn.w	r3, #5
 80135a4:	e16b      	b.n	801387e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80135a6:	2300      	movs	r3, #0
 80135a8:	623b      	str	r3, [r7, #32]
        break;
 80135aa:	e055      	b.n	8013658 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80135ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80135b0:	2b01      	cmp	r3, #1
 80135b2:	d009      	beq.n	80135c8 <dhcp_parse_reply+0x2c4>
 80135b4:	4b0f      	ldr	r3, [pc, #60]	@ (80135f4 <dhcp_parse_reply+0x2f0>)
 80135b6:	f240 6255 	movw	r2, #1621	@ 0x655
 80135ba:	4912      	ldr	r1, [pc, #72]	@ (8013604 <dhcp_parse_reply+0x300>)
 80135bc:	480f      	ldr	r0, [pc, #60]	@ (80135fc <dhcp_parse_reply+0x2f8>)
 80135be:	f003 fc61 	bl	8016e84 <iprintf>
 80135c2:	f06f 0305 	mvn.w	r3, #5
 80135c6:	e15a      	b.n	801387e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80135c8:	2301      	movs	r3, #1
 80135ca:	623b      	str	r3, [r7, #32]
        break;
 80135cc:	e044      	b.n	8013658 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80135ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80135d2:	2b04      	cmp	r3, #4
 80135d4:	d009      	beq.n	80135ea <dhcp_parse_reply+0x2e6>
 80135d6:	4b07      	ldr	r3, [pc, #28]	@ (80135f4 <dhcp_parse_reply+0x2f0>)
 80135d8:	f240 6259 	movw	r2, #1625	@ 0x659
 80135dc:	4906      	ldr	r1, [pc, #24]	@ (80135f8 <dhcp_parse_reply+0x2f4>)
 80135de:	4807      	ldr	r0, [pc, #28]	@ (80135fc <dhcp_parse_reply+0x2f8>)
 80135e0:	f003 fc50 	bl	8016e84 <iprintf>
 80135e4:	f06f 0305 	mvn.w	r3, #5
 80135e8:	e149      	b.n	801387e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80135ea:	2302      	movs	r3, #2
 80135ec:	623b      	str	r3, [r7, #32]
        break;
 80135ee:	e033      	b.n	8013658 <dhcp_parse_reply+0x354>
 80135f0:	2000cb3c 	.word	0x2000cb3c
 80135f4:	0801a770 	.word	0x0801a770
 80135f8:	0801aa14 	.word	0x0801aa14
 80135fc:	0801a7d0 	.word	0x0801a7d0
 8013600:	0801aa20 	.word	0x0801aa20
 8013604:	0801aa34 	.word	0x0801aa34
 8013608:	0801aa40 	.word	0x0801aa40
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801360c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013610:	2b04      	cmp	r3, #4
 8013612:	d009      	beq.n	8013628 <dhcp_parse_reply+0x324>
 8013614:	4b9c      	ldr	r3, [pc, #624]	@ (8013888 <dhcp_parse_reply+0x584>)
 8013616:	f240 625d 	movw	r2, #1629	@ 0x65d
 801361a:	499c      	ldr	r1, [pc, #624]	@ (801388c <dhcp_parse_reply+0x588>)
 801361c:	489c      	ldr	r0, [pc, #624]	@ (8013890 <dhcp_parse_reply+0x58c>)
 801361e:	f003 fc31 	bl	8016e84 <iprintf>
 8013622:	f06f 0305 	mvn.w	r3, #5
 8013626:	e12a      	b.n	801387e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8013628:	2304      	movs	r3, #4
 801362a:	623b      	str	r3, [r7, #32]
        break;
 801362c:	e014      	b.n	8013658 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801362e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013632:	2b04      	cmp	r3, #4
 8013634:	d009      	beq.n	801364a <dhcp_parse_reply+0x346>
 8013636:	4b94      	ldr	r3, [pc, #592]	@ (8013888 <dhcp_parse_reply+0x584>)
 8013638:	f240 6261 	movw	r2, #1633	@ 0x661
 801363c:	4993      	ldr	r1, [pc, #588]	@ (801388c <dhcp_parse_reply+0x588>)
 801363e:	4894      	ldr	r0, [pc, #592]	@ (8013890 <dhcp_parse_reply+0x58c>)
 8013640:	f003 fc20 	bl	8016e84 <iprintf>
 8013644:	f06f 0305 	mvn.w	r3, #5
 8013648:	e119      	b.n	801387e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 801364a:	2305      	movs	r3, #5
 801364c:	623b      	str	r3, [r7, #32]
        break;
 801364e:	e003      	b.n	8013658 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8013650:	2300      	movs	r3, #0
 8013652:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8013656:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8013658:	7dfb      	ldrb	r3, [r7, #23]
 801365a:	2b00      	cmp	r3, #0
 801365c:	d103      	bne.n	8013666 <dhcp_parse_reply+0x362>
      offset++;
 801365e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013660:	3301      	adds	r3, #1
 8013662:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8013664:	e0a1      	b.n	80137aa <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8013666:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8013668:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801366c:	4413      	add	r3, r2
 801366e:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8013672:	4293      	cmp	r3, r2
 8013674:	dd02      	ble.n	801367c <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8013676:	f06f 0301 	mvn.w	r3, #1
 801367a:	e100      	b.n	801387e <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 801367c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013680:	b29a      	uxth	r2, r3
 8013682:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013684:	4413      	add	r3, r2
 8013686:	b29b      	uxth	r3, r3
 8013688:	3302      	adds	r3, #2
 801368a:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 801368c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013690:	2b00      	cmp	r3, #0
 8013692:	f000 808a 	beq.w	80137aa <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8013696:	2300      	movs	r3, #0
 8013698:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801369a:	6a3b      	ldr	r3, [r7, #32]
 801369c:	2b00      	cmp	r3, #0
 801369e:	db02      	blt.n	80136a6 <dhcp_parse_reply+0x3a2>
 80136a0:	6a3b      	ldr	r3, [r7, #32]
 80136a2:	2b07      	cmp	r3, #7
 80136a4:	dd06      	ble.n	80136b4 <dhcp_parse_reply+0x3b0>
 80136a6:	4b78      	ldr	r3, [pc, #480]	@ (8013888 <dhcp_parse_reply+0x584>)
 80136a8:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 80136ac:	4979      	ldr	r1, [pc, #484]	@ (8013894 <dhcp_parse_reply+0x590>)
 80136ae:	4878      	ldr	r0, [pc, #480]	@ (8013890 <dhcp_parse_reply+0x58c>)
 80136b0:	f003 fbe8 	bl	8016e84 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80136b4:	4a78      	ldr	r2, [pc, #480]	@ (8013898 <dhcp_parse_reply+0x594>)
 80136b6:	6a3b      	ldr	r3, [r7, #32]
 80136b8:	4413      	add	r3, r2
 80136ba:	781b      	ldrb	r3, [r3, #0]
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d174      	bne.n	80137aa <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 80136c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80136c4:	2b04      	cmp	r3, #4
 80136c6:	bf28      	it	cs
 80136c8:	2304      	movcs	r3, #4
 80136ca:	b2db      	uxtb	r3, r3
 80136cc:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80136ce:	8bfb      	ldrh	r3, [r7, #30]
 80136d0:	8aba      	ldrh	r2, [r7, #20]
 80136d2:	f107 0108 	add.w	r1, r7, #8
 80136d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80136d8:	f7f8 fb82 	bl	800bde0 <pbuf_copy_partial>
 80136dc:	4603      	mov	r3, r0
 80136de:	461a      	mov	r2, r3
 80136e0:	8abb      	ldrh	r3, [r7, #20]
 80136e2:	4293      	cmp	r3, r2
 80136e4:	d002      	beq.n	80136ec <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 80136e6:	f06f 0301 	mvn.w	r3, #1
 80136ea:	e0c8      	b.n	801387e <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 80136ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80136f0:	2b04      	cmp	r3, #4
 80136f2:	d933      	bls.n	801375c <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80136f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80136f8:	f003 0303 	and.w	r3, r3, #3
 80136fc:	b2db      	uxtb	r3, r3
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d009      	beq.n	8013716 <dhcp_parse_reply+0x412>
 8013702:	4b61      	ldr	r3, [pc, #388]	@ (8013888 <dhcp_parse_reply+0x584>)
 8013704:	f240 6281 	movw	r2, #1665	@ 0x681
 8013708:	4964      	ldr	r1, [pc, #400]	@ (801389c <dhcp_parse_reply+0x598>)
 801370a:	4861      	ldr	r0, [pc, #388]	@ (8013890 <dhcp_parse_reply+0x58c>)
 801370c:	f003 fbba 	bl	8016e84 <iprintf>
 8013710:	f06f 0305 	mvn.w	r3, #5
 8013714:	e0b3      	b.n	801387e <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8013716:	4a60      	ldr	r2, [pc, #384]	@ (8013898 <dhcp_parse_reply+0x594>)
 8013718:	6a3b      	ldr	r3, [r7, #32]
 801371a:	4413      	add	r3, r2
 801371c:	2201      	movs	r2, #1
 801371e:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8013720:	68bb      	ldr	r3, [r7, #8]
 8013722:	4618      	mov	r0, r3
 8013724:	f7f6 fc17 	bl	8009f56 <lwip_htonl>
 8013728:	4602      	mov	r2, r0
 801372a:	495d      	ldr	r1, [pc, #372]	@ (80138a0 <dhcp_parse_reply+0x59c>)
 801372c:	6a3b      	ldr	r3, [r7, #32]
 801372e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8013732:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013736:	3b04      	subs	r3, #4
 8013738:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801373c:	8bfb      	ldrh	r3, [r7, #30]
 801373e:	3304      	adds	r3, #4
 8013740:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8013742:	8a7a      	ldrh	r2, [r7, #18]
 8013744:	8bfb      	ldrh	r3, [r7, #30]
 8013746:	429a      	cmp	r2, r3
 8013748:	d202      	bcs.n	8013750 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 801374a:	f06f 0301 	mvn.w	r3, #1
 801374e:	e096      	b.n	801387e <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8013750:	8a7b      	ldrh	r3, [r7, #18]
 8013752:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8013754:	6a3b      	ldr	r3, [r7, #32]
 8013756:	3301      	adds	r3, #1
 8013758:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801375a:	e79e      	b.n	801369a <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 801375c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013760:	2b04      	cmp	r3, #4
 8013762:	d106      	bne.n	8013772 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8013764:	68bb      	ldr	r3, [r7, #8]
 8013766:	4618      	mov	r0, r3
 8013768:	f7f6 fbf5 	bl	8009f56 <lwip_htonl>
 801376c:	4603      	mov	r3, r0
 801376e:	60bb      	str	r3, [r7, #8]
 8013770:	e011      	b.n	8013796 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8013772:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013776:	2b01      	cmp	r3, #1
 8013778:	d009      	beq.n	801378e <dhcp_parse_reply+0x48a>
 801377a:	4b43      	ldr	r3, [pc, #268]	@ (8013888 <dhcp_parse_reply+0x584>)
 801377c:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8013780:	4948      	ldr	r1, [pc, #288]	@ (80138a4 <dhcp_parse_reply+0x5a0>)
 8013782:	4843      	ldr	r0, [pc, #268]	@ (8013890 <dhcp_parse_reply+0x58c>)
 8013784:	f003 fb7e 	bl	8016e84 <iprintf>
 8013788:	f06f 0305 	mvn.w	r3, #5
 801378c:	e077      	b.n	801387e <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 801378e:	f107 0308 	add.w	r3, r7, #8
 8013792:	781b      	ldrb	r3, [r3, #0]
 8013794:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8013796:	4a40      	ldr	r2, [pc, #256]	@ (8013898 <dhcp_parse_reply+0x594>)
 8013798:	6a3b      	ldr	r3, [r7, #32]
 801379a:	4413      	add	r3, r2
 801379c:	2201      	movs	r2, #1
 801379e:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80137a0:	68ba      	ldr	r2, [r7, #8]
 80137a2:	493f      	ldr	r1, [pc, #252]	@ (80138a0 <dhcp_parse_reply+0x59c>)
 80137a4:	6a3b      	ldr	r3, [r7, #32]
 80137a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80137aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137ac:	895b      	ldrh	r3, [r3, #10]
 80137ae:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80137b0:	429a      	cmp	r2, r3
 80137b2:	d324      	bcc.n	80137fe <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 80137b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137b6:	895b      	ldrh	r3, [r3, #10]
 80137b8:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80137ba:	1ad3      	subs	r3, r2, r3
 80137bc:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80137be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137c0:	895b      	ldrh	r3, [r3, #10]
 80137c2:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80137c4:	1ad3      	subs	r3, r2, r3
 80137c6:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 80137c8:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80137ca:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80137cc:	429a      	cmp	r2, r3
 80137ce:	d213      	bcs.n	80137f8 <dhcp_parse_reply+0x4f4>
        q = q->next;
 80137d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80137d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d109      	bne.n	80137f0 <dhcp_parse_reply+0x4ec>
 80137dc:	4b2a      	ldr	r3, [pc, #168]	@ (8013888 <dhcp_parse_reply+0x584>)
 80137de:	f240 629d 	movw	r2, #1693	@ 0x69d
 80137e2:	4931      	ldr	r1, [pc, #196]	@ (80138a8 <dhcp_parse_reply+0x5a4>)
 80137e4:	482a      	ldr	r0, [pc, #168]	@ (8013890 <dhcp_parse_reply+0x58c>)
 80137e6:	f003 fb4d 	bl	8016e84 <iprintf>
 80137ea:	f06f 0305 	mvn.w	r3, #5
 80137ee:	e046      	b.n	801387e <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 80137f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137f2:	685b      	ldr	r3, [r3, #4]
 80137f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80137f6:	e002      	b.n	80137fe <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80137f8:	f06f 0301 	mvn.w	r3, #1
 80137fc:	e03f      	b.n	801387e <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80137fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013800:	2b00      	cmp	r3, #0
 8013802:	d00a      	beq.n	801381a <dhcp_parse_reply+0x516>
 8013804:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8013806:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8013808:	429a      	cmp	r2, r3
 801380a:	d206      	bcs.n	801381a <dhcp_parse_reply+0x516>
 801380c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801380e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013810:	4413      	add	r3, r2
 8013812:	781b      	ldrb	r3, [r3, #0]
 8013814:	2bff      	cmp	r3, #255	@ 0xff
 8013816:	f47f adb8 	bne.w	801338a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801381a:	4b1f      	ldr	r3, [pc, #124]	@ (8013898 <dhcp_parse_reply+0x594>)
 801381c:	781b      	ldrb	r3, [r3, #0]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d018      	beq.n	8013854 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8013822:	4b1f      	ldr	r3, [pc, #124]	@ (80138a0 <dhcp_parse_reply+0x59c>)
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8013828:	4b1b      	ldr	r3, [pc, #108]	@ (8013898 <dhcp_parse_reply+0x594>)
 801382a:	2200      	movs	r2, #0
 801382c:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	2b01      	cmp	r3, #1
 8013832:	d102      	bne.n	801383a <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8013834:	2301      	movs	r3, #1
 8013836:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013838:	e00c      	b.n	8013854 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	2b02      	cmp	r3, #2
 801383e:	d102      	bne.n	8013846 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8013840:	2301      	movs	r3, #1
 8013842:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013844:	e006      	b.n	8013854 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	2b03      	cmp	r3, #3
 801384a:	d103      	bne.n	8013854 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 801384c:	2301      	movs	r3, #1
 801384e:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 8013850:	2301      	movs	r3, #1
 8013852:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8013854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013856:	2b00      	cmp	r3, #0
 8013858:	d006      	beq.n	8013868 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801385a:	2300      	movs	r3, #0
 801385c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 801385e:	236c      	movs	r3, #108	@ 0x6c
 8013860:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8013862:	23ec      	movs	r3, #236	@ 0xec
 8013864:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8013866:	e56a      	b.n	801333e <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8013868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801386a:	2b00      	cmp	r3, #0
 801386c:	d006      	beq.n	801387c <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 801386e:	2300      	movs	r3, #0
 8013870:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 8013872:	232c      	movs	r3, #44	@ 0x2c
 8013874:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8013876:	236c      	movs	r3, #108	@ 0x6c
 8013878:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 801387a:	e560      	b.n	801333e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801387c:	2300      	movs	r3, #0
}
 801387e:	4618      	mov	r0, r3
 8013880:	3740      	adds	r7, #64	@ 0x40
 8013882:	46bd      	mov	sp, r7
 8013884:	bd80      	pop	{r7, pc}
 8013886:	bf00      	nop
 8013888:	0801a770 	.word	0x0801a770
 801388c:	0801aa14 	.word	0x0801aa14
 8013890:	0801a7d0 	.word	0x0801a7d0
 8013894:	0801aa58 	.word	0x0801aa58
 8013898:	2000cb3c 	.word	0x2000cb3c
 801389c:	0801aa6c 	.word	0x0801aa6c
 80138a0:	2000cb1c 	.word	0x2000cb1c
 80138a4:	0801aa84 	.word	0x0801aa84
 80138a8:	0801aa98 	.word	0x0801aa98

080138ac <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80138ac:	b580      	push	{r7, lr}
 80138ae:	b08a      	sub	sp, #40	@ 0x28
 80138b0:	af00      	add	r7, sp, #0
 80138b2:	60f8      	str	r0, [r7, #12]
 80138b4:	60b9      	str	r1, [r7, #8]
 80138b6:	607a      	str	r2, [r7, #4]
 80138b8:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80138ba:	4b60      	ldr	r3, [pc, #384]	@ (8013a3c <dhcp_recv+0x190>)
 80138bc:	685b      	ldr	r3, [r3, #4]
 80138be:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80138c0:	6a3b      	ldr	r3, [r7, #32]
 80138c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80138c4:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	685b      	ldr	r3, [r3, #4]
 80138ca:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80138cc:	69fb      	ldr	r3, [r7, #28]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	f000 809d 	beq.w	8013a0e <dhcp_recv+0x162>
 80138d4:	69fb      	ldr	r3, [r7, #28]
 80138d6:	791b      	ldrb	r3, [r3, #4]
 80138d8:	2b00      	cmp	r3, #0
 80138da:	f000 8098 	beq.w	8013a0e <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	895b      	ldrh	r3, [r3, #10]
 80138e2:	2b2b      	cmp	r3, #43	@ 0x2b
 80138e4:	f240 8095 	bls.w	8013a12 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80138e8:	69bb      	ldr	r3, [r7, #24]
 80138ea:	781b      	ldrb	r3, [r3, #0]
 80138ec:	2b02      	cmp	r3, #2
 80138ee:	f040 8092 	bne.w	8013a16 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80138f2:	2300      	movs	r3, #0
 80138f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80138f8:	e012      	b.n	8013920 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80138fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80138fe:	6a3a      	ldr	r2, [r7, #32]
 8013900:	4413      	add	r3, r2
 8013902:	f893 2036 	ldrb.w	r2, [r3, #54]	@ 0x36
 8013906:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801390a:	69b9      	ldr	r1, [r7, #24]
 801390c:	440b      	add	r3, r1
 801390e:	7f1b      	ldrb	r3, [r3, #28]
 8013910:	429a      	cmp	r2, r3
 8013912:	f040 8082 	bne.w	8013a1a <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013916:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801391a:	3301      	adds	r3, #1
 801391c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013920:	6a3b      	ldr	r3, [r7, #32]
 8013922:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013926:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801392a:	429a      	cmp	r2, r3
 801392c:	d203      	bcs.n	8013936 <dhcp_recv+0x8a>
 801392e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013932:	2b05      	cmp	r3, #5
 8013934:	d9e1      	bls.n	80138fa <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8013936:	69bb      	ldr	r3, [r7, #24]
 8013938:	685b      	ldr	r3, [r3, #4]
 801393a:	4618      	mov	r0, r3
 801393c:	f7f6 fb0b 	bl	8009f56 <lwip_htonl>
 8013940:	4602      	mov	r2, r0
 8013942:	69fb      	ldr	r3, [r7, #28]
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	429a      	cmp	r2, r3
 8013948:	d169      	bne.n	8013a1e <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801394a:	69f9      	ldr	r1, [r7, #28]
 801394c:	6878      	ldr	r0, [r7, #4]
 801394e:	f7ff fcd9 	bl	8013304 <dhcp_parse_reply>
 8013952:	4603      	mov	r3, r0
 8013954:	2b00      	cmp	r3, #0
 8013956:	d164      	bne.n	8013a22 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8013958:	4b39      	ldr	r3, [pc, #228]	@ (8013a40 <dhcp_recv+0x194>)
 801395a:	785b      	ldrb	r3, [r3, #1]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d062      	beq.n	8013a26 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	685b      	ldr	r3, [r3, #4]
 8013964:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8013966:	4b37      	ldr	r3, [pc, #220]	@ (8013a44 <dhcp_recv+0x198>)
 8013968:	685b      	ldr	r3, [r3, #4]
 801396a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801396c:	7cfb      	ldrb	r3, [r7, #19]
 801396e:	2b05      	cmp	r3, #5
 8013970:	d12a      	bne.n	80139c8 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8013972:	69fb      	ldr	r3, [r7, #28]
 8013974:	795b      	ldrb	r3, [r3, #5]
 8013976:	2b01      	cmp	r3, #1
 8013978:	d112      	bne.n	80139a0 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801397a:	6979      	ldr	r1, [r7, #20]
 801397c:	6a38      	ldr	r0, [r7, #32]
 801397e:	f7fe fda3 	bl	80124c8 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8013982:	6a3b      	ldr	r3, [r7, #32]
 8013984:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013988:	f003 0308 	and.w	r3, r3, #8
 801398c:	2b00      	cmp	r3, #0
 801398e:	d003      	beq.n	8013998 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8013990:	6a38      	ldr	r0, [r7, #32]
 8013992:	f7fe fb0b 	bl	8011fac <dhcp_check>
 8013996:	e049      	b.n	8013a2c <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8013998:	6a38      	ldr	r0, [r7, #32]
 801399a:	f7fe fff3 	bl	8012984 <dhcp_bind>
 801399e:	e045      	b.n	8013a2c <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80139a0:	69fb      	ldr	r3, [r7, #28]
 80139a2:	795b      	ldrb	r3, [r3, #5]
 80139a4:	2b03      	cmp	r3, #3
 80139a6:	d007      	beq.n	80139b8 <dhcp_recv+0x10c>
 80139a8:	69fb      	ldr	r3, [r7, #28]
 80139aa:	795b      	ldrb	r3, [r3, #5]
 80139ac:	2b04      	cmp	r3, #4
 80139ae:	d003      	beq.n	80139b8 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80139b0:	69fb      	ldr	r3, [r7, #28]
 80139b2:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80139b4:	2b05      	cmp	r3, #5
 80139b6:	d139      	bne.n	8013a2c <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 80139b8:	6979      	ldr	r1, [r7, #20]
 80139ba:	6a38      	ldr	r0, [r7, #32]
 80139bc:	f7fe fd84 	bl	80124c8 <dhcp_handle_ack>
      dhcp_bind(netif);
 80139c0:	6a38      	ldr	r0, [r7, #32]
 80139c2:	f7fe ffdf 	bl	8012984 <dhcp_bind>
 80139c6:	e031      	b.n	8013a2c <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80139c8:	7cfb      	ldrb	r3, [r7, #19]
 80139ca:	2b06      	cmp	r3, #6
 80139cc:	d113      	bne.n	80139f6 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80139ce:	69fb      	ldr	r3, [r7, #28]
 80139d0:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80139d2:	2b03      	cmp	r3, #3
 80139d4:	d00b      	beq.n	80139ee <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80139d6:	69fb      	ldr	r3, [r7, #28]
 80139d8:	795b      	ldrb	r3, [r3, #5]
 80139da:	2b01      	cmp	r3, #1
 80139dc:	d007      	beq.n	80139ee <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80139de:	69fb      	ldr	r3, [r7, #28]
 80139e0:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80139e2:	2b04      	cmp	r3, #4
 80139e4:	d003      	beq.n	80139ee <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80139e6:	69fb      	ldr	r3, [r7, #28]
 80139e8:	795b      	ldrb	r3, [r3, #5]
 80139ea:	2b05      	cmp	r3, #5
 80139ec:	d103      	bne.n	80139f6 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80139ee:	6a38      	ldr	r0, [r7, #32]
 80139f0:	f7fe fac2 	bl	8011f78 <dhcp_handle_nak>
 80139f4:	e01a      	b.n	8013a2c <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80139f6:	7cfb      	ldrb	r3, [r7, #19]
 80139f8:	2b02      	cmp	r3, #2
 80139fa:	d116      	bne.n	8013a2a <dhcp_recv+0x17e>
 80139fc:	69fb      	ldr	r3, [r7, #28]
 80139fe:	795b      	ldrb	r3, [r3, #5]
 8013a00:	2b06      	cmp	r3, #6
 8013a02:	d112      	bne.n	8013a2a <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8013a04:	6979      	ldr	r1, [r7, #20]
 8013a06:	6a38      	ldr	r0, [r7, #32]
 8013a08:	f7fe fb04 	bl	8012014 <dhcp_handle_offer>
 8013a0c:	e00e      	b.n	8013a2c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8013a0e:	bf00      	nop
 8013a10:	e00c      	b.n	8013a2c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8013a12:	bf00      	nop
 8013a14:	e00a      	b.n	8013a2c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8013a16:	bf00      	nop
 8013a18:	e008      	b.n	8013a2c <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8013a1a:	bf00      	nop
 8013a1c:	e006      	b.n	8013a2c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8013a1e:	bf00      	nop
 8013a20:	e004      	b.n	8013a2c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8013a22:	bf00      	nop
 8013a24:	e002      	b.n	8013a2c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8013a26:	bf00      	nop
 8013a28:	e000      	b.n	8013a2c <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8013a2a:	bf00      	nop
  pbuf_free(p);
 8013a2c:	6878      	ldr	r0, [r7, #4]
 8013a2e:	f7f7 ffd1 	bl	800b9d4 <pbuf_free>
}
 8013a32:	bf00      	nop
 8013a34:	3728      	adds	r7, #40	@ 0x28
 8013a36:	46bd      	mov	sp, r7
 8013a38:	bd80      	pop	{r7, pc}
 8013a3a:	bf00      	nop
 8013a3c:	2000928c 	.word	0x2000928c
 8013a40:	2000cb3c 	.word	0x2000cb3c
 8013a44:	2000cb1c 	.word	0x2000cb1c

08013a48 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8013a48:	b580      	push	{r7, lr}
 8013a4a:	b088      	sub	sp, #32
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	60f8      	str	r0, [r7, #12]
 8013a50:	60b9      	str	r1, [r7, #8]
 8013a52:	603b      	str	r3, [r7, #0]
 8013a54:	4613      	mov	r3, r2
 8013a56:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d108      	bne.n	8013a70 <dhcp_create_msg+0x28>
 8013a5e:	4b5f      	ldr	r3, [pc, #380]	@ (8013bdc <dhcp_create_msg+0x194>)
 8013a60:	f240 7269 	movw	r2, #1897	@ 0x769
 8013a64:	495e      	ldr	r1, [pc, #376]	@ (8013be0 <dhcp_create_msg+0x198>)
 8013a66:	485f      	ldr	r0, [pc, #380]	@ (8013be4 <dhcp_create_msg+0x19c>)
 8013a68:	f003 fa0c 	bl	8016e84 <iprintf>
 8013a6c:	2300      	movs	r3, #0
 8013a6e:	e0b1      	b.n	8013bd4 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8013a70:	68bb      	ldr	r3, [r7, #8]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d108      	bne.n	8013a88 <dhcp_create_msg+0x40>
 8013a76:	4b59      	ldr	r3, [pc, #356]	@ (8013bdc <dhcp_create_msg+0x194>)
 8013a78:	f240 726a 	movw	r2, #1898	@ 0x76a
 8013a7c:	495a      	ldr	r1, [pc, #360]	@ (8013be8 <dhcp_create_msg+0x1a0>)
 8013a7e:	4859      	ldr	r0, [pc, #356]	@ (8013be4 <dhcp_create_msg+0x19c>)
 8013a80:	f003 fa00 	bl	8016e84 <iprintf>
 8013a84:	2300      	movs	r3, #0
 8013a86:	e0a5      	b.n	8013bd4 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8013a88:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013a8c:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8013a90:	2036      	movs	r0, #54	@ 0x36
 8013a92:	f7f7 fcbb 	bl	800b40c <pbuf_alloc>
 8013a96:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8013a98:	69bb      	ldr	r3, [r7, #24]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d101      	bne.n	8013aa2 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8013a9e:	2300      	movs	r3, #0
 8013aa0:	e098      	b.n	8013bd4 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8013aa2:	69bb      	ldr	r3, [r7, #24]
 8013aa4:	895b      	ldrh	r3, [r3, #10]
 8013aa6:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8013aaa:	d206      	bcs.n	8013aba <dhcp_create_msg+0x72>
 8013aac:	4b4b      	ldr	r3, [pc, #300]	@ (8013bdc <dhcp_create_msg+0x194>)
 8013aae:	f240 7271 	movw	r2, #1905	@ 0x771
 8013ab2:	494e      	ldr	r1, [pc, #312]	@ (8013bec <dhcp_create_msg+0x1a4>)
 8013ab4:	484b      	ldr	r0, [pc, #300]	@ (8013be4 <dhcp_create_msg+0x19c>)
 8013ab6:	f003 f9e5 	bl	8016e84 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8013aba:	79fb      	ldrb	r3, [r7, #7]
 8013abc:	2b03      	cmp	r3, #3
 8013abe:	d103      	bne.n	8013ac8 <dhcp_create_msg+0x80>
 8013ac0:	68bb      	ldr	r3, [r7, #8]
 8013ac2:	795b      	ldrb	r3, [r3, #5]
 8013ac4:	2b03      	cmp	r3, #3
 8013ac6:	d10d      	bne.n	8013ae4 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8013ac8:	68bb      	ldr	r3, [r7, #8]
 8013aca:	799b      	ldrb	r3, [r3, #6]
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d105      	bne.n	8013adc <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8013ad0:	f003 f8d8 	bl	8016c84 <rand>
 8013ad4:	4603      	mov	r3, r0
 8013ad6:	461a      	mov	r2, r3
 8013ad8:	4b45      	ldr	r3, [pc, #276]	@ (8013bf0 <dhcp_create_msg+0x1a8>)
 8013ada:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8013adc:	4b44      	ldr	r3, [pc, #272]	@ (8013bf0 <dhcp_create_msg+0x1a8>)
 8013ade:	681a      	ldr	r2, [r3, #0]
 8013ae0:	68bb      	ldr	r3, [r7, #8]
 8013ae2:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8013ae4:	69bb      	ldr	r3, [r7, #24]
 8013ae6:	685b      	ldr	r3, [r3, #4]
 8013ae8:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8013aea:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8013aee:	2100      	movs	r1, #0
 8013af0:	6978      	ldr	r0, [r7, #20]
 8013af2:	f003 fb59 	bl	80171a8 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8013af6:	697b      	ldr	r3, [r7, #20]
 8013af8:	2201      	movs	r2, #1
 8013afa:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8013afc:	697b      	ldr	r3, [r7, #20]
 8013afe:	2201      	movs	r2, #1
 8013b00:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8013b08:	697b      	ldr	r3, [r7, #20]
 8013b0a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8013b0c:	68bb      	ldr	r3, [r7, #8]
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	4618      	mov	r0, r3
 8013b12:	f7f6 fa20 	bl	8009f56 <lwip_htonl>
 8013b16:	4602      	mov	r2, r0
 8013b18:	697b      	ldr	r3, [r7, #20]
 8013b1a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8013b1c:	79fb      	ldrb	r3, [r7, #7]
 8013b1e:	2b08      	cmp	r3, #8
 8013b20:	d010      	beq.n	8013b44 <dhcp_create_msg+0xfc>
 8013b22:	79fb      	ldrb	r3, [r7, #7]
 8013b24:	2b04      	cmp	r3, #4
 8013b26:	d00d      	beq.n	8013b44 <dhcp_create_msg+0xfc>
 8013b28:	79fb      	ldrb	r3, [r7, #7]
 8013b2a:	2b07      	cmp	r3, #7
 8013b2c:	d00a      	beq.n	8013b44 <dhcp_create_msg+0xfc>
 8013b2e:	79fb      	ldrb	r3, [r7, #7]
 8013b30:	2b03      	cmp	r3, #3
 8013b32:	d10c      	bne.n	8013b4e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8013b34:	68bb      	ldr	r3, [r7, #8]
 8013b36:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8013b38:	2b05      	cmp	r3, #5
 8013b3a:	d003      	beq.n	8013b44 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8013b3c:	68bb      	ldr	r3, [r7, #8]
 8013b3e:	795b      	ldrb	r3, [r3, #5]
 8013b40:	2b04      	cmp	r3, #4
 8013b42:	d104      	bne.n	8013b4e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	3304      	adds	r3, #4
 8013b48:	681a      	ldr	r2, [r3, #0]
 8013b4a:	697b      	ldr	r3, [r7, #20]
 8013b4c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013b4e:	2300      	movs	r3, #0
 8013b50:	83fb      	strh	r3, [r7, #30]
 8013b52:	e00c      	b.n	8013b6e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8013b54:	8bfa      	ldrh	r2, [r7, #30]
 8013b56:	8bfb      	ldrh	r3, [r7, #30]
 8013b58:	68f9      	ldr	r1, [r7, #12]
 8013b5a:	440a      	add	r2, r1
 8013b5c:	f892 1036 	ldrb.w	r1, [r2, #54]	@ 0x36
 8013b60:	697a      	ldr	r2, [r7, #20]
 8013b62:	4413      	add	r3, r2
 8013b64:	460a      	mov	r2, r1
 8013b66:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013b68:	8bfb      	ldrh	r3, [r7, #30]
 8013b6a:	3301      	adds	r3, #1
 8013b6c:	83fb      	strh	r3, [r7, #30]
 8013b6e:	8bfb      	ldrh	r3, [r7, #30]
 8013b70:	2b05      	cmp	r3, #5
 8013b72:	d9ef      	bls.n	8013b54 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8013b74:	697b      	ldr	r3, [r7, #20]
 8013b76:	2200      	movs	r2, #0
 8013b78:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8013b7c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8013b80:	2200      	movs	r2, #0
 8013b82:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 8013b86:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8013b8a:	2200      	movs	r2, #0
 8013b8c:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 8013b90:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 8013b94:	2200      	movs	r2, #0
 8013b96:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8013b9a:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8013b9e:	697b      	ldr	r3, [r7, #20]
 8013ba0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013ba4:	2301      	movs	r3, #1
 8013ba6:	2235      	movs	r2, #53	@ 0x35
 8013ba8:	2000      	movs	r0, #0
 8013baa:	f7ff fa7f 	bl	80130ac <dhcp_option>
 8013bae:	4603      	mov	r3, r0
 8013bb0:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8013bb2:	697b      	ldr	r3, [r7, #20]
 8013bb4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013bb8:	79fa      	ldrb	r2, [r7, #7]
 8013bba:	8a7b      	ldrh	r3, [r7, #18]
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	f7ff faa9 	bl	8013114 <dhcp_option_byte>
 8013bc2:	4603      	mov	r3, r0
 8013bc4:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8013bc6:	683b      	ldr	r3, [r7, #0]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d002      	beq.n	8013bd2 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8013bcc:	683b      	ldr	r3, [r7, #0]
 8013bce:	8a7a      	ldrh	r2, [r7, #18]
 8013bd0:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8013bd2:	69bb      	ldr	r3, [r7, #24]
}
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	3720      	adds	r7, #32
 8013bd8:	46bd      	mov	sp, r7
 8013bda:	bd80      	pop	{r7, pc}
 8013bdc:	0801a770 	.word	0x0801a770
 8013be0:	0801aaac 	.word	0x0801aaac
 8013be4:	0801a7d0 	.word	0x0801a7d0
 8013be8:	0801aacc 	.word	0x0801aacc
 8013bec:	0801aaec 	.word	0x0801aaec
 8013bf0:	2000cb4c 	.word	0x2000cb4c

08013bf4 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8013bf4:	b580      	push	{r7, lr}
 8013bf6:	b084      	sub	sp, #16
 8013bf8:	af00      	add	r7, sp, #0
 8013bfa:	4603      	mov	r3, r0
 8013bfc:	60b9      	str	r1, [r7, #8]
 8013bfe:	607a      	str	r2, [r7, #4]
 8013c00:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8013c02:	89fb      	ldrh	r3, [r7, #14]
 8013c04:	1c5a      	adds	r2, r3, #1
 8013c06:	81fa      	strh	r2, [r7, #14]
 8013c08:	461a      	mov	r2, r3
 8013c0a:	68bb      	ldr	r3, [r7, #8]
 8013c0c:	4413      	add	r3, r2
 8013c0e:	22ff      	movs	r2, #255	@ 0xff
 8013c10:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8013c12:	e007      	b.n	8013c24 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8013c14:	89fb      	ldrh	r3, [r7, #14]
 8013c16:	1c5a      	adds	r2, r3, #1
 8013c18:	81fa      	strh	r2, [r7, #14]
 8013c1a:	461a      	mov	r2, r3
 8013c1c:	68bb      	ldr	r3, [r7, #8]
 8013c1e:	4413      	add	r3, r2
 8013c20:	2200      	movs	r2, #0
 8013c22:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8013c24:	89fb      	ldrh	r3, [r7, #14]
 8013c26:	2b43      	cmp	r3, #67	@ 0x43
 8013c28:	d904      	bls.n	8013c34 <dhcp_option_trailer+0x40>
 8013c2a:	89fb      	ldrh	r3, [r7, #14]
 8013c2c:	f003 0303 	and.w	r3, r3, #3
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d002      	beq.n	8013c3a <dhcp_option_trailer+0x46>
 8013c34:	89fb      	ldrh	r3, [r7, #14]
 8013c36:	2b43      	cmp	r3, #67	@ 0x43
 8013c38:	d9ec      	bls.n	8013c14 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8013c3a:	89fb      	ldrh	r3, [r7, #14]
 8013c3c:	33f0      	adds	r3, #240	@ 0xf0
 8013c3e:	b29b      	uxth	r3, r3
 8013c40:	4619      	mov	r1, r3
 8013c42:	6878      	ldr	r0, [r7, #4]
 8013c44:	f7f7 fd40 	bl	800b6c8 <pbuf_realloc>
}
 8013c48:	bf00      	nop
 8013c4a:	3710      	adds	r7, #16
 8013c4c:	46bd      	mov	sp, r7
 8013c4e:	bd80      	pop	{r7, pc}

08013c50 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8013c50:	b480      	push	{r7}
 8013c52:	b085      	sub	sp, #20
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d017      	beq.n	8013c8e <dhcp_supplied_address+0x3e>
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d013      	beq.n	8013c8e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013c6a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	795b      	ldrb	r3, [r3, #5]
 8013c70:	2b0a      	cmp	r3, #10
 8013c72:	d007      	beq.n	8013c84 <dhcp_supplied_address+0x34>
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	795b      	ldrb	r3, [r3, #5]
 8013c78:	2b05      	cmp	r3, #5
 8013c7a:	d003      	beq.n	8013c84 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8013c80:	2b04      	cmp	r3, #4
 8013c82:	d101      	bne.n	8013c88 <dhcp_supplied_address+0x38>
 8013c84:	2301      	movs	r3, #1
 8013c86:	e000      	b.n	8013c8a <dhcp_supplied_address+0x3a>
 8013c88:	2300      	movs	r3, #0
 8013c8a:	b2db      	uxtb	r3, r3
 8013c8c:	e000      	b.n	8013c90 <dhcp_supplied_address+0x40>
  }
  return 0;
 8013c8e:	2300      	movs	r3, #0
}
 8013c90:	4618      	mov	r0, r3
 8013c92:	3714      	adds	r7, #20
 8013c94:	46bd      	mov	sp, r7
 8013c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c9a:	4770      	bx	lr

08013c9c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	b082      	sub	sp, #8
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013ca4:	4915      	ldr	r1, [pc, #84]	@ (8013cfc <etharp_free_entry+0x60>)
 8013ca6:	687a      	ldr	r2, [r7, #4]
 8013ca8:	4613      	mov	r3, r2
 8013caa:	005b      	lsls	r3, r3, #1
 8013cac:	4413      	add	r3, r2
 8013cae:	00db      	lsls	r3, r3, #3
 8013cb0:	440b      	add	r3, r1
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d013      	beq.n	8013ce0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013cb8:	4910      	ldr	r1, [pc, #64]	@ (8013cfc <etharp_free_entry+0x60>)
 8013cba:	687a      	ldr	r2, [r7, #4]
 8013cbc:	4613      	mov	r3, r2
 8013cbe:	005b      	lsls	r3, r3, #1
 8013cc0:	4413      	add	r3, r2
 8013cc2:	00db      	lsls	r3, r3, #3
 8013cc4:	440b      	add	r3, r1
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	4618      	mov	r0, r3
 8013cca:	f7f7 fe83 	bl	800b9d4 <pbuf_free>
    arp_table[i].q = NULL;
 8013cce:	490b      	ldr	r1, [pc, #44]	@ (8013cfc <etharp_free_entry+0x60>)
 8013cd0:	687a      	ldr	r2, [r7, #4]
 8013cd2:	4613      	mov	r3, r2
 8013cd4:	005b      	lsls	r3, r3, #1
 8013cd6:	4413      	add	r3, r2
 8013cd8:	00db      	lsls	r3, r3, #3
 8013cda:	440b      	add	r3, r1
 8013cdc:	2200      	movs	r2, #0
 8013cde:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013ce0:	4906      	ldr	r1, [pc, #24]	@ (8013cfc <etharp_free_entry+0x60>)
 8013ce2:	687a      	ldr	r2, [r7, #4]
 8013ce4:	4613      	mov	r3, r2
 8013ce6:	005b      	lsls	r3, r3, #1
 8013ce8:	4413      	add	r3, r2
 8013cea:	00db      	lsls	r3, r3, #3
 8013cec:	440b      	add	r3, r1
 8013cee:	3314      	adds	r3, #20
 8013cf0:	2200      	movs	r2, #0
 8013cf2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013cf4:	bf00      	nop
 8013cf6:	3708      	adds	r7, #8
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	bd80      	pop	{r7, pc}
 8013cfc:	2000cb50 	.word	0x2000cb50

08013d00 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013d00:	b580      	push	{r7, lr}
 8013d02:	b082      	sub	sp, #8
 8013d04:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013d06:	2300      	movs	r3, #0
 8013d08:	607b      	str	r3, [r7, #4]
 8013d0a:	e096      	b.n	8013e3a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013d0c:	494f      	ldr	r1, [pc, #316]	@ (8013e4c <etharp_tmr+0x14c>)
 8013d0e:	687a      	ldr	r2, [r7, #4]
 8013d10:	4613      	mov	r3, r2
 8013d12:	005b      	lsls	r3, r3, #1
 8013d14:	4413      	add	r3, r2
 8013d16:	00db      	lsls	r3, r3, #3
 8013d18:	440b      	add	r3, r1
 8013d1a:	3314      	adds	r3, #20
 8013d1c:	781b      	ldrb	r3, [r3, #0]
 8013d1e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013d20:	78fb      	ldrb	r3, [r7, #3]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	f000 8086 	beq.w	8013e34 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013d28:	4948      	ldr	r1, [pc, #288]	@ (8013e4c <etharp_tmr+0x14c>)
 8013d2a:	687a      	ldr	r2, [r7, #4]
 8013d2c:	4613      	mov	r3, r2
 8013d2e:	005b      	lsls	r3, r3, #1
 8013d30:	4413      	add	r3, r2
 8013d32:	00db      	lsls	r3, r3, #3
 8013d34:	440b      	add	r3, r1
 8013d36:	3312      	adds	r3, #18
 8013d38:	881b      	ldrh	r3, [r3, #0]
 8013d3a:	3301      	adds	r3, #1
 8013d3c:	b298      	uxth	r0, r3
 8013d3e:	4943      	ldr	r1, [pc, #268]	@ (8013e4c <etharp_tmr+0x14c>)
 8013d40:	687a      	ldr	r2, [r7, #4]
 8013d42:	4613      	mov	r3, r2
 8013d44:	005b      	lsls	r3, r3, #1
 8013d46:	4413      	add	r3, r2
 8013d48:	00db      	lsls	r3, r3, #3
 8013d4a:	440b      	add	r3, r1
 8013d4c:	3312      	adds	r3, #18
 8013d4e:	4602      	mov	r2, r0
 8013d50:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013d52:	493e      	ldr	r1, [pc, #248]	@ (8013e4c <etharp_tmr+0x14c>)
 8013d54:	687a      	ldr	r2, [r7, #4]
 8013d56:	4613      	mov	r3, r2
 8013d58:	005b      	lsls	r3, r3, #1
 8013d5a:	4413      	add	r3, r2
 8013d5c:	00db      	lsls	r3, r3, #3
 8013d5e:	440b      	add	r3, r1
 8013d60:	3312      	adds	r3, #18
 8013d62:	881b      	ldrh	r3, [r3, #0]
 8013d64:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8013d68:	d215      	bcs.n	8013d96 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013d6a:	4938      	ldr	r1, [pc, #224]	@ (8013e4c <etharp_tmr+0x14c>)
 8013d6c:	687a      	ldr	r2, [r7, #4]
 8013d6e:	4613      	mov	r3, r2
 8013d70:	005b      	lsls	r3, r3, #1
 8013d72:	4413      	add	r3, r2
 8013d74:	00db      	lsls	r3, r3, #3
 8013d76:	440b      	add	r3, r1
 8013d78:	3314      	adds	r3, #20
 8013d7a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013d7c:	2b01      	cmp	r3, #1
 8013d7e:	d10e      	bne.n	8013d9e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013d80:	4932      	ldr	r1, [pc, #200]	@ (8013e4c <etharp_tmr+0x14c>)
 8013d82:	687a      	ldr	r2, [r7, #4]
 8013d84:	4613      	mov	r3, r2
 8013d86:	005b      	lsls	r3, r3, #1
 8013d88:	4413      	add	r3, r2
 8013d8a:	00db      	lsls	r3, r3, #3
 8013d8c:	440b      	add	r3, r1
 8013d8e:	3312      	adds	r3, #18
 8013d90:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013d92:	2b04      	cmp	r3, #4
 8013d94:	d903      	bls.n	8013d9e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013d96:	6878      	ldr	r0, [r7, #4]
 8013d98:	f7ff ff80 	bl	8013c9c <etharp_free_entry>
 8013d9c:	e04a      	b.n	8013e34 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013d9e:	492b      	ldr	r1, [pc, #172]	@ (8013e4c <etharp_tmr+0x14c>)
 8013da0:	687a      	ldr	r2, [r7, #4]
 8013da2:	4613      	mov	r3, r2
 8013da4:	005b      	lsls	r3, r3, #1
 8013da6:	4413      	add	r3, r2
 8013da8:	00db      	lsls	r3, r3, #3
 8013daa:	440b      	add	r3, r1
 8013dac:	3314      	adds	r3, #20
 8013dae:	781b      	ldrb	r3, [r3, #0]
 8013db0:	2b03      	cmp	r3, #3
 8013db2:	d10a      	bne.n	8013dca <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013db4:	4925      	ldr	r1, [pc, #148]	@ (8013e4c <etharp_tmr+0x14c>)
 8013db6:	687a      	ldr	r2, [r7, #4]
 8013db8:	4613      	mov	r3, r2
 8013dba:	005b      	lsls	r3, r3, #1
 8013dbc:	4413      	add	r3, r2
 8013dbe:	00db      	lsls	r3, r3, #3
 8013dc0:	440b      	add	r3, r1
 8013dc2:	3314      	adds	r3, #20
 8013dc4:	2204      	movs	r2, #4
 8013dc6:	701a      	strb	r2, [r3, #0]
 8013dc8:	e034      	b.n	8013e34 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013dca:	4920      	ldr	r1, [pc, #128]	@ (8013e4c <etharp_tmr+0x14c>)
 8013dcc:	687a      	ldr	r2, [r7, #4]
 8013dce:	4613      	mov	r3, r2
 8013dd0:	005b      	lsls	r3, r3, #1
 8013dd2:	4413      	add	r3, r2
 8013dd4:	00db      	lsls	r3, r3, #3
 8013dd6:	440b      	add	r3, r1
 8013dd8:	3314      	adds	r3, #20
 8013dda:	781b      	ldrb	r3, [r3, #0]
 8013ddc:	2b04      	cmp	r3, #4
 8013dde:	d10a      	bne.n	8013df6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013de0:	491a      	ldr	r1, [pc, #104]	@ (8013e4c <etharp_tmr+0x14c>)
 8013de2:	687a      	ldr	r2, [r7, #4]
 8013de4:	4613      	mov	r3, r2
 8013de6:	005b      	lsls	r3, r3, #1
 8013de8:	4413      	add	r3, r2
 8013dea:	00db      	lsls	r3, r3, #3
 8013dec:	440b      	add	r3, r1
 8013dee:	3314      	adds	r3, #20
 8013df0:	2202      	movs	r2, #2
 8013df2:	701a      	strb	r2, [r3, #0]
 8013df4:	e01e      	b.n	8013e34 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013df6:	4915      	ldr	r1, [pc, #84]	@ (8013e4c <etharp_tmr+0x14c>)
 8013df8:	687a      	ldr	r2, [r7, #4]
 8013dfa:	4613      	mov	r3, r2
 8013dfc:	005b      	lsls	r3, r3, #1
 8013dfe:	4413      	add	r3, r2
 8013e00:	00db      	lsls	r3, r3, #3
 8013e02:	440b      	add	r3, r1
 8013e04:	3314      	adds	r3, #20
 8013e06:	781b      	ldrb	r3, [r3, #0]
 8013e08:	2b01      	cmp	r3, #1
 8013e0a:	d113      	bne.n	8013e34 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013e0c:	490f      	ldr	r1, [pc, #60]	@ (8013e4c <etharp_tmr+0x14c>)
 8013e0e:	687a      	ldr	r2, [r7, #4]
 8013e10:	4613      	mov	r3, r2
 8013e12:	005b      	lsls	r3, r3, #1
 8013e14:	4413      	add	r3, r2
 8013e16:	00db      	lsls	r3, r3, #3
 8013e18:	440b      	add	r3, r1
 8013e1a:	3308      	adds	r3, #8
 8013e1c:	6818      	ldr	r0, [r3, #0]
 8013e1e:	687a      	ldr	r2, [r7, #4]
 8013e20:	4613      	mov	r3, r2
 8013e22:	005b      	lsls	r3, r3, #1
 8013e24:	4413      	add	r3, r2
 8013e26:	00db      	lsls	r3, r3, #3
 8013e28:	4a08      	ldr	r2, [pc, #32]	@ (8013e4c <etharp_tmr+0x14c>)
 8013e2a:	4413      	add	r3, r2
 8013e2c:	3304      	adds	r3, #4
 8013e2e:	4619      	mov	r1, r3
 8013e30:	f000 fe72 	bl	8014b18 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	3301      	adds	r3, #1
 8013e38:	607b      	str	r3, [r7, #4]
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	2b09      	cmp	r3, #9
 8013e3e:	f77f af65 	ble.w	8013d0c <etharp_tmr+0xc>
      }
    }
  }
}
 8013e42:	bf00      	nop
 8013e44:	bf00      	nop
 8013e46:	3708      	adds	r7, #8
 8013e48:	46bd      	mov	sp, r7
 8013e4a:	bd80      	pop	{r7, pc}
 8013e4c:	2000cb50 	.word	0x2000cb50

08013e50 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013e50:	b580      	push	{r7, lr}
 8013e52:	b08a      	sub	sp, #40	@ 0x28
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	60f8      	str	r0, [r7, #12]
 8013e58:	460b      	mov	r3, r1
 8013e5a:	607a      	str	r2, [r7, #4]
 8013e5c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013e5e:	230a      	movs	r3, #10
 8013e60:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8013e62:	230a      	movs	r3, #10
 8013e64:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8013e66:	230a      	movs	r3, #10
 8013e68:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8013e6a:	2300      	movs	r3, #0
 8013e6c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013e6e:	230a      	movs	r3, #10
 8013e70:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013e72:	2300      	movs	r3, #0
 8013e74:	83bb      	strh	r3, [r7, #28]
 8013e76:	2300      	movs	r3, #0
 8013e78:	837b      	strh	r3, [r7, #26]
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013e7e:	2300      	movs	r3, #0
 8013e80:	843b      	strh	r3, [r7, #32]
 8013e82:	e0ae      	b.n	8013fe2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013e84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013e88:	49a6      	ldr	r1, [pc, #664]	@ (8014124 <etharp_find_entry+0x2d4>)
 8013e8a:	4613      	mov	r3, r2
 8013e8c:	005b      	lsls	r3, r3, #1
 8013e8e:	4413      	add	r3, r2
 8013e90:	00db      	lsls	r3, r3, #3
 8013e92:	440b      	add	r3, r1
 8013e94:	3314      	adds	r3, #20
 8013e96:	781b      	ldrb	r3, [r3, #0]
 8013e98:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013e9a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8013e9e:	2b0a      	cmp	r3, #10
 8013ea0:	d105      	bne.n	8013eae <etharp_find_entry+0x5e>
 8013ea2:	7dfb      	ldrb	r3, [r7, #23]
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d102      	bne.n	8013eae <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013ea8:	8c3b      	ldrh	r3, [r7, #32]
 8013eaa:	847b      	strh	r3, [r7, #34]	@ 0x22
 8013eac:	e095      	b.n	8013fda <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8013eae:	7dfb      	ldrb	r3, [r7, #23]
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	f000 8092 	beq.w	8013fda <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8013eb6:	7dfb      	ldrb	r3, [r7, #23]
 8013eb8:	2b01      	cmp	r3, #1
 8013eba:	d009      	beq.n	8013ed0 <etharp_find_entry+0x80>
 8013ebc:	7dfb      	ldrb	r3, [r7, #23]
 8013ebe:	2b01      	cmp	r3, #1
 8013ec0:	d806      	bhi.n	8013ed0 <etharp_find_entry+0x80>
 8013ec2:	4b99      	ldr	r3, [pc, #612]	@ (8014128 <etharp_find_entry+0x2d8>)
 8013ec4:	f240 1223 	movw	r2, #291	@ 0x123
 8013ec8:	4998      	ldr	r1, [pc, #608]	@ (801412c <etharp_find_entry+0x2dc>)
 8013eca:	4899      	ldr	r0, [pc, #612]	@ (8014130 <etharp_find_entry+0x2e0>)
 8013ecc:	f002 ffda 	bl	8016e84 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d020      	beq.n	8013f18 <etharp_find_entry+0xc8>
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	6819      	ldr	r1, [r3, #0]
 8013eda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ede:	4891      	ldr	r0, [pc, #580]	@ (8014124 <etharp_find_entry+0x2d4>)
 8013ee0:	4613      	mov	r3, r2
 8013ee2:	005b      	lsls	r3, r3, #1
 8013ee4:	4413      	add	r3, r2
 8013ee6:	00db      	lsls	r3, r3, #3
 8013ee8:	4403      	add	r3, r0
 8013eea:	3304      	adds	r3, #4
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	4299      	cmp	r1, r3
 8013ef0:	d112      	bne.n	8013f18 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d00c      	beq.n	8013f12 <etharp_find_entry+0xc2>
 8013ef8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013efc:	4989      	ldr	r1, [pc, #548]	@ (8014124 <etharp_find_entry+0x2d4>)
 8013efe:	4613      	mov	r3, r2
 8013f00:	005b      	lsls	r3, r3, #1
 8013f02:	4413      	add	r3, r2
 8013f04:	00db      	lsls	r3, r3, #3
 8013f06:	440b      	add	r3, r1
 8013f08:	3308      	adds	r3, #8
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	687a      	ldr	r2, [r7, #4]
 8013f0e:	429a      	cmp	r2, r3
 8013f10:	d102      	bne.n	8013f18 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8013f12:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013f16:	e100      	b.n	801411a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013f18:	7dfb      	ldrb	r3, [r7, #23]
 8013f1a:	2b01      	cmp	r3, #1
 8013f1c:	d140      	bne.n	8013fa0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013f1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f22:	4980      	ldr	r1, [pc, #512]	@ (8014124 <etharp_find_entry+0x2d4>)
 8013f24:	4613      	mov	r3, r2
 8013f26:	005b      	lsls	r3, r3, #1
 8013f28:	4413      	add	r3, r2
 8013f2a:	00db      	lsls	r3, r3, #3
 8013f2c:	440b      	add	r3, r1
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d01a      	beq.n	8013f6a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8013f34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f38:	497a      	ldr	r1, [pc, #488]	@ (8014124 <etharp_find_entry+0x2d4>)
 8013f3a:	4613      	mov	r3, r2
 8013f3c:	005b      	lsls	r3, r3, #1
 8013f3e:	4413      	add	r3, r2
 8013f40:	00db      	lsls	r3, r3, #3
 8013f42:	440b      	add	r3, r1
 8013f44:	3312      	adds	r3, #18
 8013f46:	881b      	ldrh	r3, [r3, #0]
 8013f48:	8bba      	ldrh	r2, [r7, #28]
 8013f4a:	429a      	cmp	r2, r3
 8013f4c:	d845      	bhi.n	8013fda <etharp_find_entry+0x18a>
            old_queue = i;
 8013f4e:	8c3b      	ldrh	r3, [r7, #32]
 8013f50:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8013f52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f56:	4973      	ldr	r1, [pc, #460]	@ (8014124 <etharp_find_entry+0x2d4>)
 8013f58:	4613      	mov	r3, r2
 8013f5a:	005b      	lsls	r3, r3, #1
 8013f5c:	4413      	add	r3, r2
 8013f5e:	00db      	lsls	r3, r3, #3
 8013f60:	440b      	add	r3, r1
 8013f62:	3312      	adds	r3, #18
 8013f64:	881b      	ldrh	r3, [r3, #0]
 8013f66:	83bb      	strh	r3, [r7, #28]
 8013f68:	e037      	b.n	8013fda <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013f6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f6e:	496d      	ldr	r1, [pc, #436]	@ (8014124 <etharp_find_entry+0x2d4>)
 8013f70:	4613      	mov	r3, r2
 8013f72:	005b      	lsls	r3, r3, #1
 8013f74:	4413      	add	r3, r2
 8013f76:	00db      	lsls	r3, r3, #3
 8013f78:	440b      	add	r3, r1
 8013f7a:	3312      	adds	r3, #18
 8013f7c:	881b      	ldrh	r3, [r3, #0]
 8013f7e:	8b7a      	ldrh	r2, [r7, #26]
 8013f80:	429a      	cmp	r2, r3
 8013f82:	d82a      	bhi.n	8013fda <etharp_find_entry+0x18a>
            old_pending = i;
 8013f84:	8c3b      	ldrh	r3, [r7, #32]
 8013f86:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8013f88:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f8c:	4965      	ldr	r1, [pc, #404]	@ (8014124 <etharp_find_entry+0x2d4>)
 8013f8e:	4613      	mov	r3, r2
 8013f90:	005b      	lsls	r3, r3, #1
 8013f92:	4413      	add	r3, r2
 8013f94:	00db      	lsls	r3, r3, #3
 8013f96:	440b      	add	r3, r1
 8013f98:	3312      	adds	r3, #18
 8013f9a:	881b      	ldrh	r3, [r3, #0]
 8013f9c:	837b      	strh	r3, [r7, #26]
 8013f9e:	e01c      	b.n	8013fda <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013fa0:	7dfb      	ldrb	r3, [r7, #23]
 8013fa2:	2b01      	cmp	r3, #1
 8013fa4:	d919      	bls.n	8013fda <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013fa6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013faa:	495e      	ldr	r1, [pc, #376]	@ (8014124 <etharp_find_entry+0x2d4>)
 8013fac:	4613      	mov	r3, r2
 8013fae:	005b      	lsls	r3, r3, #1
 8013fb0:	4413      	add	r3, r2
 8013fb2:	00db      	lsls	r3, r3, #3
 8013fb4:	440b      	add	r3, r1
 8013fb6:	3312      	adds	r3, #18
 8013fb8:	881b      	ldrh	r3, [r3, #0]
 8013fba:	8b3a      	ldrh	r2, [r7, #24]
 8013fbc:	429a      	cmp	r2, r3
 8013fbe:	d80c      	bhi.n	8013fda <etharp_find_entry+0x18a>
            old_stable = i;
 8013fc0:	8c3b      	ldrh	r3, [r7, #32]
 8013fc2:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8013fc4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013fc8:	4956      	ldr	r1, [pc, #344]	@ (8014124 <etharp_find_entry+0x2d4>)
 8013fca:	4613      	mov	r3, r2
 8013fcc:	005b      	lsls	r3, r3, #1
 8013fce:	4413      	add	r3, r2
 8013fd0:	00db      	lsls	r3, r3, #3
 8013fd2:	440b      	add	r3, r1
 8013fd4:	3312      	adds	r3, #18
 8013fd6:	881b      	ldrh	r3, [r3, #0]
 8013fd8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013fda:	8c3b      	ldrh	r3, [r7, #32]
 8013fdc:	3301      	adds	r3, #1
 8013fde:	b29b      	uxth	r3, r3
 8013fe0:	843b      	strh	r3, [r7, #32]
 8013fe2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013fe6:	2b09      	cmp	r3, #9
 8013fe8:	f77f af4c 	ble.w	8013e84 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013fec:	7afb      	ldrb	r3, [r7, #11]
 8013fee:	f003 0302 	and.w	r3, r3, #2
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d108      	bne.n	8014008 <etharp_find_entry+0x1b8>
 8013ff6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8013ffa:	2b0a      	cmp	r3, #10
 8013ffc:	d107      	bne.n	801400e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8013ffe:	7afb      	ldrb	r3, [r7, #11]
 8014000:	f003 0301 	and.w	r3, r3, #1
 8014004:	2b00      	cmp	r3, #0
 8014006:	d102      	bne.n	801400e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014008:	f04f 33ff 	mov.w	r3, #4294967295
 801400c:	e085      	b.n	801411a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801400e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8014012:	2b09      	cmp	r3, #9
 8014014:	dc02      	bgt.n	801401c <etharp_find_entry+0x1cc>
    i = empty;
 8014016:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014018:	843b      	strh	r3, [r7, #32]
 801401a:	e039      	b.n	8014090 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801401c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8014020:	2b09      	cmp	r3, #9
 8014022:	dc14      	bgt.n	801404e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014024:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014026:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014028:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801402c:	493d      	ldr	r1, [pc, #244]	@ (8014124 <etharp_find_entry+0x2d4>)
 801402e:	4613      	mov	r3, r2
 8014030:	005b      	lsls	r3, r3, #1
 8014032:	4413      	add	r3, r2
 8014034:	00db      	lsls	r3, r3, #3
 8014036:	440b      	add	r3, r1
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d018      	beq.n	8014070 <etharp_find_entry+0x220>
 801403e:	4b3a      	ldr	r3, [pc, #232]	@ (8014128 <etharp_find_entry+0x2d8>)
 8014040:	f240 126d 	movw	r2, #365	@ 0x16d
 8014044:	493b      	ldr	r1, [pc, #236]	@ (8014134 <etharp_find_entry+0x2e4>)
 8014046:	483a      	ldr	r0, [pc, #232]	@ (8014130 <etharp_find_entry+0x2e0>)
 8014048:	f002 ff1c 	bl	8016e84 <iprintf>
 801404c:	e010      	b.n	8014070 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801404e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8014052:	2b09      	cmp	r3, #9
 8014054:	dc02      	bgt.n	801405c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014056:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014058:	843b      	strh	r3, [r7, #32]
 801405a:	e009      	b.n	8014070 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801405c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014060:	2b09      	cmp	r3, #9
 8014062:	dc02      	bgt.n	801406a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014064:	8bfb      	ldrh	r3, [r7, #30]
 8014066:	843b      	strh	r3, [r7, #32]
 8014068:	e002      	b.n	8014070 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801406a:	f04f 33ff 	mov.w	r3, #4294967295
 801406e:	e054      	b.n	801411a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014070:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014074:	2b09      	cmp	r3, #9
 8014076:	dd06      	ble.n	8014086 <etharp_find_entry+0x236>
 8014078:	4b2b      	ldr	r3, [pc, #172]	@ (8014128 <etharp_find_entry+0x2d8>)
 801407a:	f240 127f 	movw	r2, #383	@ 0x17f
 801407e:	492e      	ldr	r1, [pc, #184]	@ (8014138 <etharp_find_entry+0x2e8>)
 8014080:	482b      	ldr	r0, [pc, #172]	@ (8014130 <etharp_find_entry+0x2e0>)
 8014082:	f002 feff 	bl	8016e84 <iprintf>
    etharp_free_entry(i);
 8014086:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801408a:	4618      	mov	r0, r3
 801408c:	f7ff fe06 	bl	8013c9c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014090:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014094:	2b09      	cmp	r3, #9
 8014096:	dd06      	ble.n	80140a6 <etharp_find_entry+0x256>
 8014098:	4b23      	ldr	r3, [pc, #140]	@ (8014128 <etharp_find_entry+0x2d8>)
 801409a:	f240 1283 	movw	r2, #387	@ 0x183
 801409e:	4926      	ldr	r1, [pc, #152]	@ (8014138 <etharp_find_entry+0x2e8>)
 80140a0:	4823      	ldr	r0, [pc, #140]	@ (8014130 <etharp_find_entry+0x2e0>)
 80140a2:	f002 feef 	bl	8016e84 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80140a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140aa:	491e      	ldr	r1, [pc, #120]	@ (8014124 <etharp_find_entry+0x2d4>)
 80140ac:	4613      	mov	r3, r2
 80140ae:	005b      	lsls	r3, r3, #1
 80140b0:	4413      	add	r3, r2
 80140b2:	00db      	lsls	r3, r3, #3
 80140b4:	440b      	add	r3, r1
 80140b6:	3314      	adds	r3, #20
 80140b8:	781b      	ldrb	r3, [r3, #0]
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d006      	beq.n	80140cc <etharp_find_entry+0x27c>
 80140be:	4b1a      	ldr	r3, [pc, #104]	@ (8014128 <etharp_find_entry+0x2d8>)
 80140c0:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80140c4:	491d      	ldr	r1, [pc, #116]	@ (801413c <etharp_find_entry+0x2ec>)
 80140c6:	481a      	ldr	r0, [pc, #104]	@ (8014130 <etharp_find_entry+0x2e0>)
 80140c8:	f002 fedc 	bl	8016e84 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d00b      	beq.n	80140ea <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80140d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	6819      	ldr	r1, [r3, #0]
 80140da:	4812      	ldr	r0, [pc, #72]	@ (8014124 <etharp_find_entry+0x2d4>)
 80140dc:	4613      	mov	r3, r2
 80140de:	005b      	lsls	r3, r3, #1
 80140e0:	4413      	add	r3, r2
 80140e2:	00db      	lsls	r3, r3, #3
 80140e4:	4403      	add	r3, r0
 80140e6:	3304      	adds	r3, #4
 80140e8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80140ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140ee:	490d      	ldr	r1, [pc, #52]	@ (8014124 <etharp_find_entry+0x2d4>)
 80140f0:	4613      	mov	r3, r2
 80140f2:	005b      	lsls	r3, r3, #1
 80140f4:	4413      	add	r3, r2
 80140f6:	00db      	lsls	r3, r3, #3
 80140f8:	440b      	add	r3, r1
 80140fa:	3312      	adds	r3, #18
 80140fc:	2200      	movs	r2, #0
 80140fe:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014100:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014104:	4907      	ldr	r1, [pc, #28]	@ (8014124 <etharp_find_entry+0x2d4>)
 8014106:	4613      	mov	r3, r2
 8014108:	005b      	lsls	r3, r3, #1
 801410a:	4413      	add	r3, r2
 801410c:	00db      	lsls	r3, r3, #3
 801410e:	440b      	add	r3, r1
 8014110:	3308      	adds	r3, #8
 8014112:	687a      	ldr	r2, [r7, #4]
 8014114:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014116:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801411a:	4618      	mov	r0, r3
 801411c:	3728      	adds	r7, #40	@ 0x28
 801411e:	46bd      	mov	sp, r7
 8014120:	bd80      	pop	{r7, pc}
 8014122:	bf00      	nop
 8014124:	2000cb50 	.word	0x2000cb50
 8014128:	0801ab2c 	.word	0x0801ab2c
 801412c:	0801ab64 	.word	0x0801ab64
 8014130:	0801aba4 	.word	0x0801aba4
 8014134:	0801abcc 	.word	0x0801abcc
 8014138:	0801abe4 	.word	0x0801abe4
 801413c:	0801abf8 	.word	0x0801abf8

08014140 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014140:	b580      	push	{r7, lr}
 8014142:	b088      	sub	sp, #32
 8014144:	af02      	add	r7, sp, #8
 8014146:	60f8      	str	r0, [r7, #12]
 8014148:	60b9      	str	r1, [r7, #8]
 801414a:	607a      	str	r2, [r7, #4]
 801414c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8014154:	2b06      	cmp	r3, #6
 8014156:	d006      	beq.n	8014166 <etharp_update_arp_entry+0x26>
 8014158:	4b48      	ldr	r3, [pc, #288]	@ (801427c <etharp_update_arp_entry+0x13c>)
 801415a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801415e:	4948      	ldr	r1, [pc, #288]	@ (8014280 <etharp_update_arp_entry+0x140>)
 8014160:	4848      	ldr	r0, [pc, #288]	@ (8014284 <etharp_update_arp_entry+0x144>)
 8014162:	f002 fe8f 	bl	8016e84 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014166:	68bb      	ldr	r3, [r7, #8]
 8014168:	2b00      	cmp	r3, #0
 801416a:	d012      	beq.n	8014192 <etharp_update_arp_entry+0x52>
 801416c:	68bb      	ldr	r3, [r7, #8]
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d00e      	beq.n	8014192 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014174:	68bb      	ldr	r3, [r7, #8]
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	68f9      	ldr	r1, [r7, #12]
 801417a:	4618      	mov	r0, r3
 801417c:	f001 fc86 	bl	8015a8c <ip4_addr_isbroadcast_u32>
 8014180:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014182:	2b00      	cmp	r3, #0
 8014184:	d105      	bne.n	8014192 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014186:	68bb      	ldr	r3, [r7, #8]
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801418e:	2be0      	cmp	r3, #224	@ 0xe0
 8014190:	d102      	bne.n	8014198 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014192:	f06f 030f 	mvn.w	r3, #15
 8014196:	e06c      	b.n	8014272 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014198:	78fb      	ldrb	r3, [r7, #3]
 801419a:	68fa      	ldr	r2, [r7, #12]
 801419c:	4619      	mov	r1, r3
 801419e:	68b8      	ldr	r0, [r7, #8]
 80141a0:	f7ff fe56 	bl	8013e50 <etharp_find_entry>
 80141a4:	4603      	mov	r3, r0
 80141a6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80141a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	da02      	bge.n	80141b6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80141b0:	8afb      	ldrh	r3, [r7, #22]
 80141b2:	b25b      	sxtb	r3, r3
 80141b4:	e05d      	b.n	8014272 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80141b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80141ba:	4933      	ldr	r1, [pc, #204]	@ (8014288 <etharp_update_arp_entry+0x148>)
 80141bc:	4613      	mov	r3, r2
 80141be:	005b      	lsls	r3, r3, #1
 80141c0:	4413      	add	r3, r2
 80141c2:	00db      	lsls	r3, r3, #3
 80141c4:	440b      	add	r3, r1
 80141c6:	3314      	adds	r3, #20
 80141c8:	2202      	movs	r2, #2
 80141ca:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80141cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80141d0:	492d      	ldr	r1, [pc, #180]	@ (8014288 <etharp_update_arp_entry+0x148>)
 80141d2:	4613      	mov	r3, r2
 80141d4:	005b      	lsls	r3, r3, #1
 80141d6:	4413      	add	r3, r2
 80141d8:	00db      	lsls	r3, r3, #3
 80141da:	440b      	add	r3, r1
 80141dc:	3308      	adds	r3, #8
 80141de:	68fa      	ldr	r2, [r7, #12]
 80141e0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80141e2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80141e6:	4613      	mov	r3, r2
 80141e8:	005b      	lsls	r3, r3, #1
 80141ea:	4413      	add	r3, r2
 80141ec:	00db      	lsls	r3, r3, #3
 80141ee:	3308      	adds	r3, #8
 80141f0:	4a25      	ldr	r2, [pc, #148]	@ (8014288 <etharp_update_arp_entry+0x148>)
 80141f2:	4413      	add	r3, r2
 80141f4:	3304      	adds	r3, #4
 80141f6:	2206      	movs	r2, #6
 80141f8:	6879      	ldr	r1, [r7, #4]
 80141fa:	4618      	mov	r0, r3
 80141fc:	f003 f89f 	bl	801733e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014200:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014204:	4920      	ldr	r1, [pc, #128]	@ (8014288 <etharp_update_arp_entry+0x148>)
 8014206:	4613      	mov	r3, r2
 8014208:	005b      	lsls	r3, r3, #1
 801420a:	4413      	add	r3, r2
 801420c:	00db      	lsls	r3, r3, #3
 801420e:	440b      	add	r3, r1
 8014210:	3312      	adds	r3, #18
 8014212:	2200      	movs	r2, #0
 8014214:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014216:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801421a:	491b      	ldr	r1, [pc, #108]	@ (8014288 <etharp_update_arp_entry+0x148>)
 801421c:	4613      	mov	r3, r2
 801421e:	005b      	lsls	r3, r3, #1
 8014220:	4413      	add	r3, r2
 8014222:	00db      	lsls	r3, r3, #3
 8014224:	440b      	add	r3, r1
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	2b00      	cmp	r3, #0
 801422a:	d021      	beq.n	8014270 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801422c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014230:	4915      	ldr	r1, [pc, #84]	@ (8014288 <etharp_update_arp_entry+0x148>)
 8014232:	4613      	mov	r3, r2
 8014234:	005b      	lsls	r3, r3, #1
 8014236:	4413      	add	r3, r2
 8014238:	00db      	lsls	r3, r3, #3
 801423a:	440b      	add	r3, r1
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014240:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014244:	4910      	ldr	r1, [pc, #64]	@ (8014288 <etharp_update_arp_entry+0x148>)
 8014246:	4613      	mov	r3, r2
 8014248:	005b      	lsls	r3, r3, #1
 801424a:	4413      	add	r3, r2
 801424c:	00db      	lsls	r3, r3, #3
 801424e:	440b      	add	r3, r1
 8014250:	2200      	movs	r2, #0
 8014252:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 801425a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801425e:	9300      	str	r3, [sp, #0]
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	6939      	ldr	r1, [r7, #16]
 8014264:	68f8      	ldr	r0, [r7, #12]
 8014266:	f002 fbaf 	bl	80169c8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801426a:	6938      	ldr	r0, [r7, #16]
 801426c:	f7f7 fbb2 	bl	800b9d4 <pbuf_free>
  }
  return ERR_OK;
 8014270:	2300      	movs	r3, #0
}
 8014272:	4618      	mov	r0, r3
 8014274:	3718      	adds	r7, #24
 8014276:	46bd      	mov	sp, r7
 8014278:	bd80      	pop	{r7, pc}
 801427a:	bf00      	nop
 801427c:	0801ab2c 	.word	0x0801ab2c
 8014280:	0801ac24 	.word	0x0801ac24
 8014284:	0801aba4 	.word	0x0801aba4
 8014288:	2000cb50 	.word	0x2000cb50

0801428c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801428c:	b580      	push	{r7, lr}
 801428e:	b084      	sub	sp, #16
 8014290:	af00      	add	r7, sp, #0
 8014292:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014294:	2300      	movs	r3, #0
 8014296:	60fb      	str	r3, [r7, #12]
 8014298:	e01e      	b.n	80142d8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801429a:	4913      	ldr	r1, [pc, #76]	@ (80142e8 <etharp_cleanup_netif+0x5c>)
 801429c:	68fa      	ldr	r2, [r7, #12]
 801429e:	4613      	mov	r3, r2
 80142a0:	005b      	lsls	r3, r3, #1
 80142a2:	4413      	add	r3, r2
 80142a4:	00db      	lsls	r3, r3, #3
 80142a6:	440b      	add	r3, r1
 80142a8:	3314      	adds	r3, #20
 80142aa:	781b      	ldrb	r3, [r3, #0]
 80142ac:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80142ae:	7afb      	ldrb	r3, [r7, #11]
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d00e      	beq.n	80142d2 <etharp_cleanup_netif+0x46>
 80142b4:	490c      	ldr	r1, [pc, #48]	@ (80142e8 <etharp_cleanup_netif+0x5c>)
 80142b6:	68fa      	ldr	r2, [r7, #12]
 80142b8:	4613      	mov	r3, r2
 80142ba:	005b      	lsls	r3, r3, #1
 80142bc:	4413      	add	r3, r2
 80142be:	00db      	lsls	r3, r3, #3
 80142c0:	440b      	add	r3, r1
 80142c2:	3308      	adds	r3, #8
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	687a      	ldr	r2, [r7, #4]
 80142c8:	429a      	cmp	r2, r3
 80142ca:	d102      	bne.n	80142d2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80142cc:	68f8      	ldr	r0, [r7, #12]
 80142ce:	f7ff fce5 	bl	8013c9c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80142d2:	68fb      	ldr	r3, [r7, #12]
 80142d4:	3301      	adds	r3, #1
 80142d6:	60fb      	str	r3, [r7, #12]
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	2b09      	cmp	r3, #9
 80142dc:	dddd      	ble.n	801429a <etharp_cleanup_netif+0xe>
    }
  }
}
 80142de:	bf00      	nop
 80142e0:	bf00      	nop
 80142e2:	3710      	adds	r7, #16
 80142e4:	46bd      	mov	sp, r7
 80142e6:	bd80      	pop	{r7, pc}
 80142e8:	2000cb50 	.word	0x2000cb50

080142ec <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80142ec:	b5b0      	push	{r4, r5, r7, lr}
 80142ee:	b08a      	sub	sp, #40	@ 0x28
 80142f0:	af04      	add	r7, sp, #16
 80142f2:	6078      	str	r0, [r7, #4]
 80142f4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80142f6:	683b      	ldr	r3, [r7, #0]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d107      	bne.n	801430c <etharp_input+0x20>
 80142fc:	4b3f      	ldr	r3, [pc, #252]	@ (80143fc <etharp_input+0x110>)
 80142fe:	f240 228a 	movw	r2, #650	@ 0x28a
 8014302:	493f      	ldr	r1, [pc, #252]	@ (8014400 <etharp_input+0x114>)
 8014304:	483f      	ldr	r0, [pc, #252]	@ (8014404 <etharp_input+0x118>)
 8014306:	f002 fdbd 	bl	8016e84 <iprintf>
 801430a:	e074      	b.n	80143f6 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	685b      	ldr	r3, [r3, #4]
 8014310:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014312:	693b      	ldr	r3, [r7, #16]
 8014314:	881b      	ldrh	r3, [r3, #0]
 8014316:	b29b      	uxth	r3, r3
 8014318:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801431c:	d10c      	bne.n	8014338 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801431e:	693b      	ldr	r3, [r7, #16]
 8014320:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014322:	2b06      	cmp	r3, #6
 8014324:	d108      	bne.n	8014338 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014326:	693b      	ldr	r3, [r7, #16]
 8014328:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801432a:	2b04      	cmp	r3, #4
 801432c:	d104      	bne.n	8014338 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801432e:	693b      	ldr	r3, [r7, #16]
 8014330:	885b      	ldrh	r3, [r3, #2]
 8014332:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014334:	2b08      	cmp	r3, #8
 8014336:	d003      	beq.n	8014340 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014338:	6878      	ldr	r0, [r7, #4]
 801433a:	f7f7 fb4b 	bl	800b9d4 <pbuf_free>
    return;
 801433e:	e05a      	b.n	80143f6 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014340:	693b      	ldr	r3, [r7, #16]
 8014342:	330e      	adds	r3, #14
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014348:	693b      	ldr	r3, [r7, #16]
 801434a:	3318      	adds	r3, #24
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014350:	683b      	ldr	r3, [r7, #0]
 8014352:	3304      	adds	r3, #4
 8014354:	681b      	ldr	r3, [r3, #0]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d102      	bne.n	8014360 <etharp_input+0x74>
    for_us = 0;
 801435a:	2300      	movs	r3, #0
 801435c:	75fb      	strb	r3, [r7, #23]
 801435e:	e009      	b.n	8014374 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014360:	68ba      	ldr	r2, [r7, #8]
 8014362:	683b      	ldr	r3, [r7, #0]
 8014364:	3304      	adds	r3, #4
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	429a      	cmp	r2, r3
 801436a:	bf0c      	ite	eq
 801436c:	2301      	moveq	r3, #1
 801436e:	2300      	movne	r3, #0
 8014370:	b2db      	uxtb	r3, r3
 8014372:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014374:	693b      	ldr	r3, [r7, #16]
 8014376:	f103 0208 	add.w	r2, r3, #8
 801437a:	7dfb      	ldrb	r3, [r7, #23]
 801437c:	2b00      	cmp	r3, #0
 801437e:	d001      	beq.n	8014384 <etharp_input+0x98>
 8014380:	2301      	movs	r3, #1
 8014382:	e000      	b.n	8014386 <etharp_input+0x9a>
 8014384:	2302      	movs	r3, #2
 8014386:	f107 010c 	add.w	r1, r7, #12
 801438a:	6838      	ldr	r0, [r7, #0]
 801438c:	f7ff fed8 	bl	8014140 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014390:	693b      	ldr	r3, [r7, #16]
 8014392:	88db      	ldrh	r3, [r3, #6]
 8014394:	b29b      	uxth	r3, r3
 8014396:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801439a:	d003      	beq.n	80143a4 <etharp_input+0xb8>
 801439c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80143a0:	d01e      	beq.n	80143e0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80143a2:	e025      	b.n	80143f0 <etharp_input+0x104>
      if (for_us) {
 80143a4:	7dfb      	ldrb	r3, [r7, #23]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d021      	beq.n	80143ee <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80143aa:	683b      	ldr	r3, [r7, #0]
 80143ac:	f103 0036 	add.w	r0, r3, #54	@ 0x36
 80143b0:	693b      	ldr	r3, [r7, #16]
 80143b2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80143b6:	683b      	ldr	r3, [r7, #0]
 80143b8:	f103 0536 	add.w	r5, r3, #54	@ 0x36
 80143bc:	683b      	ldr	r3, [r7, #0]
 80143be:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80143c0:	693a      	ldr	r2, [r7, #16]
 80143c2:	3208      	adds	r2, #8
        etharp_raw(netif,
 80143c4:	2102      	movs	r1, #2
 80143c6:	9103      	str	r1, [sp, #12]
 80143c8:	f107 010c 	add.w	r1, r7, #12
 80143cc:	9102      	str	r1, [sp, #8]
 80143ce:	9201      	str	r2, [sp, #4]
 80143d0:	9300      	str	r3, [sp, #0]
 80143d2:	462b      	mov	r3, r5
 80143d4:	4622      	mov	r2, r4
 80143d6:	4601      	mov	r1, r0
 80143d8:	6838      	ldr	r0, [r7, #0]
 80143da:	f000 faef 	bl	80149bc <etharp_raw>
      break;
 80143de:	e006      	b.n	80143ee <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 80143e0:	f107 030c 	add.w	r3, r7, #12
 80143e4:	4619      	mov	r1, r3
 80143e6:	6838      	ldr	r0, [r7, #0]
 80143e8:	f7fe f988 	bl	80126fc <dhcp_arp_reply>
      break;
 80143ec:	e000      	b.n	80143f0 <etharp_input+0x104>
      break;
 80143ee:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80143f0:	6878      	ldr	r0, [r7, #4]
 80143f2:	f7f7 faef 	bl	800b9d4 <pbuf_free>
}
 80143f6:	3718      	adds	r7, #24
 80143f8:	46bd      	mov	sp, r7
 80143fa:	bdb0      	pop	{r4, r5, r7, pc}
 80143fc:	0801ab2c 	.word	0x0801ab2c
 8014400:	0801ac7c 	.word	0x0801ac7c
 8014404:	0801aba4 	.word	0x0801aba4

08014408 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014408:	b580      	push	{r7, lr}
 801440a:	b086      	sub	sp, #24
 801440c:	af02      	add	r7, sp, #8
 801440e:	60f8      	str	r0, [r7, #12]
 8014410:	60b9      	str	r1, [r7, #8]
 8014412:	4613      	mov	r3, r2
 8014414:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014416:	79fa      	ldrb	r2, [r7, #7]
 8014418:	4944      	ldr	r1, [pc, #272]	@ (801452c <etharp_output_to_arp_index+0x124>)
 801441a:	4613      	mov	r3, r2
 801441c:	005b      	lsls	r3, r3, #1
 801441e:	4413      	add	r3, r2
 8014420:	00db      	lsls	r3, r3, #3
 8014422:	440b      	add	r3, r1
 8014424:	3314      	adds	r3, #20
 8014426:	781b      	ldrb	r3, [r3, #0]
 8014428:	2b01      	cmp	r3, #1
 801442a:	d806      	bhi.n	801443a <etharp_output_to_arp_index+0x32>
 801442c:	4b40      	ldr	r3, [pc, #256]	@ (8014530 <etharp_output_to_arp_index+0x128>)
 801442e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8014432:	4940      	ldr	r1, [pc, #256]	@ (8014534 <etharp_output_to_arp_index+0x12c>)
 8014434:	4840      	ldr	r0, [pc, #256]	@ (8014538 <etharp_output_to_arp_index+0x130>)
 8014436:	f002 fd25 	bl	8016e84 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801443a:	79fa      	ldrb	r2, [r7, #7]
 801443c:	493b      	ldr	r1, [pc, #236]	@ (801452c <etharp_output_to_arp_index+0x124>)
 801443e:	4613      	mov	r3, r2
 8014440:	005b      	lsls	r3, r3, #1
 8014442:	4413      	add	r3, r2
 8014444:	00db      	lsls	r3, r3, #3
 8014446:	440b      	add	r3, r1
 8014448:	3314      	adds	r3, #20
 801444a:	781b      	ldrb	r3, [r3, #0]
 801444c:	2b02      	cmp	r3, #2
 801444e:	d153      	bne.n	80144f8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014450:	79fa      	ldrb	r2, [r7, #7]
 8014452:	4936      	ldr	r1, [pc, #216]	@ (801452c <etharp_output_to_arp_index+0x124>)
 8014454:	4613      	mov	r3, r2
 8014456:	005b      	lsls	r3, r3, #1
 8014458:	4413      	add	r3, r2
 801445a:	00db      	lsls	r3, r3, #3
 801445c:	440b      	add	r3, r1
 801445e:	3312      	adds	r3, #18
 8014460:	881b      	ldrh	r3, [r3, #0]
 8014462:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8014466:	d919      	bls.n	801449c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014468:	79fa      	ldrb	r2, [r7, #7]
 801446a:	4613      	mov	r3, r2
 801446c:	005b      	lsls	r3, r3, #1
 801446e:	4413      	add	r3, r2
 8014470:	00db      	lsls	r3, r3, #3
 8014472:	4a2e      	ldr	r2, [pc, #184]	@ (801452c <etharp_output_to_arp_index+0x124>)
 8014474:	4413      	add	r3, r2
 8014476:	3304      	adds	r3, #4
 8014478:	4619      	mov	r1, r3
 801447a:	68f8      	ldr	r0, [r7, #12]
 801447c:	f000 fb4c 	bl	8014b18 <etharp_request>
 8014480:	4603      	mov	r3, r0
 8014482:	2b00      	cmp	r3, #0
 8014484:	d138      	bne.n	80144f8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014486:	79fa      	ldrb	r2, [r7, #7]
 8014488:	4928      	ldr	r1, [pc, #160]	@ (801452c <etharp_output_to_arp_index+0x124>)
 801448a:	4613      	mov	r3, r2
 801448c:	005b      	lsls	r3, r3, #1
 801448e:	4413      	add	r3, r2
 8014490:	00db      	lsls	r3, r3, #3
 8014492:	440b      	add	r3, r1
 8014494:	3314      	adds	r3, #20
 8014496:	2203      	movs	r2, #3
 8014498:	701a      	strb	r2, [r3, #0]
 801449a:	e02d      	b.n	80144f8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801449c:	79fa      	ldrb	r2, [r7, #7]
 801449e:	4923      	ldr	r1, [pc, #140]	@ (801452c <etharp_output_to_arp_index+0x124>)
 80144a0:	4613      	mov	r3, r2
 80144a2:	005b      	lsls	r3, r3, #1
 80144a4:	4413      	add	r3, r2
 80144a6:	00db      	lsls	r3, r3, #3
 80144a8:	440b      	add	r3, r1
 80144aa:	3312      	adds	r3, #18
 80144ac:	881b      	ldrh	r3, [r3, #0]
 80144ae:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80144b2:	d321      	bcc.n	80144f8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80144b4:	79fa      	ldrb	r2, [r7, #7]
 80144b6:	4613      	mov	r3, r2
 80144b8:	005b      	lsls	r3, r3, #1
 80144ba:	4413      	add	r3, r2
 80144bc:	00db      	lsls	r3, r3, #3
 80144be:	4a1b      	ldr	r2, [pc, #108]	@ (801452c <etharp_output_to_arp_index+0x124>)
 80144c0:	4413      	add	r3, r2
 80144c2:	1d19      	adds	r1, r3, #4
 80144c4:	79fa      	ldrb	r2, [r7, #7]
 80144c6:	4613      	mov	r3, r2
 80144c8:	005b      	lsls	r3, r3, #1
 80144ca:	4413      	add	r3, r2
 80144cc:	00db      	lsls	r3, r3, #3
 80144ce:	3308      	adds	r3, #8
 80144d0:	4a16      	ldr	r2, [pc, #88]	@ (801452c <etharp_output_to_arp_index+0x124>)
 80144d2:	4413      	add	r3, r2
 80144d4:	3304      	adds	r3, #4
 80144d6:	461a      	mov	r2, r3
 80144d8:	68f8      	ldr	r0, [r7, #12]
 80144da:	f000 fafb 	bl	8014ad4 <etharp_request_dst>
 80144de:	4603      	mov	r3, r0
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d109      	bne.n	80144f8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80144e4:	79fa      	ldrb	r2, [r7, #7]
 80144e6:	4911      	ldr	r1, [pc, #68]	@ (801452c <etharp_output_to_arp_index+0x124>)
 80144e8:	4613      	mov	r3, r2
 80144ea:	005b      	lsls	r3, r3, #1
 80144ec:	4413      	add	r3, r2
 80144ee:	00db      	lsls	r3, r3, #3
 80144f0:	440b      	add	r3, r1
 80144f2:	3314      	adds	r3, #20
 80144f4:	2203      	movs	r2, #3
 80144f6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	f103 0136 	add.w	r1, r3, #54	@ 0x36
 80144fe:	79fa      	ldrb	r2, [r7, #7]
 8014500:	4613      	mov	r3, r2
 8014502:	005b      	lsls	r3, r3, #1
 8014504:	4413      	add	r3, r2
 8014506:	00db      	lsls	r3, r3, #3
 8014508:	3308      	adds	r3, #8
 801450a:	4a08      	ldr	r2, [pc, #32]	@ (801452c <etharp_output_to_arp_index+0x124>)
 801450c:	4413      	add	r3, r2
 801450e:	3304      	adds	r3, #4
 8014510:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014514:	9200      	str	r2, [sp, #0]
 8014516:	460a      	mov	r2, r1
 8014518:	68b9      	ldr	r1, [r7, #8]
 801451a:	68f8      	ldr	r0, [r7, #12]
 801451c:	f002 fa54 	bl	80169c8 <ethernet_output>
 8014520:	4603      	mov	r3, r0
}
 8014522:	4618      	mov	r0, r3
 8014524:	3710      	adds	r7, #16
 8014526:	46bd      	mov	sp, r7
 8014528:	bd80      	pop	{r7, pc}
 801452a:	bf00      	nop
 801452c:	2000cb50 	.word	0x2000cb50
 8014530:	0801ab2c 	.word	0x0801ab2c
 8014534:	0801ac9c 	.word	0x0801ac9c
 8014538:	0801aba4 	.word	0x0801aba4

0801453c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801453c:	b580      	push	{r7, lr}
 801453e:	b08a      	sub	sp, #40	@ 0x28
 8014540:	af02      	add	r7, sp, #8
 8014542:	60f8      	str	r0, [r7, #12]
 8014544:	60b9      	str	r1, [r7, #8]
 8014546:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	2b00      	cmp	r3, #0
 8014550:	d106      	bne.n	8014560 <etharp_output+0x24>
 8014552:	4b73      	ldr	r3, [pc, #460]	@ (8014720 <etharp_output+0x1e4>)
 8014554:	f240 321e 	movw	r2, #798	@ 0x31e
 8014558:	4972      	ldr	r1, [pc, #456]	@ (8014724 <etharp_output+0x1e8>)
 801455a:	4873      	ldr	r0, [pc, #460]	@ (8014728 <etharp_output+0x1ec>)
 801455c:	f002 fc92 	bl	8016e84 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014560:	68bb      	ldr	r3, [r7, #8]
 8014562:	2b00      	cmp	r3, #0
 8014564:	d106      	bne.n	8014574 <etharp_output+0x38>
 8014566:	4b6e      	ldr	r3, [pc, #440]	@ (8014720 <etharp_output+0x1e4>)
 8014568:	f240 321f 	movw	r2, #799	@ 0x31f
 801456c:	496f      	ldr	r1, [pc, #444]	@ (801472c <etharp_output+0x1f0>)
 801456e:	486e      	ldr	r0, [pc, #440]	@ (8014728 <etharp_output+0x1ec>)
 8014570:	f002 fc88 	bl	8016e84 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	2b00      	cmp	r3, #0
 8014578:	d106      	bne.n	8014588 <etharp_output+0x4c>
 801457a:	4b69      	ldr	r3, [pc, #420]	@ (8014720 <etharp_output+0x1e4>)
 801457c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8014580:	496b      	ldr	r1, [pc, #428]	@ (8014730 <etharp_output+0x1f4>)
 8014582:	4869      	ldr	r0, [pc, #420]	@ (8014728 <etharp_output+0x1ec>)
 8014584:	f002 fc7e 	bl	8016e84 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	68f9      	ldr	r1, [r7, #12]
 801458e:	4618      	mov	r0, r3
 8014590:	f001 fa7c 	bl	8015a8c <ip4_addr_isbroadcast_u32>
 8014594:	4603      	mov	r3, r0
 8014596:	2b00      	cmp	r3, #0
 8014598:	d002      	beq.n	80145a0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801459a:	4b66      	ldr	r3, [pc, #408]	@ (8014734 <etharp_output+0x1f8>)
 801459c:	61fb      	str	r3, [r7, #28]
 801459e:	e0af      	b.n	8014700 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80145a8:	2be0      	cmp	r3, #224	@ 0xe0
 80145aa:	d118      	bne.n	80145de <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80145ac:	2301      	movs	r3, #1
 80145ae:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80145b0:	2300      	movs	r3, #0
 80145b2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80145b4:	235e      	movs	r3, #94	@ 0x5e
 80145b6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	3301      	adds	r3, #1
 80145bc:	781b      	ldrb	r3, [r3, #0]
 80145be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80145c2:	b2db      	uxtb	r3, r3
 80145c4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	3302      	adds	r3, #2
 80145ca:	781b      	ldrb	r3, [r3, #0]
 80145cc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	3303      	adds	r3, #3
 80145d2:	781b      	ldrb	r3, [r3, #0]
 80145d4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80145d6:	f107 0310 	add.w	r3, r7, #16
 80145da:	61fb      	str	r3, [r7, #28]
 80145dc:	e090      	b.n	8014700 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	681a      	ldr	r2, [r3, #0]
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	3304      	adds	r3, #4
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	405a      	eors	r2, r3
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	3308      	adds	r3, #8
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	4013      	ands	r3, r2
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d012      	beq.n	801461c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80145fc:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8014600:	4293      	cmp	r3, r2
 8014602:	d00b      	beq.n	801461c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	330c      	adds	r3, #12
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	2b00      	cmp	r3, #0
 801460c:	d003      	beq.n	8014616 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	330c      	adds	r3, #12
 8014612:	61bb      	str	r3, [r7, #24]
 8014614:	e002      	b.n	801461c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014616:	f06f 0303 	mvn.w	r3, #3
 801461a:	e07d      	b.n	8014718 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801461c:	4b46      	ldr	r3, [pc, #280]	@ (8014738 <etharp_output+0x1fc>)
 801461e:	781b      	ldrb	r3, [r3, #0]
 8014620:	4619      	mov	r1, r3
 8014622:	4a46      	ldr	r2, [pc, #280]	@ (801473c <etharp_output+0x200>)
 8014624:	460b      	mov	r3, r1
 8014626:	005b      	lsls	r3, r3, #1
 8014628:	440b      	add	r3, r1
 801462a:	00db      	lsls	r3, r3, #3
 801462c:	4413      	add	r3, r2
 801462e:	3314      	adds	r3, #20
 8014630:	781b      	ldrb	r3, [r3, #0]
 8014632:	2b01      	cmp	r3, #1
 8014634:	d925      	bls.n	8014682 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014636:	4b40      	ldr	r3, [pc, #256]	@ (8014738 <etharp_output+0x1fc>)
 8014638:	781b      	ldrb	r3, [r3, #0]
 801463a:	4619      	mov	r1, r3
 801463c:	4a3f      	ldr	r2, [pc, #252]	@ (801473c <etharp_output+0x200>)
 801463e:	460b      	mov	r3, r1
 8014640:	005b      	lsls	r3, r3, #1
 8014642:	440b      	add	r3, r1
 8014644:	00db      	lsls	r3, r3, #3
 8014646:	4413      	add	r3, r2
 8014648:	3308      	adds	r3, #8
 801464a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801464c:	68fa      	ldr	r2, [r7, #12]
 801464e:	429a      	cmp	r2, r3
 8014650:	d117      	bne.n	8014682 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014652:	69bb      	ldr	r3, [r7, #24]
 8014654:	681a      	ldr	r2, [r3, #0]
 8014656:	4b38      	ldr	r3, [pc, #224]	@ (8014738 <etharp_output+0x1fc>)
 8014658:	781b      	ldrb	r3, [r3, #0]
 801465a:	4618      	mov	r0, r3
 801465c:	4937      	ldr	r1, [pc, #220]	@ (801473c <etharp_output+0x200>)
 801465e:	4603      	mov	r3, r0
 8014660:	005b      	lsls	r3, r3, #1
 8014662:	4403      	add	r3, r0
 8014664:	00db      	lsls	r3, r3, #3
 8014666:	440b      	add	r3, r1
 8014668:	3304      	adds	r3, #4
 801466a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801466c:	429a      	cmp	r2, r3
 801466e:	d108      	bne.n	8014682 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014670:	4b31      	ldr	r3, [pc, #196]	@ (8014738 <etharp_output+0x1fc>)
 8014672:	781b      	ldrb	r3, [r3, #0]
 8014674:	461a      	mov	r2, r3
 8014676:	68b9      	ldr	r1, [r7, #8]
 8014678:	68f8      	ldr	r0, [r7, #12]
 801467a:	f7ff fec5 	bl	8014408 <etharp_output_to_arp_index>
 801467e:	4603      	mov	r3, r0
 8014680:	e04a      	b.n	8014718 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014682:	2300      	movs	r3, #0
 8014684:	75fb      	strb	r3, [r7, #23]
 8014686:	e031      	b.n	80146ec <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014688:	7dfa      	ldrb	r2, [r7, #23]
 801468a:	492c      	ldr	r1, [pc, #176]	@ (801473c <etharp_output+0x200>)
 801468c:	4613      	mov	r3, r2
 801468e:	005b      	lsls	r3, r3, #1
 8014690:	4413      	add	r3, r2
 8014692:	00db      	lsls	r3, r3, #3
 8014694:	440b      	add	r3, r1
 8014696:	3314      	adds	r3, #20
 8014698:	781b      	ldrb	r3, [r3, #0]
 801469a:	2b01      	cmp	r3, #1
 801469c:	d923      	bls.n	80146e6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801469e:	7dfa      	ldrb	r2, [r7, #23]
 80146a0:	4926      	ldr	r1, [pc, #152]	@ (801473c <etharp_output+0x200>)
 80146a2:	4613      	mov	r3, r2
 80146a4:	005b      	lsls	r3, r3, #1
 80146a6:	4413      	add	r3, r2
 80146a8:	00db      	lsls	r3, r3, #3
 80146aa:	440b      	add	r3, r1
 80146ac:	3308      	adds	r3, #8
 80146ae:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80146b0:	68fa      	ldr	r2, [r7, #12]
 80146b2:	429a      	cmp	r2, r3
 80146b4:	d117      	bne.n	80146e6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80146b6:	69bb      	ldr	r3, [r7, #24]
 80146b8:	6819      	ldr	r1, [r3, #0]
 80146ba:	7dfa      	ldrb	r2, [r7, #23]
 80146bc:	481f      	ldr	r0, [pc, #124]	@ (801473c <etharp_output+0x200>)
 80146be:	4613      	mov	r3, r2
 80146c0:	005b      	lsls	r3, r3, #1
 80146c2:	4413      	add	r3, r2
 80146c4:	00db      	lsls	r3, r3, #3
 80146c6:	4403      	add	r3, r0
 80146c8:	3304      	adds	r3, #4
 80146ca:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80146cc:	4299      	cmp	r1, r3
 80146ce:	d10a      	bne.n	80146e6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80146d0:	4a19      	ldr	r2, [pc, #100]	@ (8014738 <etharp_output+0x1fc>)
 80146d2:	7dfb      	ldrb	r3, [r7, #23]
 80146d4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80146d6:	7dfb      	ldrb	r3, [r7, #23]
 80146d8:	461a      	mov	r2, r3
 80146da:	68b9      	ldr	r1, [r7, #8]
 80146dc:	68f8      	ldr	r0, [r7, #12]
 80146de:	f7ff fe93 	bl	8014408 <etharp_output_to_arp_index>
 80146e2:	4603      	mov	r3, r0
 80146e4:	e018      	b.n	8014718 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80146e6:	7dfb      	ldrb	r3, [r7, #23]
 80146e8:	3301      	adds	r3, #1
 80146ea:	75fb      	strb	r3, [r7, #23]
 80146ec:	7dfb      	ldrb	r3, [r7, #23]
 80146ee:	2b09      	cmp	r3, #9
 80146f0:	d9ca      	bls.n	8014688 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80146f2:	68ba      	ldr	r2, [r7, #8]
 80146f4:	69b9      	ldr	r1, [r7, #24]
 80146f6:	68f8      	ldr	r0, [r7, #12]
 80146f8:	f000 f822 	bl	8014740 <etharp_query>
 80146fc:	4603      	mov	r3, r0
 80146fe:	e00b      	b.n	8014718 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 8014706:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801470a:	9300      	str	r3, [sp, #0]
 801470c:	69fb      	ldr	r3, [r7, #28]
 801470e:	68b9      	ldr	r1, [r7, #8]
 8014710:	68f8      	ldr	r0, [r7, #12]
 8014712:	f002 f959 	bl	80169c8 <ethernet_output>
 8014716:	4603      	mov	r3, r0
}
 8014718:	4618      	mov	r0, r3
 801471a:	3720      	adds	r7, #32
 801471c:	46bd      	mov	sp, r7
 801471e:	bd80      	pop	{r7, pc}
 8014720:	0801ab2c 	.word	0x0801ab2c
 8014724:	0801ac7c 	.word	0x0801ac7c
 8014728:	0801aba4 	.word	0x0801aba4
 801472c:	0801accc 	.word	0x0801accc
 8014730:	0801ac6c 	.word	0x0801ac6c
 8014734:	0801b6b4 	.word	0x0801b6b4
 8014738:	2000cc40 	.word	0x2000cc40
 801473c:	2000cb50 	.word	0x2000cb50

08014740 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014740:	b580      	push	{r7, lr}
 8014742:	b08c      	sub	sp, #48	@ 0x30
 8014744:	af02      	add	r7, sp, #8
 8014746:	60f8      	str	r0, [r7, #12]
 8014748:	60b9      	str	r1, [r7, #8]
 801474a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	3336      	adds	r3, #54	@ 0x36
 8014750:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014752:	23ff      	movs	r3, #255	@ 0xff
 8014754:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8014758:	2300      	movs	r3, #0
 801475a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801475c:	68bb      	ldr	r3, [r7, #8]
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	68f9      	ldr	r1, [r7, #12]
 8014762:	4618      	mov	r0, r3
 8014764:	f001 f992 	bl	8015a8c <ip4_addr_isbroadcast_u32>
 8014768:	4603      	mov	r3, r0
 801476a:	2b00      	cmp	r3, #0
 801476c:	d10c      	bne.n	8014788 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801476e:	68bb      	ldr	r3, [r7, #8]
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014776:	2be0      	cmp	r3, #224	@ 0xe0
 8014778:	d006      	beq.n	8014788 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801477a:	68bb      	ldr	r3, [r7, #8]
 801477c:	2b00      	cmp	r3, #0
 801477e:	d003      	beq.n	8014788 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014780:	68bb      	ldr	r3, [r7, #8]
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	2b00      	cmp	r3, #0
 8014786:	d102      	bne.n	801478e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014788:	f06f 030f 	mvn.w	r3, #15
 801478c:	e101      	b.n	8014992 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801478e:	68fa      	ldr	r2, [r7, #12]
 8014790:	2101      	movs	r1, #1
 8014792:	68b8      	ldr	r0, [r7, #8]
 8014794:	f7ff fb5c 	bl	8013e50 <etharp_find_entry>
 8014798:	4603      	mov	r3, r0
 801479a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801479c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	da02      	bge.n	80147aa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80147a4:	8a7b      	ldrh	r3, [r7, #18]
 80147a6:	b25b      	sxtb	r3, r3
 80147a8:	e0f3      	b.n	8014992 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80147aa:	8a7b      	ldrh	r3, [r7, #18]
 80147ac:	2b7e      	cmp	r3, #126	@ 0x7e
 80147ae:	d906      	bls.n	80147be <etharp_query+0x7e>
 80147b0:	4b7a      	ldr	r3, [pc, #488]	@ (801499c <etharp_query+0x25c>)
 80147b2:	f240 32c1 	movw	r2, #961	@ 0x3c1
 80147b6:	497a      	ldr	r1, [pc, #488]	@ (80149a0 <etharp_query+0x260>)
 80147b8:	487a      	ldr	r0, [pc, #488]	@ (80149a4 <etharp_query+0x264>)
 80147ba:	f002 fb63 	bl	8016e84 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80147be:	8a7b      	ldrh	r3, [r7, #18]
 80147c0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80147c2:	7c7a      	ldrb	r2, [r7, #17]
 80147c4:	4978      	ldr	r1, [pc, #480]	@ (80149a8 <etharp_query+0x268>)
 80147c6:	4613      	mov	r3, r2
 80147c8:	005b      	lsls	r3, r3, #1
 80147ca:	4413      	add	r3, r2
 80147cc:	00db      	lsls	r3, r3, #3
 80147ce:	440b      	add	r3, r1
 80147d0:	3314      	adds	r3, #20
 80147d2:	781b      	ldrb	r3, [r3, #0]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d115      	bne.n	8014804 <etharp_query+0xc4>
    is_new_entry = 1;
 80147d8:	2301      	movs	r3, #1
 80147da:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80147dc:	7c7a      	ldrb	r2, [r7, #17]
 80147de:	4972      	ldr	r1, [pc, #456]	@ (80149a8 <etharp_query+0x268>)
 80147e0:	4613      	mov	r3, r2
 80147e2:	005b      	lsls	r3, r3, #1
 80147e4:	4413      	add	r3, r2
 80147e6:	00db      	lsls	r3, r3, #3
 80147e8:	440b      	add	r3, r1
 80147ea:	3314      	adds	r3, #20
 80147ec:	2201      	movs	r2, #1
 80147ee:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80147f0:	7c7a      	ldrb	r2, [r7, #17]
 80147f2:	496d      	ldr	r1, [pc, #436]	@ (80149a8 <etharp_query+0x268>)
 80147f4:	4613      	mov	r3, r2
 80147f6:	005b      	lsls	r3, r3, #1
 80147f8:	4413      	add	r3, r2
 80147fa:	00db      	lsls	r3, r3, #3
 80147fc:	440b      	add	r3, r1
 80147fe:	3308      	adds	r3, #8
 8014800:	68fa      	ldr	r2, [r7, #12]
 8014802:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014804:	7c7a      	ldrb	r2, [r7, #17]
 8014806:	4968      	ldr	r1, [pc, #416]	@ (80149a8 <etharp_query+0x268>)
 8014808:	4613      	mov	r3, r2
 801480a:	005b      	lsls	r3, r3, #1
 801480c:	4413      	add	r3, r2
 801480e:	00db      	lsls	r3, r3, #3
 8014810:	440b      	add	r3, r1
 8014812:	3314      	adds	r3, #20
 8014814:	781b      	ldrb	r3, [r3, #0]
 8014816:	2b01      	cmp	r3, #1
 8014818:	d011      	beq.n	801483e <etharp_query+0xfe>
 801481a:	7c7a      	ldrb	r2, [r7, #17]
 801481c:	4962      	ldr	r1, [pc, #392]	@ (80149a8 <etharp_query+0x268>)
 801481e:	4613      	mov	r3, r2
 8014820:	005b      	lsls	r3, r3, #1
 8014822:	4413      	add	r3, r2
 8014824:	00db      	lsls	r3, r3, #3
 8014826:	440b      	add	r3, r1
 8014828:	3314      	adds	r3, #20
 801482a:	781b      	ldrb	r3, [r3, #0]
 801482c:	2b01      	cmp	r3, #1
 801482e:	d806      	bhi.n	801483e <etharp_query+0xfe>
 8014830:	4b5a      	ldr	r3, [pc, #360]	@ (801499c <etharp_query+0x25c>)
 8014832:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8014836:	495d      	ldr	r1, [pc, #372]	@ (80149ac <etharp_query+0x26c>)
 8014838:	485a      	ldr	r0, [pc, #360]	@ (80149a4 <etharp_query+0x264>)
 801483a:	f002 fb23 	bl	8016e84 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801483e:	6a3b      	ldr	r3, [r7, #32]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d102      	bne.n	801484a <etharp_query+0x10a>
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	2b00      	cmp	r3, #0
 8014848:	d10c      	bne.n	8014864 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801484a:	68b9      	ldr	r1, [r7, #8]
 801484c:	68f8      	ldr	r0, [r7, #12]
 801484e:	f000 f963 	bl	8014b18 <etharp_request>
 8014852:	4603      	mov	r3, r0
 8014854:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	2b00      	cmp	r3, #0
 801485c:	d102      	bne.n	8014864 <etharp_query+0x124>
      return result;
 801485e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8014862:	e096      	b.n	8014992 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	2b00      	cmp	r3, #0
 8014868:	d106      	bne.n	8014878 <etharp_query+0x138>
 801486a:	4b4c      	ldr	r3, [pc, #304]	@ (801499c <etharp_query+0x25c>)
 801486c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8014870:	494f      	ldr	r1, [pc, #316]	@ (80149b0 <etharp_query+0x270>)
 8014872:	484c      	ldr	r0, [pc, #304]	@ (80149a4 <etharp_query+0x264>)
 8014874:	f002 fb06 	bl	8016e84 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014878:	7c7a      	ldrb	r2, [r7, #17]
 801487a:	494b      	ldr	r1, [pc, #300]	@ (80149a8 <etharp_query+0x268>)
 801487c:	4613      	mov	r3, r2
 801487e:	005b      	lsls	r3, r3, #1
 8014880:	4413      	add	r3, r2
 8014882:	00db      	lsls	r3, r3, #3
 8014884:	440b      	add	r3, r1
 8014886:	3314      	adds	r3, #20
 8014888:	781b      	ldrb	r3, [r3, #0]
 801488a:	2b01      	cmp	r3, #1
 801488c:	d917      	bls.n	80148be <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801488e:	4a49      	ldr	r2, [pc, #292]	@ (80149b4 <etharp_query+0x274>)
 8014890:	7c7b      	ldrb	r3, [r7, #17]
 8014892:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014894:	7c7a      	ldrb	r2, [r7, #17]
 8014896:	4613      	mov	r3, r2
 8014898:	005b      	lsls	r3, r3, #1
 801489a:	4413      	add	r3, r2
 801489c:	00db      	lsls	r3, r3, #3
 801489e:	3308      	adds	r3, #8
 80148a0:	4a41      	ldr	r2, [pc, #260]	@ (80149a8 <etharp_query+0x268>)
 80148a2:	4413      	add	r3, r2
 80148a4:	3304      	adds	r3, #4
 80148a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80148aa:	9200      	str	r2, [sp, #0]
 80148ac:	697a      	ldr	r2, [r7, #20]
 80148ae:	6879      	ldr	r1, [r7, #4]
 80148b0:	68f8      	ldr	r0, [r7, #12]
 80148b2:	f002 f889 	bl	80169c8 <ethernet_output>
 80148b6:	4603      	mov	r3, r0
 80148b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80148bc:	e067      	b.n	801498e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80148be:	7c7a      	ldrb	r2, [r7, #17]
 80148c0:	4939      	ldr	r1, [pc, #228]	@ (80149a8 <etharp_query+0x268>)
 80148c2:	4613      	mov	r3, r2
 80148c4:	005b      	lsls	r3, r3, #1
 80148c6:	4413      	add	r3, r2
 80148c8:	00db      	lsls	r3, r3, #3
 80148ca:	440b      	add	r3, r1
 80148cc:	3314      	adds	r3, #20
 80148ce:	781b      	ldrb	r3, [r3, #0]
 80148d0:	2b01      	cmp	r3, #1
 80148d2:	d15c      	bne.n	801498e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80148d4:	2300      	movs	r3, #0
 80148d6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	61fb      	str	r3, [r7, #28]
    while (p) {
 80148dc:	e01c      	b.n	8014918 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80148de:	69fb      	ldr	r3, [r7, #28]
 80148e0:	895a      	ldrh	r2, [r3, #10]
 80148e2:	69fb      	ldr	r3, [r7, #28]
 80148e4:	891b      	ldrh	r3, [r3, #8]
 80148e6:	429a      	cmp	r2, r3
 80148e8:	d10a      	bne.n	8014900 <etharp_query+0x1c0>
 80148ea:	69fb      	ldr	r3, [r7, #28]
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d006      	beq.n	8014900 <etharp_query+0x1c0>
 80148f2:	4b2a      	ldr	r3, [pc, #168]	@ (801499c <etharp_query+0x25c>)
 80148f4:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80148f8:	492f      	ldr	r1, [pc, #188]	@ (80149b8 <etharp_query+0x278>)
 80148fa:	482a      	ldr	r0, [pc, #168]	@ (80149a4 <etharp_query+0x264>)
 80148fc:	f002 fac2 	bl	8016e84 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014900:	69fb      	ldr	r3, [r7, #28]
 8014902:	7b1b      	ldrb	r3, [r3, #12]
 8014904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014908:	2b00      	cmp	r3, #0
 801490a:	d002      	beq.n	8014912 <etharp_query+0x1d2>
        copy_needed = 1;
 801490c:	2301      	movs	r3, #1
 801490e:	61bb      	str	r3, [r7, #24]
        break;
 8014910:	e005      	b.n	801491e <etharp_query+0x1de>
      }
      p = p->next;
 8014912:	69fb      	ldr	r3, [r7, #28]
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014918:	69fb      	ldr	r3, [r7, #28]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d1df      	bne.n	80148de <etharp_query+0x19e>
    }
    if (copy_needed) {
 801491e:	69bb      	ldr	r3, [r7, #24]
 8014920:	2b00      	cmp	r3, #0
 8014922:	d007      	beq.n	8014934 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014924:	687a      	ldr	r2, [r7, #4]
 8014926:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801492a:	200e      	movs	r0, #14
 801492c:	f7f7 faca 	bl	800bec4 <pbuf_clone>
 8014930:	61f8      	str	r0, [r7, #28]
 8014932:	e004      	b.n	801493e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014938:	69f8      	ldr	r0, [r7, #28]
 801493a:	f7f7 f8f1 	bl	800bb20 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801493e:	69fb      	ldr	r3, [r7, #28]
 8014940:	2b00      	cmp	r3, #0
 8014942:	d021      	beq.n	8014988 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014944:	7c7a      	ldrb	r2, [r7, #17]
 8014946:	4918      	ldr	r1, [pc, #96]	@ (80149a8 <etharp_query+0x268>)
 8014948:	4613      	mov	r3, r2
 801494a:	005b      	lsls	r3, r3, #1
 801494c:	4413      	add	r3, r2
 801494e:	00db      	lsls	r3, r3, #3
 8014950:	440b      	add	r3, r1
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d00a      	beq.n	801496e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014958:	7c7a      	ldrb	r2, [r7, #17]
 801495a:	4913      	ldr	r1, [pc, #76]	@ (80149a8 <etharp_query+0x268>)
 801495c:	4613      	mov	r3, r2
 801495e:	005b      	lsls	r3, r3, #1
 8014960:	4413      	add	r3, r2
 8014962:	00db      	lsls	r3, r3, #3
 8014964:	440b      	add	r3, r1
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	4618      	mov	r0, r3
 801496a:	f7f7 f833 	bl	800b9d4 <pbuf_free>
      }
      arp_table[i].q = p;
 801496e:	7c7a      	ldrb	r2, [r7, #17]
 8014970:	490d      	ldr	r1, [pc, #52]	@ (80149a8 <etharp_query+0x268>)
 8014972:	4613      	mov	r3, r2
 8014974:	005b      	lsls	r3, r3, #1
 8014976:	4413      	add	r3, r2
 8014978:	00db      	lsls	r3, r3, #3
 801497a:	440b      	add	r3, r1
 801497c:	69fa      	ldr	r2, [r7, #28]
 801497e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014980:	2300      	movs	r3, #0
 8014982:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014986:	e002      	b.n	801498e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014988:	23ff      	movs	r3, #255	@ 0xff
 801498a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801498e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8014992:	4618      	mov	r0, r3
 8014994:	3728      	adds	r7, #40	@ 0x28
 8014996:	46bd      	mov	sp, r7
 8014998:	bd80      	pop	{r7, pc}
 801499a:	bf00      	nop
 801499c:	0801ab2c 	.word	0x0801ab2c
 80149a0:	0801acd8 	.word	0x0801acd8
 80149a4:	0801aba4 	.word	0x0801aba4
 80149a8:	2000cb50 	.word	0x2000cb50
 80149ac:	0801ace8 	.word	0x0801ace8
 80149b0:	0801accc 	.word	0x0801accc
 80149b4:	2000cc40 	.word	0x2000cc40
 80149b8:	0801ad10 	.word	0x0801ad10

080149bc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80149bc:	b580      	push	{r7, lr}
 80149be:	b08a      	sub	sp, #40	@ 0x28
 80149c0:	af02      	add	r7, sp, #8
 80149c2:	60f8      	str	r0, [r7, #12]
 80149c4:	60b9      	str	r1, [r7, #8]
 80149c6:	607a      	str	r2, [r7, #4]
 80149c8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80149ca:	2300      	movs	r3, #0
 80149cc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d106      	bne.n	80149e2 <etharp_raw+0x26>
 80149d4:	4b3a      	ldr	r3, [pc, #232]	@ (8014ac0 <etharp_raw+0x104>)
 80149d6:	f240 4257 	movw	r2, #1111	@ 0x457
 80149da:	493a      	ldr	r1, [pc, #232]	@ (8014ac4 <etharp_raw+0x108>)
 80149dc:	483a      	ldr	r0, [pc, #232]	@ (8014ac8 <etharp_raw+0x10c>)
 80149de:	f002 fa51 	bl	8016e84 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80149e2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80149e6:	211c      	movs	r1, #28
 80149e8:	200e      	movs	r0, #14
 80149ea:	f7f6 fd0f 	bl	800b40c <pbuf_alloc>
 80149ee:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80149f0:	69bb      	ldr	r3, [r7, #24]
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d102      	bne.n	80149fc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80149f6:	f04f 33ff 	mov.w	r3, #4294967295
 80149fa:	e05d      	b.n	8014ab8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80149fc:	69bb      	ldr	r3, [r7, #24]
 80149fe:	895b      	ldrh	r3, [r3, #10]
 8014a00:	2b1b      	cmp	r3, #27
 8014a02:	d806      	bhi.n	8014a12 <etharp_raw+0x56>
 8014a04:	4b2e      	ldr	r3, [pc, #184]	@ (8014ac0 <etharp_raw+0x104>)
 8014a06:	f240 4262 	movw	r2, #1122	@ 0x462
 8014a0a:	4930      	ldr	r1, [pc, #192]	@ (8014acc <etharp_raw+0x110>)
 8014a0c:	482e      	ldr	r0, [pc, #184]	@ (8014ac8 <etharp_raw+0x10c>)
 8014a0e:	f002 fa39 	bl	8016e84 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014a12:	69bb      	ldr	r3, [r7, #24]
 8014a14:	685b      	ldr	r3, [r3, #4]
 8014a16:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014a18:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8014a1a:	4618      	mov	r0, r3
 8014a1c:	f7f5 fa86 	bl	8009f2c <lwip_htons>
 8014a20:	4603      	mov	r3, r0
 8014a22:	461a      	mov	r2, r3
 8014a24:	697b      	ldr	r3, [r7, #20]
 8014a26:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8014a2e:	2b06      	cmp	r3, #6
 8014a30:	d006      	beq.n	8014a40 <etharp_raw+0x84>
 8014a32:	4b23      	ldr	r3, [pc, #140]	@ (8014ac0 <etharp_raw+0x104>)
 8014a34:	f240 4269 	movw	r2, #1129	@ 0x469
 8014a38:	4925      	ldr	r1, [pc, #148]	@ (8014ad0 <etharp_raw+0x114>)
 8014a3a:	4823      	ldr	r0, [pc, #140]	@ (8014ac8 <etharp_raw+0x10c>)
 8014a3c:	f002 fa22 	bl	8016e84 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014a40:	697b      	ldr	r3, [r7, #20]
 8014a42:	3308      	adds	r3, #8
 8014a44:	2206      	movs	r2, #6
 8014a46:	6839      	ldr	r1, [r7, #0]
 8014a48:	4618      	mov	r0, r3
 8014a4a:	f002 fc78 	bl	801733e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014a4e:	697b      	ldr	r3, [r7, #20]
 8014a50:	3312      	adds	r3, #18
 8014a52:	2206      	movs	r2, #6
 8014a54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014a56:	4618      	mov	r0, r3
 8014a58:	f002 fc71 	bl	801733e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014a5c:	697b      	ldr	r3, [r7, #20]
 8014a5e:	330e      	adds	r3, #14
 8014a60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014a62:	6812      	ldr	r2, [r2, #0]
 8014a64:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014a66:	697b      	ldr	r3, [r7, #20]
 8014a68:	3318      	adds	r3, #24
 8014a6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014a6c:	6812      	ldr	r2, [r2, #0]
 8014a6e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014a70:	697b      	ldr	r3, [r7, #20]
 8014a72:	2200      	movs	r2, #0
 8014a74:	701a      	strb	r2, [r3, #0]
 8014a76:	2200      	movs	r2, #0
 8014a78:	f042 0201 	orr.w	r2, r2, #1
 8014a7c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014a7e:	697b      	ldr	r3, [r7, #20]
 8014a80:	2200      	movs	r2, #0
 8014a82:	f042 0208 	orr.w	r2, r2, #8
 8014a86:	709a      	strb	r2, [r3, #2]
 8014a88:	2200      	movs	r2, #0
 8014a8a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014a8c:	697b      	ldr	r3, [r7, #20]
 8014a8e:	2206      	movs	r2, #6
 8014a90:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014a92:	697b      	ldr	r3, [r7, #20]
 8014a94:	2204      	movs	r2, #4
 8014a96:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014a98:	f640 0306 	movw	r3, #2054	@ 0x806
 8014a9c:	9300      	str	r3, [sp, #0]
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	68ba      	ldr	r2, [r7, #8]
 8014aa2:	69b9      	ldr	r1, [r7, #24]
 8014aa4:	68f8      	ldr	r0, [r7, #12]
 8014aa6:	f001 ff8f 	bl	80169c8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014aaa:	69b8      	ldr	r0, [r7, #24]
 8014aac:	f7f6 ff92 	bl	800b9d4 <pbuf_free>
  p = NULL;
 8014ab0:	2300      	movs	r3, #0
 8014ab2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014ab4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014ab8:	4618      	mov	r0, r3
 8014aba:	3720      	adds	r7, #32
 8014abc:	46bd      	mov	sp, r7
 8014abe:	bd80      	pop	{r7, pc}
 8014ac0:	0801ab2c 	.word	0x0801ab2c
 8014ac4:	0801ac7c 	.word	0x0801ac7c
 8014ac8:	0801aba4 	.word	0x0801aba4
 8014acc:	0801ad2c 	.word	0x0801ad2c
 8014ad0:	0801ad60 	.word	0x0801ad60

08014ad4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014ad4:	b580      	push	{r7, lr}
 8014ad6:	b088      	sub	sp, #32
 8014ad8:	af04      	add	r7, sp, #16
 8014ada:	60f8      	str	r0, [r7, #12]
 8014adc:	60b9      	str	r1, [r7, #8]
 8014ade:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	f103 0136 	add.w	r1, r3, #54	@ 0x36
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	f103 0036 	add.w	r0, r3, #54	@ 0x36
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014af0:	2201      	movs	r2, #1
 8014af2:	9203      	str	r2, [sp, #12]
 8014af4:	68ba      	ldr	r2, [r7, #8]
 8014af6:	9202      	str	r2, [sp, #8]
 8014af8:	4a06      	ldr	r2, [pc, #24]	@ (8014b14 <etharp_request_dst+0x40>)
 8014afa:	9201      	str	r2, [sp, #4]
 8014afc:	9300      	str	r3, [sp, #0]
 8014afe:	4603      	mov	r3, r0
 8014b00:	687a      	ldr	r2, [r7, #4]
 8014b02:	68f8      	ldr	r0, [r7, #12]
 8014b04:	f7ff ff5a 	bl	80149bc <etharp_raw>
 8014b08:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014b0a:	4618      	mov	r0, r3
 8014b0c:	3710      	adds	r7, #16
 8014b0e:	46bd      	mov	sp, r7
 8014b10:	bd80      	pop	{r7, pc}
 8014b12:	bf00      	nop
 8014b14:	0801b6bc 	.word	0x0801b6bc

08014b18 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014b18:	b580      	push	{r7, lr}
 8014b1a:	b082      	sub	sp, #8
 8014b1c:	af00      	add	r7, sp, #0
 8014b1e:	6078      	str	r0, [r7, #4]
 8014b20:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014b22:	4a05      	ldr	r2, [pc, #20]	@ (8014b38 <etharp_request+0x20>)
 8014b24:	6839      	ldr	r1, [r7, #0]
 8014b26:	6878      	ldr	r0, [r7, #4]
 8014b28:	f7ff ffd4 	bl	8014ad4 <etharp_request_dst>
 8014b2c:	4603      	mov	r3, r0
}
 8014b2e:	4618      	mov	r0, r3
 8014b30:	3708      	adds	r7, #8
 8014b32:	46bd      	mov	sp, r7
 8014b34:	bd80      	pop	{r7, pc}
 8014b36:	bf00      	nop
 8014b38:	0801b6b4 	.word	0x0801b6b4

08014b3c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014b3c:	b580      	push	{r7, lr}
 8014b3e:	b08e      	sub	sp, #56	@ 0x38
 8014b40:	af04      	add	r7, sp, #16
 8014b42:	6078      	str	r0, [r7, #4]
 8014b44:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014b46:	4b79      	ldr	r3, [pc, #484]	@ (8014d2c <icmp_input+0x1f0>)
 8014b48:	689b      	ldr	r3, [r3, #8]
 8014b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b4e:	781b      	ldrb	r3, [r3, #0]
 8014b50:	f003 030f 	and.w	r3, r3, #15
 8014b54:	b2db      	uxtb	r3, r3
 8014b56:	009b      	lsls	r3, r3, #2
 8014b58:	b2db      	uxtb	r3, r3
 8014b5a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8014b5c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014b5e:	2b13      	cmp	r3, #19
 8014b60:	f240 80cd 	bls.w	8014cfe <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	895b      	ldrh	r3, [r3, #10]
 8014b68:	2b03      	cmp	r3, #3
 8014b6a:	f240 80ca 	bls.w	8014d02 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	685b      	ldr	r3, [r3, #4]
 8014b72:	781b      	ldrb	r3, [r3, #0]
 8014b74:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014b78:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	f000 80b7 	beq.w	8014cf0 <icmp_input+0x1b4>
 8014b82:	2b08      	cmp	r3, #8
 8014b84:	f040 80b7 	bne.w	8014cf6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014b88:	4b69      	ldr	r3, [pc, #420]	@ (8014d30 <icmp_input+0x1f4>)
 8014b8a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014b8c:	4b67      	ldr	r3, [pc, #412]	@ (8014d2c <icmp_input+0x1f0>)
 8014b8e:	695b      	ldr	r3, [r3, #20]
 8014b90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014b94:	2be0      	cmp	r3, #224	@ 0xe0
 8014b96:	f000 80bb 	beq.w	8014d10 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014b9a:	4b64      	ldr	r3, [pc, #400]	@ (8014d2c <icmp_input+0x1f0>)
 8014b9c:	695b      	ldr	r3, [r3, #20]
 8014b9e:	4a63      	ldr	r2, [pc, #396]	@ (8014d2c <icmp_input+0x1f0>)
 8014ba0:	6812      	ldr	r2, [r2, #0]
 8014ba2:	4611      	mov	r1, r2
 8014ba4:	4618      	mov	r0, r3
 8014ba6:	f000 ff71 	bl	8015a8c <ip4_addr_isbroadcast_u32>
 8014baa:	4603      	mov	r3, r0
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	f040 80b1 	bne.w	8014d14 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	891b      	ldrh	r3, [r3, #8]
 8014bb6:	2b07      	cmp	r3, #7
 8014bb8:	f240 80a5 	bls.w	8014d06 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014bbc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014bbe:	330e      	adds	r3, #14
 8014bc0:	4619      	mov	r1, r3
 8014bc2:	6878      	ldr	r0, [r7, #4]
 8014bc4:	f7f6 fe70 	bl	800b8a8 <pbuf_add_header>
 8014bc8:	4603      	mov	r3, r0
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d04b      	beq.n	8014c66 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	891a      	ldrh	r2, [r3, #8]
 8014bd2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014bd4:	4413      	add	r3, r2
 8014bd6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	891b      	ldrh	r3, [r3, #8]
 8014bdc:	8b7a      	ldrh	r2, [r7, #26]
 8014bde:	429a      	cmp	r2, r3
 8014be0:	f0c0 809a 	bcc.w	8014d18 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014be4:	8b7b      	ldrh	r3, [r7, #26]
 8014be6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014bea:	4619      	mov	r1, r3
 8014bec:	200e      	movs	r0, #14
 8014bee:	f7f6 fc0d 	bl	800b40c <pbuf_alloc>
 8014bf2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014bf4:	697b      	ldr	r3, [r7, #20]
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	f000 8090 	beq.w	8014d1c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014bfc:	697b      	ldr	r3, [r7, #20]
 8014bfe:	895b      	ldrh	r3, [r3, #10]
 8014c00:	461a      	mov	r2, r3
 8014c02:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014c04:	3308      	adds	r3, #8
 8014c06:	429a      	cmp	r2, r3
 8014c08:	d203      	bcs.n	8014c12 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014c0a:	6978      	ldr	r0, [r7, #20]
 8014c0c:	f7f6 fee2 	bl	800b9d4 <pbuf_free>
          goto icmperr;
 8014c10:	e085      	b.n	8014d1e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014c12:	697b      	ldr	r3, [r7, #20]
 8014c14:	685b      	ldr	r3, [r3, #4]
 8014c16:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8014c18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014c1a:	4618      	mov	r0, r3
 8014c1c:	f002 fb8f 	bl	801733e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014c20:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014c22:	4619      	mov	r1, r3
 8014c24:	6978      	ldr	r0, [r7, #20]
 8014c26:	f7f6 fe4f 	bl	800b8c8 <pbuf_remove_header>
 8014c2a:	4603      	mov	r3, r0
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d009      	beq.n	8014c44 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014c30:	4b40      	ldr	r3, [pc, #256]	@ (8014d34 <icmp_input+0x1f8>)
 8014c32:	22b6      	movs	r2, #182	@ 0xb6
 8014c34:	4940      	ldr	r1, [pc, #256]	@ (8014d38 <icmp_input+0x1fc>)
 8014c36:	4841      	ldr	r0, [pc, #260]	@ (8014d3c <icmp_input+0x200>)
 8014c38:	f002 f924 	bl	8016e84 <iprintf>
          pbuf_free(r);
 8014c3c:	6978      	ldr	r0, [r7, #20]
 8014c3e:	f7f6 fec9 	bl	800b9d4 <pbuf_free>
          goto icmperr;
 8014c42:	e06c      	b.n	8014d1e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014c44:	6879      	ldr	r1, [r7, #4]
 8014c46:	6978      	ldr	r0, [r7, #20]
 8014c48:	f7f6 fff8 	bl	800bc3c <pbuf_copy>
 8014c4c:	4603      	mov	r3, r0
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d003      	beq.n	8014c5a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014c52:	6978      	ldr	r0, [r7, #20]
 8014c54:	f7f6 febe 	bl	800b9d4 <pbuf_free>
          goto icmperr;
 8014c58:	e061      	b.n	8014d1e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8014c5a:	6878      	ldr	r0, [r7, #4]
 8014c5c:	f7f6 feba 	bl	800b9d4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014c60:	697b      	ldr	r3, [r7, #20]
 8014c62:	607b      	str	r3, [r7, #4]
 8014c64:	e00f      	b.n	8014c86 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014c66:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014c68:	330e      	adds	r3, #14
 8014c6a:	4619      	mov	r1, r3
 8014c6c:	6878      	ldr	r0, [r7, #4]
 8014c6e:	f7f6 fe2b 	bl	800b8c8 <pbuf_remove_header>
 8014c72:	4603      	mov	r3, r0
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d006      	beq.n	8014c86 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014c78:	4b2e      	ldr	r3, [pc, #184]	@ (8014d34 <icmp_input+0x1f8>)
 8014c7a:	22c7      	movs	r2, #199	@ 0xc7
 8014c7c:	4930      	ldr	r1, [pc, #192]	@ (8014d40 <icmp_input+0x204>)
 8014c7e:	482f      	ldr	r0, [pc, #188]	@ (8014d3c <icmp_input+0x200>)
 8014c80:	f002 f900 	bl	8016e84 <iprintf>
          goto icmperr;
 8014c84:	e04b      	b.n	8014d1e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	685b      	ldr	r3, [r3, #4]
 8014c8a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014c8c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014c8e:	4619      	mov	r1, r3
 8014c90:	6878      	ldr	r0, [r7, #4]
 8014c92:	f7f6 fe09 	bl	800b8a8 <pbuf_add_header>
 8014c96:	4603      	mov	r3, r0
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d12b      	bne.n	8014cf4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	685b      	ldr	r3, [r3, #4]
 8014ca0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014ca2:	69fb      	ldr	r3, [r7, #28]
 8014ca4:	681a      	ldr	r2, [r3, #0]
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014caa:	4b20      	ldr	r3, [pc, #128]	@ (8014d2c <icmp_input+0x1f0>)
 8014cac:	691a      	ldr	r2, [r3, #16]
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014cb2:	693b      	ldr	r3, [r7, #16]
 8014cb4:	2200      	movs	r2, #0
 8014cb6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8014cb8:	693b      	ldr	r3, [r7, #16]
 8014cba:	2200      	movs	r2, #0
 8014cbc:	709a      	strb	r2, [r3, #2]
 8014cbe:	2200      	movs	r2, #0
 8014cc0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	22ff      	movs	r2, #255	@ 0xff
 8014cc6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	2200      	movs	r2, #0
 8014ccc:	729a      	strb	r2, [r3, #10]
 8014cce:	2200      	movs	r2, #0
 8014cd0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014cd2:	683b      	ldr	r3, [r7, #0]
 8014cd4:	9302      	str	r3, [sp, #8]
 8014cd6:	2301      	movs	r3, #1
 8014cd8:	9301      	str	r3, [sp, #4]
 8014cda:	2300      	movs	r3, #0
 8014cdc:	9300      	str	r3, [sp, #0]
 8014cde:	23ff      	movs	r3, #255	@ 0xff
 8014ce0:	2200      	movs	r2, #0
 8014ce2:	69f9      	ldr	r1, [r7, #28]
 8014ce4:	6878      	ldr	r0, [r7, #4]
 8014ce6:	f000 fd83 	bl	80157f0 <ip4_output_if>
 8014cea:	4603      	mov	r3, r0
 8014cec:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014cee:	e001      	b.n	8014cf4 <icmp_input+0x1b8>
      break;
 8014cf0:	bf00      	nop
 8014cf2:	e000      	b.n	8014cf6 <icmp_input+0x1ba>
      break;
 8014cf4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014cf6:	6878      	ldr	r0, [r7, #4]
 8014cf8:	f7f6 fe6c 	bl	800b9d4 <pbuf_free>
  return;
 8014cfc:	e013      	b.n	8014d26 <icmp_input+0x1ea>
    goto lenerr;
 8014cfe:	bf00      	nop
 8014d00:	e002      	b.n	8014d08 <icmp_input+0x1cc>
    goto lenerr;
 8014d02:	bf00      	nop
 8014d04:	e000      	b.n	8014d08 <icmp_input+0x1cc>
        goto lenerr;
 8014d06:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014d08:	6878      	ldr	r0, [r7, #4]
 8014d0a:	f7f6 fe63 	bl	800b9d4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014d0e:	e00a      	b.n	8014d26 <icmp_input+0x1ea>
        goto icmperr;
 8014d10:	bf00      	nop
 8014d12:	e004      	b.n	8014d1e <icmp_input+0x1e2>
        goto icmperr;
 8014d14:	bf00      	nop
 8014d16:	e002      	b.n	8014d1e <icmp_input+0x1e2>
          goto icmperr;
 8014d18:	bf00      	nop
 8014d1a:	e000      	b.n	8014d1e <icmp_input+0x1e2>
          goto icmperr;
 8014d1c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014d1e:	6878      	ldr	r0, [r7, #4]
 8014d20:	f7f6 fe58 	bl	800b9d4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014d24:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014d26:	3728      	adds	r7, #40	@ 0x28
 8014d28:	46bd      	mov	sp, r7
 8014d2a:	bd80      	pop	{r7, pc}
 8014d2c:	2000928c 	.word	0x2000928c
 8014d30:	200092a0 	.word	0x200092a0
 8014d34:	0801ada4 	.word	0x0801ada4
 8014d38:	0801addc 	.word	0x0801addc
 8014d3c:	0801ae14 	.word	0x0801ae14
 8014d40:	0801ae3c 	.word	0x0801ae3c

08014d44 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014d44:	b580      	push	{r7, lr}
 8014d46:	b082      	sub	sp, #8
 8014d48:	af00      	add	r7, sp, #0
 8014d4a:	6078      	str	r0, [r7, #4]
 8014d4c:	460b      	mov	r3, r1
 8014d4e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014d50:	78fb      	ldrb	r3, [r7, #3]
 8014d52:	461a      	mov	r2, r3
 8014d54:	2103      	movs	r1, #3
 8014d56:	6878      	ldr	r0, [r7, #4]
 8014d58:	f000 f814 	bl	8014d84 <icmp_send_response>
}
 8014d5c:	bf00      	nop
 8014d5e:	3708      	adds	r7, #8
 8014d60:	46bd      	mov	sp, r7
 8014d62:	bd80      	pop	{r7, pc}

08014d64 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014d64:	b580      	push	{r7, lr}
 8014d66:	b082      	sub	sp, #8
 8014d68:	af00      	add	r7, sp, #0
 8014d6a:	6078      	str	r0, [r7, #4]
 8014d6c:	460b      	mov	r3, r1
 8014d6e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014d70:	78fb      	ldrb	r3, [r7, #3]
 8014d72:	461a      	mov	r2, r3
 8014d74:	210b      	movs	r1, #11
 8014d76:	6878      	ldr	r0, [r7, #4]
 8014d78:	f000 f804 	bl	8014d84 <icmp_send_response>
}
 8014d7c:	bf00      	nop
 8014d7e:	3708      	adds	r7, #8
 8014d80:	46bd      	mov	sp, r7
 8014d82:	bd80      	pop	{r7, pc}

08014d84 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014d84:	b580      	push	{r7, lr}
 8014d86:	b08c      	sub	sp, #48	@ 0x30
 8014d88:	af04      	add	r7, sp, #16
 8014d8a:	6078      	str	r0, [r7, #4]
 8014d8c:	460b      	mov	r3, r1
 8014d8e:	70fb      	strb	r3, [r7, #3]
 8014d90:	4613      	mov	r3, r2
 8014d92:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014d94:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014d98:	2124      	movs	r1, #36	@ 0x24
 8014d9a:	2022      	movs	r0, #34	@ 0x22
 8014d9c:	f7f6 fb36 	bl	800b40c <pbuf_alloc>
 8014da0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014da2:	69fb      	ldr	r3, [r7, #28]
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d04c      	beq.n	8014e42 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014da8:	69fb      	ldr	r3, [r7, #28]
 8014daa:	895b      	ldrh	r3, [r3, #10]
 8014dac:	2b23      	cmp	r3, #35	@ 0x23
 8014dae:	d806      	bhi.n	8014dbe <icmp_send_response+0x3a>
 8014db0:	4b26      	ldr	r3, [pc, #152]	@ (8014e4c <icmp_send_response+0xc8>)
 8014db2:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8014db6:	4926      	ldr	r1, [pc, #152]	@ (8014e50 <icmp_send_response+0xcc>)
 8014db8:	4826      	ldr	r0, [pc, #152]	@ (8014e54 <icmp_send_response+0xd0>)
 8014dba:	f002 f863 	bl	8016e84 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	685b      	ldr	r3, [r3, #4]
 8014dc2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014dc4:	69fb      	ldr	r3, [r7, #28]
 8014dc6:	685b      	ldr	r3, [r3, #4]
 8014dc8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014dca:	697b      	ldr	r3, [r7, #20]
 8014dcc:	78fa      	ldrb	r2, [r7, #3]
 8014dce:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014dd0:	697b      	ldr	r3, [r7, #20]
 8014dd2:	78ba      	ldrb	r2, [r7, #2]
 8014dd4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8014dd6:	697b      	ldr	r3, [r7, #20]
 8014dd8:	2200      	movs	r2, #0
 8014dda:	711a      	strb	r2, [r3, #4]
 8014ddc:	2200      	movs	r2, #0
 8014dde:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014de0:	697b      	ldr	r3, [r7, #20]
 8014de2:	2200      	movs	r2, #0
 8014de4:	719a      	strb	r2, [r3, #6]
 8014de6:	2200      	movs	r2, #0
 8014de8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8014dea:	69fb      	ldr	r3, [r7, #28]
 8014dec:	685b      	ldr	r3, [r3, #4]
 8014dee:	f103 0008 	add.w	r0, r3, #8
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	685b      	ldr	r3, [r3, #4]
 8014df6:	221c      	movs	r2, #28
 8014df8:	4619      	mov	r1, r3
 8014dfa:	f002 faa0 	bl	801733e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014dfe:	69bb      	ldr	r3, [r7, #24]
 8014e00:	68db      	ldr	r3, [r3, #12]
 8014e02:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014e04:	f107 030c 	add.w	r3, r7, #12
 8014e08:	4618      	mov	r0, r3
 8014e0a:	f000 facf 	bl	80153ac <ip4_route>
 8014e0e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014e10:	693b      	ldr	r3, [r7, #16]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d011      	beq.n	8014e3a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014e16:	697b      	ldr	r3, [r7, #20]
 8014e18:	2200      	movs	r2, #0
 8014e1a:	709a      	strb	r2, [r3, #2]
 8014e1c:	2200      	movs	r2, #0
 8014e1e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014e20:	f107 020c 	add.w	r2, r7, #12
 8014e24:	693b      	ldr	r3, [r7, #16]
 8014e26:	9302      	str	r3, [sp, #8]
 8014e28:	2301      	movs	r3, #1
 8014e2a:	9301      	str	r3, [sp, #4]
 8014e2c:	2300      	movs	r3, #0
 8014e2e:	9300      	str	r3, [sp, #0]
 8014e30:	23ff      	movs	r3, #255	@ 0xff
 8014e32:	2100      	movs	r1, #0
 8014e34:	69f8      	ldr	r0, [r7, #28]
 8014e36:	f000 fcdb 	bl	80157f0 <ip4_output_if>
  }
  pbuf_free(q);
 8014e3a:	69f8      	ldr	r0, [r7, #28]
 8014e3c:	f7f6 fdca 	bl	800b9d4 <pbuf_free>
 8014e40:	e000      	b.n	8014e44 <icmp_send_response+0xc0>
    return;
 8014e42:	bf00      	nop
}
 8014e44:	3720      	adds	r7, #32
 8014e46:	46bd      	mov	sp, r7
 8014e48:	bd80      	pop	{r7, pc}
 8014e4a:	bf00      	nop
 8014e4c:	0801ada4 	.word	0x0801ada4
 8014e50:	0801ae70 	.word	0x0801ae70
 8014e54:	0801ae14 	.word	0x0801ae14

08014e58 <igmp_init>:
/**
 * Initialize the IGMP module
 */
void
igmp_init(void)
{
 8014e58:	b480      	push	{r7}
 8014e5a:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_init: initializing\n"));

  IP4_ADDR(&allsystems, 224, 0, 0, 1);
 8014e5c:	4b05      	ldr	r3, [pc, #20]	@ (8014e74 <igmp_init+0x1c>)
 8014e5e:	4a06      	ldr	r2, [pc, #24]	@ (8014e78 <igmp_init+0x20>)
 8014e60:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&allrouters, 224, 0, 0, 2);
 8014e62:	4b06      	ldr	r3, [pc, #24]	@ (8014e7c <igmp_init+0x24>)
 8014e64:	4a06      	ldr	r2, [pc, #24]	@ (8014e80 <igmp_init+0x28>)
 8014e66:	601a      	str	r2, [r3, #0]
}
 8014e68:	bf00      	nop
 8014e6a:	46bd      	mov	sp, r7
 8014e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e70:	4770      	bx	lr
 8014e72:	bf00      	nop
 8014e74:	2000cc44 	.word	0x2000cc44
 8014e78:	010000e0 	.word	0x010000e0
 8014e7c:	2000cc48 	.word	0x2000cc48
 8014e80:	020000e0 	.word	0x020000e0

08014e84 <igmp_start>:
 *
 * @param netif network interface on which start IGMP processing
 */
err_t
igmp_start(struct netif *netif)
{
 8014e84:	b580      	push	{r7, lr}
 8014e86:	b084      	sub	sp, #16
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	6078      	str	r0, [r7, #4]
  struct igmp_group *group;

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: starting IGMP processing on if %p\n", (void *)netif));

  group = igmp_lookup_group(netif, &allsystems);
 8014e8c:	4911      	ldr	r1, [pc, #68]	@ (8014ed4 <igmp_start+0x50>)
 8014e8e:	6878      	ldr	r0, [r7, #4]
 8014e90:	f000 f85e 	bl	8014f50 <igmp_lookup_group>
 8014e94:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d014      	beq.n	8014ec6 <igmp_start+0x42>
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	2202      	movs	r2, #2
 8014ea0:	725a      	strb	r2, [r3, #9]
    group->use++;
 8014ea2:	68fb      	ldr	r3, [r7, #12]
 8014ea4:	7b1b      	ldrb	r3, [r3, #12]
 8014ea6:	3301      	adds	r3, #1
 8014ea8:	b2da      	uxtb	r2, r3
 8014eaa:	68fb      	ldr	r3, [r7, #12]
 8014eac:	731a      	strb	r2, [r3, #12]

    /* Allow the igmp messages at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d005      	beq.n	8014ec2 <igmp_start+0x3e>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: igmp_mac_filter(ADD "));
      ip4_addr_debug_print_val(IGMP_DEBUG, allsystems);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void *)netif));
      netif->igmp_mac_filter(netif, &allsystems, NETIF_ADD_MAC_FILTER);
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014eba:	2201      	movs	r2, #1
 8014ebc:	4905      	ldr	r1, [pc, #20]	@ (8014ed4 <igmp_start+0x50>)
 8014ebe:	6878      	ldr	r0, [r7, #4]
 8014ec0:	4798      	blx	r3
    }

    return ERR_OK;
 8014ec2:	2300      	movs	r3, #0
 8014ec4:	e001      	b.n	8014eca <igmp_start+0x46>
  }

  return ERR_MEM;
 8014ec6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014eca:	4618      	mov	r0, r3
 8014ecc:	3710      	adds	r7, #16
 8014ece:	46bd      	mov	sp, r7
 8014ed0:	bd80      	pop	{r7, pc}
 8014ed2:	bf00      	nop
 8014ed4:	2000cc44 	.word	0x2000cc44

08014ed8 <igmp_report_groups>:
 *
 * @param netif network interface on which report IGMP memberships
 */
void
igmp_report_groups(struct netif *netif)
{
 8014ed8:	b580      	push	{r7, lr}
 8014eda:	b084      	sub	sp, #16
 8014edc:	af00      	add	r7, sp, #0
 8014ede:	6078      	str	r0, [r7, #4]
  struct igmp_group *group = netif_igmp_data(netif);
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ee4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_report_groups: sending IGMP reports on if %p\n", (void *)netif));

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  if (group != NULL) {
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d00a      	beq.n	8014f02 <igmp_report_groups+0x2a>
    group = group->next;
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	60fb      	str	r3, [r7, #12]
  }

  while (group != NULL) {
 8014ef2:	e006      	b.n	8014f02 <igmp_report_groups+0x2a>
    igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
 8014ef4:	2105      	movs	r1, #5
 8014ef6:	68f8      	ldr	r0, [r7, #12]
 8014ef8:	f000 f99d 	bl	8015236 <igmp_delaying_member>
    group = group->next;
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	60fb      	str	r3, [r7, #12]
  while (group != NULL) {
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d1f5      	bne.n	8014ef4 <igmp_report_groups+0x1c>
  }
}
 8014f08:	bf00      	nop
 8014f0a:	bf00      	nop
 8014f0c:	3710      	adds	r7, #16
 8014f0e:	46bd      	mov	sp, r7
 8014f10:	bd80      	pop	{r7, pc}

08014f12 <igmp_lookfor_group>:
 * @return a struct igmp_group* if the group has been found,
 *         NULL if the group wasn't found.
 */
struct igmp_group *
igmp_lookfor_group(struct netif *ifp, const ip4_addr_t *addr)
{
 8014f12:	b480      	push	{r7}
 8014f14:	b085      	sub	sp, #20
 8014f16:	af00      	add	r7, sp, #0
 8014f18:	6078      	str	r0, [r7, #4]
 8014f1a:	6039      	str	r1, [r7, #0]
  struct igmp_group *group = netif_igmp_data(ifp);
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f20:	60fb      	str	r3, [r7, #12]

  while (group != NULL) {
 8014f22:	e00a      	b.n	8014f3a <igmp_lookfor_group+0x28>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	685a      	ldr	r2, [r3, #4]
 8014f28:	683b      	ldr	r3, [r7, #0]
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	429a      	cmp	r2, r3
 8014f2e:	d101      	bne.n	8014f34 <igmp_lookfor_group+0x22>
      return group;
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	e006      	b.n	8014f42 <igmp_lookfor_group+0x30>
    }
    group = group->next;
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	681b      	ldr	r3, [r3, #0]
 8014f38:	60fb      	str	r3, [r7, #12]
  while (group != NULL) {
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d1f1      	bne.n	8014f24 <igmp_lookfor_group+0x12>
  }

  /* to be clearer, we return NULL here instead of
   * 'group' (which is also NULL at this point).
   */
  return NULL;
 8014f40:	2300      	movs	r3, #0
}
 8014f42:	4618      	mov	r0, r3
 8014f44:	3714      	adds	r7, #20
 8014f46:	46bd      	mov	sp, r7
 8014f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f4c:	4770      	bx	lr
	...

08014f50 <igmp_lookup_group>:
 * @return a struct igmp_group*,
 *         NULL on memory error.
 */
static struct igmp_group *
igmp_lookup_group(struct netif *ifp, const ip4_addr_t *addr)
{
 8014f50:	b580      	push	{r7, lr}
 8014f52:	b084      	sub	sp, #16
 8014f54:	af00      	add	r7, sp, #0
 8014f56:	6078      	str	r0, [r7, #4]
 8014f58:	6039      	str	r1, [r7, #0]
  struct igmp_group *group;
  struct igmp_group *list_head = netif_igmp_data(ifp);
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f5e:	60fb      	str	r3, [r7, #12]

  /* Search if the group already exists */
  group = igmp_lookfor_group(ifp, addr);
 8014f60:	6839      	ldr	r1, [r7, #0]
 8014f62:	6878      	ldr	r0, [r7, #4]
 8014f64:	f7ff ffd5 	bl	8014f12 <igmp_lookfor_group>
 8014f68:	60b8      	str	r0, [r7, #8]
  if (group != NULL) {
 8014f6a:	68bb      	ldr	r3, [r7, #8]
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d001      	beq.n	8014f74 <igmp_lookup_group+0x24>
    /* Group already exists. */
    return group;
 8014f70:	68bb      	ldr	r3, [r7, #8]
 8014f72:	e047      	b.n	8015004 <igmp_lookup_group+0xb4>
  }

  /* Group doesn't exist yet, create a new one */
  group = (struct igmp_group *)memp_malloc(MEMP_IGMP_GROUP);
 8014f74:	200a      	movs	r0, #10
 8014f76:	f7f5 fd21 	bl	800a9bc <memp_malloc>
 8014f7a:	60b8      	str	r0, [r7, #8]
  if (group != NULL) {
 8014f7c:	68bb      	ldr	r3, [r7, #8]
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d03f      	beq.n	8015002 <igmp_lookup_group+0xb2>
    ip4_addr_set(&(group->group_address), addr);
 8014f82:	683b      	ldr	r3, [r7, #0]
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d002      	beq.n	8014f8e <igmp_lookup_group+0x3e>
 8014f88:	683b      	ldr	r3, [r7, #0]
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	e000      	b.n	8014f90 <igmp_lookup_group+0x40>
 8014f8e:	2300      	movs	r3, #0
 8014f90:	68ba      	ldr	r2, [r7, #8]
 8014f92:	6053      	str	r3, [r2, #4]
    group->timer              = 0; /* Not running */
 8014f94:	68bb      	ldr	r3, [r7, #8]
 8014f96:	2200      	movs	r2, #0
 8014f98:	815a      	strh	r2, [r3, #10]
    group->group_state        = IGMP_GROUP_NON_MEMBER;
 8014f9a:	68bb      	ldr	r3, [r7, #8]
 8014f9c:	2200      	movs	r2, #0
 8014f9e:	725a      	strb	r2, [r3, #9]
    group->last_reporter_flag = 0;
 8014fa0:	68bb      	ldr	r3, [r7, #8]
 8014fa2:	2200      	movs	r2, #0
 8014fa4:	721a      	strb	r2, [r3, #8]
    group->use                = 0;
 8014fa6:	68bb      	ldr	r3, [r7, #8]
 8014fa8:	2200      	movs	r2, #0
 8014faa:	731a      	strb	r2, [r3, #12]

    /* Ensure allsystems group is always first in list */
    if (list_head == NULL) {
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d113      	bne.n	8014fda <igmp_lookup_group+0x8a>
      /* this is the first entry in linked list */
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
 8014fb2:	683b      	ldr	r3, [r7, #0]
 8014fb4:	681a      	ldr	r2, [r3, #0]
 8014fb6:	4b15      	ldr	r3, [pc, #84]	@ (801500c <igmp_lookup_group+0xbc>)
 8014fb8:	681b      	ldr	r3, [r3, #0]
 8014fba:	429a      	cmp	r2, r3
 8014fbc:	d006      	beq.n	8014fcc <igmp_lookup_group+0x7c>
 8014fbe:	4b14      	ldr	r3, [pc, #80]	@ (8015010 <igmp_lookup_group+0xc0>)
 8014fc0:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8014fc4:	4913      	ldr	r1, [pc, #76]	@ (8015014 <igmp_lookup_group+0xc4>)
 8014fc6:	4814      	ldr	r0, [pc, #80]	@ (8015018 <igmp_lookup_group+0xc8>)
 8014fc8:	f001 ff5c 	bl	8016e84 <iprintf>
                  (ip4_addr_cmp(addr, &allsystems) != 0));
      group->next = NULL;
 8014fcc:	68bb      	ldr	r3, [r7, #8]
 8014fce:	2200      	movs	r2, #0
 8014fd0:	601a      	str	r2, [r3, #0]
      netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, group);
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	68ba      	ldr	r2, [r7, #8]
 8014fd6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8014fd8:	e013      	b.n	8015002 <igmp_lookup_group+0xb2>
    } else {
      /* append _after_ first entry */
      LWIP_ASSERT("igmp_lookup_group: all except first group must not be allsystems",
 8014fda:	683b      	ldr	r3, [r7, #0]
 8014fdc:	681a      	ldr	r2, [r3, #0]
 8014fde:	4b0b      	ldr	r3, [pc, #44]	@ (801500c <igmp_lookup_group+0xbc>)
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	429a      	cmp	r2, r3
 8014fe4:	d106      	bne.n	8014ff4 <igmp_lookup_group+0xa4>
 8014fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8015010 <igmp_lookup_group+0xc0>)
 8014fe8:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8014fec:	490b      	ldr	r1, [pc, #44]	@ (801501c <igmp_lookup_group+0xcc>)
 8014fee:	480a      	ldr	r0, [pc, #40]	@ (8015018 <igmp_lookup_group+0xc8>)
 8014ff0:	f001 ff48 	bl	8016e84 <iprintf>
                  (ip4_addr_cmp(addr, &allsystems) == 0));
      group->next = list_head->next;
 8014ff4:	68fb      	ldr	r3, [r7, #12]
 8014ff6:	681a      	ldr	r2, [r3, #0]
 8014ff8:	68bb      	ldr	r3, [r7, #8]
 8014ffa:	601a      	str	r2, [r3, #0]
      list_head->next = group;
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	68ba      	ldr	r2, [r7, #8]
 8015000:	601a      	str	r2, [r3, #0]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_lookup_group: %sallocated a new group with address ", (group ? "" : "impossible to ")));
  ip4_addr_debug_print(IGMP_DEBUG, addr);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)ifp));

  return group;
 8015002:	68bb      	ldr	r3, [r7, #8]
}
 8015004:	4618      	mov	r0, r3
 8015006:	3710      	adds	r7, #16
 8015008:	46bd      	mov	sp, r7
 801500a:	bd80      	pop	{r7, pc}
 801500c:	2000cc44 	.word	0x2000cc44
 8015010:	0801ae9c 	.word	0x0801ae9c
 8015014:	0801aed4 	.word	0x0801aed4
 8015018:	0801af08 	.word	0x0801af08
 801501c:	0801af30 	.word	0x0801af30

08015020 <igmp_input>:
 * @param inp network interface on which the packet was received
 * @param dest destination ip address of the igmp packet
 */
void
igmp_input(struct pbuf *p, struct netif *inp, const ip4_addr_t *dest)
{
 8015020:	b580      	push	{r7, lr}
 8015022:	b088      	sub	sp, #32
 8015024:	af00      	add	r7, sp, #0
 8015026:	60f8      	str	r0, [r7, #12]
 8015028:	60b9      	str	r1, [r7, #8]
 801502a:	607a      	str	r2, [r7, #4]
  struct igmp_group *groupref;

  IGMP_STATS_INC(igmp.recv);

  /* Note that the length CAN be greater than 8 but only 8 are used - All are included in the checksum */
  if (p->len < IGMP_MINLEN) {
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	895b      	ldrh	r3, [r3, #10]
 8015030:	2b07      	cmp	r3, #7
 8015032:	d803      	bhi.n	801503c <igmp_input+0x1c>
    pbuf_free(p);
 8015034:	68f8      	ldr	r0, [r7, #12]
 8015036:	f7f6 fccd 	bl	800b9d4 <pbuf_free>
    IGMP_STATS_INC(igmp.lenerr);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: length error\n"));
    return;
 801503a:	e086      	b.n	801514a <igmp_input+0x12a>
  LWIP_DEBUGF(IGMP_DEBUG, (" to address "));
  ip4_addr_debug_print_val(IGMP_DEBUG, ip4_current_header()->dest);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)inp));

  /* Now calculate and check the checksum */
  igmp = (struct igmp_msg *)p->payload;
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	685b      	ldr	r3, [r3, #4]
 8015040:	617b      	str	r3, [r7, #20]
  if (inet_chksum(igmp, p->len)) {
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	895b      	ldrh	r3, [r3, #10]
 8015046:	4619      	mov	r1, r3
 8015048:	6978      	ldr	r0, [r7, #20]
 801504a:	f7f4 fffa 	bl	800a042 <inet_chksum>
 801504e:	4603      	mov	r3, r0
 8015050:	2b00      	cmp	r3, #0
 8015052:	d003      	beq.n	801505c <igmp_input+0x3c>
    pbuf_free(p);
 8015054:	68f8      	ldr	r0, [r7, #12]
 8015056:	f7f6 fcbd 	bl	800b9d4 <pbuf_free>
    IGMP_STATS_INC(igmp.chkerr);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: checksum error\n"));
    return;
 801505a:	e076      	b.n	801514a <igmp_input+0x12a>
  }

  /* Packet is ok so find an existing group */
  group = igmp_lookfor_group(inp, dest); /* use the destination IP address of incoming packet */
 801505c:	6879      	ldr	r1, [r7, #4]
 801505e:	68b8      	ldr	r0, [r7, #8]
 8015060:	f7ff ff57 	bl	8014f12 <igmp_lookfor_group>
 8015064:	61f8      	str	r0, [r7, #28]

  /* If group can be found or create... */
  if (!group) {
 8015066:	69fb      	ldr	r3, [r7, #28]
 8015068:	2b00      	cmp	r3, #0
 801506a:	d103      	bne.n	8015074 <igmp_input+0x54>
    pbuf_free(p);
 801506c:	68f8      	ldr	r0, [r7, #12]
 801506e:	f7f6 fcb1 	bl	800b9d4 <pbuf_free>
    IGMP_STATS_INC(igmp.drop);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP frame not for us\n"));
    return;
 8015072:	e06a      	b.n	801514a <igmp_input+0x12a>
  }

  /* NOW ACT ON THE INCOMING MESSAGE TYPE... */
  switch (igmp->igmp_msgtype) {
 8015074:	697b      	ldr	r3, [r7, #20]
 8015076:	781b      	ldrb	r3, [r3, #0]
 8015078:	2b11      	cmp	r3, #17
 801507a:	d002      	beq.n	8015082 <igmp_input+0x62>
 801507c:	2b16      	cmp	r3, #22
 801507e:	d04f      	beq.n	8015120 <igmp_input+0x100>
      break;
    default:
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: unexpected msg %d in state %d on group %p on if %p\n",
                               igmp->igmp_msgtype, group->group_state, (void *)&group, (void *)inp));
      IGMP_STATS_INC(igmp.proterr);
      break;
 8015080:	e05f      	b.n	8015142 <igmp_input+0x122>
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	681a      	ldr	r2, [r3, #0]
 8015086:	4b32      	ldr	r3, [pc, #200]	@ (8015150 <igmp_input+0x130>)
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	429a      	cmp	r2, r3
 801508c:	d125      	bne.n	80150da <igmp_input+0xba>
 801508e:	697b      	ldr	r3, [r7, #20]
 8015090:	3304      	adds	r3, #4
 8015092:	2b00      	cmp	r3, #0
 8015094:	d003      	beq.n	801509e <igmp_input+0x7e>
 8015096:	697b      	ldr	r3, [r7, #20]
 8015098:	685b      	ldr	r3, [r3, #4]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d11d      	bne.n	80150da <igmp_input+0xba>
        if (igmp->igmp_maxresp == 0) {
 801509e:	697b      	ldr	r3, [r7, #20]
 80150a0:	785b      	ldrb	r3, [r3, #1]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d102      	bne.n	80150ac <igmp_input+0x8c>
          igmp->igmp_maxresp = IGMP_V1_DELAYING_MEMBER_TMR;
 80150a6:	697b      	ldr	r3, [r7, #20]
 80150a8:	220a      	movs	r2, #10
 80150aa:	705a      	strb	r2, [r3, #1]
        groupref = netif_igmp_data(inp);
 80150ac:	68bb      	ldr	r3, [r7, #8]
 80150ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80150b0:	61bb      	str	r3, [r7, #24]
        if (groupref != NULL) {
 80150b2:	69bb      	ldr	r3, [r7, #24]
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d00c      	beq.n	80150d2 <igmp_input+0xb2>
          groupref = groupref->next;
 80150b8:	69bb      	ldr	r3, [r7, #24]
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	61bb      	str	r3, [r7, #24]
        while (groupref) {
 80150be:	e008      	b.n	80150d2 <igmp_input+0xb2>
          igmp_delaying_member(groupref, igmp->igmp_maxresp);
 80150c0:	697b      	ldr	r3, [r7, #20]
 80150c2:	785b      	ldrb	r3, [r3, #1]
 80150c4:	4619      	mov	r1, r3
 80150c6:	69b8      	ldr	r0, [r7, #24]
 80150c8:	f000 f8b5 	bl	8015236 <igmp_delaying_member>
          groupref = groupref->next;
 80150cc:	69bb      	ldr	r3, [r7, #24]
 80150ce:	681b      	ldr	r3, [r3, #0]
 80150d0:	61bb      	str	r3, [r7, #24]
        while (groupref) {
 80150d2:	69bb      	ldr	r3, [r7, #24]
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d1f3      	bne.n	80150c0 <igmp_input+0xa0>
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 80150d8:	e021      	b.n	801511e <igmp_input+0xfe>
        if (!ip4_addr_isany(&igmp->igmp_group_address)) {
 80150da:	697b      	ldr	r3, [r7, #20]
 80150dc:	3304      	adds	r3, #4
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d02c      	beq.n	801513c <igmp_input+0x11c>
 80150e2:	697b      	ldr	r3, [r7, #20]
 80150e4:	685b      	ldr	r3, [r3, #4]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d028      	beq.n	801513c <igmp_input+0x11c>
          if (ip4_addr_cmp(dest, &allsystems)) {
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	681a      	ldr	r2, [r3, #0]
 80150ee:	4b18      	ldr	r3, [pc, #96]	@ (8015150 <igmp_input+0x130>)
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	429a      	cmp	r2, r3
 80150f4:	d109      	bne.n	801510a <igmp_input+0xea>
            ip4_addr_copy(groupaddr, igmp->igmp_group_address);
 80150f6:	697b      	ldr	r3, [r7, #20]
 80150f8:	685b      	ldr	r3, [r3, #4]
 80150fa:	613b      	str	r3, [r7, #16]
            group = igmp_lookfor_group(inp, &groupaddr);
 80150fc:	f107 0310 	add.w	r3, r7, #16
 8015100:	4619      	mov	r1, r3
 8015102:	68b8      	ldr	r0, [r7, #8]
 8015104:	f7ff ff05 	bl	8014f12 <igmp_lookfor_group>
 8015108:	61f8      	str	r0, [r7, #28]
          if (group != NULL) {
 801510a:	69fb      	ldr	r3, [r7, #28]
 801510c:	2b00      	cmp	r3, #0
 801510e:	d015      	beq.n	801513c <igmp_input+0x11c>
            igmp_delaying_member(group, igmp->igmp_maxresp);
 8015110:	697b      	ldr	r3, [r7, #20]
 8015112:	785b      	ldrb	r3, [r3, #1]
 8015114:	4619      	mov	r1, r3
 8015116:	69f8      	ldr	r0, [r7, #28]
 8015118:	f000 f88d 	bl	8015236 <igmp_delaying_member>
      break;
 801511c:	e00e      	b.n	801513c <igmp_input+0x11c>
 801511e:	e00d      	b.n	801513c <igmp_input+0x11c>
      if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
 8015120:	69fb      	ldr	r3, [r7, #28]
 8015122:	7a5b      	ldrb	r3, [r3, #9]
 8015124:	2b01      	cmp	r3, #1
 8015126:	d10b      	bne.n	8015140 <igmp_input+0x120>
        group->timer = 0; /* stopped */
 8015128:	69fb      	ldr	r3, [r7, #28]
 801512a:	2200      	movs	r2, #0
 801512c:	815a      	strh	r2, [r3, #10]
        group->group_state = IGMP_GROUP_IDLE_MEMBER;
 801512e:	69fb      	ldr	r3, [r7, #28]
 8015130:	2202      	movs	r2, #2
 8015132:	725a      	strb	r2, [r3, #9]
        group->last_reporter_flag = 0;
 8015134:	69fb      	ldr	r3, [r7, #28]
 8015136:	2200      	movs	r2, #0
 8015138:	721a      	strb	r2, [r3, #8]
      break;
 801513a:	e001      	b.n	8015140 <igmp_input+0x120>
      break;
 801513c:	bf00      	nop
 801513e:	e000      	b.n	8015142 <igmp_input+0x122>
      break;
 8015140:	bf00      	nop
  }

  pbuf_free(p);
 8015142:	68f8      	ldr	r0, [r7, #12]
 8015144:	f7f6 fc46 	bl	800b9d4 <pbuf_free>
  return;
 8015148:	bf00      	nop
}
 801514a:	3720      	adds	r7, #32
 801514c:	46bd      	mov	sp, r7
 801514e:	bd80      	pop	{r7, pc}
 8015150:	2000cc44 	.word	0x2000cc44

08015154 <igmp_tmr>:
 * The igmp timer function (both for NO_SYS=1 and =0)
 * Should be called every IGMP_TMR_INTERVAL milliseconds (100 ms is default).
 */
void
igmp_tmr(void)
{
 8015154:	b580      	push	{r7, lr}
 8015156:	b082      	sub	sp, #8
 8015158:	af00      	add	r7, sp, #0
  struct netif *netif;

  NETIF_FOREACH(netif) {
 801515a:	4b15      	ldr	r3, [pc, #84]	@ (80151b0 <igmp_tmr+0x5c>)
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	607b      	str	r3, [r7, #4]
 8015160:	e01e      	b.n	80151a0 <igmp_tmr+0x4c>
    struct igmp_group *group = netif_igmp_data(netif);
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015166:	603b      	str	r3, [r7, #0]

    while (group != NULL) {
 8015168:	e014      	b.n	8015194 <igmp_tmr+0x40>
      if (group->timer > 0) {
 801516a:	683b      	ldr	r3, [r7, #0]
 801516c:	895b      	ldrh	r3, [r3, #10]
 801516e:	2b00      	cmp	r3, #0
 8015170:	d00d      	beq.n	801518e <igmp_tmr+0x3a>
        group->timer--;
 8015172:	683b      	ldr	r3, [r7, #0]
 8015174:	895b      	ldrh	r3, [r3, #10]
 8015176:	3b01      	subs	r3, #1
 8015178:	b29a      	uxth	r2, r3
 801517a:	683b      	ldr	r3, [r7, #0]
 801517c:	815a      	strh	r2, [r3, #10]
        if (group->timer == 0) {
 801517e:	683b      	ldr	r3, [r7, #0]
 8015180:	895b      	ldrh	r3, [r3, #10]
 8015182:	2b00      	cmp	r3, #0
 8015184:	d103      	bne.n	801518e <igmp_tmr+0x3a>
          igmp_timeout(netif, group);
 8015186:	6839      	ldr	r1, [r7, #0]
 8015188:	6878      	ldr	r0, [r7, #4]
 801518a:	f000 f813 	bl	80151b4 <igmp_timeout>
        }
      }
      group = group->next;
 801518e:	683b      	ldr	r3, [r7, #0]
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	603b      	str	r3, [r7, #0]
    while (group != NULL) {
 8015194:	683b      	ldr	r3, [r7, #0]
 8015196:	2b00      	cmp	r3, #0
 8015198:	d1e7      	bne.n	801516a <igmp_tmr+0x16>
  NETIF_FOREACH(netif) {
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	607b      	str	r3, [r7, #4]
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d1dd      	bne.n	8015162 <igmp_tmr+0xe>
    }
  }
}
 80151a6:	bf00      	nop
 80151a8:	bf00      	nop
 80151aa:	3708      	adds	r7, #8
 80151ac:	46bd      	mov	sp, r7
 80151ae:	bd80      	pop	{r7, pc}
 80151b0:	2000cab0 	.word	0x2000cab0

080151b4 <igmp_timeout>:
 *
 * @param group an igmp_group for which a timeout is reached
 */
static void
igmp_timeout(struct netif *netif, struct igmp_group *group)
{
 80151b4:	b580      	push	{r7, lr}
 80151b6:	b082      	sub	sp, #8
 80151b8:	af00      	add	r7, sp, #0
 80151ba:	6078      	str	r0, [r7, #4]
 80151bc:	6039      	str	r1, [r7, #0]
  /* If the state is IGMP_GROUP_DELAYING_MEMBER then we send a report for this group
     (unless it is the allsystems group) */
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 80151be:	683b      	ldr	r3, [r7, #0]
 80151c0:	7a5b      	ldrb	r3, [r3, #9]
 80151c2:	2b01      	cmp	r3, #1
 80151c4:	d10d      	bne.n	80151e2 <igmp_timeout+0x2e>
      (!(ip4_addr_cmp(&(group->group_address), &allsystems)))) {
 80151c6:	683b      	ldr	r3, [r7, #0]
 80151c8:	685a      	ldr	r2, [r3, #4]
 80151ca:	4b08      	ldr	r3, [pc, #32]	@ (80151ec <igmp_timeout+0x38>)
 80151cc:	681b      	ldr	r3, [r3, #0]
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 80151ce:	429a      	cmp	r2, r3
 80151d0:	d007      	beq.n	80151e2 <igmp_timeout+0x2e>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_timeout: report membership for group with address "));
    ip4_addr_debug_print_val(IGMP_DEBUG, group->group_address);
    LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)netif));

    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 80151d2:	683b      	ldr	r3, [r7, #0]
 80151d4:	2202      	movs	r2, #2
 80151d6:	725a      	strb	r2, [r3, #9]

    IGMP_STATS_INC(igmp.tx_report);
    igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
 80151d8:	2216      	movs	r2, #22
 80151da:	6839      	ldr	r1, [r7, #0]
 80151dc:	6878      	ldr	r0, [r7, #4]
 80151de:	f000 f871 	bl	80152c4 <igmp_send>
  }
}
 80151e2:	bf00      	nop
 80151e4:	3708      	adds	r7, #8
 80151e6:	46bd      	mov	sp, r7
 80151e8:	bd80      	pop	{r7, pc}
 80151ea:	bf00      	nop
 80151ec:	2000cc44 	.word	0x2000cc44

080151f0 <igmp_start_timer>:
 * @param max_time the time in multiples of IGMP_TMR_INTERVAL (decrease with
 *        every call to igmp_tmr())
 */
static void
igmp_start_timer(struct igmp_group *group, u8_t max_time)
{
 80151f0:	b580      	push	{r7, lr}
 80151f2:	b082      	sub	sp, #8
 80151f4:	af00      	add	r7, sp, #0
 80151f6:	6078      	str	r0, [r7, #4]
 80151f8:	460b      	mov	r3, r1
 80151fa:	70fb      	strb	r3, [r7, #3]
#ifdef LWIP_RAND
  group->timer = (u16_t)(max_time > 2 ? (LWIP_RAND() % max_time) : 1);
 80151fc:	78fb      	ldrb	r3, [r7, #3]
 80151fe:	2b02      	cmp	r3, #2
 8015200:	d90b      	bls.n	801521a <igmp_start_timer+0x2a>
 8015202:	f001 fd3f 	bl	8016c84 <rand>
 8015206:	4603      	mov	r3, r0
 8015208:	461a      	mov	r2, r3
 801520a:	78fb      	ldrb	r3, [r7, #3]
 801520c:	fbb2 f1f3 	udiv	r1, r2, r3
 8015210:	fb01 f303 	mul.w	r3, r1, r3
 8015214:	1ad3      	subs	r3, r2, r3
 8015216:	b29a      	uxth	r2, r3
 8015218:	e000      	b.n	801521c <igmp_start_timer+0x2c>
 801521a:	2201      	movs	r2, #1
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	815a      	strh	r2, [r3, #10]
#else /* LWIP_RAND */
  /* ATTENTION: use this only if absolutely necessary! */
  group->timer = max_time / 2;
#endif /* LWIP_RAND */

  if (group->timer == 0) {
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	895b      	ldrh	r3, [r3, #10]
 8015224:	2b00      	cmp	r3, #0
 8015226:	d102      	bne.n	801522e <igmp_start_timer+0x3e>
    group->timer = 1;
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	2201      	movs	r2, #1
 801522c:	815a      	strh	r2, [r3, #10]
  }
}
 801522e:	bf00      	nop
 8015230:	3708      	adds	r7, #8
 8015232:	46bd      	mov	sp, r7
 8015234:	bd80      	pop	{r7, pc}

08015236 <igmp_delaying_member>:
 * @param group the igmp_group for which "delaying" membership report
 * @param maxresp query delay
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
 8015236:	b580      	push	{r7, lr}
 8015238:	b082      	sub	sp, #8
 801523a:	af00      	add	r7, sp, #0
 801523c:	6078      	str	r0, [r7, #4]
 801523e:	460b      	mov	r3, r1
 8015240:	70fb      	strb	r3, [r7, #3]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	7a5b      	ldrb	r3, [r3, #9]
 8015246:	2b02      	cmp	r3, #2
 8015248:	d00d      	beq.n	8015266 <igmp_delaying_member+0x30>
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	7a5b      	ldrb	r3, [r3, #9]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 801524e:	2b01      	cmp	r3, #1
 8015250:	d111      	bne.n	8015276 <igmp_delaying_member+0x40>
       ((group->timer == 0) || (maxresp < group->timer)))) {
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	895b      	ldrh	r3, [r3, #10]
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 8015256:	2b00      	cmp	r3, #0
 8015258:	d005      	beq.n	8015266 <igmp_delaying_member+0x30>
       ((group->timer == 0) || (maxresp < group->timer)))) {
 801525a:	78fb      	ldrb	r3, [r7, #3]
 801525c:	b29a      	uxth	r2, r3
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	895b      	ldrh	r3, [r3, #10]
 8015262:	429a      	cmp	r2, r3
 8015264:	d207      	bcs.n	8015276 <igmp_delaying_member+0x40>
    igmp_start_timer(group, maxresp);
 8015266:	78fb      	ldrb	r3, [r7, #3]
 8015268:	4619      	mov	r1, r3
 801526a:	6878      	ldr	r0, [r7, #4]
 801526c:	f7ff ffc0 	bl	80151f0 <igmp_start_timer>
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	2201      	movs	r2, #1
 8015274:	725a      	strb	r2, [r3, #9]
  }
}
 8015276:	bf00      	nop
 8015278:	3708      	adds	r7, #8
 801527a:	46bd      	mov	sp, r7
 801527c:	bd80      	pop	{r7, pc}

0801527e <igmp_ip_output_if>:
 *         ERR_BUF if p doesn't have enough space for IP/LINK headers
 *         returns errors returned by netif->output
 */
static err_t
igmp_ip_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest, struct netif *netif)
{
 801527e:	b580      	push	{r7, lr}
 8015280:	b08c      	sub	sp, #48	@ 0x30
 8015282:	af06      	add	r7, sp, #24
 8015284:	60f8      	str	r0, [r7, #12]
 8015286:	60b9      	str	r1, [r7, #8]
 8015288:	607a      	str	r2, [r7, #4]
 801528a:	603b      	str	r3, [r7, #0]
  /* This is the "router alert" option */
  u16_t ra[2];
  ra[0] = PP_HTONS(ROUTER_ALERT);
 801528c:	f240 4394 	movw	r3, #1172	@ 0x494
 8015290:	82bb      	strh	r3, [r7, #20]
  ra[1] = 0x0000; /* Router shall examine packet */
 8015292:	2300      	movs	r3, #0
 8015294:	82fb      	strh	r3, [r7, #22]
  IGMP_STATS_INC(igmp.xmit);
  return ip4_output_if_opt(p, src, dest, IGMP_TTL, 0, IP_PROTO_IGMP, netif, ra, ROUTER_ALERTLEN);
 8015296:	2304      	movs	r3, #4
 8015298:	9304      	str	r3, [sp, #16]
 801529a:	f107 0314 	add.w	r3, r7, #20
 801529e:	9303      	str	r3, [sp, #12]
 80152a0:	683b      	ldr	r3, [r7, #0]
 80152a2:	9302      	str	r3, [sp, #8]
 80152a4:	2302      	movs	r3, #2
 80152a6:	9301      	str	r3, [sp, #4]
 80152a8:	2300      	movs	r3, #0
 80152aa:	9300      	str	r3, [sp, #0]
 80152ac:	2301      	movs	r3, #1
 80152ae:	687a      	ldr	r2, [r7, #4]
 80152b0:	68b9      	ldr	r1, [r7, #8]
 80152b2:	68f8      	ldr	r0, [r7, #12]
 80152b4:	f000 fab9 	bl	801582a <ip4_output_if_opt>
 80152b8:	4603      	mov	r3, r0
}
 80152ba:	4618      	mov	r0, r3
 80152bc:	3718      	adds	r7, #24
 80152be:	46bd      	mov	sp, r7
 80152c0:	bd80      	pop	{r7, pc}
	...

080152c4 <igmp_send>:
 * @param group the group to which to send the packet
 * @param type the type of igmp packet to send
 */
static void
igmp_send(struct netif *netif, struct igmp_group *group, u8_t type)
{
 80152c4:	b580      	push	{r7, lr}
 80152c6:	b088      	sub	sp, #32
 80152c8:	af00      	add	r7, sp, #0
 80152ca:	60f8      	str	r0, [r7, #12]
 80152cc:	60b9      	str	r1, [r7, #8]
 80152ce:	4613      	mov	r3, r2
 80152d0:	71fb      	strb	r3, [r7, #7]
  struct pbuf     *p    = NULL;
 80152d2:	2300      	movs	r3, #0
 80152d4:	61bb      	str	r3, [r7, #24]
  struct igmp_msg *igmp = NULL;
 80152d6:	2300      	movs	r3, #0
 80152d8:	617b      	str	r3, [r7, #20]
  ip4_addr_t   src  = *IP4_ADDR_ANY4;
 80152da:	4b2f      	ldr	r3, [pc, #188]	@ (8015398 <igmp_send+0xd4>)
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	613b      	str	r3, [r7, #16]
  ip4_addr_t  *dest = NULL;
 80152e0:	2300      	movs	r3, #0
 80152e2:	61fb      	str	r3, [r7, #28]

  /* IP header + "router alert" option + IGMP header */
  p = pbuf_alloc(PBUF_TRANSPORT, IGMP_MINLEN, PBUF_RAM);
 80152e4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80152e8:	2108      	movs	r1, #8
 80152ea:	2036      	movs	r0, #54	@ 0x36
 80152ec:	f7f6 f88e 	bl	800b40c <pbuf_alloc>
 80152f0:	61b8      	str	r0, [r7, #24]

  if (p) {
 80152f2:	69bb      	ldr	r3, [r7, #24]
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d04b      	beq.n	8015390 <igmp_send+0xcc>
    igmp = (struct igmp_msg *)p->payload;
 80152f8:	69bb      	ldr	r3, [r7, #24]
 80152fa:	685b      	ldr	r3, [r3, #4]
 80152fc:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
 80152fe:	69bb      	ldr	r3, [r7, #24]
 8015300:	895b      	ldrh	r3, [r3, #10]
 8015302:	2b07      	cmp	r3, #7
 8015304:	d806      	bhi.n	8015314 <igmp_send+0x50>
 8015306:	4b25      	ldr	r3, [pc, #148]	@ (801539c <igmp_send+0xd8>)
 8015308:	f240 3202 	movw	r2, #770	@ 0x302
 801530c:	4924      	ldr	r1, [pc, #144]	@ (80153a0 <igmp_send+0xdc>)
 801530e:	4825      	ldr	r0, [pc, #148]	@ (80153a4 <igmp_send+0xe0>)
 8015310:	f001 fdb8 	bl	8016e84 <iprintf>
                (p->len >= sizeof(struct igmp_msg)));
    ip4_addr_copy(src, *netif_ip4_addr(netif));
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	3304      	adds	r3, #4
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	613b      	str	r3, [r7, #16]

    if (type == IGMP_V2_MEMB_REPORT) {
 801531c:	79fb      	ldrb	r3, [r7, #7]
 801531e:	2b16      	cmp	r3, #22
 8015320:	d10a      	bne.n	8015338 <igmp_send+0x74>
      dest = &(group->group_address);
 8015322:	68bb      	ldr	r3, [r7, #8]
 8015324:	3304      	adds	r3, #4
 8015326:	61fb      	str	r3, [r7, #28]
      ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 8015328:	68bb      	ldr	r3, [r7, #8]
 801532a:	685a      	ldr	r2, [r3, #4]
 801532c:	697b      	ldr	r3, [r7, #20]
 801532e:	605a      	str	r2, [r3, #4]
      group->last_reporter_flag = 1; /* Remember we were the last to report */
 8015330:	68bb      	ldr	r3, [r7, #8]
 8015332:	2201      	movs	r2, #1
 8015334:	721a      	strb	r2, [r3, #8]
 8015336:	e008      	b.n	801534a <igmp_send+0x86>
    } else {
      if (type == IGMP_LEAVE_GROUP) {
 8015338:	79fb      	ldrb	r3, [r7, #7]
 801533a:	2b17      	cmp	r3, #23
 801533c:	d105      	bne.n	801534a <igmp_send+0x86>
        dest = &allrouters;
 801533e:	4b1a      	ldr	r3, [pc, #104]	@ (80153a8 <igmp_send+0xe4>)
 8015340:	61fb      	str	r3, [r7, #28]
        ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 8015342:	68bb      	ldr	r3, [r7, #8]
 8015344:	685a      	ldr	r2, [r3, #4]
 8015346:	697b      	ldr	r3, [r7, #20]
 8015348:	605a      	str	r2, [r3, #4]
      }
    }

    if ((type == IGMP_V2_MEMB_REPORT) || (type == IGMP_LEAVE_GROUP)) {
 801534a:	79fb      	ldrb	r3, [r7, #7]
 801534c:	2b16      	cmp	r3, #22
 801534e:	d002      	beq.n	8015356 <igmp_send+0x92>
 8015350:	79fb      	ldrb	r3, [r7, #7]
 8015352:	2b17      	cmp	r3, #23
 8015354:	d119      	bne.n	801538a <igmp_send+0xc6>
      igmp->igmp_msgtype  = type;
 8015356:	697b      	ldr	r3, [r7, #20]
 8015358:	79fa      	ldrb	r2, [r7, #7]
 801535a:	701a      	strb	r2, [r3, #0]
      igmp->igmp_maxresp  = 0;
 801535c:	697b      	ldr	r3, [r7, #20]
 801535e:	2200      	movs	r2, #0
 8015360:	705a      	strb	r2, [r3, #1]
      igmp->igmp_checksum = 0;
 8015362:	697b      	ldr	r3, [r7, #20]
 8015364:	2200      	movs	r2, #0
 8015366:	709a      	strb	r2, [r3, #2]
 8015368:	2200      	movs	r2, #0
 801536a:	70da      	strb	r2, [r3, #3]
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
 801536c:	2108      	movs	r1, #8
 801536e:	6978      	ldr	r0, [r7, #20]
 8015370:	f7f4 fe67 	bl	800a042 <inet_chksum>
 8015374:	4603      	mov	r3, r0
 8015376:	461a      	mov	r2, r3
 8015378:	697b      	ldr	r3, [r7, #20]
 801537a:	805a      	strh	r2, [r3, #2]

      igmp_ip_output_if(p, &src, dest, netif);
 801537c:	f107 0110 	add.w	r1, r7, #16
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	69fa      	ldr	r2, [r7, #28]
 8015384:	69b8      	ldr	r0, [r7, #24]
 8015386:	f7ff ff7a 	bl	801527e <igmp_ip_output_if>
    }

    pbuf_free(p);
 801538a:	69b8      	ldr	r0, [r7, #24]
 801538c:	f7f6 fb22 	bl	800b9d4 <pbuf_free>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_send: not enough memory for igmp_send\n"));
    IGMP_STATS_INC(igmp.memerr);
  }
}
 8015390:	bf00      	nop
 8015392:	3720      	adds	r7, #32
 8015394:	46bd      	mov	sp, r7
 8015396:	bd80      	pop	{r7, pc}
 8015398:	0801b6ac 	.word	0x0801b6ac
 801539c:	0801ae9c 	.word	0x0801ae9c
 80153a0:	0801b1b8 	.word	0x0801b1b8
 80153a4:	0801af08 	.word	0x0801af08
 80153a8:	2000cc48 	.word	0x2000cc48

080153ac <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80153ac:	b480      	push	{r7}
 80153ae:	b085      	sub	sp, #20
 80153b0:	af00      	add	r7, sp, #0
 80153b2:	6078      	str	r0, [r7, #4]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_MULTICAST_TX_OPTIONS
  /* Use administratively selected interface for multicast by default */
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	681b      	ldr	r3, [r3, #0]
 80153b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80153bc:	2be0      	cmp	r3, #224	@ 0xe0
 80153be:	d106      	bne.n	80153ce <ip4_route+0x22>
 80153c0:	4b36      	ldr	r3, [pc, #216]	@ (801549c <ip4_route+0xf0>)
 80153c2:	681b      	ldr	r3, [r3, #0]
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d002      	beq.n	80153ce <ip4_route+0x22>
    return ip4_default_multicast_netif;
 80153c8:	4b34      	ldr	r3, [pc, #208]	@ (801549c <ip4_route+0xf0>)
 80153ca:	681b      	ldr	r3, [r3, #0]
 80153cc:	e060      	b.n	8015490 <ip4_route+0xe4>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80153ce:	4b34      	ldr	r3, [pc, #208]	@ (80154a0 <ip4_route+0xf4>)
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	60fb      	str	r3, [r7, #12]
 80153d4:	e036      	b.n	8015444 <ip4_route+0x98>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80153dc:	f003 0301 	and.w	r3, r3, #1
 80153e0:	b2db      	uxtb	r3, r3
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d02b      	beq.n	801543e <ip4_route+0x92>
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80153ec:	089b      	lsrs	r3, r3, #2
 80153ee:	f003 0301 	and.w	r3, r3, #1
 80153f2:	b2db      	uxtb	r3, r3
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d022      	beq.n	801543e <ip4_route+0x92>
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	3304      	adds	r3, #4
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d01d      	beq.n	801543e <ip4_route+0x92>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	681a      	ldr	r2, [r3, #0]
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	3304      	adds	r3, #4
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	405a      	eors	r2, r3
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	3308      	adds	r3, #8
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	4013      	ands	r3, r2
 8015416:	2b00      	cmp	r3, #0
 8015418:	d101      	bne.n	801541e <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	e038      	b.n	8015490 <ip4_route+0xe4>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015424:	f003 0302 	and.w	r3, r3, #2
 8015428:	2b00      	cmp	r3, #0
 801542a:	d108      	bne.n	801543e <ip4_route+0x92>
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	681a      	ldr	r2, [r3, #0]
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	330c      	adds	r3, #12
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	429a      	cmp	r2, r3
 8015438:	d101      	bne.n	801543e <ip4_route+0x92>
        /* return netif on which to forward IP packet */
        return netif;
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	e028      	b.n	8015490 <ip4_route+0xe4>
  NETIF_FOREACH(netif) {
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	681b      	ldr	r3, [r3, #0]
 8015442:	60fb      	str	r3, [r7, #12]
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	2b00      	cmp	r3, #0
 8015448:	d1c5      	bne.n	80153d6 <ip4_route+0x2a>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801544a:	4b16      	ldr	r3, [pc, #88]	@ (80154a4 <ip4_route+0xf8>)
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	2b00      	cmp	r3, #0
 8015450:	d01a      	beq.n	8015488 <ip4_route+0xdc>
 8015452:	4b14      	ldr	r3, [pc, #80]	@ (80154a4 <ip4_route+0xf8>)
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801545a:	f003 0301 	and.w	r3, r3, #1
 801545e:	2b00      	cmp	r3, #0
 8015460:	d012      	beq.n	8015488 <ip4_route+0xdc>
 8015462:	4b10      	ldr	r3, [pc, #64]	@ (80154a4 <ip4_route+0xf8>)
 8015464:	681b      	ldr	r3, [r3, #0]
 8015466:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801546a:	f003 0304 	and.w	r3, r3, #4
 801546e:	2b00      	cmp	r3, #0
 8015470:	d00a      	beq.n	8015488 <ip4_route+0xdc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015472:	4b0c      	ldr	r3, [pc, #48]	@ (80154a4 <ip4_route+0xf8>)
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	3304      	adds	r3, #4
 8015478:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801547a:	2b00      	cmp	r3, #0
 801547c:	d004      	beq.n	8015488 <ip4_route+0xdc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	681b      	ldr	r3, [r3, #0]
 8015482:	b2db      	uxtb	r3, r3
 8015484:	2b7f      	cmp	r3, #127	@ 0x7f
 8015486:	d101      	bne.n	801548c <ip4_route+0xe0>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015488:	2300      	movs	r3, #0
 801548a:	e001      	b.n	8015490 <ip4_route+0xe4>
  }

  return netif_default;
 801548c:	4b05      	ldr	r3, [pc, #20]	@ (80154a4 <ip4_route+0xf8>)
 801548e:	681b      	ldr	r3, [r3, #0]
}
 8015490:	4618      	mov	r0, r3
 8015492:	3714      	adds	r7, #20
 8015494:	46bd      	mov	sp, r7
 8015496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801549a:	4770      	bx	lr
 801549c:	2000cc50 	.word	0x2000cc50
 80154a0:	2000cab0 	.word	0x2000cab0
 80154a4:	2000cab4 	.word	0x2000cab4

080154a8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80154a8:	b580      	push	{r7, lr}
 80154aa:	b082      	sub	sp, #8
 80154ac:	af00      	add	r7, sp, #0
 80154ae:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80154b6:	f003 0301 	and.w	r3, r3, #1
 80154ba:	b2db      	uxtb	r3, r3
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d016      	beq.n	80154ee <ip4_input_accept+0x46>
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	3304      	adds	r3, #4
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d011      	beq.n	80154ee <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80154ca:	4b0b      	ldr	r3, [pc, #44]	@ (80154f8 <ip4_input_accept+0x50>)
 80154cc:	695a      	ldr	r2, [r3, #20]
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	3304      	adds	r3, #4
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	429a      	cmp	r2, r3
 80154d6:	d008      	beq.n	80154ea <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80154d8:	4b07      	ldr	r3, [pc, #28]	@ (80154f8 <ip4_input_accept+0x50>)
 80154da:	695b      	ldr	r3, [r3, #20]
 80154dc:	6879      	ldr	r1, [r7, #4]
 80154de:	4618      	mov	r0, r3
 80154e0:	f000 fad4 	bl	8015a8c <ip4_addr_isbroadcast_u32>
 80154e4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d001      	beq.n	80154ee <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80154ea:	2301      	movs	r3, #1
 80154ec:	e000      	b.n	80154f0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80154ee:	2300      	movs	r3, #0
}
 80154f0:	4618      	mov	r0, r3
 80154f2:	3708      	adds	r7, #8
 80154f4:	46bd      	mov	sp, r7
 80154f6:	bd80      	pop	{r7, pc}
 80154f8:	2000928c 	.word	0x2000928c

080154fc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80154fc:	b580      	push	{r7, lr}
 80154fe:	b088      	sub	sp, #32
 8015500:	af00      	add	r7, sp, #0
 8015502:	6078      	str	r0, [r7, #4]
 8015504:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8015506:	2301      	movs	r3, #1
 8015508:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	685b      	ldr	r3, [r3, #4]
 801550e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8015510:	69fb      	ldr	r3, [r7, #28]
 8015512:	781b      	ldrb	r3, [r3, #0]
 8015514:	091b      	lsrs	r3, r3, #4
 8015516:	b2db      	uxtb	r3, r3
 8015518:	2b04      	cmp	r3, #4
 801551a:	d004      	beq.n	8015526 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801551c:	6878      	ldr	r0, [r7, #4]
 801551e:	f7f6 fa59 	bl	800b9d4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015522:	2300      	movs	r3, #0
 8015524:	e157      	b.n	80157d6 <ip4_input+0x2da>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015526:	69fb      	ldr	r3, [r7, #28]
 8015528:	781b      	ldrb	r3, [r3, #0]
 801552a:	f003 030f 	and.w	r3, r3, #15
 801552e:	b2db      	uxtb	r3, r3
 8015530:	009b      	lsls	r3, r3, #2
 8015532:	b2db      	uxtb	r3, r3
 8015534:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015536:	69fb      	ldr	r3, [r7, #28]
 8015538:	885b      	ldrh	r3, [r3, #2]
 801553a:	b29b      	uxth	r3, r3
 801553c:	4618      	mov	r0, r3
 801553e:	f7f4 fcf5 	bl	8009f2c <lwip_htons>
 8015542:	4603      	mov	r3, r0
 8015544:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	891b      	ldrh	r3, [r3, #8]
 801554a:	8a3a      	ldrh	r2, [r7, #16]
 801554c:	429a      	cmp	r2, r3
 801554e:	d204      	bcs.n	801555a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8015550:	8a3b      	ldrh	r3, [r7, #16]
 8015552:	4619      	mov	r1, r3
 8015554:	6878      	ldr	r0, [r7, #4]
 8015556:	f7f6 f8b7 	bl	800b6c8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	895b      	ldrh	r3, [r3, #10]
 801555e:	8a7a      	ldrh	r2, [r7, #18]
 8015560:	429a      	cmp	r2, r3
 8015562:	d807      	bhi.n	8015574 <ip4_input+0x78>
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	891b      	ldrh	r3, [r3, #8]
 8015568:	8a3a      	ldrh	r2, [r7, #16]
 801556a:	429a      	cmp	r2, r3
 801556c:	d802      	bhi.n	8015574 <ip4_input+0x78>
 801556e:	8a7b      	ldrh	r3, [r7, #18]
 8015570:	2b13      	cmp	r3, #19
 8015572:	d804      	bhi.n	801557e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015574:	6878      	ldr	r0, [r7, #4]
 8015576:	f7f6 fa2d 	bl	800b9d4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801557a:	2300      	movs	r3, #0
 801557c:	e12b      	b.n	80157d6 <ip4_input+0x2da>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801557e:	69fb      	ldr	r3, [r7, #28]
 8015580:	691b      	ldr	r3, [r3, #16]
 8015582:	4a97      	ldr	r2, [pc, #604]	@ (80157e0 <ip4_input+0x2e4>)
 8015584:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015586:	69fb      	ldr	r3, [r7, #28]
 8015588:	68db      	ldr	r3, [r3, #12]
 801558a:	4a95      	ldr	r2, [pc, #596]	@ (80157e0 <ip4_input+0x2e4>)
 801558c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801558e:	4b94      	ldr	r3, [pc, #592]	@ (80157e0 <ip4_input+0x2e4>)
 8015590:	695b      	ldr	r3, [r3, #20]
 8015592:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015596:	2be0      	cmp	r3, #224	@ 0xe0
 8015598:	d120      	bne.n	80155dc <ip4_input+0xe0>
#if LWIP_IGMP
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 801559a:	683b      	ldr	r3, [r7, #0]
 801559c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80155a0:	f003 0320 	and.w	r3, r3, #32
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d016      	beq.n	80155d6 <ip4_input+0xda>
 80155a8:	498e      	ldr	r1, [pc, #568]	@ (80157e4 <ip4_input+0x2e8>)
 80155aa:	6838      	ldr	r0, [r7, #0]
 80155ac:	f7ff fcb1 	bl	8014f12 <igmp_lookfor_group>
 80155b0:	4603      	mov	r3, r0
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d00f      	beq.n	80155d6 <ip4_input+0xda>
      /* IGMP snooping switches need 0.0.0.0 to be allowed as source address (RFC 4541) */
      ip4_addr_t allsystems;
      IP4_ADDR(&allsystems, 224, 0, 0, 1);
 80155b6:	4b8c      	ldr	r3, [pc, #560]	@ (80157e8 <ip4_input+0x2ec>)
 80155b8:	60bb      	str	r3, [r7, #8]
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
 80155ba:	4b89      	ldr	r3, [pc, #548]	@ (80157e0 <ip4_input+0x2e4>)
 80155bc:	695a      	ldr	r2, [r3, #20]
 80155be:	68bb      	ldr	r3, [r7, #8]
 80155c0:	429a      	cmp	r2, r3
 80155c2:	d105      	bne.n	80155d0 <ip4_input+0xd4>
          ip4_addr_isany(ip4_current_src_addr())) {
 80155c4:	4b86      	ldr	r3, [pc, #536]	@ (80157e0 <ip4_input+0x2e4>)
 80155c6:	691b      	ldr	r3, [r3, #16]
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d101      	bne.n	80155d0 <ip4_input+0xd4>
        check_ip_src = 0;
 80155cc:	2300      	movs	r3, #0
 80155ce:	617b      	str	r3, [r7, #20]
      }
      netif = inp;
 80155d0:	683b      	ldr	r3, [r7, #0]
 80155d2:	61bb      	str	r3, [r7, #24]
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 80155d4:	e02a      	b.n	801562c <ip4_input+0x130>
    } else {
      netif = NULL;
 80155d6:	2300      	movs	r3, #0
 80155d8:	61bb      	str	r3, [r7, #24]
 80155da:	e027      	b.n	801562c <ip4_input+0x130>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80155dc:	6838      	ldr	r0, [r7, #0]
 80155de:	f7ff ff63 	bl	80154a8 <ip4_input_accept>
 80155e2:	4603      	mov	r3, r0
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d002      	beq.n	80155ee <ip4_input+0xf2>
      netif = inp;
 80155e8:	683b      	ldr	r3, [r7, #0]
 80155ea:	61bb      	str	r3, [r7, #24]
 80155ec:	e01e      	b.n	801562c <ip4_input+0x130>
    } else {
      netif = NULL;
 80155ee:	2300      	movs	r3, #0
 80155f0:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80155f2:	4b7b      	ldr	r3, [pc, #492]	@ (80157e0 <ip4_input+0x2e4>)
 80155f4:	695b      	ldr	r3, [r3, #20]
 80155f6:	b2db      	uxtb	r3, r3
 80155f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80155fa:	d017      	beq.n	801562c <ip4_input+0x130>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80155fc:	4b7b      	ldr	r3, [pc, #492]	@ (80157ec <ip4_input+0x2f0>)
 80155fe:	681b      	ldr	r3, [r3, #0]
 8015600:	61bb      	str	r3, [r7, #24]
 8015602:	e00e      	b.n	8015622 <ip4_input+0x126>
          if (netif == inp) {
 8015604:	69ba      	ldr	r2, [r7, #24]
 8015606:	683b      	ldr	r3, [r7, #0]
 8015608:	429a      	cmp	r2, r3
 801560a:	d006      	beq.n	801561a <ip4_input+0x11e>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801560c:	69b8      	ldr	r0, [r7, #24]
 801560e:	f7ff ff4b 	bl	80154a8 <ip4_input_accept>
 8015612:	4603      	mov	r3, r0
 8015614:	2b00      	cmp	r3, #0
 8015616:	d108      	bne.n	801562a <ip4_input+0x12e>
 8015618:	e000      	b.n	801561c <ip4_input+0x120>
            continue;
 801561a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801561c:	69bb      	ldr	r3, [r7, #24]
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	61bb      	str	r3, [r7, #24]
 8015622:	69bb      	ldr	r3, [r7, #24]
 8015624:	2b00      	cmp	r3, #0
 8015626:	d1ed      	bne.n	8015604 <ip4_input+0x108>
 8015628:	e000      	b.n	801562c <ip4_input+0x130>
            break;
 801562a:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801562c:	69bb      	ldr	r3, [r7, #24]
 801562e:	2b00      	cmp	r3, #0
 8015630:	d111      	bne.n	8015656 <ip4_input+0x15a>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8015632:	69fb      	ldr	r3, [r7, #28]
 8015634:	7a5b      	ldrb	r3, [r3, #9]
 8015636:	2b11      	cmp	r3, #17
 8015638:	d10d      	bne.n	8015656 <ip4_input+0x15a>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801563a:	8a7b      	ldrh	r3, [r7, #18]
 801563c:	69fa      	ldr	r2, [r7, #28]
 801563e:	4413      	add	r3, r2
 8015640:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8015642:	68fb      	ldr	r3, [r7, #12]
 8015644:	885b      	ldrh	r3, [r3, #2]
 8015646:	b29b      	uxth	r3, r3
 8015648:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 801564c:	d103      	bne.n	8015656 <ip4_input+0x15a>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801564e:	683b      	ldr	r3, [r7, #0]
 8015650:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8015652:	2300      	movs	r3, #0
 8015654:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8015656:	697b      	ldr	r3, [r7, #20]
 8015658:	2b00      	cmp	r3, #0
 801565a:	d017      	beq.n	801568c <ip4_input+0x190>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801565c:	4b60      	ldr	r3, [pc, #384]	@ (80157e0 <ip4_input+0x2e4>)
 801565e:	691b      	ldr	r3, [r3, #16]
 8015660:	2b00      	cmp	r3, #0
 8015662:	d013      	beq.n	801568c <ip4_input+0x190>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015664:	4b5e      	ldr	r3, [pc, #376]	@ (80157e0 <ip4_input+0x2e4>)
 8015666:	691b      	ldr	r3, [r3, #16]
 8015668:	6839      	ldr	r1, [r7, #0]
 801566a:	4618      	mov	r0, r3
 801566c:	f000 fa0e 	bl	8015a8c <ip4_addr_isbroadcast_u32>
 8015670:	4603      	mov	r3, r0
 8015672:	2b00      	cmp	r3, #0
 8015674:	d105      	bne.n	8015682 <ip4_input+0x186>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015676:	4b5a      	ldr	r3, [pc, #360]	@ (80157e0 <ip4_input+0x2e4>)
 8015678:	691b      	ldr	r3, [r3, #16]
 801567a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801567e:	2be0      	cmp	r3, #224	@ 0xe0
 8015680:	d104      	bne.n	801568c <ip4_input+0x190>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015682:	6878      	ldr	r0, [r7, #4]
 8015684:	f7f6 f9a6 	bl	800b9d4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015688:	2300      	movs	r3, #0
 801568a:	e0a4      	b.n	80157d6 <ip4_input+0x2da>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801568c:	69bb      	ldr	r3, [r7, #24]
 801568e:	2b00      	cmp	r3, #0
 8015690:	d104      	bne.n	801569c <ip4_input+0x1a0>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015692:	6878      	ldr	r0, [r7, #4]
 8015694:	f7f6 f99e 	bl	800b9d4 <pbuf_free>
    return ERR_OK;
 8015698:	2300      	movs	r3, #0
 801569a:	e09c      	b.n	80157d6 <ip4_input+0x2da>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801569c:	69fb      	ldr	r3, [r7, #28]
 801569e:	88db      	ldrh	r3, [r3, #6]
 80156a0:	b29b      	uxth	r3, r3
 80156a2:	461a      	mov	r2, r3
 80156a4:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80156a8:	4013      	ands	r3, r2
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d00b      	beq.n	80156c6 <ip4_input+0x1ca>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80156ae:	6878      	ldr	r0, [r7, #4]
 80156b0:	f000 fdc2 	bl	8016238 <ip4_reass>
 80156b4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d101      	bne.n	80156c0 <ip4_input+0x1c4>
      return ERR_OK;
 80156bc:	2300      	movs	r3, #0
 80156be:	e08a      	b.n	80157d6 <ip4_input+0x2da>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	685b      	ldr	r3, [r3, #4]
 80156c4:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80156c6:	4a46      	ldr	r2, [pc, #280]	@ (80157e0 <ip4_input+0x2e4>)
 80156c8:	69bb      	ldr	r3, [r7, #24]
 80156ca:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80156cc:	4a44      	ldr	r2, [pc, #272]	@ (80157e0 <ip4_input+0x2e4>)
 80156ce:	683b      	ldr	r3, [r7, #0]
 80156d0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80156d2:	4a43      	ldr	r2, [pc, #268]	@ (80157e0 <ip4_input+0x2e4>)
 80156d4:	69fb      	ldr	r3, [r7, #28]
 80156d6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80156d8:	69fb      	ldr	r3, [r7, #28]
 80156da:	781b      	ldrb	r3, [r3, #0]
 80156dc:	f003 030f 	and.w	r3, r3, #15
 80156e0:	b2db      	uxtb	r3, r3
 80156e2:	009b      	lsls	r3, r3, #2
 80156e4:	b2db      	uxtb	r3, r3
 80156e6:	461a      	mov	r2, r3
 80156e8:	4b3d      	ldr	r3, [pc, #244]	@ (80157e0 <ip4_input+0x2e4>)
 80156ea:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80156ec:	8a7b      	ldrh	r3, [r7, #18]
 80156ee:	4619      	mov	r1, r3
 80156f0:	6878      	ldr	r0, [r7, #4]
 80156f2:	f7f6 f8e9 	bl	800b8c8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80156f6:	69fb      	ldr	r3, [r7, #28]
 80156f8:	7a5b      	ldrb	r3, [r3, #9]
 80156fa:	3b01      	subs	r3, #1
 80156fc:	2b10      	cmp	r3, #16
 80156fe:	d83a      	bhi.n	8015776 <ip4_input+0x27a>
 8015700:	a201      	add	r2, pc, #4	@ (adr r2, 8015708 <ip4_input+0x20c>)
 8015702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015706:	bf00      	nop
 8015708:	08015761 	.word	0x08015761
 801570c:	0801576b 	.word	0x0801576b
 8015710:	08015777 	.word	0x08015777
 8015714:	08015777 	.word	0x08015777
 8015718:	08015777 	.word	0x08015777
 801571c:	08015757 	.word	0x08015757
 8015720:	08015777 	.word	0x08015777
 8015724:	08015777 	.word	0x08015777
 8015728:	08015777 	.word	0x08015777
 801572c:	08015777 	.word	0x08015777
 8015730:	08015777 	.word	0x08015777
 8015734:	08015777 	.word	0x08015777
 8015738:	08015777 	.word	0x08015777
 801573c:	08015777 	.word	0x08015777
 8015740:	08015777 	.word	0x08015777
 8015744:	08015777 	.word	0x08015777
 8015748:	0801574d 	.word	0x0801574d
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801574c:	6839      	ldr	r1, [r7, #0]
 801574e:	6878      	ldr	r0, [r7, #4]
 8015750:	f7fb ff6a 	bl	8011628 <udp_input>
        break;
 8015754:	e02c      	b.n	80157b0 <ip4_input+0x2b4>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015756:	6839      	ldr	r1, [r7, #0]
 8015758:	6878      	ldr	r0, [r7, #4]
 801575a:	f7f7 ff81 	bl	800d660 <tcp_input>
        break;
 801575e:	e027      	b.n	80157b0 <ip4_input+0x2b4>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015760:	6839      	ldr	r1, [r7, #0]
 8015762:	6878      	ldr	r0, [r7, #4]
 8015764:	f7ff f9ea 	bl	8014b3c <icmp_input>
        break;
 8015768:	e022      	b.n	80157b0 <ip4_input+0x2b4>
#endif /* LWIP_ICMP */
#if LWIP_IGMP
      case IP_PROTO_IGMP:
        igmp_input(p, inp, ip4_current_dest_addr());
 801576a:	4a1e      	ldr	r2, [pc, #120]	@ (80157e4 <ip4_input+0x2e8>)
 801576c:	6839      	ldr	r1, [r7, #0]
 801576e:	6878      	ldr	r0, [r7, #4]
 8015770:	f7ff fc56 	bl	8015020 <igmp_input>
        break;
 8015774:	e01c      	b.n	80157b0 <ip4_input+0x2b4>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015776:	4b1a      	ldr	r3, [pc, #104]	@ (80157e0 <ip4_input+0x2e4>)
 8015778:	695b      	ldr	r3, [r3, #20]
 801577a:	69b9      	ldr	r1, [r7, #24]
 801577c:	4618      	mov	r0, r3
 801577e:	f000 f985 	bl	8015a8c <ip4_addr_isbroadcast_u32>
 8015782:	4603      	mov	r3, r0
 8015784:	2b00      	cmp	r3, #0
 8015786:	d10f      	bne.n	80157a8 <ip4_input+0x2ac>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015788:	4b15      	ldr	r3, [pc, #84]	@ (80157e0 <ip4_input+0x2e4>)
 801578a:	695b      	ldr	r3, [r3, #20]
 801578c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015790:	2be0      	cmp	r3, #224	@ 0xe0
 8015792:	d009      	beq.n	80157a8 <ip4_input+0x2ac>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015794:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015798:	4619      	mov	r1, r3
 801579a:	6878      	ldr	r0, [r7, #4]
 801579c:	f7f6 f907 	bl	800b9ae <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80157a0:	2102      	movs	r1, #2
 80157a2:	6878      	ldr	r0, [r7, #4]
 80157a4:	f7ff face 	bl	8014d44 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80157a8:	6878      	ldr	r0, [r7, #4]
 80157aa:	f7f6 f913 	bl	800b9d4 <pbuf_free>
        break;
 80157ae:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80157b0:	4b0b      	ldr	r3, [pc, #44]	@ (80157e0 <ip4_input+0x2e4>)
 80157b2:	2200      	movs	r2, #0
 80157b4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80157b6:	4b0a      	ldr	r3, [pc, #40]	@ (80157e0 <ip4_input+0x2e4>)
 80157b8:	2200      	movs	r2, #0
 80157ba:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80157bc:	4b08      	ldr	r3, [pc, #32]	@ (80157e0 <ip4_input+0x2e4>)
 80157be:	2200      	movs	r2, #0
 80157c0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80157c2:	4b07      	ldr	r3, [pc, #28]	@ (80157e0 <ip4_input+0x2e4>)
 80157c4:	2200      	movs	r2, #0
 80157c6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80157c8:	4b05      	ldr	r3, [pc, #20]	@ (80157e0 <ip4_input+0x2e4>)
 80157ca:	2200      	movs	r2, #0
 80157cc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80157ce:	4b04      	ldr	r3, [pc, #16]	@ (80157e0 <ip4_input+0x2e4>)
 80157d0:	2200      	movs	r2, #0
 80157d2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80157d4:	2300      	movs	r3, #0
}
 80157d6:	4618      	mov	r0, r3
 80157d8:	3720      	adds	r7, #32
 80157da:	46bd      	mov	sp, r7
 80157dc:	bd80      	pop	{r7, pc}
 80157de:	bf00      	nop
 80157e0:	2000928c 	.word	0x2000928c
 80157e4:	200092a0 	.word	0x200092a0
 80157e8:	010000e0 	.word	0x010000e0
 80157ec:	2000cab0 	.word	0x2000cab0

080157f0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80157f0:	b580      	push	{r7, lr}
 80157f2:	b08a      	sub	sp, #40	@ 0x28
 80157f4:	af06      	add	r7, sp, #24
 80157f6:	60f8      	str	r0, [r7, #12]
 80157f8:	60b9      	str	r1, [r7, #8]
 80157fa:	607a      	str	r2, [r7, #4]
 80157fc:	70fb      	strb	r3, [r7, #3]
#if IP_OPTIONS_SEND
  return ip4_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 80157fe:	78fa      	ldrb	r2, [r7, #3]
 8015800:	2300      	movs	r3, #0
 8015802:	9304      	str	r3, [sp, #16]
 8015804:	2300      	movs	r3, #0
 8015806:	9303      	str	r3, [sp, #12]
 8015808:	6a3b      	ldr	r3, [r7, #32]
 801580a:	9302      	str	r3, [sp, #8]
 801580c:	7f3b      	ldrb	r3, [r7, #28]
 801580e:	9301      	str	r3, [sp, #4]
 8015810:	7e3b      	ldrb	r3, [r7, #24]
 8015812:	9300      	str	r3, [sp, #0]
 8015814:	4613      	mov	r3, r2
 8015816:	687a      	ldr	r2, [r7, #4]
 8015818:	68b9      	ldr	r1, [r7, #8]
 801581a:	68f8      	ldr	r0, [r7, #12]
 801581c:	f000 f805 	bl	801582a <ip4_output_if_opt>
 8015820:	4603      	mov	r3, r0
}
 8015822:	4618      	mov	r0, r3
 8015824:	3710      	adds	r7, #16
 8015826:	46bd      	mov	sp, r7
 8015828:	bd80      	pop	{r7, pc}

0801582a <ip4_output_if_opt>:
 */
err_t
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
 801582a:	b580      	push	{r7, lr}
 801582c:	b08c      	sub	sp, #48	@ 0x30
 801582e:	af06      	add	r7, sp, #24
 8015830:	60f8      	str	r0, [r7, #12]
 8015832:	60b9      	str	r1, [r7, #8]
 8015834:	607a      	str	r2, [r7, #4]
 8015836:	70fb      	strb	r3, [r7, #3]
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015838:	68bb      	ldr	r3, [r7, #8]
 801583a:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	2b00      	cmp	r3, #0
 8015840:	d009      	beq.n	8015856 <ip4_output_if_opt+0x2c>
    if (ip4_addr_isany(src)) {
 8015842:	68bb      	ldr	r3, [r7, #8]
 8015844:	2b00      	cmp	r3, #0
 8015846:	d003      	beq.n	8015850 <ip4_output_if_opt+0x26>
 8015848:	68bb      	ldr	r3, [r7, #8]
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	2b00      	cmp	r3, #0
 801584e:	d102      	bne.n	8015856 <ip4_output_if_opt+0x2c>
      src_used = netif_ip4_addr(netif);
 8015850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015852:	3304      	adds	r3, #4
 8015854:	617b      	str	r3, [r7, #20]
    }
  }

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
 8015856:	78fa      	ldrb	r2, [r7, #3]
 8015858:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801585a:	9304      	str	r3, [sp, #16]
 801585c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801585e:	9303      	str	r3, [sp, #12]
 8015860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015862:	9302      	str	r3, [sp, #8]
 8015864:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015868:	9301      	str	r3, [sp, #4]
 801586a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801586e:	9300      	str	r3, [sp, #0]
 8015870:	4613      	mov	r3, r2
 8015872:	687a      	ldr	r2, [r7, #4]
 8015874:	6979      	ldr	r1, [r7, #20]
 8015876:	68f8      	ldr	r0, [r7, #12]
 8015878:	f000 f822 	bl	80158c0 <ip4_output_if_opt_src>
 801587c:	4603      	mov	r3, r0
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
#endif /* IP_OPTIONS_SEND */
}
 801587e:	4618      	mov	r0, r3
 8015880:	3718      	adds	r7, #24
 8015882:	46bd      	mov	sp, r7
 8015884:	bd80      	pop	{r7, pc}

08015886 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015886:	b580      	push	{r7, lr}
 8015888:	b08a      	sub	sp, #40	@ 0x28
 801588a:	af06      	add	r7, sp, #24
 801588c:	60f8      	str	r0, [r7, #12]
 801588e:	60b9      	str	r1, [r7, #8]
 8015890:	607a      	str	r2, [r7, #4]
 8015892:	70fb      	strb	r3, [r7, #3]
#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 8015894:	78fa      	ldrb	r2, [r7, #3]
 8015896:	2300      	movs	r3, #0
 8015898:	9304      	str	r3, [sp, #16]
 801589a:	2300      	movs	r3, #0
 801589c:	9303      	str	r3, [sp, #12]
 801589e:	6a3b      	ldr	r3, [r7, #32]
 80158a0:	9302      	str	r3, [sp, #8]
 80158a2:	7f3b      	ldrb	r3, [r7, #28]
 80158a4:	9301      	str	r3, [sp, #4]
 80158a6:	7e3b      	ldrb	r3, [r7, #24]
 80158a8:	9300      	str	r3, [sp, #0]
 80158aa:	4613      	mov	r3, r2
 80158ac:	687a      	ldr	r2, [r7, #4]
 80158ae:	68b9      	ldr	r1, [r7, #8]
 80158b0:	68f8      	ldr	r0, [r7, #12]
 80158b2:	f000 f805 	bl	80158c0 <ip4_output_if_opt_src>
 80158b6:	4603      	mov	r3, r0
}
 80158b8:	4618      	mov	r0, r3
 80158ba:	3710      	adds	r7, #16
 80158bc:	46bd      	mov	sp, r7
 80158be:	bd80      	pop	{r7, pc}

080158c0 <ip4_output_if_opt_src>:
 */
err_t
ip4_output_if_opt_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                      u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                      u16_t optlen)
{
 80158c0:	b580      	push	{r7, lr}
 80158c2:	b088      	sub	sp, #32
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	60f8      	str	r0, [r7, #12]
 80158c8:	60b9      	str	r1, [r7, #8]
 80158ca:	607a      	str	r2, [r7, #4]
 80158cc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	7b9b      	ldrb	r3, [r3, #14]
 80158d2:	2b01      	cmp	r3, #1
 80158d4:	d006      	beq.n	80158e4 <ip4_output_if_opt_src+0x24>
 80158d6:	4b67      	ldr	r3, [pc, #412]	@ (8015a74 <ip4_output_if_opt_src+0x1b4>)
 80158d8:	f44f 7255 	mov.w	r2, #852	@ 0x354
 80158dc:	4966      	ldr	r1, [pc, #408]	@ (8015a78 <ip4_output_if_opt_src+0x1b8>)
 80158de:	4867      	ldr	r0, [pc, #412]	@ (8015a7c <ip4_output_if_opt_src+0x1bc>)
 80158e0:	f001 fad0 	bl	8016e84 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	f000 8097 	beq.w	8015a1a <ip4_output_if_opt_src+0x15a>
    u16_t ip_hlen = IP_HLEN;
 80158ec:	2314      	movs	r3, #20
 80158ee:	83fb      	strh	r3, [r7, #30]
#if IP_OPTIONS_SEND
    u16_t optlen_aligned = 0;
 80158f0:	2300      	movs	r3, #0
 80158f2:	82fb      	strh	r3, [r7, #22]
    if (optlen != 0) {
 80158f4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d030      	beq.n	801595c <ip4_output_if_opt_src+0x9c>
#if CHECKSUM_GEN_IP_INLINE
      int i;
#endif /* CHECKSUM_GEN_IP_INLINE */
      if (optlen > (IP_HLEN_MAX - IP_HLEN)) {
 80158fa:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80158fc:	2b28      	cmp	r3, #40	@ 0x28
 80158fe:	d902      	bls.n	8015906 <ip4_output_if_opt_src+0x46>
        /* optlen too long */
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: optlen too long\n"));
        IP_STATS_INC(ip.err);
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_VAL;
 8015900:	f06f 0305 	mvn.w	r3, #5
 8015904:	e0b1      	b.n	8015a6a <ip4_output_if_opt_src+0x1aa>
      }
      /* round up to a multiple of 4 */
      optlen_aligned = (u16_t)((optlen + 3) & ~3);
 8015906:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8015908:	3303      	adds	r3, #3
 801590a:	b29b      	uxth	r3, r3
 801590c:	f023 0303 	bic.w	r3, r3, #3
 8015910:	82fb      	strh	r3, [r7, #22]
      ip_hlen = (u16_t)(ip_hlen + optlen_aligned);
 8015912:	8bfa      	ldrh	r2, [r7, #30]
 8015914:	8afb      	ldrh	r3, [r7, #22]
 8015916:	4413      	add	r3, r2
 8015918:	83fb      	strh	r3, [r7, #30]
      /* First write in the IP options */
      if (pbuf_add_header(p, optlen_aligned)) {
 801591a:	8afb      	ldrh	r3, [r7, #22]
 801591c:	4619      	mov	r1, r3
 801591e:	68f8      	ldr	r0, [r7, #12]
 8015920:	f7f5 ffc2 	bl	800b8a8 <pbuf_add_header>
 8015924:	4603      	mov	r3, r0
 8015926:	2b00      	cmp	r3, #0
 8015928:	d002      	beq.n	8015930 <ip4_output_if_opt_src+0x70>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: not enough room for IP options in pbuf\n"));
        IP_STATS_INC(ip.err);
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_BUF;
 801592a:	f06f 0301 	mvn.w	r3, #1
 801592e:	e09c      	b.n	8015a6a <ip4_output_if_opt_src+0x1aa>
      }
      MEMCPY(p->payload, ip_options, optlen);
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	685b      	ldr	r3, [r3, #4]
 8015934:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8015936:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8015938:	4618      	mov	r0, r3
 801593a:	f001 fd00 	bl	801733e <memcpy>
      if (optlen < optlen_aligned) {
 801593e:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8015940:	8afb      	ldrh	r3, [r7, #22]
 8015942:	429a      	cmp	r2, r3
 8015944:	d20a      	bcs.n	801595c <ip4_output_if_opt_src+0x9c>
        /* zero the remaining bytes */
        memset(((char *)p->payload) + optlen, 0, (size_t)(optlen_aligned - optlen));
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	685a      	ldr	r2, [r3, #4]
 801594a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801594c:	18d0      	adds	r0, r2, r3
 801594e:	8afa      	ldrh	r2, [r7, #22]
 8015950:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8015952:	1ad3      	subs	r3, r2, r3
 8015954:	461a      	mov	r2, r3
 8015956:	2100      	movs	r1, #0
 8015958:	f001 fc26 	bl	80171a8 <memset>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801595c:	2114      	movs	r1, #20
 801595e:	68f8      	ldr	r0, [r7, #12]
 8015960:	f7f5 ffa2 	bl	800b8a8 <pbuf_add_header>
 8015964:	4603      	mov	r3, r0
 8015966:	2b00      	cmp	r3, #0
 8015968:	d002      	beq.n	8015970 <ip4_output_if_opt_src+0xb0>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801596a:	f06f 0301 	mvn.w	r3, #1
 801596e:	e07c      	b.n	8015a6a <ip4_output_if_opt_src+0x1aa>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015970:	68fb      	ldr	r3, [r7, #12]
 8015972:	685b      	ldr	r3, [r3, #4]
 8015974:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	895b      	ldrh	r3, [r3, #10]
 801597a:	2b13      	cmp	r3, #19
 801597c:	d806      	bhi.n	801598c <ip4_output_if_opt_src+0xcc>
 801597e:	4b3d      	ldr	r3, [pc, #244]	@ (8015a74 <ip4_output_if_opt_src+0x1b4>)
 8015980:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8015984:	493e      	ldr	r1, [pc, #248]	@ (8015a80 <ip4_output_if_opt_src+0x1c0>)
 8015986:	483d      	ldr	r0, [pc, #244]	@ (8015a7c <ip4_output_if_opt_src+0x1bc>)
 8015988:	f001 fa7c 	bl	8016e84 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801598c:	69bb      	ldr	r3, [r7, #24]
 801598e:	78fa      	ldrb	r2, [r7, #3]
 8015990:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015992:	69bb      	ldr	r3, [r7, #24]
 8015994:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8015998:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	681a      	ldr	r2, [r3, #0]
 801599e:	69bb      	ldr	r3, [r7, #24]
 80159a0:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80159a2:	8bfb      	ldrh	r3, [r7, #30]
 80159a4:	089b      	lsrs	r3, r3, #2
 80159a6:	b29b      	uxth	r3, r3
 80159a8:	b2db      	uxtb	r3, r3
 80159aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80159ae:	b2da      	uxtb	r2, r3
 80159b0:	69bb      	ldr	r3, [r7, #24]
 80159b2:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80159b4:	69bb      	ldr	r3, [r7, #24]
 80159b6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80159ba:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80159bc:	68fb      	ldr	r3, [r7, #12]
 80159be:	891b      	ldrh	r3, [r3, #8]
 80159c0:	4618      	mov	r0, r3
 80159c2:	f7f4 fab3 	bl	8009f2c <lwip_htons>
 80159c6:	4603      	mov	r3, r0
 80159c8:	461a      	mov	r2, r3
 80159ca:	69bb      	ldr	r3, [r7, #24]
 80159cc:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80159ce:	69bb      	ldr	r3, [r7, #24]
 80159d0:	2200      	movs	r2, #0
 80159d2:	719a      	strb	r2, [r3, #6]
 80159d4:	2200      	movs	r2, #0
 80159d6:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80159d8:	4b2a      	ldr	r3, [pc, #168]	@ (8015a84 <ip4_output_if_opt_src+0x1c4>)
 80159da:	881b      	ldrh	r3, [r3, #0]
 80159dc:	4618      	mov	r0, r3
 80159de:	f7f4 faa5 	bl	8009f2c <lwip_htons>
 80159e2:	4603      	mov	r3, r0
 80159e4:	461a      	mov	r2, r3
 80159e6:	69bb      	ldr	r3, [r7, #24]
 80159e8:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80159ea:	4b26      	ldr	r3, [pc, #152]	@ (8015a84 <ip4_output_if_opt_src+0x1c4>)
 80159ec:	881b      	ldrh	r3, [r3, #0]
 80159ee:	3301      	adds	r3, #1
 80159f0:	b29a      	uxth	r2, r3
 80159f2:	4b24      	ldr	r3, [pc, #144]	@ (8015a84 <ip4_output_if_opt_src+0x1c4>)
 80159f4:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80159f6:	68bb      	ldr	r3, [r7, #8]
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d104      	bne.n	8015a06 <ip4_output_if_opt_src+0x146>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80159fc:	4b22      	ldr	r3, [pc, #136]	@ (8015a88 <ip4_output_if_opt_src+0x1c8>)
 80159fe:	681a      	ldr	r2, [r3, #0]
 8015a00:	69bb      	ldr	r3, [r7, #24]
 8015a02:	60da      	str	r2, [r3, #12]
 8015a04:	e003      	b.n	8015a0e <ip4_output_if_opt_src+0x14e>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015a06:	68bb      	ldr	r3, [r7, #8]
 8015a08:	681a      	ldr	r2, [r3, #0]
 8015a0a:	69bb      	ldr	r3, [r7, #24]
 8015a0c:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015a0e:	69bb      	ldr	r3, [r7, #24]
 8015a10:	2200      	movs	r2, #0
 8015a12:	729a      	strb	r2, [r3, #10]
 8015a14:	2200      	movs	r2, #0
 8015a16:	72da      	strb	r2, [r3, #11]
 8015a18:	e00f      	b.n	8015a3a <ip4_output_if_opt_src+0x17a>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	895b      	ldrh	r3, [r3, #10]
 8015a1e:	2b13      	cmp	r3, #19
 8015a20:	d802      	bhi.n	8015a28 <ip4_output_if_opt_src+0x168>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015a22:	f06f 0301 	mvn.w	r3, #1
 8015a26:	e020      	b.n	8015a6a <ip4_output_if_opt_src+0x1aa>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	685b      	ldr	r3, [r3, #4]
 8015a2c:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015a2e:	69bb      	ldr	r3, [r7, #24]
 8015a30:	691b      	ldr	r3, [r3, #16]
 8015a32:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 8015a34:	f107 0310 	add.w	r3, r7, #16
 8015a38:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a3c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d00c      	beq.n	8015a5c <ip4_output_if_opt_src+0x19c>
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	891a      	ldrh	r2, [r3, #8]
 8015a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a48:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8015a4a:	429a      	cmp	r2, r3
 8015a4c:	d906      	bls.n	8015a5c <ip4_output_if_opt_src+0x19c>
    return ip4_frag(p, netif, dest);
 8015a4e:	687a      	ldr	r2, [r7, #4]
 8015a50:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015a52:	68f8      	ldr	r0, [r7, #12]
 8015a54:	f000 fde4 	bl	8016620 <ip4_frag>
 8015a58:	4603      	mov	r3, r0
 8015a5a:	e006      	b.n	8015a6a <ip4_output_if_opt_src+0x1aa>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a5e:	695b      	ldr	r3, [r3, #20]
 8015a60:	687a      	ldr	r2, [r7, #4]
 8015a62:	68f9      	ldr	r1, [r7, #12]
 8015a64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015a66:	4798      	blx	r3
 8015a68:	4603      	mov	r3, r0
}
 8015a6a:	4618      	mov	r0, r3
 8015a6c:	3720      	adds	r7, #32
 8015a6e:	46bd      	mov	sp, r7
 8015a70:	bd80      	pop	{r7, pc}
 8015a72:	bf00      	nop
 8015a74:	0801b1f4 	.word	0x0801b1f4
 8015a78:	0801b228 	.word	0x0801b228
 8015a7c:	0801b234 	.word	0x0801b234
 8015a80:	0801b25c 	.word	0x0801b25c
 8015a84:	2000cc4c 	.word	0x2000cc4c
 8015a88:	0801b6ac 	.word	0x0801b6ac

08015a8c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015a8c:	b480      	push	{r7}
 8015a8e:	b085      	sub	sp, #20
 8015a90:	af00      	add	r7, sp, #0
 8015a92:	6078      	str	r0, [r7, #4]
 8015a94:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015aa0:	d002      	beq.n	8015aa8 <ip4_addr_isbroadcast_u32+0x1c>
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d101      	bne.n	8015aac <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015aa8:	2301      	movs	r3, #1
 8015aaa:	e02a      	b.n	8015b02 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015aac:	683b      	ldr	r3, [r7, #0]
 8015aae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015ab2:	f003 0302 	and.w	r3, r3, #2
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d101      	bne.n	8015abe <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015aba:	2300      	movs	r3, #0
 8015abc:	e021      	b.n	8015b02 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015abe:	683b      	ldr	r3, [r7, #0]
 8015ac0:	3304      	adds	r3, #4
 8015ac2:	681b      	ldr	r3, [r3, #0]
 8015ac4:	687a      	ldr	r2, [r7, #4]
 8015ac6:	429a      	cmp	r2, r3
 8015ac8:	d101      	bne.n	8015ace <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015aca:	2300      	movs	r3, #0
 8015acc:	e019      	b.n	8015b02 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015ace:	68fa      	ldr	r2, [r7, #12]
 8015ad0:	683b      	ldr	r3, [r7, #0]
 8015ad2:	3304      	adds	r3, #4
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	405a      	eors	r2, r3
 8015ad8:	683b      	ldr	r3, [r7, #0]
 8015ada:	3308      	adds	r3, #8
 8015adc:	681b      	ldr	r3, [r3, #0]
 8015ade:	4013      	ands	r3, r2
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d10d      	bne.n	8015b00 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015ae4:	683b      	ldr	r3, [r7, #0]
 8015ae6:	3308      	adds	r3, #8
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	43da      	mvns	r2, r3
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015af0:	683b      	ldr	r3, [r7, #0]
 8015af2:	3308      	adds	r3, #8
 8015af4:	681b      	ldr	r3, [r3, #0]
 8015af6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015af8:	429a      	cmp	r2, r3
 8015afa:	d101      	bne.n	8015b00 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015afc:	2301      	movs	r3, #1
 8015afe:	e000      	b.n	8015b02 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015b00:	2300      	movs	r3, #0
  }
}
 8015b02:	4618      	mov	r0, r3
 8015b04:	3714      	adds	r7, #20
 8015b06:	46bd      	mov	sp, r7
 8015b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b0c:	4770      	bx	lr
	...

08015b10 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8015b10:	b580      	push	{r7, lr}
 8015b12:	b082      	sub	sp, #8
 8015b14:	af00      	add	r7, sp, #0
 8015b16:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8015b18:	2210      	movs	r2, #16
 8015b1a:	4904      	ldr	r1, [pc, #16]	@ (8015b2c <ip4addr_ntoa+0x1c>)
 8015b1c:	6878      	ldr	r0, [r7, #4]
 8015b1e:	f000 f807 	bl	8015b30 <ip4addr_ntoa_r>
 8015b22:	4603      	mov	r3, r0
}
 8015b24:	4618      	mov	r0, r3
 8015b26:	3708      	adds	r7, #8
 8015b28:	46bd      	mov	sp, r7
 8015b2a:	bd80      	pop	{r7, pc}
 8015b2c:	2000cc54 	.word	0x2000cc54

08015b30 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8015b30:	b480      	push	{r7}
 8015b32:	b08d      	sub	sp, #52	@ 0x34
 8015b34:	af00      	add	r7, sp, #0
 8015b36:	60f8      	str	r0, [r7, #12]
 8015b38:	60b9      	str	r1, [r7, #8]
 8015b3a:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8015b3c:	2300      	movs	r3, #0
 8015b3e:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8015b46:	68bb      	ldr	r3, [r7, #8]
 8015b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 8015b4a:	f107 0318 	add.w	r3, r7, #24
 8015b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8015b50:	2300      	movs	r3, #0
 8015b52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015b56:	e058      	b.n	8015c0a <ip4addr_ntoa_r+0xda>
    i = 0;
 8015b58:	2300      	movs	r3, #0
 8015b5a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 8015b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b60:	781a      	ldrb	r2, [r3, #0]
 8015b62:	4b32      	ldr	r3, [pc, #200]	@ (8015c2c <ip4addr_ntoa_r+0xfc>)
 8015b64:	fba3 1302 	umull	r1, r3, r3, r2
 8015b68:	08d9      	lsrs	r1, r3, #3
 8015b6a:	460b      	mov	r3, r1
 8015b6c:	009b      	lsls	r3, r3, #2
 8015b6e:	440b      	add	r3, r1
 8015b70:	005b      	lsls	r3, r3, #1
 8015b72:	1ad3      	subs	r3, r2, r3
 8015b74:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8015b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b78:	781b      	ldrb	r3, [r3, #0]
 8015b7a:	4a2c      	ldr	r2, [pc, #176]	@ (8015c2c <ip4addr_ntoa_r+0xfc>)
 8015b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8015b80:	08db      	lsrs	r3, r3, #3
 8015b82:	b2da      	uxtb	r2, r3
 8015b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b86:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8015b88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015b8c:	1c5a      	adds	r2, r3, #1
 8015b8e:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8015b92:	4619      	mov	r1, r3
 8015b94:	7ffb      	ldrb	r3, [r7, #31]
 8015b96:	3330      	adds	r3, #48	@ 0x30
 8015b98:	b2da      	uxtb	r2, r3
 8015b9a:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 8015b9e:	443b      	add	r3, r7
 8015ba0:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8015ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ba6:	781b      	ldrb	r3, [r3, #0]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d1d8      	bne.n	8015b5e <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8015bac:	e011      	b.n	8015bd2 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8015bae:	6a3b      	ldr	r3, [r7, #32]
 8015bb0:	1c5a      	adds	r2, r3, #1
 8015bb2:	623a      	str	r2, [r7, #32]
 8015bb4:	687a      	ldr	r2, [r7, #4]
 8015bb6:	429a      	cmp	r2, r3
 8015bb8:	dc01      	bgt.n	8015bbe <ip4addr_ntoa_r+0x8e>
        return NULL;
 8015bba:	2300      	movs	r3, #0
 8015bbc:	e030      	b.n	8015c20 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8015bbe:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8015bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015bc4:	1c59      	adds	r1, r3, #1
 8015bc6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8015bc8:	3230      	adds	r2, #48	@ 0x30
 8015bca:	443a      	add	r2, r7
 8015bcc:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8015bd0:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8015bd2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015bd6:	1e5a      	subs	r2, r3, #1
 8015bd8:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d1e6      	bne.n	8015bae <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8015be0:	6a3b      	ldr	r3, [r7, #32]
 8015be2:	1c5a      	adds	r2, r3, #1
 8015be4:	623a      	str	r2, [r7, #32]
 8015be6:	687a      	ldr	r2, [r7, #4]
 8015be8:	429a      	cmp	r2, r3
 8015bea:	dc01      	bgt.n	8015bf0 <ip4addr_ntoa_r+0xc0>
      return NULL;
 8015bec:	2300      	movs	r3, #0
 8015bee:	e017      	b.n	8015c20 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8015bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015bf2:	1c5a      	adds	r2, r3, #1
 8015bf4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8015bf6:	222e      	movs	r2, #46	@ 0x2e
 8015bf8:	701a      	strb	r2, [r3, #0]
    ap++;
 8015bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015bfc:	3301      	adds	r3, #1
 8015bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8015c00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015c04:	3301      	adds	r3, #1
 8015c06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015c0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015c0e:	2b03      	cmp	r3, #3
 8015c10:	d9a2      	bls.n	8015b58 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8015c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c14:	3b01      	subs	r3, #1
 8015c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c1a:	2200      	movs	r2, #0
 8015c1c:	701a      	strb	r2, [r3, #0]
  return buf;
 8015c1e:	68bb      	ldr	r3, [r7, #8]
}
 8015c20:	4618      	mov	r0, r3
 8015c22:	3734      	adds	r7, #52	@ 0x34
 8015c24:	46bd      	mov	sp, r7
 8015c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c2a:	4770      	bx	lr
 8015c2c:	cccccccd 	.word	0xcccccccd

08015c30 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015c30:	b580      	push	{r7, lr}
 8015c32:	b084      	sub	sp, #16
 8015c34:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015c36:	2300      	movs	r3, #0
 8015c38:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015c3a:	4b12      	ldr	r3, [pc, #72]	@ (8015c84 <ip_reass_tmr+0x54>)
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015c40:	e018      	b.n	8015c74 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015c42:	68fb      	ldr	r3, [r7, #12]
 8015c44:	7fdb      	ldrb	r3, [r3, #31]
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d00b      	beq.n	8015c62 <ip_reass_tmr+0x32>
      r->timer--;
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	7fdb      	ldrb	r3, [r3, #31]
 8015c4e:	3b01      	subs	r3, #1
 8015c50:	b2da      	uxtb	r2, r3
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015c56:	68fb      	ldr	r3, [r7, #12]
 8015c58:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	681b      	ldr	r3, [r3, #0]
 8015c5e:	60fb      	str	r3, [r7, #12]
 8015c60:	e008      	b.n	8015c74 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015c62:	68fb      	ldr	r3, [r7, #12]
 8015c64:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015c6c:	68b9      	ldr	r1, [r7, #8]
 8015c6e:	6878      	ldr	r0, [r7, #4]
 8015c70:	f000 f80a 	bl	8015c88 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015c74:	68fb      	ldr	r3, [r7, #12]
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d1e3      	bne.n	8015c42 <ip_reass_tmr+0x12>
    }
  }
}
 8015c7a:	bf00      	nop
 8015c7c:	bf00      	nop
 8015c7e:	3710      	adds	r7, #16
 8015c80:	46bd      	mov	sp, r7
 8015c82:	bd80      	pop	{r7, pc}
 8015c84:	2000cc64 	.word	0x2000cc64

08015c88 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015c88:	b580      	push	{r7, lr}
 8015c8a:	b088      	sub	sp, #32
 8015c8c:	af00      	add	r7, sp, #0
 8015c8e:	6078      	str	r0, [r7, #4]
 8015c90:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015c92:	2300      	movs	r3, #0
 8015c94:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015c96:	683a      	ldr	r2, [r7, #0]
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	429a      	cmp	r2, r3
 8015c9c:	d105      	bne.n	8015caa <ip_reass_free_complete_datagram+0x22>
 8015c9e:	4b45      	ldr	r3, [pc, #276]	@ (8015db4 <ip_reass_free_complete_datagram+0x12c>)
 8015ca0:	22ab      	movs	r2, #171	@ 0xab
 8015ca2:	4945      	ldr	r1, [pc, #276]	@ (8015db8 <ip_reass_free_complete_datagram+0x130>)
 8015ca4:	4845      	ldr	r0, [pc, #276]	@ (8015dbc <ip_reass_free_complete_datagram+0x134>)
 8015ca6:	f001 f8ed 	bl	8016e84 <iprintf>
  if (prev != NULL) {
 8015caa:	683b      	ldr	r3, [r7, #0]
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d00a      	beq.n	8015cc6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015cb0:	683b      	ldr	r3, [r7, #0]
 8015cb2:	681b      	ldr	r3, [r3, #0]
 8015cb4:	687a      	ldr	r2, [r7, #4]
 8015cb6:	429a      	cmp	r2, r3
 8015cb8:	d005      	beq.n	8015cc6 <ip_reass_free_complete_datagram+0x3e>
 8015cba:	4b3e      	ldr	r3, [pc, #248]	@ (8015db4 <ip_reass_free_complete_datagram+0x12c>)
 8015cbc:	22ad      	movs	r2, #173	@ 0xad
 8015cbe:	4940      	ldr	r1, [pc, #256]	@ (8015dc0 <ip_reass_free_complete_datagram+0x138>)
 8015cc0:	483e      	ldr	r0, [pc, #248]	@ (8015dbc <ip_reass_free_complete_datagram+0x134>)
 8015cc2:	f001 f8df 	bl	8016e84 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	685b      	ldr	r3, [r3, #4]
 8015cca:	685b      	ldr	r3, [r3, #4]
 8015ccc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015cce:	697b      	ldr	r3, [r7, #20]
 8015cd0:	889b      	ldrh	r3, [r3, #4]
 8015cd2:	b29b      	uxth	r3, r3
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d12a      	bne.n	8015d2e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	685b      	ldr	r3, [r3, #4]
 8015cdc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015cde:	697b      	ldr	r3, [r7, #20]
 8015ce0:	681a      	ldr	r2, [r3, #0]
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015ce6:	69bb      	ldr	r3, [r7, #24]
 8015ce8:	6858      	ldr	r0, [r3, #4]
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	3308      	adds	r3, #8
 8015cee:	2214      	movs	r2, #20
 8015cf0:	4619      	mov	r1, r3
 8015cf2:	f001 fb24 	bl	801733e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015cf6:	2101      	movs	r1, #1
 8015cf8:	69b8      	ldr	r0, [r7, #24]
 8015cfa:	f7ff f833 	bl	8014d64 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015cfe:	69b8      	ldr	r0, [r7, #24]
 8015d00:	f7f5 fef6 	bl	800baf0 <pbuf_clen>
 8015d04:	4603      	mov	r3, r0
 8015d06:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015d08:	8bfa      	ldrh	r2, [r7, #30]
 8015d0a:	8a7b      	ldrh	r3, [r7, #18]
 8015d0c:	4413      	add	r3, r2
 8015d0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015d12:	db05      	blt.n	8015d20 <ip_reass_free_complete_datagram+0x98>
 8015d14:	4b27      	ldr	r3, [pc, #156]	@ (8015db4 <ip_reass_free_complete_datagram+0x12c>)
 8015d16:	22bc      	movs	r2, #188	@ 0xbc
 8015d18:	492a      	ldr	r1, [pc, #168]	@ (8015dc4 <ip_reass_free_complete_datagram+0x13c>)
 8015d1a:	4828      	ldr	r0, [pc, #160]	@ (8015dbc <ip_reass_free_complete_datagram+0x134>)
 8015d1c:	f001 f8b2 	bl	8016e84 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015d20:	8bfa      	ldrh	r2, [r7, #30]
 8015d22:	8a7b      	ldrh	r3, [r7, #18]
 8015d24:	4413      	add	r3, r2
 8015d26:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015d28:	69b8      	ldr	r0, [r7, #24]
 8015d2a:	f7f5 fe53 	bl	800b9d4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	685b      	ldr	r3, [r3, #4]
 8015d32:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015d34:	e01f      	b.n	8015d76 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015d36:	69bb      	ldr	r3, [r7, #24]
 8015d38:	685b      	ldr	r3, [r3, #4]
 8015d3a:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015d3c:	69bb      	ldr	r3, [r7, #24]
 8015d3e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015d40:	697b      	ldr	r3, [r7, #20]
 8015d42:	681b      	ldr	r3, [r3, #0]
 8015d44:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015d46:	68f8      	ldr	r0, [r7, #12]
 8015d48:	f7f5 fed2 	bl	800baf0 <pbuf_clen>
 8015d4c:	4603      	mov	r3, r0
 8015d4e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015d50:	8bfa      	ldrh	r2, [r7, #30]
 8015d52:	8a7b      	ldrh	r3, [r7, #18]
 8015d54:	4413      	add	r3, r2
 8015d56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015d5a:	db05      	blt.n	8015d68 <ip_reass_free_complete_datagram+0xe0>
 8015d5c:	4b15      	ldr	r3, [pc, #84]	@ (8015db4 <ip_reass_free_complete_datagram+0x12c>)
 8015d5e:	22cc      	movs	r2, #204	@ 0xcc
 8015d60:	4918      	ldr	r1, [pc, #96]	@ (8015dc4 <ip_reass_free_complete_datagram+0x13c>)
 8015d62:	4816      	ldr	r0, [pc, #88]	@ (8015dbc <ip_reass_free_complete_datagram+0x134>)
 8015d64:	f001 f88e 	bl	8016e84 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015d68:	8bfa      	ldrh	r2, [r7, #30]
 8015d6a:	8a7b      	ldrh	r3, [r7, #18]
 8015d6c:	4413      	add	r3, r2
 8015d6e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015d70:	68f8      	ldr	r0, [r7, #12]
 8015d72:	f7f5 fe2f 	bl	800b9d4 <pbuf_free>
  while (p != NULL) {
 8015d76:	69bb      	ldr	r3, [r7, #24]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d1dc      	bne.n	8015d36 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015d7c:	6839      	ldr	r1, [r7, #0]
 8015d7e:	6878      	ldr	r0, [r7, #4]
 8015d80:	f000 f8c2 	bl	8015f08 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015d84:	4b10      	ldr	r3, [pc, #64]	@ (8015dc8 <ip_reass_free_complete_datagram+0x140>)
 8015d86:	881b      	ldrh	r3, [r3, #0]
 8015d88:	8bfa      	ldrh	r2, [r7, #30]
 8015d8a:	429a      	cmp	r2, r3
 8015d8c:	d905      	bls.n	8015d9a <ip_reass_free_complete_datagram+0x112>
 8015d8e:	4b09      	ldr	r3, [pc, #36]	@ (8015db4 <ip_reass_free_complete_datagram+0x12c>)
 8015d90:	22d2      	movs	r2, #210	@ 0xd2
 8015d92:	490e      	ldr	r1, [pc, #56]	@ (8015dcc <ip_reass_free_complete_datagram+0x144>)
 8015d94:	4809      	ldr	r0, [pc, #36]	@ (8015dbc <ip_reass_free_complete_datagram+0x134>)
 8015d96:	f001 f875 	bl	8016e84 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8015dc8 <ip_reass_free_complete_datagram+0x140>)
 8015d9c:	881a      	ldrh	r2, [r3, #0]
 8015d9e:	8bfb      	ldrh	r3, [r7, #30]
 8015da0:	1ad3      	subs	r3, r2, r3
 8015da2:	b29a      	uxth	r2, r3
 8015da4:	4b08      	ldr	r3, [pc, #32]	@ (8015dc8 <ip_reass_free_complete_datagram+0x140>)
 8015da6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015da8:	8bfb      	ldrh	r3, [r7, #30]
}
 8015daa:	4618      	mov	r0, r3
 8015dac:	3720      	adds	r7, #32
 8015dae:	46bd      	mov	sp, r7
 8015db0:	bd80      	pop	{r7, pc}
 8015db2:	bf00      	nop
 8015db4:	0801b28c 	.word	0x0801b28c
 8015db8:	0801b2c8 	.word	0x0801b2c8
 8015dbc:	0801b2d4 	.word	0x0801b2d4
 8015dc0:	0801b2fc 	.word	0x0801b2fc
 8015dc4:	0801b310 	.word	0x0801b310
 8015dc8:	2000cc68 	.word	0x2000cc68
 8015dcc:	0801b330 	.word	0x0801b330

08015dd0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015dd0:	b580      	push	{r7, lr}
 8015dd2:	b08a      	sub	sp, #40	@ 0x28
 8015dd4:	af00      	add	r7, sp, #0
 8015dd6:	6078      	str	r0, [r7, #4]
 8015dd8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015dda:	2300      	movs	r3, #0
 8015ddc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015dde:	2300      	movs	r3, #0
 8015de0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015de2:	2300      	movs	r3, #0
 8015de4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015de6:	2300      	movs	r3, #0
 8015de8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015dea:	2300      	movs	r3, #0
 8015dec:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015dee:	4b28      	ldr	r3, [pc, #160]	@ (8015e90 <ip_reass_remove_oldest_datagram+0xc0>)
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8015df4:	e030      	b.n	8015e58 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015df8:	695a      	ldr	r2, [r3, #20]
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	68db      	ldr	r3, [r3, #12]
 8015dfe:	429a      	cmp	r2, r3
 8015e00:	d10c      	bne.n	8015e1c <ip_reass_remove_oldest_datagram+0x4c>
 8015e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e04:	699a      	ldr	r2, [r3, #24]
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	691b      	ldr	r3, [r3, #16]
 8015e0a:	429a      	cmp	r2, r3
 8015e0c:	d106      	bne.n	8015e1c <ip_reass_remove_oldest_datagram+0x4c>
 8015e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e10:	899a      	ldrh	r2, [r3, #12]
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	889b      	ldrh	r3, [r3, #4]
 8015e16:	b29b      	uxth	r3, r3
 8015e18:	429a      	cmp	r2, r3
 8015e1a:	d014      	beq.n	8015e46 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015e1c:	693b      	ldr	r3, [r7, #16]
 8015e1e:	3301      	adds	r3, #1
 8015e20:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015e22:	6a3b      	ldr	r3, [r7, #32]
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d104      	bne.n	8015e32 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e2a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015e2c:	69fb      	ldr	r3, [r7, #28]
 8015e2e:	61bb      	str	r3, [r7, #24]
 8015e30:	e009      	b.n	8015e46 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e34:	7fda      	ldrb	r2, [r3, #31]
 8015e36:	6a3b      	ldr	r3, [r7, #32]
 8015e38:	7fdb      	ldrb	r3, [r3, #31]
 8015e3a:	429a      	cmp	r2, r3
 8015e3c:	d803      	bhi.n	8015e46 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e40:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015e42:	69fb      	ldr	r3, [r7, #28]
 8015e44:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d001      	beq.n	8015e52 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e50:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8015e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d1cb      	bne.n	8015df6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015e5e:	6a3b      	ldr	r3, [r7, #32]
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d008      	beq.n	8015e76 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015e64:	69b9      	ldr	r1, [r7, #24]
 8015e66:	6a38      	ldr	r0, [r7, #32]
 8015e68:	f7ff ff0e 	bl	8015c88 <ip_reass_free_complete_datagram>
 8015e6c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015e6e:	697a      	ldr	r2, [r7, #20]
 8015e70:	68fb      	ldr	r3, [r7, #12]
 8015e72:	4413      	add	r3, r2
 8015e74:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015e76:	697a      	ldr	r2, [r7, #20]
 8015e78:	683b      	ldr	r3, [r7, #0]
 8015e7a:	429a      	cmp	r2, r3
 8015e7c:	da02      	bge.n	8015e84 <ip_reass_remove_oldest_datagram+0xb4>
 8015e7e:	693b      	ldr	r3, [r7, #16]
 8015e80:	2b01      	cmp	r3, #1
 8015e82:	dcac      	bgt.n	8015dde <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015e84:	697b      	ldr	r3, [r7, #20]
}
 8015e86:	4618      	mov	r0, r3
 8015e88:	3728      	adds	r7, #40	@ 0x28
 8015e8a:	46bd      	mov	sp, r7
 8015e8c:	bd80      	pop	{r7, pc}
 8015e8e:	bf00      	nop
 8015e90:	2000cc64 	.word	0x2000cc64

08015e94 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015e94:	b580      	push	{r7, lr}
 8015e96:	b084      	sub	sp, #16
 8015e98:	af00      	add	r7, sp, #0
 8015e9a:	6078      	str	r0, [r7, #4]
 8015e9c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015e9e:	2004      	movs	r0, #4
 8015ea0:	f7f4 fd8c 	bl	800a9bc <memp_malloc>
 8015ea4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d110      	bne.n	8015ece <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015eac:	6839      	ldr	r1, [r7, #0]
 8015eae:	6878      	ldr	r0, [r7, #4]
 8015eb0:	f7ff ff8e 	bl	8015dd0 <ip_reass_remove_oldest_datagram>
 8015eb4:	4602      	mov	r2, r0
 8015eb6:	683b      	ldr	r3, [r7, #0]
 8015eb8:	4293      	cmp	r3, r2
 8015eba:	dc03      	bgt.n	8015ec4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015ebc:	2004      	movs	r0, #4
 8015ebe:	f7f4 fd7d 	bl	800a9bc <memp_malloc>
 8015ec2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d101      	bne.n	8015ece <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015eca:	2300      	movs	r3, #0
 8015ecc:	e016      	b.n	8015efc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015ece:	2220      	movs	r2, #32
 8015ed0:	2100      	movs	r1, #0
 8015ed2:	68f8      	ldr	r0, [r7, #12]
 8015ed4:	f001 f968 	bl	80171a8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	220f      	movs	r2, #15
 8015edc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015ede:	4b09      	ldr	r3, [pc, #36]	@ (8015f04 <ip_reass_enqueue_new_datagram+0x70>)
 8015ee0:	681a      	ldr	r2, [r3, #0]
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015ee6:	4a07      	ldr	r2, [pc, #28]	@ (8015f04 <ip_reass_enqueue_new_datagram+0x70>)
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015eec:	68fb      	ldr	r3, [r7, #12]
 8015eee:	3308      	adds	r3, #8
 8015ef0:	2214      	movs	r2, #20
 8015ef2:	6879      	ldr	r1, [r7, #4]
 8015ef4:	4618      	mov	r0, r3
 8015ef6:	f001 fa22 	bl	801733e <memcpy>
  return ipr;
 8015efa:	68fb      	ldr	r3, [r7, #12]
}
 8015efc:	4618      	mov	r0, r3
 8015efe:	3710      	adds	r7, #16
 8015f00:	46bd      	mov	sp, r7
 8015f02:	bd80      	pop	{r7, pc}
 8015f04:	2000cc64 	.word	0x2000cc64

08015f08 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015f08:	b580      	push	{r7, lr}
 8015f0a:	b082      	sub	sp, #8
 8015f0c:	af00      	add	r7, sp, #0
 8015f0e:	6078      	str	r0, [r7, #4]
 8015f10:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015f12:	4b10      	ldr	r3, [pc, #64]	@ (8015f54 <ip_reass_dequeue_datagram+0x4c>)
 8015f14:	681b      	ldr	r3, [r3, #0]
 8015f16:	687a      	ldr	r2, [r7, #4]
 8015f18:	429a      	cmp	r2, r3
 8015f1a:	d104      	bne.n	8015f26 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	4a0c      	ldr	r2, [pc, #48]	@ (8015f54 <ip_reass_dequeue_datagram+0x4c>)
 8015f22:	6013      	str	r3, [r2, #0]
 8015f24:	e00d      	b.n	8015f42 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015f26:	683b      	ldr	r3, [r7, #0]
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d106      	bne.n	8015f3a <ip_reass_dequeue_datagram+0x32>
 8015f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8015f58 <ip_reass_dequeue_datagram+0x50>)
 8015f2e:	f240 1245 	movw	r2, #325	@ 0x145
 8015f32:	490a      	ldr	r1, [pc, #40]	@ (8015f5c <ip_reass_dequeue_datagram+0x54>)
 8015f34:	480a      	ldr	r0, [pc, #40]	@ (8015f60 <ip_reass_dequeue_datagram+0x58>)
 8015f36:	f000 ffa5 	bl	8016e84 <iprintf>
    prev->next = ipr->next;
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	681a      	ldr	r2, [r3, #0]
 8015f3e:	683b      	ldr	r3, [r7, #0]
 8015f40:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015f42:	6879      	ldr	r1, [r7, #4]
 8015f44:	2004      	movs	r0, #4
 8015f46:	f7f4 fdaf 	bl	800aaa8 <memp_free>
}
 8015f4a:	bf00      	nop
 8015f4c:	3708      	adds	r7, #8
 8015f4e:	46bd      	mov	sp, r7
 8015f50:	bd80      	pop	{r7, pc}
 8015f52:	bf00      	nop
 8015f54:	2000cc64 	.word	0x2000cc64
 8015f58:	0801b28c 	.word	0x0801b28c
 8015f5c:	0801b354 	.word	0x0801b354
 8015f60:	0801b2d4 	.word	0x0801b2d4

08015f64 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015f64:	b580      	push	{r7, lr}
 8015f66:	b08c      	sub	sp, #48	@ 0x30
 8015f68:	af00      	add	r7, sp, #0
 8015f6a:	60f8      	str	r0, [r7, #12]
 8015f6c:	60b9      	str	r1, [r7, #8]
 8015f6e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015f70:	2300      	movs	r3, #0
 8015f72:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015f74:	2301      	movs	r3, #1
 8015f76:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015f78:	68bb      	ldr	r3, [r7, #8]
 8015f7a:	685b      	ldr	r3, [r3, #4]
 8015f7c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015f7e:	69fb      	ldr	r3, [r7, #28]
 8015f80:	885b      	ldrh	r3, [r3, #2]
 8015f82:	b29b      	uxth	r3, r3
 8015f84:	4618      	mov	r0, r3
 8015f86:	f7f3 ffd1 	bl	8009f2c <lwip_htons>
 8015f8a:	4603      	mov	r3, r0
 8015f8c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015f8e:	69fb      	ldr	r3, [r7, #28]
 8015f90:	781b      	ldrb	r3, [r3, #0]
 8015f92:	f003 030f 	and.w	r3, r3, #15
 8015f96:	b2db      	uxtb	r3, r3
 8015f98:	009b      	lsls	r3, r3, #2
 8015f9a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015f9c:	7e7b      	ldrb	r3, [r7, #25]
 8015f9e:	b29b      	uxth	r3, r3
 8015fa0:	8b7a      	ldrh	r2, [r7, #26]
 8015fa2:	429a      	cmp	r2, r3
 8015fa4:	d202      	bcs.n	8015fac <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8015faa:	e135      	b.n	8016218 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015fac:	7e7b      	ldrb	r3, [r7, #25]
 8015fae:	b29b      	uxth	r3, r3
 8015fb0:	8b7a      	ldrh	r2, [r7, #26]
 8015fb2:	1ad3      	subs	r3, r2, r3
 8015fb4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015fb6:	69fb      	ldr	r3, [r7, #28]
 8015fb8:	88db      	ldrh	r3, [r3, #6]
 8015fba:	b29b      	uxth	r3, r3
 8015fbc:	4618      	mov	r0, r3
 8015fbe:	f7f3 ffb5 	bl	8009f2c <lwip_htons>
 8015fc2:	4603      	mov	r3, r0
 8015fc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015fc8:	b29b      	uxth	r3, r3
 8015fca:	00db      	lsls	r3, r3, #3
 8015fcc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015fce:	68bb      	ldr	r3, [r7, #8]
 8015fd0:	685b      	ldr	r3, [r3, #4]
 8015fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8015fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fd6:	2200      	movs	r2, #0
 8015fd8:	701a      	strb	r2, [r3, #0]
 8015fda:	2200      	movs	r2, #0
 8015fdc:	705a      	strb	r2, [r3, #1]
 8015fde:	2200      	movs	r2, #0
 8015fe0:	709a      	strb	r2, [r3, #2]
 8015fe2:	2200      	movs	r2, #0
 8015fe4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fe8:	8afa      	ldrh	r2, [r7, #22]
 8015fea:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015fec:	8afa      	ldrh	r2, [r7, #22]
 8015fee:	8b7b      	ldrh	r3, [r7, #26]
 8015ff0:	4413      	add	r3, r2
 8015ff2:	b29a      	uxth	r2, r3
 8015ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ff6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ffa:	88db      	ldrh	r3, [r3, #6]
 8015ffc:	b29b      	uxth	r3, r3
 8015ffe:	8afa      	ldrh	r2, [r7, #22]
 8016000:	429a      	cmp	r2, r3
 8016002:	d902      	bls.n	801600a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016004:	f04f 33ff 	mov.w	r3, #4294967295
 8016008:	e106      	b.n	8016218 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801600a:	68fb      	ldr	r3, [r7, #12]
 801600c:	685b      	ldr	r3, [r3, #4]
 801600e:	627b      	str	r3, [r7, #36]	@ 0x24
 8016010:	e068      	b.n	80160e4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8016012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016014:	685b      	ldr	r3, [r3, #4]
 8016016:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801601a:	889b      	ldrh	r3, [r3, #4]
 801601c:	b29a      	uxth	r2, r3
 801601e:	693b      	ldr	r3, [r7, #16]
 8016020:	889b      	ldrh	r3, [r3, #4]
 8016022:	b29b      	uxth	r3, r3
 8016024:	429a      	cmp	r2, r3
 8016026:	d235      	bcs.n	8016094 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801602a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801602c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801602e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016030:	2b00      	cmp	r3, #0
 8016032:	d020      	beq.n	8016076 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016036:	889b      	ldrh	r3, [r3, #4]
 8016038:	b29a      	uxth	r2, r3
 801603a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801603c:	88db      	ldrh	r3, [r3, #6]
 801603e:	b29b      	uxth	r3, r3
 8016040:	429a      	cmp	r2, r3
 8016042:	d307      	bcc.n	8016054 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016046:	88db      	ldrh	r3, [r3, #6]
 8016048:	b29a      	uxth	r2, r3
 801604a:	693b      	ldr	r3, [r7, #16]
 801604c:	889b      	ldrh	r3, [r3, #4]
 801604e:	b29b      	uxth	r3, r3
 8016050:	429a      	cmp	r2, r3
 8016052:	d902      	bls.n	801605a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016054:	f04f 33ff 	mov.w	r3, #4294967295
 8016058:	e0de      	b.n	8016218 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801605a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801605c:	68ba      	ldr	r2, [r7, #8]
 801605e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016062:	88db      	ldrh	r3, [r3, #6]
 8016064:	b29a      	uxth	r2, r3
 8016066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016068:	889b      	ldrh	r3, [r3, #4]
 801606a:	b29b      	uxth	r3, r3
 801606c:	429a      	cmp	r2, r3
 801606e:	d03d      	beq.n	80160ec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016070:	2300      	movs	r3, #0
 8016072:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016074:	e03a      	b.n	80160ec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016078:	88db      	ldrh	r3, [r3, #6]
 801607a:	b29a      	uxth	r2, r3
 801607c:	693b      	ldr	r3, [r7, #16]
 801607e:	889b      	ldrh	r3, [r3, #4]
 8016080:	b29b      	uxth	r3, r3
 8016082:	429a      	cmp	r2, r3
 8016084:	d902      	bls.n	801608c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016086:	f04f 33ff 	mov.w	r3, #4294967295
 801608a:	e0c5      	b.n	8016218 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801608c:	68fb      	ldr	r3, [r7, #12]
 801608e:	68ba      	ldr	r2, [r7, #8]
 8016090:	605a      	str	r2, [r3, #4]
      break;
 8016092:	e02b      	b.n	80160ec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016096:	889b      	ldrh	r3, [r3, #4]
 8016098:	b29a      	uxth	r2, r3
 801609a:	693b      	ldr	r3, [r7, #16]
 801609c:	889b      	ldrh	r3, [r3, #4]
 801609e:	b29b      	uxth	r3, r3
 80160a0:	429a      	cmp	r2, r3
 80160a2:	d102      	bne.n	80160aa <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80160a4:	f04f 33ff 	mov.w	r3, #4294967295
 80160a8:	e0b6      	b.n	8016218 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80160aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160ac:	889b      	ldrh	r3, [r3, #4]
 80160ae:	b29a      	uxth	r2, r3
 80160b0:	693b      	ldr	r3, [r7, #16]
 80160b2:	88db      	ldrh	r3, [r3, #6]
 80160b4:	b29b      	uxth	r3, r3
 80160b6:	429a      	cmp	r2, r3
 80160b8:	d202      	bcs.n	80160c0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80160ba:	f04f 33ff 	mov.w	r3, #4294967295
 80160be:	e0ab      	b.n	8016218 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80160c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d009      	beq.n	80160da <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80160c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160c8:	88db      	ldrh	r3, [r3, #6]
 80160ca:	b29a      	uxth	r2, r3
 80160cc:	693b      	ldr	r3, [r7, #16]
 80160ce:	889b      	ldrh	r3, [r3, #4]
 80160d0:	b29b      	uxth	r3, r3
 80160d2:	429a      	cmp	r2, r3
 80160d4:	d001      	beq.n	80160da <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80160d6:	2300      	movs	r3, #0
 80160d8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80160da:	693b      	ldr	r3, [r7, #16]
 80160dc:	681b      	ldr	r3, [r3, #0]
 80160de:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 80160e0:	693b      	ldr	r3, [r7, #16]
 80160e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 80160e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d193      	bne.n	8016012 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80160ea:	e000      	b.n	80160ee <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80160ec:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80160ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d12d      	bne.n	8016150 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80160f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d01c      	beq.n	8016134 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80160fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160fc:	88db      	ldrh	r3, [r3, #6]
 80160fe:	b29a      	uxth	r2, r3
 8016100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016102:	889b      	ldrh	r3, [r3, #4]
 8016104:	b29b      	uxth	r3, r3
 8016106:	429a      	cmp	r2, r3
 8016108:	d906      	bls.n	8016118 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801610a:	4b45      	ldr	r3, [pc, #276]	@ (8016220 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801610c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8016110:	4944      	ldr	r1, [pc, #272]	@ (8016224 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016112:	4845      	ldr	r0, [pc, #276]	@ (8016228 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016114:	f000 feb6 	bl	8016e84 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801611a:	68ba      	ldr	r2, [r7, #8]
 801611c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801611e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016120:	88db      	ldrh	r3, [r3, #6]
 8016122:	b29a      	uxth	r2, r3
 8016124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016126:	889b      	ldrh	r3, [r3, #4]
 8016128:	b29b      	uxth	r3, r3
 801612a:	429a      	cmp	r2, r3
 801612c:	d010      	beq.n	8016150 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801612e:	2300      	movs	r3, #0
 8016130:	623b      	str	r3, [r7, #32]
 8016132:	e00d      	b.n	8016150 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	685b      	ldr	r3, [r3, #4]
 8016138:	2b00      	cmp	r3, #0
 801613a:	d006      	beq.n	801614a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801613c:	4b38      	ldr	r3, [pc, #224]	@ (8016220 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801613e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8016142:	493a      	ldr	r1, [pc, #232]	@ (801622c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016144:	4838      	ldr	r0, [pc, #224]	@ (8016228 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016146:	f000 fe9d 	bl	8016e84 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	68ba      	ldr	r2, [r7, #8]
 801614e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	2b00      	cmp	r3, #0
 8016154:	d105      	bne.n	8016162 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	7f9b      	ldrb	r3, [r3, #30]
 801615a:	f003 0301 	and.w	r3, r3, #1
 801615e:	2b00      	cmp	r3, #0
 8016160:	d059      	beq.n	8016216 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016162:	6a3b      	ldr	r3, [r7, #32]
 8016164:	2b00      	cmp	r3, #0
 8016166:	d04f      	beq.n	8016208 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016168:	68fb      	ldr	r3, [r7, #12]
 801616a:	685b      	ldr	r3, [r3, #4]
 801616c:	2b00      	cmp	r3, #0
 801616e:	d006      	beq.n	801617e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016170:	68fb      	ldr	r3, [r7, #12]
 8016172:	685b      	ldr	r3, [r3, #4]
 8016174:	685b      	ldr	r3, [r3, #4]
 8016176:	889b      	ldrh	r3, [r3, #4]
 8016178:	b29b      	uxth	r3, r3
 801617a:	2b00      	cmp	r3, #0
 801617c:	d002      	beq.n	8016184 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801617e:	2300      	movs	r3, #0
 8016180:	623b      	str	r3, [r7, #32]
 8016182:	e041      	b.n	8016208 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016186:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8016188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801618a:	681b      	ldr	r3, [r3, #0]
 801618c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801618e:	e012      	b.n	80161b6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016192:	685b      	ldr	r3, [r3, #4]
 8016194:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8016196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016198:	88db      	ldrh	r3, [r3, #6]
 801619a:	b29a      	uxth	r2, r3
 801619c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801619e:	889b      	ldrh	r3, [r3, #4]
 80161a0:	b29b      	uxth	r3, r3
 80161a2:	429a      	cmp	r2, r3
 80161a4:	d002      	beq.n	80161ac <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80161a6:	2300      	movs	r3, #0
 80161a8:	623b      	str	r3, [r7, #32]
            break;
 80161aa:	e007      	b.n	80161bc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80161ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161ae:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 80161b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161b2:	681b      	ldr	r3, [r3, #0]
 80161b4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80161b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d1e9      	bne.n	8016190 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80161bc:	6a3b      	ldr	r3, [r7, #32]
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d022      	beq.n	8016208 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	685b      	ldr	r3, [r3, #4]
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d106      	bne.n	80161d8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80161ca:	4b15      	ldr	r3, [pc, #84]	@ (8016220 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80161cc:	f240 12df 	movw	r2, #479	@ 0x1df
 80161d0:	4917      	ldr	r1, [pc, #92]	@ (8016230 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80161d2:	4815      	ldr	r0, [pc, #84]	@ (8016228 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80161d4:	f000 fe56 	bl	8016e84 <iprintf>
          LWIP_ASSERT("sanity check",
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	685b      	ldr	r3, [r3, #4]
 80161dc:	685b      	ldr	r3, [r3, #4]
 80161de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80161e0:	429a      	cmp	r2, r3
 80161e2:	d106      	bne.n	80161f2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80161e4:	4b0e      	ldr	r3, [pc, #56]	@ (8016220 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80161e6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80161ea:	4911      	ldr	r1, [pc, #68]	@ (8016230 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80161ec:	480e      	ldr	r0, [pc, #56]	@ (8016228 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80161ee:	f000 fe49 	bl	8016e84 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80161f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161f4:	681b      	ldr	r3, [r3, #0]
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d006      	beq.n	8016208 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80161fa:	4b09      	ldr	r3, [pc, #36]	@ (8016220 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80161fc:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8016200:	490c      	ldr	r1, [pc, #48]	@ (8016234 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016202:	4809      	ldr	r0, [pc, #36]	@ (8016228 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016204:	f000 fe3e 	bl	8016e84 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016208:	6a3b      	ldr	r3, [r7, #32]
 801620a:	2b00      	cmp	r3, #0
 801620c:	bf14      	ite	ne
 801620e:	2301      	movne	r3, #1
 8016210:	2300      	moveq	r3, #0
 8016212:	b2db      	uxtb	r3, r3
 8016214:	e000      	b.n	8016218 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016216:	2300      	movs	r3, #0
}
 8016218:	4618      	mov	r0, r3
 801621a:	3730      	adds	r7, #48	@ 0x30
 801621c:	46bd      	mov	sp, r7
 801621e:	bd80      	pop	{r7, pc}
 8016220:	0801b28c 	.word	0x0801b28c
 8016224:	0801b370 	.word	0x0801b370
 8016228:	0801b2d4 	.word	0x0801b2d4
 801622c:	0801b390 	.word	0x0801b390
 8016230:	0801b3c8 	.word	0x0801b3c8
 8016234:	0801b3d8 	.word	0x0801b3d8

08016238 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016238:	b580      	push	{r7, lr}
 801623a:	b08e      	sub	sp, #56	@ 0x38
 801623c:	af00      	add	r7, sp, #0
 801623e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	685b      	ldr	r3, [r3, #4]
 8016244:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016248:	781b      	ldrb	r3, [r3, #0]
 801624a:	f003 030f 	and.w	r3, r3, #15
 801624e:	b2db      	uxtb	r3, r3
 8016250:	009b      	lsls	r3, r3, #2
 8016252:	b2db      	uxtb	r3, r3
 8016254:	2b14      	cmp	r3, #20
 8016256:	f040 8171 	bne.w	801653c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801625a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801625c:	88db      	ldrh	r3, [r3, #6]
 801625e:	b29b      	uxth	r3, r3
 8016260:	4618      	mov	r0, r3
 8016262:	f7f3 fe63 	bl	8009f2c <lwip_htons>
 8016266:	4603      	mov	r3, r0
 8016268:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801626c:	b29b      	uxth	r3, r3
 801626e:	00db      	lsls	r3, r3, #3
 8016270:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016274:	885b      	ldrh	r3, [r3, #2]
 8016276:	b29b      	uxth	r3, r3
 8016278:	4618      	mov	r0, r3
 801627a:	f7f3 fe57 	bl	8009f2c <lwip_htons>
 801627e:	4603      	mov	r3, r0
 8016280:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016284:	781b      	ldrb	r3, [r3, #0]
 8016286:	f003 030f 	and.w	r3, r3, #15
 801628a:	b2db      	uxtb	r3, r3
 801628c:	009b      	lsls	r3, r3, #2
 801628e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8016292:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016296:	b29b      	uxth	r3, r3
 8016298:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801629a:	429a      	cmp	r2, r3
 801629c:	f0c0 8150 	bcc.w	8016540 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80162a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80162a4:	b29b      	uxth	r3, r3
 80162a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80162a8:	1ad3      	subs	r3, r2, r3
 80162aa:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80162ac:	6878      	ldr	r0, [r7, #4]
 80162ae:	f7f5 fc1f 	bl	800baf0 <pbuf_clen>
 80162b2:	4603      	mov	r3, r0
 80162b4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80162b6:	4b8c      	ldr	r3, [pc, #560]	@ (80164e8 <ip4_reass+0x2b0>)
 80162b8:	881b      	ldrh	r3, [r3, #0]
 80162ba:	461a      	mov	r2, r3
 80162bc:	8c3b      	ldrh	r3, [r7, #32]
 80162be:	4413      	add	r3, r2
 80162c0:	2b0a      	cmp	r3, #10
 80162c2:	dd10      	ble.n	80162e6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80162c4:	8c3b      	ldrh	r3, [r7, #32]
 80162c6:	4619      	mov	r1, r3
 80162c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80162ca:	f7ff fd81 	bl	8015dd0 <ip_reass_remove_oldest_datagram>
 80162ce:	4603      	mov	r3, r0
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	f000 8137 	beq.w	8016544 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80162d6:	4b84      	ldr	r3, [pc, #528]	@ (80164e8 <ip4_reass+0x2b0>)
 80162d8:	881b      	ldrh	r3, [r3, #0]
 80162da:	461a      	mov	r2, r3
 80162dc:	8c3b      	ldrh	r3, [r7, #32]
 80162de:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80162e0:	2b0a      	cmp	r3, #10
 80162e2:	f300 812f 	bgt.w	8016544 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80162e6:	4b81      	ldr	r3, [pc, #516]	@ (80164ec <ip4_reass+0x2b4>)
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80162ec:	e015      	b.n	801631a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80162ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162f0:	695a      	ldr	r2, [r3, #20]
 80162f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162f4:	68db      	ldr	r3, [r3, #12]
 80162f6:	429a      	cmp	r2, r3
 80162f8:	d10c      	bne.n	8016314 <ip4_reass+0xdc>
 80162fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162fc:	699a      	ldr	r2, [r3, #24]
 80162fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016300:	691b      	ldr	r3, [r3, #16]
 8016302:	429a      	cmp	r2, r3
 8016304:	d106      	bne.n	8016314 <ip4_reass+0xdc>
 8016306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016308:	899a      	ldrh	r2, [r3, #12]
 801630a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801630c:	889b      	ldrh	r3, [r3, #4]
 801630e:	b29b      	uxth	r3, r3
 8016310:	429a      	cmp	r2, r3
 8016312:	d006      	beq.n	8016322 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	633b      	str	r3, [r7, #48]	@ 0x30
 801631a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801631c:	2b00      	cmp	r3, #0
 801631e:	d1e6      	bne.n	80162ee <ip4_reass+0xb6>
 8016320:	e000      	b.n	8016324 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016322:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016326:	2b00      	cmp	r3, #0
 8016328:	d109      	bne.n	801633e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801632a:	8c3b      	ldrh	r3, [r7, #32]
 801632c:	4619      	mov	r1, r3
 801632e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016330:	f7ff fdb0 	bl	8015e94 <ip_reass_enqueue_new_datagram>
 8016334:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016338:	2b00      	cmp	r3, #0
 801633a:	d11c      	bne.n	8016376 <ip4_reass+0x13e>
      goto nullreturn;
 801633c:	e105      	b.n	801654a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801633e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016340:	88db      	ldrh	r3, [r3, #6]
 8016342:	b29b      	uxth	r3, r3
 8016344:	4618      	mov	r0, r3
 8016346:	f7f3 fdf1 	bl	8009f2c <lwip_htons>
 801634a:	4603      	mov	r3, r0
 801634c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016350:	2b00      	cmp	r3, #0
 8016352:	d110      	bne.n	8016376 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016356:	89db      	ldrh	r3, [r3, #14]
 8016358:	4618      	mov	r0, r3
 801635a:	f7f3 fde7 	bl	8009f2c <lwip_htons>
 801635e:	4603      	mov	r3, r0
 8016360:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016364:	2b00      	cmp	r3, #0
 8016366:	d006      	beq.n	8016376 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801636a:	3308      	adds	r3, #8
 801636c:	2214      	movs	r2, #20
 801636e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016370:	4618      	mov	r0, r3
 8016372:	f000 ffe4 	bl	801733e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016378:	88db      	ldrh	r3, [r3, #6]
 801637a:	b29b      	uxth	r3, r3
 801637c:	f003 0320 	and.w	r3, r3, #32
 8016380:	2b00      	cmp	r3, #0
 8016382:	bf0c      	ite	eq
 8016384:	2301      	moveq	r3, #1
 8016386:	2300      	movne	r3, #0
 8016388:	b2db      	uxtb	r3, r3
 801638a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801638c:	69fb      	ldr	r3, [r7, #28]
 801638e:	2b00      	cmp	r3, #0
 8016390:	d00e      	beq.n	80163b0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8016392:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8016394:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016396:	4413      	add	r3, r2
 8016398:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801639a:	8b7a      	ldrh	r2, [r7, #26]
 801639c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801639e:	429a      	cmp	r2, r3
 80163a0:	f0c0 80a0 	bcc.w	80164e4 <ip4_reass+0x2ac>
 80163a4:	8b7b      	ldrh	r3, [r7, #26]
 80163a6:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 80163aa:	4293      	cmp	r3, r2
 80163ac:	f200 809a 	bhi.w	80164e4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80163b0:	69fa      	ldr	r2, [r7, #28]
 80163b2:	6879      	ldr	r1, [r7, #4]
 80163b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80163b6:	f7ff fdd5 	bl	8015f64 <ip_reass_chain_frag_into_datagram_and_validate>
 80163ba:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80163bc:	697b      	ldr	r3, [r7, #20]
 80163be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163c2:	f000 809b 	beq.w	80164fc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80163c6:	4b48      	ldr	r3, [pc, #288]	@ (80164e8 <ip4_reass+0x2b0>)
 80163c8:	881a      	ldrh	r2, [r3, #0]
 80163ca:	8c3b      	ldrh	r3, [r7, #32]
 80163cc:	4413      	add	r3, r2
 80163ce:	b29a      	uxth	r2, r3
 80163d0:	4b45      	ldr	r3, [pc, #276]	@ (80164e8 <ip4_reass+0x2b0>)
 80163d2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80163d4:	69fb      	ldr	r3, [r7, #28]
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d00d      	beq.n	80163f6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80163da:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80163dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80163de:	4413      	add	r3, r2
 80163e0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80163e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163e4:	8a7a      	ldrh	r2, [r7, #18]
 80163e6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80163e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163ea:	7f9b      	ldrb	r3, [r3, #30]
 80163ec:	f043 0301 	orr.w	r3, r3, #1
 80163f0:	b2da      	uxtb	r2, r3
 80163f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163f4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80163f6:	697b      	ldr	r3, [r7, #20]
 80163f8:	2b01      	cmp	r3, #1
 80163fa:	d171      	bne.n	80164e0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80163fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163fe:	8b9b      	ldrh	r3, [r3, #28]
 8016400:	3314      	adds	r3, #20
 8016402:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016406:	685b      	ldr	r3, [r3, #4]
 8016408:	685b      	ldr	r3, [r3, #4]
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801640e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016410:	685b      	ldr	r3, [r3, #4]
 8016412:	685b      	ldr	r3, [r3, #4]
 8016414:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016418:	3308      	adds	r3, #8
 801641a:	2214      	movs	r2, #20
 801641c:	4619      	mov	r1, r3
 801641e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016420:	f000 ff8d 	bl	801733e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016424:	8a3b      	ldrh	r3, [r7, #16]
 8016426:	4618      	mov	r0, r3
 8016428:	f7f3 fd80 	bl	8009f2c <lwip_htons>
 801642c:	4603      	mov	r3, r0
 801642e:	461a      	mov	r2, r3
 8016430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016432:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016436:	2200      	movs	r2, #0
 8016438:	719a      	strb	r2, [r3, #6]
 801643a:	2200      	movs	r2, #0
 801643c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801643e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016440:	2200      	movs	r2, #0
 8016442:	729a      	strb	r2, [r3, #10]
 8016444:	2200      	movs	r2, #0
 8016446:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801644a:	685b      	ldr	r3, [r3, #4]
 801644c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801644e:	e00d      	b.n	801646c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016452:	685b      	ldr	r3, [r3, #4]
 8016454:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016456:	2114      	movs	r1, #20
 8016458:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801645a:	f7f5 fa35 	bl	800b8c8 <pbuf_remove_header>
      pbuf_cat(p, r);
 801645e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8016460:	6878      	ldr	r0, [r7, #4]
 8016462:	f7f5 fb85 	bl	800bb70 <pbuf_cat>
      r = iprh->next_pbuf;
 8016466:	68fb      	ldr	r3, [r7, #12]
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801646c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801646e:	2b00      	cmp	r3, #0
 8016470:	d1ee      	bne.n	8016450 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016472:	4b1e      	ldr	r3, [pc, #120]	@ (80164ec <ip4_reass+0x2b4>)
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016478:	429a      	cmp	r2, r3
 801647a:	d102      	bne.n	8016482 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801647c:	2300      	movs	r3, #0
 801647e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016480:	e010      	b.n	80164a4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016482:	4b1a      	ldr	r3, [pc, #104]	@ (80164ec <ip4_reass+0x2b4>)
 8016484:	681b      	ldr	r3, [r3, #0]
 8016486:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016488:	e007      	b.n	801649a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801648a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016490:	429a      	cmp	r2, r3
 8016492:	d006      	beq.n	80164a2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801649a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801649c:	2b00      	cmp	r3, #0
 801649e:	d1f4      	bne.n	801648a <ip4_reass+0x252>
 80164a0:	e000      	b.n	80164a4 <ip4_reass+0x26c>
          break;
 80164a2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80164a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80164a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80164a8:	f7ff fd2e 	bl	8015f08 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80164ac:	6878      	ldr	r0, [r7, #4]
 80164ae:	f7f5 fb1f 	bl	800baf0 <pbuf_clen>
 80164b2:	4603      	mov	r3, r0
 80164b4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80164b6:	4b0c      	ldr	r3, [pc, #48]	@ (80164e8 <ip4_reass+0x2b0>)
 80164b8:	881b      	ldrh	r3, [r3, #0]
 80164ba:	8c3a      	ldrh	r2, [r7, #32]
 80164bc:	429a      	cmp	r2, r3
 80164be:	d906      	bls.n	80164ce <ip4_reass+0x296>
 80164c0:	4b0b      	ldr	r3, [pc, #44]	@ (80164f0 <ip4_reass+0x2b8>)
 80164c2:	f240 229b 	movw	r2, #667	@ 0x29b
 80164c6:	490b      	ldr	r1, [pc, #44]	@ (80164f4 <ip4_reass+0x2bc>)
 80164c8:	480b      	ldr	r0, [pc, #44]	@ (80164f8 <ip4_reass+0x2c0>)
 80164ca:	f000 fcdb 	bl	8016e84 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80164ce:	4b06      	ldr	r3, [pc, #24]	@ (80164e8 <ip4_reass+0x2b0>)
 80164d0:	881a      	ldrh	r2, [r3, #0]
 80164d2:	8c3b      	ldrh	r3, [r7, #32]
 80164d4:	1ad3      	subs	r3, r2, r3
 80164d6:	b29a      	uxth	r2, r3
 80164d8:	4b03      	ldr	r3, [pc, #12]	@ (80164e8 <ip4_reass+0x2b0>)
 80164da:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	e038      	b.n	8016552 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80164e0:	2300      	movs	r3, #0
 80164e2:	e036      	b.n	8016552 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80164e4:	bf00      	nop
 80164e6:	e00a      	b.n	80164fe <ip4_reass+0x2c6>
 80164e8:	2000cc68 	.word	0x2000cc68
 80164ec:	2000cc64 	.word	0x2000cc64
 80164f0:	0801b28c 	.word	0x0801b28c
 80164f4:	0801b3fc 	.word	0x0801b3fc
 80164f8:	0801b2d4 	.word	0x0801b2d4
    goto nullreturn_ipr;
 80164fc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80164fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016500:	2b00      	cmp	r3, #0
 8016502:	d106      	bne.n	8016512 <ip4_reass+0x2da>
 8016504:	4b15      	ldr	r3, [pc, #84]	@ (801655c <ip4_reass+0x324>)
 8016506:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801650a:	4915      	ldr	r1, [pc, #84]	@ (8016560 <ip4_reass+0x328>)
 801650c:	4815      	ldr	r0, [pc, #84]	@ (8016564 <ip4_reass+0x32c>)
 801650e:	f000 fcb9 	bl	8016e84 <iprintf>
  if (ipr->p == NULL) {
 8016512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016514:	685b      	ldr	r3, [r3, #4]
 8016516:	2b00      	cmp	r3, #0
 8016518:	d116      	bne.n	8016548 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801651a:	4b13      	ldr	r3, [pc, #76]	@ (8016568 <ip4_reass+0x330>)
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016520:	429a      	cmp	r2, r3
 8016522:	d006      	beq.n	8016532 <ip4_reass+0x2fa>
 8016524:	4b0d      	ldr	r3, [pc, #52]	@ (801655c <ip4_reass+0x324>)
 8016526:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801652a:	4910      	ldr	r1, [pc, #64]	@ (801656c <ip4_reass+0x334>)
 801652c:	480d      	ldr	r0, [pc, #52]	@ (8016564 <ip4_reass+0x32c>)
 801652e:	f000 fca9 	bl	8016e84 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016532:	2100      	movs	r1, #0
 8016534:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016536:	f7ff fce7 	bl	8015f08 <ip_reass_dequeue_datagram>
 801653a:	e006      	b.n	801654a <ip4_reass+0x312>
    goto nullreturn;
 801653c:	bf00      	nop
 801653e:	e004      	b.n	801654a <ip4_reass+0x312>
    goto nullreturn;
 8016540:	bf00      	nop
 8016542:	e002      	b.n	801654a <ip4_reass+0x312>
      goto nullreturn;
 8016544:	bf00      	nop
 8016546:	e000      	b.n	801654a <ip4_reass+0x312>
  }

nullreturn:
 8016548:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801654a:	6878      	ldr	r0, [r7, #4]
 801654c:	f7f5 fa42 	bl	800b9d4 <pbuf_free>
  return NULL;
 8016550:	2300      	movs	r3, #0
}
 8016552:	4618      	mov	r0, r3
 8016554:	3738      	adds	r7, #56	@ 0x38
 8016556:	46bd      	mov	sp, r7
 8016558:	bd80      	pop	{r7, pc}
 801655a:	bf00      	nop
 801655c:	0801b28c 	.word	0x0801b28c
 8016560:	0801b418 	.word	0x0801b418
 8016564:	0801b2d4 	.word	0x0801b2d4
 8016568:	2000cc64 	.word	0x2000cc64
 801656c:	0801b424 	.word	0x0801b424

08016570 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016570:	b580      	push	{r7, lr}
 8016572:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016574:	2005      	movs	r0, #5
 8016576:	f7f4 fa21 	bl	800a9bc <memp_malloc>
 801657a:	4603      	mov	r3, r0
}
 801657c:	4618      	mov	r0, r3
 801657e:	bd80      	pop	{r7, pc}

08016580 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016580:	b580      	push	{r7, lr}
 8016582:	b082      	sub	sp, #8
 8016584:	af00      	add	r7, sp, #0
 8016586:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	2b00      	cmp	r3, #0
 801658c:	d106      	bne.n	801659c <ip_frag_free_pbuf_custom_ref+0x1c>
 801658e:	4b07      	ldr	r3, [pc, #28]	@ (80165ac <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016590:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8016594:	4906      	ldr	r1, [pc, #24]	@ (80165b0 <ip_frag_free_pbuf_custom_ref+0x30>)
 8016596:	4807      	ldr	r0, [pc, #28]	@ (80165b4 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016598:	f000 fc74 	bl	8016e84 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801659c:	6879      	ldr	r1, [r7, #4]
 801659e:	2005      	movs	r0, #5
 80165a0:	f7f4 fa82 	bl	800aaa8 <memp_free>
}
 80165a4:	bf00      	nop
 80165a6:	3708      	adds	r7, #8
 80165a8:	46bd      	mov	sp, r7
 80165aa:	bd80      	pop	{r7, pc}
 80165ac:	0801b28c 	.word	0x0801b28c
 80165b0:	0801b444 	.word	0x0801b444
 80165b4:	0801b2d4 	.word	0x0801b2d4

080165b8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80165b8:	b580      	push	{r7, lr}
 80165ba:	b084      	sub	sp, #16
 80165bc:	af00      	add	r7, sp, #0
 80165be:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80165c4:	68fb      	ldr	r3, [r7, #12]
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d106      	bne.n	80165d8 <ipfrag_free_pbuf_custom+0x20>
 80165ca:	4b11      	ldr	r3, [pc, #68]	@ (8016610 <ipfrag_free_pbuf_custom+0x58>)
 80165cc:	f240 22ce 	movw	r2, #718	@ 0x2ce
 80165d0:	4910      	ldr	r1, [pc, #64]	@ (8016614 <ipfrag_free_pbuf_custom+0x5c>)
 80165d2:	4811      	ldr	r0, [pc, #68]	@ (8016618 <ipfrag_free_pbuf_custom+0x60>)
 80165d4:	f000 fc56 	bl	8016e84 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80165d8:	68fa      	ldr	r2, [r7, #12]
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	429a      	cmp	r2, r3
 80165de:	d006      	beq.n	80165ee <ipfrag_free_pbuf_custom+0x36>
 80165e0:	4b0b      	ldr	r3, [pc, #44]	@ (8016610 <ipfrag_free_pbuf_custom+0x58>)
 80165e2:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80165e6:	490d      	ldr	r1, [pc, #52]	@ (801661c <ipfrag_free_pbuf_custom+0x64>)
 80165e8:	480b      	ldr	r0, [pc, #44]	@ (8016618 <ipfrag_free_pbuf_custom+0x60>)
 80165ea:	f000 fc4b 	bl	8016e84 <iprintf>
  if (pcr->original != NULL) {
 80165ee:	68fb      	ldr	r3, [r7, #12]
 80165f0:	695b      	ldr	r3, [r3, #20]
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d004      	beq.n	8016600 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80165f6:	68fb      	ldr	r3, [r7, #12]
 80165f8:	695b      	ldr	r3, [r3, #20]
 80165fa:	4618      	mov	r0, r3
 80165fc:	f7f5 f9ea 	bl	800b9d4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016600:	68f8      	ldr	r0, [r7, #12]
 8016602:	f7ff ffbd 	bl	8016580 <ip_frag_free_pbuf_custom_ref>
}
 8016606:	bf00      	nop
 8016608:	3710      	adds	r7, #16
 801660a:	46bd      	mov	sp, r7
 801660c:	bd80      	pop	{r7, pc}
 801660e:	bf00      	nop
 8016610:	0801b28c 	.word	0x0801b28c
 8016614:	0801b450 	.word	0x0801b450
 8016618:	0801b2d4 	.word	0x0801b2d4
 801661c:	0801b45c 	.word	0x0801b45c

08016620 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016620:	b580      	push	{r7, lr}
 8016622:	b094      	sub	sp, #80	@ 0x50
 8016624:	af02      	add	r7, sp, #8
 8016626:	60f8      	str	r0, [r7, #12]
 8016628:	60b9      	str	r1, [r7, #8]
 801662a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801662c:	2300      	movs	r3, #0
 801662e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016632:	68bb      	ldr	r3, [r7, #8]
 8016634:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8016636:	3b14      	subs	r3, #20
 8016638:	2b00      	cmp	r3, #0
 801663a:	da00      	bge.n	801663e <ip4_frag+0x1e>
 801663c:	3307      	adds	r3, #7
 801663e:	10db      	asrs	r3, r3, #3
 8016640:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016642:	2314      	movs	r3, #20
 8016644:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016646:	68fb      	ldr	r3, [r7, #12]
 8016648:	685b      	ldr	r3, [r3, #4]
 801664a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801664c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801664e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016652:	781b      	ldrb	r3, [r3, #0]
 8016654:	f003 030f 	and.w	r3, r3, #15
 8016658:	b2db      	uxtb	r3, r3
 801665a:	009b      	lsls	r3, r3, #2
 801665c:	b2db      	uxtb	r3, r3
 801665e:	2b14      	cmp	r3, #20
 8016660:	d002      	beq.n	8016668 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016662:	f06f 0305 	mvn.w	r3, #5
 8016666:	e110      	b.n	801688a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016668:	68fb      	ldr	r3, [r7, #12]
 801666a:	895b      	ldrh	r3, [r3, #10]
 801666c:	2b13      	cmp	r3, #19
 801666e:	d809      	bhi.n	8016684 <ip4_frag+0x64>
 8016670:	4b88      	ldr	r3, [pc, #544]	@ (8016894 <ip4_frag+0x274>)
 8016672:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8016676:	4988      	ldr	r1, [pc, #544]	@ (8016898 <ip4_frag+0x278>)
 8016678:	4888      	ldr	r0, [pc, #544]	@ (801689c <ip4_frag+0x27c>)
 801667a:	f000 fc03 	bl	8016e84 <iprintf>
 801667e:	f06f 0305 	mvn.w	r3, #5
 8016682:	e102      	b.n	801688a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016686:	88db      	ldrh	r3, [r3, #6]
 8016688:	b29b      	uxth	r3, r3
 801668a:	4618      	mov	r0, r3
 801668c:	f7f3 fc4e 	bl	8009f2c <lwip_htons>
 8016690:	4603      	mov	r3, r0
 8016692:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8016694:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016696:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801669a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801669e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80166a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80166a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80166a6:	68fb      	ldr	r3, [r7, #12]
 80166a8:	891b      	ldrh	r3, [r3, #8]
 80166aa:	3b14      	subs	r3, #20
 80166ac:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 80166b0:	e0e1      	b.n	8016876 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80166b2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80166b4:	00db      	lsls	r3, r3, #3
 80166b6:	b29b      	uxth	r3, r3
 80166b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80166bc:	4293      	cmp	r3, r2
 80166be:	bf28      	it	cs
 80166c0:	4613      	movcs	r3, r2
 80166c2:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80166c4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80166c8:	2114      	movs	r1, #20
 80166ca:	200e      	movs	r0, #14
 80166cc:	f7f4 fe9e 	bl	800b40c <pbuf_alloc>
 80166d0:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 80166d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	f000 80d5 	beq.w	8016884 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80166da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166dc:	895b      	ldrh	r3, [r3, #10]
 80166de:	2b13      	cmp	r3, #19
 80166e0:	d806      	bhi.n	80166f0 <ip4_frag+0xd0>
 80166e2:	4b6c      	ldr	r3, [pc, #432]	@ (8016894 <ip4_frag+0x274>)
 80166e4:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80166e8:	496d      	ldr	r1, [pc, #436]	@ (80168a0 <ip4_frag+0x280>)
 80166ea:	486c      	ldr	r0, [pc, #432]	@ (801689c <ip4_frag+0x27c>)
 80166ec:	f000 fbca 	bl	8016e84 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80166f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166f2:	685b      	ldr	r3, [r3, #4]
 80166f4:	2214      	movs	r2, #20
 80166f6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80166f8:	4618      	mov	r0, r3
 80166fa:	f000 fe20 	bl	801733e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80166fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016700:	685b      	ldr	r3, [r3, #4]
 8016702:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8016704:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016706:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801670a:	e064      	b.n	80167d6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801670c:	68fb      	ldr	r3, [r7, #12]
 801670e:	895a      	ldrh	r2, [r3, #10]
 8016710:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016712:	1ad3      	subs	r3, r2, r3
 8016714:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	895b      	ldrh	r3, [r3, #10]
 801671a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801671c:	429a      	cmp	r2, r3
 801671e:	d906      	bls.n	801672e <ip4_frag+0x10e>
 8016720:	4b5c      	ldr	r3, [pc, #368]	@ (8016894 <ip4_frag+0x274>)
 8016722:	f240 322d 	movw	r2, #813	@ 0x32d
 8016726:	495f      	ldr	r1, [pc, #380]	@ (80168a4 <ip4_frag+0x284>)
 8016728:	485c      	ldr	r0, [pc, #368]	@ (801689c <ip4_frag+0x27c>)
 801672a:	f000 fbab 	bl	8016e84 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801672e:	8bfa      	ldrh	r2, [r7, #30]
 8016730:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016734:	4293      	cmp	r3, r2
 8016736:	bf28      	it	cs
 8016738:	4613      	movcs	r3, r2
 801673a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801673e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016742:	2b00      	cmp	r3, #0
 8016744:	d105      	bne.n	8016752 <ip4_frag+0x132>
        poff = 0;
 8016746:	2300      	movs	r3, #0
 8016748:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	60fb      	str	r3, [r7, #12]
        continue;
 8016750:	e041      	b.n	80167d6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016752:	f7ff ff0d 	bl	8016570 <ip_frag_alloc_pbuf_custom_ref>
 8016756:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016758:	69bb      	ldr	r3, [r7, #24]
 801675a:	2b00      	cmp	r3, #0
 801675c:	d103      	bne.n	8016766 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801675e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016760:	f7f5 f938 	bl	800b9d4 <pbuf_free>
        goto memerr;
 8016764:	e08f      	b.n	8016886 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016766:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016768:	68fb      	ldr	r3, [r7, #12]
 801676a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801676c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801676e:	4413      	add	r3, r2
 8016770:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8016774:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8016778:	9201      	str	r2, [sp, #4]
 801677a:	9300      	str	r3, [sp, #0]
 801677c:	4603      	mov	r3, r0
 801677e:	2241      	movs	r2, #65	@ 0x41
 8016780:	2000      	movs	r0, #0
 8016782:	f7f4 ff6d 	bl	800b660 <pbuf_alloced_custom>
 8016786:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016788:	697b      	ldr	r3, [r7, #20]
 801678a:	2b00      	cmp	r3, #0
 801678c:	d106      	bne.n	801679c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801678e:	69b8      	ldr	r0, [r7, #24]
 8016790:	f7ff fef6 	bl	8016580 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016794:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016796:	f7f5 f91d 	bl	800b9d4 <pbuf_free>
        goto memerr;
 801679a:	e074      	b.n	8016886 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801679c:	68f8      	ldr	r0, [r7, #12]
 801679e:	f7f5 f9bf 	bl	800bb20 <pbuf_ref>
      pcr->original = p;
 80167a2:	69bb      	ldr	r3, [r7, #24]
 80167a4:	68fa      	ldr	r2, [r7, #12]
 80167a6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80167a8:	69bb      	ldr	r3, [r7, #24]
 80167aa:	4a3f      	ldr	r2, [pc, #252]	@ (80168a8 <ip4_frag+0x288>)
 80167ac:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80167ae:	6979      	ldr	r1, [r7, #20]
 80167b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80167b2:	f7f5 f9dd 	bl	800bb70 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80167b6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80167ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80167be:	1ad3      	subs	r3, r2, r3
 80167c0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 80167c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d004      	beq.n	80167d6 <ip4_frag+0x1b6>
        poff = 0;
 80167cc:	2300      	movs	r3, #0
 80167ce:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80167d0:	68fb      	ldr	r3, [r7, #12]
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80167d6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80167da:	2b00      	cmp	r3, #0
 80167dc:	d196      	bne.n	801670c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80167de:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80167e0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80167e4:	4413      	add	r3, r2
 80167e6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80167e8:	68bb      	ldr	r3, [r7, #8]
 80167ea:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80167ec:	f1a3 0213 	sub.w	r2, r3, #19
 80167f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80167f4:	429a      	cmp	r2, r3
 80167f6:	bfcc      	ite	gt
 80167f8:	2301      	movgt	r3, #1
 80167fa:	2300      	movle	r3, #0
 80167fc:	b2db      	uxtb	r3, r3
 80167fe:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016800:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016804:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016808:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801680a:	6a3b      	ldr	r3, [r7, #32]
 801680c:	2b00      	cmp	r3, #0
 801680e:	d002      	beq.n	8016816 <ip4_frag+0x1f6>
 8016810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016812:	2b00      	cmp	r3, #0
 8016814:	d003      	beq.n	801681e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016816:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016818:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801681c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801681e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016820:	4618      	mov	r0, r3
 8016822:	f7f3 fb83 	bl	8009f2c <lwip_htons>
 8016826:	4603      	mov	r3, r0
 8016828:	461a      	mov	r2, r3
 801682a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801682c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801682e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016830:	3314      	adds	r3, #20
 8016832:	b29b      	uxth	r3, r3
 8016834:	4618      	mov	r0, r3
 8016836:	f7f3 fb79 	bl	8009f2c <lwip_htons>
 801683a:	4603      	mov	r3, r0
 801683c:	461a      	mov	r2, r3
 801683e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016840:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016844:	2200      	movs	r2, #0
 8016846:	729a      	strb	r2, [r3, #10]
 8016848:	2200      	movs	r2, #0
 801684a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801684c:	68bb      	ldr	r3, [r7, #8]
 801684e:	695b      	ldr	r3, [r3, #20]
 8016850:	687a      	ldr	r2, [r7, #4]
 8016852:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016854:	68b8      	ldr	r0, [r7, #8]
 8016856:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016858:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801685a:	f7f5 f8bb 	bl	800b9d4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801685e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016862:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016864:	1ad3      	subs	r3, r2, r3
 8016866:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801686a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801686e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016870:	4413      	add	r3, r2
 8016872:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8016876:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801687a:	2b00      	cmp	r3, #0
 801687c:	f47f af19 	bne.w	80166b2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016880:	2300      	movs	r3, #0
 8016882:	e002      	b.n	801688a <ip4_frag+0x26a>
      goto memerr;
 8016884:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016886:	f04f 33ff 	mov.w	r3, #4294967295
}
 801688a:	4618      	mov	r0, r3
 801688c:	3748      	adds	r7, #72	@ 0x48
 801688e:	46bd      	mov	sp, r7
 8016890:	bd80      	pop	{r7, pc}
 8016892:	bf00      	nop
 8016894:	0801b28c 	.word	0x0801b28c
 8016898:	0801b468 	.word	0x0801b468
 801689c:	0801b2d4 	.word	0x0801b2d4
 80168a0:	0801b484 	.word	0x0801b484
 80168a4:	0801b4a4 	.word	0x0801b4a4
 80168a8:	080165b9 	.word	0x080165b9

080168ac <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80168ac:	b580      	push	{r7, lr}
 80168ae:	b086      	sub	sp, #24
 80168b0:	af00      	add	r7, sp, #0
 80168b2:	6078      	str	r0, [r7, #4]
 80168b4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80168b6:	230e      	movs	r3, #14
 80168b8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	895b      	ldrh	r3, [r3, #10]
 80168be:	2b0e      	cmp	r3, #14
 80168c0:	d96e      	bls.n	80169a0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	7bdb      	ldrb	r3, [r3, #15]
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d106      	bne.n	80168d8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80168ca:	683b      	ldr	r3, [r7, #0]
 80168cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80168d0:	3301      	adds	r3, #1
 80168d2:	b2da      	uxtb	r2, r3
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	685b      	ldr	r3, [r3, #4]
 80168dc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80168de:	693b      	ldr	r3, [r7, #16]
 80168e0:	7b1a      	ldrb	r2, [r3, #12]
 80168e2:	7b5b      	ldrb	r3, [r3, #13]
 80168e4:	021b      	lsls	r3, r3, #8
 80168e6:	4313      	orrs	r3, r2
 80168e8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80168ea:	693b      	ldr	r3, [r7, #16]
 80168ec:	781b      	ldrb	r3, [r3, #0]
 80168ee:	f003 0301 	and.w	r3, r3, #1
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	d023      	beq.n	801693e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80168f6:	693b      	ldr	r3, [r7, #16]
 80168f8:	781b      	ldrb	r3, [r3, #0]
 80168fa:	2b01      	cmp	r3, #1
 80168fc:	d10f      	bne.n	801691e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80168fe:	693b      	ldr	r3, [r7, #16]
 8016900:	785b      	ldrb	r3, [r3, #1]
 8016902:	2b00      	cmp	r3, #0
 8016904:	d11b      	bne.n	801693e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016906:	693b      	ldr	r3, [r7, #16]
 8016908:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801690a:	2b5e      	cmp	r3, #94	@ 0x5e
 801690c:	d117      	bne.n	801693e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	7b5b      	ldrb	r3, [r3, #13]
 8016912:	f043 0310 	orr.w	r3, r3, #16
 8016916:	b2da      	uxtb	r2, r3
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	735a      	strb	r2, [r3, #13]
 801691c:	e00f      	b.n	801693e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801691e:	693b      	ldr	r3, [r7, #16]
 8016920:	2206      	movs	r2, #6
 8016922:	4928      	ldr	r1, [pc, #160]	@ (80169c4 <ethernet_input+0x118>)
 8016924:	4618      	mov	r0, r3
 8016926:	f000 fc15 	bl	8017154 <memcmp>
 801692a:	4603      	mov	r3, r0
 801692c:	2b00      	cmp	r3, #0
 801692e:	d106      	bne.n	801693e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	7b5b      	ldrb	r3, [r3, #13]
 8016934:	f043 0308 	orr.w	r3, r3, #8
 8016938:	b2da      	uxtb	r2, r3
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801693e:	89fb      	ldrh	r3, [r7, #14]
 8016940:	2b08      	cmp	r3, #8
 8016942:	d003      	beq.n	801694c <ethernet_input+0xa0>
 8016944:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8016948:	d014      	beq.n	8016974 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801694a:	e032      	b.n	80169b2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801694c:	683b      	ldr	r3, [r7, #0]
 801694e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8016952:	f003 0308 	and.w	r3, r3, #8
 8016956:	2b00      	cmp	r3, #0
 8016958:	d024      	beq.n	80169a4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801695a:	8afb      	ldrh	r3, [r7, #22]
 801695c:	4619      	mov	r1, r3
 801695e:	6878      	ldr	r0, [r7, #4]
 8016960:	f7f4 ffb2 	bl	800b8c8 <pbuf_remove_header>
 8016964:	4603      	mov	r3, r0
 8016966:	2b00      	cmp	r3, #0
 8016968:	d11e      	bne.n	80169a8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801696a:	6839      	ldr	r1, [r7, #0]
 801696c:	6878      	ldr	r0, [r7, #4]
 801696e:	f7fe fdc5 	bl	80154fc <ip4_input>
      break;
 8016972:	e013      	b.n	801699c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016974:	683b      	ldr	r3, [r7, #0]
 8016976:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801697a:	f003 0308 	and.w	r3, r3, #8
 801697e:	2b00      	cmp	r3, #0
 8016980:	d014      	beq.n	80169ac <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016982:	8afb      	ldrh	r3, [r7, #22]
 8016984:	4619      	mov	r1, r3
 8016986:	6878      	ldr	r0, [r7, #4]
 8016988:	f7f4 ff9e 	bl	800b8c8 <pbuf_remove_header>
 801698c:	4603      	mov	r3, r0
 801698e:	2b00      	cmp	r3, #0
 8016990:	d10e      	bne.n	80169b0 <ethernet_input+0x104>
        etharp_input(p, netif);
 8016992:	6839      	ldr	r1, [r7, #0]
 8016994:	6878      	ldr	r0, [r7, #4]
 8016996:	f7fd fca9 	bl	80142ec <etharp_input>
      break;
 801699a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801699c:	2300      	movs	r3, #0
 801699e:	e00c      	b.n	80169ba <ethernet_input+0x10e>
    goto free_and_return;
 80169a0:	bf00      	nop
 80169a2:	e006      	b.n	80169b2 <ethernet_input+0x106>
        goto free_and_return;
 80169a4:	bf00      	nop
 80169a6:	e004      	b.n	80169b2 <ethernet_input+0x106>
        goto free_and_return;
 80169a8:	bf00      	nop
 80169aa:	e002      	b.n	80169b2 <ethernet_input+0x106>
        goto free_and_return;
 80169ac:	bf00      	nop
 80169ae:	e000      	b.n	80169b2 <ethernet_input+0x106>
        goto free_and_return;
 80169b0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80169b2:	6878      	ldr	r0, [r7, #4]
 80169b4:	f7f5 f80e 	bl	800b9d4 <pbuf_free>
  return ERR_OK;
 80169b8:	2300      	movs	r3, #0
}
 80169ba:	4618      	mov	r0, r3
 80169bc:	3718      	adds	r7, #24
 80169be:	46bd      	mov	sp, r7
 80169c0:	bd80      	pop	{r7, pc}
 80169c2:	bf00      	nop
 80169c4:	0801b6b4 	.word	0x0801b6b4

080169c8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80169c8:	b580      	push	{r7, lr}
 80169ca:	b086      	sub	sp, #24
 80169cc:	af00      	add	r7, sp, #0
 80169ce:	60f8      	str	r0, [r7, #12]
 80169d0:	60b9      	str	r1, [r7, #8]
 80169d2:	607a      	str	r2, [r7, #4]
 80169d4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80169d6:	8c3b      	ldrh	r3, [r7, #32]
 80169d8:	4618      	mov	r0, r3
 80169da:	f7f3 faa7 	bl	8009f2c <lwip_htons>
 80169de:	4603      	mov	r3, r0
 80169e0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80169e2:	210e      	movs	r1, #14
 80169e4:	68b8      	ldr	r0, [r7, #8]
 80169e6:	f7f4 ff5f 	bl	800b8a8 <pbuf_add_header>
 80169ea:	4603      	mov	r3, r0
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	d125      	bne.n	8016a3c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80169f0:	68bb      	ldr	r3, [r7, #8]
 80169f2:	685b      	ldr	r3, [r3, #4]
 80169f4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80169f6:	693b      	ldr	r3, [r7, #16]
 80169f8:	8afa      	ldrh	r2, [r7, #22]
 80169fa:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80169fc:	693b      	ldr	r3, [r7, #16]
 80169fe:	2206      	movs	r2, #6
 8016a00:	6839      	ldr	r1, [r7, #0]
 8016a02:	4618      	mov	r0, r3
 8016a04:	f000 fc9b 	bl	801733e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016a08:	693b      	ldr	r3, [r7, #16]
 8016a0a:	3306      	adds	r3, #6
 8016a0c:	2206      	movs	r2, #6
 8016a0e:	6879      	ldr	r1, [r7, #4]
 8016a10:	4618      	mov	r0, r3
 8016a12:	f000 fc94 	bl	801733e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016a16:	68fb      	ldr	r3, [r7, #12]
 8016a18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016a1c:	2b06      	cmp	r3, #6
 8016a1e:	d006      	beq.n	8016a2e <ethernet_output+0x66>
 8016a20:	4b0a      	ldr	r3, [pc, #40]	@ (8016a4c <ethernet_output+0x84>)
 8016a22:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8016a26:	490a      	ldr	r1, [pc, #40]	@ (8016a50 <ethernet_output+0x88>)
 8016a28:	480a      	ldr	r0, [pc, #40]	@ (8016a54 <ethernet_output+0x8c>)
 8016a2a:	f000 fa2b 	bl	8016e84 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	699b      	ldr	r3, [r3, #24]
 8016a32:	68b9      	ldr	r1, [r7, #8]
 8016a34:	68f8      	ldr	r0, [r7, #12]
 8016a36:	4798      	blx	r3
 8016a38:	4603      	mov	r3, r0
 8016a3a:	e002      	b.n	8016a42 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016a3c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016a3e:	f06f 0301 	mvn.w	r3, #1
}
 8016a42:	4618      	mov	r0, r3
 8016a44:	3718      	adds	r7, #24
 8016a46:	46bd      	mov	sp, r7
 8016a48:	bd80      	pop	{r7, pc}
 8016a4a:	bf00      	nop
 8016a4c:	0801b4b4 	.word	0x0801b4b4
 8016a50:	0801b4ec 	.word	0x0801b4ec
 8016a54:	0801b520 	.word	0x0801b520

08016a58 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016a58:	b580      	push	{r7, lr}
 8016a5a:	b086      	sub	sp, #24
 8016a5c:	af00      	add	r7, sp, #0
 8016a5e:	6078      	str	r0, [r7, #4]
 8016a60:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8016a62:	683b      	ldr	r3, [r7, #0]
 8016a64:	60bb      	str	r3, [r7, #8]
 8016a66:	2304      	movs	r3, #4
 8016a68:	60fb      	str	r3, [r7, #12]
 8016a6a:	2300      	movs	r3, #0
 8016a6c:	613b      	str	r3, [r7, #16]
 8016a6e:	2300      	movs	r3, #0
 8016a70:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8016a72:	f107 0308 	add.w	r3, r7, #8
 8016a76:	2100      	movs	r1, #0
 8016a78:	4618      	mov	r0, r3
 8016a7a:	f7f0 fb39 	bl	80070f0 <osMessageCreate>
 8016a7e:	4602      	mov	r2, r0
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	681b      	ldr	r3, [r3, #0]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d102      	bne.n	8016a92 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8016a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8016a90:	e000      	b.n	8016a94 <sys_mbox_new+0x3c>

  return ERR_OK;
 8016a92:	2300      	movs	r3, #0
}
 8016a94:	4618      	mov	r0, r3
 8016a96:	3718      	adds	r7, #24
 8016a98:	46bd      	mov	sp, r7
 8016a9a:	bd80      	pop	{r7, pc}

08016a9c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016a9c:	b580      	push	{r7, lr}
 8016a9e:	b084      	sub	sp, #16
 8016aa0:	af00      	add	r7, sp, #0
 8016aa2:	6078      	str	r0, [r7, #4]
 8016aa4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	681b      	ldr	r3, [r3, #0]
 8016aaa:	6839      	ldr	r1, [r7, #0]
 8016aac:	2200      	movs	r2, #0
 8016aae:	4618      	mov	r0, r3
 8016ab0:	f7f0 fb46 	bl	8007140 <osMessagePut>
 8016ab4:	4603      	mov	r3, r0
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d102      	bne.n	8016ac0 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8016aba:	2300      	movs	r3, #0
 8016abc:	73fb      	strb	r3, [r7, #15]
 8016abe:	e001      	b.n	8016ac4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8016ac0:	23ff      	movs	r3, #255	@ 0xff
 8016ac2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016ac4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016ac8:	4618      	mov	r0, r3
 8016aca:	3710      	adds	r7, #16
 8016acc:	46bd      	mov	sp, r7
 8016ace:	bd80      	pop	{r7, pc}

08016ad0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016ad0:	b580      	push	{r7, lr}
 8016ad2:	b08c      	sub	sp, #48	@ 0x30
 8016ad4:	af00      	add	r7, sp, #0
 8016ad6:	61f8      	str	r0, [r7, #28]
 8016ad8:	61b9      	str	r1, [r7, #24]
 8016ada:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8016adc:	f7f0 f946 	bl	8006d6c <osKernelSysTick>
 8016ae0:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8016ae2:	697b      	ldr	r3, [r7, #20]
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d017      	beq.n	8016b18 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8016ae8:	69fb      	ldr	r3, [r7, #28]
 8016aea:	6819      	ldr	r1, [r3, #0]
 8016aec:	f107 0320 	add.w	r3, r7, #32
 8016af0:	697a      	ldr	r2, [r7, #20]
 8016af2:	4618      	mov	r0, r3
 8016af4:	f7f0 fb64 	bl	80071c0 <osMessageGet>

    if(event.status == osEventMessage)
 8016af8:	6a3b      	ldr	r3, [r7, #32]
 8016afa:	2b10      	cmp	r3, #16
 8016afc:	d109      	bne.n	8016b12 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8016afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b00:	461a      	mov	r2, r3
 8016b02:	69bb      	ldr	r3, [r7, #24]
 8016b04:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8016b06:	f7f0 f931 	bl	8006d6c <osKernelSysTick>
 8016b0a:	4602      	mov	r2, r0
 8016b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b0e:	1ad3      	subs	r3, r2, r3
 8016b10:	e019      	b.n	8016b46 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016b12:	f04f 33ff 	mov.w	r3, #4294967295
 8016b16:	e016      	b.n	8016b46 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8016b18:	69fb      	ldr	r3, [r7, #28]
 8016b1a:	6819      	ldr	r1, [r3, #0]
 8016b1c:	463b      	mov	r3, r7
 8016b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8016b22:	4618      	mov	r0, r3
 8016b24:	f7f0 fb4c 	bl	80071c0 <osMessageGet>
 8016b28:	f107 0320 	add.w	r3, r7, #32
 8016b2c:	463a      	mov	r2, r7
 8016b2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8016b30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8016b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b36:	461a      	mov	r2, r3
 8016b38:	69bb      	ldr	r3, [r7, #24]
 8016b3a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8016b3c:	f7f0 f916 	bl	8006d6c <osKernelSysTick>
 8016b40:	4602      	mov	r2, r0
 8016b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b44:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8016b46:	4618      	mov	r0, r3
 8016b48:	3730      	adds	r7, #48	@ 0x30
 8016b4a:	46bd      	mov	sp, r7
 8016b4c:	bd80      	pop	{r7, pc}

08016b4e <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8016b4e:	b480      	push	{r7}
 8016b50:	b083      	sub	sp, #12
 8016b52:	af00      	add	r7, sp, #0
 8016b54:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d101      	bne.n	8016b62 <sys_mbox_valid+0x14>
    return 0;
 8016b5e:	2300      	movs	r3, #0
 8016b60:	e000      	b.n	8016b64 <sys_mbox_valid+0x16>
  else
    return 1;
 8016b62:	2301      	movs	r3, #1
}
 8016b64:	4618      	mov	r0, r3
 8016b66:	370c      	adds	r7, #12
 8016b68:	46bd      	mov	sp, r7
 8016b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b6e:	4770      	bx	lr

08016b70 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8016b70:	b580      	push	{r7, lr}
 8016b72:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8016b74:	4803      	ldr	r0, [pc, #12]	@ (8016b84 <sys_init+0x14>)
 8016b76:	f7f0 f969 	bl	8006e4c <osMutexCreate>
 8016b7a:	4603      	mov	r3, r0
 8016b7c:	4a02      	ldr	r2, [pc, #8]	@ (8016b88 <sys_init+0x18>)
 8016b7e:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8016b80:	bf00      	nop
 8016b82:	bd80      	pop	{r7, pc}
 8016b84:	0801b6c4 	.word	0x0801b6c4
 8016b88:	2000cc6c 	.word	0x2000cc6c

08016b8c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016b8c:	b580      	push	{r7, lr}
 8016b8e:	b084      	sub	sp, #16
 8016b90:	af00      	add	r7, sp, #0
 8016b92:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8016b94:	2300      	movs	r3, #0
 8016b96:	60bb      	str	r3, [r7, #8]
 8016b98:	2300      	movs	r3, #0
 8016b9a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8016b9c:	f107 0308 	add.w	r3, r7, #8
 8016ba0:	4618      	mov	r0, r3
 8016ba2:	f7f0 f953 	bl	8006e4c <osMutexCreate>
 8016ba6:	4602      	mov	r2, r0
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	681b      	ldr	r3, [r3, #0]
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d102      	bne.n	8016bba <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8016bb8:	e000      	b.n	8016bbc <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8016bba:	2300      	movs	r3, #0
}
 8016bbc:	4618      	mov	r0, r3
 8016bbe:	3710      	adds	r7, #16
 8016bc0:	46bd      	mov	sp, r7
 8016bc2:	bd80      	pop	{r7, pc}

08016bc4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016bc4:	b580      	push	{r7, lr}
 8016bc6:	b082      	sub	sp, #8
 8016bc8:	af00      	add	r7, sp, #0
 8016bca:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8016bd4:	4618      	mov	r0, r3
 8016bd6:	f7f0 f951 	bl	8006e7c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8016bda:	bf00      	nop
 8016bdc:	3708      	adds	r7, #8
 8016bde:	46bd      	mov	sp, r7
 8016be0:	bd80      	pop	{r7, pc}

08016be2 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8016be2:	b580      	push	{r7, lr}
 8016be4:	b082      	sub	sp, #8
 8016be6:	af00      	add	r7, sp, #0
 8016be8:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	4618      	mov	r0, r3
 8016bf0:	f7f0 f992 	bl	8006f18 <osMutexRelease>
}
 8016bf4:	bf00      	nop
 8016bf6:	3708      	adds	r7, #8
 8016bf8:	46bd      	mov	sp, r7
 8016bfa:	bd80      	pop	{r7, pc}

08016bfc <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016bfc:	b580      	push	{r7, lr}
 8016bfe:	b08c      	sub	sp, #48	@ 0x30
 8016c00:	af00      	add	r7, sp, #0
 8016c02:	60f8      	str	r0, [r7, #12]
 8016c04:	60b9      	str	r1, [r7, #8]
 8016c06:	607a      	str	r2, [r7, #4]
 8016c08:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8016c0a:	f107 0314 	add.w	r3, r7, #20
 8016c0e:	2200      	movs	r2, #0
 8016c10:	601a      	str	r2, [r3, #0]
 8016c12:	605a      	str	r2, [r3, #4]
 8016c14:	609a      	str	r2, [r3, #8]
 8016c16:	60da      	str	r2, [r3, #12]
 8016c18:	611a      	str	r2, [r3, #16]
 8016c1a:	615a      	str	r2, [r3, #20]
 8016c1c:	619a      	str	r2, [r3, #24]
 8016c1e:	68fb      	ldr	r3, [r7, #12]
 8016c20:	617b      	str	r3, [r7, #20]
 8016c22:	68bb      	ldr	r3, [r7, #8]
 8016c24:	61bb      	str	r3, [r7, #24]
 8016c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016c28:	b21b      	sxth	r3, r3
 8016c2a:	83bb      	strh	r3, [r7, #28]
 8016c2c:	683b      	ldr	r3, [r7, #0]
 8016c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 8016c30:	f107 0314 	add.w	r3, r7, #20
 8016c34:	6879      	ldr	r1, [r7, #4]
 8016c36:	4618      	mov	r0, r3
 8016c38:	f7f0 f8a8 	bl	8006d8c <osThreadCreate>
 8016c3c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8016c3e:	4618      	mov	r0, r3
 8016c40:	3730      	adds	r7, #48	@ 0x30
 8016c42:	46bd      	mov	sp, r7
 8016c44:	bd80      	pop	{r7, pc}
	...

08016c48 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016c48:	b580      	push	{r7, lr}
 8016c4a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8016c4c:	4b04      	ldr	r3, [pc, #16]	@ (8016c60 <sys_arch_protect+0x18>)
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	f04f 31ff 	mov.w	r1, #4294967295
 8016c54:	4618      	mov	r0, r3
 8016c56:	f7f0 f911 	bl	8006e7c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8016c5a:	2301      	movs	r3, #1
}
 8016c5c:	4618      	mov	r0, r3
 8016c5e:	bd80      	pop	{r7, pc}
 8016c60:	2000cc6c 	.word	0x2000cc6c

08016c64 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016c64:	b580      	push	{r7, lr}
 8016c66:	b082      	sub	sp, #8
 8016c68:	af00      	add	r7, sp, #0
 8016c6a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016c6c:	4b04      	ldr	r3, [pc, #16]	@ (8016c80 <sys_arch_unprotect+0x1c>)
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	4618      	mov	r0, r3
 8016c72:	f7f0 f951 	bl	8006f18 <osMutexRelease>
}
 8016c76:	bf00      	nop
 8016c78:	3708      	adds	r7, #8
 8016c7a:	46bd      	mov	sp, r7
 8016c7c:	bd80      	pop	{r7, pc}
 8016c7e:	bf00      	nop
 8016c80:	2000cc6c 	.word	0x2000cc6c

08016c84 <rand>:
 8016c84:	4b16      	ldr	r3, [pc, #88]	@ (8016ce0 <rand+0x5c>)
 8016c86:	b510      	push	{r4, lr}
 8016c88:	681c      	ldr	r4, [r3, #0]
 8016c8a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016c8c:	b9b3      	cbnz	r3, 8016cbc <rand+0x38>
 8016c8e:	2018      	movs	r0, #24
 8016c90:	f000 fbcc 	bl	801742c <malloc>
 8016c94:	4602      	mov	r2, r0
 8016c96:	6320      	str	r0, [r4, #48]	@ 0x30
 8016c98:	b920      	cbnz	r0, 8016ca4 <rand+0x20>
 8016c9a:	4b12      	ldr	r3, [pc, #72]	@ (8016ce4 <rand+0x60>)
 8016c9c:	4812      	ldr	r0, [pc, #72]	@ (8016ce8 <rand+0x64>)
 8016c9e:	2152      	movs	r1, #82	@ 0x52
 8016ca0:	f000 fb5c 	bl	801735c <__assert_func>
 8016ca4:	4911      	ldr	r1, [pc, #68]	@ (8016cec <rand+0x68>)
 8016ca6:	4b12      	ldr	r3, [pc, #72]	@ (8016cf0 <rand+0x6c>)
 8016ca8:	e9c0 1300 	strd	r1, r3, [r0]
 8016cac:	4b11      	ldr	r3, [pc, #68]	@ (8016cf4 <rand+0x70>)
 8016cae:	6083      	str	r3, [r0, #8]
 8016cb0:	230b      	movs	r3, #11
 8016cb2:	8183      	strh	r3, [r0, #12]
 8016cb4:	2100      	movs	r1, #0
 8016cb6:	2001      	movs	r0, #1
 8016cb8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016cbc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016cbe:	480e      	ldr	r0, [pc, #56]	@ (8016cf8 <rand+0x74>)
 8016cc0:	690b      	ldr	r3, [r1, #16]
 8016cc2:	694c      	ldr	r4, [r1, #20]
 8016cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8016cfc <rand+0x78>)
 8016cc6:	4358      	muls	r0, r3
 8016cc8:	fb02 0004 	mla	r0, r2, r4, r0
 8016ccc:	fba3 3202 	umull	r3, r2, r3, r2
 8016cd0:	3301      	adds	r3, #1
 8016cd2:	eb40 0002 	adc.w	r0, r0, r2
 8016cd6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016cda:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8016cde:	bd10      	pop	{r4, pc}
 8016ce0:	20000044 	.word	0x20000044
 8016ce4:	0801b6cc 	.word	0x0801b6cc
 8016ce8:	0801b6e3 	.word	0x0801b6e3
 8016cec:	abcd330e 	.word	0xabcd330e
 8016cf0:	e66d1234 	.word	0xe66d1234
 8016cf4:	0005deec 	.word	0x0005deec
 8016cf8:	5851f42d 	.word	0x5851f42d
 8016cfc:	4c957f2d 	.word	0x4c957f2d

08016d00 <std>:
 8016d00:	2300      	movs	r3, #0
 8016d02:	b510      	push	{r4, lr}
 8016d04:	4604      	mov	r4, r0
 8016d06:	e9c0 3300 	strd	r3, r3, [r0]
 8016d0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016d0e:	6083      	str	r3, [r0, #8]
 8016d10:	8181      	strh	r1, [r0, #12]
 8016d12:	6643      	str	r3, [r0, #100]	@ 0x64
 8016d14:	81c2      	strh	r2, [r0, #14]
 8016d16:	6183      	str	r3, [r0, #24]
 8016d18:	4619      	mov	r1, r3
 8016d1a:	2208      	movs	r2, #8
 8016d1c:	305c      	adds	r0, #92	@ 0x5c
 8016d1e:	f000 fa43 	bl	80171a8 <memset>
 8016d22:	4b0d      	ldr	r3, [pc, #52]	@ (8016d58 <std+0x58>)
 8016d24:	6263      	str	r3, [r4, #36]	@ 0x24
 8016d26:	4b0d      	ldr	r3, [pc, #52]	@ (8016d5c <std+0x5c>)
 8016d28:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8016d60 <std+0x60>)
 8016d2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8016d64 <std+0x64>)
 8016d30:	6323      	str	r3, [r4, #48]	@ 0x30
 8016d32:	4b0d      	ldr	r3, [pc, #52]	@ (8016d68 <std+0x68>)
 8016d34:	6224      	str	r4, [r4, #32]
 8016d36:	429c      	cmp	r4, r3
 8016d38:	d006      	beq.n	8016d48 <std+0x48>
 8016d3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016d3e:	4294      	cmp	r4, r2
 8016d40:	d002      	beq.n	8016d48 <std+0x48>
 8016d42:	33d0      	adds	r3, #208	@ 0xd0
 8016d44:	429c      	cmp	r4, r3
 8016d46:	d105      	bne.n	8016d54 <std+0x54>
 8016d48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d50:	f000 baf2 	b.w	8017338 <__retarget_lock_init_recursive>
 8016d54:	bd10      	pop	{r4, pc}
 8016d56:	bf00      	nop
 8016d58:	08016fa5 	.word	0x08016fa5
 8016d5c:	08016fc7 	.word	0x08016fc7
 8016d60:	08016fff 	.word	0x08016fff
 8016d64:	08017023 	.word	0x08017023
 8016d68:	2000cc70 	.word	0x2000cc70

08016d6c <stdio_exit_handler>:
 8016d6c:	4a02      	ldr	r2, [pc, #8]	@ (8016d78 <stdio_exit_handler+0xc>)
 8016d6e:	4903      	ldr	r1, [pc, #12]	@ (8016d7c <stdio_exit_handler+0x10>)
 8016d70:	4803      	ldr	r0, [pc, #12]	@ (8016d80 <stdio_exit_handler+0x14>)
 8016d72:	f000 b869 	b.w	8016e48 <_fwalk_sglue>
 8016d76:	bf00      	nop
 8016d78:	20000038 	.word	0x20000038
 8016d7c:	08017ef1 	.word	0x08017ef1
 8016d80:	20000048 	.word	0x20000048

08016d84 <cleanup_stdio>:
 8016d84:	6841      	ldr	r1, [r0, #4]
 8016d86:	4b0c      	ldr	r3, [pc, #48]	@ (8016db8 <cleanup_stdio+0x34>)
 8016d88:	4299      	cmp	r1, r3
 8016d8a:	b510      	push	{r4, lr}
 8016d8c:	4604      	mov	r4, r0
 8016d8e:	d001      	beq.n	8016d94 <cleanup_stdio+0x10>
 8016d90:	f001 f8ae 	bl	8017ef0 <_fflush_r>
 8016d94:	68a1      	ldr	r1, [r4, #8]
 8016d96:	4b09      	ldr	r3, [pc, #36]	@ (8016dbc <cleanup_stdio+0x38>)
 8016d98:	4299      	cmp	r1, r3
 8016d9a:	d002      	beq.n	8016da2 <cleanup_stdio+0x1e>
 8016d9c:	4620      	mov	r0, r4
 8016d9e:	f001 f8a7 	bl	8017ef0 <_fflush_r>
 8016da2:	68e1      	ldr	r1, [r4, #12]
 8016da4:	4b06      	ldr	r3, [pc, #24]	@ (8016dc0 <cleanup_stdio+0x3c>)
 8016da6:	4299      	cmp	r1, r3
 8016da8:	d004      	beq.n	8016db4 <cleanup_stdio+0x30>
 8016daa:	4620      	mov	r0, r4
 8016dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016db0:	f001 b89e 	b.w	8017ef0 <_fflush_r>
 8016db4:	bd10      	pop	{r4, pc}
 8016db6:	bf00      	nop
 8016db8:	2000cc70 	.word	0x2000cc70
 8016dbc:	2000ccd8 	.word	0x2000ccd8
 8016dc0:	2000cd40 	.word	0x2000cd40

08016dc4 <global_stdio_init.part.0>:
 8016dc4:	b510      	push	{r4, lr}
 8016dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8016df4 <global_stdio_init.part.0+0x30>)
 8016dc8:	4c0b      	ldr	r4, [pc, #44]	@ (8016df8 <global_stdio_init.part.0+0x34>)
 8016dca:	4a0c      	ldr	r2, [pc, #48]	@ (8016dfc <global_stdio_init.part.0+0x38>)
 8016dcc:	601a      	str	r2, [r3, #0]
 8016dce:	4620      	mov	r0, r4
 8016dd0:	2200      	movs	r2, #0
 8016dd2:	2104      	movs	r1, #4
 8016dd4:	f7ff ff94 	bl	8016d00 <std>
 8016dd8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016ddc:	2201      	movs	r2, #1
 8016dde:	2109      	movs	r1, #9
 8016de0:	f7ff ff8e 	bl	8016d00 <std>
 8016de4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016de8:	2202      	movs	r2, #2
 8016dea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016dee:	2112      	movs	r1, #18
 8016df0:	f7ff bf86 	b.w	8016d00 <std>
 8016df4:	2000cda8 	.word	0x2000cda8
 8016df8:	2000cc70 	.word	0x2000cc70
 8016dfc:	08016d6d 	.word	0x08016d6d

08016e00 <__sfp_lock_acquire>:
 8016e00:	4801      	ldr	r0, [pc, #4]	@ (8016e08 <__sfp_lock_acquire+0x8>)
 8016e02:	f000 ba9a 	b.w	801733a <__retarget_lock_acquire_recursive>
 8016e06:	bf00      	nop
 8016e08:	2000cdb1 	.word	0x2000cdb1

08016e0c <__sfp_lock_release>:
 8016e0c:	4801      	ldr	r0, [pc, #4]	@ (8016e14 <__sfp_lock_release+0x8>)
 8016e0e:	f000 ba95 	b.w	801733c <__retarget_lock_release_recursive>
 8016e12:	bf00      	nop
 8016e14:	2000cdb1 	.word	0x2000cdb1

08016e18 <__sinit>:
 8016e18:	b510      	push	{r4, lr}
 8016e1a:	4604      	mov	r4, r0
 8016e1c:	f7ff fff0 	bl	8016e00 <__sfp_lock_acquire>
 8016e20:	6a23      	ldr	r3, [r4, #32]
 8016e22:	b11b      	cbz	r3, 8016e2c <__sinit+0x14>
 8016e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e28:	f7ff bff0 	b.w	8016e0c <__sfp_lock_release>
 8016e2c:	4b04      	ldr	r3, [pc, #16]	@ (8016e40 <__sinit+0x28>)
 8016e2e:	6223      	str	r3, [r4, #32]
 8016e30:	4b04      	ldr	r3, [pc, #16]	@ (8016e44 <__sinit+0x2c>)
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d1f5      	bne.n	8016e24 <__sinit+0xc>
 8016e38:	f7ff ffc4 	bl	8016dc4 <global_stdio_init.part.0>
 8016e3c:	e7f2      	b.n	8016e24 <__sinit+0xc>
 8016e3e:	bf00      	nop
 8016e40:	08016d85 	.word	0x08016d85
 8016e44:	2000cda8 	.word	0x2000cda8

08016e48 <_fwalk_sglue>:
 8016e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e4c:	4607      	mov	r7, r0
 8016e4e:	4688      	mov	r8, r1
 8016e50:	4614      	mov	r4, r2
 8016e52:	2600      	movs	r6, #0
 8016e54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016e58:	f1b9 0901 	subs.w	r9, r9, #1
 8016e5c:	d505      	bpl.n	8016e6a <_fwalk_sglue+0x22>
 8016e5e:	6824      	ldr	r4, [r4, #0]
 8016e60:	2c00      	cmp	r4, #0
 8016e62:	d1f7      	bne.n	8016e54 <_fwalk_sglue+0xc>
 8016e64:	4630      	mov	r0, r6
 8016e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016e6a:	89ab      	ldrh	r3, [r5, #12]
 8016e6c:	2b01      	cmp	r3, #1
 8016e6e:	d907      	bls.n	8016e80 <_fwalk_sglue+0x38>
 8016e70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016e74:	3301      	adds	r3, #1
 8016e76:	d003      	beq.n	8016e80 <_fwalk_sglue+0x38>
 8016e78:	4629      	mov	r1, r5
 8016e7a:	4638      	mov	r0, r7
 8016e7c:	47c0      	blx	r8
 8016e7e:	4306      	orrs	r6, r0
 8016e80:	3568      	adds	r5, #104	@ 0x68
 8016e82:	e7e9      	b.n	8016e58 <_fwalk_sglue+0x10>

08016e84 <iprintf>:
 8016e84:	b40f      	push	{r0, r1, r2, r3}
 8016e86:	b507      	push	{r0, r1, r2, lr}
 8016e88:	4906      	ldr	r1, [pc, #24]	@ (8016ea4 <iprintf+0x20>)
 8016e8a:	ab04      	add	r3, sp, #16
 8016e8c:	6808      	ldr	r0, [r1, #0]
 8016e8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e92:	6881      	ldr	r1, [r0, #8]
 8016e94:	9301      	str	r3, [sp, #4]
 8016e96:	f000 fd01 	bl	801789c <_vfiprintf_r>
 8016e9a:	b003      	add	sp, #12
 8016e9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016ea0:	b004      	add	sp, #16
 8016ea2:	4770      	bx	lr
 8016ea4:	20000044 	.word	0x20000044

08016ea8 <_puts_r>:
 8016ea8:	6a03      	ldr	r3, [r0, #32]
 8016eaa:	b570      	push	{r4, r5, r6, lr}
 8016eac:	6884      	ldr	r4, [r0, #8]
 8016eae:	4605      	mov	r5, r0
 8016eb0:	460e      	mov	r6, r1
 8016eb2:	b90b      	cbnz	r3, 8016eb8 <_puts_r+0x10>
 8016eb4:	f7ff ffb0 	bl	8016e18 <__sinit>
 8016eb8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016eba:	07db      	lsls	r3, r3, #31
 8016ebc:	d405      	bmi.n	8016eca <_puts_r+0x22>
 8016ebe:	89a3      	ldrh	r3, [r4, #12]
 8016ec0:	0598      	lsls	r0, r3, #22
 8016ec2:	d402      	bmi.n	8016eca <_puts_r+0x22>
 8016ec4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016ec6:	f000 fa38 	bl	801733a <__retarget_lock_acquire_recursive>
 8016eca:	89a3      	ldrh	r3, [r4, #12]
 8016ecc:	0719      	lsls	r1, r3, #28
 8016ece:	d502      	bpl.n	8016ed6 <_puts_r+0x2e>
 8016ed0:	6923      	ldr	r3, [r4, #16]
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d135      	bne.n	8016f42 <_puts_r+0x9a>
 8016ed6:	4621      	mov	r1, r4
 8016ed8:	4628      	mov	r0, r5
 8016eda:	f000 f8e5 	bl	80170a8 <__swsetup_r>
 8016ede:	b380      	cbz	r0, 8016f42 <_puts_r+0x9a>
 8016ee0:	f04f 35ff 	mov.w	r5, #4294967295
 8016ee4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016ee6:	07da      	lsls	r2, r3, #31
 8016ee8:	d405      	bmi.n	8016ef6 <_puts_r+0x4e>
 8016eea:	89a3      	ldrh	r3, [r4, #12]
 8016eec:	059b      	lsls	r3, r3, #22
 8016eee:	d402      	bmi.n	8016ef6 <_puts_r+0x4e>
 8016ef0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016ef2:	f000 fa23 	bl	801733c <__retarget_lock_release_recursive>
 8016ef6:	4628      	mov	r0, r5
 8016ef8:	bd70      	pop	{r4, r5, r6, pc}
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	da04      	bge.n	8016f08 <_puts_r+0x60>
 8016efe:	69a2      	ldr	r2, [r4, #24]
 8016f00:	429a      	cmp	r2, r3
 8016f02:	dc17      	bgt.n	8016f34 <_puts_r+0x8c>
 8016f04:	290a      	cmp	r1, #10
 8016f06:	d015      	beq.n	8016f34 <_puts_r+0x8c>
 8016f08:	6823      	ldr	r3, [r4, #0]
 8016f0a:	1c5a      	adds	r2, r3, #1
 8016f0c:	6022      	str	r2, [r4, #0]
 8016f0e:	7019      	strb	r1, [r3, #0]
 8016f10:	68a3      	ldr	r3, [r4, #8]
 8016f12:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016f16:	3b01      	subs	r3, #1
 8016f18:	60a3      	str	r3, [r4, #8]
 8016f1a:	2900      	cmp	r1, #0
 8016f1c:	d1ed      	bne.n	8016efa <_puts_r+0x52>
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	da11      	bge.n	8016f46 <_puts_r+0x9e>
 8016f22:	4622      	mov	r2, r4
 8016f24:	210a      	movs	r1, #10
 8016f26:	4628      	mov	r0, r5
 8016f28:	f000 f87f 	bl	801702a <__swbuf_r>
 8016f2c:	3001      	adds	r0, #1
 8016f2e:	d0d7      	beq.n	8016ee0 <_puts_r+0x38>
 8016f30:	250a      	movs	r5, #10
 8016f32:	e7d7      	b.n	8016ee4 <_puts_r+0x3c>
 8016f34:	4622      	mov	r2, r4
 8016f36:	4628      	mov	r0, r5
 8016f38:	f000 f877 	bl	801702a <__swbuf_r>
 8016f3c:	3001      	adds	r0, #1
 8016f3e:	d1e7      	bne.n	8016f10 <_puts_r+0x68>
 8016f40:	e7ce      	b.n	8016ee0 <_puts_r+0x38>
 8016f42:	3e01      	subs	r6, #1
 8016f44:	e7e4      	b.n	8016f10 <_puts_r+0x68>
 8016f46:	6823      	ldr	r3, [r4, #0]
 8016f48:	1c5a      	adds	r2, r3, #1
 8016f4a:	6022      	str	r2, [r4, #0]
 8016f4c:	220a      	movs	r2, #10
 8016f4e:	701a      	strb	r2, [r3, #0]
 8016f50:	e7ee      	b.n	8016f30 <_puts_r+0x88>
	...

08016f54 <puts>:
 8016f54:	4b02      	ldr	r3, [pc, #8]	@ (8016f60 <puts+0xc>)
 8016f56:	4601      	mov	r1, r0
 8016f58:	6818      	ldr	r0, [r3, #0]
 8016f5a:	f7ff bfa5 	b.w	8016ea8 <_puts_r>
 8016f5e:	bf00      	nop
 8016f60:	20000044 	.word	0x20000044

08016f64 <siprintf>:
 8016f64:	b40e      	push	{r1, r2, r3}
 8016f66:	b500      	push	{lr}
 8016f68:	b09c      	sub	sp, #112	@ 0x70
 8016f6a:	ab1d      	add	r3, sp, #116	@ 0x74
 8016f6c:	9002      	str	r0, [sp, #8]
 8016f6e:	9006      	str	r0, [sp, #24]
 8016f70:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016f74:	4809      	ldr	r0, [pc, #36]	@ (8016f9c <siprintf+0x38>)
 8016f76:	9107      	str	r1, [sp, #28]
 8016f78:	9104      	str	r1, [sp, #16]
 8016f7a:	4909      	ldr	r1, [pc, #36]	@ (8016fa0 <siprintf+0x3c>)
 8016f7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f80:	9105      	str	r1, [sp, #20]
 8016f82:	6800      	ldr	r0, [r0, #0]
 8016f84:	9301      	str	r3, [sp, #4]
 8016f86:	a902      	add	r1, sp, #8
 8016f88:	f000 fb62 	bl	8017650 <_svfiprintf_r>
 8016f8c:	9b02      	ldr	r3, [sp, #8]
 8016f8e:	2200      	movs	r2, #0
 8016f90:	701a      	strb	r2, [r3, #0]
 8016f92:	b01c      	add	sp, #112	@ 0x70
 8016f94:	f85d eb04 	ldr.w	lr, [sp], #4
 8016f98:	b003      	add	sp, #12
 8016f9a:	4770      	bx	lr
 8016f9c:	20000044 	.word	0x20000044
 8016fa0:	ffff0208 	.word	0xffff0208

08016fa4 <__sread>:
 8016fa4:	b510      	push	{r4, lr}
 8016fa6:	460c      	mov	r4, r1
 8016fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fac:	f000 f97c 	bl	80172a8 <_read_r>
 8016fb0:	2800      	cmp	r0, #0
 8016fb2:	bfab      	itete	ge
 8016fb4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016fb6:	89a3      	ldrhlt	r3, [r4, #12]
 8016fb8:	181b      	addge	r3, r3, r0
 8016fba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016fbe:	bfac      	ite	ge
 8016fc0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016fc2:	81a3      	strhlt	r3, [r4, #12]
 8016fc4:	bd10      	pop	{r4, pc}

08016fc6 <__swrite>:
 8016fc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fca:	461f      	mov	r7, r3
 8016fcc:	898b      	ldrh	r3, [r1, #12]
 8016fce:	05db      	lsls	r3, r3, #23
 8016fd0:	4605      	mov	r5, r0
 8016fd2:	460c      	mov	r4, r1
 8016fd4:	4616      	mov	r6, r2
 8016fd6:	d505      	bpl.n	8016fe4 <__swrite+0x1e>
 8016fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fdc:	2302      	movs	r3, #2
 8016fde:	2200      	movs	r2, #0
 8016fe0:	f000 f950 	bl	8017284 <_lseek_r>
 8016fe4:	89a3      	ldrh	r3, [r4, #12]
 8016fe6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016fea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016fee:	81a3      	strh	r3, [r4, #12]
 8016ff0:	4632      	mov	r2, r6
 8016ff2:	463b      	mov	r3, r7
 8016ff4:	4628      	mov	r0, r5
 8016ff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016ffa:	f000 b967 	b.w	80172cc <_write_r>

08016ffe <__sseek>:
 8016ffe:	b510      	push	{r4, lr}
 8017000:	460c      	mov	r4, r1
 8017002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017006:	f000 f93d 	bl	8017284 <_lseek_r>
 801700a:	1c43      	adds	r3, r0, #1
 801700c:	89a3      	ldrh	r3, [r4, #12]
 801700e:	bf15      	itete	ne
 8017010:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017012:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017016:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801701a:	81a3      	strheq	r3, [r4, #12]
 801701c:	bf18      	it	ne
 801701e:	81a3      	strhne	r3, [r4, #12]
 8017020:	bd10      	pop	{r4, pc}

08017022 <__sclose>:
 8017022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017026:	f000 b8c7 	b.w	80171b8 <_close_r>

0801702a <__swbuf_r>:
 801702a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801702c:	460e      	mov	r6, r1
 801702e:	4614      	mov	r4, r2
 8017030:	4605      	mov	r5, r0
 8017032:	b118      	cbz	r0, 801703c <__swbuf_r+0x12>
 8017034:	6a03      	ldr	r3, [r0, #32]
 8017036:	b90b      	cbnz	r3, 801703c <__swbuf_r+0x12>
 8017038:	f7ff feee 	bl	8016e18 <__sinit>
 801703c:	69a3      	ldr	r3, [r4, #24]
 801703e:	60a3      	str	r3, [r4, #8]
 8017040:	89a3      	ldrh	r3, [r4, #12]
 8017042:	071a      	lsls	r2, r3, #28
 8017044:	d501      	bpl.n	801704a <__swbuf_r+0x20>
 8017046:	6923      	ldr	r3, [r4, #16]
 8017048:	b943      	cbnz	r3, 801705c <__swbuf_r+0x32>
 801704a:	4621      	mov	r1, r4
 801704c:	4628      	mov	r0, r5
 801704e:	f000 f82b 	bl	80170a8 <__swsetup_r>
 8017052:	b118      	cbz	r0, 801705c <__swbuf_r+0x32>
 8017054:	f04f 37ff 	mov.w	r7, #4294967295
 8017058:	4638      	mov	r0, r7
 801705a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801705c:	6823      	ldr	r3, [r4, #0]
 801705e:	6922      	ldr	r2, [r4, #16]
 8017060:	1a98      	subs	r0, r3, r2
 8017062:	6963      	ldr	r3, [r4, #20]
 8017064:	b2f6      	uxtb	r6, r6
 8017066:	4283      	cmp	r3, r0
 8017068:	4637      	mov	r7, r6
 801706a:	dc05      	bgt.n	8017078 <__swbuf_r+0x4e>
 801706c:	4621      	mov	r1, r4
 801706e:	4628      	mov	r0, r5
 8017070:	f000 ff3e 	bl	8017ef0 <_fflush_r>
 8017074:	2800      	cmp	r0, #0
 8017076:	d1ed      	bne.n	8017054 <__swbuf_r+0x2a>
 8017078:	68a3      	ldr	r3, [r4, #8]
 801707a:	3b01      	subs	r3, #1
 801707c:	60a3      	str	r3, [r4, #8]
 801707e:	6823      	ldr	r3, [r4, #0]
 8017080:	1c5a      	adds	r2, r3, #1
 8017082:	6022      	str	r2, [r4, #0]
 8017084:	701e      	strb	r6, [r3, #0]
 8017086:	6962      	ldr	r2, [r4, #20]
 8017088:	1c43      	adds	r3, r0, #1
 801708a:	429a      	cmp	r2, r3
 801708c:	d004      	beq.n	8017098 <__swbuf_r+0x6e>
 801708e:	89a3      	ldrh	r3, [r4, #12]
 8017090:	07db      	lsls	r3, r3, #31
 8017092:	d5e1      	bpl.n	8017058 <__swbuf_r+0x2e>
 8017094:	2e0a      	cmp	r6, #10
 8017096:	d1df      	bne.n	8017058 <__swbuf_r+0x2e>
 8017098:	4621      	mov	r1, r4
 801709a:	4628      	mov	r0, r5
 801709c:	f000 ff28 	bl	8017ef0 <_fflush_r>
 80170a0:	2800      	cmp	r0, #0
 80170a2:	d0d9      	beq.n	8017058 <__swbuf_r+0x2e>
 80170a4:	e7d6      	b.n	8017054 <__swbuf_r+0x2a>
	...

080170a8 <__swsetup_r>:
 80170a8:	b538      	push	{r3, r4, r5, lr}
 80170aa:	4b29      	ldr	r3, [pc, #164]	@ (8017150 <__swsetup_r+0xa8>)
 80170ac:	4605      	mov	r5, r0
 80170ae:	6818      	ldr	r0, [r3, #0]
 80170b0:	460c      	mov	r4, r1
 80170b2:	b118      	cbz	r0, 80170bc <__swsetup_r+0x14>
 80170b4:	6a03      	ldr	r3, [r0, #32]
 80170b6:	b90b      	cbnz	r3, 80170bc <__swsetup_r+0x14>
 80170b8:	f7ff feae 	bl	8016e18 <__sinit>
 80170bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80170c0:	0719      	lsls	r1, r3, #28
 80170c2:	d422      	bmi.n	801710a <__swsetup_r+0x62>
 80170c4:	06da      	lsls	r2, r3, #27
 80170c6:	d407      	bmi.n	80170d8 <__swsetup_r+0x30>
 80170c8:	2209      	movs	r2, #9
 80170ca:	602a      	str	r2, [r5, #0]
 80170cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80170d0:	81a3      	strh	r3, [r4, #12]
 80170d2:	f04f 30ff 	mov.w	r0, #4294967295
 80170d6:	e033      	b.n	8017140 <__swsetup_r+0x98>
 80170d8:	0758      	lsls	r0, r3, #29
 80170da:	d512      	bpl.n	8017102 <__swsetup_r+0x5a>
 80170dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80170de:	b141      	cbz	r1, 80170f2 <__swsetup_r+0x4a>
 80170e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80170e4:	4299      	cmp	r1, r3
 80170e6:	d002      	beq.n	80170ee <__swsetup_r+0x46>
 80170e8:	4628      	mov	r0, r5
 80170ea:	f000 f955 	bl	8017398 <_free_r>
 80170ee:	2300      	movs	r3, #0
 80170f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80170f2:	89a3      	ldrh	r3, [r4, #12]
 80170f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80170f8:	81a3      	strh	r3, [r4, #12]
 80170fa:	2300      	movs	r3, #0
 80170fc:	6063      	str	r3, [r4, #4]
 80170fe:	6923      	ldr	r3, [r4, #16]
 8017100:	6023      	str	r3, [r4, #0]
 8017102:	89a3      	ldrh	r3, [r4, #12]
 8017104:	f043 0308 	orr.w	r3, r3, #8
 8017108:	81a3      	strh	r3, [r4, #12]
 801710a:	6923      	ldr	r3, [r4, #16]
 801710c:	b94b      	cbnz	r3, 8017122 <__swsetup_r+0x7a>
 801710e:	89a3      	ldrh	r3, [r4, #12]
 8017110:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017114:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017118:	d003      	beq.n	8017122 <__swsetup_r+0x7a>
 801711a:	4621      	mov	r1, r4
 801711c:	4628      	mov	r0, r5
 801711e:	f000 ff47 	bl	8017fb0 <__smakebuf_r>
 8017122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017126:	f013 0201 	ands.w	r2, r3, #1
 801712a:	d00a      	beq.n	8017142 <__swsetup_r+0x9a>
 801712c:	2200      	movs	r2, #0
 801712e:	60a2      	str	r2, [r4, #8]
 8017130:	6962      	ldr	r2, [r4, #20]
 8017132:	4252      	negs	r2, r2
 8017134:	61a2      	str	r2, [r4, #24]
 8017136:	6922      	ldr	r2, [r4, #16]
 8017138:	b942      	cbnz	r2, 801714c <__swsetup_r+0xa4>
 801713a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801713e:	d1c5      	bne.n	80170cc <__swsetup_r+0x24>
 8017140:	bd38      	pop	{r3, r4, r5, pc}
 8017142:	0799      	lsls	r1, r3, #30
 8017144:	bf58      	it	pl
 8017146:	6962      	ldrpl	r2, [r4, #20]
 8017148:	60a2      	str	r2, [r4, #8]
 801714a:	e7f4      	b.n	8017136 <__swsetup_r+0x8e>
 801714c:	2000      	movs	r0, #0
 801714e:	e7f7      	b.n	8017140 <__swsetup_r+0x98>
 8017150:	20000044 	.word	0x20000044

08017154 <memcmp>:
 8017154:	b510      	push	{r4, lr}
 8017156:	3901      	subs	r1, #1
 8017158:	4402      	add	r2, r0
 801715a:	4290      	cmp	r0, r2
 801715c:	d101      	bne.n	8017162 <memcmp+0xe>
 801715e:	2000      	movs	r0, #0
 8017160:	e005      	b.n	801716e <memcmp+0x1a>
 8017162:	7803      	ldrb	r3, [r0, #0]
 8017164:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017168:	42a3      	cmp	r3, r4
 801716a:	d001      	beq.n	8017170 <memcmp+0x1c>
 801716c:	1b18      	subs	r0, r3, r4
 801716e:	bd10      	pop	{r4, pc}
 8017170:	3001      	adds	r0, #1
 8017172:	e7f2      	b.n	801715a <memcmp+0x6>

08017174 <memmove>:
 8017174:	4288      	cmp	r0, r1
 8017176:	b510      	push	{r4, lr}
 8017178:	eb01 0402 	add.w	r4, r1, r2
 801717c:	d902      	bls.n	8017184 <memmove+0x10>
 801717e:	4284      	cmp	r4, r0
 8017180:	4623      	mov	r3, r4
 8017182:	d807      	bhi.n	8017194 <memmove+0x20>
 8017184:	1e43      	subs	r3, r0, #1
 8017186:	42a1      	cmp	r1, r4
 8017188:	d008      	beq.n	801719c <memmove+0x28>
 801718a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801718e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017192:	e7f8      	b.n	8017186 <memmove+0x12>
 8017194:	4402      	add	r2, r0
 8017196:	4601      	mov	r1, r0
 8017198:	428a      	cmp	r2, r1
 801719a:	d100      	bne.n	801719e <memmove+0x2a>
 801719c:	bd10      	pop	{r4, pc}
 801719e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80171a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80171a6:	e7f7      	b.n	8017198 <memmove+0x24>

080171a8 <memset>:
 80171a8:	4402      	add	r2, r0
 80171aa:	4603      	mov	r3, r0
 80171ac:	4293      	cmp	r3, r2
 80171ae:	d100      	bne.n	80171b2 <memset+0xa>
 80171b0:	4770      	bx	lr
 80171b2:	f803 1b01 	strb.w	r1, [r3], #1
 80171b6:	e7f9      	b.n	80171ac <memset+0x4>

080171b8 <_close_r>:
 80171b8:	b538      	push	{r3, r4, r5, lr}
 80171ba:	4d06      	ldr	r5, [pc, #24]	@ (80171d4 <_close_r+0x1c>)
 80171bc:	2300      	movs	r3, #0
 80171be:	4604      	mov	r4, r0
 80171c0:	4608      	mov	r0, r1
 80171c2:	602b      	str	r3, [r5, #0]
 80171c4:	f7ea f914 	bl	80013f0 <_close>
 80171c8:	1c43      	adds	r3, r0, #1
 80171ca:	d102      	bne.n	80171d2 <_close_r+0x1a>
 80171cc:	682b      	ldr	r3, [r5, #0]
 80171ce:	b103      	cbz	r3, 80171d2 <_close_r+0x1a>
 80171d0:	6023      	str	r3, [r4, #0]
 80171d2:	bd38      	pop	{r3, r4, r5, pc}
 80171d4:	2000cdac 	.word	0x2000cdac

080171d8 <_reclaim_reent>:
 80171d8:	4b29      	ldr	r3, [pc, #164]	@ (8017280 <_reclaim_reent+0xa8>)
 80171da:	681b      	ldr	r3, [r3, #0]
 80171dc:	4283      	cmp	r3, r0
 80171de:	b570      	push	{r4, r5, r6, lr}
 80171e0:	4604      	mov	r4, r0
 80171e2:	d04b      	beq.n	801727c <_reclaim_reent+0xa4>
 80171e4:	69c3      	ldr	r3, [r0, #28]
 80171e6:	b1ab      	cbz	r3, 8017214 <_reclaim_reent+0x3c>
 80171e8:	68db      	ldr	r3, [r3, #12]
 80171ea:	b16b      	cbz	r3, 8017208 <_reclaim_reent+0x30>
 80171ec:	2500      	movs	r5, #0
 80171ee:	69e3      	ldr	r3, [r4, #28]
 80171f0:	68db      	ldr	r3, [r3, #12]
 80171f2:	5959      	ldr	r1, [r3, r5]
 80171f4:	2900      	cmp	r1, #0
 80171f6:	d13b      	bne.n	8017270 <_reclaim_reent+0x98>
 80171f8:	3504      	adds	r5, #4
 80171fa:	2d80      	cmp	r5, #128	@ 0x80
 80171fc:	d1f7      	bne.n	80171ee <_reclaim_reent+0x16>
 80171fe:	69e3      	ldr	r3, [r4, #28]
 8017200:	4620      	mov	r0, r4
 8017202:	68d9      	ldr	r1, [r3, #12]
 8017204:	f000 f8c8 	bl	8017398 <_free_r>
 8017208:	69e3      	ldr	r3, [r4, #28]
 801720a:	6819      	ldr	r1, [r3, #0]
 801720c:	b111      	cbz	r1, 8017214 <_reclaim_reent+0x3c>
 801720e:	4620      	mov	r0, r4
 8017210:	f000 f8c2 	bl	8017398 <_free_r>
 8017214:	6961      	ldr	r1, [r4, #20]
 8017216:	b111      	cbz	r1, 801721e <_reclaim_reent+0x46>
 8017218:	4620      	mov	r0, r4
 801721a:	f000 f8bd 	bl	8017398 <_free_r>
 801721e:	69e1      	ldr	r1, [r4, #28]
 8017220:	b111      	cbz	r1, 8017228 <_reclaim_reent+0x50>
 8017222:	4620      	mov	r0, r4
 8017224:	f000 f8b8 	bl	8017398 <_free_r>
 8017228:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801722a:	b111      	cbz	r1, 8017232 <_reclaim_reent+0x5a>
 801722c:	4620      	mov	r0, r4
 801722e:	f000 f8b3 	bl	8017398 <_free_r>
 8017232:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017234:	b111      	cbz	r1, 801723c <_reclaim_reent+0x64>
 8017236:	4620      	mov	r0, r4
 8017238:	f000 f8ae 	bl	8017398 <_free_r>
 801723c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801723e:	b111      	cbz	r1, 8017246 <_reclaim_reent+0x6e>
 8017240:	4620      	mov	r0, r4
 8017242:	f000 f8a9 	bl	8017398 <_free_r>
 8017246:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8017248:	b111      	cbz	r1, 8017250 <_reclaim_reent+0x78>
 801724a:	4620      	mov	r0, r4
 801724c:	f000 f8a4 	bl	8017398 <_free_r>
 8017250:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8017252:	b111      	cbz	r1, 801725a <_reclaim_reent+0x82>
 8017254:	4620      	mov	r0, r4
 8017256:	f000 f89f 	bl	8017398 <_free_r>
 801725a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801725c:	b111      	cbz	r1, 8017264 <_reclaim_reent+0x8c>
 801725e:	4620      	mov	r0, r4
 8017260:	f000 f89a 	bl	8017398 <_free_r>
 8017264:	6a23      	ldr	r3, [r4, #32]
 8017266:	b14b      	cbz	r3, 801727c <_reclaim_reent+0xa4>
 8017268:	4620      	mov	r0, r4
 801726a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801726e:	4718      	bx	r3
 8017270:	680e      	ldr	r6, [r1, #0]
 8017272:	4620      	mov	r0, r4
 8017274:	f000 f890 	bl	8017398 <_free_r>
 8017278:	4631      	mov	r1, r6
 801727a:	e7bb      	b.n	80171f4 <_reclaim_reent+0x1c>
 801727c:	bd70      	pop	{r4, r5, r6, pc}
 801727e:	bf00      	nop
 8017280:	20000044 	.word	0x20000044

08017284 <_lseek_r>:
 8017284:	b538      	push	{r3, r4, r5, lr}
 8017286:	4d07      	ldr	r5, [pc, #28]	@ (80172a4 <_lseek_r+0x20>)
 8017288:	4604      	mov	r4, r0
 801728a:	4608      	mov	r0, r1
 801728c:	4611      	mov	r1, r2
 801728e:	2200      	movs	r2, #0
 8017290:	602a      	str	r2, [r5, #0]
 8017292:	461a      	mov	r2, r3
 8017294:	f7ea f8d3 	bl	800143e <_lseek>
 8017298:	1c43      	adds	r3, r0, #1
 801729a:	d102      	bne.n	80172a2 <_lseek_r+0x1e>
 801729c:	682b      	ldr	r3, [r5, #0]
 801729e:	b103      	cbz	r3, 80172a2 <_lseek_r+0x1e>
 80172a0:	6023      	str	r3, [r4, #0]
 80172a2:	bd38      	pop	{r3, r4, r5, pc}
 80172a4:	2000cdac 	.word	0x2000cdac

080172a8 <_read_r>:
 80172a8:	b538      	push	{r3, r4, r5, lr}
 80172aa:	4d07      	ldr	r5, [pc, #28]	@ (80172c8 <_read_r+0x20>)
 80172ac:	4604      	mov	r4, r0
 80172ae:	4608      	mov	r0, r1
 80172b0:	4611      	mov	r1, r2
 80172b2:	2200      	movs	r2, #0
 80172b4:	602a      	str	r2, [r5, #0]
 80172b6:	461a      	mov	r2, r3
 80172b8:	f7ea f87d 	bl	80013b6 <_read>
 80172bc:	1c43      	adds	r3, r0, #1
 80172be:	d102      	bne.n	80172c6 <_read_r+0x1e>
 80172c0:	682b      	ldr	r3, [r5, #0]
 80172c2:	b103      	cbz	r3, 80172c6 <_read_r+0x1e>
 80172c4:	6023      	str	r3, [r4, #0]
 80172c6:	bd38      	pop	{r3, r4, r5, pc}
 80172c8:	2000cdac 	.word	0x2000cdac

080172cc <_write_r>:
 80172cc:	b538      	push	{r3, r4, r5, lr}
 80172ce:	4d07      	ldr	r5, [pc, #28]	@ (80172ec <_write_r+0x20>)
 80172d0:	4604      	mov	r4, r0
 80172d2:	4608      	mov	r0, r1
 80172d4:	4611      	mov	r1, r2
 80172d6:	2200      	movs	r2, #0
 80172d8:	602a      	str	r2, [r5, #0]
 80172da:	461a      	mov	r2, r3
 80172dc:	f7e9 f972 	bl	80005c4 <_write>
 80172e0:	1c43      	adds	r3, r0, #1
 80172e2:	d102      	bne.n	80172ea <_write_r+0x1e>
 80172e4:	682b      	ldr	r3, [r5, #0]
 80172e6:	b103      	cbz	r3, 80172ea <_write_r+0x1e>
 80172e8:	6023      	str	r3, [r4, #0]
 80172ea:	bd38      	pop	{r3, r4, r5, pc}
 80172ec:	2000cdac 	.word	0x2000cdac

080172f0 <__libc_init_array>:
 80172f0:	b570      	push	{r4, r5, r6, lr}
 80172f2:	4d0d      	ldr	r5, [pc, #52]	@ (8017328 <__libc_init_array+0x38>)
 80172f4:	4c0d      	ldr	r4, [pc, #52]	@ (801732c <__libc_init_array+0x3c>)
 80172f6:	1b64      	subs	r4, r4, r5
 80172f8:	10a4      	asrs	r4, r4, #2
 80172fa:	2600      	movs	r6, #0
 80172fc:	42a6      	cmp	r6, r4
 80172fe:	d109      	bne.n	8017314 <__libc_init_array+0x24>
 8017300:	4d0b      	ldr	r5, [pc, #44]	@ (8017330 <__libc_init_array+0x40>)
 8017302:	4c0c      	ldr	r4, [pc, #48]	@ (8017334 <__libc_init_array+0x44>)
 8017304:	f000 ff44 	bl	8018190 <_init>
 8017308:	1b64      	subs	r4, r4, r5
 801730a:	10a4      	asrs	r4, r4, #2
 801730c:	2600      	movs	r6, #0
 801730e:	42a6      	cmp	r6, r4
 8017310:	d105      	bne.n	801731e <__libc_init_array+0x2e>
 8017312:	bd70      	pop	{r4, r5, r6, pc}
 8017314:	f855 3b04 	ldr.w	r3, [r5], #4
 8017318:	4798      	blx	r3
 801731a:	3601      	adds	r6, #1
 801731c:	e7ee      	b.n	80172fc <__libc_init_array+0xc>
 801731e:	f855 3b04 	ldr.w	r3, [r5], #4
 8017322:	4798      	blx	r3
 8017324:	3601      	adds	r6, #1
 8017326:	e7f2      	b.n	801730e <__libc_init_array+0x1e>
 8017328:	0801b7b4 	.word	0x0801b7b4
 801732c:	0801b7b4 	.word	0x0801b7b4
 8017330:	0801b7b4 	.word	0x0801b7b4
 8017334:	0801b7b8 	.word	0x0801b7b8

08017338 <__retarget_lock_init_recursive>:
 8017338:	4770      	bx	lr

0801733a <__retarget_lock_acquire_recursive>:
 801733a:	4770      	bx	lr

0801733c <__retarget_lock_release_recursive>:
 801733c:	4770      	bx	lr

0801733e <memcpy>:
 801733e:	440a      	add	r2, r1
 8017340:	4291      	cmp	r1, r2
 8017342:	f100 33ff 	add.w	r3, r0, #4294967295
 8017346:	d100      	bne.n	801734a <memcpy+0xc>
 8017348:	4770      	bx	lr
 801734a:	b510      	push	{r4, lr}
 801734c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017350:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017354:	4291      	cmp	r1, r2
 8017356:	d1f9      	bne.n	801734c <memcpy+0xe>
 8017358:	bd10      	pop	{r4, pc}
	...

0801735c <__assert_func>:
 801735c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801735e:	4614      	mov	r4, r2
 8017360:	461a      	mov	r2, r3
 8017362:	4b09      	ldr	r3, [pc, #36]	@ (8017388 <__assert_func+0x2c>)
 8017364:	681b      	ldr	r3, [r3, #0]
 8017366:	4605      	mov	r5, r0
 8017368:	68d8      	ldr	r0, [r3, #12]
 801736a:	b954      	cbnz	r4, 8017382 <__assert_func+0x26>
 801736c:	4b07      	ldr	r3, [pc, #28]	@ (801738c <__assert_func+0x30>)
 801736e:	461c      	mov	r4, r3
 8017370:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017374:	9100      	str	r1, [sp, #0]
 8017376:	462b      	mov	r3, r5
 8017378:	4905      	ldr	r1, [pc, #20]	@ (8017390 <__assert_func+0x34>)
 801737a:	f000 fde1 	bl	8017f40 <fiprintf>
 801737e:	f000 fe85 	bl	801808c <abort>
 8017382:	4b04      	ldr	r3, [pc, #16]	@ (8017394 <__assert_func+0x38>)
 8017384:	e7f4      	b.n	8017370 <__assert_func+0x14>
 8017386:	bf00      	nop
 8017388:	20000044 	.word	0x20000044
 801738c:	0801b776 	.word	0x0801b776
 8017390:	0801b748 	.word	0x0801b748
 8017394:	0801b73b 	.word	0x0801b73b

08017398 <_free_r>:
 8017398:	b538      	push	{r3, r4, r5, lr}
 801739a:	4605      	mov	r5, r0
 801739c:	2900      	cmp	r1, #0
 801739e:	d041      	beq.n	8017424 <_free_r+0x8c>
 80173a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80173a4:	1f0c      	subs	r4, r1, #4
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	bfb8      	it	lt
 80173aa:	18e4      	addlt	r4, r4, r3
 80173ac:	f000 f8e8 	bl	8017580 <__malloc_lock>
 80173b0:	4a1d      	ldr	r2, [pc, #116]	@ (8017428 <_free_r+0x90>)
 80173b2:	6813      	ldr	r3, [r2, #0]
 80173b4:	b933      	cbnz	r3, 80173c4 <_free_r+0x2c>
 80173b6:	6063      	str	r3, [r4, #4]
 80173b8:	6014      	str	r4, [r2, #0]
 80173ba:	4628      	mov	r0, r5
 80173bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80173c0:	f000 b8e4 	b.w	801758c <__malloc_unlock>
 80173c4:	42a3      	cmp	r3, r4
 80173c6:	d908      	bls.n	80173da <_free_r+0x42>
 80173c8:	6820      	ldr	r0, [r4, #0]
 80173ca:	1821      	adds	r1, r4, r0
 80173cc:	428b      	cmp	r3, r1
 80173ce:	bf01      	itttt	eq
 80173d0:	6819      	ldreq	r1, [r3, #0]
 80173d2:	685b      	ldreq	r3, [r3, #4]
 80173d4:	1809      	addeq	r1, r1, r0
 80173d6:	6021      	streq	r1, [r4, #0]
 80173d8:	e7ed      	b.n	80173b6 <_free_r+0x1e>
 80173da:	461a      	mov	r2, r3
 80173dc:	685b      	ldr	r3, [r3, #4]
 80173de:	b10b      	cbz	r3, 80173e4 <_free_r+0x4c>
 80173e0:	42a3      	cmp	r3, r4
 80173e2:	d9fa      	bls.n	80173da <_free_r+0x42>
 80173e4:	6811      	ldr	r1, [r2, #0]
 80173e6:	1850      	adds	r0, r2, r1
 80173e8:	42a0      	cmp	r0, r4
 80173ea:	d10b      	bne.n	8017404 <_free_r+0x6c>
 80173ec:	6820      	ldr	r0, [r4, #0]
 80173ee:	4401      	add	r1, r0
 80173f0:	1850      	adds	r0, r2, r1
 80173f2:	4283      	cmp	r3, r0
 80173f4:	6011      	str	r1, [r2, #0]
 80173f6:	d1e0      	bne.n	80173ba <_free_r+0x22>
 80173f8:	6818      	ldr	r0, [r3, #0]
 80173fa:	685b      	ldr	r3, [r3, #4]
 80173fc:	6053      	str	r3, [r2, #4]
 80173fe:	4408      	add	r0, r1
 8017400:	6010      	str	r0, [r2, #0]
 8017402:	e7da      	b.n	80173ba <_free_r+0x22>
 8017404:	d902      	bls.n	801740c <_free_r+0x74>
 8017406:	230c      	movs	r3, #12
 8017408:	602b      	str	r3, [r5, #0]
 801740a:	e7d6      	b.n	80173ba <_free_r+0x22>
 801740c:	6820      	ldr	r0, [r4, #0]
 801740e:	1821      	adds	r1, r4, r0
 8017410:	428b      	cmp	r3, r1
 8017412:	bf04      	itt	eq
 8017414:	6819      	ldreq	r1, [r3, #0]
 8017416:	685b      	ldreq	r3, [r3, #4]
 8017418:	6063      	str	r3, [r4, #4]
 801741a:	bf04      	itt	eq
 801741c:	1809      	addeq	r1, r1, r0
 801741e:	6021      	streq	r1, [r4, #0]
 8017420:	6054      	str	r4, [r2, #4]
 8017422:	e7ca      	b.n	80173ba <_free_r+0x22>
 8017424:	bd38      	pop	{r3, r4, r5, pc}
 8017426:	bf00      	nop
 8017428:	2000cdb8 	.word	0x2000cdb8

0801742c <malloc>:
 801742c:	4b02      	ldr	r3, [pc, #8]	@ (8017438 <malloc+0xc>)
 801742e:	4601      	mov	r1, r0
 8017430:	6818      	ldr	r0, [r3, #0]
 8017432:	f000 b825 	b.w	8017480 <_malloc_r>
 8017436:	bf00      	nop
 8017438:	20000044 	.word	0x20000044

0801743c <sbrk_aligned>:
 801743c:	b570      	push	{r4, r5, r6, lr}
 801743e:	4e0f      	ldr	r6, [pc, #60]	@ (801747c <sbrk_aligned+0x40>)
 8017440:	460c      	mov	r4, r1
 8017442:	6831      	ldr	r1, [r6, #0]
 8017444:	4605      	mov	r5, r0
 8017446:	b911      	cbnz	r1, 801744e <sbrk_aligned+0x12>
 8017448:	f000 fe10 	bl	801806c <_sbrk_r>
 801744c:	6030      	str	r0, [r6, #0]
 801744e:	4621      	mov	r1, r4
 8017450:	4628      	mov	r0, r5
 8017452:	f000 fe0b 	bl	801806c <_sbrk_r>
 8017456:	1c43      	adds	r3, r0, #1
 8017458:	d103      	bne.n	8017462 <sbrk_aligned+0x26>
 801745a:	f04f 34ff 	mov.w	r4, #4294967295
 801745e:	4620      	mov	r0, r4
 8017460:	bd70      	pop	{r4, r5, r6, pc}
 8017462:	1cc4      	adds	r4, r0, #3
 8017464:	f024 0403 	bic.w	r4, r4, #3
 8017468:	42a0      	cmp	r0, r4
 801746a:	d0f8      	beq.n	801745e <sbrk_aligned+0x22>
 801746c:	1a21      	subs	r1, r4, r0
 801746e:	4628      	mov	r0, r5
 8017470:	f000 fdfc 	bl	801806c <_sbrk_r>
 8017474:	3001      	adds	r0, #1
 8017476:	d1f2      	bne.n	801745e <sbrk_aligned+0x22>
 8017478:	e7ef      	b.n	801745a <sbrk_aligned+0x1e>
 801747a:	bf00      	nop
 801747c:	2000cdb4 	.word	0x2000cdb4

08017480 <_malloc_r>:
 8017480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017484:	1ccd      	adds	r5, r1, #3
 8017486:	f025 0503 	bic.w	r5, r5, #3
 801748a:	3508      	adds	r5, #8
 801748c:	2d0c      	cmp	r5, #12
 801748e:	bf38      	it	cc
 8017490:	250c      	movcc	r5, #12
 8017492:	2d00      	cmp	r5, #0
 8017494:	4606      	mov	r6, r0
 8017496:	db01      	blt.n	801749c <_malloc_r+0x1c>
 8017498:	42a9      	cmp	r1, r5
 801749a:	d904      	bls.n	80174a6 <_malloc_r+0x26>
 801749c:	230c      	movs	r3, #12
 801749e:	6033      	str	r3, [r6, #0]
 80174a0:	2000      	movs	r0, #0
 80174a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80174a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801757c <_malloc_r+0xfc>
 80174aa:	f000 f869 	bl	8017580 <__malloc_lock>
 80174ae:	f8d8 3000 	ldr.w	r3, [r8]
 80174b2:	461c      	mov	r4, r3
 80174b4:	bb44      	cbnz	r4, 8017508 <_malloc_r+0x88>
 80174b6:	4629      	mov	r1, r5
 80174b8:	4630      	mov	r0, r6
 80174ba:	f7ff ffbf 	bl	801743c <sbrk_aligned>
 80174be:	1c43      	adds	r3, r0, #1
 80174c0:	4604      	mov	r4, r0
 80174c2:	d158      	bne.n	8017576 <_malloc_r+0xf6>
 80174c4:	f8d8 4000 	ldr.w	r4, [r8]
 80174c8:	4627      	mov	r7, r4
 80174ca:	2f00      	cmp	r7, #0
 80174cc:	d143      	bne.n	8017556 <_malloc_r+0xd6>
 80174ce:	2c00      	cmp	r4, #0
 80174d0:	d04b      	beq.n	801756a <_malloc_r+0xea>
 80174d2:	6823      	ldr	r3, [r4, #0]
 80174d4:	4639      	mov	r1, r7
 80174d6:	4630      	mov	r0, r6
 80174d8:	eb04 0903 	add.w	r9, r4, r3
 80174dc:	f000 fdc6 	bl	801806c <_sbrk_r>
 80174e0:	4581      	cmp	r9, r0
 80174e2:	d142      	bne.n	801756a <_malloc_r+0xea>
 80174e4:	6821      	ldr	r1, [r4, #0]
 80174e6:	1a6d      	subs	r5, r5, r1
 80174e8:	4629      	mov	r1, r5
 80174ea:	4630      	mov	r0, r6
 80174ec:	f7ff ffa6 	bl	801743c <sbrk_aligned>
 80174f0:	3001      	adds	r0, #1
 80174f2:	d03a      	beq.n	801756a <_malloc_r+0xea>
 80174f4:	6823      	ldr	r3, [r4, #0]
 80174f6:	442b      	add	r3, r5
 80174f8:	6023      	str	r3, [r4, #0]
 80174fa:	f8d8 3000 	ldr.w	r3, [r8]
 80174fe:	685a      	ldr	r2, [r3, #4]
 8017500:	bb62      	cbnz	r2, 801755c <_malloc_r+0xdc>
 8017502:	f8c8 7000 	str.w	r7, [r8]
 8017506:	e00f      	b.n	8017528 <_malloc_r+0xa8>
 8017508:	6822      	ldr	r2, [r4, #0]
 801750a:	1b52      	subs	r2, r2, r5
 801750c:	d420      	bmi.n	8017550 <_malloc_r+0xd0>
 801750e:	2a0b      	cmp	r2, #11
 8017510:	d917      	bls.n	8017542 <_malloc_r+0xc2>
 8017512:	1961      	adds	r1, r4, r5
 8017514:	42a3      	cmp	r3, r4
 8017516:	6025      	str	r5, [r4, #0]
 8017518:	bf18      	it	ne
 801751a:	6059      	strne	r1, [r3, #4]
 801751c:	6863      	ldr	r3, [r4, #4]
 801751e:	bf08      	it	eq
 8017520:	f8c8 1000 	streq.w	r1, [r8]
 8017524:	5162      	str	r2, [r4, r5]
 8017526:	604b      	str	r3, [r1, #4]
 8017528:	4630      	mov	r0, r6
 801752a:	f000 f82f 	bl	801758c <__malloc_unlock>
 801752e:	f104 000b 	add.w	r0, r4, #11
 8017532:	1d23      	adds	r3, r4, #4
 8017534:	f020 0007 	bic.w	r0, r0, #7
 8017538:	1ac2      	subs	r2, r0, r3
 801753a:	bf1c      	itt	ne
 801753c:	1a1b      	subne	r3, r3, r0
 801753e:	50a3      	strne	r3, [r4, r2]
 8017540:	e7af      	b.n	80174a2 <_malloc_r+0x22>
 8017542:	6862      	ldr	r2, [r4, #4]
 8017544:	42a3      	cmp	r3, r4
 8017546:	bf0c      	ite	eq
 8017548:	f8c8 2000 	streq.w	r2, [r8]
 801754c:	605a      	strne	r2, [r3, #4]
 801754e:	e7eb      	b.n	8017528 <_malloc_r+0xa8>
 8017550:	4623      	mov	r3, r4
 8017552:	6864      	ldr	r4, [r4, #4]
 8017554:	e7ae      	b.n	80174b4 <_malloc_r+0x34>
 8017556:	463c      	mov	r4, r7
 8017558:	687f      	ldr	r7, [r7, #4]
 801755a:	e7b6      	b.n	80174ca <_malloc_r+0x4a>
 801755c:	461a      	mov	r2, r3
 801755e:	685b      	ldr	r3, [r3, #4]
 8017560:	42a3      	cmp	r3, r4
 8017562:	d1fb      	bne.n	801755c <_malloc_r+0xdc>
 8017564:	2300      	movs	r3, #0
 8017566:	6053      	str	r3, [r2, #4]
 8017568:	e7de      	b.n	8017528 <_malloc_r+0xa8>
 801756a:	230c      	movs	r3, #12
 801756c:	6033      	str	r3, [r6, #0]
 801756e:	4630      	mov	r0, r6
 8017570:	f000 f80c 	bl	801758c <__malloc_unlock>
 8017574:	e794      	b.n	80174a0 <_malloc_r+0x20>
 8017576:	6005      	str	r5, [r0, #0]
 8017578:	e7d6      	b.n	8017528 <_malloc_r+0xa8>
 801757a:	bf00      	nop
 801757c:	2000cdb8 	.word	0x2000cdb8

08017580 <__malloc_lock>:
 8017580:	4801      	ldr	r0, [pc, #4]	@ (8017588 <__malloc_lock+0x8>)
 8017582:	f7ff beda 	b.w	801733a <__retarget_lock_acquire_recursive>
 8017586:	bf00      	nop
 8017588:	2000cdb0 	.word	0x2000cdb0

0801758c <__malloc_unlock>:
 801758c:	4801      	ldr	r0, [pc, #4]	@ (8017594 <__malloc_unlock+0x8>)
 801758e:	f7ff bed5 	b.w	801733c <__retarget_lock_release_recursive>
 8017592:	bf00      	nop
 8017594:	2000cdb0 	.word	0x2000cdb0

08017598 <__ssputs_r>:
 8017598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801759c:	688e      	ldr	r6, [r1, #8]
 801759e:	461f      	mov	r7, r3
 80175a0:	42be      	cmp	r6, r7
 80175a2:	680b      	ldr	r3, [r1, #0]
 80175a4:	4682      	mov	sl, r0
 80175a6:	460c      	mov	r4, r1
 80175a8:	4690      	mov	r8, r2
 80175aa:	d82d      	bhi.n	8017608 <__ssputs_r+0x70>
 80175ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80175b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80175b4:	d026      	beq.n	8017604 <__ssputs_r+0x6c>
 80175b6:	6965      	ldr	r5, [r4, #20]
 80175b8:	6909      	ldr	r1, [r1, #16]
 80175ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80175be:	eba3 0901 	sub.w	r9, r3, r1
 80175c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80175c6:	1c7b      	adds	r3, r7, #1
 80175c8:	444b      	add	r3, r9
 80175ca:	106d      	asrs	r5, r5, #1
 80175cc:	429d      	cmp	r5, r3
 80175ce:	bf38      	it	cc
 80175d0:	461d      	movcc	r5, r3
 80175d2:	0553      	lsls	r3, r2, #21
 80175d4:	d527      	bpl.n	8017626 <__ssputs_r+0x8e>
 80175d6:	4629      	mov	r1, r5
 80175d8:	f7ff ff52 	bl	8017480 <_malloc_r>
 80175dc:	4606      	mov	r6, r0
 80175de:	b360      	cbz	r0, 801763a <__ssputs_r+0xa2>
 80175e0:	6921      	ldr	r1, [r4, #16]
 80175e2:	464a      	mov	r2, r9
 80175e4:	f7ff feab 	bl	801733e <memcpy>
 80175e8:	89a3      	ldrh	r3, [r4, #12]
 80175ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80175ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80175f2:	81a3      	strh	r3, [r4, #12]
 80175f4:	6126      	str	r6, [r4, #16]
 80175f6:	6165      	str	r5, [r4, #20]
 80175f8:	444e      	add	r6, r9
 80175fa:	eba5 0509 	sub.w	r5, r5, r9
 80175fe:	6026      	str	r6, [r4, #0]
 8017600:	60a5      	str	r5, [r4, #8]
 8017602:	463e      	mov	r6, r7
 8017604:	42be      	cmp	r6, r7
 8017606:	d900      	bls.n	801760a <__ssputs_r+0x72>
 8017608:	463e      	mov	r6, r7
 801760a:	6820      	ldr	r0, [r4, #0]
 801760c:	4632      	mov	r2, r6
 801760e:	4641      	mov	r1, r8
 8017610:	f7ff fdb0 	bl	8017174 <memmove>
 8017614:	68a3      	ldr	r3, [r4, #8]
 8017616:	1b9b      	subs	r3, r3, r6
 8017618:	60a3      	str	r3, [r4, #8]
 801761a:	6823      	ldr	r3, [r4, #0]
 801761c:	4433      	add	r3, r6
 801761e:	6023      	str	r3, [r4, #0]
 8017620:	2000      	movs	r0, #0
 8017622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017626:	462a      	mov	r2, r5
 8017628:	f000 fd37 	bl	801809a <_realloc_r>
 801762c:	4606      	mov	r6, r0
 801762e:	2800      	cmp	r0, #0
 8017630:	d1e0      	bne.n	80175f4 <__ssputs_r+0x5c>
 8017632:	6921      	ldr	r1, [r4, #16]
 8017634:	4650      	mov	r0, sl
 8017636:	f7ff feaf 	bl	8017398 <_free_r>
 801763a:	230c      	movs	r3, #12
 801763c:	f8ca 3000 	str.w	r3, [sl]
 8017640:	89a3      	ldrh	r3, [r4, #12]
 8017642:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017646:	81a3      	strh	r3, [r4, #12]
 8017648:	f04f 30ff 	mov.w	r0, #4294967295
 801764c:	e7e9      	b.n	8017622 <__ssputs_r+0x8a>
	...

08017650 <_svfiprintf_r>:
 8017650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017654:	4698      	mov	r8, r3
 8017656:	898b      	ldrh	r3, [r1, #12]
 8017658:	061b      	lsls	r3, r3, #24
 801765a:	b09d      	sub	sp, #116	@ 0x74
 801765c:	4607      	mov	r7, r0
 801765e:	460d      	mov	r5, r1
 8017660:	4614      	mov	r4, r2
 8017662:	d510      	bpl.n	8017686 <_svfiprintf_r+0x36>
 8017664:	690b      	ldr	r3, [r1, #16]
 8017666:	b973      	cbnz	r3, 8017686 <_svfiprintf_r+0x36>
 8017668:	2140      	movs	r1, #64	@ 0x40
 801766a:	f7ff ff09 	bl	8017480 <_malloc_r>
 801766e:	6028      	str	r0, [r5, #0]
 8017670:	6128      	str	r0, [r5, #16]
 8017672:	b930      	cbnz	r0, 8017682 <_svfiprintf_r+0x32>
 8017674:	230c      	movs	r3, #12
 8017676:	603b      	str	r3, [r7, #0]
 8017678:	f04f 30ff 	mov.w	r0, #4294967295
 801767c:	b01d      	add	sp, #116	@ 0x74
 801767e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017682:	2340      	movs	r3, #64	@ 0x40
 8017684:	616b      	str	r3, [r5, #20]
 8017686:	2300      	movs	r3, #0
 8017688:	9309      	str	r3, [sp, #36]	@ 0x24
 801768a:	2320      	movs	r3, #32
 801768c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017690:	f8cd 800c 	str.w	r8, [sp, #12]
 8017694:	2330      	movs	r3, #48	@ 0x30
 8017696:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017834 <_svfiprintf_r+0x1e4>
 801769a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801769e:	f04f 0901 	mov.w	r9, #1
 80176a2:	4623      	mov	r3, r4
 80176a4:	469a      	mov	sl, r3
 80176a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80176aa:	b10a      	cbz	r2, 80176b0 <_svfiprintf_r+0x60>
 80176ac:	2a25      	cmp	r2, #37	@ 0x25
 80176ae:	d1f9      	bne.n	80176a4 <_svfiprintf_r+0x54>
 80176b0:	ebba 0b04 	subs.w	fp, sl, r4
 80176b4:	d00b      	beq.n	80176ce <_svfiprintf_r+0x7e>
 80176b6:	465b      	mov	r3, fp
 80176b8:	4622      	mov	r2, r4
 80176ba:	4629      	mov	r1, r5
 80176bc:	4638      	mov	r0, r7
 80176be:	f7ff ff6b 	bl	8017598 <__ssputs_r>
 80176c2:	3001      	adds	r0, #1
 80176c4:	f000 80a7 	beq.w	8017816 <_svfiprintf_r+0x1c6>
 80176c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80176ca:	445a      	add	r2, fp
 80176cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80176ce:	f89a 3000 	ldrb.w	r3, [sl]
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	f000 809f 	beq.w	8017816 <_svfiprintf_r+0x1c6>
 80176d8:	2300      	movs	r3, #0
 80176da:	f04f 32ff 	mov.w	r2, #4294967295
 80176de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80176e2:	f10a 0a01 	add.w	sl, sl, #1
 80176e6:	9304      	str	r3, [sp, #16]
 80176e8:	9307      	str	r3, [sp, #28]
 80176ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80176ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80176f0:	4654      	mov	r4, sl
 80176f2:	2205      	movs	r2, #5
 80176f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80176f8:	484e      	ldr	r0, [pc, #312]	@ (8017834 <_svfiprintf_r+0x1e4>)
 80176fa:	f7e8 fd81 	bl	8000200 <memchr>
 80176fe:	9a04      	ldr	r2, [sp, #16]
 8017700:	b9d8      	cbnz	r0, 801773a <_svfiprintf_r+0xea>
 8017702:	06d0      	lsls	r0, r2, #27
 8017704:	bf44      	itt	mi
 8017706:	2320      	movmi	r3, #32
 8017708:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801770c:	0711      	lsls	r1, r2, #28
 801770e:	bf44      	itt	mi
 8017710:	232b      	movmi	r3, #43	@ 0x2b
 8017712:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017716:	f89a 3000 	ldrb.w	r3, [sl]
 801771a:	2b2a      	cmp	r3, #42	@ 0x2a
 801771c:	d015      	beq.n	801774a <_svfiprintf_r+0xfa>
 801771e:	9a07      	ldr	r2, [sp, #28]
 8017720:	4654      	mov	r4, sl
 8017722:	2000      	movs	r0, #0
 8017724:	f04f 0c0a 	mov.w	ip, #10
 8017728:	4621      	mov	r1, r4
 801772a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801772e:	3b30      	subs	r3, #48	@ 0x30
 8017730:	2b09      	cmp	r3, #9
 8017732:	d94b      	bls.n	80177cc <_svfiprintf_r+0x17c>
 8017734:	b1b0      	cbz	r0, 8017764 <_svfiprintf_r+0x114>
 8017736:	9207      	str	r2, [sp, #28]
 8017738:	e014      	b.n	8017764 <_svfiprintf_r+0x114>
 801773a:	eba0 0308 	sub.w	r3, r0, r8
 801773e:	fa09 f303 	lsl.w	r3, r9, r3
 8017742:	4313      	orrs	r3, r2
 8017744:	9304      	str	r3, [sp, #16]
 8017746:	46a2      	mov	sl, r4
 8017748:	e7d2      	b.n	80176f0 <_svfiprintf_r+0xa0>
 801774a:	9b03      	ldr	r3, [sp, #12]
 801774c:	1d19      	adds	r1, r3, #4
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	9103      	str	r1, [sp, #12]
 8017752:	2b00      	cmp	r3, #0
 8017754:	bfbb      	ittet	lt
 8017756:	425b      	neglt	r3, r3
 8017758:	f042 0202 	orrlt.w	r2, r2, #2
 801775c:	9307      	strge	r3, [sp, #28]
 801775e:	9307      	strlt	r3, [sp, #28]
 8017760:	bfb8      	it	lt
 8017762:	9204      	strlt	r2, [sp, #16]
 8017764:	7823      	ldrb	r3, [r4, #0]
 8017766:	2b2e      	cmp	r3, #46	@ 0x2e
 8017768:	d10a      	bne.n	8017780 <_svfiprintf_r+0x130>
 801776a:	7863      	ldrb	r3, [r4, #1]
 801776c:	2b2a      	cmp	r3, #42	@ 0x2a
 801776e:	d132      	bne.n	80177d6 <_svfiprintf_r+0x186>
 8017770:	9b03      	ldr	r3, [sp, #12]
 8017772:	1d1a      	adds	r2, r3, #4
 8017774:	681b      	ldr	r3, [r3, #0]
 8017776:	9203      	str	r2, [sp, #12]
 8017778:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801777c:	3402      	adds	r4, #2
 801777e:	9305      	str	r3, [sp, #20]
 8017780:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017844 <_svfiprintf_r+0x1f4>
 8017784:	7821      	ldrb	r1, [r4, #0]
 8017786:	2203      	movs	r2, #3
 8017788:	4650      	mov	r0, sl
 801778a:	f7e8 fd39 	bl	8000200 <memchr>
 801778e:	b138      	cbz	r0, 80177a0 <_svfiprintf_r+0x150>
 8017790:	9b04      	ldr	r3, [sp, #16]
 8017792:	eba0 000a 	sub.w	r0, r0, sl
 8017796:	2240      	movs	r2, #64	@ 0x40
 8017798:	4082      	lsls	r2, r0
 801779a:	4313      	orrs	r3, r2
 801779c:	3401      	adds	r4, #1
 801779e:	9304      	str	r3, [sp, #16]
 80177a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80177a4:	4824      	ldr	r0, [pc, #144]	@ (8017838 <_svfiprintf_r+0x1e8>)
 80177a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80177aa:	2206      	movs	r2, #6
 80177ac:	f7e8 fd28 	bl	8000200 <memchr>
 80177b0:	2800      	cmp	r0, #0
 80177b2:	d036      	beq.n	8017822 <_svfiprintf_r+0x1d2>
 80177b4:	4b21      	ldr	r3, [pc, #132]	@ (801783c <_svfiprintf_r+0x1ec>)
 80177b6:	bb1b      	cbnz	r3, 8017800 <_svfiprintf_r+0x1b0>
 80177b8:	9b03      	ldr	r3, [sp, #12]
 80177ba:	3307      	adds	r3, #7
 80177bc:	f023 0307 	bic.w	r3, r3, #7
 80177c0:	3308      	adds	r3, #8
 80177c2:	9303      	str	r3, [sp, #12]
 80177c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80177c6:	4433      	add	r3, r6
 80177c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80177ca:	e76a      	b.n	80176a2 <_svfiprintf_r+0x52>
 80177cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80177d0:	460c      	mov	r4, r1
 80177d2:	2001      	movs	r0, #1
 80177d4:	e7a8      	b.n	8017728 <_svfiprintf_r+0xd8>
 80177d6:	2300      	movs	r3, #0
 80177d8:	3401      	adds	r4, #1
 80177da:	9305      	str	r3, [sp, #20]
 80177dc:	4619      	mov	r1, r3
 80177de:	f04f 0c0a 	mov.w	ip, #10
 80177e2:	4620      	mov	r0, r4
 80177e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80177e8:	3a30      	subs	r2, #48	@ 0x30
 80177ea:	2a09      	cmp	r2, #9
 80177ec:	d903      	bls.n	80177f6 <_svfiprintf_r+0x1a6>
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	d0c6      	beq.n	8017780 <_svfiprintf_r+0x130>
 80177f2:	9105      	str	r1, [sp, #20]
 80177f4:	e7c4      	b.n	8017780 <_svfiprintf_r+0x130>
 80177f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80177fa:	4604      	mov	r4, r0
 80177fc:	2301      	movs	r3, #1
 80177fe:	e7f0      	b.n	80177e2 <_svfiprintf_r+0x192>
 8017800:	ab03      	add	r3, sp, #12
 8017802:	9300      	str	r3, [sp, #0]
 8017804:	462a      	mov	r2, r5
 8017806:	4b0e      	ldr	r3, [pc, #56]	@ (8017840 <_svfiprintf_r+0x1f0>)
 8017808:	a904      	add	r1, sp, #16
 801780a:	4638      	mov	r0, r7
 801780c:	f3af 8000 	nop.w
 8017810:	1c42      	adds	r2, r0, #1
 8017812:	4606      	mov	r6, r0
 8017814:	d1d6      	bne.n	80177c4 <_svfiprintf_r+0x174>
 8017816:	89ab      	ldrh	r3, [r5, #12]
 8017818:	065b      	lsls	r3, r3, #25
 801781a:	f53f af2d 	bmi.w	8017678 <_svfiprintf_r+0x28>
 801781e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017820:	e72c      	b.n	801767c <_svfiprintf_r+0x2c>
 8017822:	ab03      	add	r3, sp, #12
 8017824:	9300      	str	r3, [sp, #0]
 8017826:	462a      	mov	r2, r5
 8017828:	4b05      	ldr	r3, [pc, #20]	@ (8017840 <_svfiprintf_r+0x1f0>)
 801782a:	a904      	add	r1, sp, #16
 801782c:	4638      	mov	r0, r7
 801782e:	f000 f9bb 	bl	8017ba8 <_printf_i>
 8017832:	e7ed      	b.n	8017810 <_svfiprintf_r+0x1c0>
 8017834:	0801b777 	.word	0x0801b777
 8017838:	0801b781 	.word	0x0801b781
 801783c:	00000000 	.word	0x00000000
 8017840:	08017599 	.word	0x08017599
 8017844:	0801b77d 	.word	0x0801b77d

08017848 <__sfputc_r>:
 8017848:	6893      	ldr	r3, [r2, #8]
 801784a:	3b01      	subs	r3, #1
 801784c:	2b00      	cmp	r3, #0
 801784e:	b410      	push	{r4}
 8017850:	6093      	str	r3, [r2, #8]
 8017852:	da08      	bge.n	8017866 <__sfputc_r+0x1e>
 8017854:	6994      	ldr	r4, [r2, #24]
 8017856:	42a3      	cmp	r3, r4
 8017858:	db01      	blt.n	801785e <__sfputc_r+0x16>
 801785a:	290a      	cmp	r1, #10
 801785c:	d103      	bne.n	8017866 <__sfputc_r+0x1e>
 801785e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017862:	f7ff bbe2 	b.w	801702a <__swbuf_r>
 8017866:	6813      	ldr	r3, [r2, #0]
 8017868:	1c58      	adds	r0, r3, #1
 801786a:	6010      	str	r0, [r2, #0]
 801786c:	7019      	strb	r1, [r3, #0]
 801786e:	4608      	mov	r0, r1
 8017870:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017874:	4770      	bx	lr

08017876 <__sfputs_r>:
 8017876:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017878:	4606      	mov	r6, r0
 801787a:	460f      	mov	r7, r1
 801787c:	4614      	mov	r4, r2
 801787e:	18d5      	adds	r5, r2, r3
 8017880:	42ac      	cmp	r4, r5
 8017882:	d101      	bne.n	8017888 <__sfputs_r+0x12>
 8017884:	2000      	movs	r0, #0
 8017886:	e007      	b.n	8017898 <__sfputs_r+0x22>
 8017888:	f814 1b01 	ldrb.w	r1, [r4], #1
 801788c:	463a      	mov	r2, r7
 801788e:	4630      	mov	r0, r6
 8017890:	f7ff ffda 	bl	8017848 <__sfputc_r>
 8017894:	1c43      	adds	r3, r0, #1
 8017896:	d1f3      	bne.n	8017880 <__sfputs_r+0xa>
 8017898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801789c <_vfiprintf_r>:
 801789c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178a0:	460d      	mov	r5, r1
 80178a2:	b09d      	sub	sp, #116	@ 0x74
 80178a4:	4614      	mov	r4, r2
 80178a6:	4698      	mov	r8, r3
 80178a8:	4606      	mov	r6, r0
 80178aa:	b118      	cbz	r0, 80178b4 <_vfiprintf_r+0x18>
 80178ac:	6a03      	ldr	r3, [r0, #32]
 80178ae:	b90b      	cbnz	r3, 80178b4 <_vfiprintf_r+0x18>
 80178b0:	f7ff fab2 	bl	8016e18 <__sinit>
 80178b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80178b6:	07d9      	lsls	r1, r3, #31
 80178b8:	d405      	bmi.n	80178c6 <_vfiprintf_r+0x2a>
 80178ba:	89ab      	ldrh	r3, [r5, #12]
 80178bc:	059a      	lsls	r2, r3, #22
 80178be:	d402      	bmi.n	80178c6 <_vfiprintf_r+0x2a>
 80178c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80178c2:	f7ff fd3a 	bl	801733a <__retarget_lock_acquire_recursive>
 80178c6:	89ab      	ldrh	r3, [r5, #12]
 80178c8:	071b      	lsls	r3, r3, #28
 80178ca:	d501      	bpl.n	80178d0 <_vfiprintf_r+0x34>
 80178cc:	692b      	ldr	r3, [r5, #16]
 80178ce:	b99b      	cbnz	r3, 80178f8 <_vfiprintf_r+0x5c>
 80178d0:	4629      	mov	r1, r5
 80178d2:	4630      	mov	r0, r6
 80178d4:	f7ff fbe8 	bl	80170a8 <__swsetup_r>
 80178d8:	b170      	cbz	r0, 80178f8 <_vfiprintf_r+0x5c>
 80178da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80178dc:	07dc      	lsls	r4, r3, #31
 80178de:	d504      	bpl.n	80178ea <_vfiprintf_r+0x4e>
 80178e0:	f04f 30ff 	mov.w	r0, #4294967295
 80178e4:	b01d      	add	sp, #116	@ 0x74
 80178e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178ea:	89ab      	ldrh	r3, [r5, #12]
 80178ec:	0598      	lsls	r0, r3, #22
 80178ee:	d4f7      	bmi.n	80178e0 <_vfiprintf_r+0x44>
 80178f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80178f2:	f7ff fd23 	bl	801733c <__retarget_lock_release_recursive>
 80178f6:	e7f3      	b.n	80178e0 <_vfiprintf_r+0x44>
 80178f8:	2300      	movs	r3, #0
 80178fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80178fc:	2320      	movs	r3, #32
 80178fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017902:	f8cd 800c 	str.w	r8, [sp, #12]
 8017906:	2330      	movs	r3, #48	@ 0x30
 8017908:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017ab8 <_vfiprintf_r+0x21c>
 801790c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017910:	f04f 0901 	mov.w	r9, #1
 8017914:	4623      	mov	r3, r4
 8017916:	469a      	mov	sl, r3
 8017918:	f813 2b01 	ldrb.w	r2, [r3], #1
 801791c:	b10a      	cbz	r2, 8017922 <_vfiprintf_r+0x86>
 801791e:	2a25      	cmp	r2, #37	@ 0x25
 8017920:	d1f9      	bne.n	8017916 <_vfiprintf_r+0x7a>
 8017922:	ebba 0b04 	subs.w	fp, sl, r4
 8017926:	d00b      	beq.n	8017940 <_vfiprintf_r+0xa4>
 8017928:	465b      	mov	r3, fp
 801792a:	4622      	mov	r2, r4
 801792c:	4629      	mov	r1, r5
 801792e:	4630      	mov	r0, r6
 8017930:	f7ff ffa1 	bl	8017876 <__sfputs_r>
 8017934:	3001      	adds	r0, #1
 8017936:	f000 80a7 	beq.w	8017a88 <_vfiprintf_r+0x1ec>
 801793a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801793c:	445a      	add	r2, fp
 801793e:	9209      	str	r2, [sp, #36]	@ 0x24
 8017940:	f89a 3000 	ldrb.w	r3, [sl]
 8017944:	2b00      	cmp	r3, #0
 8017946:	f000 809f 	beq.w	8017a88 <_vfiprintf_r+0x1ec>
 801794a:	2300      	movs	r3, #0
 801794c:	f04f 32ff 	mov.w	r2, #4294967295
 8017950:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017954:	f10a 0a01 	add.w	sl, sl, #1
 8017958:	9304      	str	r3, [sp, #16]
 801795a:	9307      	str	r3, [sp, #28]
 801795c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017960:	931a      	str	r3, [sp, #104]	@ 0x68
 8017962:	4654      	mov	r4, sl
 8017964:	2205      	movs	r2, #5
 8017966:	f814 1b01 	ldrb.w	r1, [r4], #1
 801796a:	4853      	ldr	r0, [pc, #332]	@ (8017ab8 <_vfiprintf_r+0x21c>)
 801796c:	f7e8 fc48 	bl	8000200 <memchr>
 8017970:	9a04      	ldr	r2, [sp, #16]
 8017972:	b9d8      	cbnz	r0, 80179ac <_vfiprintf_r+0x110>
 8017974:	06d1      	lsls	r1, r2, #27
 8017976:	bf44      	itt	mi
 8017978:	2320      	movmi	r3, #32
 801797a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801797e:	0713      	lsls	r3, r2, #28
 8017980:	bf44      	itt	mi
 8017982:	232b      	movmi	r3, #43	@ 0x2b
 8017984:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017988:	f89a 3000 	ldrb.w	r3, [sl]
 801798c:	2b2a      	cmp	r3, #42	@ 0x2a
 801798e:	d015      	beq.n	80179bc <_vfiprintf_r+0x120>
 8017990:	9a07      	ldr	r2, [sp, #28]
 8017992:	4654      	mov	r4, sl
 8017994:	2000      	movs	r0, #0
 8017996:	f04f 0c0a 	mov.w	ip, #10
 801799a:	4621      	mov	r1, r4
 801799c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80179a0:	3b30      	subs	r3, #48	@ 0x30
 80179a2:	2b09      	cmp	r3, #9
 80179a4:	d94b      	bls.n	8017a3e <_vfiprintf_r+0x1a2>
 80179a6:	b1b0      	cbz	r0, 80179d6 <_vfiprintf_r+0x13a>
 80179a8:	9207      	str	r2, [sp, #28]
 80179aa:	e014      	b.n	80179d6 <_vfiprintf_r+0x13a>
 80179ac:	eba0 0308 	sub.w	r3, r0, r8
 80179b0:	fa09 f303 	lsl.w	r3, r9, r3
 80179b4:	4313      	orrs	r3, r2
 80179b6:	9304      	str	r3, [sp, #16]
 80179b8:	46a2      	mov	sl, r4
 80179ba:	e7d2      	b.n	8017962 <_vfiprintf_r+0xc6>
 80179bc:	9b03      	ldr	r3, [sp, #12]
 80179be:	1d19      	adds	r1, r3, #4
 80179c0:	681b      	ldr	r3, [r3, #0]
 80179c2:	9103      	str	r1, [sp, #12]
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	bfbb      	ittet	lt
 80179c8:	425b      	neglt	r3, r3
 80179ca:	f042 0202 	orrlt.w	r2, r2, #2
 80179ce:	9307      	strge	r3, [sp, #28]
 80179d0:	9307      	strlt	r3, [sp, #28]
 80179d2:	bfb8      	it	lt
 80179d4:	9204      	strlt	r2, [sp, #16]
 80179d6:	7823      	ldrb	r3, [r4, #0]
 80179d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80179da:	d10a      	bne.n	80179f2 <_vfiprintf_r+0x156>
 80179dc:	7863      	ldrb	r3, [r4, #1]
 80179de:	2b2a      	cmp	r3, #42	@ 0x2a
 80179e0:	d132      	bne.n	8017a48 <_vfiprintf_r+0x1ac>
 80179e2:	9b03      	ldr	r3, [sp, #12]
 80179e4:	1d1a      	adds	r2, r3, #4
 80179e6:	681b      	ldr	r3, [r3, #0]
 80179e8:	9203      	str	r2, [sp, #12]
 80179ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80179ee:	3402      	adds	r4, #2
 80179f0:	9305      	str	r3, [sp, #20]
 80179f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017ac8 <_vfiprintf_r+0x22c>
 80179f6:	7821      	ldrb	r1, [r4, #0]
 80179f8:	2203      	movs	r2, #3
 80179fa:	4650      	mov	r0, sl
 80179fc:	f7e8 fc00 	bl	8000200 <memchr>
 8017a00:	b138      	cbz	r0, 8017a12 <_vfiprintf_r+0x176>
 8017a02:	9b04      	ldr	r3, [sp, #16]
 8017a04:	eba0 000a 	sub.w	r0, r0, sl
 8017a08:	2240      	movs	r2, #64	@ 0x40
 8017a0a:	4082      	lsls	r2, r0
 8017a0c:	4313      	orrs	r3, r2
 8017a0e:	3401      	adds	r4, #1
 8017a10:	9304      	str	r3, [sp, #16]
 8017a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a16:	4829      	ldr	r0, [pc, #164]	@ (8017abc <_vfiprintf_r+0x220>)
 8017a18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017a1c:	2206      	movs	r2, #6
 8017a1e:	f7e8 fbef 	bl	8000200 <memchr>
 8017a22:	2800      	cmp	r0, #0
 8017a24:	d03f      	beq.n	8017aa6 <_vfiprintf_r+0x20a>
 8017a26:	4b26      	ldr	r3, [pc, #152]	@ (8017ac0 <_vfiprintf_r+0x224>)
 8017a28:	bb1b      	cbnz	r3, 8017a72 <_vfiprintf_r+0x1d6>
 8017a2a:	9b03      	ldr	r3, [sp, #12]
 8017a2c:	3307      	adds	r3, #7
 8017a2e:	f023 0307 	bic.w	r3, r3, #7
 8017a32:	3308      	adds	r3, #8
 8017a34:	9303      	str	r3, [sp, #12]
 8017a36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017a38:	443b      	add	r3, r7
 8017a3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8017a3c:	e76a      	b.n	8017914 <_vfiprintf_r+0x78>
 8017a3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8017a42:	460c      	mov	r4, r1
 8017a44:	2001      	movs	r0, #1
 8017a46:	e7a8      	b.n	801799a <_vfiprintf_r+0xfe>
 8017a48:	2300      	movs	r3, #0
 8017a4a:	3401      	adds	r4, #1
 8017a4c:	9305      	str	r3, [sp, #20]
 8017a4e:	4619      	mov	r1, r3
 8017a50:	f04f 0c0a 	mov.w	ip, #10
 8017a54:	4620      	mov	r0, r4
 8017a56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017a5a:	3a30      	subs	r2, #48	@ 0x30
 8017a5c:	2a09      	cmp	r2, #9
 8017a5e:	d903      	bls.n	8017a68 <_vfiprintf_r+0x1cc>
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d0c6      	beq.n	80179f2 <_vfiprintf_r+0x156>
 8017a64:	9105      	str	r1, [sp, #20]
 8017a66:	e7c4      	b.n	80179f2 <_vfiprintf_r+0x156>
 8017a68:	fb0c 2101 	mla	r1, ip, r1, r2
 8017a6c:	4604      	mov	r4, r0
 8017a6e:	2301      	movs	r3, #1
 8017a70:	e7f0      	b.n	8017a54 <_vfiprintf_r+0x1b8>
 8017a72:	ab03      	add	r3, sp, #12
 8017a74:	9300      	str	r3, [sp, #0]
 8017a76:	462a      	mov	r2, r5
 8017a78:	4b12      	ldr	r3, [pc, #72]	@ (8017ac4 <_vfiprintf_r+0x228>)
 8017a7a:	a904      	add	r1, sp, #16
 8017a7c:	4630      	mov	r0, r6
 8017a7e:	f3af 8000 	nop.w
 8017a82:	4607      	mov	r7, r0
 8017a84:	1c78      	adds	r0, r7, #1
 8017a86:	d1d6      	bne.n	8017a36 <_vfiprintf_r+0x19a>
 8017a88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017a8a:	07d9      	lsls	r1, r3, #31
 8017a8c:	d405      	bmi.n	8017a9a <_vfiprintf_r+0x1fe>
 8017a8e:	89ab      	ldrh	r3, [r5, #12]
 8017a90:	059a      	lsls	r2, r3, #22
 8017a92:	d402      	bmi.n	8017a9a <_vfiprintf_r+0x1fe>
 8017a94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017a96:	f7ff fc51 	bl	801733c <__retarget_lock_release_recursive>
 8017a9a:	89ab      	ldrh	r3, [r5, #12]
 8017a9c:	065b      	lsls	r3, r3, #25
 8017a9e:	f53f af1f 	bmi.w	80178e0 <_vfiprintf_r+0x44>
 8017aa2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017aa4:	e71e      	b.n	80178e4 <_vfiprintf_r+0x48>
 8017aa6:	ab03      	add	r3, sp, #12
 8017aa8:	9300      	str	r3, [sp, #0]
 8017aaa:	462a      	mov	r2, r5
 8017aac:	4b05      	ldr	r3, [pc, #20]	@ (8017ac4 <_vfiprintf_r+0x228>)
 8017aae:	a904      	add	r1, sp, #16
 8017ab0:	4630      	mov	r0, r6
 8017ab2:	f000 f879 	bl	8017ba8 <_printf_i>
 8017ab6:	e7e4      	b.n	8017a82 <_vfiprintf_r+0x1e6>
 8017ab8:	0801b777 	.word	0x0801b777
 8017abc:	0801b781 	.word	0x0801b781
 8017ac0:	00000000 	.word	0x00000000
 8017ac4:	08017877 	.word	0x08017877
 8017ac8:	0801b77d 	.word	0x0801b77d

08017acc <_printf_common>:
 8017acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ad0:	4616      	mov	r6, r2
 8017ad2:	4698      	mov	r8, r3
 8017ad4:	688a      	ldr	r2, [r1, #8]
 8017ad6:	690b      	ldr	r3, [r1, #16]
 8017ad8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017adc:	4293      	cmp	r3, r2
 8017ade:	bfb8      	it	lt
 8017ae0:	4613      	movlt	r3, r2
 8017ae2:	6033      	str	r3, [r6, #0]
 8017ae4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017ae8:	4607      	mov	r7, r0
 8017aea:	460c      	mov	r4, r1
 8017aec:	b10a      	cbz	r2, 8017af2 <_printf_common+0x26>
 8017aee:	3301      	adds	r3, #1
 8017af0:	6033      	str	r3, [r6, #0]
 8017af2:	6823      	ldr	r3, [r4, #0]
 8017af4:	0699      	lsls	r1, r3, #26
 8017af6:	bf42      	ittt	mi
 8017af8:	6833      	ldrmi	r3, [r6, #0]
 8017afa:	3302      	addmi	r3, #2
 8017afc:	6033      	strmi	r3, [r6, #0]
 8017afe:	6825      	ldr	r5, [r4, #0]
 8017b00:	f015 0506 	ands.w	r5, r5, #6
 8017b04:	d106      	bne.n	8017b14 <_printf_common+0x48>
 8017b06:	f104 0a19 	add.w	sl, r4, #25
 8017b0a:	68e3      	ldr	r3, [r4, #12]
 8017b0c:	6832      	ldr	r2, [r6, #0]
 8017b0e:	1a9b      	subs	r3, r3, r2
 8017b10:	42ab      	cmp	r3, r5
 8017b12:	dc26      	bgt.n	8017b62 <_printf_common+0x96>
 8017b14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017b18:	6822      	ldr	r2, [r4, #0]
 8017b1a:	3b00      	subs	r3, #0
 8017b1c:	bf18      	it	ne
 8017b1e:	2301      	movne	r3, #1
 8017b20:	0692      	lsls	r2, r2, #26
 8017b22:	d42b      	bmi.n	8017b7c <_printf_common+0xb0>
 8017b24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017b28:	4641      	mov	r1, r8
 8017b2a:	4638      	mov	r0, r7
 8017b2c:	47c8      	blx	r9
 8017b2e:	3001      	adds	r0, #1
 8017b30:	d01e      	beq.n	8017b70 <_printf_common+0xa4>
 8017b32:	6823      	ldr	r3, [r4, #0]
 8017b34:	6922      	ldr	r2, [r4, #16]
 8017b36:	f003 0306 	and.w	r3, r3, #6
 8017b3a:	2b04      	cmp	r3, #4
 8017b3c:	bf02      	ittt	eq
 8017b3e:	68e5      	ldreq	r5, [r4, #12]
 8017b40:	6833      	ldreq	r3, [r6, #0]
 8017b42:	1aed      	subeq	r5, r5, r3
 8017b44:	68a3      	ldr	r3, [r4, #8]
 8017b46:	bf0c      	ite	eq
 8017b48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017b4c:	2500      	movne	r5, #0
 8017b4e:	4293      	cmp	r3, r2
 8017b50:	bfc4      	itt	gt
 8017b52:	1a9b      	subgt	r3, r3, r2
 8017b54:	18ed      	addgt	r5, r5, r3
 8017b56:	2600      	movs	r6, #0
 8017b58:	341a      	adds	r4, #26
 8017b5a:	42b5      	cmp	r5, r6
 8017b5c:	d11a      	bne.n	8017b94 <_printf_common+0xc8>
 8017b5e:	2000      	movs	r0, #0
 8017b60:	e008      	b.n	8017b74 <_printf_common+0xa8>
 8017b62:	2301      	movs	r3, #1
 8017b64:	4652      	mov	r2, sl
 8017b66:	4641      	mov	r1, r8
 8017b68:	4638      	mov	r0, r7
 8017b6a:	47c8      	blx	r9
 8017b6c:	3001      	adds	r0, #1
 8017b6e:	d103      	bne.n	8017b78 <_printf_common+0xac>
 8017b70:	f04f 30ff 	mov.w	r0, #4294967295
 8017b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b78:	3501      	adds	r5, #1
 8017b7a:	e7c6      	b.n	8017b0a <_printf_common+0x3e>
 8017b7c:	18e1      	adds	r1, r4, r3
 8017b7e:	1c5a      	adds	r2, r3, #1
 8017b80:	2030      	movs	r0, #48	@ 0x30
 8017b82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017b86:	4422      	add	r2, r4
 8017b88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017b8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017b90:	3302      	adds	r3, #2
 8017b92:	e7c7      	b.n	8017b24 <_printf_common+0x58>
 8017b94:	2301      	movs	r3, #1
 8017b96:	4622      	mov	r2, r4
 8017b98:	4641      	mov	r1, r8
 8017b9a:	4638      	mov	r0, r7
 8017b9c:	47c8      	blx	r9
 8017b9e:	3001      	adds	r0, #1
 8017ba0:	d0e6      	beq.n	8017b70 <_printf_common+0xa4>
 8017ba2:	3601      	adds	r6, #1
 8017ba4:	e7d9      	b.n	8017b5a <_printf_common+0x8e>
	...

08017ba8 <_printf_i>:
 8017ba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017bac:	7e0f      	ldrb	r7, [r1, #24]
 8017bae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017bb0:	2f78      	cmp	r7, #120	@ 0x78
 8017bb2:	4691      	mov	r9, r2
 8017bb4:	4680      	mov	r8, r0
 8017bb6:	460c      	mov	r4, r1
 8017bb8:	469a      	mov	sl, r3
 8017bba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017bbe:	d807      	bhi.n	8017bd0 <_printf_i+0x28>
 8017bc0:	2f62      	cmp	r7, #98	@ 0x62
 8017bc2:	d80a      	bhi.n	8017bda <_printf_i+0x32>
 8017bc4:	2f00      	cmp	r7, #0
 8017bc6:	f000 80d2 	beq.w	8017d6e <_printf_i+0x1c6>
 8017bca:	2f58      	cmp	r7, #88	@ 0x58
 8017bcc:	f000 80b9 	beq.w	8017d42 <_printf_i+0x19a>
 8017bd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017bd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017bd8:	e03a      	b.n	8017c50 <_printf_i+0xa8>
 8017bda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017bde:	2b15      	cmp	r3, #21
 8017be0:	d8f6      	bhi.n	8017bd0 <_printf_i+0x28>
 8017be2:	a101      	add	r1, pc, #4	@ (adr r1, 8017be8 <_printf_i+0x40>)
 8017be4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017be8:	08017c41 	.word	0x08017c41
 8017bec:	08017c55 	.word	0x08017c55
 8017bf0:	08017bd1 	.word	0x08017bd1
 8017bf4:	08017bd1 	.word	0x08017bd1
 8017bf8:	08017bd1 	.word	0x08017bd1
 8017bfc:	08017bd1 	.word	0x08017bd1
 8017c00:	08017c55 	.word	0x08017c55
 8017c04:	08017bd1 	.word	0x08017bd1
 8017c08:	08017bd1 	.word	0x08017bd1
 8017c0c:	08017bd1 	.word	0x08017bd1
 8017c10:	08017bd1 	.word	0x08017bd1
 8017c14:	08017d55 	.word	0x08017d55
 8017c18:	08017c7f 	.word	0x08017c7f
 8017c1c:	08017d0f 	.word	0x08017d0f
 8017c20:	08017bd1 	.word	0x08017bd1
 8017c24:	08017bd1 	.word	0x08017bd1
 8017c28:	08017d77 	.word	0x08017d77
 8017c2c:	08017bd1 	.word	0x08017bd1
 8017c30:	08017c7f 	.word	0x08017c7f
 8017c34:	08017bd1 	.word	0x08017bd1
 8017c38:	08017bd1 	.word	0x08017bd1
 8017c3c:	08017d17 	.word	0x08017d17
 8017c40:	6833      	ldr	r3, [r6, #0]
 8017c42:	1d1a      	adds	r2, r3, #4
 8017c44:	681b      	ldr	r3, [r3, #0]
 8017c46:	6032      	str	r2, [r6, #0]
 8017c48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017c4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017c50:	2301      	movs	r3, #1
 8017c52:	e09d      	b.n	8017d90 <_printf_i+0x1e8>
 8017c54:	6833      	ldr	r3, [r6, #0]
 8017c56:	6820      	ldr	r0, [r4, #0]
 8017c58:	1d19      	adds	r1, r3, #4
 8017c5a:	6031      	str	r1, [r6, #0]
 8017c5c:	0606      	lsls	r6, r0, #24
 8017c5e:	d501      	bpl.n	8017c64 <_printf_i+0xbc>
 8017c60:	681d      	ldr	r5, [r3, #0]
 8017c62:	e003      	b.n	8017c6c <_printf_i+0xc4>
 8017c64:	0645      	lsls	r5, r0, #25
 8017c66:	d5fb      	bpl.n	8017c60 <_printf_i+0xb8>
 8017c68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017c6c:	2d00      	cmp	r5, #0
 8017c6e:	da03      	bge.n	8017c78 <_printf_i+0xd0>
 8017c70:	232d      	movs	r3, #45	@ 0x2d
 8017c72:	426d      	negs	r5, r5
 8017c74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017c78:	4859      	ldr	r0, [pc, #356]	@ (8017de0 <_printf_i+0x238>)
 8017c7a:	230a      	movs	r3, #10
 8017c7c:	e011      	b.n	8017ca2 <_printf_i+0xfa>
 8017c7e:	6821      	ldr	r1, [r4, #0]
 8017c80:	6833      	ldr	r3, [r6, #0]
 8017c82:	0608      	lsls	r0, r1, #24
 8017c84:	f853 5b04 	ldr.w	r5, [r3], #4
 8017c88:	d402      	bmi.n	8017c90 <_printf_i+0xe8>
 8017c8a:	0649      	lsls	r1, r1, #25
 8017c8c:	bf48      	it	mi
 8017c8e:	b2ad      	uxthmi	r5, r5
 8017c90:	2f6f      	cmp	r7, #111	@ 0x6f
 8017c92:	4853      	ldr	r0, [pc, #332]	@ (8017de0 <_printf_i+0x238>)
 8017c94:	6033      	str	r3, [r6, #0]
 8017c96:	bf14      	ite	ne
 8017c98:	230a      	movne	r3, #10
 8017c9a:	2308      	moveq	r3, #8
 8017c9c:	2100      	movs	r1, #0
 8017c9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017ca2:	6866      	ldr	r6, [r4, #4]
 8017ca4:	60a6      	str	r6, [r4, #8]
 8017ca6:	2e00      	cmp	r6, #0
 8017ca8:	bfa2      	ittt	ge
 8017caa:	6821      	ldrge	r1, [r4, #0]
 8017cac:	f021 0104 	bicge.w	r1, r1, #4
 8017cb0:	6021      	strge	r1, [r4, #0]
 8017cb2:	b90d      	cbnz	r5, 8017cb8 <_printf_i+0x110>
 8017cb4:	2e00      	cmp	r6, #0
 8017cb6:	d04b      	beq.n	8017d50 <_printf_i+0x1a8>
 8017cb8:	4616      	mov	r6, r2
 8017cba:	fbb5 f1f3 	udiv	r1, r5, r3
 8017cbe:	fb03 5711 	mls	r7, r3, r1, r5
 8017cc2:	5dc7      	ldrb	r7, [r0, r7]
 8017cc4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017cc8:	462f      	mov	r7, r5
 8017cca:	42bb      	cmp	r3, r7
 8017ccc:	460d      	mov	r5, r1
 8017cce:	d9f4      	bls.n	8017cba <_printf_i+0x112>
 8017cd0:	2b08      	cmp	r3, #8
 8017cd2:	d10b      	bne.n	8017cec <_printf_i+0x144>
 8017cd4:	6823      	ldr	r3, [r4, #0]
 8017cd6:	07df      	lsls	r7, r3, #31
 8017cd8:	d508      	bpl.n	8017cec <_printf_i+0x144>
 8017cda:	6923      	ldr	r3, [r4, #16]
 8017cdc:	6861      	ldr	r1, [r4, #4]
 8017cde:	4299      	cmp	r1, r3
 8017ce0:	bfde      	ittt	le
 8017ce2:	2330      	movle	r3, #48	@ 0x30
 8017ce4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017ce8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017cec:	1b92      	subs	r2, r2, r6
 8017cee:	6122      	str	r2, [r4, #16]
 8017cf0:	f8cd a000 	str.w	sl, [sp]
 8017cf4:	464b      	mov	r3, r9
 8017cf6:	aa03      	add	r2, sp, #12
 8017cf8:	4621      	mov	r1, r4
 8017cfa:	4640      	mov	r0, r8
 8017cfc:	f7ff fee6 	bl	8017acc <_printf_common>
 8017d00:	3001      	adds	r0, #1
 8017d02:	d14a      	bne.n	8017d9a <_printf_i+0x1f2>
 8017d04:	f04f 30ff 	mov.w	r0, #4294967295
 8017d08:	b004      	add	sp, #16
 8017d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d0e:	6823      	ldr	r3, [r4, #0]
 8017d10:	f043 0320 	orr.w	r3, r3, #32
 8017d14:	6023      	str	r3, [r4, #0]
 8017d16:	4833      	ldr	r0, [pc, #204]	@ (8017de4 <_printf_i+0x23c>)
 8017d18:	2778      	movs	r7, #120	@ 0x78
 8017d1a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017d1e:	6823      	ldr	r3, [r4, #0]
 8017d20:	6831      	ldr	r1, [r6, #0]
 8017d22:	061f      	lsls	r7, r3, #24
 8017d24:	f851 5b04 	ldr.w	r5, [r1], #4
 8017d28:	d402      	bmi.n	8017d30 <_printf_i+0x188>
 8017d2a:	065f      	lsls	r7, r3, #25
 8017d2c:	bf48      	it	mi
 8017d2e:	b2ad      	uxthmi	r5, r5
 8017d30:	6031      	str	r1, [r6, #0]
 8017d32:	07d9      	lsls	r1, r3, #31
 8017d34:	bf44      	itt	mi
 8017d36:	f043 0320 	orrmi.w	r3, r3, #32
 8017d3a:	6023      	strmi	r3, [r4, #0]
 8017d3c:	b11d      	cbz	r5, 8017d46 <_printf_i+0x19e>
 8017d3e:	2310      	movs	r3, #16
 8017d40:	e7ac      	b.n	8017c9c <_printf_i+0xf4>
 8017d42:	4827      	ldr	r0, [pc, #156]	@ (8017de0 <_printf_i+0x238>)
 8017d44:	e7e9      	b.n	8017d1a <_printf_i+0x172>
 8017d46:	6823      	ldr	r3, [r4, #0]
 8017d48:	f023 0320 	bic.w	r3, r3, #32
 8017d4c:	6023      	str	r3, [r4, #0]
 8017d4e:	e7f6      	b.n	8017d3e <_printf_i+0x196>
 8017d50:	4616      	mov	r6, r2
 8017d52:	e7bd      	b.n	8017cd0 <_printf_i+0x128>
 8017d54:	6833      	ldr	r3, [r6, #0]
 8017d56:	6825      	ldr	r5, [r4, #0]
 8017d58:	6961      	ldr	r1, [r4, #20]
 8017d5a:	1d18      	adds	r0, r3, #4
 8017d5c:	6030      	str	r0, [r6, #0]
 8017d5e:	062e      	lsls	r6, r5, #24
 8017d60:	681b      	ldr	r3, [r3, #0]
 8017d62:	d501      	bpl.n	8017d68 <_printf_i+0x1c0>
 8017d64:	6019      	str	r1, [r3, #0]
 8017d66:	e002      	b.n	8017d6e <_printf_i+0x1c6>
 8017d68:	0668      	lsls	r0, r5, #25
 8017d6a:	d5fb      	bpl.n	8017d64 <_printf_i+0x1bc>
 8017d6c:	8019      	strh	r1, [r3, #0]
 8017d6e:	2300      	movs	r3, #0
 8017d70:	6123      	str	r3, [r4, #16]
 8017d72:	4616      	mov	r6, r2
 8017d74:	e7bc      	b.n	8017cf0 <_printf_i+0x148>
 8017d76:	6833      	ldr	r3, [r6, #0]
 8017d78:	1d1a      	adds	r2, r3, #4
 8017d7a:	6032      	str	r2, [r6, #0]
 8017d7c:	681e      	ldr	r6, [r3, #0]
 8017d7e:	6862      	ldr	r2, [r4, #4]
 8017d80:	2100      	movs	r1, #0
 8017d82:	4630      	mov	r0, r6
 8017d84:	f7e8 fa3c 	bl	8000200 <memchr>
 8017d88:	b108      	cbz	r0, 8017d8e <_printf_i+0x1e6>
 8017d8a:	1b80      	subs	r0, r0, r6
 8017d8c:	6060      	str	r0, [r4, #4]
 8017d8e:	6863      	ldr	r3, [r4, #4]
 8017d90:	6123      	str	r3, [r4, #16]
 8017d92:	2300      	movs	r3, #0
 8017d94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017d98:	e7aa      	b.n	8017cf0 <_printf_i+0x148>
 8017d9a:	6923      	ldr	r3, [r4, #16]
 8017d9c:	4632      	mov	r2, r6
 8017d9e:	4649      	mov	r1, r9
 8017da0:	4640      	mov	r0, r8
 8017da2:	47d0      	blx	sl
 8017da4:	3001      	adds	r0, #1
 8017da6:	d0ad      	beq.n	8017d04 <_printf_i+0x15c>
 8017da8:	6823      	ldr	r3, [r4, #0]
 8017daa:	079b      	lsls	r3, r3, #30
 8017dac:	d413      	bmi.n	8017dd6 <_printf_i+0x22e>
 8017dae:	68e0      	ldr	r0, [r4, #12]
 8017db0:	9b03      	ldr	r3, [sp, #12]
 8017db2:	4298      	cmp	r0, r3
 8017db4:	bfb8      	it	lt
 8017db6:	4618      	movlt	r0, r3
 8017db8:	e7a6      	b.n	8017d08 <_printf_i+0x160>
 8017dba:	2301      	movs	r3, #1
 8017dbc:	4632      	mov	r2, r6
 8017dbe:	4649      	mov	r1, r9
 8017dc0:	4640      	mov	r0, r8
 8017dc2:	47d0      	blx	sl
 8017dc4:	3001      	adds	r0, #1
 8017dc6:	d09d      	beq.n	8017d04 <_printf_i+0x15c>
 8017dc8:	3501      	adds	r5, #1
 8017dca:	68e3      	ldr	r3, [r4, #12]
 8017dcc:	9903      	ldr	r1, [sp, #12]
 8017dce:	1a5b      	subs	r3, r3, r1
 8017dd0:	42ab      	cmp	r3, r5
 8017dd2:	dcf2      	bgt.n	8017dba <_printf_i+0x212>
 8017dd4:	e7eb      	b.n	8017dae <_printf_i+0x206>
 8017dd6:	2500      	movs	r5, #0
 8017dd8:	f104 0619 	add.w	r6, r4, #25
 8017ddc:	e7f5      	b.n	8017dca <_printf_i+0x222>
 8017dde:	bf00      	nop
 8017de0:	0801b788 	.word	0x0801b788
 8017de4:	0801b799 	.word	0x0801b799

08017de8 <__sflush_r>:
 8017de8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017df0:	0716      	lsls	r6, r2, #28
 8017df2:	4605      	mov	r5, r0
 8017df4:	460c      	mov	r4, r1
 8017df6:	d454      	bmi.n	8017ea2 <__sflush_r+0xba>
 8017df8:	684b      	ldr	r3, [r1, #4]
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	dc02      	bgt.n	8017e04 <__sflush_r+0x1c>
 8017dfe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	dd48      	ble.n	8017e96 <__sflush_r+0xae>
 8017e04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017e06:	2e00      	cmp	r6, #0
 8017e08:	d045      	beq.n	8017e96 <__sflush_r+0xae>
 8017e0a:	2300      	movs	r3, #0
 8017e0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017e10:	682f      	ldr	r7, [r5, #0]
 8017e12:	6a21      	ldr	r1, [r4, #32]
 8017e14:	602b      	str	r3, [r5, #0]
 8017e16:	d030      	beq.n	8017e7a <__sflush_r+0x92>
 8017e18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017e1a:	89a3      	ldrh	r3, [r4, #12]
 8017e1c:	0759      	lsls	r1, r3, #29
 8017e1e:	d505      	bpl.n	8017e2c <__sflush_r+0x44>
 8017e20:	6863      	ldr	r3, [r4, #4]
 8017e22:	1ad2      	subs	r2, r2, r3
 8017e24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017e26:	b10b      	cbz	r3, 8017e2c <__sflush_r+0x44>
 8017e28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017e2a:	1ad2      	subs	r2, r2, r3
 8017e2c:	2300      	movs	r3, #0
 8017e2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017e30:	6a21      	ldr	r1, [r4, #32]
 8017e32:	4628      	mov	r0, r5
 8017e34:	47b0      	blx	r6
 8017e36:	1c43      	adds	r3, r0, #1
 8017e38:	89a3      	ldrh	r3, [r4, #12]
 8017e3a:	d106      	bne.n	8017e4a <__sflush_r+0x62>
 8017e3c:	6829      	ldr	r1, [r5, #0]
 8017e3e:	291d      	cmp	r1, #29
 8017e40:	d82b      	bhi.n	8017e9a <__sflush_r+0xb2>
 8017e42:	4a2a      	ldr	r2, [pc, #168]	@ (8017eec <__sflush_r+0x104>)
 8017e44:	410a      	asrs	r2, r1
 8017e46:	07d6      	lsls	r6, r2, #31
 8017e48:	d427      	bmi.n	8017e9a <__sflush_r+0xb2>
 8017e4a:	2200      	movs	r2, #0
 8017e4c:	6062      	str	r2, [r4, #4]
 8017e4e:	04d9      	lsls	r1, r3, #19
 8017e50:	6922      	ldr	r2, [r4, #16]
 8017e52:	6022      	str	r2, [r4, #0]
 8017e54:	d504      	bpl.n	8017e60 <__sflush_r+0x78>
 8017e56:	1c42      	adds	r2, r0, #1
 8017e58:	d101      	bne.n	8017e5e <__sflush_r+0x76>
 8017e5a:	682b      	ldr	r3, [r5, #0]
 8017e5c:	b903      	cbnz	r3, 8017e60 <__sflush_r+0x78>
 8017e5e:	6560      	str	r0, [r4, #84]	@ 0x54
 8017e60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017e62:	602f      	str	r7, [r5, #0]
 8017e64:	b1b9      	cbz	r1, 8017e96 <__sflush_r+0xae>
 8017e66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017e6a:	4299      	cmp	r1, r3
 8017e6c:	d002      	beq.n	8017e74 <__sflush_r+0x8c>
 8017e6e:	4628      	mov	r0, r5
 8017e70:	f7ff fa92 	bl	8017398 <_free_r>
 8017e74:	2300      	movs	r3, #0
 8017e76:	6363      	str	r3, [r4, #52]	@ 0x34
 8017e78:	e00d      	b.n	8017e96 <__sflush_r+0xae>
 8017e7a:	2301      	movs	r3, #1
 8017e7c:	4628      	mov	r0, r5
 8017e7e:	47b0      	blx	r6
 8017e80:	4602      	mov	r2, r0
 8017e82:	1c50      	adds	r0, r2, #1
 8017e84:	d1c9      	bne.n	8017e1a <__sflush_r+0x32>
 8017e86:	682b      	ldr	r3, [r5, #0]
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d0c6      	beq.n	8017e1a <__sflush_r+0x32>
 8017e8c:	2b1d      	cmp	r3, #29
 8017e8e:	d001      	beq.n	8017e94 <__sflush_r+0xac>
 8017e90:	2b16      	cmp	r3, #22
 8017e92:	d11e      	bne.n	8017ed2 <__sflush_r+0xea>
 8017e94:	602f      	str	r7, [r5, #0]
 8017e96:	2000      	movs	r0, #0
 8017e98:	e022      	b.n	8017ee0 <__sflush_r+0xf8>
 8017e9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017e9e:	b21b      	sxth	r3, r3
 8017ea0:	e01b      	b.n	8017eda <__sflush_r+0xf2>
 8017ea2:	690f      	ldr	r7, [r1, #16]
 8017ea4:	2f00      	cmp	r7, #0
 8017ea6:	d0f6      	beq.n	8017e96 <__sflush_r+0xae>
 8017ea8:	0793      	lsls	r3, r2, #30
 8017eaa:	680e      	ldr	r6, [r1, #0]
 8017eac:	bf08      	it	eq
 8017eae:	694b      	ldreq	r3, [r1, #20]
 8017eb0:	600f      	str	r7, [r1, #0]
 8017eb2:	bf18      	it	ne
 8017eb4:	2300      	movne	r3, #0
 8017eb6:	eba6 0807 	sub.w	r8, r6, r7
 8017eba:	608b      	str	r3, [r1, #8]
 8017ebc:	f1b8 0f00 	cmp.w	r8, #0
 8017ec0:	dde9      	ble.n	8017e96 <__sflush_r+0xae>
 8017ec2:	6a21      	ldr	r1, [r4, #32]
 8017ec4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017ec6:	4643      	mov	r3, r8
 8017ec8:	463a      	mov	r2, r7
 8017eca:	4628      	mov	r0, r5
 8017ecc:	47b0      	blx	r6
 8017ece:	2800      	cmp	r0, #0
 8017ed0:	dc08      	bgt.n	8017ee4 <__sflush_r+0xfc>
 8017ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017ed6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017eda:	81a3      	strh	r3, [r4, #12]
 8017edc:	f04f 30ff 	mov.w	r0, #4294967295
 8017ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ee4:	4407      	add	r7, r0
 8017ee6:	eba8 0800 	sub.w	r8, r8, r0
 8017eea:	e7e7      	b.n	8017ebc <__sflush_r+0xd4>
 8017eec:	dfbffffe 	.word	0xdfbffffe

08017ef0 <_fflush_r>:
 8017ef0:	b538      	push	{r3, r4, r5, lr}
 8017ef2:	690b      	ldr	r3, [r1, #16]
 8017ef4:	4605      	mov	r5, r0
 8017ef6:	460c      	mov	r4, r1
 8017ef8:	b913      	cbnz	r3, 8017f00 <_fflush_r+0x10>
 8017efa:	2500      	movs	r5, #0
 8017efc:	4628      	mov	r0, r5
 8017efe:	bd38      	pop	{r3, r4, r5, pc}
 8017f00:	b118      	cbz	r0, 8017f0a <_fflush_r+0x1a>
 8017f02:	6a03      	ldr	r3, [r0, #32]
 8017f04:	b90b      	cbnz	r3, 8017f0a <_fflush_r+0x1a>
 8017f06:	f7fe ff87 	bl	8016e18 <__sinit>
 8017f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017f0e:	2b00      	cmp	r3, #0
 8017f10:	d0f3      	beq.n	8017efa <_fflush_r+0xa>
 8017f12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017f14:	07d0      	lsls	r0, r2, #31
 8017f16:	d404      	bmi.n	8017f22 <_fflush_r+0x32>
 8017f18:	0599      	lsls	r1, r3, #22
 8017f1a:	d402      	bmi.n	8017f22 <_fflush_r+0x32>
 8017f1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017f1e:	f7ff fa0c 	bl	801733a <__retarget_lock_acquire_recursive>
 8017f22:	4628      	mov	r0, r5
 8017f24:	4621      	mov	r1, r4
 8017f26:	f7ff ff5f 	bl	8017de8 <__sflush_r>
 8017f2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017f2c:	07da      	lsls	r2, r3, #31
 8017f2e:	4605      	mov	r5, r0
 8017f30:	d4e4      	bmi.n	8017efc <_fflush_r+0xc>
 8017f32:	89a3      	ldrh	r3, [r4, #12]
 8017f34:	059b      	lsls	r3, r3, #22
 8017f36:	d4e1      	bmi.n	8017efc <_fflush_r+0xc>
 8017f38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017f3a:	f7ff f9ff 	bl	801733c <__retarget_lock_release_recursive>
 8017f3e:	e7dd      	b.n	8017efc <_fflush_r+0xc>

08017f40 <fiprintf>:
 8017f40:	b40e      	push	{r1, r2, r3}
 8017f42:	b503      	push	{r0, r1, lr}
 8017f44:	4601      	mov	r1, r0
 8017f46:	ab03      	add	r3, sp, #12
 8017f48:	4805      	ldr	r0, [pc, #20]	@ (8017f60 <fiprintf+0x20>)
 8017f4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8017f4e:	6800      	ldr	r0, [r0, #0]
 8017f50:	9301      	str	r3, [sp, #4]
 8017f52:	f7ff fca3 	bl	801789c <_vfiprintf_r>
 8017f56:	b002      	add	sp, #8
 8017f58:	f85d eb04 	ldr.w	lr, [sp], #4
 8017f5c:	b003      	add	sp, #12
 8017f5e:	4770      	bx	lr
 8017f60:	20000044 	.word	0x20000044

08017f64 <__swhatbuf_r>:
 8017f64:	b570      	push	{r4, r5, r6, lr}
 8017f66:	460c      	mov	r4, r1
 8017f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f6c:	2900      	cmp	r1, #0
 8017f6e:	b096      	sub	sp, #88	@ 0x58
 8017f70:	4615      	mov	r5, r2
 8017f72:	461e      	mov	r6, r3
 8017f74:	da0d      	bge.n	8017f92 <__swhatbuf_r+0x2e>
 8017f76:	89a3      	ldrh	r3, [r4, #12]
 8017f78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017f7c:	f04f 0100 	mov.w	r1, #0
 8017f80:	bf14      	ite	ne
 8017f82:	2340      	movne	r3, #64	@ 0x40
 8017f84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017f88:	2000      	movs	r0, #0
 8017f8a:	6031      	str	r1, [r6, #0]
 8017f8c:	602b      	str	r3, [r5, #0]
 8017f8e:	b016      	add	sp, #88	@ 0x58
 8017f90:	bd70      	pop	{r4, r5, r6, pc}
 8017f92:	466a      	mov	r2, sp
 8017f94:	f000 f848 	bl	8018028 <_fstat_r>
 8017f98:	2800      	cmp	r0, #0
 8017f9a:	dbec      	blt.n	8017f76 <__swhatbuf_r+0x12>
 8017f9c:	9901      	ldr	r1, [sp, #4]
 8017f9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017fa2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017fa6:	4259      	negs	r1, r3
 8017fa8:	4159      	adcs	r1, r3
 8017faa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017fae:	e7eb      	b.n	8017f88 <__swhatbuf_r+0x24>

08017fb0 <__smakebuf_r>:
 8017fb0:	898b      	ldrh	r3, [r1, #12]
 8017fb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017fb4:	079d      	lsls	r5, r3, #30
 8017fb6:	4606      	mov	r6, r0
 8017fb8:	460c      	mov	r4, r1
 8017fba:	d507      	bpl.n	8017fcc <__smakebuf_r+0x1c>
 8017fbc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017fc0:	6023      	str	r3, [r4, #0]
 8017fc2:	6123      	str	r3, [r4, #16]
 8017fc4:	2301      	movs	r3, #1
 8017fc6:	6163      	str	r3, [r4, #20]
 8017fc8:	b003      	add	sp, #12
 8017fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017fcc:	ab01      	add	r3, sp, #4
 8017fce:	466a      	mov	r2, sp
 8017fd0:	f7ff ffc8 	bl	8017f64 <__swhatbuf_r>
 8017fd4:	9f00      	ldr	r7, [sp, #0]
 8017fd6:	4605      	mov	r5, r0
 8017fd8:	4639      	mov	r1, r7
 8017fda:	4630      	mov	r0, r6
 8017fdc:	f7ff fa50 	bl	8017480 <_malloc_r>
 8017fe0:	b948      	cbnz	r0, 8017ff6 <__smakebuf_r+0x46>
 8017fe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017fe6:	059a      	lsls	r2, r3, #22
 8017fe8:	d4ee      	bmi.n	8017fc8 <__smakebuf_r+0x18>
 8017fea:	f023 0303 	bic.w	r3, r3, #3
 8017fee:	f043 0302 	orr.w	r3, r3, #2
 8017ff2:	81a3      	strh	r3, [r4, #12]
 8017ff4:	e7e2      	b.n	8017fbc <__smakebuf_r+0xc>
 8017ff6:	89a3      	ldrh	r3, [r4, #12]
 8017ff8:	6020      	str	r0, [r4, #0]
 8017ffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017ffe:	81a3      	strh	r3, [r4, #12]
 8018000:	9b01      	ldr	r3, [sp, #4]
 8018002:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018006:	b15b      	cbz	r3, 8018020 <__smakebuf_r+0x70>
 8018008:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801800c:	4630      	mov	r0, r6
 801800e:	f000 f81d 	bl	801804c <_isatty_r>
 8018012:	b128      	cbz	r0, 8018020 <__smakebuf_r+0x70>
 8018014:	89a3      	ldrh	r3, [r4, #12]
 8018016:	f023 0303 	bic.w	r3, r3, #3
 801801a:	f043 0301 	orr.w	r3, r3, #1
 801801e:	81a3      	strh	r3, [r4, #12]
 8018020:	89a3      	ldrh	r3, [r4, #12]
 8018022:	431d      	orrs	r5, r3
 8018024:	81a5      	strh	r5, [r4, #12]
 8018026:	e7cf      	b.n	8017fc8 <__smakebuf_r+0x18>

08018028 <_fstat_r>:
 8018028:	b538      	push	{r3, r4, r5, lr}
 801802a:	4d07      	ldr	r5, [pc, #28]	@ (8018048 <_fstat_r+0x20>)
 801802c:	2300      	movs	r3, #0
 801802e:	4604      	mov	r4, r0
 8018030:	4608      	mov	r0, r1
 8018032:	4611      	mov	r1, r2
 8018034:	602b      	str	r3, [r5, #0]
 8018036:	f7e9 f9e7 	bl	8001408 <_fstat>
 801803a:	1c43      	adds	r3, r0, #1
 801803c:	d102      	bne.n	8018044 <_fstat_r+0x1c>
 801803e:	682b      	ldr	r3, [r5, #0]
 8018040:	b103      	cbz	r3, 8018044 <_fstat_r+0x1c>
 8018042:	6023      	str	r3, [r4, #0]
 8018044:	bd38      	pop	{r3, r4, r5, pc}
 8018046:	bf00      	nop
 8018048:	2000cdac 	.word	0x2000cdac

0801804c <_isatty_r>:
 801804c:	b538      	push	{r3, r4, r5, lr}
 801804e:	4d06      	ldr	r5, [pc, #24]	@ (8018068 <_isatty_r+0x1c>)
 8018050:	2300      	movs	r3, #0
 8018052:	4604      	mov	r4, r0
 8018054:	4608      	mov	r0, r1
 8018056:	602b      	str	r3, [r5, #0]
 8018058:	f7e9 f9e6 	bl	8001428 <_isatty>
 801805c:	1c43      	adds	r3, r0, #1
 801805e:	d102      	bne.n	8018066 <_isatty_r+0x1a>
 8018060:	682b      	ldr	r3, [r5, #0]
 8018062:	b103      	cbz	r3, 8018066 <_isatty_r+0x1a>
 8018064:	6023      	str	r3, [r4, #0]
 8018066:	bd38      	pop	{r3, r4, r5, pc}
 8018068:	2000cdac 	.word	0x2000cdac

0801806c <_sbrk_r>:
 801806c:	b538      	push	{r3, r4, r5, lr}
 801806e:	4d06      	ldr	r5, [pc, #24]	@ (8018088 <_sbrk_r+0x1c>)
 8018070:	2300      	movs	r3, #0
 8018072:	4604      	mov	r4, r0
 8018074:	4608      	mov	r0, r1
 8018076:	602b      	str	r3, [r5, #0]
 8018078:	f7e9 f9ee 	bl	8001458 <_sbrk>
 801807c:	1c43      	adds	r3, r0, #1
 801807e:	d102      	bne.n	8018086 <_sbrk_r+0x1a>
 8018080:	682b      	ldr	r3, [r5, #0]
 8018082:	b103      	cbz	r3, 8018086 <_sbrk_r+0x1a>
 8018084:	6023      	str	r3, [r4, #0]
 8018086:	bd38      	pop	{r3, r4, r5, pc}
 8018088:	2000cdac 	.word	0x2000cdac

0801808c <abort>:
 801808c:	b508      	push	{r3, lr}
 801808e:	2006      	movs	r0, #6
 8018090:	f000 f85a 	bl	8018148 <raise>
 8018094:	2001      	movs	r0, #1
 8018096:	f7e9 f983 	bl	80013a0 <_exit>

0801809a <_realloc_r>:
 801809a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801809e:	4680      	mov	r8, r0
 80180a0:	4615      	mov	r5, r2
 80180a2:	460c      	mov	r4, r1
 80180a4:	b921      	cbnz	r1, 80180b0 <_realloc_r+0x16>
 80180a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80180aa:	4611      	mov	r1, r2
 80180ac:	f7ff b9e8 	b.w	8017480 <_malloc_r>
 80180b0:	b92a      	cbnz	r2, 80180be <_realloc_r+0x24>
 80180b2:	f7ff f971 	bl	8017398 <_free_r>
 80180b6:	2400      	movs	r4, #0
 80180b8:	4620      	mov	r0, r4
 80180ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180be:	f000 f85f 	bl	8018180 <_malloc_usable_size_r>
 80180c2:	4285      	cmp	r5, r0
 80180c4:	4606      	mov	r6, r0
 80180c6:	d802      	bhi.n	80180ce <_realloc_r+0x34>
 80180c8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80180cc:	d8f4      	bhi.n	80180b8 <_realloc_r+0x1e>
 80180ce:	4629      	mov	r1, r5
 80180d0:	4640      	mov	r0, r8
 80180d2:	f7ff f9d5 	bl	8017480 <_malloc_r>
 80180d6:	4607      	mov	r7, r0
 80180d8:	2800      	cmp	r0, #0
 80180da:	d0ec      	beq.n	80180b6 <_realloc_r+0x1c>
 80180dc:	42b5      	cmp	r5, r6
 80180de:	462a      	mov	r2, r5
 80180e0:	4621      	mov	r1, r4
 80180e2:	bf28      	it	cs
 80180e4:	4632      	movcs	r2, r6
 80180e6:	f7ff f92a 	bl	801733e <memcpy>
 80180ea:	4621      	mov	r1, r4
 80180ec:	4640      	mov	r0, r8
 80180ee:	f7ff f953 	bl	8017398 <_free_r>
 80180f2:	463c      	mov	r4, r7
 80180f4:	e7e0      	b.n	80180b8 <_realloc_r+0x1e>

080180f6 <_raise_r>:
 80180f6:	291f      	cmp	r1, #31
 80180f8:	b538      	push	{r3, r4, r5, lr}
 80180fa:	4605      	mov	r5, r0
 80180fc:	460c      	mov	r4, r1
 80180fe:	d904      	bls.n	801810a <_raise_r+0x14>
 8018100:	2316      	movs	r3, #22
 8018102:	6003      	str	r3, [r0, #0]
 8018104:	f04f 30ff 	mov.w	r0, #4294967295
 8018108:	bd38      	pop	{r3, r4, r5, pc}
 801810a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801810c:	b112      	cbz	r2, 8018114 <_raise_r+0x1e>
 801810e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018112:	b94b      	cbnz	r3, 8018128 <_raise_r+0x32>
 8018114:	4628      	mov	r0, r5
 8018116:	f000 f831 	bl	801817c <_getpid_r>
 801811a:	4622      	mov	r2, r4
 801811c:	4601      	mov	r1, r0
 801811e:	4628      	mov	r0, r5
 8018120:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018124:	f000 b818 	b.w	8018158 <_kill_r>
 8018128:	2b01      	cmp	r3, #1
 801812a:	d00a      	beq.n	8018142 <_raise_r+0x4c>
 801812c:	1c59      	adds	r1, r3, #1
 801812e:	d103      	bne.n	8018138 <_raise_r+0x42>
 8018130:	2316      	movs	r3, #22
 8018132:	6003      	str	r3, [r0, #0]
 8018134:	2001      	movs	r0, #1
 8018136:	e7e7      	b.n	8018108 <_raise_r+0x12>
 8018138:	2100      	movs	r1, #0
 801813a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801813e:	4620      	mov	r0, r4
 8018140:	4798      	blx	r3
 8018142:	2000      	movs	r0, #0
 8018144:	e7e0      	b.n	8018108 <_raise_r+0x12>
	...

08018148 <raise>:
 8018148:	4b02      	ldr	r3, [pc, #8]	@ (8018154 <raise+0xc>)
 801814a:	4601      	mov	r1, r0
 801814c:	6818      	ldr	r0, [r3, #0]
 801814e:	f7ff bfd2 	b.w	80180f6 <_raise_r>
 8018152:	bf00      	nop
 8018154:	20000044 	.word	0x20000044

08018158 <_kill_r>:
 8018158:	b538      	push	{r3, r4, r5, lr}
 801815a:	4d07      	ldr	r5, [pc, #28]	@ (8018178 <_kill_r+0x20>)
 801815c:	2300      	movs	r3, #0
 801815e:	4604      	mov	r4, r0
 8018160:	4608      	mov	r0, r1
 8018162:	4611      	mov	r1, r2
 8018164:	602b      	str	r3, [r5, #0]
 8018166:	f7e9 f909 	bl	800137c <_kill>
 801816a:	1c43      	adds	r3, r0, #1
 801816c:	d102      	bne.n	8018174 <_kill_r+0x1c>
 801816e:	682b      	ldr	r3, [r5, #0]
 8018170:	b103      	cbz	r3, 8018174 <_kill_r+0x1c>
 8018172:	6023      	str	r3, [r4, #0]
 8018174:	bd38      	pop	{r3, r4, r5, pc}
 8018176:	bf00      	nop
 8018178:	2000cdac 	.word	0x2000cdac

0801817c <_getpid_r>:
 801817c:	f7e9 b8f6 	b.w	800136c <_getpid>

08018180 <_malloc_usable_size_r>:
 8018180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018184:	1f18      	subs	r0, r3, #4
 8018186:	2b00      	cmp	r3, #0
 8018188:	bfbc      	itt	lt
 801818a:	580b      	ldrlt	r3, [r1, r0]
 801818c:	18c0      	addlt	r0, r0, r3
 801818e:	4770      	bx	lr

08018190 <_init>:
 8018190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018192:	bf00      	nop
 8018194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018196:	bc08      	pop	{r3}
 8018198:	469e      	mov	lr, r3
 801819a:	4770      	bx	lr

0801819c <_fini>:
 801819c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801819e:	bf00      	nop
 80181a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80181a2:	bc08      	pop	{r3}
 80181a4:	469e      	mov	lr, r3
 80181a6:	4770      	bx	lr
